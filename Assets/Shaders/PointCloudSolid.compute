/**
 * Copyright (c) 2019 LG Electronics, Inc.
 *
 * This software contains code licensed as described in LICENSE.
 *
 */

#pragma kernel SetupCopy
#pragma only_renderers d3d11 vulkan metal

RWTexture2D<float4> _SetupCopyInput;
RWTexture2D<float4> _SetupCopyPosition;
RWTexture2D<float4> _SetupCopyColor;
RWTexture2D<float> _SetupCopyDepth;

float _SetupCopyMaxDepth;

[numthreads(8, 8, 1)]
void SetupCopy(uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    _SetupCopyInput.GetDimensions(w, h);

    uint2 input = min(id.xy, uint2(w - 1, h - 1));
    float4 pix = _SetupCopyInput.Load(input);

    float2 xy = float2(float(id.x) / w, float(id.y) / h);
    float z = pix.w == 0 ? _SetupCopyMaxDepth : pix.w;

    _SetupCopyPosition[id.xy] = float4(xy, z, 1);
    _SetupCopyColor[id.xy] = pix;
    _SetupCopyDepth[id.xy] = pix.w;
}


#pragma kernel Downsample

RWTexture2D<float4> _DownsampleInput;
RWTexture2D<float4> _DownsampleOutput;

RWTexture2D<float> _DownsampleDepthInput;
RWTexture2D<float> _DownsampleDepthOutput;

[numthreads(8, 8, 1)]
void Downsample(uint3 id : SV_DispatchThreadID)
{
    float4 a = _DownsampleInput.Load(id.xy * 2 + uint2(0, 0));
    float4 b = _DownsampleInput.Load(id.xy * 2 + uint2(0, 1));
    float4 c = _DownsampleInput.Load(id.xy * 2 + uint2(1, 0));
    float4 d = _DownsampleInput.Load(id.xy * 2 + uint2(1, 1));

    float4 r;
    if (a.z < b.z && a.z < c.z && a.z < d.z)
    {
        r = a;
    }
    else if (b.z < a.z && b.z < c.z && b.z < d.z)
    {
        r = b;
    }
    else if (c.z < a.z && c.z < b.z && c.z < d.z)
    {
        r = c;
    }
    else
    {
        r = d;
    }

    _DownsampleOutput[id.xy] = r;

    float da = _DownsampleDepthInput.Load(id.xy * 2 + uint2(0, 0));
    float db = _DownsampleDepthInput.Load(id.xy * 2 + uint2(0, 1));
    float dc = _DownsampleDepthInput.Load(id.xy * 2 + uint2(1, 0));
    float dd = _DownsampleDepthInput.Load(id.xy * 2 + uint2(1, 1));

    _DownsampleDepthOutput[id.xy] = min(min(da, db), min(dc, dd));
}


#pragma kernel RemoveHidden

Texture2D<float4> _RemoveHiddenPosition;
RWTexture2D<float4> _RemoveHiddenColor;
Texture2D<float> _RemoveHiddenDepth;

float _RemoveHiddenMagic;
int _RemoveHiddenLevel = 0;

float GetOcclusion(float4 x, float4 y)
{
    return 1 - dot(normalize(y.xyz - x.xyz), -normalize(y.xyz));
}

float GetMinOcclusion(float4 pix, uint2 base, int2 delta, int maxlevel)
{
    float4 other = _RemoveHiddenPosition.Load(int3(base, 0), delta);
    float o = GetOcclusion(pix, other);

    for (int level = 1; level <= maxlevel; level++)
    {
        other = _RemoveHiddenPosition.Load(int3(base >> level, level), delta);
        o = min(o, GetOcclusion(pix, other));
    }

    return o;
}

[numthreads(8, 8, 1)]
void RemoveHidden(uint3 id : SV_DispatchThreadID)
{
    uint w, h, levelCount;
    _RemoveHiddenPosition.GetDimensions(0, w, h, levelCount);

    float4 pix = _RemoveHiddenPosition.Load(int3(id.xy, 0));

    int maxlevel;
    if (_RemoveHiddenLevel == 0)
    {
        int depthLevel = 3;
        float z = _RemoveHiddenDepth.Load(int3(id.xy >> depthLevel, depthLevel));

        maxlevel = (int)log2(_RemoveHiddenMagic / z);
    }
    else
    {
        maxlevel = _RemoveHiddenLevel;
    }
    maxlevel = clamp(maxlevel, 0, levelCount - 1);

    float avg = 0;
    avg += GetMinOcclusion(pix, id.xy, int2(-1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, +1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, +1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, +1), maxlevel);
    avg /= 8;

    if (avg < 0.1f)
    {
        _RemoveHiddenColor[id.xy] = float4(0, 0, 0, -1);
    }

    //float4 color;

    //if (maxlevel == 0) color = float4(1, 0, 0, 1);
    //else if (maxlevel <= 4) color = float4(0, 1, 0, 1);
    //else if (maxlevel <= 8) color = float4(0, 0, 1, 1);
    //else if (maxlevel <= 12) color = float4(1, 1, 0, 1);
    //else color = float4(0, 0, 0, 1);
    //_RemoveHiddenColor[id.xy] = color;
}


#pragma kernel PullKernel

RWTexture2D<float4> _PullInput;
RWTexture2D<float4> _PullOutput;

[numthreads(8, 8, 1)]
void PullKernel(uint3 id : SV_DispatchThreadID)
{
    float4 pixA = _PullInput.Load(id.xy * 2 + uint2(0, 0));
    float4 pixB = _PullInput.Load(id.xy * 2 + uint2(0, 1));
    float4 pixC = _PullInput.Load(id.xy * 2 + uint2(1, 0));
    float4 pixD = _PullInput.Load(id.xy * 2 + uint2(1, 1));

    float3 avg = float3(0, 0, 0);
    float r = 0;
    float count = 0;
    if (pixA.w > 0) { avg += pixA.rgb; count += 1; r = pixA.w; }
    if (pixB.w > 0) { avg += pixB.rgb; count += 1; r = r == 0 ? pixB.w : max(r, pixB.w); }
    if (pixC.w > 0) { avg += pixC.rgb; count += 1; r = r == 0 ? pixC.w : max(r, pixC.w); }
    if (pixD.w > 0) { avg += pixD.rgb; count += 1; r = r == 0 ? pixD.w : max(r, pixD.w); }
    if (count != 0) avg /= count;

    _PullOutput[id.xy] = float4(avg, r);
}


#pragma kernel PushKernel

RWTexture2D<float4> _PushInput;
RWTexture2D<float4> _PushOutput;

bool _PushPointFilter = false;

[numthreads(8, 8, 1)]
void PushKernel(uint3 id : SV_DispatchThreadID)
{
    float4 pix = _PushOutput.Load(id.xy);
    if (pix.w > 0) return;

    int2 xy = id.xy / 2;

    float3 avg = float3(0, 0, 0);
    float r = 0;

    if (_PushPointFilter)
    {
        float4 tmp = _PushInput.Load(xy);
        avg = tmp.rgb;
        r = tmp.w;
    }
    else
    {
        int2 dxy = id.xy % 2;

        float4 a, b, c, d;
        if (dxy.x == 0 && dxy.y == 0)
        {
            a = _PushInput.Load(xy);
            b = _PushInput.Load(xy + int2(0, -1));
            c = _PushInput.Load(xy + int2(-1, 0));
            d = _PushInput.Load(xy + int2(-1, -1));
        }
        else if (dxy.x == 0 && dxy.y == 1)
        {
            a = _PushInput.Load(xy);
            b = _PushInput.Load(xy + int2(0, 1));
            c = _PushInput.Load(xy + int2(-1, 0));
            d = _PushInput.Load(xy + int2(-1, 1));
        }
        else if (dxy.x == 1 && dxy.y == 0)
        {
            a = _PushInput.Load(xy);
            b = _PushInput.Load(xy + int2(0, -1));
            c = _PushInput.Load(xy + int2(1, 0));
            d = _PushInput.Load(xy + int2(1, -1));
        }
        else // if (dxy.x == 1 && dxy.y == 1)
        {
            a = _PushInput.Load(xy);
            b = _PushInput.Load(xy + int2(0, 1));
            c = _PushInput.Load(xy + int2(1, 0));
            d = _PushInput.Load(xy + int2(1, 1));
        }

        float count = 0;
        if (a.w > 0) { avg += 9 * a.rgb; count += 9; r = max(r, a.w); }
        if (b.w > 0) { avg += 3 * b.rgb; count += 3; r = max(r, b.w); }
        if (c.w > 0) { avg += 3 * c.rgb; count += 3; r = max(r, c.w); }
        if (d.w > 0) { avg += 1 * d.rgb; count += 1; r = max(r, d.w); }
        if (count != 0) avg /= count;
    }

    _PushOutput[id.xy] = float4(avg, r);
}
