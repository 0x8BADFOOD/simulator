// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/configs/proto/vehicle_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Common {

  /// <summary>Holder for reflection information generated from modules/common/configs/proto/vehicle_config.proto</summary>
  public static partial class VehicleConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/common/configs/proto/vehicle_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VehicleConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFtb2R1bGVzL2NvbW1vbi9jb25maWdzL3Byb3RvL3ZlaGljbGVfY29uZmln",
            "LnByb3RvEg1hcG9sbG8uY29tbW9uGiFtb2R1bGVzL2NvbW1vbi9wcm90by9o",
            "ZWFkZXIucHJvdG8aI21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21ldHJ5LnBy",
            "b3RvIpEBCglUcmFuc2Zvcm0SFAoMc291cmNlX2ZyYW1lGAEgASgMEhQKDHRh",
            "cmdldF9mcmFtZRgCIAEoDBIrCgt0cmFuc2xhdGlvbhgDIAEoCzIWLmFwb2xs",
            "by5jb21tb24uUG9pbnQzRBIrCghyb3RhdGlvbhgEIAEoCzIZLmFwb2xsby5j",
            "b21tb24uUXVhdGVybmlvbiI5CgpFeHRyaW5zaWNzEisKCXRhbnNmb3JtcxgB",
            "IAMoCzIYLmFwb2xsby5jb21tb24uVHJhbnNmb3JtIqMECgxWZWhpY2xlUGFy",
            "YW0SNwoFYnJhbmQYASABKA4yKC5hcG9sbG8uY29tbW9uLlZlaGljbGVQYXJh",
            "bS5WZWhpY2xlQnJhbmQSHAoUZnJvbnRfZWRnZV90b19jZW50ZXIYAiABKAES",
            "GwoTYmFja19lZGdlX3RvX2NlbnRlchgDIAEoARIbChNsZWZ0X2VkZ2VfdG9f",
            "Y2VudGVyGAQgASgBEhwKFHJpZ2h0X2VkZ2VfdG9fY2VudGVyGAUgASgBEg4K",
            "Bmxlbmd0aBgGIAEoARINCgV3aWR0aBgHIAEoARIOCgZoZWlnaHQYCCABKAES",
            "FwoPbWluX3R1cm5fcmFkaXVzGAkgASgBEhgKEG1heF9hY2NlbGVyYXRpb24Y",
            "CiABKAESGAoQbWF4X2RlY2VsZXJhdGlvbhgLIAEoARIXCg9tYXhfc3RlZXJf",
            "YW5nbGUYDCABKAESHAoUbWF4X3N0ZWVyX2FuZ2xlX3JhdGUYDSABKAESHAoU",
            "bWluX3N0ZWVyX2FuZ2xlX3JhdGUYDiABKAESEwoLc3RlZXJfcmF0aW8YDyAB",
            "KAESEgoKd2hlZWxfYmFzZRgQIAEoARIcChR3aGVlbF9yb2xsaW5nX3JhZGl1",
            "cxgRIAEoARIiChptYXhfYWJzX3NwZWVkX3doZW5fc3RvcHBlZBgSIAEoAiIo",
            "CgxWZWhpY2xlQnJhbmQSDwoLTElOQ09MTl9NS1oQABIHCgNHRU0QASKZAQoN",
            "VmVoaWNsZUNvbmZpZxIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9u",
            "LkhlYWRlchIyCg12ZWhpY2xlX3BhcmFtGAIgASgLMhsuYXBvbGxvLmNvbW1v",
            "bi5WZWhpY2xlUGFyYW0SLQoKZXh0cmluc2ljcxgDIAEoCzIZLmFwb2xsby5j",
            "b21tb24uRXh0cmluc2ljc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Transform), global::Apollo.Common.Transform.Parser, new[]{ "SourceFrame", "TargetFrame", "Translation", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Extrinsics), global::Apollo.Common.Extrinsics.Parser, new[]{ "Tansforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.VehicleParam), global::Apollo.Common.VehicleParam.Parser, new[]{ "Brand", "FrontEdgeToCenter", "BackEdgeToCenter", "LeftEdgeToCenter", "RightEdgeToCenter", "Length", "Width", "Height", "MinTurnRadius", "MaxAcceleration", "MaxDeceleration", "MaxSteerAngle", "MaxSteerAngleRate", "MinSteerAngleRate", "SteerRatio", "WheelBase", "WheelRollingRadius", "MaxAbsSpeedWhenStopped" }, null, new[]{ typeof(global::Apollo.Common.VehicleParam.Types.VehicleBrand) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.VehicleConfig), global::Apollo.Common.VehicleConfig.Parser, new[]{ "Header", "VehicleParam", "Extrinsics" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.VehicleConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      sourceFrame_ = other.sourceFrame_;
      targetFrame_ = other.targetFrame_;
      Translation = other.translation_ != null ? other.Translation.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "source_frame" field.</summary>
    public const int SourceFrameFieldNumber = 1;
    private pb::ByteString sourceFrame_ = pb::ByteString.Empty;
    /// <summary>
    /// Also known as "frame_id."
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SourceFrame {
      get { return sourceFrame_; }
      set {
        sourceFrame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_frame" field.</summary>
    public const int TargetFrameFieldNumber = 2;
    private pb::ByteString targetFrame_ = pb::ByteString.Empty;
    /// <summary>
    /// Also known as "child_frame_id."
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetFrame {
      get { return targetFrame_; }
      set {
        targetFrame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 3;
    private global::Apollo.Common.Point3D translation_;
    /// <summary>
    /// Position of target in the source frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Translation {
      get { return translation_; }
      set {
        translation_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::Apollo.Common.Quaternion rotation_;
    /// <summary>
    /// Activate rotation from the source frame to the target frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceFrame != other.SourceFrame) return false;
      if (TargetFrame != other.TargetFrame) return false;
      if (!object.Equals(Translation, other.Translation)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceFrame.Length != 0) hash ^= SourceFrame.GetHashCode();
      if (TargetFrame.Length != 0) hash ^= TargetFrame.GetHashCode();
      if (translation_ != null) hash ^= Translation.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceFrame.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SourceFrame);
      }
      if (TargetFrame.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TargetFrame);
      }
      if (translation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Translation);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceFrame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SourceFrame);
      }
      if (TargetFrame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetFrame);
      }
      if (translation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translation);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.SourceFrame.Length != 0) {
        SourceFrame = other.SourceFrame;
      }
      if (other.TargetFrame.Length != 0) {
        TargetFrame = other.TargetFrame;
      }
      if (other.translation_ != null) {
        if (translation_ == null) {
          translation_ = new global::Apollo.Common.Point3D();
        }
        Translation.MergeFrom(other.Translation);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Apollo.Common.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SourceFrame = input.ReadBytes();
            break;
          }
          case 18: {
            TargetFrame = input.ReadBytes();
            break;
          }
          case 26: {
            if (translation_ == null) {
              translation_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(translation_);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              rotation_ = new global::Apollo.Common.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Extrinsics : pb::IMessage<Extrinsics> {
    private static readonly pb::MessageParser<Extrinsics> _parser = new pb::MessageParser<Extrinsics>(() => new Extrinsics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Extrinsics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.VehicleConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extrinsics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extrinsics(Extrinsics other) : this() {
      tansforms_ = other.tansforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extrinsics Clone() {
      return new Extrinsics(this);
    }

    /// <summary>Field number for the "tansforms" field.</summary>
    public const int TansformsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.Transform> _repeated_tansforms_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.Transform.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Transform> tansforms_ = new pbc::RepeatedField<global::Apollo.Common.Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Transform> Tansforms {
      get { return tansforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Extrinsics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Extrinsics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tansforms_.Equals(other.tansforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tansforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tansforms_.WriteTo(output, _repeated_tansforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tansforms_.CalculateSize(_repeated_tansforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Extrinsics other) {
      if (other == null) {
        return;
      }
      tansforms_.Add(other.tansforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tansforms_.AddEntriesFrom(input, _repeated_tansforms_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Vehicle parameters shared among several modules.
  /// By default, all are measured with the SI units (meters, meters per second,
  /// etc.).
  /// </summary>
  public sealed partial class VehicleParam : pb::IMessage<VehicleParam> {
    private static readonly pb::MessageParser<VehicleParam> _parser = new pb::MessageParser<VehicleParam>(() => new VehicleParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.VehicleConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleParam(VehicleParam other) : this() {
      brand_ = other.brand_;
      frontEdgeToCenter_ = other.frontEdgeToCenter_;
      backEdgeToCenter_ = other.backEdgeToCenter_;
      leftEdgeToCenter_ = other.leftEdgeToCenter_;
      rightEdgeToCenter_ = other.rightEdgeToCenter_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      minTurnRadius_ = other.minTurnRadius_;
      maxAcceleration_ = other.maxAcceleration_;
      maxDeceleration_ = other.maxDeceleration_;
      maxSteerAngle_ = other.maxSteerAngle_;
      maxSteerAngleRate_ = other.maxSteerAngleRate_;
      minSteerAngleRate_ = other.minSteerAngleRate_;
      steerRatio_ = other.steerRatio_;
      wheelBase_ = other.wheelBase_;
      wheelRollingRadius_ = other.wheelRollingRadius_;
      maxAbsSpeedWhenStopped_ = other.maxAbsSpeedWhenStopped_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleParam Clone() {
      return new VehicleParam(this);
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 1;
    private global::Apollo.Common.VehicleParam.Types.VehicleBrand brand_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleParam.Types.VehicleBrand Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    /// <summary>Field number for the "front_edge_to_center" field.</summary>
    public const int FrontEdgeToCenterFieldNumber = 2;
    private double frontEdgeToCenter_;
    /// <summary>
    /// Car center point is car reference point, i.e., center of rear axle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrontEdgeToCenter {
      get { return frontEdgeToCenter_; }
      set {
        frontEdgeToCenter_ = value;
      }
    }

    /// <summary>Field number for the "back_edge_to_center" field.</summary>
    public const int BackEdgeToCenterFieldNumber = 3;
    private double backEdgeToCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BackEdgeToCenter {
      get { return backEdgeToCenter_; }
      set {
        backEdgeToCenter_ = value;
      }
    }

    /// <summary>Field number for the "left_edge_to_center" field.</summary>
    public const int LeftEdgeToCenterFieldNumber = 4;
    private double leftEdgeToCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeftEdgeToCenter {
      get { return leftEdgeToCenter_; }
      set {
        leftEdgeToCenter_ = value;
      }
    }

    /// <summary>Field number for the "right_edge_to_center" field.</summary>
    public const int RightEdgeToCenterFieldNumber = 5;
    private double rightEdgeToCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RightEdgeToCenter {
      get { return rightEdgeToCenter_; }
      set {
        rightEdgeToCenter_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 6;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 7;
    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 8;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "min_turn_radius" field.</summary>
    public const int MinTurnRadiusFieldNumber = 9;
    private double minTurnRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinTurnRadius {
      get { return minTurnRadius_; }
      set {
        minTurnRadius_ = value;
      }
    }

    /// <summary>Field number for the "max_acceleration" field.</summary>
    public const int MaxAccelerationFieldNumber = 10;
    private double maxAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAcceleration {
      get { return maxAcceleration_; }
      set {
        maxAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "max_deceleration" field.</summary>
    public const int MaxDecelerationFieldNumber = 11;
    private double maxDeceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxDeceleration {
      get { return maxDeceleration_; }
      set {
        maxDeceleration_ = value;
      }
    }

    /// <summary>Field number for the "max_steer_angle" field.</summary>
    public const int MaxSteerAngleFieldNumber = 12;
    private double maxSteerAngle_;
    /// <summary>
    /// The following items are used to compute trajectory constraints in
    /// planning/control/canbus,
    /// vehicle max steer angle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSteerAngle {
      get { return maxSteerAngle_; }
      set {
        maxSteerAngle_ = value;
      }
    }

    /// <summary>Field number for the "max_steer_angle_rate" field.</summary>
    public const int MaxSteerAngleRateFieldNumber = 13;
    private double maxSteerAngleRate_;
    /// <summary>
    /// vehicle max steer rate; how fast can the steering wheel turn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSteerAngleRate {
      get { return maxSteerAngleRate_; }
      set {
        maxSteerAngleRate_ = value;
      }
    }

    /// <summary>Field number for the "min_steer_angle_rate" field.</summary>
    public const int MinSteerAngleRateFieldNumber = 14;
    private double minSteerAngleRate_;
    /// <summary>
    /// vehicle min steer rate;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinSteerAngleRate {
      get { return minSteerAngleRate_; }
      set {
        minSteerAngleRate_ = value;
      }
    }

    /// <summary>Field number for the "steer_ratio" field.</summary>
    public const int SteerRatioFieldNumber = 15;
    private double steerRatio_;
    /// <summary>
    /// ratio between the turn of steering wheel and the turn of wheels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerRatio {
      get { return steerRatio_; }
      set {
        steerRatio_ = value;
      }
    }

    /// <summary>Field number for the "wheel_base" field.</summary>
    public const int WheelBaseFieldNumber = 16;
    private double wheelBase_;
    /// <summary>
    /// the distance between the front and back wheels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelBase {
      get { return wheelBase_; }
      set {
        wheelBase_ = value;
      }
    }

    /// <summary>Field number for the "wheel_rolling_radius" field.</summary>
    public const int WheelRollingRadiusFieldNumber = 17;
    private double wheelRollingRadius_;
    /// <summary>
    /// Tire effective rolling radius (vertical distance between the wheel center
    /// and the ground).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelRollingRadius {
      get { return wheelRollingRadius_; }
      set {
        wheelRollingRadius_ = value;
      }
    }

    /// <summary>Field number for the "max_abs_speed_when_stopped" field.</summary>
    public const int MaxAbsSpeedWhenStoppedFieldNumber = 18;
    private float maxAbsSpeedWhenStopped_;
    /// <summary>
    /// minimum differentiable vehicle speed, in m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxAbsSpeedWhenStopped {
      get { return maxAbsSpeedWhenStopped_; }
      set {
        maxAbsSpeedWhenStopped_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Brand != other.Brand) return false;
      if (FrontEdgeToCenter != other.FrontEdgeToCenter) return false;
      if (BackEdgeToCenter != other.BackEdgeToCenter) return false;
      if (LeftEdgeToCenter != other.LeftEdgeToCenter) return false;
      if (RightEdgeToCenter != other.RightEdgeToCenter) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (MinTurnRadius != other.MinTurnRadius) return false;
      if (MaxAcceleration != other.MaxAcceleration) return false;
      if (MaxDeceleration != other.MaxDeceleration) return false;
      if (MaxSteerAngle != other.MaxSteerAngle) return false;
      if (MaxSteerAngleRate != other.MaxSteerAngleRate) return false;
      if (MinSteerAngleRate != other.MinSteerAngleRate) return false;
      if (SteerRatio != other.SteerRatio) return false;
      if (WheelBase != other.WheelBase) return false;
      if (WheelRollingRadius != other.WheelRollingRadius) return false;
      if (MaxAbsSpeedWhenStopped != other.MaxAbsSpeedWhenStopped) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Brand != 0) hash ^= Brand.GetHashCode();
      if (FrontEdgeToCenter != 0D) hash ^= FrontEdgeToCenter.GetHashCode();
      if (BackEdgeToCenter != 0D) hash ^= BackEdgeToCenter.GetHashCode();
      if (LeftEdgeToCenter != 0D) hash ^= LeftEdgeToCenter.GetHashCode();
      if (RightEdgeToCenter != 0D) hash ^= RightEdgeToCenter.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (MinTurnRadius != 0D) hash ^= MinTurnRadius.GetHashCode();
      if (MaxAcceleration != 0D) hash ^= MaxAcceleration.GetHashCode();
      if (MaxDeceleration != 0D) hash ^= MaxDeceleration.GetHashCode();
      if (MaxSteerAngle != 0D) hash ^= MaxSteerAngle.GetHashCode();
      if (MaxSteerAngleRate != 0D) hash ^= MaxSteerAngleRate.GetHashCode();
      if (MinSteerAngleRate != 0D) hash ^= MinSteerAngleRate.GetHashCode();
      if (SteerRatio != 0D) hash ^= SteerRatio.GetHashCode();
      if (WheelBase != 0D) hash ^= WheelBase.GetHashCode();
      if (WheelRollingRadius != 0D) hash ^= WheelRollingRadius.GetHashCode();
      if (MaxAbsSpeedWhenStopped != 0F) hash ^= MaxAbsSpeedWhenStopped.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Brand != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Brand);
      }
      if (FrontEdgeToCenter != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FrontEdgeToCenter);
      }
      if (BackEdgeToCenter != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(BackEdgeToCenter);
      }
      if (LeftEdgeToCenter != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LeftEdgeToCenter);
      }
      if (RightEdgeToCenter != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RightEdgeToCenter);
      }
      if (Length != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Height);
      }
      if (MinTurnRadius != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MinTurnRadius);
      }
      if (MaxAcceleration != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MaxAcceleration);
      }
      if (MaxDeceleration != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MaxDeceleration);
      }
      if (MaxSteerAngle != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(MaxSteerAngle);
      }
      if (MaxSteerAngleRate != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(MaxSteerAngleRate);
      }
      if (MinSteerAngleRate != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(MinSteerAngleRate);
      }
      if (SteerRatio != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(SteerRatio);
      }
      if (WheelBase != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(WheelBase);
      }
      if (WheelRollingRadius != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(WheelRollingRadius);
      }
      if (MaxAbsSpeedWhenStopped != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(MaxAbsSpeedWhenStopped);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Brand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Brand);
      }
      if (FrontEdgeToCenter != 0D) {
        size += 1 + 8;
      }
      if (BackEdgeToCenter != 0D) {
        size += 1 + 8;
      }
      if (LeftEdgeToCenter != 0D) {
        size += 1 + 8;
      }
      if (RightEdgeToCenter != 0D) {
        size += 1 + 8;
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (MinTurnRadius != 0D) {
        size += 1 + 8;
      }
      if (MaxAcceleration != 0D) {
        size += 1 + 8;
      }
      if (MaxDeceleration != 0D) {
        size += 1 + 8;
      }
      if (MaxSteerAngle != 0D) {
        size += 1 + 8;
      }
      if (MaxSteerAngleRate != 0D) {
        size += 1 + 8;
      }
      if (MinSteerAngleRate != 0D) {
        size += 1 + 8;
      }
      if (SteerRatio != 0D) {
        size += 1 + 8;
      }
      if (WheelBase != 0D) {
        size += 2 + 8;
      }
      if (WheelRollingRadius != 0D) {
        size += 2 + 8;
      }
      if (MaxAbsSpeedWhenStopped != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleParam other) {
      if (other == null) {
        return;
      }
      if (other.Brand != 0) {
        Brand = other.Brand;
      }
      if (other.FrontEdgeToCenter != 0D) {
        FrontEdgeToCenter = other.FrontEdgeToCenter;
      }
      if (other.BackEdgeToCenter != 0D) {
        BackEdgeToCenter = other.BackEdgeToCenter;
      }
      if (other.LeftEdgeToCenter != 0D) {
        LeftEdgeToCenter = other.LeftEdgeToCenter;
      }
      if (other.RightEdgeToCenter != 0D) {
        RightEdgeToCenter = other.RightEdgeToCenter;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.MinTurnRadius != 0D) {
        MinTurnRadius = other.MinTurnRadius;
      }
      if (other.MaxAcceleration != 0D) {
        MaxAcceleration = other.MaxAcceleration;
      }
      if (other.MaxDeceleration != 0D) {
        MaxDeceleration = other.MaxDeceleration;
      }
      if (other.MaxSteerAngle != 0D) {
        MaxSteerAngle = other.MaxSteerAngle;
      }
      if (other.MaxSteerAngleRate != 0D) {
        MaxSteerAngleRate = other.MaxSteerAngleRate;
      }
      if (other.MinSteerAngleRate != 0D) {
        MinSteerAngleRate = other.MinSteerAngleRate;
      }
      if (other.SteerRatio != 0D) {
        SteerRatio = other.SteerRatio;
      }
      if (other.WheelBase != 0D) {
        WheelBase = other.WheelBase;
      }
      if (other.WheelRollingRadius != 0D) {
        WheelRollingRadius = other.WheelRollingRadius;
      }
      if (other.MaxAbsSpeedWhenStopped != 0F) {
        MaxAbsSpeedWhenStopped = other.MaxAbsSpeedWhenStopped;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            brand_ = (global::Apollo.Common.VehicleParam.Types.VehicleBrand) input.ReadEnum();
            break;
          }
          case 17: {
            FrontEdgeToCenter = input.ReadDouble();
            break;
          }
          case 25: {
            BackEdgeToCenter = input.ReadDouble();
            break;
          }
          case 33: {
            LeftEdgeToCenter = input.ReadDouble();
            break;
          }
          case 41: {
            RightEdgeToCenter = input.ReadDouble();
            break;
          }
          case 49: {
            Length = input.ReadDouble();
            break;
          }
          case 57: {
            Width = input.ReadDouble();
            break;
          }
          case 65: {
            Height = input.ReadDouble();
            break;
          }
          case 73: {
            MinTurnRadius = input.ReadDouble();
            break;
          }
          case 81: {
            MaxAcceleration = input.ReadDouble();
            break;
          }
          case 89: {
            MaxDeceleration = input.ReadDouble();
            break;
          }
          case 97: {
            MaxSteerAngle = input.ReadDouble();
            break;
          }
          case 105: {
            MaxSteerAngleRate = input.ReadDouble();
            break;
          }
          case 113: {
            MinSteerAngleRate = input.ReadDouble();
            break;
          }
          case 121: {
            SteerRatio = input.ReadDouble();
            break;
          }
          case 129: {
            WheelBase = input.ReadDouble();
            break;
          }
          case 137: {
            WheelRollingRadius = input.ReadDouble();
            break;
          }
          case 149: {
            MaxAbsSpeedWhenStopped = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VehicleParam message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum VehicleBrand {
        [pbr::OriginalName("LINCOLN_MKZ")] LincolnMkz = 0,
        [pbr::OriginalName("GEM")] Gem = 1,
      }

    }
    #endregion

  }

  public sealed partial class VehicleConfig : pb::IMessage<VehicleConfig> {
    private static readonly pb::MessageParser<VehicleConfig> _parser = new pb::MessageParser<VehicleConfig>(() => new VehicleConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.VehicleConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleConfig(VehicleConfig other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      VehicleParam = other.vehicleParam_ != null ? other.VehicleParam.Clone() : null;
      Extrinsics = other.extrinsics_ != null ? other.Extrinsics.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleConfig Clone() {
      return new VehicleConfig(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_param" field.</summary>
    public const int VehicleParamFieldNumber = 2;
    private global::Apollo.Common.VehicleParam vehicleParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleParam VehicleParam {
      get { return vehicleParam_; }
      set {
        vehicleParam_ = value;
      }
    }

    /// <summary>Field number for the "extrinsics" field.</summary>
    public const int ExtrinsicsFieldNumber = 3;
    private global::Apollo.Common.Extrinsics extrinsics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Extrinsics Extrinsics {
      get { return extrinsics_; }
      set {
        extrinsics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(VehicleParam, other.VehicleParam)) return false;
      if (!object.Equals(Extrinsics, other.Extrinsics)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (vehicleParam_ != null) hash ^= VehicleParam.GetHashCode();
      if (extrinsics_ != null) hash ^= Extrinsics.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (vehicleParam_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VehicleParam);
      }
      if (extrinsics_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Extrinsics);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (vehicleParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VehicleParam);
      }
      if (extrinsics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extrinsics);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleConfig other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.vehicleParam_ != null) {
        if (vehicleParam_ == null) {
          vehicleParam_ = new global::Apollo.Common.VehicleParam();
        }
        VehicleParam.MergeFrom(other.VehicleParam);
      }
      if (other.extrinsics_ != null) {
        if (extrinsics_ == null) {
          extrinsics_ = new global::Apollo.Common.Extrinsics();
        }
        Extrinsics.MergeFrom(other.Extrinsics);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (vehicleParam_ == null) {
              vehicleParam_ = new global::Apollo.Common.VehicleParam();
            }
            input.ReadMessage(vehicleParam_);
            break;
          }
          case 26: {
            if (extrinsics_ == null) {
              extrinsics_ = new global::Apollo.Common.Extrinsics();
            }
            input.ReadMessage(extrinsics_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
