// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Common {

  /// <summary>Holder for reflection information generated from modules/common/proto/pnc_point.proto</summary>
  public static partial class PncPointReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/common/proto/pnc_point.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PncPointReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRtb2R1bGVzL2NvbW1vbi9wcm90by9wbmNfcG9pbnQucHJvdG8SDWFwb2xs",
            "by5jb21tb24iHwoHU0xQb2ludBIJCgFzGAEgASgBEgkKAWwYAiABKAEiQQoQ",
            "RnJlbmV0RnJhbWVQb2ludBIJCgFzGAEgASgBEgkKAWwYAiABKAESCgoCZGwY",
            "AyABKAESCwoDZGRsGAQgASgBIkQKClNwZWVkUG9pbnQSCQoBcxgBIAEoARIJ",
            "CgF0GAIgASgBEgkKAXYYAyABKAESCQoBYRgEIAEoARIKCgJkYRgFIAEoASKz",
            "AQoJUGF0aFBvaW50EgkKAXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMgASgB",
            "Eg0KBXRoZXRhGAQgASgBEg0KBWthcHBhGAUgASgBEgkKAXMYBiABKAESDgoG",
            "ZGthcHBhGAcgASgBEg8KB2Rka2FwcGEYCCABKAESDwoHbGFuZV9pZBgJIAEo",
            "CRIUCgx4X2Rlcml2YXRpdmUYCiABKAESFAoMeV9kZXJpdmF0aXZlGAsgASgB",
            "IkIKBFBhdGgSDAoEbmFtZRgBIAEoCRIsCgpwYXRoX3BvaW50GAIgAygLMhgu",
            "YXBvbGxvLmNvbW1vbi5QYXRoUG9pbnQihwEKD1RyYWplY3RvcnlQb2ludBIs",
            "CgpwYXRoX3BvaW50GAEgASgLMhguYXBvbGxvLmNvbW1vbi5QYXRoUG9pbnQS",
            "CQoBdhgCIAEoARIJCgFhGAMgASgBEhUKDXJlbGF0aXZlX3RpbWUYBCABKAES",
            "CgoCZGEYBSABKAESDQoFc3RlZXIYBiABKAEiVAoKVHJhamVjdG9yeRIMCgRu",
            "YW1lGAEgASgJEjgKEHRyYWplY3RvcnlfcG9pbnQYAiADKAsyHi5hcG9sbG8u",
            "Y29tbW9uLlRyYWplY3RvcnlQb2ludCJdChJWZWhpY2xlTW90aW9uUG9pbnQS",
            "OAoQdHJhamVjdG9yeV9wb2ludBgBIAEoCzIeLmFwb2xsby5jb21tb24uVHJh",
            "amVjdG9yeVBvaW50Eg0KBXN0ZWVyGAIgASgBIl4KDVZlaGljbGVNb3Rpb24S",
            "DAoEbmFtZRgBIAEoCRI/ChR2ZWhpY2xlX21vdGlvbl9wb2ludBgCIAMoCzIh",
            "LmFwb2xsby5jb21tb24uVmVoaWNsZU1vdGlvblBvaW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.SLPoint), global::Apollo.Common.SLPoint.Parser, new[]{ "S", "L" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.FrenetFramePoint), global::Apollo.Common.FrenetFramePoint.Parser, new[]{ "S", "L", "Dl", "Ddl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.SpeedPoint), global::Apollo.Common.SpeedPoint.Parser, new[]{ "S", "T", "V", "A", "Da" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.PathPoint), global::Apollo.Common.PathPoint.Parser, new[]{ "X", "Y", "Z", "Theta", "Kappa", "S", "Dkappa", "Ddkappa", "LaneId", "XDerivative", "YDerivative" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Path), global::Apollo.Common.Path.Parser, new[]{ "Name", "PathPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.TrajectoryPoint), global::Apollo.Common.TrajectoryPoint.Parser, new[]{ "PathPoint", "V", "A", "RelativeTime", "Da", "Steer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Trajectory), global::Apollo.Common.Trajectory.Parser, new[]{ "Name", "TrajectoryPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.VehicleMotionPoint), global::Apollo.Common.VehicleMotionPoint.Parser, new[]{ "TrajectoryPoint", "Steer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.VehicleMotion), global::Apollo.Common.VehicleMotion.Parser, new[]{ "Name", "VehicleMotionPoint" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SLPoint : pb::IMessage<SLPoint> {
    private static readonly pb::MessageParser<SLPoint> _parser = new pb::MessageParser<SLPoint>(() => new SLPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SLPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLPoint(SLPoint other) : this() {
      s_ = other.s_;
      l_ = other.l_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLPoint Clone() {
      return new SLPoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 2;
    private double l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SLPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SLPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (L != other.L) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0D) hash ^= S.GetHashCode();
      if (L != 0D) hash ^= L.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(S);
      }
      if (L != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(L);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0D) {
        size += 1 + 8;
      }
      if (L != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SLPoint other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.L != 0D) {
        L = other.L;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            S = input.ReadDouble();
            break;
          }
          case 17: {
            L = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrenetFramePoint : pb::IMessage<FrenetFramePoint> {
    private static readonly pb::MessageParser<FrenetFramePoint> _parser = new pb::MessageParser<FrenetFramePoint>(() => new FrenetFramePoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrenetFramePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrenetFramePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrenetFramePoint(FrenetFramePoint other) : this() {
      s_ = other.s_;
      l_ = other.l_;
      dl_ = other.dl_;
      ddl_ = other.ddl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrenetFramePoint Clone() {
      return new FrenetFramePoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 2;
    private double l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    /// <summary>Field number for the "dl" field.</summary>
    public const int DlFieldNumber = 3;
    private double dl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Dl {
      get { return dl_; }
      set {
        dl_ = value;
      }
    }

    /// <summary>Field number for the "ddl" field.</summary>
    public const int DdlFieldNumber = 4;
    private double ddl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ddl {
      get { return ddl_; }
      set {
        ddl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrenetFramePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrenetFramePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (L != other.L) return false;
      if (Dl != other.Dl) return false;
      if (Ddl != other.Ddl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0D) hash ^= S.GetHashCode();
      if (L != 0D) hash ^= L.GetHashCode();
      if (Dl != 0D) hash ^= Dl.GetHashCode();
      if (Ddl != 0D) hash ^= Ddl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(S);
      }
      if (L != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(L);
      }
      if (Dl != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Dl);
      }
      if (Ddl != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Ddl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0D) {
        size += 1 + 8;
      }
      if (L != 0D) {
        size += 1 + 8;
      }
      if (Dl != 0D) {
        size += 1 + 8;
      }
      if (Ddl != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrenetFramePoint other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.L != 0D) {
        L = other.L;
      }
      if (other.Dl != 0D) {
        Dl = other.Dl;
      }
      if (other.Ddl != 0D) {
        Ddl = other.Ddl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            S = input.ReadDouble();
            break;
          }
          case 17: {
            L = input.ReadDouble();
            break;
          }
          case 25: {
            Dl = input.ReadDouble();
            break;
          }
          case 33: {
            Ddl = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedPoint : pb::IMessage<SpeedPoint> {
    private static readonly pb::MessageParser<SpeedPoint> _parser = new pb::MessageParser<SpeedPoint>(() => new SpeedPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPoint(SpeedPoint other) : this() {
      s_ = other.s_;
      t_ = other.t_;
      v_ = other.v_;
      a_ = other.a_;
      da_ = other.da_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPoint Clone() {
      return new SpeedPoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 2;
    private double t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double T {
      get { return t_; }
      set {
        t_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 3;
    private double v_;
    /// <summary>
    /// speed (m/s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private double a_;
    /// <summary>
    /// acceleration (m/s^2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "da" field.</summary>
    public const int DaFieldNumber = 5;
    private double da_;
    /// <summary>
    /// jerk (m/s^3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Da {
      get { return da_; }
      set {
        da_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (T != other.T) return false;
      if (V != other.V) return false;
      if (A != other.A) return false;
      if (Da != other.Da) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0D) hash ^= S.GetHashCode();
      if (T != 0D) hash ^= T.GetHashCode();
      if (V != 0D) hash ^= V.GetHashCode();
      if (A != 0D) hash ^= A.GetHashCode();
      if (Da != 0D) hash ^= Da.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(S);
      }
      if (T != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(T);
      }
      if (V != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(V);
      }
      if (A != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(A);
      }
      if (Da != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Da);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0D) {
        size += 1 + 8;
      }
      if (T != 0D) {
        size += 1 + 8;
      }
      if (V != 0D) {
        size += 1 + 8;
      }
      if (A != 0D) {
        size += 1 + 8;
      }
      if (Da != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedPoint other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.T != 0D) {
        T = other.T;
      }
      if (other.V != 0D) {
        V = other.V;
      }
      if (other.A != 0D) {
        A = other.A;
      }
      if (other.Da != 0D) {
        Da = other.Da;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            S = input.ReadDouble();
            break;
          }
          case 17: {
            T = input.ReadDouble();
            break;
          }
          case 25: {
            V = input.ReadDouble();
            break;
          }
          case 33: {
            A = input.ReadDouble();
            break;
          }
          case 41: {
            Da = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PathPoint : pb::IMessage<PathPoint> {
    private static readonly pb::MessageParser<PathPoint> _parser = new pb::MessageParser<PathPoint>(() => new PathPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPoint(PathPoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      theta_ = other.theta_;
      kappa_ = other.kappa_;
      s_ = other.s_;
      dkappa_ = other.dkappa_;
      ddkappa_ = other.ddkappa_;
      laneId_ = other.laneId_;
      xDerivative_ = other.xDerivative_;
      yDerivative_ = other.yDerivative_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPoint Clone() {
      return new PathPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    /// <summary>
    /// coordinates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 4;
    private double theta_;
    /// <summary>
    /// direction on the x-y plane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "kappa" field.</summary>
    public const int KappaFieldNumber = 5;
    private double kappa_;
    /// <summary>
    /// curvature on the x-y planning
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Kappa {
      get { return kappa_; }
      set {
        kappa_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 6;
    private double s_;
    /// <summary>
    /// accumulated distance from beginning of the path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "dkappa" field.</summary>
    public const int DkappaFieldNumber = 7;
    private double dkappa_;
    /// <summary>
    /// derivative of kappa w.r.t s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Dkappa {
      get { return dkappa_; }
      set {
        dkappa_ = value;
      }
    }

    /// <summary>Field number for the "ddkappa" field.</summary>
    public const int DdkappaFieldNumber = 8;
    private double ddkappa_;
    /// <summary>
    /// derivative of derivative of kappa w.r.t s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ddkappa {
      get { return ddkappa_; }
      set {
        ddkappa_ = value;
      }
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 9;
    private string laneId_ = "";
    /// <summary>
    /// The lane ID where the path point is on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneId {
      get { return laneId_; }
      set {
        laneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x_derivative" field.</summary>
    public const int XDerivativeFieldNumber = 10;
    private double xDerivative_;
    /// <summary>
    /// derivative of x and y w.r.t parametric parameter t in CosThetareferenceline
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XDerivative {
      get { return xDerivative_; }
      set {
        xDerivative_ = value;
      }
    }

    /// <summary>Field number for the "y_derivative" field.</summary>
    public const int YDerivativeFieldNumber = 11;
    private double yDerivative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YDerivative {
      get { return yDerivative_; }
      set {
        yDerivative_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Theta != other.Theta) return false;
      if (Kappa != other.Kappa) return false;
      if (S != other.S) return false;
      if (Dkappa != other.Dkappa) return false;
      if (Ddkappa != other.Ddkappa) return false;
      if (LaneId != other.LaneId) return false;
      if (XDerivative != other.XDerivative) return false;
      if (YDerivative != other.YDerivative) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      if (Theta != 0D) hash ^= Theta.GetHashCode();
      if (Kappa != 0D) hash ^= Kappa.GetHashCode();
      if (S != 0D) hash ^= S.GetHashCode();
      if (Dkappa != 0D) hash ^= Dkappa.GetHashCode();
      if (Ddkappa != 0D) hash ^= Ddkappa.GetHashCode();
      if (LaneId.Length != 0) hash ^= LaneId.GetHashCode();
      if (XDerivative != 0D) hash ^= XDerivative.GetHashCode();
      if (YDerivative != 0D) hash ^= YDerivative.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (Theta != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Theta);
      }
      if (Kappa != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Kappa);
      }
      if (S != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(S);
      }
      if (Dkappa != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Dkappa);
      }
      if (Ddkappa != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Ddkappa);
      }
      if (LaneId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(LaneId);
      }
      if (XDerivative != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(XDerivative);
      }
      if (YDerivative != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(YDerivative);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (Theta != 0D) {
        size += 1 + 8;
      }
      if (Kappa != 0D) {
        size += 1 + 8;
      }
      if (S != 0D) {
        size += 1 + 8;
      }
      if (Dkappa != 0D) {
        size += 1 + 8;
      }
      if (Ddkappa != 0D) {
        size += 1 + 8;
      }
      if (LaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneId);
      }
      if (XDerivative != 0D) {
        size += 1 + 8;
      }
      if (YDerivative != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.Theta != 0D) {
        Theta = other.Theta;
      }
      if (other.Kappa != 0D) {
        Kappa = other.Kappa;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.Dkappa != 0D) {
        Dkappa = other.Dkappa;
      }
      if (other.Ddkappa != 0D) {
        Ddkappa = other.Ddkappa;
      }
      if (other.LaneId.Length != 0) {
        LaneId = other.LaneId;
      }
      if (other.XDerivative != 0D) {
        XDerivative = other.XDerivative;
      }
      if (other.YDerivative != 0D) {
        YDerivative = other.YDerivative;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            Theta = input.ReadDouble();
            break;
          }
          case 41: {
            Kappa = input.ReadDouble();
            break;
          }
          case 49: {
            S = input.ReadDouble();
            break;
          }
          case 57: {
            Dkappa = input.ReadDouble();
            break;
          }
          case 65: {
            Ddkappa = input.ReadDouble();
            break;
          }
          case 74: {
            LaneId = input.ReadString();
            break;
          }
          case 81: {
            XDerivative = input.ReadDouble();
            break;
          }
          case 89: {
            YDerivative = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Path : pb::IMessage<Path> {
    private static readonly pb::MessageParser<Path> _parser = new pb::MessageParser<Path>(() => new Path());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Path> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path(Path other) : this() {
      name_ = other.name_;
      pathPoint_ = other.pathPoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path Clone() {
      return new Path(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path_point" field.</summary>
    public const int PathPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.PathPoint> _repeated_pathPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.PathPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.PathPoint> pathPoint_ = new pbc::RepeatedField<global::Apollo.Common.PathPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.PathPoint> PathPoint {
      get { return pathPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Path);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Path other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!pathPoint_.Equals(other.pathPoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= pathPoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      pathPoint_.WriteTo(output, _repeated_pathPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += pathPoint_.CalculateSize(_repeated_pathPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Path other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      pathPoint_.Add(other.pathPoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            pathPoint_.AddEntriesFrom(input, _repeated_pathPoint_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrajectoryPoint : pb::IMessage<TrajectoryPoint> {
    private static readonly pb::MessageParser<TrajectoryPoint> _parser = new pb::MessageParser<TrajectoryPoint>(() => new TrajectoryPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPoint(TrajectoryPoint other) : this() {
      PathPoint = other.pathPoint_ != null ? other.PathPoint.Clone() : null;
      v_ = other.v_;
      a_ = other.a_;
      relativeTime_ = other.relativeTime_;
      da_ = other.da_;
      steer_ = other.steer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPoint Clone() {
      return new TrajectoryPoint(this);
    }

    /// <summary>Field number for the "path_point" field.</summary>
    public const int PathPointFieldNumber = 1;
    private global::Apollo.Common.PathPoint pathPoint_;
    /// <summary>
    /// path point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PathPoint PathPoint {
      get { return pathPoint_; }
      set {
        pathPoint_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 2;
    private double v_;
    /// <summary>
    /// linear velocity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 3;
    private double a_;
    /// <summary>
    /// linear acceleration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "relative_time" field.</summary>
    public const int RelativeTimeFieldNumber = 4;
    private double relativeTime_;
    /// <summary>
    /// relative time from beginning of the trajectory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RelativeTime {
      get { return relativeTime_; }
      set {
        relativeTime_ = value;
      }
    }

    /// <summary>Field number for the "da" field.</summary>
    public const int DaFieldNumber = 5;
    private double da_;
    /// <summary>
    /// longitudinal jerk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Da {
      get { return da_; }
      set {
        da_ = value;
      }
    }

    /// <summary>Field number for the "steer" field.</summary>
    public const int SteerFieldNumber = 6;
    private double steer_;
    /// <summary>
    /// The angle between vehicle front wheel and vehicle longitudinal axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Steer {
      get { return steer_; }
      set {
        steer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PathPoint, other.PathPoint)) return false;
      if (V != other.V) return false;
      if (A != other.A) return false;
      if (RelativeTime != other.RelativeTime) return false;
      if (Da != other.Da) return false;
      if (Steer != other.Steer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pathPoint_ != null) hash ^= PathPoint.GetHashCode();
      if (V != 0D) hash ^= V.GetHashCode();
      if (A != 0D) hash ^= A.GetHashCode();
      if (RelativeTime != 0D) hash ^= RelativeTime.GetHashCode();
      if (Da != 0D) hash ^= Da.GetHashCode();
      if (Steer != 0D) hash ^= Steer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pathPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PathPoint);
      }
      if (V != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(V);
      }
      if (A != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(A);
      }
      if (RelativeTime != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RelativeTime);
      }
      if (Da != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Da);
      }
      if (Steer != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Steer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pathPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathPoint);
      }
      if (V != 0D) {
        size += 1 + 8;
      }
      if (A != 0D) {
        size += 1 + 8;
      }
      if (RelativeTime != 0D) {
        size += 1 + 8;
      }
      if (Da != 0D) {
        size += 1 + 8;
      }
      if (Steer != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryPoint other) {
      if (other == null) {
        return;
      }
      if (other.pathPoint_ != null) {
        if (pathPoint_ == null) {
          pathPoint_ = new global::Apollo.Common.PathPoint();
        }
        PathPoint.MergeFrom(other.PathPoint);
      }
      if (other.V != 0D) {
        V = other.V;
      }
      if (other.A != 0D) {
        A = other.A;
      }
      if (other.RelativeTime != 0D) {
        RelativeTime = other.RelativeTime;
      }
      if (other.Da != 0D) {
        Da = other.Da;
      }
      if (other.Steer != 0D) {
        Steer = other.Steer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pathPoint_ == null) {
              pathPoint_ = new global::Apollo.Common.PathPoint();
            }
            input.ReadMessage(pathPoint_);
            break;
          }
          case 17: {
            V = input.ReadDouble();
            break;
          }
          case 25: {
            A = input.ReadDouble();
            break;
          }
          case 33: {
            RelativeTime = input.ReadDouble();
            break;
          }
          case 41: {
            Da = input.ReadDouble();
            break;
          }
          case 49: {
            Steer = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trajectory : pb::IMessage<Trajectory> {
    private static readonly pb::MessageParser<Trajectory> _parser = new pb::MessageParser<Trajectory>(() => new Trajectory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trajectory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trajectory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trajectory(Trajectory other) : this() {
      name_ = other.name_;
      trajectoryPoint_ = other.trajectoryPoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trajectory Clone() {
      return new Trajectory(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trajectory_point" field.</summary>
    public const int TrajectoryPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.TrajectoryPoint> _repeated_trajectoryPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.TrajectoryPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint> trajectoryPoint_ = new pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint> TrajectoryPoint {
      get { return trajectoryPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trajectory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trajectory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!trajectoryPoint_.Equals(other.trajectoryPoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= trajectoryPoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      trajectoryPoint_.WriteTo(output, _repeated_trajectoryPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += trajectoryPoint_.CalculateSize(_repeated_trajectoryPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trajectory other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      trajectoryPoint_.Add(other.trajectoryPoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            trajectoryPoint_.AddEntriesFrom(input, _repeated_trajectoryPoint_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleMotionPoint : pb::IMessage<VehicleMotionPoint> {
    private static readonly pb::MessageParser<VehicleMotionPoint> _parser = new pb::MessageParser<VehicleMotionPoint>(() => new VehicleMotionPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleMotionPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleMotionPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleMotionPoint(VehicleMotionPoint other) : this() {
      TrajectoryPoint = other.trajectoryPoint_ != null ? other.TrajectoryPoint.Clone() : null;
      steer_ = other.steer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleMotionPoint Clone() {
      return new VehicleMotionPoint(this);
    }

    /// <summary>Field number for the "trajectory_point" field.</summary>
    public const int TrajectoryPointFieldNumber = 1;
    private global::Apollo.Common.TrajectoryPoint trajectoryPoint_;
    /// <summary>
    /// trajectory point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.TrajectoryPoint TrajectoryPoint {
      get { return trajectoryPoint_; }
      set {
        trajectoryPoint_ = value;
      }
    }

    /// <summary>Field number for the "steer" field.</summary>
    public const int SteerFieldNumber = 2;
    private double steer_;
    /// <summary>
    /// The angle between vehicle front wheel and vehicle longitudinal axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Steer {
      get { return steer_; }
      set {
        steer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleMotionPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleMotionPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TrajectoryPoint, other.TrajectoryPoint)) return false;
      if (Steer != other.Steer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (trajectoryPoint_ != null) hash ^= TrajectoryPoint.GetHashCode();
      if (Steer != 0D) hash ^= Steer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trajectoryPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrajectoryPoint);
      }
      if (Steer != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Steer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trajectoryPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrajectoryPoint);
      }
      if (Steer != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleMotionPoint other) {
      if (other == null) {
        return;
      }
      if (other.trajectoryPoint_ != null) {
        if (trajectoryPoint_ == null) {
          trajectoryPoint_ = new global::Apollo.Common.TrajectoryPoint();
        }
        TrajectoryPoint.MergeFrom(other.TrajectoryPoint);
      }
      if (other.Steer != 0D) {
        Steer = other.Steer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (trajectoryPoint_ == null) {
              trajectoryPoint_ = new global::Apollo.Common.TrajectoryPoint();
            }
            input.ReadMessage(trajectoryPoint_);
            break;
          }
          case 17: {
            Steer = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleMotion : pb::IMessage<VehicleMotion> {
    private static readonly pb::MessageParser<VehicleMotion> _parser = new pb::MessageParser<VehicleMotion>(() => new VehicleMotion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.PncPointReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleMotion(VehicleMotion other) : this() {
      name_ = other.name_;
      vehicleMotionPoint_ = other.vehicleMotionPoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleMotion Clone() {
      return new VehicleMotion(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vehicle_motion_point" field.</summary>
    public const int VehicleMotionPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.VehicleMotionPoint> _repeated_vehicleMotionPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.VehicleMotionPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.VehicleMotionPoint> vehicleMotionPoint_ = new pbc::RepeatedField<global::Apollo.Common.VehicleMotionPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.VehicleMotionPoint> VehicleMotionPoint {
      get { return vehicleMotionPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!vehicleMotionPoint_.Equals(other.vehicleMotionPoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= vehicleMotionPoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      vehicleMotionPoint_.WriteTo(output, _repeated_vehicleMotionPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += vehicleMotionPoint_.CalculateSize(_repeated_vehicleMotionPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleMotion other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      vehicleMotionPoint_.Add(other.vehicleMotionPoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            vehicleMotionPoint_.AddEntriesFrom(input, _repeated_vehicleMotionPoint_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
