// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/adapters/proto/adapter_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Common.Adapter {

  /// <summary>Holder for reflection information generated from modules/common/adapters/proto/adapter_config.proto</summary>
  public static partial class AdapterConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/common/adapters/proto/adapter_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdapterConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJtb2R1bGVzL2NvbW1vbi9hZGFwdGVycy9wcm90by9hZGFwdGVyX2NvbmZp",
            "Zy5wcm90bxIVYXBvbGxvLmNvbW1vbi5hZGFwdGVyIqMOCg1BZGFwdGVyQ29u",
            "ZmlnEj4KBHR5cGUYASABKA4yMC5hcG9sbG8uY29tbW9uLmFkYXB0ZXIuQWRh",
            "cHRlckNvbmZpZy5NZXNzYWdlVHlwZRI3CgRtb2RlGAIgASgOMikuYXBvbGxv",
            "LmNvbW1vbi5hZGFwdGVyLkFkYXB0ZXJDb25maWcuTW9kZRIdChVtZXNzYWdl",
            "X2hpc3RvcnlfbGltaXQYAyABKAUSDQoFbGF0Y2gYBCABKAgSDQoFdG9waWMY",
            "BSABKAkiowwKC01lc3NhZ2VUeXBlEhUKEU1FU1NBR0VUWVBFX0RVTU1ZEAAS",
            "DwoLUE9JTlRfQ0xPVUQQARIVChFWTFAxNl9QT0lOVF9DTE9VRBA6EgcKA0dQ",
            "UxACEgcKA0lNVRADEgsKB0NIQVNTSVMQBBIQCgxMT0NBTElaQVRJT04QBRIX",
            "ChNQTEFOTklOR19UUkFKRUNUT1JZEAYSCwoHTU9OSVRPUhAHEgcKA1BBRBAI",
            "EhMKD0NPTlRST0xfQ09NTUFORBAJEg4KClBSRURJQ1RJT04QChIYChRQRVJD",
            "RVBUSU9OX09CU1RBQ0xFUxALEhsKF1RSQUZGSUNfTElHSFRfREVURUNUSU9O",
            "EAwSEgoOQ0hBU1NJU19ERVRBSUwQDRIMCghERUNJU0lPThAOEgoKBkNBTkJV",
            "UxAPEhMKD1JPVVRJTkdfUkVRVUVTVBAQEhQKEFJPVVRJTkdfUkVTUE9OU0UQ",
            "ERIVChFSRUxBVElWRV9PRE9NRVRSWRASEgwKCElOU19TVEFUEBMSDwoLSE1J",
            "X0NPTU1BTkQQFBIMCghNT0JJTEVZRRAVEg0KCURFTFBISUVTUhAWEhQKEENP",
            "TVBSRVNTRURfSU1BR0UQFxIRCg1TWVNURU1fU1RBVFVTEBgSDgoKSU5TX1NU",
            "QVRVUxAZEg8KC0dOU1NfU1RBVFVTEBoSDwoLQ09OVElfUkFEQVIQGxIPCgtJ",
            "TUFHRV9TSE9SVBAcEg4KCklNQUdFX0xPTkcQHRIPCgtEUklWRV9FVkVOVBAe",
            "EhAKDEdOU1NfUlRLX09CUxAfEhAKDEdOU1NfUlRLX0VQSBAgEhIKDkdOU1Nf",
            "QkVTVF9QT1NFECESGQoVTE9DQUxJWkFUSU9OX01TRl9HTlNTECISGgoWTE9D",
            "QUxJWkFUSU9OX01TRl9MSURBUhAjEh0KGUxPQ0FMSVpBVElPTl9NU0ZfU0lO",
            "U19QVkEQJBILCgdSQVdfSU1VECUSGwoXTE9DQUxJWkFUSU9OX01TRl9TVEFU",
            "VVMQJhIPCgtTVEFUSUNfSU5GTxAnEhAKDFJFTEFUSVZFX01BUBAoEg4KCk5B",
            "VklHQVRJT04QKRIUChBVTFRSQVNPTklDX1JBREFSECoSEQoNQVVESU9fQ0FQ",
            "VFVSRRArEg8KC0lNQUdFX0ZST05UEC0SFwoTUEFORE9SQV9QT0lOVF9DTE9V",
            "RBAuEh4KGlBBTkRPUkFfQ0FNRVJBX0ZST05UX0NPTE9SEC8SHQoZUEFORE9S",
            "QV9DQU1FUkFfUklHSFRfR1JBWRAwEhwKGFBBTkRPUkFfQ0FNRVJBX0xFRlRf",
            "R1JBWRAxEh0KGVBBTkRPUkFfQ0FNRVJBX0ZST05UX0dSQVkQMhIcChhQQU5E",
            "T1JBX0NBTUVSQV9CQUNLX0dSQVkQMxIYChRQRVJDRVBUSU9OX0xBTkVfTUFT",
            "SxA0EgwKCEdVQVJESUFOEDUSEQoNR05TU19SQVdfREFUQRA2EhEKDVNUUkVB",
            "TV9TVEFUVVMQNxIQCgxHTlNTX0hFQURJTkcQOBINCglSVENNX0RBVEEQORIR",
            "Cg1SQUNPQklUX1JBREFSEDsSFQoRUE9JTlRfQ0xPVURfREVOU0UQPBIZChVQ",
            "T0lOVF9DTE9VRF9ERU5TRV9SQVcQPRIXChNWRUxPRFlORV9TQ0FOX0RFTlNF",
            "ED4SGAoUUE9JTlRfQ0xPVURfU1BBUlNFXzEQPxIcChhQT0lOVF9DTE9VRF9T",
            "UEFSU0VfUkFXXzEQQBIaChZWRUxPRFlORV9TQ0FOX1NQQVJTRV8xEEESGAoU",
            "UE9JTlRfQ0xPVURfU1BBUlNFXzIQQhIcChhQT0lOVF9DTE9VRF9TUEFSU0Vf",
            "UkFXXzIQQxIaChZWRUxPRFlORV9TQ0FOX1NQQVJTRV8yEEQSGAoUUE9JTlRf",
            "Q0xPVURfU1BBUlNFXzMQRRIcChhQT0lOVF9DTE9VRF9TUEFSU0VfUkFXXzMQ",
            "RhIaChZWRUxPRFlORV9TQ0FOX1NQQVJTRV8zEEcSFQoRQ0FNRVJBX0lNQUdF",
            "X0xPTkcQSBIWChJDQU1FUkFfSU1BR0VfU0hPUlQQSRIQCgxQTEFOTklOR19Q",
            "QUQQSiI2CgRNb2RlEhAKDFJFQ0VJVkVfT05MWRAAEhAKDFBVQkxJU0hfT05M",
            "WRABEgoKBkRVUExFWBACIlwKFEFkYXB0ZXJNYW5hZ2VyQ29uZmlnEjQKBmNv",
            "bmZpZxgBIAMoCzIkLmFwb2xsby5jb21tb24uYWRhcHRlci5BZGFwdGVyQ29u",
            "ZmlnEg4KBmlzX3JvcxgCIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Adapter.AdapterConfig), global::Apollo.Common.Adapter.AdapterConfig.Parser, new[]{ "Type", "Mode", "MessageHistoryLimit", "Latch", "Topic" }, null, new[]{ typeof(global::Apollo.Common.Adapter.AdapterConfig.Types.MessageType), typeof(global::Apollo.Common.Adapter.AdapterConfig.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Adapter.AdapterManagerConfig), global::Apollo.Common.Adapter.AdapterManagerConfig.Parser, new[]{ "Config", "IsRos" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Property of a certain Input/Output that will be used by a module.
  /// </summary>
  public sealed partial class AdapterConfig : pb::IMessage<AdapterConfig> {
    private static readonly pb::MessageParser<AdapterConfig> _parser = new pb::MessageParser<AdapterConfig>(() => new AdapterConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdapterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.Adapter.AdapterConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdapterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdapterConfig(AdapterConfig other) : this() {
      type_ = other.type_;
      mode_ = other.mode_;
      messageHistoryLimit_ = other.messageHistoryLimit_;
      latch_ = other.latch_;
      topic_ = other.topic_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdapterConfig Clone() {
      return new AdapterConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apollo.Common.Adapter.AdapterConfig.Types.MessageType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Adapter.AdapterConfig.Types.MessageType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private global::Apollo.Common.Adapter.AdapterConfig.Types.Mode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Adapter.AdapterConfig.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "message_history_limit" field.</summary>
    public const int MessageHistoryLimitFieldNumber = 3;
    private int messageHistoryLimit_;
    /// <summary>
    /// The max number of received messages to keep in the adapter, this field
    /// is not useful for PUBLISH_ONLY mode messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageHistoryLimit {
      get { return messageHistoryLimit_; }
      set {
        messageHistoryLimit_ = value;
      }
    }

    /// <summary>Field number for the "latch" field.</summary>
    public const int LatchFieldNumber = 4;
    private bool latch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Latch {
      get { return latch_; }
      set {
        latch_ = value;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 5;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdapterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdapterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Mode != other.Mode) return false;
      if (MessageHistoryLimit != other.MessageHistoryLimit) return false;
      if (Latch != other.Latch) return false;
      if (Topic != other.Topic) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (MessageHistoryLimit != 0) hash ^= MessageHistoryLimit.GetHashCode();
      if (Latch != false) hash ^= Latch.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Mode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Mode);
      }
      if (MessageHistoryLimit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MessageHistoryLimit);
      }
      if (Latch != false) {
        output.WriteRawTag(32);
        output.WriteBool(Latch);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Topic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (MessageHistoryLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageHistoryLimit);
      }
      if (Latch != false) {
        size += 1 + 1;
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdapterConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.MessageHistoryLimit != 0) {
        MessageHistoryLimit = other.MessageHistoryLimit;
      }
      if (other.Latch != false) {
        Latch = other.Latch;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apollo.Common.Adapter.AdapterConfig.Types.MessageType) input.ReadEnum();
            break;
          }
          case 16: {
            mode_ = (global::Apollo.Common.Adapter.AdapterConfig.Types.Mode) input.ReadEnum();
            break;
          }
          case 24: {
            MessageHistoryLimit = input.ReadInt32();
            break;
          }
          case 32: {
            Latch = input.ReadBool();
            break;
          }
          case 42: {
            Topic = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AdapterConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MessageType {
        [pbr::OriginalName("MESSAGETYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("POINT_CLOUD")] PointCloud = 1,
        [pbr::OriginalName("VLP16_POINT_CLOUD")] Vlp16PointCloud = 58,
        [pbr::OriginalName("GPS")] Gps = 2,
        [pbr::OriginalName("IMU")] Imu = 3,
        [pbr::OriginalName("CHASSIS")] Chassis = 4,
        [pbr::OriginalName("LOCALIZATION")] Localization = 5,
        [pbr::OriginalName("PLANNING_TRAJECTORY")] PlanningTrajectory = 6,
        [pbr::OriginalName("MONITOR")] Monitor = 7,
        [pbr::OriginalName("PAD")] Pad = 8,
        [pbr::OriginalName("CONTROL_COMMAND")] ControlCommand = 9,
        [pbr::OriginalName("PREDICTION")] Prediction = 10,
        [pbr::OriginalName("PERCEPTION_OBSTACLES")] PerceptionObstacles = 11,
        [pbr::OriginalName("TRAFFIC_LIGHT_DETECTION")] TrafficLightDetection = 12,
        [pbr::OriginalName("CHASSIS_DETAIL")] ChassisDetail = 13,
        [pbr::OriginalName("DECISION")] Decision = 14,
        [pbr::OriginalName("CANBUS")] Canbus = 15,
        [pbr::OriginalName("ROUTING_REQUEST")] RoutingRequest = 16,
        [pbr::OriginalName("ROUTING_RESPONSE")] RoutingResponse = 17,
        [pbr::OriginalName("RELATIVE_ODOMETRY")] RelativeOdometry = 18,
        [pbr::OriginalName("INS_STAT")] InsStat = 19,
        [pbr::OriginalName("HMI_COMMAND")] HmiCommand = 20,
        [pbr::OriginalName("MOBILEYE")] Mobileye = 21,
        [pbr::OriginalName("DELPHIESR")] Delphiesr = 22,
        [pbr::OriginalName("COMPRESSED_IMAGE")] CompressedImage = 23,
        [pbr::OriginalName("SYSTEM_STATUS")] SystemStatus = 24,
        [pbr::OriginalName("INS_STATUS")] InsStatus = 25,
        [pbr::OriginalName("GNSS_STATUS")] GnssStatus = 26,
        [pbr::OriginalName("CONTI_RADAR")] ContiRadar = 27,
        [pbr::OriginalName("IMAGE_SHORT")] ImageShort = 28,
        [pbr::OriginalName("IMAGE_LONG")] ImageLong = 29,
        [pbr::OriginalName("DRIVE_EVENT")] DriveEvent = 30,
        [pbr::OriginalName("GNSS_RTK_OBS")] GnssRtkObs = 31,
        [pbr::OriginalName("GNSS_RTK_EPH")] GnssRtkEph = 32,
        [pbr::OriginalName("GNSS_BEST_POSE")] GnssBestPose = 33,
        [pbr::OriginalName("LOCALIZATION_MSF_GNSS")] LocalizationMsfGnss = 34,
        [pbr::OriginalName("LOCALIZATION_MSF_LIDAR")] LocalizationMsfLidar = 35,
        [pbr::OriginalName("LOCALIZATION_MSF_SINS_PVA")] LocalizationMsfSinsPva = 36,
        [pbr::OriginalName("RAW_IMU")] RawImu = 37,
        [pbr::OriginalName("LOCALIZATION_MSF_STATUS")] LocalizationMsfStatus = 38,
        [pbr::OriginalName("STATIC_INFO")] StaticInfo = 39,
        [pbr::OriginalName("RELATIVE_MAP")] RelativeMap = 40,
        [pbr::OriginalName("NAVIGATION")] Navigation = 41,
        [pbr::OriginalName("ULTRASONIC_RADAR")] UltrasonicRadar = 42,
        [pbr::OriginalName("AUDIO_CAPTURE")] AudioCapture = 43,
        [pbr::OriginalName("IMAGE_FRONT")] ImageFront = 45,
        [pbr::OriginalName("PANDORA_POINT_CLOUD")] PandoraPointCloud = 46,
        [pbr::OriginalName("PANDORA_CAMERA_FRONT_COLOR")] PandoraCameraFrontColor = 47,
        [pbr::OriginalName("PANDORA_CAMERA_RIGHT_GRAY")] PandoraCameraRightGray = 48,
        [pbr::OriginalName("PANDORA_CAMERA_LEFT_GRAY")] PandoraCameraLeftGray = 49,
        [pbr::OriginalName("PANDORA_CAMERA_FRONT_GRAY")] PandoraCameraFrontGray = 50,
        [pbr::OriginalName("PANDORA_CAMERA_BACK_GRAY")] PandoraCameraBackGray = 51,
        [pbr::OriginalName("PERCEPTION_LANE_MASK")] PerceptionLaneMask = 52,
        [pbr::OriginalName("GUARDIAN")] Guardian = 53,
        [pbr::OriginalName("GNSS_RAW_DATA")] GnssRawData = 54,
        [pbr::OriginalName("STREAM_STATUS")] StreamStatus = 55,
        [pbr::OriginalName("GNSS_HEADING")] GnssHeading = 56,
        [pbr::OriginalName("RTCM_DATA")] RtcmData = 57,
        [pbr::OriginalName("RACOBIT_RADAR")] RacobitRadar = 59,
        /// <summary>
        /// veldoyne fusion configs
        /// </summary>
        [pbr::OriginalName("POINT_CLOUD_DENSE")] PointCloudDense = 60,
        [pbr::OriginalName("POINT_CLOUD_DENSE_RAW")] PointCloudDenseRaw = 61,
        [pbr::OriginalName("VELODYNE_SCAN_DENSE")] VelodyneScanDense = 62,
        [pbr::OriginalName("POINT_CLOUD_SPARSE_1")] PointCloudSparse1 = 63,
        [pbr::OriginalName("POINT_CLOUD_SPARSE_RAW_1")] PointCloudSparseRaw1 = 64,
        [pbr::OriginalName("VELODYNE_SCAN_SPARSE_1")] VelodyneScanSparse1 = 65,
        [pbr::OriginalName("POINT_CLOUD_SPARSE_2")] PointCloudSparse2 = 66,
        [pbr::OriginalName("POINT_CLOUD_SPARSE_RAW_2")] PointCloudSparseRaw2 = 67,
        [pbr::OriginalName("VELODYNE_SCAN_SPARSE_2")] VelodyneScanSparse2 = 68,
        [pbr::OriginalName("POINT_CLOUD_SPARSE_3")] PointCloudSparse3 = 69,
        [pbr::OriginalName("POINT_CLOUD_SPARSE_RAW_3")] PointCloudSparseRaw3 = 70,
        [pbr::OriginalName("VELODYNE_SCAN_SPARSE_3")] VelodyneScanSparse3 = 71,
        [pbr::OriginalName("CAMERA_IMAGE_LONG")] CameraImageLong = 72,
        [pbr::OriginalName("CAMERA_IMAGE_SHORT")] CameraImageShort = 73,
        [pbr::OriginalName("PLANNING_PAD")] PlanningPad = 74,
      }

      public enum Mode {
        [pbr::OriginalName("RECEIVE_ONLY")] ReceiveOnly = 0,
        [pbr::OriginalName("PUBLISH_ONLY")] PublishOnly = 1,
        [pbr::OriginalName("DUPLEX")] Duplex = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A config to specify which messages a certain module would consume and
  /// produce.
  /// </summary>
  public sealed partial class AdapterManagerConfig : pb::IMessage<AdapterManagerConfig> {
    private static readonly pb::MessageParser<AdapterManagerConfig> _parser = new pb::MessageParser<AdapterManagerConfig>(() => new AdapterManagerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdapterManagerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.Adapter.AdapterConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdapterManagerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdapterManagerConfig(AdapterManagerConfig other) : this() {
      config_ = other.config_.Clone();
      isRos_ = other.isRos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdapterManagerConfig Clone() {
      return new AdapterManagerConfig(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.Adapter.AdapterConfig> _repeated_config_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.Adapter.AdapterConfig.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Adapter.AdapterConfig> config_ = new pbc::RepeatedField<global::Apollo.Common.Adapter.AdapterConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Adapter.AdapterConfig> Config {
      get { return config_; }
    }

    /// <summary>Field number for the "is_ros" field.</summary>
    public const int IsRosFieldNumber = 2;
    private bool isRos_;
    /// <summary>
    /// TODO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRos {
      get { return isRos_; }
      set {
        isRos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdapterManagerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdapterManagerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!config_.Equals(other.config_)) return false;
      if (IsRos != other.IsRos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= config_.GetHashCode();
      if (IsRos != false) hash ^= IsRos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      config_.WriteTo(output, _repeated_config_codec);
      if (IsRos != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += config_.CalculateSize(_repeated_config_codec);
      if (IsRos != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdapterManagerConfig other) {
      if (other == null) {
        return;
      }
      config_.Add(other.config_);
      if (other.IsRos != false) {
        IsRos = other.IsRos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            config_.AddEntriesFrom(input, _repeated_config_codec);
            break;
          }
          case 16: {
            IsRos = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
