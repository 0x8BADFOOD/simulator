// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/vehicle_signal.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Common {

  /// <summary>Holder for reflection information generated from modules/common/proto/vehicle_signal.proto</summary>
  public static partial class VehicleSignalReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/common/proto/vehicle_signal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VehicleSignalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciltb2R1bGVzL2NvbW1vbi9wcm90by92ZWhpY2xlX3NpZ25hbC5wcm90bxIN",
            "YXBvbGxvLmNvbW1vbiLVAQoNVmVoaWNsZVNpZ25hbBI8Cgt0dXJuX3NpZ25h",
            "bBgBIAEoDjInLmFwb2xsby5jb21tb24uVmVoaWNsZVNpZ25hbC5UdXJuU2ln",
            "bmFsEhEKCWhpZ2hfYmVhbRgCIAEoCBIQCghsb3dfYmVhbRgDIAEoCBIMCgRo",
            "b3JuGAQgASgIEhcKD2VtZXJnZW5jeV9saWdodBgFIAEoCCI6CgpUdXJuU2ln",
            "bmFsEg0KCVRVUk5fTk9ORRAAEg0KCVRVUk5fTEVGVBABEg4KClRVUk5fUklH",
            "SFQQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.VehicleSignal), global::Apollo.Common.VehicleSignal.Parser, new[]{ "TurnSignal", "HighBeam", "LowBeam", "Horn", "EmergencyLight" }, null, new[]{ typeof(global::Apollo.Common.VehicleSignal.Types.TurnSignal) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VehicleSignal : pb::IMessage<VehicleSignal> {
    private static readonly pb::MessageParser<VehicleSignal> _parser = new pb::MessageParser<VehicleSignal>(() => new VehicleSignal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.VehicleSignalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSignal(VehicleSignal other) : this() {
      turnSignal_ = other.turnSignal_;
      highBeam_ = other.highBeam_;
      lowBeam_ = other.lowBeam_;
      horn_ = other.horn_;
      emergencyLight_ = other.emergencyLight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSignal Clone() {
      return new VehicleSignal(this);
    }

    /// <summary>Field number for the "turn_signal" field.</summary>
    public const int TurnSignalFieldNumber = 1;
    private global::Apollo.Common.VehicleSignal.Types.TurnSignal turnSignal_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleSignal.Types.TurnSignal TurnSignal {
      get { return turnSignal_; }
      set {
        turnSignal_ = value;
      }
    }

    /// <summary>Field number for the "high_beam" field.</summary>
    public const int HighBeamFieldNumber = 2;
    private bool highBeam_;
    /// <summary>
    /// lights enable command
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HighBeam {
      get { return highBeam_; }
      set {
        highBeam_ = value;
      }
    }

    /// <summary>Field number for the "low_beam" field.</summary>
    public const int LowBeamFieldNumber = 3;
    private bool lowBeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowBeam {
      get { return lowBeam_; }
      set {
        lowBeam_ = value;
      }
    }

    /// <summary>Field number for the "horn" field.</summary>
    public const int HornFieldNumber = 4;
    private bool horn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Horn {
      get { return horn_; }
      set {
        horn_ = value;
      }
    }

    /// <summary>Field number for the "emergency_light" field.</summary>
    public const int EmergencyLightFieldNumber = 5;
    private bool emergencyLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmergencyLight {
      get { return emergencyLight_; }
      set {
        emergencyLight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurnSignal != other.TurnSignal) return false;
      if (HighBeam != other.HighBeam) return false;
      if (LowBeam != other.LowBeam) return false;
      if (Horn != other.Horn) return false;
      if (EmergencyLight != other.EmergencyLight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurnSignal != 0) hash ^= TurnSignal.GetHashCode();
      if (HighBeam != false) hash ^= HighBeam.GetHashCode();
      if (LowBeam != false) hash ^= LowBeam.GetHashCode();
      if (Horn != false) hash ^= Horn.GetHashCode();
      if (EmergencyLight != false) hash ^= EmergencyLight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurnSignal != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TurnSignal);
      }
      if (HighBeam != false) {
        output.WriteRawTag(16);
        output.WriteBool(HighBeam);
      }
      if (LowBeam != false) {
        output.WriteRawTag(24);
        output.WriteBool(LowBeam);
      }
      if (Horn != false) {
        output.WriteRawTag(32);
        output.WriteBool(Horn);
      }
      if (EmergencyLight != false) {
        output.WriteRawTag(40);
        output.WriteBool(EmergencyLight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurnSignal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TurnSignal);
      }
      if (HighBeam != false) {
        size += 1 + 1;
      }
      if (LowBeam != false) {
        size += 1 + 1;
      }
      if (Horn != false) {
        size += 1 + 1;
      }
      if (EmergencyLight != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleSignal other) {
      if (other == null) {
        return;
      }
      if (other.TurnSignal != 0) {
        TurnSignal = other.TurnSignal;
      }
      if (other.HighBeam != false) {
        HighBeam = other.HighBeam;
      }
      if (other.LowBeam != false) {
        LowBeam = other.LowBeam;
      }
      if (other.Horn != false) {
        Horn = other.Horn;
      }
      if (other.EmergencyLight != false) {
        EmergencyLight = other.EmergencyLight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            turnSignal_ = (global::Apollo.Common.VehicleSignal.Types.TurnSignal) input.ReadEnum();
            break;
          }
          case 16: {
            HighBeam = input.ReadBool();
            break;
          }
          case 24: {
            LowBeam = input.ReadBool();
            break;
          }
          case 32: {
            Horn = input.ReadBool();
            break;
          }
          case 40: {
            EmergencyLight = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VehicleSignal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TurnSignal {
        [pbr::OriginalName("TURN_NONE")] TurnNone = 0,
        [pbr::OriginalName("TURN_LEFT")] TurnLeft = 1,
        [pbr::OriginalName("TURN_RIGHT")] TurnRight = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
