// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis_detail.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Canbus {

  /// <summary>Holder for reflection information generated from modules/canbus/proto/chassis_detail.proto</summary>
  public static partial class ChassisDetailReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/canbus/proto/chassis_detail.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChassisDetailReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciltb2R1bGVzL2NhbmJ1cy9wcm90by9jaGFzc2lzX2RldGFpbC5wcm90bxIN",
            "YXBvbGxvLmNhbmJ1cxoibW9kdWxlcy9jYW5idXMvcHJvdG8vY2hhc3Npcy5w",
            "cm90bxoebW9kdWxlcy9jYW5idXMvcHJvdG8vZ2UzLnByb3RvGiBtb2R1bGVz",
            "L2NhbmJ1cy9wcm90by9sZXh1cy5wcm90bxoibW9kdWxlcy9jYW5idXMvcHJv",
            "dG8vdHJhbnNpdC5wcm90bxoebW9kdWxlcy9jYW5idXMvcHJvdG8vd2V5LnBy",
            "b3RvIqIHCg1DaGFzc2lzRGV0YWlsEjMKCGNhcl90eXBlGAEgASgOMiEuYXBv",
            "bGxvLmNhbmJ1cy5DaGFzc2lzRGV0YWlsLlR5cGUSJwoFYmFzaWMYAiABKAsy",
            "GC5hcG9sbG8uY2FuYnVzLkJhc2ljSW5mbxIlCgZzYWZldHkYAyABKAsyFS5h",
            "cG9sbG8uY2FuYnVzLlNhZmV0eRIhCgRnZWFyGAQgASgLMhMuYXBvbGxvLmNh",
            "bmJ1cy5HZWFyEh8KA2VtcxgFIAEoCzISLmFwb2xsby5jYW5idXMuRW1zEh8K",
            "A2VzcBgGIAEoCzISLmFwb2xsby5jYW5idXMuRXNwEh8KA2dhcxgHIAEoCzIS",
            "LmFwb2xsby5jYW5idXMuR2FzEh8KA2VwYhgIIAEoCzISLmFwb2xsby5jYW5i",
            "dXMuRXBiEiMKBWJyYWtlGAkgASgLMhQuYXBvbGxvLmNhbmJ1cy5CcmFrZRIx",
            "CgxkZWNlbGVyYXRpb24YCiABKAsyGy5hcG9sbG8uY2FuYnVzLkRlY2VsZXJh",
            "dGlvbhIuCgt2ZWhpY2xlX3NwZBgLIAEoCzIZLmFwb2xsby5jYW5idXMuVmVo",
            "aWNsZVNwZBIfCgNlcHMYDCABKAsyEi5hcG9sbG8uY2FuYnVzLkVwcxIjCgVs",
            "aWdodBgNIAEoCzIULmFwb2xsby5jYW5idXMuTGlnaHQSJwoHYmF0dGVyeRgO",
            "IAEoCzIWLmFwb2xsby5jYW5idXMuQmF0dGVyeRI6Cg5jaGVja19yZXNwb25z",
            "ZRgPIAEoCzIiLmFwb2xsby5jYW5idXMuQ2hlY2tSZXNwb25zZVNpZ25hbBIn",
            "CgdsaWNlbnNlGBAgASgLMhYuYXBvbGxvLmNhbmJ1cy5MaWNlbnNlEikKCHN1",
            "cnJvdW5kGBEgASgLMhcuYXBvbGxvLmNhbmJ1cy5TdXJyb3VuZBIfCgNnZW0Y",
            "EiABKAsyEi5hcG9sbG8uY2FuYnVzLkdlbRIjCgVsZXh1cxgTIAEoCzIULmFw",
            "b2xsby5jYW5idXMuTGV4dXMSJwoHdHJhbnNpdBgUIAEoCzIWLmFwb2xsby5j",
            "YW5idXMuVHJhbnNpdBIfCgNnZTMYFSABKAsyEi5hcG9sbG8uY2FuYnVzLkdl",
            "MxIfCgN3ZXkYFiABKAsyEi5hcG9sbG8uY2FuYnVzLldleSItCgRUeXBlEg8K",
            "C1FJUlVJX0VRXzE1EAASFAoQQ0hBTkdBTl9SVUlDSEVORxABIroBChNDaGVj",
            "a1Jlc3BvbnNlU2lnbmFsEhUKDWlzX2Vwc19vbmxpbmUYASABKAgSFQoNaXNf",
            "ZXBiX29ubGluZRgCIAEoCBIVCg1pc19lc3Bfb25saW5lGAMgASgIEhYKDmlz",
            "X3Z0b2dfb25saW5lGAQgASgIEhUKDWlzX3NjdV9vbmxpbmUYBSABKAgSGAoQ",
            "aXNfc3dpdGNoX29ubGluZRgGIAEoCBIVCg1pc192Y3Vfb25saW5lGAcgASgI",
            "IjYKB0JhdHRlcnkSFwoPYmF0dGVyeV9wZXJjZW50GAEgASgBEhIKCmZ1ZWxf",
            "bGV2ZWwYAiABKAEisQkKBUxpZ2h0EjsKD3R1cm5fbGlnaHRfdHlwZRgBIAEo",
            "DjIiLmFwb2xsby5jYW5idXMuTGlnaHQuVHVybkxpZ2h0VHlwZRI5Cg5iZWFt",
            "X2xhbXBfdHlwZRgCIAEoDjIhLmFwb2xsby5jYW5idXMuTGlnaHQuQmVhbUxh",
            "bXBUeXBlEhgKEGlzX2JyYWtlX2xhbXBfb24YAyABKAgSFQoNaXNfYXV0b19s",
            "aWdodBgEIAEoCBISCgp3aXBlcl9nZWFyGAUgASgFEhMKC2xvdGlvbl9nZWFy",
            "GAYgASgFEhIKCmlzX2hvcm5fb24YByABKAgSPwoRbGluY29sbl9sYW1wX3R5",
            "cGUYCCABKA4yJC5hcG9sbG8uY2FuYnVzLkxpZ2h0LkxpbmNvbG5MYW1wVHlw",
            "ZRI8Cg1saW5jb2xuX3dpcGVyGAkgASgOMiUuYXBvbGxvLmNhbmJ1cy5MaWdo",
            "dC5MaW5jb2xuV2lwZXJUeXBlEkAKD2xpbmNvbG5fYW1iaWVudBgKIAEoDjIn",
            "LmFwb2xsby5jYW5idXMuTGlnaHQuTGluY29sbkFtYmllbnRUeXBlIlsKDVR1",
            "cm5MaWdodFR5cGUSEgoOVFVSTl9MSUdIVF9PRkYQABIQCgxUVVJOX0xFRlRf",
            "T04QARIRCg1UVVJOX1JJR0hUX09OEAISEQoNVFVSTl9MSUdIVF9PThADIj8K",
            "DEJlYW1MYW1wVHlwZRIMCghCRUFNX09GRhAAEhAKDEhJR0hfQkVBTV9PThAB",
            "Eg8KC0xPV19CRUFNX09OEAIiWQoPTGluY29sbkxhbXBUeXBlEg0KCUJFQU1f",
            "TlVMTBAAEhYKEkJFQU1fRkxBU0hfVE9fUEFTUxABEg0KCUJFQU1fSElHSBAC",
            "EhAKDEJFQU1fSU5WQUxJRBADItwCChBMaW5jb2xuV2lwZXJUeXBlEg0KCVdJ",
            "UEVSX09GRhAAEhIKDldJUEVSX0FVVE9fT0ZGEAESFAoQV0lQRVJfT0ZGX01P",
            "VklORxACEhQKEFdJUEVSX01BTlVBTF9PRkYQAxITCg9XSVBFUl9NQU5VQUxf",
            "T04QBBIUChBXSVBFUl9NQU5VQUxfTE9XEAUSFQoRV0lQRVJfTUFOVUFMX0hJ",
            "R0gQBhIUChBXSVBFUl9NSVNUX0ZMSUNLEAcSDgoKV0lQRVJfV0FTSBAIEhIK",
            "DldJUEVSX0FVVE9fTE9XEAkSEwoPV0lQRVJfQVVUT19ISUdIEAoSFwoTV0lQ",
            "RVJfQ09VUlRFU1lfV0lQRRALEhUKEVdJUEVSX0FVVE9fQURKVVNUEAwSEgoO",
            "V0lQRVJfUkVTRVJWRUQQDRIRCg1XSVBFUl9TVEFMTEVEEA4SEQoNV0lQRVJf",
            "Tk9fREFUQRAPIqgBChJMaW5jb2xuQW1iaWVudFR5cGUSEAoMQU1CSUVOVF9E",
            "QVJLEAASEQoNQU1CSUVOVF9MSUdIVBABEhQKEEFNQklFTlRfVFdJTElHSFQQ",
            "AhIVChFBTUJJRU5UX1RVTk5FTF9PThADEhYKEkFNQklFTlRfVFVOTkVMX09G",
            "RhAEEhMKD0FNQklFTlRfSU5WQUxJRBAFEhMKD0FNQklFTlRfTk9fREFUQRAH",
            "IoUGCgNFcHMSEwoLaXNfZXBzX2ZhaWwYASABKAgSMgoRZXBzX2NvbnRyb2xf",
            "c3RhdGUYAiABKA4yFy5hcG9sbG8uY2FuYnVzLkVwcy5UeXBlEhwKFGVwc19k",
            "cml2ZXJfaGFuZF90b3JxGAMgASgBEh8KF2lzX3N0ZWVyaW5nX2FuZ2xlX3Zh",
            "bGlkGAQgASgIEhYKDnN0ZWVyaW5nX2FuZ2xlGAUgASgBEhoKEnN0ZWVyaW5n",
            "X2FuZ2xlX3NwZBgGIAEoARIaChJpc190cmltbWluZ19zdGF0dXMYByABKAgS",
            "HQoVaXNfY2FsaWJyYXRpb25fc3RhdHVzGAggASgIEhkKEWlzX2ZhaWx1cmVf",
            "c3RhdHVzGAkgASgIEiMKG2FsbG93X2VudGVyX2F1dG9ub21vdXNfbW9kZRgK",
            "IAEoBRIcChRjdXJyZW50X2RyaXZpbmdfbW9kZRgLIAEoBRIaChJzdGVlcmlu",
            "Z19hbmdsZV9jbWQYDCABKAESFQoNdmVoaWNsZV9zcGVlZBgNIAEoARITCgtl",
            "cGFzX3RvcnF1ZRgOIAEoARIYChBzdGVlcmluZ19lbmFibGVkGA8gASgIEhcK",
            "D2RyaXZlcl9vdmVycmlkZRgQIAEoCBIXCg9kcml2ZXJfYWN0aXZpdHkYESAB",
            "KAgSFgoOd2F0Y2hkb2dfZmF1bHQYEiABKAgSFwoPY2hhbm5lbF8xX2ZhdWx0",
            "GBMgASgIEhcKD2NoYW5uZWxfMl9mYXVsdBgUIAEoCBIZChFjYWxpYnJhdGlv",
            "bl9mYXVsdBgVIAEoCBIXCg9jb25uZWN0b3JfZmF1bHQYFiABKAgSFAoMdGlt",
            "ZXN0YW1wXzY1GBcgASgBEhUKDW1ham9yX3ZlcnNpb24YGCABKAUSFQoNbWlu",
            "b3JfdmVyc2lvbhgZIAEoBRIUCgxidWlsZF9udW1iZXIYGiABKAUiPQoEVHlw",
            "ZRIRCg1OT1RfQVZBSUxBQkxFEAASCQoFUkVBRFkQARIKCgZBQ1RJVkUQAhIL",
            "CgdJTlZBTElEEAMi6AYKClZlaGljbGVTcGQSHQoVaXNfdmVoaWNsZV9zdGFu",
            "ZHN0aWxsGAEgASgIEhwKFGlzX3ZlaGljbGVfc3BkX3ZhbGlkGAIgASgIEhMK",
            "C3ZlaGljbGVfc3BkGAMgASgBEh0KFWlzX3doZWVsX3NwZF9ycl92YWxpZBgE",
            "IAEoCBJEChJ3aGVlbF9kaXJlY3Rpb25fcnIYBSABKA4yKC5hcG9sbG8uY2Fu",
            "YnVzLldoZWVsU3BlZWQuV2hlZWxTcGVlZFR5cGUSFAoMd2hlZWxfc3BkX3Jy",
            "GAYgASgBEh0KFWlzX3doZWVsX3NwZF9ybF92YWxpZBgHIAEoCBJEChJ3aGVl",
            "bF9kaXJlY3Rpb25fcmwYCCABKA4yKC5hcG9sbG8uY2FuYnVzLldoZWVsU3Bl",
            "ZWQuV2hlZWxTcGVlZFR5cGUSFAoMd2hlZWxfc3BkX3JsGAkgASgBEh0KFWlz",
            "X3doZWVsX3NwZF9mcl92YWxpZBgKIAEoCBJEChJ3aGVlbF9kaXJlY3Rpb25f",
            "ZnIYCyABKA4yKC5hcG9sbG8uY2FuYnVzLldoZWVsU3BlZWQuV2hlZWxTcGVl",
            "ZFR5cGUSFAoMd2hlZWxfc3BkX2ZyGAwgASgBEh0KFWlzX3doZWVsX3NwZF9m",
            "bF92YWxpZBgNIAEoCBJEChJ3aGVlbF9kaXJlY3Rpb25fZmwYDiABKA4yKC5h",
            "cG9sbG8uY2FuYnVzLldoZWVsU3BlZWQuV2hlZWxTcGVlZFR5cGUSFAoMd2hl",
            "ZWxfc3BkX2ZsGA8gASgBEhkKEWlzX3lhd19yYXRlX3ZhbGlkGBAgASgIEhAK",
            "CHlhd19yYXRlGBEgASgBEhcKD3lhd19yYXRlX29mZnNldBgSIAEoARITCgtp",
            "c19heF92YWxpZBgTIAEoCBIKCgJheBgUIAEoARIRCglheF9vZmZzZXQYFSAB",
            "KAESEwoLaXNfYXlfdmFsaWQYFiABKAgSCgoCYXkYFyABKAESEQoJYXlfb2Zm",
            "c2V0GBggASgBEg8KB2xhdF9hY2MYGSABKAESEAoIbG9uZ19hY2MYGiABKAES",
            "EAoIdmVydF9hY2MYGyABKAESEQoJcm9sbF9yYXRlGBwgASgBEg8KB2FjY19l",
            "c3QYHSABKAESFQoNdGltZXN0YW1wX3NlYxgeIAEoASLGAQoMRGVjZWxlcmF0",
            "aW9uEiEKGWlzX2RlY2VsZXJhdGlvbl9hdmFpbGFibGUYASABKAgSHgoWaXNf",
            "ZGVjZWxlcmF0aW9uX2FjdGl2ZRgCIAEoCBIUCgxkZWNlbGVyYXRpb24YAyAB",
            "KAESEwoLaXNfZXZiX2ZhaWwYBCABKAESFAoMZXZiX3ByZXNzdXJlGAUgASgB",
            "EhYKDmJyYWtlX3ByZXNzdXJlGAYgASgBEhoKEmJyYWtlX3ByZXNzdXJlX3Nw",
            "ZBgHIAEoASKvCAoFQnJha2USHgoWaXNfYnJha2VfcGVkYWxfcHJlc3NlZBgB",
            "IAEoCBIcChRpc19icmFrZV9mb3JjZV9leGlzdBgCIAEoCBIaChJpc19icmFr",
            "ZV9vdmVyX2hlYXQYAyABKAgSGAoQaXNfaGFuZF9icmFrZV9vbhgEIAEoCBIc",
            "ChRicmFrZV9wZWRhbF9wb3NpdGlvbhgFIAEoARIWCg5pc19icmFrZV92YWxp",
            "ZBgGIAEoCBITCgticmFrZV9pbnB1dBgHIAEoARIRCglicmFrZV9jbWQYCCAB",
            "KAESFAoMYnJha2Vfb3V0cHV0GAkgASgBEhEKCWJvb19pbnB1dBgKIAEoCBIP",
            "Cgdib29fY21kGAsgASgIEhIKCmJvb19vdXRwdXQYDCABKAgSIAoYd2F0Y2hk",
            "b2dfYXBwbHlpbmdfYnJha2VzGA0gASgIEhcKD3dhdGNoZG9nX3NvdXJjZRgO",
            "IAEoBRIVCg1icmFrZV9lbmFibGVkGA8gASgIEhcKD2RyaXZlcl9vdmVycmlk",
            "ZRgQIAEoCBIXCg9kcml2ZXJfYWN0aXZpdHkYESABKAgSFgoOd2F0Y2hkb2df",
            "ZmF1bHQYEiABKAgSFwoPY2hhbm5lbF8xX2ZhdWx0GBMgASgIEhcKD2NoYW5u",
            "ZWxfMl9mYXVsdBgUIAEoCBIRCglib29fZmF1bHQYFSABKAgSFwoPY29ubmVj",
            "dG9yX2ZhdWx0GBYgASgIEhgKEGJyYWtlX3RvcnF1ZV9yZXEYFyABKAESNgoK",
            "aHNhX3N0YXR1cxgYIAEoDjIiLmFwb2xsby5jYW5idXMuQnJha2UuSFNBU3Rh",
            "dHVzVHlwZRIYChBicmFrZV90b3JxdWVfYWN0GBkgASgBEjIKCGhzYV9tb2Rl",
            "GBogASgOMiAuYXBvbGxvLmNhbmJ1cy5CcmFrZS5IU0FNb2RlVHlwZRIYChB3",
            "aGVlbF90b3JxdWVfYWN0GBsgASgBEhUKDW1ham9yX3ZlcnNpb24YHCABKAUS",
            "FQoNbWlub3JfdmVyc2lvbhgdIAEoBRIUCgxidWlsZF9udW1iZXIYHiABKAUi",
            "uwEKDUhTQVN0YXR1c1R5cGUSEAoMSFNBX0lOQUNUSVZFEAASGAoUSFNBX0ZJ",
            "TkRJTkdfR1JBRElFTlQQARIWChJIU0FfQUNUSVZFX1BSRVNTRUQQAhIXChNI",
            "U0FfQUNUSVZFX1JFTEVBU0VEEAMSFAoQSFNBX0ZBU1RfUkVMRUFTRRAEEhQK",
            "EEhTQV9TTE9XX1JFTEVBU0UQBRIOCgpIU0FfRkFJTEVEEAYSEQoNSFNBX1VO",
            "REVGSU5FRBAHIlAKC0hTQU1vZGVUeXBlEgsKB0hTQV9PRkYQABIMCghIU0Ff",
            "QVVUTxABEg4KCkhTQV9NQU5VQUwQAhIWChJIU0FfTU9ERV9VTkRFRklORUQQ",
            "AyLbAQoDRXBiEhQKDGlzX2VwYl9lcnJvchgBIAEoCBIXCg9pc19lcGJfcmVs",
            "ZWFzZWQYAiABKAgSEgoKZXBiX3N0YXR1cxgDIAEoBRI7ChRwYXJraW5nX2Jy",
            "YWtlX3N0YXR1cxgEIAEoDjIdLmFwb2xsby5jYW5idXMuRXBiLlBCcmFrZVR5",
            "cGUiVAoKUEJyYWtlVHlwZRIOCgpQQlJBS0VfT0ZGEAASFQoRUEJSQUtFX1RS",
            "QU5TSVRJT04QARINCglQQlJBS0VfT04QAhIQCgxQQlJBS0VfRkFVTFQQAyKE",
            "BAoDR2FzEhoKEmlzX2dhc19wZWRhbF9lcnJvchgBIAEoCBIhChlpc19nYXNf",
            "cGVkYWxfcHJlc3NlZF9tb3JlGAIgASgIEhoKEmdhc19wZWRhbF9wb3NpdGlv",
            "bhgDIAEoARIUCgxpc19nYXNfdmFsaWQYBCABKAgSFgoOdGhyb3R0bGVfaW5w",
            "dXQYBSABKAESFAoMdGhyb3R0bGVfY21kGAYgASgBEhcKD3Rocm90dGxlX291",
            "dHB1dBgHIAEoARIXCg93YXRjaGRvZ19zb3VyY2UYCCABKAUSGAoQdGhyb3R0",
            "bGVfZW5hYmxlZBgJIAEoCBIXCg9kcml2ZXJfb3ZlcnJpZGUYCiABKAgSFwoP",
            "ZHJpdmVyX2FjdGl2aXR5GAsgASgIEhYKDndhdGNoZG9nX2ZhdWx0GAwgASgI",
            "EhcKD2NoYW5uZWxfMV9mYXVsdBgNIAEoCBIXCg9jaGFubmVsXzJfZmF1bHQY",
            "DiABKAgSFwoPY29ubmVjdG9yX2ZhdWx0GA8gASgIEhkKEWFjY2VsZXJhdG9y",
            "X3BlZGFsGBAgASgBEh4KFmFjY2VsZXJhdG9yX3BlZGFsX3JhdGUYESABKAES",
            "FQoNbWFqb3JfdmVyc2lvbhgSIAEoBRIVCg1taW5vcl92ZXJzaW9uGBMgASgF",
            "EhQKDGJ1aWxkX251bWJlchgUIAEoBSKIAgoDRXNwEhgKEGlzX2VzcF9hY2Nf",
            "ZXJyb3IYASABKAgSEQoJaXNfZXNwX29uGAIgASgIEhUKDWlzX2VzcF9hY3Rp",
            "dmUYAyABKAgSFAoMaXNfYWJzX2Vycm9yGAQgASgIEhUKDWlzX2Fic19hY3Rp",
            "dmUYBSABKAgSFgoOaXNfdGNzdmRjX2ZhaWwYBiABKAgSFgoOaXNfYWJzX2Vu",
            "YWJsZWQYByABKAgSFgoOaXNfc3RhYl9hY3RpdmUYCCABKAgSFwoPaXNfc3Rh",
            "Yl9lbmFibGVkGAkgASgIEhYKDmlzX3RyYWNfYWN0aXZlGAogASgIEhcKD2lz",
            "X3RyYWNfZW5hYmxlZBgLIAEoCCKNAwoDRW1zEh8KF2lzX2VuZ2luZV9hY2Nf",
            "YXZhaWxhYmxlGAEgASgIEhsKE2lzX2VuZ2luZV9hY2NfZXJyb3IYAiABKAgS",
            "LQoMZW5naW5lX3N0YXRlGAMgASgOMhcuYXBvbGxvLmNhbmJ1cy5FbXMuVHlw",
            "ZRIfChdtYXhfZW5naW5lX3RvcnFfcGVyY2VudBgEIAEoARIfChdtaW5fZW5n",
            "aW5lX3RvcnFfcGVyY2VudBgFIAEoARIhChliYXNlX2VuZ2luZV90b3JxX2Nv",
            "bnN0YW50GAYgASgFEh0KFWlzX2VuZ2luZV9zcGVlZF9lcnJvchgHIAEoCBIU",
            "CgxlbmdpbmVfc3BlZWQYCCABKAESFQoNZW5naW5lX3RvcnF1ZRgJIAEoBRId",
            "ChVpc19vdmVyX2VuZ2luZV90b3JxdWUYCiABKAgSEgoKZW5naW5lX3JwbRgL",
            "IAEoASI1CgRUeXBlEggKBFNUT1AQABIJCgVDUkFOSxABEgsKB1JVTk5JTkcQ",
            "AhILCgdJTlZBTElEEAMixgEKBEdlYXISHwoXaXNfc2hpZnRfcG9zaXRpb25f",
            "dmFsaWQYASABKAgSNwoKZ2Vhcl9zdGF0ZRgCIAEoDjIjLmFwb2xsby5jYW5i",
            "dXMuQ2hhc3Npcy5HZWFyUG9zaXRpb24SFwoPZHJpdmVyX292ZXJyaWRlGAMg",
            "ASgIEjUKCGdlYXJfY21kGAQgASgOMiMuYXBvbGxvLmNhbmJ1cy5DaGFzc2lz",
            "LkdlYXJQb3NpdGlvbhIUCgxjYW5idXNfZmF1bHQYBSABKAgi5wUKBlNhZmV0",
            "eRIgChhpc19kcml2ZXJfY2FyX2Rvb3JfY2xvc2UYASABKAgSGQoRaXNfZHJp",
            "dmVyX2J1Y2tsZWQYAiABKAgSGAoQZW1lcmdlbmN5X2J1dHRvbhgDIAEoBRIR",
            "CgloYXNfZXJyb3IYBCABKAgSHwoXaXNfbW90b3JfaW52ZXJ0b3JfZmF1bHQY",
            "BSABKAgSFwoPaXNfc3lzdGVtX2ZhdWx0GAYgASgIEh4KFmlzX3Bvd2VyX2Jh",
            "dHRlcnlfZmF1bHQYByABKAgSKgoiaXNfbW90b3JfaW52ZXJ0b3Jfb3Zlcl90",
            "ZW1wZXJhdHVyZRgIIAEoCBIvCidpc19zbWFsbF9iYXR0ZXJ5X2NoYXJnZV9k",
            "aXNjaGFyZ2VfZmF1bHQYCSABKAgSFAoMZHJpdmluZ19tb2RlGAogASgFEh4K",
            "FmlzX3Bhc3Nlbmdlcl9kb29yX29wZW4YCyABKAgSHQoVaXNfcmVhcmxlZnRf",
            "ZG9vcl9vcGVuGAwgASgIEh4KFmlzX3JlYXJyaWdodF9kb29yX29wZW4YDSAB",
            "KAgSFAoMaXNfaG9vZF9vcGVuGA4gASgIEhUKDWlzX3RydW5rX29wZW4YDyAB",
            "KAgSHQoVaXNfcGFzc2VuZ2VyX2RldGVjdGVkGBAgASgIEiMKG2lzX3Bhc3Nl",
            "bmdlcl9haXJiYWdfZW5hYmxlZBgRIAEoCBIcChRpc19wYXNzZW5nZXJfYnVj",
            "a2xlZBgSIAEoCBIdChVmcm9udF9sZWZ0X3RpcmVfcHJlc3MYEyABKAUSHgoW",
            "ZnJvbnRfcmlnaHRfdGlyZV9wcmVzcxgUIAEoBRIcChRyZWFyX2xlZnRfdGly",
            "ZV9wcmVzcxgVIAEoBRIdChVyZWFyX3JpZ2h0X3RpcmVfcHJlc3MYFiABKAUS",
            "PAoQY2FyX2RyaXZpbmdfbW9kZRgXIAEoDjIiLmFwb2xsby5jYW5idXMuQ2hh",
            "c3Npcy5Ecml2aW5nTW9kZSK8BwoJQmFzaWNJbmZvEhQKDGlzX2F1dG9fbW9k",
            "ZRgBIAEoCBIyCgtwb3dlcl9zdGF0ZRgCIAEoDjIdLmFwb2xsby5jYW5idXMu",
            "QmFzaWNJbmZvLlR5cGUSGwoTaXNfYWlyX2JhZ19kZXBsb3llZBgDIAEoCBIR",
            "CglvZG9fbWV0ZXIYBCABKAESEwoLZHJpdmVfcmFuZ2UYBSABKAESFwoPaXNf",
            "c3lzdGVtX2Vycm9yGAYgASgIEhoKEmlzX2h1bWFuX2ludGVycnVwdBgHIAEo",
            "CBIVCg1hY2Nfb25fYnV0dG9uGAggASgIEhYKDmFjY19vZmZfYnV0dG9uGAkg",
            "ASgIEhYKDmFjY19yZXNfYnV0dG9uGAogASgIEhkKEWFjY19jYW5jZWxfYnV0",
            "dG9uGAsgASgIEhkKEWFjY19vbl9vZmZfYnV0dG9uGAwgASgIEh0KFWFjY19y",
            "ZXNfY2FuY2VsX2J1dHRvbhgNIAEoCBIaChJhY2NfaW5jX3NwZF9idXR0b24Y",
            "DiABKAgSGgoSYWNjX2RlY19zcGRfYnV0dG9uGA8gASgIEhoKEmFjY19pbmNf",
            "Z2FwX2J1dHRvbhgQIAEoCBIaChJhY2NfZGVjX2dhcF9idXR0b24YESABKAgS",
            "EgoKbGthX2J1dHRvbhgSIAEoCBIUCgxjYW5idXNfZmF1bHQYEyABKAgSEAoI",
            "bGF0aXR1ZGUYFCABKAESEQoJbG9uZ2l0dWRlGBUgASgBEhEKCWdwc192YWxp",
            "ZBgWIAEoCBIMCgR5ZWFyGBcgASgFEg0KBW1vbnRoGBggASgFEgsKA2RheRgZ",
            "IAEoBRINCgVob3VycxgaIAEoBRIPCgdtaW51dGVzGBsgASgFEg8KB3NlY29u",
            "ZHMYHCABKAUSGQoRY29tcGFzc19kaXJlY3Rpb24YHSABKAESDAoEcGRvcBge",
            "IAEoARIUCgxpc19ncHNfZmF1bHQYHyABKAgSEwoLaXNfaW5mZXJyZWQYICAB",
            "KAgSEAoIYWx0aXR1ZGUYISABKAESDwoHaGVhZGluZxgiIAEoARIMCgRoZG9w",
            "GCMgASgBEgwKBHZkb3AYJCABKAESKgoHcXVhbGl0eRglIAEoDjIZLmFwb2xs",
            "by5jYW5idXMuR3BzUXVhbGl0eRIWCg5udW1fc2F0ZWxsaXRlcxgmIAEoBRIR",
            "CglncHNfc3BlZWQYJyABKAEiOAoEVHlwZRIHCgNPRkYQABIHCgNBQ0MQARIG",
            "CgJPThACEgkKBVNUQVJUEAMSCwoHSU5WQUxJRBAEIvUECg1HbG9iYWxfcnB0",
            "XzZhEkUKDXBhY21vZF9zdGF0dXMYASABKA4yLi5hcG9sbG8uY2FuYnVzLkds",
            "b2JhbF9ycHRfNmEuUGFjbW9kX3N0YXR1c1R5cGUSSQoPb3ZlcnJpZGVfc3Rh",
            "dHVzGAIgASgOMjAuYXBvbGxvLmNhbmJ1cy5HbG9iYWxfcnB0XzZhLk92ZXJy",
            "aWRlX3N0YXR1c1R5cGUSFwoPdmVoX2Nhbl90aW1lb3V0GAMgASgIEhcKD3N0",
            "cl9jYW5fdGltZW91dBgEIAEoCBJJCg9icmtfY2FuX3RpbWVvdXQYBSABKA4y",
            "MC5hcG9sbG8uY2FuYnVzLkdsb2JhbF9ycHRfNmEuQnJrX2Nhbl90aW1lb3V0",
            "VHlwZRIXCg91c3JfY2FuX3RpbWVvdXQYBiABKAgSGwoTdXNyX2Nhbl9yZWFk",
            "X2Vycm9ycxgHIAEoBSJaChFQYWNtb2Rfc3RhdHVzVHlwZRIiCh5QQUNNT0Rf",
            "U1RBVFVTX0NPTlRST0xfRElTQUJMRUQQABIhCh1QQUNNT0RfU1RBVFVTX0NP",
            "TlRST0xfRU5BQkxFRBABIlkKE092ZXJyaWRlX3N0YXR1c1R5cGUSIgoeT1ZF",
            "UlJJREVfU1RBVFVTX05PVF9PVkVSUklEREVOEAASHgoaT1ZFUlJJREVfU1RB",
            "VFVTX09WRVJSSURERU4QASJoChNCcmtfY2FuX3RpbWVvdXRUeXBlEikKJUJS",
            "S19DQU5fVElNRU9VVF9OT19BQ1RJVkVfQ0FOX1RJTUVPVVQQABImCiJCUktf",
            "Q0FOX1RJTUVPVVRfQUNUSVZFX0NBTl9USU1FT1VUEAEiIQoMQnJha2VfY21k",
            "XzZiEhEKCWJyYWtlX2NtZBgBIAEoASLWAQoMQnJha2VfcnB0XzZjEhQKDG1h",
            "bnVhbF9pbnB1dBgBIAEoARIXCg9jb21tYW5kZWRfdmFsdWUYAiABKAESFAoM",
            "b3V0cHV0X3ZhbHVlGAMgASgBEkIKDGJyYWtlX29uX29mZhgEIAEoDjIsLmFw",
            "b2xsby5jYW5idXMuQnJha2VfcnB0XzZjLkJyYWtlX29uX29mZlR5cGUiPQoQ",
            "QnJha2Vfb25fb2ZmVHlwZRIUChBCUkFLRV9PTl9PRkZfT0ZGEAASEwoPQlJB",
            "S0VfT05fT0ZGX09OEAEiPgoPU3RlZXJpbmdfY21kXzZkEhYKDnBvc2l0aW9u",
            "X3ZhbHVlGAEgASgBEhMKC3NwZWVkX2xpbWl0GAIgASgBIlgKEVN0ZWVyaW5n",
            "X3JwdF8xXzZlEhQKDG1hbnVhbF9pbnB1dBgBIAEoARIXCg9jb21tYW5kZWRf",
            "dmFsdWUYAiABKAESFAoMb3V0cHV0X3ZhbHVlGAMgASgBIowBChJXaGVlbF9z",
            "cGVlZF9ycHRfN2ESHAoUd2hlZWxfc3BkX3JlYXJfcmlnaHQYASABKAUSGwoT",
            "d2hlZWxfc3BkX3JlYXJfbGVmdBgCIAEoBRIdChV3aGVlbF9zcGRfZnJvbnRf",
            "cmlnaHQYAyABKAUSHAoUd2hlZWxfc3BkX2Zyb250X2xlZnQYBCABKAUiiAEK",
            "EERhdGVfdGltZV9ycHRfODMSEwoLdGltZV9zZWNvbmQYASABKAUSEwoLdGlt",
            "ZV9taW51dGUYAiABKAUSEQoJdGltZV9ob3VyGAMgASgFEhAKCGRhdGVfZGF5",
            "GAQgASgFEhIKCmRhdGVfbW9udGgYBSABKAUSEQoJZGF0ZV95ZWFyGAYgASgF",
            "IkUKFEJyYWtlX21vdG9yX3JwdF8xXzcwEhUKDW1vdG9yX2N1cnJlbnQYASAB",
            "KAESFgoOc2hhZnRfcG9zaXRpb24YAiABKAEixgQKEEhlYWRsaWdodF9ycHRf",
            "NzcSRgoMb3V0cHV0X3ZhbHVlGAEgASgOMjAuYXBvbGxvLmNhbmJ1cy5IZWFk",
            "bGlnaHRfcnB0Xzc3Lk91dHB1dF92YWx1ZVR5cGUSRgoMbWFudWFsX2lucHV0",
            "GAIgASgOMjAuYXBvbGxvLmNhbmJ1cy5IZWFkbGlnaHRfcnB0Xzc3Lk1hbnVh",
            "bF9pbnB1dFR5cGUSTAoPY29tbWFuZGVkX3ZhbHVlGAMgASgOMjMuYXBvbGxv",
            "LmNhbmJ1cy5IZWFkbGlnaHRfcnB0Xzc3LkNvbW1hbmRlZF92YWx1ZVR5cGUi",
            "bAoQT3V0cHV0X3ZhbHVlVHlwZRIfChtPVVRQVVRfVkFMVUVfSEVBRExJR0hU",
            "U19PRkYQABIaChZPVVRQVVRfVkFMVUVfTE9XX0JFQU1TEAESGwoXT1VUUFVU",
            "X1ZBTFVFX0hJR0hfQkVBTVMQAiJsChBNYW51YWxfaW5wdXRUeXBlEh8KG01B",
            "TlVBTF9JTlBVVF9IRUFETElHSFRTX09GRhAAEhoKFk1BTlVBTF9JTlBVVF9M",
            "T1dfQkVBTVMQARIbChdNQU5VQUxfSU5QVVRfSElHSF9CRUFNUxACIngKE0Nv",
            "bW1hbmRlZF92YWx1ZVR5cGUSIgoeQ09NTUFOREVEX1ZBTFVFX0hFQURMSUdI",
            "VFNfT0ZGEAASHQoZQ09NTUFOREVEX1ZBTFVFX0xPV19CRUFNUxABEh4KGkNP",
            "TU1BTkRFRF9WQUxVRV9ISUdIX0JFQU1TEAIiUwoMQWNjZWxfcnB0XzY4EhQK",
            "DG1hbnVhbF9pbnB1dBgBIAEoARIXCg9jb21tYW5kZWRfdmFsdWUYAiABKAES",
            "FAoMb3V0cHV0X3ZhbHVlGAMgASgBIkYKF1N0ZWVyaW5nX21vdG9yX3JwdF8z",
            "Xzc1EhUKDXRvcnF1ZV9vdXRwdXQYASABKAESFAoMdG9ycXVlX2lucHV0GAIg",
            "ASgBItkBCgtUdXJuX2NtZF82MxJHCg90dXJuX3NpZ25hbF9jbWQYASABKA4y",
            "Li5hcG9sbG8uY2FuYnVzLlR1cm5fY21kXzYzLlR1cm5fc2lnbmFsX2NtZFR5",
            "cGUigAEKE1R1cm5fc2lnbmFsX2NtZFR5cGUSGQoVVFVSTl9TSUdOQUxfQ01E",
            "X1JJR0hUEAASGAoUVFVSTl9TSUdOQUxfQ01EX05PTkUQARIYChRUVVJOX1NJ",
            "R05BTF9DTURfTEVGVBACEhoKFlRVUk5fU0lHTkFMX0NNRF9IQVpBUkQQAyLF",
            "BAoLVHVybl9ycHRfNjQSQQoMbWFudWFsX2lucHV0GAEgASgOMisuYXBvbGxv",
            "LmNhbmJ1cy5UdXJuX3JwdF82NC5NYW51YWxfaW5wdXRUeXBlEkcKD2NvbW1h",
            "bmRlZF92YWx1ZRgCIAEoDjIuLmFwb2xsby5jYW5idXMuVHVybl9ycHRfNjQu",
            "Q29tbWFuZGVkX3ZhbHVlVHlwZRJBCgxvdXRwdXRfdmFsdWUYAyABKA4yKy5h",
            "cG9sbG8uY2FuYnVzLlR1cm5fcnB0XzY0Lk91dHB1dF92YWx1ZVR5cGUicQoQ",
            "TWFudWFsX2lucHV0VHlwZRIWChJNQU5VQUxfSU5QVVRfUklHSFQQABIVChFN",
            "QU5VQUxfSU5QVVRfTk9ORRABEhUKEU1BTlVBTF9JTlBVVF9MRUZUEAISFwoT",
            "TUFOVUFMX0lOUFVUX0hBWkFSRBADIoABChNDb21tYW5kZWRfdmFsdWVUeXBl",
            "EhkKFUNPTU1BTkRFRF9WQUxVRV9SSUdIVBAAEhgKFENPTU1BTkRFRF9WQUxV",
            "RV9OT05FEAESGAoUQ09NTUFOREVEX1ZBTFVFX0xFRlQQAhIaChZDT01NQU5E",
            "RURfVkFMVUVfSEFaQVJEEAMicQoQT3V0cHV0X3ZhbHVlVHlwZRIWChJPVVRQ",
            "VVRfVkFMVUVfUklHSFQQABIVChFPVVRQVVRfVkFMVUVfTk9ORRABEhUKEU9V",
            "VFBVVF9WQUxVRV9MRUZUEAISFwoTT1VUUFVUX1ZBTFVFX0hBWkFSRBADIskB",
            "CgxTaGlmdF9jbWRfNjUSPAoJc2hpZnRfY21kGAEgASgOMikuYXBvbGxvLmNh",
            "bmJ1cy5TaGlmdF9jbWRfNjUuU2hpZnRfY21kVHlwZSJ7Cg1TaGlmdF9jbWRU",
            "eXBlEhIKDlNISUZUX0NNRF9QQVJLEAASFQoRU0hJRlRfQ01EX1JFVkVSU0UQ",
            "ARIVChFTSElGVF9DTURfTkVVVFJBTBACEhUKEVNISUZUX0NNRF9GT1JXQVJE",
            "EAMSEQoNU0hJRlRfQ01EX0xPVxAEIqUFCgxTaGlmdF9ycHRfNjYSQgoMbWFu",
            "dWFsX2lucHV0GAEgASgOMiwuYXBvbGxvLmNhbmJ1cy5TaGlmdF9ycHRfNjYu",
            "TWFudWFsX2lucHV0VHlwZRJICg9jb21tYW5kZWRfdmFsdWUYAiABKA4yLy5h",
            "cG9sbG8uY2FuYnVzLlNoaWZ0X3JwdF82Ni5Db21tYW5kZWRfdmFsdWVUeXBl",
            "EkIKDG91dHB1dF92YWx1ZRgDIAEoDjIsLmFwb2xsby5jYW5idXMuU2hpZnRf",
            "cnB0XzY2Lk91dHB1dF92YWx1ZVR5cGUijgEKEE1hbnVhbF9pbnB1dFR5cGUS",
            "FQoRTUFOVUFMX0lOUFVUX1BBUksQABIYChRNQU5VQUxfSU5QVVRfUkVWRVJT",
            "RRABEhgKFE1BTlVBTF9JTlBVVF9ORVVUUkFMEAISGAoUTUFOVUFMX0lOUFVU",
            "X0ZPUldBUkQQAxIVChFNQU5VQUxfSU5QVVRfSElHSBAEIqABChNDb21tYW5k",
            "ZWRfdmFsdWVUeXBlEhgKFENPTU1BTkRFRF9WQUxVRV9QQVJLEAASGwoXQ09N",
            "TUFOREVEX1ZBTFVFX1JFVkVSU0UQARIbChdDT01NQU5ERURfVkFMVUVfTkVV",
            "VFJBTBACEhsKF0NPTU1BTkRFRF9WQUxVRV9GT1JXQVJEEAMSGAoUQ09NTUFO",
            "REVEX1ZBTFVFX0hJR0gQBCKOAQoQT3V0cHV0X3ZhbHVlVHlwZRIVChFPVVRQ",
            "VVRfVkFMVUVfUEFSSxAAEhgKFE9VVFBVVF9WQUxVRV9SRVZFUlNFEAESGAoU",
            "T1VUUFVUX1ZBTFVFX05FVVRSQUwQAhIYChRPVVRQVVRfVkFMVUVfRk9SV0FS",
            "RBADEhUKEU9VVFBVVF9WQUxVRV9ISUdIEAQiIQoMQWNjZWxfY21kXzY3EhEK",
            "CWFjY2VsX2NtZBgBIAEoASLIAQoWTGF0X2xvbl9oZWFkaW5nX3JwdF84MhIP",
            "CgdoZWFkaW5nGAEgASgBEhkKEWxvbmdpdHVkZV9zZWNvbmRzGAIgASgFEhkK",
            "EWxvbmdpdHVkZV9taW51dGVzGAMgASgFEhkKEWxvbmdpdHVkZV9kZWdyZWVz",
            "GAQgASgFEhgKEGxhdGl0dWRlX3NlY29uZHMYBSABKAUSGAoQbGF0aXR1ZGVf",
            "bWludXRlcxgGIAEoBRIYChBsYXRpdHVkZV9kZWdyZWVzGAcgASgFIqsECg1H",
            "bG9iYWxfY21kXzY5EkUKDXBhY21vZF9lbmFibGUYASABKA4yLi5hcG9sbG8u",
            "Y2FuYnVzLkdsb2JhbF9jbWRfNjkuUGFjbW9kX2VuYWJsZVR5cGUSRwoOY2xl",
            "YXJfb3ZlcnJpZGUYAiABKA4yLy5hcG9sbG8uY2FuYnVzLkdsb2JhbF9jbWRf",
            "NjkuQ2xlYXJfb3ZlcnJpZGVUeXBlEkkKD2lnbm9yZV9vdmVycmlkZRgDIAEo",
            "DjIwLmFwb2xsby5jYW5idXMuR2xvYmFsX2NtZF82OS5JZ25vcmVfb3ZlcnJp",
            "ZGVUeXBlIloKEVBhY21vZF9lbmFibGVUeXBlEiIKHlBBQ01PRF9FTkFCTEVf",
            "Q09OVFJPTF9ESVNBQkxFRBAAEiEKHVBBQ01PRF9FTkFCTEVfQ09OVFJPTF9F",
            "TkFCTEVEEAEicAoSQ2xlYXJfb3ZlcnJpZGVUeXBlEi8KK0NMRUFSX09WRVJS",
            "SURFX0RPTl9UX0NMRUFSX0FDVElWRV9PVkVSUklERVMQABIpCiVDTEVBUl9P",
            "VkVSUklERV9DTEVBUl9BQ1RJVkVfT1ZFUlJJREVTEAEicQoTSWdub3JlX292",
            "ZXJyaWRlVHlwZRIvCitJR05PUkVfT1ZFUlJJREVfRE9OX1RfSUdOT1JFX1VT",
            "RVJfT1ZFUlJJREVTEAASKQolSUdOT1JFX09WRVJSSURFX0lHTk9SRV9VU0VS",
            "X09WRVJSSURFUxABItwBChtQYXJraW5nX2JyYWtlX3N0YXR1c19ycHRfODAS",
            "YwoVcGFya2luZ19icmFrZV9lbmFibGVkGAEgASgOMkQuYXBvbGxvLmNhbmJ1",
            "cy5QYXJraW5nX2JyYWtlX3N0YXR1c19ycHRfODAuUGFya2luZ19icmFrZV9l",
            "bmFibGVkVHlwZSJYChlQYXJraW5nX2JyYWtlX2VuYWJsZWRUeXBlEh0KGVBB",
            "UktJTkdfQlJBS0VfRU5BQkxFRF9PRkYQABIcChhQQVJLSU5HX0JSQUtFX0VO",
            "QUJMRURfT04QASIjCg9ZYXdfcmF0ZV9ycHRfODESEAoIeWF3X3JhdGUYASAB",
            "KAEiogMKC0hvcm5fcnB0Xzc5EkEKDG91dHB1dF92YWx1ZRgBIAEoDjIrLmFw",
            "b2xsby5jYW5idXMuSG9ybl9ycHRfNzkuT3V0cHV0X3ZhbHVlVHlwZRJHCg9j",
            "b21tYW5kZWRfdmFsdWUYAiABKA4yLi5hcG9sbG8uY2FuYnVzLkhvcm5fcnB0",
            "Xzc5LkNvbW1hbmRlZF92YWx1ZVR5cGUSQQoMbWFudWFsX2lucHV0GAMgASgO",
            "MisuYXBvbGxvLmNhbmJ1cy5Ib3JuX3JwdF83OS5NYW51YWxfaW5wdXRUeXBl",
            "Ij0KEE91dHB1dF92YWx1ZVR5cGUSFAoQT1VUUFVUX1ZBTFVFX09GRhAAEhMK",
            "D09VVFBVVF9WQUxVRV9PThABIkYKE0NvbW1hbmRlZF92YWx1ZVR5cGUSFwoT",
            "Q09NTUFOREVEX1ZBTFVFX09GRhAAEhYKEkNPTU1BTkRFRF9WQUxVRV9PThAB",
            "Ij0KEE1hbnVhbF9pbnB1dFR5cGUSFAoQTUFOVUFMX0lOUFVUX09GRhAAEhMK",
            "D01BTlVBTF9JTlBVVF9PThABInsKC0hvcm5fY21kXzc4EjkKCGhvcm5fY21k",
            "GAEgASgOMicuYXBvbGxvLmNhbmJ1cy5Ib3JuX2NtZF83OC5Ib3JuX2NtZFR5",
            "cGUiMQoMSG9ybl9jbWRUeXBlEhAKDEhPUk5fQ01EX09GRhAAEg8KC0hPUk5f",
            "Q01EX09OEAEihwgKDFdpcGVyX3JwdF85MRJCCgxvdXRwdXRfdmFsdWUYASAB",
            "KA4yLC5hcG9sbG8uY2FuYnVzLldpcGVyX3JwdF85MS5PdXRwdXRfdmFsdWVU",
            "eXBlEkgKD2NvbW1hbmRlZF92YWx1ZRgCIAEoDjIvLmFwb2xsby5jYW5idXMu",
            "V2lwZXJfcnB0XzkxLkNvbW1hbmRlZF92YWx1ZVR5cGUSQgoMbWFudWFsX2lu",
            "cHV0GAMgASgOMiwuYXBvbGxvLmNhbmJ1cy5XaXBlcl9ycHRfOTEuTWFudWFs",
            "X2lucHV0VHlwZSKBAgoQT3V0cHV0X3ZhbHVlVHlwZRIbChdPVVRQVVRfVkFM",
            "VUVfV0lQRVJTX09GRhAAEh8KG09VVFBVVF9WQUxVRV9JTlRFUk1JVFRFTlRf",
            "MRABEh8KG09VVFBVVF9WQUxVRV9JTlRFUk1JVFRFTlRfMhACEh8KG09VVFBV",
            "VF9WQUxVRV9JTlRFUk1JVFRFTlRfMxADEh8KG09VVFBVVF9WQUxVRV9JTlRF",
            "Uk1JVFRFTlRfNBAEEh8KG09VVFBVVF9WQUxVRV9JTlRFUk1JVFRFTlRfNRAF",
            "EhQKEE9VVFBVVF9WQUxVRV9MT1cQBhIVChFPVVRQVVRfVkFMVUVfSElHSBAH",
            "IpwCChNDb21tYW5kZWRfdmFsdWVUeXBlEh4KGkNPTU1BTkRFRF9WQUxVRV9X",
            "SVBFUlNfT0ZGEAASIgoeQ09NTUFOREVEX1ZBTFVFX0lOVEVSTUlUVEVOVF8x",
            "EAESIgoeQ09NTUFOREVEX1ZBTFVFX0lOVEVSTUlUVEVOVF8yEAISIgoeQ09N",
            "TUFOREVEX1ZBTFVFX0lOVEVSTUlUVEVOVF8zEAMSIgoeQ09NTUFOREVEX1ZB",
            "TFVFX0lOVEVSTUlUVEVOVF80EAQSIgoeQ09NTUFOREVEX1ZBTFVFX0lOVEVS",
            "TUlUVEVOVF81EAUSFwoTQ09NTUFOREVEX1ZBTFVFX0xPVxAGEhgKFENPTU1B",
            "TkRFRF9WQUxVRV9ISUdIEAcigQIKEE1hbnVhbF9pbnB1dFR5cGUSGwoXTUFO",
            "VUFMX0lOUFVUX1dJUEVSU19PRkYQABIfChtNQU5VQUxfSU5QVVRfSU5URVJN",
            "SVRURU5UXzEQARIfChtNQU5VQUxfSU5QVVRfSU5URVJNSVRURU5UXzIQAhIf",
            "ChtNQU5VQUxfSU5QVVRfSU5URVJNSVRURU5UXzMQAxIfChtNQU5VQUxfSU5Q",
            "VVRfSU5URVJNSVRURU5UXzQQBBIfChtNQU5VQUxfSU5QVVRfSU5URVJNSVRU",
            "RU5UXzUQBRIUChBNQU5VQUxfSU5QVVRfTE9XEAYSFQoRTUFOVUFMX0lOUFVU",
            "X0hJR0gQByLiAQoUVmVoaWNsZV9zcGVlZF9ycHRfNmYSFQoNdmVoaWNsZV9z",
            "cGVlZBgBIAEoARJYChN2ZWhpY2xlX3NwZWVkX3ZhbGlkGAIgASgOMjsuYXBv",
            "bGxvLmNhbmJ1cy5WZWhpY2xlX3NwZWVkX3JwdF82Zi5WZWhpY2xlX3NwZWVk",
            "X3ZhbGlkVHlwZSJZChdWZWhpY2xlX3NwZWVkX3ZhbGlkVHlwZRIfChtWRUhJ",
            "Q0xFX1NQRUVEX1ZBTElEX0lOVkFMSUQQABIdChlWRUhJQ0xFX1NQRUVEX1ZB",
            "TElEX1ZBTElEEAEizgEKEEhlYWRsaWdodF9jbWRfNzYSSAoNaGVhZGxpZ2h0",
            "X2NtZBgBIAEoDjIxLmFwb2xsby5jYW5idXMuSGVhZGxpZ2h0X2NtZF83Ni5I",
            "ZWFkbGlnaHRfY21kVHlwZSJwChFIZWFkbGlnaHRfY21kVHlwZRIgChxIRUFE",
            "TElHSFRfQ01EX0hFQURMSUdIVFNfT0ZGEAASGwoXSEVBRExJR0hUX0NNRF9M",
            "T1dfQkVBTVMQARIcChhIRUFETElHSFRfQ01EX0hJR0hfQkVBTVMQAiJoChdT",
            "dGVlcmluZ19tb3Rvcl9ycHRfMl83NBIbChNlbmNvZGVyX3RlbXBlcmF0dXJl",
            "GAEgASgFEhkKEW1vdG9yX3RlbXBlcmF0dXJlGAIgASgFEhUKDWFuZ3VsYXJf",
            "c3BlZWQYAyABKAEiZQoUQnJha2VfbW90b3JfcnB0XzJfNzESGwoTZW5jb2Rl",
            "cl90ZW1wZXJhdHVyZRgBIAEoBRIZChFtb3Rvcl90ZW1wZXJhdHVyZRgCIAEo",
            "BRIVCg1hbmd1bGFyX3NwZWVkGAMgASgBIkgKF1N0ZWVyaW5nX21vdG9yX3Jw",
            "dF8xXzczEhUKDW1vdG9yX2N1cnJlbnQYASABKAESFgoOc2hhZnRfcG9zaXRp",
            "b24YAiABKAEitQIKDFdpcGVyX2NtZF85MBI8Cgl3aXBlcl9jbWQYASABKA4y",
            "KS5hcG9sbG8uY2FuYnVzLldpcGVyX2NtZF85MC5XaXBlcl9jbWRUeXBlIuYB",
            "Cg1XaXBlcl9jbWRUeXBlEhgKFFdJUEVSX0NNRF9XSVBFUlNfT0ZGEAASHAoY",
            "V0lQRVJfQ01EX0lOVEVSTUlUVEVOVF8xEAESHAoYV0lQRVJfQ01EX0lOVEVS",
            "TUlUVEVOVF8yEAISHAoYV0lQRVJfQ01EX0lOVEVSTUlUVEVOVF8zEAMSHAoY",
            "V0lQRVJfQ01EX0lOVEVSTUlUVEVOVF80EAQSHAoYV0lQRVJfQ01EX0lOVEVS",
            "TUlUVEVOVF81EAUSEQoNV0lQRVJfQ01EX0xPVxAGEhIKDldJUEVSX0NNRF9I",
            "SUdIEAciQwoUQnJha2VfbW90b3JfcnB0XzNfNzISFQoNdG9ycXVlX291dHB1",
            "dBgBIAEoARIUCgx0b3JxdWVfaW5wdXQYAiABKAEi6Q0KA0dlbRIzCg1nbG9i",
            "YWxfcnB0XzZhGAEgASgLMhwuYXBvbGxvLmNhbmJ1cy5HbG9iYWxfcnB0XzZh",
            "EjEKDGJyYWtlX2NtZF82YhgCIAEoCzIbLmFwb2xsby5jYW5idXMuQnJha2Vf",
            "Y21kXzZiEjEKDGJyYWtlX3JwdF82YxgDIAEoCzIbLmFwb2xsby5jYW5idXMu",
            "QnJha2VfcnB0XzZjEjcKD3N0ZWVyaW5nX2NtZF82ZBgEIAEoCzIeLmFwb2xs",
            "by5jYW5idXMuU3RlZXJpbmdfY21kXzZkEjsKEXN0ZWVyaW5nX3JwdF8xXzZl",
            "GAUgASgLMiAuYXBvbGxvLmNhbmJ1cy5TdGVlcmluZ19ycHRfMV82ZRI9ChJ3",
            "aGVlbF9zcGVlZF9ycHRfN2EYBiABKAsyIS5hcG9sbG8uY2FuYnVzLldoZWVs",
            "X3NwZWVkX3JwdF83YRI5ChBkYXRlX3RpbWVfcnB0XzgzGAcgASgLMh8uYXBv",
            "bGxvLmNhbmJ1cy5EYXRlX3RpbWVfcnB0XzgzEkEKFGJyYWtlX21vdG9yX3Jw",
            "dF8xXzcwGAggASgLMiMuYXBvbGxvLmNhbmJ1cy5CcmFrZV9tb3Rvcl9ycHRf",
            "MV83MBI5ChBoZWFkbGlnaHRfcnB0Xzc3GAkgASgLMh8uYXBvbGxvLmNhbmJ1",
            "cy5IZWFkbGlnaHRfcnB0Xzc3EjEKDGFjY2VsX3JwdF82OBgKIAEoCzIbLmFw",
            "b2xsby5jYW5idXMuQWNjZWxfcnB0XzY4EkcKF3N0ZWVyaW5nX21vdG9yX3Jw",
            "dF8zXzc1GAsgASgLMiYuYXBvbGxvLmNhbmJ1cy5TdGVlcmluZ19tb3Rvcl9y",
            "cHRfM183NRIvCgt0dXJuX2NtZF82MxgMIAEoCzIaLmFwb2xsby5jYW5idXMu",
            "VHVybl9jbWRfNjMSLwoLdHVybl9ycHRfNjQYDSABKAsyGi5hcG9sbG8uY2Fu",
            "YnVzLlR1cm5fcnB0XzY0EjEKDHNoaWZ0X2NtZF82NRgOIAEoCzIbLmFwb2xs",
            "by5jYW5idXMuU2hpZnRfY21kXzY1EjEKDHNoaWZ0X3JwdF82NhgPIAEoCzIb",
            "LmFwb2xsby5jYW5idXMuU2hpZnRfcnB0XzY2EjEKDGFjY2VsX2NtZF82NxgQ",
            "IAEoCzIbLmFwb2xsby5jYW5idXMuQWNjZWxfY21kXzY3EkUKFmxhdF9sb25f",
            "aGVhZGluZ19ycHRfODIYESABKAsyJS5hcG9sbG8uY2FuYnVzLkxhdF9sb25f",
            "aGVhZGluZ19ycHRfODISMwoNZ2xvYmFsX2NtZF82ORgSIAEoCzIcLmFwb2xs",
            "by5jYW5idXMuR2xvYmFsX2NtZF82ORJPChtwYXJraW5nX2JyYWtlX3N0YXR1",
            "c19ycHRfODAYEyABKAsyKi5hcG9sbG8uY2FuYnVzLlBhcmtpbmdfYnJha2Vf",
            "c3RhdHVzX3JwdF84MBI3Cg95YXdfcmF0ZV9ycHRfODEYFCABKAsyHi5hcG9s",
            "bG8uY2FuYnVzLllhd19yYXRlX3JwdF84MRIvCgtob3JuX3JwdF83ORgVIAEo",
            "CzIaLmFwb2xsby5jYW5idXMuSG9ybl9ycHRfNzkSLwoLaG9ybl9jbWRfNzgY",
            "FiABKAsyGi5hcG9sbG8uY2FuYnVzLkhvcm5fY21kXzc4EjEKDHdpcGVyX3Jw",
            "dF85MRgXIAEoCzIbLmFwb2xsby5jYW5idXMuV2lwZXJfcnB0XzkxEkEKFHZl",
            "aGljbGVfc3BlZWRfcnB0XzZmGBggASgLMiMuYXBvbGxvLmNhbmJ1cy5WZWhp",
            "Y2xlX3NwZWVkX3JwdF82ZhI5ChBoZWFkbGlnaHRfY21kXzc2GBkgASgLMh8u",
            "YXBvbGxvLmNhbmJ1cy5IZWFkbGlnaHRfY21kXzc2EkcKF3N0ZWVyaW5nX21v",
            "dG9yX3JwdF8yXzc0GBogASgLMiYuYXBvbGxvLmNhbmJ1cy5TdGVlcmluZ19t",
            "b3Rvcl9ycHRfMl83NBJBChRicmFrZV9tb3Rvcl9ycHRfMl83MRgbIAEoCzIj",
            "LmFwb2xsby5jYW5idXMuQnJha2VfbW90b3JfcnB0XzJfNzESRwoXc3RlZXJp",
            "bmdfbW90b3JfcnB0XzFfNzMYHCABKAsyJi5hcG9sbG8uY2FuYnVzLlN0ZWVy",
            "aW5nX21vdG9yX3JwdF8xXzczEjEKDHdpcGVyX2NtZF85MBgdIAEoCzIbLmFw",
            "b2xsby5jYW5idXMuV2lwZXJfY21kXzkwEkEKFGJyYWtlX21vdG9yX3JwdF8z",
            "XzcyGB4gASgLMiMuYXBvbGxvLmNhbmJ1cy5CcmFrZV9tb3Rvcl9ycHRfM183",
            "MmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Canbus.ChassisReflection.Descriptor, global::Apollo.Canbus.Ge3Reflection.Descriptor, global::Apollo.Canbus.LexusReflection.Descriptor, global::Apollo.Canbus.TransitReflection.Descriptor, global::Apollo.Canbus.WeyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.ChassisDetail), global::Apollo.Canbus.ChassisDetail.Parser, new[]{ "CarType", "Basic", "Safety", "Gear", "Ems", "Esp", "Gas", "Epb", "Brake", "Deceleration", "VehicleSpd", "Eps", "Light", "Battery", "CheckResponse", "License", "Surround", "Gem", "Lexus", "Transit", "Ge3", "Wey" }, null, new[]{ typeof(global::Apollo.Canbus.ChassisDetail.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.CheckResponseSignal), global::Apollo.Canbus.CheckResponseSignal.Parser, new[]{ "IsEpsOnline", "IsEpbOnline", "IsEspOnline", "IsVtogOnline", "IsScuOnline", "IsSwitchOnline", "IsVcuOnline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Battery), global::Apollo.Canbus.Battery.Parser, new[]{ "BatteryPercent", "FuelLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Light), global::Apollo.Canbus.Light.Parser, new[]{ "TurnLightType", "BeamLampType", "IsBrakeLampOn", "IsAutoLight", "WiperGear", "LotionGear", "IsHornOn", "LincolnLampType", "LincolnWiper", "LincolnAmbient" }, null, new[]{ typeof(global::Apollo.Canbus.Light.Types.TurnLightType), typeof(global::Apollo.Canbus.Light.Types.BeamLampType), typeof(global::Apollo.Canbus.Light.Types.LincolnLampType), typeof(global::Apollo.Canbus.Light.Types.LincolnWiperType), typeof(global::Apollo.Canbus.Light.Types.LincolnAmbientType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Eps), global::Apollo.Canbus.Eps.Parser, new[]{ "IsEpsFail", "EpsControlState", "EpsDriverHandTorq", "IsSteeringAngleValid", "SteeringAngle", "SteeringAngleSpd", "IsTrimmingStatus", "IsCalibrationStatus", "IsFailureStatus", "AllowEnterAutonomousMode", "CurrentDrivingMode", "SteeringAngleCmd", "VehicleSpeed", "EpasTorque", "SteeringEnabled", "DriverOverride", "DriverActivity", "WatchdogFault", "Channel1Fault", "Channel2Fault", "CalibrationFault", "ConnectorFault", "Timestamp65", "MajorVersion", "MinorVersion", "BuildNumber" }, null, new[]{ typeof(global::Apollo.Canbus.Eps.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.VehicleSpd), global::Apollo.Canbus.VehicleSpd.Parser, new[]{ "IsVehicleStandstill", "IsVehicleSpdValid", "VehicleSpd_", "IsWheelSpdRrValid", "WheelDirectionRr", "WheelSpdRr", "IsWheelSpdRlValid", "WheelDirectionRl", "WheelSpdRl", "IsWheelSpdFrValid", "WheelDirectionFr", "WheelSpdFr", "IsWheelSpdFlValid", "WheelDirectionFl", "WheelSpdFl", "IsYawRateValid", "YawRate", "YawRateOffset", "IsAxValid", "Ax", "AxOffset", "IsAyValid", "Ay", "AyOffset", "LatAcc", "LongAcc", "VertAcc", "RollRate", "AccEst", "TimestampSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Deceleration), global::Apollo.Canbus.Deceleration.Parser, new[]{ "IsDecelerationAvailable", "IsDecelerationActive", "Deceleration_", "IsEvbFail", "EvbPressure", "BrakePressure", "BrakePressureSpd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake), global::Apollo.Canbus.Brake.Parser, new[]{ "IsBrakePedalPressed", "IsBrakeForceExist", "IsBrakeOverHeat", "IsHandBrakeOn", "BrakePedalPosition", "IsBrakeValid", "BrakeInput", "BrakeCmd", "BrakeOutput", "BooInput", "BooCmd", "BooOutput", "WatchdogApplyingBrakes", "WatchdogSource", "BrakeEnabled", "DriverOverride", "DriverActivity", "WatchdogFault", "Channel1Fault", "Channel2Fault", "BooFault", "ConnectorFault", "BrakeTorqueReq", "HsaStatus", "BrakeTorqueAct", "HsaMode", "WheelTorqueAct", "MajorVersion", "MinorVersion", "BuildNumber" }, null, new[]{ typeof(global::Apollo.Canbus.Brake.Types.HSAStatusType), typeof(global::Apollo.Canbus.Brake.Types.HSAModeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Epb), global::Apollo.Canbus.Epb.Parser, new[]{ "IsEpbError", "IsEpbReleased", "EpbStatus", "ParkingBrakeStatus" }, null, new[]{ typeof(global::Apollo.Canbus.Epb.Types.PBrakeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Gas), global::Apollo.Canbus.Gas.Parser, new[]{ "IsGasPedalError", "IsGasPedalPressedMore", "GasPedalPosition", "IsGasValid", "ThrottleInput", "ThrottleCmd", "ThrottleOutput", "WatchdogSource", "ThrottleEnabled", "DriverOverride", "DriverActivity", "WatchdogFault", "Channel1Fault", "Channel2Fault", "ConnectorFault", "AcceleratorPedal", "AcceleratorPedalRate", "MajorVersion", "MinorVersion", "BuildNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Esp), global::Apollo.Canbus.Esp.Parser, new[]{ "IsEspAccError", "IsEspOn", "IsEspActive", "IsAbsError", "IsAbsActive", "IsTcsvdcFail", "IsAbsEnabled", "IsStabActive", "IsStabEnabled", "IsTracActive", "IsTracEnabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Ems), global::Apollo.Canbus.Ems.Parser, new[]{ "IsEngineAccAvailable", "IsEngineAccError", "EngineState", "MaxEngineTorqPercent", "MinEngineTorqPercent", "BaseEngineTorqConstant", "IsEngineSpeedError", "EngineSpeed", "EngineTorque", "IsOverEngineTorque", "EngineRpm" }, null, new[]{ typeof(global::Apollo.Canbus.Ems.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Gear), global::Apollo.Canbus.Gear.Parser, new[]{ "IsShiftPositionValid", "GearState", "DriverOverride", "GearCmd", "CanbusFault" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Safety), global::Apollo.Canbus.Safety.Parser, new[]{ "IsDriverCarDoorClose", "IsDriverBuckled", "EmergencyButton", "HasError", "IsMotorInvertorFault", "IsSystemFault", "IsPowerBatteryFault", "IsMotorInvertorOverTemperature", "IsSmallBatteryChargeDischargeFault", "DrivingMode", "IsPassengerDoorOpen", "IsRearleftDoorOpen", "IsRearrightDoorOpen", "IsHoodOpen", "IsTrunkOpen", "IsPassengerDetected", "IsPassengerAirbagEnabled", "IsPassengerBuckled", "FrontLeftTirePress", "FrontRightTirePress", "RearLeftTirePress", "RearRightTirePress", "CarDrivingMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.BasicInfo), global::Apollo.Canbus.BasicInfo.Parser, new[]{ "IsAutoMode", "PowerState", "IsAirBagDeployed", "OdoMeter", "DriveRange", "IsSystemError", "IsHumanInterrupt", "AccOnButton", "AccOffButton", "AccResButton", "AccCancelButton", "AccOnOffButton", "AccResCancelButton", "AccIncSpdButton", "AccDecSpdButton", "AccIncGapButton", "AccDecGapButton", "LkaButton", "CanbusFault", "Latitude", "Longitude", "GpsValid", "Year", "Month", "Day", "Hours", "Minutes", "Seconds", "CompassDirection", "Pdop", "IsGpsFault", "IsInferred", "Altitude", "Heading", "Hdop", "Vdop", "Quality", "NumSatellites", "GpsSpeed" }, null, new[]{ typeof(global::Apollo.Canbus.BasicInfo.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Global_rpt_6a), global::Apollo.Canbus.Global_rpt_6a.Parser, new[]{ "PacmodStatus", "OverrideStatus", "VehCanTimeout", "StrCanTimeout", "BrkCanTimeout", "UsrCanTimeout", "UsrCanReadErrors" }, null, new[]{ typeof(global::Apollo.Canbus.Global_rpt_6a.Types.Pacmod_statusType), typeof(global::Apollo.Canbus.Global_rpt_6a.Types.Override_statusType), typeof(global::Apollo.Canbus.Global_rpt_6a.Types.Brk_can_timeoutType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_cmd_6b), global::Apollo.Canbus.Brake_cmd_6b.Parser, new[]{ "BrakeCmd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_rpt_6c), global::Apollo.Canbus.Brake_rpt_6c.Parser, new[]{ "ManualInput", "CommandedValue", "OutputValue", "BrakeOnOff" }, null, new[]{ typeof(global::Apollo.Canbus.Brake_rpt_6c.Types.Brake_on_offType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_cmd_6d), global::Apollo.Canbus.Steering_cmd_6d.Parser, new[]{ "PositionValue", "SpeedLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_rpt_1_6e), global::Apollo.Canbus.Steering_rpt_1_6e.Parser, new[]{ "ManualInput", "CommandedValue", "OutputValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Wheel_speed_rpt_7a), global::Apollo.Canbus.Wheel_speed_rpt_7a.Parser, new[]{ "WheelSpdRearRight", "WheelSpdRearLeft", "WheelSpdFrontRight", "WheelSpdFrontLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Date_time_rpt_83), global::Apollo.Canbus.Date_time_rpt_83.Parser, new[]{ "TimeSecond", "TimeMinute", "TimeHour", "DateDay", "DateMonth", "DateYear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_motor_rpt_1_70), global::Apollo.Canbus.Brake_motor_rpt_1_70.Parser, new[]{ "MotorCurrent", "ShaftPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Headlight_rpt_77), global::Apollo.Canbus.Headlight_rpt_77.Parser, new[]{ "OutputValue", "ManualInput", "CommandedValue" }, null, new[]{ typeof(global::Apollo.Canbus.Headlight_rpt_77.Types.Output_valueType), typeof(global::Apollo.Canbus.Headlight_rpt_77.Types.Manual_inputType), typeof(global::Apollo.Canbus.Headlight_rpt_77.Types.Commanded_valueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Accel_rpt_68), global::Apollo.Canbus.Accel_rpt_68.Parser, new[]{ "ManualInput", "CommandedValue", "OutputValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_motor_rpt_3_75), global::Apollo.Canbus.Steering_motor_rpt_3_75.Parser, new[]{ "TorqueOutput", "TorqueInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Turn_cmd_63), global::Apollo.Canbus.Turn_cmd_63.Parser, new[]{ "TurnSignalCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Turn_cmd_63.Types.Turn_signal_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Turn_rpt_64), global::Apollo.Canbus.Turn_rpt_64.Parser, new[]{ "ManualInput", "CommandedValue", "OutputValue" }, null, new[]{ typeof(global::Apollo.Canbus.Turn_rpt_64.Types.Manual_inputType), typeof(global::Apollo.Canbus.Turn_rpt_64.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Turn_rpt_64.Types.Output_valueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Shift_cmd_65), global::Apollo.Canbus.Shift_cmd_65.Parser, new[]{ "ShiftCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Shift_cmd_65.Types.Shift_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Shift_rpt_66), global::Apollo.Canbus.Shift_rpt_66.Parser, new[]{ "ManualInput", "CommandedValue", "OutputValue" }, null, new[]{ typeof(global::Apollo.Canbus.Shift_rpt_66.Types.Manual_inputType), typeof(global::Apollo.Canbus.Shift_rpt_66.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Shift_rpt_66.Types.Output_valueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Accel_cmd_67), global::Apollo.Canbus.Accel_cmd_67.Parser, new[]{ "AccelCmd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Lat_lon_heading_rpt_82), global::Apollo.Canbus.Lat_lon_heading_rpt_82.Parser, new[]{ "Heading", "LongitudeSeconds", "LongitudeMinutes", "LongitudeDegrees", "LatitudeSeconds", "LatitudeMinutes", "LatitudeDegrees" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Global_cmd_69), global::Apollo.Canbus.Global_cmd_69.Parser, new[]{ "PacmodEnable", "ClearOverride", "IgnoreOverride" }, null, new[]{ typeof(global::Apollo.Canbus.Global_cmd_69.Types.Pacmod_enableType), typeof(global::Apollo.Canbus.Global_cmd_69.Types.Clear_overrideType), typeof(global::Apollo.Canbus.Global_cmd_69.Types.Ignore_overrideType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Parking_brake_status_rpt_80), global::Apollo.Canbus.Parking_brake_status_rpt_80.Parser, new[]{ "ParkingBrakeEnabled" }, null, new[]{ typeof(global::Apollo.Canbus.Parking_brake_status_rpt_80.Types.Parking_brake_enabledType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Yaw_rate_rpt_81), global::Apollo.Canbus.Yaw_rate_rpt_81.Parser, new[]{ "YawRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Horn_rpt_79), global::Apollo.Canbus.Horn_rpt_79.Parser, new[]{ "OutputValue", "CommandedValue", "ManualInput" }, null, new[]{ typeof(global::Apollo.Canbus.Horn_rpt_79.Types.Output_valueType), typeof(global::Apollo.Canbus.Horn_rpt_79.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Horn_rpt_79.Types.Manual_inputType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Horn_cmd_78), global::Apollo.Canbus.Horn_cmd_78.Parser, new[]{ "HornCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Horn_cmd_78.Types.Horn_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Wiper_rpt_91), global::Apollo.Canbus.Wiper_rpt_91.Parser, new[]{ "OutputValue", "CommandedValue", "ManualInput" }, null, new[]{ typeof(global::Apollo.Canbus.Wiper_rpt_91.Types.Output_valueType), typeof(global::Apollo.Canbus.Wiper_rpt_91.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Wiper_rpt_91.Types.Manual_inputType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Vehicle_speed_rpt_6f), global::Apollo.Canbus.Vehicle_speed_rpt_6f.Parser, new[]{ "VehicleSpeed", "VehicleSpeedValid" }, null, new[]{ typeof(global::Apollo.Canbus.Vehicle_speed_rpt_6f.Types.Vehicle_speed_validType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Headlight_cmd_76), global::Apollo.Canbus.Headlight_cmd_76.Parser, new[]{ "HeadlightCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Headlight_cmd_76.Types.Headlight_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_motor_rpt_2_74), global::Apollo.Canbus.Steering_motor_rpt_2_74.Parser, new[]{ "EncoderTemperature", "MotorTemperature", "AngularSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_motor_rpt_2_71), global::Apollo.Canbus.Brake_motor_rpt_2_71.Parser, new[]{ "EncoderTemperature", "MotorTemperature", "AngularSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_motor_rpt_1_73), global::Apollo.Canbus.Steering_motor_rpt_1_73.Parser, new[]{ "MotorCurrent", "ShaftPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Wiper_cmd_90), global::Apollo.Canbus.Wiper_cmd_90.Parser, new[]{ "WiperCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Wiper_cmd_90.Types.Wiper_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_motor_rpt_3_72), global::Apollo.Canbus.Brake_motor_rpt_3_72.Parser, new[]{ "TorqueOutput", "TorqueInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Gem), global::Apollo.Canbus.Gem.Parser, new[]{ "GlobalRpt6A", "BrakeCmd6B", "BrakeRpt6C", "SteeringCmd6D", "SteeringRpt16E", "WheelSpeedRpt7A", "DateTimeRpt83", "BrakeMotorRpt170", "HeadlightRpt77", "AccelRpt68", "SteeringMotorRpt375", "TurnCmd63", "TurnRpt64", "ShiftCmd65", "ShiftRpt66", "AccelCmd67", "LatLonHeadingRpt82", "GlobalCmd69", "ParkingBrakeStatusRpt80", "YawRateRpt81", "HornRpt79", "HornCmd78", "WiperRpt91", "VehicleSpeedRpt6F", "HeadlightCmd76", "SteeringMotorRpt274", "BrakeMotorRpt271", "SteeringMotorRpt173", "WiperCmd90", "BrakeMotorRpt372" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChassisDetail : pb::IMessage<ChassisDetail> {
    private static readonly pb::MessageParser<ChassisDetail> _parser = new pb::MessageParser<ChassisDetail>(() => new ChassisDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChassisDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDetail(ChassisDetail other) : this() {
      carType_ = other.carType_;
      Basic = other.basic_ != null ? other.Basic.Clone() : null;
      Safety = other.safety_ != null ? other.Safety.Clone() : null;
      Gear = other.gear_ != null ? other.Gear.Clone() : null;
      Ems = other.ems_ != null ? other.Ems.Clone() : null;
      Esp = other.esp_ != null ? other.Esp.Clone() : null;
      Gas = other.gas_ != null ? other.Gas.Clone() : null;
      Epb = other.epb_ != null ? other.Epb.Clone() : null;
      Brake = other.brake_ != null ? other.Brake.Clone() : null;
      Deceleration = other.deceleration_ != null ? other.Deceleration.Clone() : null;
      VehicleSpd = other.vehicleSpd_ != null ? other.VehicleSpd.Clone() : null;
      Eps = other.eps_ != null ? other.Eps.Clone() : null;
      Light = other.light_ != null ? other.Light.Clone() : null;
      Battery = other.battery_ != null ? other.Battery.Clone() : null;
      CheckResponse = other.checkResponse_ != null ? other.CheckResponse.Clone() : null;
      License = other.license_ != null ? other.License.Clone() : null;
      Surround = other.surround_ != null ? other.Surround.Clone() : null;
      Gem = other.gem_ != null ? other.Gem.Clone() : null;
      Lexus = other.lexus_ != null ? other.Lexus.Clone() : null;
      Transit = other.transit_ != null ? other.Transit.Clone() : null;
      Ge3 = other.ge3_ != null ? other.Ge3.Clone() : null;
      Wey = other.wey_ != null ? other.Wey.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDetail Clone() {
      return new ChassisDetail(this);
    }

    /// <summary>Field number for the "car_type" field.</summary>
    public const int CarTypeFieldNumber = 1;
    private global::Apollo.Canbus.ChassisDetail.Types.Type carType_ = 0;
    /// <summary>
    /// car type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.ChassisDetail.Types.Type CarType {
      get { return carType_; }
      set {
        carType_ = value;
      }
    }

    /// <summary>Field number for the "basic" field.</summary>
    public const int BasicFieldNumber = 2;
    private global::Apollo.Canbus.BasicInfo basic_;
    /// <summary>
    /// basic info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.BasicInfo Basic {
      get { return basic_; }
      set {
        basic_ = value;
      }
    }

    /// <summary>Field number for the "safety" field.</summary>
    public const int SafetyFieldNumber = 3;
    private global::Apollo.Canbus.Safety safety_;
    /// <summary>
    /// safety
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Safety Safety {
      get { return safety_; }
      set {
        safety_ = value;
      }
    }

    /// <summary>Field number for the "gear" field.</summary>
    public const int GearFieldNumber = 4;
    private global::Apollo.Canbus.Gear gear_;
    /// <summary>
    /// gear
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Gear Gear {
      get { return gear_; }
      set {
        gear_ = value;
      }
    }

    /// <summary>Field number for the "ems" field.</summary>
    public const int EmsFieldNumber = 5;
    private global::Apollo.Canbus.Ems ems_;
    /// <summary>
    /// engine manager system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Ems Ems {
      get { return ems_; }
      set {
        ems_ = value;
      }
    }

    /// <summary>Field number for the "esp" field.</summary>
    public const int EspFieldNumber = 6;
    private global::Apollo.Canbus.Esp esp_;
    /// <summary>
    /// Electronic Stability Program
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Esp Esp {
      get { return esp_; }
      set {
        esp_ = value;
      }
    }

    /// <summary>Field number for the "gas" field.</summary>
    public const int GasFieldNumber = 7;
    private global::Apollo.Canbus.Gas gas_;
    /// <summary>
    /// gas pedal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Gas Gas {
      get { return gas_; }
      set {
        gas_ = value;
      }
    }

    /// <summary>Field number for the "epb" field.</summary>
    public const int EpbFieldNumber = 8;
    private global::Apollo.Canbus.Epb epb_;
    /// <summary>
    /// Electronic parking brake
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Epb Epb {
      get { return epb_; }
      set {
        epb_ = value;
      }
    }

    /// <summary>Field number for the "brake" field.</summary>
    public const int BrakeFieldNumber = 9;
    private global::Apollo.Canbus.Brake brake_;
    /// <summary>
    /// brake pedal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake Brake {
      get { return brake_; }
      set {
        brake_ = value;
      }
    }

    /// <summary>Field number for the "deceleration" field.</summary>
    public const int DecelerationFieldNumber = 10;
    private global::Apollo.Canbus.Deceleration deceleration_;
    /// <summary>
    /// deceleration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Deceleration Deceleration {
      get { return deceleration_; }
      set {
        deceleration_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_spd" field.</summary>
    public const int VehicleSpdFieldNumber = 11;
    private global::Apollo.Canbus.VehicleSpd vehicleSpd_;
    /// <summary>
    /// vehicle speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.VehicleSpd VehicleSpd {
      get { return vehicleSpd_; }
      set {
        vehicleSpd_ = value;
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 12;
    private global::Apollo.Canbus.Eps eps_;
    /// <summary>
    /// Electronic Power Steering
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Eps Eps {
      get { return eps_; }
      set {
        eps_ = value;
      }
    }

    /// <summary>Field number for the "light" field.</summary>
    public const int LightFieldNumber = 13;
    private global::Apollo.Canbus.Light light_;
    /// <summary>
    /// Light
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Light Light {
      get { return light_; }
      set {
        light_ = value;
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 14;
    private global::Apollo.Canbus.Battery battery_;
    /// <summary>
    /// Battery info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Battery Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "check_response" field.</summary>
    public const int CheckResponseFieldNumber = 15;
    private global::Apollo.Canbus.CheckResponseSignal checkResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.CheckResponseSignal CheckResponse {
      get { return checkResponse_; }
      set {
        checkResponse_ = value;
      }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 16;
    private global::Apollo.Canbus.License license_;
    /// <summary>
    /// License info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.License License {
      get { return license_; }
      set {
        license_ = value;
      }
    }

    /// <summary>Field number for the "surround" field.</summary>
    public const int SurroundFieldNumber = 17;
    private global::Apollo.Canbus.Surround surround_;
    /// <summary>
    /// Surround information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Surround Surround {
      get { return surround_; }
      set {
        surround_ = value;
      }
    }

    /// <summary>Field number for the "gem" field.</summary>
    public const int GemFieldNumber = 18;
    private global::Apollo.Canbus.Gem gem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Gem Gem {
      get { return gem_; }
      set {
        gem_ = value;
      }
    }

    /// <summary>Field number for the "lexus" field.</summary>
    public const int LexusFieldNumber = 19;
    private global::Apollo.Canbus.Lexus lexus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Lexus Lexus {
      get { return lexus_; }
      set {
        lexus_ = value;
      }
    }

    /// <summary>Field number for the "transit" field.</summary>
    public const int TransitFieldNumber = 20;
    private global::Apollo.Canbus.Transit transit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Transit Transit {
      get { return transit_; }
      set {
        transit_ = value;
      }
    }

    /// <summary>Field number for the "ge3" field.</summary>
    public const int Ge3FieldNumber = 21;
    private global::Apollo.Canbus.Ge3 ge3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Ge3 Ge3 {
      get { return ge3_; }
      set {
        ge3_ = value;
      }
    }

    /// <summary>Field number for the "wey" field.</summary>
    public const int WeyFieldNumber = 22;
    private global::Apollo.Canbus.Wey wey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wey Wey {
      get { return wey_; }
      set {
        wey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChassisDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChassisDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarType != other.CarType) return false;
      if (!object.Equals(Basic, other.Basic)) return false;
      if (!object.Equals(Safety, other.Safety)) return false;
      if (!object.Equals(Gear, other.Gear)) return false;
      if (!object.Equals(Ems, other.Ems)) return false;
      if (!object.Equals(Esp, other.Esp)) return false;
      if (!object.Equals(Gas, other.Gas)) return false;
      if (!object.Equals(Epb, other.Epb)) return false;
      if (!object.Equals(Brake, other.Brake)) return false;
      if (!object.Equals(Deceleration, other.Deceleration)) return false;
      if (!object.Equals(VehicleSpd, other.VehicleSpd)) return false;
      if (!object.Equals(Eps, other.Eps)) return false;
      if (!object.Equals(Light, other.Light)) return false;
      if (!object.Equals(Battery, other.Battery)) return false;
      if (!object.Equals(CheckResponse, other.CheckResponse)) return false;
      if (!object.Equals(License, other.License)) return false;
      if (!object.Equals(Surround, other.Surround)) return false;
      if (!object.Equals(Gem, other.Gem)) return false;
      if (!object.Equals(Lexus, other.Lexus)) return false;
      if (!object.Equals(Transit, other.Transit)) return false;
      if (!object.Equals(Ge3, other.Ge3)) return false;
      if (!object.Equals(Wey, other.Wey)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarType != 0) hash ^= CarType.GetHashCode();
      if (basic_ != null) hash ^= Basic.GetHashCode();
      if (safety_ != null) hash ^= Safety.GetHashCode();
      if (gear_ != null) hash ^= Gear.GetHashCode();
      if (ems_ != null) hash ^= Ems.GetHashCode();
      if (esp_ != null) hash ^= Esp.GetHashCode();
      if (gas_ != null) hash ^= Gas.GetHashCode();
      if (epb_ != null) hash ^= Epb.GetHashCode();
      if (brake_ != null) hash ^= Brake.GetHashCode();
      if (deceleration_ != null) hash ^= Deceleration.GetHashCode();
      if (vehicleSpd_ != null) hash ^= VehicleSpd.GetHashCode();
      if (eps_ != null) hash ^= Eps.GetHashCode();
      if (light_ != null) hash ^= Light.GetHashCode();
      if (battery_ != null) hash ^= Battery.GetHashCode();
      if (checkResponse_ != null) hash ^= CheckResponse.GetHashCode();
      if (license_ != null) hash ^= License.GetHashCode();
      if (surround_ != null) hash ^= Surround.GetHashCode();
      if (gem_ != null) hash ^= Gem.GetHashCode();
      if (lexus_ != null) hash ^= Lexus.GetHashCode();
      if (transit_ != null) hash ^= Transit.GetHashCode();
      if (ge3_ != null) hash ^= Ge3.GetHashCode();
      if (wey_ != null) hash ^= Wey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CarType);
      }
      if (basic_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Basic);
      }
      if (safety_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Safety);
      }
      if (gear_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Gear);
      }
      if (ems_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ems);
      }
      if (esp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Esp);
      }
      if (gas_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Gas);
      }
      if (epb_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Epb);
      }
      if (brake_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Brake);
      }
      if (deceleration_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Deceleration);
      }
      if (vehicleSpd_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(VehicleSpd);
      }
      if (eps_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Eps);
      }
      if (light_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Light);
      }
      if (battery_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Battery);
      }
      if (checkResponse_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(CheckResponse);
      }
      if (license_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(License);
      }
      if (surround_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Surround);
      }
      if (gem_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Gem);
      }
      if (lexus_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Lexus);
      }
      if (transit_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Transit);
      }
      if (ge3_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Ge3);
      }
      if (wey_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Wey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CarType);
      }
      if (basic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Basic);
      }
      if (safety_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Safety);
      }
      if (gear_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gear);
      }
      if (ems_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ems);
      }
      if (esp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Esp);
      }
      if (gas_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gas);
      }
      if (epb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Epb);
      }
      if (brake_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brake);
      }
      if (deceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deceleration);
      }
      if (vehicleSpd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VehicleSpd);
      }
      if (eps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Eps);
      }
      if (light_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Light);
      }
      if (battery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battery);
      }
      if (checkResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckResponse);
      }
      if (license_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(License);
      }
      if (surround_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Surround);
      }
      if (gem_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gem);
      }
      if (lexus_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Lexus);
      }
      if (transit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Transit);
      }
      if (ge3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ge3);
      }
      if (wey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Wey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChassisDetail other) {
      if (other == null) {
        return;
      }
      if (other.CarType != 0) {
        CarType = other.CarType;
      }
      if (other.basic_ != null) {
        if (basic_ == null) {
          basic_ = new global::Apollo.Canbus.BasicInfo();
        }
        Basic.MergeFrom(other.Basic);
      }
      if (other.safety_ != null) {
        if (safety_ == null) {
          safety_ = new global::Apollo.Canbus.Safety();
        }
        Safety.MergeFrom(other.Safety);
      }
      if (other.gear_ != null) {
        if (gear_ == null) {
          gear_ = new global::Apollo.Canbus.Gear();
        }
        Gear.MergeFrom(other.Gear);
      }
      if (other.ems_ != null) {
        if (ems_ == null) {
          ems_ = new global::Apollo.Canbus.Ems();
        }
        Ems.MergeFrom(other.Ems);
      }
      if (other.esp_ != null) {
        if (esp_ == null) {
          esp_ = new global::Apollo.Canbus.Esp();
        }
        Esp.MergeFrom(other.Esp);
      }
      if (other.gas_ != null) {
        if (gas_ == null) {
          gas_ = new global::Apollo.Canbus.Gas();
        }
        Gas.MergeFrom(other.Gas);
      }
      if (other.epb_ != null) {
        if (epb_ == null) {
          epb_ = new global::Apollo.Canbus.Epb();
        }
        Epb.MergeFrom(other.Epb);
      }
      if (other.brake_ != null) {
        if (brake_ == null) {
          brake_ = new global::Apollo.Canbus.Brake();
        }
        Brake.MergeFrom(other.Brake);
      }
      if (other.deceleration_ != null) {
        if (deceleration_ == null) {
          deceleration_ = new global::Apollo.Canbus.Deceleration();
        }
        Deceleration.MergeFrom(other.Deceleration);
      }
      if (other.vehicleSpd_ != null) {
        if (vehicleSpd_ == null) {
          vehicleSpd_ = new global::Apollo.Canbus.VehicleSpd();
        }
        VehicleSpd.MergeFrom(other.VehicleSpd);
      }
      if (other.eps_ != null) {
        if (eps_ == null) {
          eps_ = new global::Apollo.Canbus.Eps();
        }
        Eps.MergeFrom(other.Eps);
      }
      if (other.light_ != null) {
        if (light_ == null) {
          light_ = new global::Apollo.Canbus.Light();
        }
        Light.MergeFrom(other.Light);
      }
      if (other.battery_ != null) {
        if (battery_ == null) {
          battery_ = new global::Apollo.Canbus.Battery();
        }
        Battery.MergeFrom(other.Battery);
      }
      if (other.checkResponse_ != null) {
        if (checkResponse_ == null) {
          checkResponse_ = new global::Apollo.Canbus.CheckResponseSignal();
        }
        CheckResponse.MergeFrom(other.CheckResponse);
      }
      if (other.license_ != null) {
        if (license_ == null) {
          license_ = new global::Apollo.Canbus.License();
        }
        License.MergeFrom(other.License);
      }
      if (other.surround_ != null) {
        if (surround_ == null) {
          surround_ = new global::Apollo.Canbus.Surround();
        }
        Surround.MergeFrom(other.Surround);
      }
      if (other.gem_ != null) {
        if (gem_ == null) {
          gem_ = new global::Apollo.Canbus.Gem();
        }
        Gem.MergeFrom(other.Gem);
      }
      if (other.lexus_ != null) {
        if (lexus_ == null) {
          lexus_ = new global::Apollo.Canbus.Lexus();
        }
        Lexus.MergeFrom(other.Lexus);
      }
      if (other.transit_ != null) {
        if (transit_ == null) {
          transit_ = new global::Apollo.Canbus.Transit();
        }
        Transit.MergeFrom(other.Transit);
      }
      if (other.ge3_ != null) {
        if (ge3_ == null) {
          ge3_ = new global::Apollo.Canbus.Ge3();
        }
        Ge3.MergeFrom(other.Ge3);
      }
      if (other.wey_ != null) {
        if (wey_ == null) {
          wey_ = new global::Apollo.Canbus.Wey();
        }
        Wey.MergeFrom(other.Wey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            carType_ = (global::Apollo.Canbus.ChassisDetail.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (basic_ == null) {
              basic_ = new global::Apollo.Canbus.BasicInfo();
            }
            input.ReadMessage(basic_);
            break;
          }
          case 26: {
            if (safety_ == null) {
              safety_ = new global::Apollo.Canbus.Safety();
            }
            input.ReadMessage(safety_);
            break;
          }
          case 34: {
            if (gear_ == null) {
              gear_ = new global::Apollo.Canbus.Gear();
            }
            input.ReadMessage(gear_);
            break;
          }
          case 42: {
            if (ems_ == null) {
              ems_ = new global::Apollo.Canbus.Ems();
            }
            input.ReadMessage(ems_);
            break;
          }
          case 50: {
            if (esp_ == null) {
              esp_ = new global::Apollo.Canbus.Esp();
            }
            input.ReadMessage(esp_);
            break;
          }
          case 58: {
            if (gas_ == null) {
              gas_ = new global::Apollo.Canbus.Gas();
            }
            input.ReadMessage(gas_);
            break;
          }
          case 66: {
            if (epb_ == null) {
              epb_ = new global::Apollo.Canbus.Epb();
            }
            input.ReadMessage(epb_);
            break;
          }
          case 74: {
            if (brake_ == null) {
              brake_ = new global::Apollo.Canbus.Brake();
            }
            input.ReadMessage(brake_);
            break;
          }
          case 82: {
            if (deceleration_ == null) {
              deceleration_ = new global::Apollo.Canbus.Deceleration();
            }
            input.ReadMessage(deceleration_);
            break;
          }
          case 90: {
            if (vehicleSpd_ == null) {
              vehicleSpd_ = new global::Apollo.Canbus.VehicleSpd();
            }
            input.ReadMessage(vehicleSpd_);
            break;
          }
          case 98: {
            if (eps_ == null) {
              eps_ = new global::Apollo.Canbus.Eps();
            }
            input.ReadMessage(eps_);
            break;
          }
          case 106: {
            if (light_ == null) {
              light_ = new global::Apollo.Canbus.Light();
            }
            input.ReadMessage(light_);
            break;
          }
          case 114: {
            if (battery_ == null) {
              battery_ = new global::Apollo.Canbus.Battery();
            }
            input.ReadMessage(battery_);
            break;
          }
          case 122: {
            if (checkResponse_ == null) {
              checkResponse_ = new global::Apollo.Canbus.CheckResponseSignal();
            }
            input.ReadMessage(checkResponse_);
            break;
          }
          case 130: {
            if (license_ == null) {
              license_ = new global::Apollo.Canbus.License();
            }
            input.ReadMessage(license_);
            break;
          }
          case 138: {
            if (surround_ == null) {
              surround_ = new global::Apollo.Canbus.Surround();
            }
            input.ReadMessage(surround_);
            break;
          }
          case 146: {
            if (gem_ == null) {
              gem_ = new global::Apollo.Canbus.Gem();
            }
            input.ReadMessage(gem_);
            break;
          }
          case 154: {
            if (lexus_ == null) {
              lexus_ = new global::Apollo.Canbus.Lexus();
            }
            input.ReadMessage(lexus_);
            break;
          }
          case 162: {
            if (transit_ == null) {
              transit_ = new global::Apollo.Canbus.Transit();
            }
            input.ReadMessage(transit_);
            break;
          }
          case 170: {
            if (ge3_ == null) {
              ge3_ = new global::Apollo.Canbus.Ge3();
            }
            input.ReadMessage(ge3_);
            break;
          }
          case 178: {
            if (wey_ == null) {
              wey_ = new global::Apollo.Canbus.Wey();
            }
            input.ReadMessage(wey_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChassisDetail message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("QIRUI_EQ_15")] QiruiEq15 = 0,
        [pbr::OriginalName("CHANGAN_RUICHENG")] ChanganRuicheng = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// CheckResponseSignal
  /// </summary>
  public sealed partial class CheckResponseSignal : pb::IMessage<CheckResponseSignal> {
    private static readonly pb::MessageParser<CheckResponseSignal> _parser = new pb::MessageParser<CheckResponseSignal>(() => new CheckResponseSignal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckResponseSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponseSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponseSignal(CheckResponseSignal other) : this() {
      isEpsOnline_ = other.isEpsOnline_;
      isEpbOnline_ = other.isEpbOnline_;
      isEspOnline_ = other.isEspOnline_;
      isVtogOnline_ = other.isVtogOnline_;
      isScuOnline_ = other.isScuOnline_;
      isSwitchOnline_ = other.isSwitchOnline_;
      isVcuOnline_ = other.isVcuOnline_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponseSignal Clone() {
      return new CheckResponseSignal(this);
    }

    /// <summary>Field number for the "is_eps_online" field.</summary>
    public const int IsEpsOnlineFieldNumber = 1;
    private bool isEpsOnline_;
    /// <summary>
    /// byd:0x34C qirui:0x505
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEpsOnline {
      get { return isEpsOnline_; }
      set {
        isEpsOnline_ = value;
      }
    }

    /// <summary>Field number for the "is_epb_online" field.</summary>
    public const int IsEpbOnlineFieldNumber = 2;
    private bool isEpbOnline_;
    /// <summary>
    /// byd:0x218
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEpbOnline {
      get { return isEpbOnline_; }
      set {
        isEpbOnline_ = value;
      }
    }

    /// <summary>Field number for the "is_esp_online" field.</summary>
    public const int IsEspOnlineFieldNumber = 3;
    private bool isEspOnline_;
    /// <summary>
    /// byd:0x122 qirui:0x451
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEspOnline {
      get { return isEspOnline_; }
      set {
        isEspOnline_ = value;
      }
    }

    /// <summary>Field number for the "is_vtog_online" field.</summary>
    public const int IsVtogOnlineFieldNumber = 4;
    private bool isVtogOnline_;
    /// <summary>
    /// byd:0x242
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVtogOnline {
      get { return isVtogOnline_; }
      set {
        isVtogOnline_ = value;
      }
    }

    /// <summary>Field number for the "is_scu_online" field.</summary>
    public const int IsScuOnlineFieldNumber = 5;
    private bool isScuOnline_;
    /// <summary>
    /// byd:0x35C
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsScuOnline {
      get { return isScuOnline_; }
      set {
        isScuOnline_ = value;
      }
    }

    /// <summary>Field number for the "is_switch_online" field.</summary>
    public const int IsSwitchOnlineFieldNumber = 6;
    private bool isSwitchOnline_;
    /// <summary>
    /// byd:0x133
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSwitchOnline {
      get { return isSwitchOnline_; }
      set {
        isSwitchOnline_ = value;
      }
    }

    /// <summary>Field number for the "is_vcu_online" field.</summary>
    public const int IsVcuOnlineFieldNumber = 7;
    private bool isVcuOnline_;
    /// <summary>
    ///  qirui:0x400
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVcuOnline {
      get { return isVcuOnline_; }
      set {
        isVcuOnline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckResponseSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckResponseSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEpsOnline != other.IsEpsOnline) return false;
      if (IsEpbOnline != other.IsEpbOnline) return false;
      if (IsEspOnline != other.IsEspOnline) return false;
      if (IsVtogOnline != other.IsVtogOnline) return false;
      if (IsScuOnline != other.IsScuOnline) return false;
      if (IsSwitchOnline != other.IsSwitchOnline) return false;
      if (IsVcuOnline != other.IsVcuOnline) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEpsOnline != false) hash ^= IsEpsOnline.GetHashCode();
      if (IsEpbOnline != false) hash ^= IsEpbOnline.GetHashCode();
      if (IsEspOnline != false) hash ^= IsEspOnline.GetHashCode();
      if (IsVtogOnline != false) hash ^= IsVtogOnline.GetHashCode();
      if (IsScuOnline != false) hash ^= IsScuOnline.GetHashCode();
      if (IsSwitchOnline != false) hash ^= IsSwitchOnline.GetHashCode();
      if (IsVcuOnline != false) hash ^= IsVcuOnline.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsEpsOnline != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEpsOnline);
      }
      if (IsEpbOnline != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEpbOnline);
      }
      if (IsEspOnline != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsEspOnline);
      }
      if (IsVtogOnline != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsVtogOnline);
      }
      if (IsScuOnline != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsScuOnline);
      }
      if (IsSwitchOnline != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSwitchOnline);
      }
      if (IsVcuOnline != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsVcuOnline);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEpsOnline != false) {
        size += 1 + 1;
      }
      if (IsEpbOnline != false) {
        size += 1 + 1;
      }
      if (IsEspOnline != false) {
        size += 1 + 1;
      }
      if (IsVtogOnline != false) {
        size += 1 + 1;
      }
      if (IsScuOnline != false) {
        size += 1 + 1;
      }
      if (IsSwitchOnline != false) {
        size += 1 + 1;
      }
      if (IsVcuOnline != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckResponseSignal other) {
      if (other == null) {
        return;
      }
      if (other.IsEpsOnline != false) {
        IsEpsOnline = other.IsEpsOnline;
      }
      if (other.IsEpbOnline != false) {
        IsEpbOnline = other.IsEpbOnline;
      }
      if (other.IsEspOnline != false) {
        IsEspOnline = other.IsEspOnline;
      }
      if (other.IsVtogOnline != false) {
        IsVtogOnline = other.IsVtogOnline;
      }
      if (other.IsScuOnline != false) {
        IsScuOnline = other.IsScuOnline;
      }
      if (other.IsSwitchOnline != false) {
        IsSwitchOnline = other.IsSwitchOnline;
      }
      if (other.IsVcuOnline != false) {
        IsVcuOnline = other.IsVcuOnline;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsEpsOnline = input.ReadBool();
            break;
          }
          case 16: {
            IsEpbOnline = input.ReadBool();
            break;
          }
          case 24: {
            IsEspOnline = input.ReadBool();
            break;
          }
          case 32: {
            IsVtogOnline = input.ReadBool();
            break;
          }
          case 40: {
            IsScuOnline = input.ReadBool();
            break;
          }
          case 48: {
            IsSwitchOnline = input.ReadBool();
            break;
          }
          case 56: {
            IsVcuOnline = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Battery
  /// </summary>
  public sealed partial class Battery : pb::IMessage<Battery> {
    private static readonly pb::MessageParser<Battery> _parser = new pb::MessageParser<Battery>(() => new Battery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Battery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Battery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Battery(Battery other) : this() {
      batteryPercent_ = other.batteryPercent_;
      fuelLevel_ = other.fuelLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Battery Clone() {
      return new Battery(this);
    }

    /// <summary>Field number for the "battery_percent" field.</summary>
    public const int BatteryPercentFieldNumber = 1;
    private double batteryPercent_;
    /// <summary>
    /// unit:%, battery percentage left
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BatteryPercent {
      get { return batteryPercent_; }
      set {
        batteryPercent_ = value;
      }
    }

    /// <summary>Field number for the "fuel_level" field.</summary>
    public const int FuelLevelFieldNumber = 2;
    private double fuelLevel_;
    /// <summary>
    /// lincoln fuellevel 72
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FuelLevel {
      get { return fuelLevel_; }
      set {
        fuelLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Battery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Battery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatteryPercent != other.BatteryPercent) return false;
      if (FuelLevel != other.FuelLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatteryPercent != 0D) hash ^= BatteryPercent.GetHashCode();
      if (FuelLevel != 0D) hash ^= FuelLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatteryPercent != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BatteryPercent);
      }
      if (FuelLevel != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FuelLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatteryPercent != 0D) {
        size += 1 + 8;
      }
      if (FuelLevel != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Battery other) {
      if (other == null) {
        return;
      }
      if (other.BatteryPercent != 0D) {
        BatteryPercent = other.BatteryPercent;
      }
      if (other.FuelLevel != 0D) {
        FuelLevel = other.FuelLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            BatteryPercent = input.ReadDouble();
            break;
          }
          case 17: {
            FuelLevel = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// light
  /// </summary>
  public sealed partial class Light : pb::IMessage<Light> {
    private static readonly pb::MessageParser<Light> _parser = new pb::MessageParser<Light>(() => new Light());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Light> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light(Light other) : this() {
      turnLightType_ = other.turnLightType_;
      beamLampType_ = other.beamLampType_;
      isBrakeLampOn_ = other.isBrakeLampOn_;
      isAutoLight_ = other.isAutoLight_;
      wiperGear_ = other.wiperGear_;
      lotionGear_ = other.lotionGear_;
      isHornOn_ = other.isHornOn_;
      lincolnLampType_ = other.lincolnLampType_;
      lincolnWiper_ = other.lincolnWiper_;
      lincolnAmbient_ = other.lincolnAmbient_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light Clone() {
      return new Light(this);
    }

    /// <summary>Field number for the "turn_light_type" field.</summary>
    public const int TurnLightTypeFieldNumber = 1;
    private global::Apollo.Canbus.Light.Types.TurnLightType turnLightType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Light.Types.TurnLightType TurnLightType {
      get { return turnLightType_; }
      set {
        turnLightType_ = value;
      }
    }

    /// <summary>Field number for the "beam_lamp_type" field.</summary>
    public const int BeamLampTypeFieldNumber = 2;
    private global::Apollo.Canbus.Light.Types.BeamLampType beamLampType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Light.Types.BeamLampType BeamLampType {
      get { return beamLampType_; }
      set {
        beamLampType_ = value;
      }
    }

    /// <summary>Field number for the "is_brake_lamp_on" field.</summary>
    public const int IsBrakeLampOnFieldNumber = 3;
    private bool isBrakeLampOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrakeLampOn {
      get { return isBrakeLampOn_; }
      set {
        isBrakeLampOn_ = value;
      }
    }

    /// <summary>Field number for the "is_auto_light" field.</summary>
    public const int IsAutoLightFieldNumber = 4;
    private bool isAutoLight_;
    /// <summary>
    /// byd switch 133
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoLight {
      get { return isAutoLight_; }
      set {
        isAutoLight_ = value;
      }
    }

    /// <summary>Field number for the "wiper_gear" field.</summary>
    public const int WiperGearFieldNumber = 5;
    private int wiperGear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WiperGear {
      get { return wiperGear_; }
      set {
        wiperGear_ = value;
      }
    }

    /// <summary>Field number for the "lotion_gear" field.</summary>
    public const int LotionGearFieldNumber = 6;
    private int lotionGear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LotionGear {
      get { return lotionGear_; }
      set {
        lotionGear_ = value;
      }
    }

    /// <summary>Field number for the "is_horn_on" field.</summary>
    public const int IsHornOnFieldNumber = 7;
    private bool isHornOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHornOn {
      get { return isHornOn_; }
      set {
        isHornOn_ = value;
      }
    }

    /// <summary>Field number for the "lincoln_lamp_type" field.</summary>
    public const int LincolnLampTypeFieldNumber = 8;
    private global::Apollo.Canbus.Light.Types.LincolnLampType lincolnLampType_ = 0;
    /// <summary>
    /// lincoln misc 69
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Light.Types.LincolnLampType LincolnLampType {
      get { return lincolnLampType_; }
      set {
        lincolnLampType_ = value;
      }
    }

    /// <summary>Field number for the "lincoln_wiper" field.</summary>
    public const int LincolnWiperFieldNumber = 9;
    private global::Apollo.Canbus.Light.Types.LincolnWiperType lincolnWiper_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Light.Types.LincolnWiperType LincolnWiper {
      get { return lincolnWiper_; }
      set {
        lincolnWiper_ = value;
      }
    }

    /// <summary>Field number for the "lincoln_ambient" field.</summary>
    public const int LincolnAmbientFieldNumber = 10;
    private global::Apollo.Canbus.Light.Types.LincolnAmbientType lincolnAmbient_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Light.Types.LincolnAmbientType LincolnAmbient {
      get { return lincolnAmbient_; }
      set {
        lincolnAmbient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Light);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Light other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurnLightType != other.TurnLightType) return false;
      if (BeamLampType != other.BeamLampType) return false;
      if (IsBrakeLampOn != other.IsBrakeLampOn) return false;
      if (IsAutoLight != other.IsAutoLight) return false;
      if (WiperGear != other.WiperGear) return false;
      if (LotionGear != other.LotionGear) return false;
      if (IsHornOn != other.IsHornOn) return false;
      if (LincolnLampType != other.LincolnLampType) return false;
      if (LincolnWiper != other.LincolnWiper) return false;
      if (LincolnAmbient != other.LincolnAmbient) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurnLightType != 0) hash ^= TurnLightType.GetHashCode();
      if (BeamLampType != 0) hash ^= BeamLampType.GetHashCode();
      if (IsBrakeLampOn != false) hash ^= IsBrakeLampOn.GetHashCode();
      if (IsAutoLight != false) hash ^= IsAutoLight.GetHashCode();
      if (WiperGear != 0) hash ^= WiperGear.GetHashCode();
      if (LotionGear != 0) hash ^= LotionGear.GetHashCode();
      if (IsHornOn != false) hash ^= IsHornOn.GetHashCode();
      if (LincolnLampType != 0) hash ^= LincolnLampType.GetHashCode();
      if (LincolnWiper != 0) hash ^= LincolnWiper.GetHashCode();
      if (LincolnAmbient != 0) hash ^= LincolnAmbient.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurnLightType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TurnLightType);
      }
      if (BeamLampType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BeamLampType);
      }
      if (IsBrakeLampOn != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBrakeLampOn);
      }
      if (IsAutoLight != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAutoLight);
      }
      if (WiperGear != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WiperGear);
      }
      if (LotionGear != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LotionGear);
      }
      if (IsHornOn != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsHornOn);
      }
      if (LincolnLampType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) LincolnLampType);
      }
      if (LincolnWiper != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) LincolnWiper);
      }
      if (LincolnAmbient != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) LincolnAmbient);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurnLightType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TurnLightType);
      }
      if (BeamLampType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BeamLampType);
      }
      if (IsBrakeLampOn != false) {
        size += 1 + 1;
      }
      if (IsAutoLight != false) {
        size += 1 + 1;
      }
      if (WiperGear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WiperGear);
      }
      if (LotionGear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LotionGear);
      }
      if (IsHornOn != false) {
        size += 1 + 1;
      }
      if (LincolnLampType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LincolnLampType);
      }
      if (LincolnWiper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LincolnWiper);
      }
      if (LincolnAmbient != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LincolnAmbient);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Light other) {
      if (other == null) {
        return;
      }
      if (other.TurnLightType != 0) {
        TurnLightType = other.TurnLightType;
      }
      if (other.BeamLampType != 0) {
        BeamLampType = other.BeamLampType;
      }
      if (other.IsBrakeLampOn != false) {
        IsBrakeLampOn = other.IsBrakeLampOn;
      }
      if (other.IsAutoLight != false) {
        IsAutoLight = other.IsAutoLight;
      }
      if (other.WiperGear != 0) {
        WiperGear = other.WiperGear;
      }
      if (other.LotionGear != 0) {
        LotionGear = other.LotionGear;
      }
      if (other.IsHornOn != false) {
        IsHornOn = other.IsHornOn;
      }
      if (other.LincolnLampType != 0) {
        LincolnLampType = other.LincolnLampType;
      }
      if (other.LincolnWiper != 0) {
        LincolnWiper = other.LincolnWiper;
      }
      if (other.LincolnAmbient != 0) {
        LincolnAmbient = other.LincolnAmbient;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            turnLightType_ = (global::Apollo.Canbus.Light.Types.TurnLightType) input.ReadEnum();
            break;
          }
          case 16: {
            beamLampType_ = (global::Apollo.Canbus.Light.Types.BeamLampType) input.ReadEnum();
            break;
          }
          case 24: {
            IsBrakeLampOn = input.ReadBool();
            break;
          }
          case 32: {
            IsAutoLight = input.ReadBool();
            break;
          }
          case 40: {
            WiperGear = input.ReadInt32();
            break;
          }
          case 48: {
            LotionGear = input.ReadInt32();
            break;
          }
          case 56: {
            IsHornOn = input.ReadBool();
            break;
          }
          case 64: {
            lincolnLampType_ = (global::Apollo.Canbus.Light.Types.LincolnLampType) input.ReadEnum();
            break;
          }
          case 72: {
            lincolnWiper_ = (global::Apollo.Canbus.Light.Types.LincolnWiperType) input.ReadEnum();
            break;
          }
          case 80: {
            lincolnAmbient_ = (global::Apollo.Canbus.Light.Types.LincolnAmbientType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Light message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TurnLightType {
        [pbr::OriginalName("TURN_LIGHT_OFF")] TurnLightOff = 0,
        [pbr::OriginalName("TURN_LEFT_ON")] TurnLeftOn = 1,
        [pbr::OriginalName("TURN_RIGHT_ON")] TurnRightOn = 2,
        [pbr::OriginalName("TURN_LIGHT_ON")] TurnLightOn = 3,
      }

      public enum BeamLampType {
        [pbr::OriginalName("BEAM_OFF")] BeamOff = 0,
        [pbr::OriginalName("HIGH_BEAM_ON")] HighBeamOn = 1,
        [pbr::OriginalName("LOW_BEAM_ON")] LowBeamOn = 2,
      }

      public enum LincolnLampType {
        [pbr::OriginalName("BEAM_NULL")] BeamNull = 0,
        [pbr::OriginalName("BEAM_FLASH_TO_PASS")] BeamFlashToPass = 1,
        [pbr::OriginalName("BEAM_HIGH")] BeamHigh = 2,
        [pbr::OriginalName("BEAM_INVALID")] BeamInvalid = 3,
      }

      public enum LincolnWiperType {
        [pbr::OriginalName("WIPER_OFF")] WiperOff = 0,
        [pbr::OriginalName("WIPER_AUTO_OFF")] WiperAutoOff = 1,
        [pbr::OriginalName("WIPER_OFF_MOVING")] WiperOffMoving = 2,
        [pbr::OriginalName("WIPER_MANUAL_OFF")] WiperManualOff = 3,
        [pbr::OriginalName("WIPER_MANUAL_ON")] WiperManualOn = 4,
        [pbr::OriginalName("WIPER_MANUAL_LOW")] WiperManualLow = 5,
        [pbr::OriginalName("WIPER_MANUAL_HIGH")] WiperManualHigh = 6,
        [pbr::OriginalName("WIPER_MIST_FLICK")] WiperMistFlick = 7,
        [pbr::OriginalName("WIPER_WASH")] WiperWash = 8,
        [pbr::OriginalName("WIPER_AUTO_LOW")] WiperAutoLow = 9,
        [pbr::OriginalName("WIPER_AUTO_HIGH")] WiperAutoHigh = 10,
        [pbr::OriginalName("WIPER_COURTESY_WIPE")] WiperCourtesyWipe = 11,
        [pbr::OriginalName("WIPER_AUTO_ADJUST")] WiperAutoAdjust = 12,
        [pbr::OriginalName("WIPER_RESERVED")] WiperReserved = 13,
        [pbr::OriginalName("WIPER_STALLED")] WiperStalled = 14,
        [pbr::OriginalName("WIPER_NO_DATA")] WiperNoData = 15,
      }

      public enum LincolnAmbientType {
        [pbr::OriginalName("AMBIENT_DARK")] AmbientDark = 0,
        [pbr::OriginalName("AMBIENT_LIGHT")] AmbientLight = 1,
        [pbr::OriginalName("AMBIENT_TWILIGHT")] AmbientTwilight = 2,
        [pbr::OriginalName("AMBIENT_TUNNEL_ON")] AmbientTunnelOn = 3,
        [pbr::OriginalName("AMBIENT_TUNNEL_OFF")] AmbientTunnelOff = 4,
        [pbr::OriginalName("AMBIENT_INVALID")] AmbientInvalid = 5,
        [pbr::OriginalName("AMBIENT_NO_DATA")] AmbientNoData = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// Electrical Power Steering
  /// </summary>
  public sealed partial class Eps : pb::IMessage<Eps> {
    private static readonly pb::MessageParser<Eps> _parser = new pb::MessageParser<Eps>(() => new Eps());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Eps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eps(Eps other) : this() {
      isEpsFail_ = other.isEpsFail_;
      epsControlState_ = other.epsControlState_;
      epsDriverHandTorq_ = other.epsDriverHandTorq_;
      isSteeringAngleValid_ = other.isSteeringAngleValid_;
      steeringAngle_ = other.steeringAngle_;
      steeringAngleSpd_ = other.steeringAngleSpd_;
      isTrimmingStatus_ = other.isTrimmingStatus_;
      isCalibrationStatus_ = other.isCalibrationStatus_;
      isFailureStatus_ = other.isFailureStatus_;
      allowEnterAutonomousMode_ = other.allowEnterAutonomousMode_;
      currentDrivingMode_ = other.currentDrivingMode_;
      steeringAngleCmd_ = other.steeringAngleCmd_;
      vehicleSpeed_ = other.vehicleSpeed_;
      epasTorque_ = other.epasTorque_;
      steeringEnabled_ = other.steeringEnabled_;
      driverOverride_ = other.driverOverride_;
      driverActivity_ = other.driverActivity_;
      watchdogFault_ = other.watchdogFault_;
      channel1Fault_ = other.channel1Fault_;
      channel2Fault_ = other.channel2Fault_;
      calibrationFault_ = other.calibrationFault_;
      connectorFault_ = other.connectorFault_;
      timestamp65_ = other.timestamp65_;
      majorVersion_ = other.majorVersion_;
      minorVersion_ = other.minorVersion_;
      buildNumber_ = other.buildNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eps Clone() {
      return new Eps(this);
    }

    /// <summary>Field number for the "is_eps_fail" field.</summary>
    public const int IsEpsFailFieldNumber = 1;
    private bool isEpsFail_;
    /// <summary>
    /// changan: eps 2a0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEpsFail {
      get { return isEpsFail_; }
      set {
        isEpsFail_ = value;
      }
    }

    /// <summary>Field number for the "eps_control_state" field.</summary>
    public const int EpsControlStateFieldNumber = 2;
    private global::Apollo.Canbus.Eps.Types.Type epsControlState_ = 0;
    /// <summary>
    /// eps 2a0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Eps.Types.Type EpsControlState {
      get { return epsControlState_; }
      set {
        epsControlState_ = value;
      }
    }

    /// <summary>Field number for the "eps_driver_hand_torq" field.</summary>
    public const int EpsDriverHandTorqFieldNumber = 3;
    private double epsDriverHandTorq_;
    /// <summary>
    /// unit:Nm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EpsDriverHandTorq {
      get { return epsDriverHandTorq_; }
      set {
        epsDriverHandTorq_ = value;
      }
    }

    /// <summary>Field number for the "is_steering_angle_valid" field.</summary>
    public const int IsSteeringAngleValidFieldNumber = 4;
    private bool isSteeringAngleValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSteeringAngleValid {
      get { return isSteeringAngleValid_; }
      set {
        isSteeringAngleValid_ = value;
      }
    }

    /// <summary>Field number for the "steering_angle" field.</summary>
    public const int SteeringAngleFieldNumber = 5;
    private double steeringAngle_;
    /// <summary>
    /// unit:degree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringAngle {
      get { return steeringAngle_; }
      set {
        steeringAngle_ = value;
      }
    }

    /// <summary>Field number for the "steering_angle_spd" field.</summary>
    public const int SteeringAngleSpdFieldNumber = 6;
    private double steeringAngleSpd_;
    /// <summary>
    /// unit:degree/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringAngleSpd {
      get { return steeringAngleSpd_; }
      set {
        steeringAngleSpd_ = value;
      }
    }

    /// <summary>Field number for the "is_trimming_status" field.</summary>
    public const int IsTrimmingStatusFieldNumber = 7;
    private bool isTrimmingStatus_;
    /// <summary>
    /// byd sas 11f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrimmingStatus {
      get { return isTrimmingStatus_; }
      set {
        isTrimmingStatus_ = value;
      }
    }

    /// <summary>Field number for the "is_calibration_status" field.</summary>
    public const int IsCalibrationStatusFieldNumber = 8;
    private bool isCalibrationStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCalibrationStatus {
      get { return isCalibrationStatus_; }
      set {
        isCalibrationStatus_ = value;
      }
    }

    /// <summary>Field number for the "is_failure_status" field.</summary>
    public const int IsFailureStatusFieldNumber = 9;
    private bool isFailureStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFailureStatus {
      get { return isFailureStatus_; }
      set {
        isFailureStatus_ = value;
      }
    }

    /// <summary>Field number for the "allow_enter_autonomous_mode" field.</summary>
    public const int AllowEnterAutonomousModeFieldNumber = 10;
    private int allowEnterAutonomousMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllowEnterAutonomousMode {
      get { return allowEnterAutonomousMode_; }
      set {
        allowEnterAutonomousMode_ = value;
      }
    }

    /// <summary>Field number for the "current_driving_mode" field.</summary>
    public const int CurrentDrivingModeFieldNumber = 11;
    private int currentDrivingMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentDrivingMode {
      get { return currentDrivingMode_; }
      set {
        currentDrivingMode_ = value;
      }
    }

    /// <summary>Field number for the "steering_angle_cmd" field.</summary>
    public const int SteeringAngleCmdFieldNumber = 12;
    private double steeringAngleCmd_;
    /// <summary>
    /// lincoln steering 65
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringAngleCmd {
      get { return steeringAngleCmd_; }
      set {
        steeringAngleCmd_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_speed" field.</summary>
    public const int VehicleSpeedFieldNumber = 13;
    private double vehicleSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleSpeed {
      get { return vehicleSpeed_; }
      set {
        vehicleSpeed_ = value;
      }
    }

    /// <summary>Field number for the "epas_torque" field.</summary>
    public const int EpasTorqueFieldNumber = 14;
    private double epasTorque_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EpasTorque {
      get { return epasTorque_; }
      set {
        epasTorque_ = value;
      }
    }

    /// <summary>Field number for the "steering_enabled" field.</summary>
    public const int SteeringEnabledFieldNumber = 15;
    private bool steeringEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SteeringEnabled {
      get { return steeringEnabled_; }
      set {
        steeringEnabled_ = value;
      }
    }

    /// <summary>Field number for the "driver_override" field.</summary>
    public const int DriverOverrideFieldNumber = 16;
    private bool driverOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverOverride {
      get { return driverOverride_; }
      set {
        driverOverride_ = value;
      }
    }

    /// <summary>Field number for the "driver_activity" field.</summary>
    public const int DriverActivityFieldNumber = 17;
    private bool driverActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverActivity {
      get { return driverActivity_; }
      set {
        driverActivity_ = value;
      }
    }

    /// <summary>Field number for the "watchdog_fault" field.</summary>
    public const int WatchdogFaultFieldNumber = 18;
    private bool watchdogFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WatchdogFault {
      get { return watchdogFault_; }
      set {
        watchdogFault_ = value;
      }
    }

    /// <summary>Field number for the "channel_1_fault" field.</summary>
    public const int Channel1FaultFieldNumber = 19;
    private bool channel1Fault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Channel1Fault {
      get { return channel1Fault_; }
      set {
        channel1Fault_ = value;
      }
    }

    /// <summary>Field number for the "channel_2_fault" field.</summary>
    public const int Channel2FaultFieldNumber = 20;
    private bool channel2Fault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Channel2Fault {
      get { return channel2Fault_; }
      set {
        channel2Fault_ = value;
      }
    }

    /// <summary>Field number for the "calibration_fault" field.</summary>
    public const int CalibrationFaultFieldNumber = 21;
    private bool calibrationFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CalibrationFault {
      get { return calibrationFault_; }
      set {
        calibrationFault_ = value;
      }
    }

    /// <summary>Field number for the "connector_fault" field.</summary>
    public const int ConnectorFaultFieldNumber = 22;
    private bool connectorFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConnectorFault {
      get { return connectorFault_; }
      set {
        connectorFault_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_65" field.</summary>
    public const int Timestamp65FieldNumber = 23;
    private double timestamp65_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp65 {
      get { return timestamp65_; }
      set {
        timestamp65_ = value;
      }
    }

    /// <summary>Field number for the "major_version" field.</summary>
    public const int MajorVersionFieldNumber = 24;
    private int majorVersion_;
    /// <summary>
    /// lincoln version 7f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MajorVersion {
      get { return majorVersion_; }
      set {
        majorVersion_ = value;
      }
    }

    /// <summary>Field number for the "minor_version" field.</summary>
    public const int MinorVersionFieldNumber = 25;
    private int minorVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinorVersion {
      get { return minorVersion_; }
      set {
        minorVersion_ = value;
      }
    }

    /// <summary>Field number for the "build_number" field.</summary>
    public const int BuildNumberFieldNumber = 26;
    private int buildNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildNumber {
      get { return buildNumber_; }
      set {
        buildNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Eps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Eps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEpsFail != other.IsEpsFail) return false;
      if (EpsControlState != other.EpsControlState) return false;
      if (EpsDriverHandTorq != other.EpsDriverHandTorq) return false;
      if (IsSteeringAngleValid != other.IsSteeringAngleValid) return false;
      if (SteeringAngle != other.SteeringAngle) return false;
      if (SteeringAngleSpd != other.SteeringAngleSpd) return false;
      if (IsTrimmingStatus != other.IsTrimmingStatus) return false;
      if (IsCalibrationStatus != other.IsCalibrationStatus) return false;
      if (IsFailureStatus != other.IsFailureStatus) return false;
      if (AllowEnterAutonomousMode != other.AllowEnterAutonomousMode) return false;
      if (CurrentDrivingMode != other.CurrentDrivingMode) return false;
      if (SteeringAngleCmd != other.SteeringAngleCmd) return false;
      if (VehicleSpeed != other.VehicleSpeed) return false;
      if (EpasTorque != other.EpasTorque) return false;
      if (SteeringEnabled != other.SteeringEnabled) return false;
      if (DriverOverride != other.DriverOverride) return false;
      if (DriverActivity != other.DriverActivity) return false;
      if (WatchdogFault != other.WatchdogFault) return false;
      if (Channel1Fault != other.Channel1Fault) return false;
      if (Channel2Fault != other.Channel2Fault) return false;
      if (CalibrationFault != other.CalibrationFault) return false;
      if (ConnectorFault != other.ConnectorFault) return false;
      if (Timestamp65 != other.Timestamp65) return false;
      if (MajorVersion != other.MajorVersion) return false;
      if (MinorVersion != other.MinorVersion) return false;
      if (BuildNumber != other.BuildNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEpsFail != false) hash ^= IsEpsFail.GetHashCode();
      if (EpsControlState != 0) hash ^= EpsControlState.GetHashCode();
      if (EpsDriverHandTorq != 0D) hash ^= EpsDriverHandTorq.GetHashCode();
      if (IsSteeringAngleValid != false) hash ^= IsSteeringAngleValid.GetHashCode();
      if (SteeringAngle != 0D) hash ^= SteeringAngle.GetHashCode();
      if (SteeringAngleSpd != 0D) hash ^= SteeringAngleSpd.GetHashCode();
      if (IsTrimmingStatus != false) hash ^= IsTrimmingStatus.GetHashCode();
      if (IsCalibrationStatus != false) hash ^= IsCalibrationStatus.GetHashCode();
      if (IsFailureStatus != false) hash ^= IsFailureStatus.GetHashCode();
      if (AllowEnterAutonomousMode != 0) hash ^= AllowEnterAutonomousMode.GetHashCode();
      if (CurrentDrivingMode != 0) hash ^= CurrentDrivingMode.GetHashCode();
      if (SteeringAngleCmd != 0D) hash ^= SteeringAngleCmd.GetHashCode();
      if (VehicleSpeed != 0D) hash ^= VehicleSpeed.GetHashCode();
      if (EpasTorque != 0D) hash ^= EpasTorque.GetHashCode();
      if (SteeringEnabled != false) hash ^= SteeringEnabled.GetHashCode();
      if (DriverOverride != false) hash ^= DriverOverride.GetHashCode();
      if (DriverActivity != false) hash ^= DriverActivity.GetHashCode();
      if (WatchdogFault != false) hash ^= WatchdogFault.GetHashCode();
      if (Channel1Fault != false) hash ^= Channel1Fault.GetHashCode();
      if (Channel2Fault != false) hash ^= Channel2Fault.GetHashCode();
      if (CalibrationFault != false) hash ^= CalibrationFault.GetHashCode();
      if (ConnectorFault != false) hash ^= ConnectorFault.GetHashCode();
      if (Timestamp65 != 0D) hash ^= Timestamp65.GetHashCode();
      if (MajorVersion != 0) hash ^= MajorVersion.GetHashCode();
      if (MinorVersion != 0) hash ^= MinorVersion.GetHashCode();
      if (BuildNumber != 0) hash ^= BuildNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsEpsFail != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEpsFail);
      }
      if (EpsControlState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EpsControlState);
      }
      if (EpsDriverHandTorq != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(EpsDriverHandTorq);
      }
      if (IsSteeringAngleValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSteeringAngleValid);
      }
      if (SteeringAngle != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SteeringAngle);
      }
      if (SteeringAngleSpd != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SteeringAngleSpd);
      }
      if (IsTrimmingStatus != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsTrimmingStatus);
      }
      if (IsCalibrationStatus != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsCalibrationStatus);
      }
      if (IsFailureStatus != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsFailureStatus);
      }
      if (AllowEnterAutonomousMode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AllowEnterAutonomousMode);
      }
      if (CurrentDrivingMode != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrentDrivingMode);
      }
      if (SteeringAngleCmd != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(SteeringAngleCmd);
      }
      if (VehicleSpeed != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(VehicleSpeed);
      }
      if (EpasTorque != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(EpasTorque);
      }
      if (SteeringEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(SteeringEnabled);
      }
      if (DriverOverride != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(DriverOverride);
      }
      if (DriverActivity != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(DriverActivity);
      }
      if (WatchdogFault != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(WatchdogFault);
      }
      if (Channel1Fault != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Channel1Fault);
      }
      if (Channel2Fault != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Channel2Fault);
      }
      if (CalibrationFault != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(CalibrationFault);
      }
      if (ConnectorFault != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ConnectorFault);
      }
      if (Timestamp65 != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(Timestamp65);
      }
      if (MajorVersion != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MajorVersion);
      }
      if (MinorVersion != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(MinorVersion);
      }
      if (BuildNumber != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(BuildNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEpsFail != false) {
        size += 1 + 1;
      }
      if (EpsControlState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EpsControlState);
      }
      if (EpsDriverHandTorq != 0D) {
        size += 1 + 8;
      }
      if (IsSteeringAngleValid != false) {
        size += 1 + 1;
      }
      if (SteeringAngle != 0D) {
        size += 1 + 8;
      }
      if (SteeringAngleSpd != 0D) {
        size += 1 + 8;
      }
      if (IsTrimmingStatus != false) {
        size += 1 + 1;
      }
      if (IsCalibrationStatus != false) {
        size += 1 + 1;
      }
      if (IsFailureStatus != false) {
        size += 1 + 1;
      }
      if (AllowEnterAutonomousMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowEnterAutonomousMode);
      }
      if (CurrentDrivingMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentDrivingMode);
      }
      if (SteeringAngleCmd != 0D) {
        size += 1 + 8;
      }
      if (VehicleSpeed != 0D) {
        size += 1 + 8;
      }
      if (EpasTorque != 0D) {
        size += 1 + 8;
      }
      if (SteeringEnabled != false) {
        size += 1 + 1;
      }
      if (DriverOverride != false) {
        size += 2 + 1;
      }
      if (DriverActivity != false) {
        size += 2 + 1;
      }
      if (WatchdogFault != false) {
        size += 2 + 1;
      }
      if (Channel1Fault != false) {
        size += 2 + 1;
      }
      if (Channel2Fault != false) {
        size += 2 + 1;
      }
      if (CalibrationFault != false) {
        size += 2 + 1;
      }
      if (ConnectorFault != false) {
        size += 2 + 1;
      }
      if (Timestamp65 != 0D) {
        size += 2 + 8;
      }
      if (MajorVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MajorVersion);
      }
      if (MinorVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinorVersion);
      }
      if (BuildNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuildNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Eps other) {
      if (other == null) {
        return;
      }
      if (other.IsEpsFail != false) {
        IsEpsFail = other.IsEpsFail;
      }
      if (other.EpsControlState != 0) {
        EpsControlState = other.EpsControlState;
      }
      if (other.EpsDriverHandTorq != 0D) {
        EpsDriverHandTorq = other.EpsDriverHandTorq;
      }
      if (other.IsSteeringAngleValid != false) {
        IsSteeringAngleValid = other.IsSteeringAngleValid;
      }
      if (other.SteeringAngle != 0D) {
        SteeringAngle = other.SteeringAngle;
      }
      if (other.SteeringAngleSpd != 0D) {
        SteeringAngleSpd = other.SteeringAngleSpd;
      }
      if (other.IsTrimmingStatus != false) {
        IsTrimmingStatus = other.IsTrimmingStatus;
      }
      if (other.IsCalibrationStatus != false) {
        IsCalibrationStatus = other.IsCalibrationStatus;
      }
      if (other.IsFailureStatus != false) {
        IsFailureStatus = other.IsFailureStatus;
      }
      if (other.AllowEnterAutonomousMode != 0) {
        AllowEnterAutonomousMode = other.AllowEnterAutonomousMode;
      }
      if (other.CurrentDrivingMode != 0) {
        CurrentDrivingMode = other.CurrentDrivingMode;
      }
      if (other.SteeringAngleCmd != 0D) {
        SteeringAngleCmd = other.SteeringAngleCmd;
      }
      if (other.VehicleSpeed != 0D) {
        VehicleSpeed = other.VehicleSpeed;
      }
      if (other.EpasTorque != 0D) {
        EpasTorque = other.EpasTorque;
      }
      if (other.SteeringEnabled != false) {
        SteeringEnabled = other.SteeringEnabled;
      }
      if (other.DriverOverride != false) {
        DriverOverride = other.DriverOverride;
      }
      if (other.DriverActivity != false) {
        DriverActivity = other.DriverActivity;
      }
      if (other.WatchdogFault != false) {
        WatchdogFault = other.WatchdogFault;
      }
      if (other.Channel1Fault != false) {
        Channel1Fault = other.Channel1Fault;
      }
      if (other.Channel2Fault != false) {
        Channel2Fault = other.Channel2Fault;
      }
      if (other.CalibrationFault != false) {
        CalibrationFault = other.CalibrationFault;
      }
      if (other.ConnectorFault != false) {
        ConnectorFault = other.ConnectorFault;
      }
      if (other.Timestamp65 != 0D) {
        Timestamp65 = other.Timestamp65;
      }
      if (other.MajorVersion != 0) {
        MajorVersion = other.MajorVersion;
      }
      if (other.MinorVersion != 0) {
        MinorVersion = other.MinorVersion;
      }
      if (other.BuildNumber != 0) {
        BuildNumber = other.BuildNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsEpsFail = input.ReadBool();
            break;
          }
          case 16: {
            epsControlState_ = (global::Apollo.Canbus.Eps.Types.Type) input.ReadEnum();
            break;
          }
          case 25: {
            EpsDriverHandTorq = input.ReadDouble();
            break;
          }
          case 32: {
            IsSteeringAngleValid = input.ReadBool();
            break;
          }
          case 41: {
            SteeringAngle = input.ReadDouble();
            break;
          }
          case 49: {
            SteeringAngleSpd = input.ReadDouble();
            break;
          }
          case 56: {
            IsTrimmingStatus = input.ReadBool();
            break;
          }
          case 64: {
            IsCalibrationStatus = input.ReadBool();
            break;
          }
          case 72: {
            IsFailureStatus = input.ReadBool();
            break;
          }
          case 80: {
            AllowEnterAutonomousMode = input.ReadInt32();
            break;
          }
          case 88: {
            CurrentDrivingMode = input.ReadInt32();
            break;
          }
          case 97: {
            SteeringAngleCmd = input.ReadDouble();
            break;
          }
          case 105: {
            VehicleSpeed = input.ReadDouble();
            break;
          }
          case 113: {
            EpasTorque = input.ReadDouble();
            break;
          }
          case 120: {
            SteeringEnabled = input.ReadBool();
            break;
          }
          case 128: {
            DriverOverride = input.ReadBool();
            break;
          }
          case 136: {
            DriverActivity = input.ReadBool();
            break;
          }
          case 144: {
            WatchdogFault = input.ReadBool();
            break;
          }
          case 152: {
            Channel1Fault = input.ReadBool();
            break;
          }
          case 160: {
            Channel2Fault = input.ReadBool();
            break;
          }
          case 168: {
            CalibrationFault = input.ReadBool();
            break;
          }
          case 176: {
            ConnectorFault = input.ReadBool();
            break;
          }
          case 185: {
            Timestamp65 = input.ReadDouble();
            break;
          }
          case 192: {
            MajorVersion = input.ReadInt32();
            break;
          }
          case 200: {
            MinorVersion = input.ReadInt32();
            break;
          }
          case 208: {
            BuildNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Eps message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("NOT_AVAILABLE")] NotAvailable = 0,
        [pbr::OriginalName("READY")] Ready = 1,
        [pbr::OriginalName("ACTIVE")] Active = 2,
        [pbr::OriginalName("INVALID")] Invalid = 3,
      }

    }
    #endregion

  }

  public sealed partial class VehicleSpd : pb::IMessage<VehicleSpd> {
    private static readonly pb::MessageParser<VehicleSpd> _parser = new pb::MessageParser<VehicleSpd>(() => new VehicleSpd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleSpd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSpd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSpd(VehicleSpd other) : this() {
      isVehicleStandstill_ = other.isVehicleStandstill_;
      isVehicleSpdValid_ = other.isVehicleSpdValid_;
      vehicleSpd_ = other.vehicleSpd_;
      isWheelSpdRrValid_ = other.isWheelSpdRrValid_;
      wheelDirectionRr_ = other.wheelDirectionRr_;
      wheelSpdRr_ = other.wheelSpdRr_;
      isWheelSpdRlValid_ = other.isWheelSpdRlValid_;
      wheelDirectionRl_ = other.wheelDirectionRl_;
      wheelSpdRl_ = other.wheelSpdRl_;
      isWheelSpdFrValid_ = other.isWheelSpdFrValid_;
      wheelDirectionFr_ = other.wheelDirectionFr_;
      wheelSpdFr_ = other.wheelSpdFr_;
      isWheelSpdFlValid_ = other.isWheelSpdFlValid_;
      wheelDirectionFl_ = other.wheelDirectionFl_;
      wheelSpdFl_ = other.wheelSpdFl_;
      isYawRateValid_ = other.isYawRateValid_;
      yawRate_ = other.yawRate_;
      yawRateOffset_ = other.yawRateOffset_;
      isAxValid_ = other.isAxValid_;
      ax_ = other.ax_;
      axOffset_ = other.axOffset_;
      isAyValid_ = other.isAyValid_;
      ay_ = other.ay_;
      ayOffset_ = other.ayOffset_;
      latAcc_ = other.latAcc_;
      longAcc_ = other.longAcc_;
      vertAcc_ = other.vertAcc_;
      rollRate_ = other.rollRate_;
      accEst_ = other.accEst_;
      timestampSec_ = other.timestampSec_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSpd Clone() {
      return new VehicleSpd(this);
    }

    /// <summary>Field number for the "is_vehicle_standstill" field.</summary>
    public const int IsVehicleStandstillFieldNumber = 1;
    private bool isVehicleStandstill_;
    /// <summary>
    /// esp 277
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVehicleStandstill {
      get { return isVehicleStandstill_; }
      set {
        isVehicleStandstill_ = value;
      }
    }

    /// <summary>Field number for the "is_vehicle_spd_valid" field.</summary>
    public const int IsVehicleSpdValidFieldNumber = 2;
    private bool isVehicleSpdValid_;
    /// <summary>
    /// esp 218
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVehicleSpdValid {
      get { return isVehicleSpdValid_; }
      set {
        isVehicleSpdValid_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_spd" field.</summary>
    public const int VehicleSpd_FieldNumber = 3;
    private double vehicleSpd_;
    /// <summary>
    /// unit:m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleSpd_ {
      get { return vehicleSpd_; }
      set {
        vehicleSpd_ = value;
      }
    }

    /// <summary>Field number for the "is_wheel_spd_rr_valid" field.</summary>
    public const int IsWheelSpdRrValidFieldNumber = 4;
    private bool isWheelSpdRrValid_;
    /// <summary>
    /// esp 208
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdRrValid {
      get { return isWheelSpdRrValid_; }
      set {
        isWheelSpdRrValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_rr" field.</summary>
    public const int WheelDirectionRrFieldNumber = 5;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionRr_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionRr {
      get { return wheelDirectionRr_; }
      set {
        wheelDirectionRr_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_rr" field.</summary>
    public const int WheelSpdRrFieldNumber = 6;
    private double wheelSpdRr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdRr {
      get { return wheelSpdRr_; }
      set {
        wheelSpdRr_ = value;
      }
    }

    /// <summary>Field number for the "is_wheel_spd_rl_valid" field.</summary>
    public const int IsWheelSpdRlValidFieldNumber = 7;
    private bool isWheelSpdRlValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdRlValid {
      get { return isWheelSpdRlValid_; }
      set {
        isWheelSpdRlValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_rl" field.</summary>
    public const int WheelDirectionRlFieldNumber = 8;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionRl_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionRl {
      get { return wheelDirectionRl_; }
      set {
        wheelDirectionRl_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_rl" field.</summary>
    public const int WheelSpdRlFieldNumber = 9;
    private double wheelSpdRl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdRl {
      get { return wheelSpdRl_; }
      set {
        wheelSpdRl_ = value;
      }
    }

    /// <summary>Field number for the "is_wheel_spd_fr_valid" field.</summary>
    public const int IsWheelSpdFrValidFieldNumber = 10;
    private bool isWheelSpdFrValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdFrValid {
      get { return isWheelSpdFrValid_; }
      set {
        isWheelSpdFrValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_fr" field.</summary>
    public const int WheelDirectionFrFieldNumber = 11;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionFr_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionFr {
      get { return wheelDirectionFr_; }
      set {
        wheelDirectionFr_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_fr" field.</summary>
    public const int WheelSpdFrFieldNumber = 12;
    private double wheelSpdFr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdFr {
      get { return wheelSpdFr_; }
      set {
        wheelSpdFr_ = value;
      }
    }

    /// <summary>Field number for the "is_wheel_spd_fl_valid" field.</summary>
    public const int IsWheelSpdFlValidFieldNumber = 13;
    private bool isWheelSpdFlValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdFlValid {
      get { return isWheelSpdFlValid_; }
      set {
        isWheelSpdFlValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_fl" field.</summary>
    public const int WheelDirectionFlFieldNumber = 14;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionFl_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionFl {
      get { return wheelDirectionFl_; }
      set {
        wheelDirectionFl_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_fl" field.</summary>
    public const int WheelSpdFlFieldNumber = 15;
    private double wheelSpdFl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdFl {
      get { return wheelSpdFl_; }
      set {
        wheelSpdFl_ = value;
      }
    }

    /// <summary>Field number for the "is_yaw_rate_valid" field.</summary>
    public const int IsYawRateValidFieldNumber = 16;
    private bool isYawRateValid_;
    /// <summary>
    /// byd esp 222
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYawRateValid {
      get { return isYawRateValid_; }
      set {
        isYawRateValid_ = value;
      }
    }

    /// <summary>Field number for the "yaw_rate" field.</summary>
    public const int YawRateFieldNumber = 17;
    private double yawRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawRate {
      get { return yawRate_; }
      set {
        yawRate_ = value;
      }
    }

    /// <summary>Field number for the "yaw_rate_offset" field.</summary>
    public const int YawRateOffsetFieldNumber = 18;
    private double yawRateOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawRateOffset {
      get { return yawRateOffset_; }
      set {
        yawRateOffset_ = value;
      }
    }

    /// <summary>Field number for the "is_ax_valid" field.</summary>
    public const int IsAxValidFieldNumber = 19;
    private bool isAxValid_;
    /// <summary>
    /// byd esp 223
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAxValid {
      get { return isAxValid_; }
      set {
        isAxValid_ = value;
      }
    }

    /// <summary>Field number for the "ax" field.</summary>
    public const int AxFieldNumber = 20;
    private double ax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ax {
      get { return ax_; }
      set {
        ax_ = value;
      }
    }

    /// <summary>Field number for the "ax_offset" field.</summary>
    public const int AxOffsetFieldNumber = 21;
    private double axOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AxOffset {
      get { return axOffset_; }
      set {
        axOffset_ = value;
      }
    }

    /// <summary>Field number for the "is_ay_valid" field.</summary>
    public const int IsAyValidFieldNumber = 22;
    private bool isAyValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAyValid {
      get { return isAyValid_; }
      set {
        isAyValid_ = value;
      }
    }

    /// <summary>Field number for the "ay" field.</summary>
    public const int AyFieldNumber = 23;
    private double ay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ay {
      get { return ay_; }
      set {
        ay_ = value;
      }
    }

    /// <summary>Field number for the "ay_offset" field.</summary>
    public const int AyOffsetFieldNumber = 24;
    private double ayOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AyOffset {
      get { return ayOffset_; }
      set {
        ayOffset_ = value;
      }
    }

    /// <summary>Field number for the "lat_acc" field.</summary>
    public const int LatAccFieldNumber = 25;
    private double latAcc_;
    /// <summary>
    /// lincoln accel 6b
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LatAcc {
      get { return latAcc_; }
      set {
        latAcc_ = value;
      }
    }

    /// <summary>Field number for the "long_acc" field.</summary>
    public const int LongAccFieldNumber = 26;
    private double longAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongAcc {
      get { return longAcc_; }
      set {
        longAcc_ = value;
      }
    }

    /// <summary>Field number for the "vert_acc" field.</summary>
    public const int VertAccFieldNumber = 27;
    private double vertAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VertAcc {
      get { return vertAcc_; }
      set {
        vertAcc_ = value;
      }
    }

    /// <summary>Field number for the "roll_rate" field.</summary>
    public const int RollRateFieldNumber = 28;
    private double rollRate_;
    /// <summary>
    /// lincoln gyro 6c
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RollRate {
      get { return rollRate_; }
      set {
        rollRate_ = value;
      }
    }

    /// <summary>Field number for the "acc_est" field.</summary>
    public const int AccEstFieldNumber = 29;
    private double accEst_;
    /// <summary>
    /// lincoln brakeinfo 74
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccEst {
      get { return accEst_; }
      set {
        accEst_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_sec" field.</summary>
    public const int TimestampSecFieldNumber = 30;
    private double timestampSec_;
    /// <summary>
    /// lincoln wheelspeed 6a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimestampSec {
      get { return timestampSec_; }
      set {
        timestampSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleSpd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleSpd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsVehicleStandstill != other.IsVehicleStandstill) return false;
      if (IsVehicleSpdValid != other.IsVehicleSpdValid) return false;
      if (VehicleSpd_ != other.VehicleSpd_) return false;
      if (IsWheelSpdRrValid != other.IsWheelSpdRrValid) return false;
      if (WheelDirectionRr != other.WheelDirectionRr) return false;
      if (WheelSpdRr != other.WheelSpdRr) return false;
      if (IsWheelSpdRlValid != other.IsWheelSpdRlValid) return false;
      if (WheelDirectionRl != other.WheelDirectionRl) return false;
      if (WheelSpdRl != other.WheelSpdRl) return false;
      if (IsWheelSpdFrValid != other.IsWheelSpdFrValid) return false;
      if (WheelDirectionFr != other.WheelDirectionFr) return false;
      if (WheelSpdFr != other.WheelSpdFr) return false;
      if (IsWheelSpdFlValid != other.IsWheelSpdFlValid) return false;
      if (WheelDirectionFl != other.WheelDirectionFl) return false;
      if (WheelSpdFl != other.WheelSpdFl) return false;
      if (IsYawRateValid != other.IsYawRateValid) return false;
      if (YawRate != other.YawRate) return false;
      if (YawRateOffset != other.YawRateOffset) return false;
      if (IsAxValid != other.IsAxValid) return false;
      if (Ax != other.Ax) return false;
      if (AxOffset != other.AxOffset) return false;
      if (IsAyValid != other.IsAyValid) return false;
      if (Ay != other.Ay) return false;
      if (AyOffset != other.AyOffset) return false;
      if (LatAcc != other.LatAcc) return false;
      if (LongAcc != other.LongAcc) return false;
      if (VertAcc != other.VertAcc) return false;
      if (RollRate != other.RollRate) return false;
      if (AccEst != other.AccEst) return false;
      if (TimestampSec != other.TimestampSec) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsVehicleStandstill != false) hash ^= IsVehicleStandstill.GetHashCode();
      if (IsVehicleSpdValid != false) hash ^= IsVehicleSpdValid.GetHashCode();
      if (VehicleSpd_ != 0D) hash ^= VehicleSpd_.GetHashCode();
      if (IsWheelSpdRrValid != false) hash ^= IsWheelSpdRrValid.GetHashCode();
      if (WheelDirectionRr != 0) hash ^= WheelDirectionRr.GetHashCode();
      if (WheelSpdRr != 0D) hash ^= WheelSpdRr.GetHashCode();
      if (IsWheelSpdRlValid != false) hash ^= IsWheelSpdRlValid.GetHashCode();
      if (WheelDirectionRl != 0) hash ^= WheelDirectionRl.GetHashCode();
      if (WheelSpdRl != 0D) hash ^= WheelSpdRl.GetHashCode();
      if (IsWheelSpdFrValid != false) hash ^= IsWheelSpdFrValid.GetHashCode();
      if (WheelDirectionFr != 0) hash ^= WheelDirectionFr.GetHashCode();
      if (WheelSpdFr != 0D) hash ^= WheelSpdFr.GetHashCode();
      if (IsWheelSpdFlValid != false) hash ^= IsWheelSpdFlValid.GetHashCode();
      if (WheelDirectionFl != 0) hash ^= WheelDirectionFl.GetHashCode();
      if (WheelSpdFl != 0D) hash ^= WheelSpdFl.GetHashCode();
      if (IsYawRateValid != false) hash ^= IsYawRateValid.GetHashCode();
      if (YawRate != 0D) hash ^= YawRate.GetHashCode();
      if (YawRateOffset != 0D) hash ^= YawRateOffset.GetHashCode();
      if (IsAxValid != false) hash ^= IsAxValid.GetHashCode();
      if (Ax != 0D) hash ^= Ax.GetHashCode();
      if (AxOffset != 0D) hash ^= AxOffset.GetHashCode();
      if (IsAyValid != false) hash ^= IsAyValid.GetHashCode();
      if (Ay != 0D) hash ^= Ay.GetHashCode();
      if (AyOffset != 0D) hash ^= AyOffset.GetHashCode();
      if (LatAcc != 0D) hash ^= LatAcc.GetHashCode();
      if (LongAcc != 0D) hash ^= LongAcc.GetHashCode();
      if (VertAcc != 0D) hash ^= VertAcc.GetHashCode();
      if (RollRate != 0D) hash ^= RollRate.GetHashCode();
      if (AccEst != 0D) hash ^= AccEst.GetHashCode();
      if (TimestampSec != 0D) hash ^= TimestampSec.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsVehicleStandstill != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsVehicleStandstill);
      }
      if (IsVehicleSpdValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsVehicleSpdValid);
      }
      if (VehicleSpd_ != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(VehicleSpd_);
      }
      if (IsWheelSpdRrValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsWheelSpdRrValid);
      }
      if (WheelDirectionRr != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) WheelDirectionRr);
      }
      if (WheelSpdRr != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(WheelSpdRr);
      }
      if (IsWheelSpdRlValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsWheelSpdRlValid);
      }
      if (WheelDirectionRl != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) WheelDirectionRl);
      }
      if (WheelSpdRl != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(WheelSpdRl);
      }
      if (IsWheelSpdFrValid != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsWheelSpdFrValid);
      }
      if (WheelDirectionFr != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) WheelDirectionFr);
      }
      if (WheelSpdFr != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(WheelSpdFr);
      }
      if (IsWheelSpdFlValid != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsWheelSpdFlValid);
      }
      if (WheelDirectionFl != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) WheelDirectionFl);
      }
      if (WheelSpdFl != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(WheelSpdFl);
      }
      if (IsYawRateValid != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsYawRateValid);
      }
      if (YawRate != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(YawRate);
      }
      if (YawRateOffset != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(YawRateOffset);
      }
      if (IsAxValid != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsAxValid);
      }
      if (Ax != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Ax);
      }
      if (AxOffset != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(AxOffset);
      }
      if (IsAyValid != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsAyValid);
      }
      if (Ay != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(Ay);
      }
      if (AyOffset != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(AyOffset);
      }
      if (LatAcc != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(LatAcc);
      }
      if (LongAcc != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(LongAcc);
      }
      if (VertAcc != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(VertAcc);
      }
      if (RollRate != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(RollRate);
      }
      if (AccEst != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(AccEst);
      }
      if (TimestampSec != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(TimestampSec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsVehicleStandstill != false) {
        size += 1 + 1;
      }
      if (IsVehicleSpdValid != false) {
        size += 1 + 1;
      }
      if (VehicleSpd_ != 0D) {
        size += 1 + 8;
      }
      if (IsWheelSpdRrValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionRr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionRr);
      }
      if (WheelSpdRr != 0D) {
        size += 1 + 8;
      }
      if (IsWheelSpdRlValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionRl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionRl);
      }
      if (WheelSpdRl != 0D) {
        size += 1 + 8;
      }
      if (IsWheelSpdFrValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionFr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionFr);
      }
      if (WheelSpdFr != 0D) {
        size += 1 + 8;
      }
      if (IsWheelSpdFlValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionFl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionFl);
      }
      if (WheelSpdFl != 0D) {
        size += 1 + 8;
      }
      if (IsYawRateValid != false) {
        size += 2 + 1;
      }
      if (YawRate != 0D) {
        size += 2 + 8;
      }
      if (YawRateOffset != 0D) {
        size += 2 + 8;
      }
      if (IsAxValid != false) {
        size += 2 + 1;
      }
      if (Ax != 0D) {
        size += 2 + 8;
      }
      if (AxOffset != 0D) {
        size += 2 + 8;
      }
      if (IsAyValid != false) {
        size += 2 + 1;
      }
      if (Ay != 0D) {
        size += 2 + 8;
      }
      if (AyOffset != 0D) {
        size += 2 + 8;
      }
      if (LatAcc != 0D) {
        size += 2 + 8;
      }
      if (LongAcc != 0D) {
        size += 2 + 8;
      }
      if (VertAcc != 0D) {
        size += 2 + 8;
      }
      if (RollRate != 0D) {
        size += 2 + 8;
      }
      if (AccEst != 0D) {
        size += 2 + 8;
      }
      if (TimestampSec != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleSpd other) {
      if (other == null) {
        return;
      }
      if (other.IsVehicleStandstill != false) {
        IsVehicleStandstill = other.IsVehicleStandstill;
      }
      if (other.IsVehicleSpdValid != false) {
        IsVehicleSpdValid = other.IsVehicleSpdValid;
      }
      if (other.VehicleSpd_ != 0D) {
        VehicleSpd_ = other.VehicleSpd_;
      }
      if (other.IsWheelSpdRrValid != false) {
        IsWheelSpdRrValid = other.IsWheelSpdRrValid;
      }
      if (other.WheelDirectionRr != 0) {
        WheelDirectionRr = other.WheelDirectionRr;
      }
      if (other.WheelSpdRr != 0D) {
        WheelSpdRr = other.WheelSpdRr;
      }
      if (other.IsWheelSpdRlValid != false) {
        IsWheelSpdRlValid = other.IsWheelSpdRlValid;
      }
      if (other.WheelDirectionRl != 0) {
        WheelDirectionRl = other.WheelDirectionRl;
      }
      if (other.WheelSpdRl != 0D) {
        WheelSpdRl = other.WheelSpdRl;
      }
      if (other.IsWheelSpdFrValid != false) {
        IsWheelSpdFrValid = other.IsWheelSpdFrValid;
      }
      if (other.WheelDirectionFr != 0) {
        WheelDirectionFr = other.WheelDirectionFr;
      }
      if (other.WheelSpdFr != 0D) {
        WheelSpdFr = other.WheelSpdFr;
      }
      if (other.IsWheelSpdFlValid != false) {
        IsWheelSpdFlValid = other.IsWheelSpdFlValid;
      }
      if (other.WheelDirectionFl != 0) {
        WheelDirectionFl = other.WheelDirectionFl;
      }
      if (other.WheelSpdFl != 0D) {
        WheelSpdFl = other.WheelSpdFl;
      }
      if (other.IsYawRateValid != false) {
        IsYawRateValid = other.IsYawRateValid;
      }
      if (other.YawRate != 0D) {
        YawRate = other.YawRate;
      }
      if (other.YawRateOffset != 0D) {
        YawRateOffset = other.YawRateOffset;
      }
      if (other.IsAxValid != false) {
        IsAxValid = other.IsAxValid;
      }
      if (other.Ax != 0D) {
        Ax = other.Ax;
      }
      if (other.AxOffset != 0D) {
        AxOffset = other.AxOffset;
      }
      if (other.IsAyValid != false) {
        IsAyValid = other.IsAyValid;
      }
      if (other.Ay != 0D) {
        Ay = other.Ay;
      }
      if (other.AyOffset != 0D) {
        AyOffset = other.AyOffset;
      }
      if (other.LatAcc != 0D) {
        LatAcc = other.LatAcc;
      }
      if (other.LongAcc != 0D) {
        LongAcc = other.LongAcc;
      }
      if (other.VertAcc != 0D) {
        VertAcc = other.VertAcc;
      }
      if (other.RollRate != 0D) {
        RollRate = other.RollRate;
      }
      if (other.AccEst != 0D) {
        AccEst = other.AccEst;
      }
      if (other.TimestampSec != 0D) {
        TimestampSec = other.TimestampSec;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsVehicleStandstill = input.ReadBool();
            break;
          }
          case 16: {
            IsVehicleSpdValid = input.ReadBool();
            break;
          }
          case 25: {
            VehicleSpd_ = input.ReadDouble();
            break;
          }
          case 32: {
            IsWheelSpdRrValid = input.ReadBool();
            break;
          }
          case 40: {
            wheelDirectionRr_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 49: {
            WheelSpdRr = input.ReadDouble();
            break;
          }
          case 56: {
            IsWheelSpdRlValid = input.ReadBool();
            break;
          }
          case 64: {
            wheelDirectionRl_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 73: {
            WheelSpdRl = input.ReadDouble();
            break;
          }
          case 80: {
            IsWheelSpdFrValid = input.ReadBool();
            break;
          }
          case 88: {
            wheelDirectionFr_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 97: {
            WheelSpdFr = input.ReadDouble();
            break;
          }
          case 104: {
            IsWheelSpdFlValid = input.ReadBool();
            break;
          }
          case 112: {
            wheelDirectionFl_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 121: {
            WheelSpdFl = input.ReadDouble();
            break;
          }
          case 128: {
            IsYawRateValid = input.ReadBool();
            break;
          }
          case 137: {
            YawRate = input.ReadDouble();
            break;
          }
          case 145: {
            YawRateOffset = input.ReadDouble();
            break;
          }
          case 152: {
            IsAxValid = input.ReadBool();
            break;
          }
          case 161: {
            Ax = input.ReadDouble();
            break;
          }
          case 169: {
            AxOffset = input.ReadDouble();
            break;
          }
          case 176: {
            IsAyValid = input.ReadBool();
            break;
          }
          case 185: {
            Ay = input.ReadDouble();
            break;
          }
          case 193: {
            AyOffset = input.ReadDouble();
            break;
          }
          case 201: {
            LatAcc = input.ReadDouble();
            break;
          }
          case 209: {
            LongAcc = input.ReadDouble();
            break;
          }
          case 217: {
            VertAcc = input.ReadDouble();
            break;
          }
          case 225: {
            RollRate = input.ReadDouble();
            break;
          }
          case 233: {
            AccEst = input.ReadDouble();
            break;
          }
          case 241: {
            TimestampSec = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Deceleration : pb::IMessage<Deceleration> {
    private static readonly pb::MessageParser<Deceleration> _parser = new pb::MessageParser<Deceleration>(() => new Deceleration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deceleration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deceleration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deceleration(Deceleration other) : this() {
      isDecelerationAvailable_ = other.isDecelerationAvailable_;
      isDecelerationActive_ = other.isDecelerationActive_;
      deceleration_ = other.deceleration_;
      isEvbFail_ = other.isEvbFail_;
      evbPressure_ = other.evbPressure_;
      brakePressure_ = other.brakePressure_;
      brakePressureSpd_ = other.brakePressureSpd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deceleration Clone() {
      return new Deceleration(this);
    }

    /// <summary>Field number for the "is_deceleration_available" field.</summary>
    public const int IsDecelerationAvailableFieldNumber = 1;
    private bool isDecelerationAvailable_;
    /// <summary>
    /// esp 277
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDecelerationAvailable {
      get { return isDecelerationAvailable_; }
      set {
        isDecelerationAvailable_ = value;
      }
    }

    /// <summary>Field number for the "is_deceleration_active" field.</summary>
    public const int IsDecelerationActiveFieldNumber = 2;
    private bool isDecelerationActive_;
    /// <summary>
    /// for changan to send deceleration value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDecelerationActive {
      get { return isDecelerationActive_; }
      set {
        isDecelerationActive_ = value;
      }
    }

    /// <summary>Field number for the "deceleration" field.</summary>
    public const int Deceleration_FieldNumber = 3;
    private double deceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Deceleration_ {
      get { return deceleration_; }
      set {
        deceleration_ = value;
      }
    }

    /// <summary>Field number for the "is_evb_fail" field.</summary>
    public const int IsEvbFailFieldNumber = 4;
    private double isEvbFail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IsEvbFail {
      get { return isEvbFail_; }
      set {
        isEvbFail_ = value;
      }
    }

    /// <summary>Field number for the "evb_pressure" field.</summary>
    public const int EvbPressureFieldNumber = 5;
    private double evbPressure_;
    /// <summary>
    /// mpa, 0~25.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EvbPressure {
      get { return evbPressure_; }
      set {
        evbPressure_ = value;
      }
    }

    /// <summary>Field number for the "brake_pressure" field.</summary>
    public const int BrakePressureFieldNumber = 6;
    private double brakePressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakePressure {
      get { return brakePressure_; }
      set {
        brakePressure_ = value;
      }
    }

    /// <summary>Field number for the "brake_pressure_spd" field.</summary>
    public const int BrakePressureSpdFieldNumber = 7;
    private double brakePressureSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakePressureSpd {
      get { return brakePressureSpd_; }
      set {
        brakePressureSpd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deceleration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deceleration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsDecelerationAvailable != other.IsDecelerationAvailable) return false;
      if (IsDecelerationActive != other.IsDecelerationActive) return false;
      if (Deceleration_ != other.Deceleration_) return false;
      if (IsEvbFail != other.IsEvbFail) return false;
      if (EvbPressure != other.EvbPressure) return false;
      if (BrakePressure != other.BrakePressure) return false;
      if (BrakePressureSpd != other.BrakePressureSpd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsDecelerationAvailable != false) hash ^= IsDecelerationAvailable.GetHashCode();
      if (IsDecelerationActive != false) hash ^= IsDecelerationActive.GetHashCode();
      if (Deceleration_ != 0D) hash ^= Deceleration_.GetHashCode();
      if (IsEvbFail != 0D) hash ^= IsEvbFail.GetHashCode();
      if (EvbPressure != 0D) hash ^= EvbPressure.GetHashCode();
      if (BrakePressure != 0D) hash ^= BrakePressure.GetHashCode();
      if (BrakePressureSpd != 0D) hash ^= BrakePressureSpd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsDecelerationAvailable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsDecelerationAvailable);
      }
      if (IsDecelerationActive != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDecelerationActive);
      }
      if (Deceleration_ != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Deceleration_);
      }
      if (IsEvbFail != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(IsEvbFail);
      }
      if (EvbPressure != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EvbPressure);
      }
      if (BrakePressure != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(BrakePressure);
      }
      if (BrakePressureSpd != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(BrakePressureSpd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsDecelerationAvailable != false) {
        size += 1 + 1;
      }
      if (IsDecelerationActive != false) {
        size += 1 + 1;
      }
      if (Deceleration_ != 0D) {
        size += 1 + 8;
      }
      if (IsEvbFail != 0D) {
        size += 1 + 8;
      }
      if (EvbPressure != 0D) {
        size += 1 + 8;
      }
      if (BrakePressure != 0D) {
        size += 1 + 8;
      }
      if (BrakePressureSpd != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deceleration other) {
      if (other == null) {
        return;
      }
      if (other.IsDecelerationAvailable != false) {
        IsDecelerationAvailable = other.IsDecelerationAvailable;
      }
      if (other.IsDecelerationActive != false) {
        IsDecelerationActive = other.IsDecelerationActive;
      }
      if (other.Deceleration_ != 0D) {
        Deceleration_ = other.Deceleration_;
      }
      if (other.IsEvbFail != 0D) {
        IsEvbFail = other.IsEvbFail;
      }
      if (other.EvbPressure != 0D) {
        EvbPressure = other.EvbPressure;
      }
      if (other.BrakePressure != 0D) {
        BrakePressure = other.BrakePressure;
      }
      if (other.BrakePressureSpd != 0D) {
        BrakePressureSpd = other.BrakePressureSpd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsDecelerationAvailable = input.ReadBool();
            break;
          }
          case 16: {
            IsDecelerationActive = input.ReadBool();
            break;
          }
          case 25: {
            Deceleration_ = input.ReadDouble();
            break;
          }
          case 33: {
            IsEvbFail = input.ReadDouble();
            break;
          }
          case 41: {
            EvbPressure = input.ReadDouble();
            break;
          }
          case 49: {
            BrakePressure = input.ReadDouble();
            break;
          }
          case 57: {
            BrakePressureSpd = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake : pb::IMessage<Brake> {
    private static readonly pb::MessageParser<Brake> _parser = new pb::MessageParser<Brake>(() => new Brake());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake(Brake other) : this() {
      isBrakePedalPressed_ = other.isBrakePedalPressed_;
      isBrakeForceExist_ = other.isBrakeForceExist_;
      isBrakeOverHeat_ = other.isBrakeOverHeat_;
      isHandBrakeOn_ = other.isHandBrakeOn_;
      brakePedalPosition_ = other.brakePedalPosition_;
      isBrakeValid_ = other.isBrakeValid_;
      brakeInput_ = other.brakeInput_;
      brakeCmd_ = other.brakeCmd_;
      brakeOutput_ = other.brakeOutput_;
      booInput_ = other.booInput_;
      booCmd_ = other.booCmd_;
      booOutput_ = other.booOutput_;
      watchdogApplyingBrakes_ = other.watchdogApplyingBrakes_;
      watchdogSource_ = other.watchdogSource_;
      brakeEnabled_ = other.brakeEnabled_;
      driverOverride_ = other.driverOverride_;
      driverActivity_ = other.driverActivity_;
      watchdogFault_ = other.watchdogFault_;
      channel1Fault_ = other.channel1Fault_;
      channel2Fault_ = other.channel2Fault_;
      booFault_ = other.booFault_;
      connectorFault_ = other.connectorFault_;
      brakeTorqueReq_ = other.brakeTorqueReq_;
      hsaStatus_ = other.hsaStatus_;
      brakeTorqueAct_ = other.brakeTorqueAct_;
      hsaMode_ = other.hsaMode_;
      wheelTorqueAct_ = other.wheelTorqueAct_;
      majorVersion_ = other.majorVersion_;
      minorVersion_ = other.minorVersion_;
      buildNumber_ = other.buildNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake Clone() {
      return new Brake(this);
    }

    /// <summary>Field number for the "is_brake_pedal_pressed" field.</summary>
    public const int IsBrakePedalPressedFieldNumber = 1;
    private bool isBrakePedalPressed_;
    /// <summary>
    /// ems 255
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrakePedalPressed {
      get { return isBrakePedalPressed_; }
      set {
        isBrakePedalPressed_ = value;
      }
    }

    /// <summary>Field number for the "is_brake_force_exist" field.</summary>
    public const int IsBrakeForceExistFieldNumber = 2;
    private bool isBrakeForceExist_;
    /// <summary>
    /// esp 277
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrakeForceExist {
      get { return isBrakeForceExist_; }
      set {
        isBrakeForceExist_ = value;
      }
    }

    /// <summary>Field number for the "is_brake_over_heat" field.</summary>
    public const int IsBrakeOverHeatFieldNumber = 3;
    private bool isBrakeOverHeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrakeOverHeat {
      get { return isBrakeOverHeat_; }
      set {
        isBrakeOverHeat_ = value;
      }
    }

    /// <summary>Field number for the "is_hand_brake_on" field.</summary>
    public const int IsHandBrakeOnFieldNumber = 4;
    private bool isHandBrakeOn_;
    /// <summary>
    /// hand brake
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHandBrakeOn {
      get { return isHandBrakeOn_; }
      set {
        isHandBrakeOn_ = value;
      }
    }

    /// <summary>Field number for the "brake_pedal_position" field.</summary>
    public const int BrakePedalPositionFieldNumber = 5;
    private double brakePedalPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakePedalPosition {
      get { return brakePedalPosition_; }
      set {
        brakePedalPosition_ = value;
      }
    }

    /// <summary>Field number for the "is_brake_valid" field.</summary>
    public const int IsBrakeValidFieldNumber = 6;
    private bool isBrakeValid_;
    /// <summary>
    /// byd vtog 342
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrakeValid {
      get { return isBrakeValid_; }
      set {
        isBrakeValid_ = value;
      }
    }

    /// <summary>Field number for the "brake_input" field.</summary>
    public const int BrakeInputFieldNumber = 7;
    private double brakeInput_;
    /// <summary>
    /// lincoln brake 61
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeInput {
      get { return brakeInput_; }
      set {
        brakeInput_ = value;
      }
    }

    /// <summary>Field number for the "brake_cmd" field.</summary>
    public const int BrakeCmdFieldNumber = 8;
    private double brakeCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeCmd {
      get { return brakeCmd_; }
      set {
        brakeCmd_ = value;
      }
    }

    /// <summary>Field number for the "brake_output" field.</summary>
    public const int BrakeOutputFieldNumber = 9;
    private double brakeOutput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeOutput {
      get { return brakeOutput_; }
      set {
        brakeOutput_ = value;
      }
    }

    /// <summary>Field number for the "boo_input" field.</summary>
    public const int BooInputFieldNumber = 10;
    private bool booInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BooInput {
      get { return booInput_; }
      set {
        booInput_ = value;
      }
    }

    /// <summary>Field number for the "boo_cmd" field.</summary>
    public const int BooCmdFieldNumber = 11;
    private bool booCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BooCmd {
      get { return booCmd_; }
      set {
        booCmd_ = value;
      }
    }

    /// <summary>Field number for the "boo_output" field.</summary>
    public const int BooOutputFieldNumber = 12;
    private bool booOutput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BooOutput {
      get { return booOutput_; }
      set {
        booOutput_ = value;
      }
    }

    /// <summary>Field number for the "watchdog_applying_brakes" field.</summary>
    public const int WatchdogApplyingBrakesFieldNumber = 13;
    private bool watchdogApplyingBrakes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WatchdogApplyingBrakes {
      get { return watchdogApplyingBrakes_; }
      set {
        watchdogApplyingBrakes_ = value;
      }
    }

    /// <summary>Field number for the "watchdog_source" field.</summary>
    public const int WatchdogSourceFieldNumber = 14;
    private int watchdogSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatchdogSource {
      get { return watchdogSource_; }
      set {
        watchdogSource_ = value;
      }
    }

    /// <summary>Field number for the "brake_enabled" field.</summary>
    public const int BrakeEnabledFieldNumber = 15;
    private bool brakeEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeEnabled {
      get { return brakeEnabled_; }
      set {
        brakeEnabled_ = value;
      }
    }

    /// <summary>Field number for the "driver_override" field.</summary>
    public const int DriverOverrideFieldNumber = 16;
    private bool driverOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverOverride {
      get { return driverOverride_; }
      set {
        driverOverride_ = value;
      }
    }

    /// <summary>Field number for the "driver_activity" field.</summary>
    public const int DriverActivityFieldNumber = 17;
    private bool driverActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverActivity {
      get { return driverActivity_; }
      set {
        driverActivity_ = value;
      }
    }

    /// <summary>Field number for the "watchdog_fault" field.</summary>
    public const int WatchdogFaultFieldNumber = 18;
    private bool watchdogFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WatchdogFault {
      get { return watchdogFault_; }
      set {
        watchdogFault_ = value;
      }
    }

    /// <summary>Field number for the "channel_1_fault" field.</summary>
    public const int Channel1FaultFieldNumber = 19;
    private bool channel1Fault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Channel1Fault {
      get { return channel1Fault_; }
      set {
        channel1Fault_ = value;
      }
    }

    /// <summary>Field number for the "channel_2_fault" field.</summary>
    public const int Channel2FaultFieldNumber = 20;
    private bool channel2Fault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Channel2Fault {
      get { return channel2Fault_; }
      set {
        channel2Fault_ = value;
      }
    }

    /// <summary>Field number for the "boo_fault" field.</summary>
    public const int BooFaultFieldNumber = 21;
    private bool booFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BooFault {
      get { return booFault_; }
      set {
        booFault_ = value;
      }
    }

    /// <summary>Field number for the "connector_fault" field.</summary>
    public const int ConnectorFaultFieldNumber = 22;
    private bool connectorFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConnectorFault {
      get { return connectorFault_; }
      set {
        connectorFault_ = value;
      }
    }

    /// <summary>Field number for the "brake_torque_req" field.</summary>
    public const int BrakeTorqueReqFieldNumber = 23;
    private double brakeTorqueReq_;
    /// <summary>
    /// lincoln brakeinfo 74
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeTorqueReq {
      get { return brakeTorqueReq_; }
      set {
        brakeTorqueReq_ = value;
      }
    }

    /// <summary>Field number for the "hsa_status" field.</summary>
    public const int HsaStatusFieldNumber = 24;
    private global::Apollo.Canbus.Brake.Types.HSAStatusType hsaStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake.Types.HSAStatusType HsaStatus {
      get { return hsaStatus_; }
      set {
        hsaStatus_ = value;
      }
    }

    /// <summary>Field number for the "brake_torque_act" field.</summary>
    public const int BrakeTorqueActFieldNumber = 25;
    private double brakeTorqueAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeTorqueAct {
      get { return brakeTorqueAct_; }
      set {
        brakeTorqueAct_ = value;
      }
    }

    /// <summary>Field number for the "hsa_mode" field.</summary>
    public const int HsaModeFieldNumber = 26;
    private global::Apollo.Canbus.Brake.Types.HSAModeType hsaMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake.Types.HSAModeType HsaMode {
      get { return hsaMode_; }
      set {
        hsaMode_ = value;
      }
    }

    /// <summary>Field number for the "wheel_torque_act" field.</summary>
    public const int WheelTorqueActFieldNumber = 27;
    private double wheelTorqueAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelTorqueAct {
      get { return wheelTorqueAct_; }
      set {
        wheelTorqueAct_ = value;
      }
    }

    /// <summary>Field number for the "major_version" field.</summary>
    public const int MajorVersionFieldNumber = 28;
    private int majorVersion_;
    /// <summary>
    /// lincoln version 7f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MajorVersion {
      get { return majorVersion_; }
      set {
        majorVersion_ = value;
      }
    }

    /// <summary>Field number for the "minor_version" field.</summary>
    public const int MinorVersionFieldNumber = 29;
    private int minorVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinorVersion {
      get { return minorVersion_; }
      set {
        minorVersion_ = value;
      }
    }

    /// <summary>Field number for the "build_number" field.</summary>
    public const int BuildNumberFieldNumber = 30;
    private int buildNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildNumber {
      get { return buildNumber_; }
      set {
        buildNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBrakePedalPressed != other.IsBrakePedalPressed) return false;
      if (IsBrakeForceExist != other.IsBrakeForceExist) return false;
      if (IsBrakeOverHeat != other.IsBrakeOverHeat) return false;
      if (IsHandBrakeOn != other.IsHandBrakeOn) return false;
      if (BrakePedalPosition != other.BrakePedalPosition) return false;
      if (IsBrakeValid != other.IsBrakeValid) return false;
      if (BrakeInput != other.BrakeInput) return false;
      if (BrakeCmd != other.BrakeCmd) return false;
      if (BrakeOutput != other.BrakeOutput) return false;
      if (BooInput != other.BooInput) return false;
      if (BooCmd != other.BooCmd) return false;
      if (BooOutput != other.BooOutput) return false;
      if (WatchdogApplyingBrakes != other.WatchdogApplyingBrakes) return false;
      if (WatchdogSource != other.WatchdogSource) return false;
      if (BrakeEnabled != other.BrakeEnabled) return false;
      if (DriverOverride != other.DriverOverride) return false;
      if (DriverActivity != other.DriverActivity) return false;
      if (WatchdogFault != other.WatchdogFault) return false;
      if (Channel1Fault != other.Channel1Fault) return false;
      if (Channel2Fault != other.Channel2Fault) return false;
      if (BooFault != other.BooFault) return false;
      if (ConnectorFault != other.ConnectorFault) return false;
      if (BrakeTorqueReq != other.BrakeTorqueReq) return false;
      if (HsaStatus != other.HsaStatus) return false;
      if (BrakeTorqueAct != other.BrakeTorqueAct) return false;
      if (HsaMode != other.HsaMode) return false;
      if (WheelTorqueAct != other.WheelTorqueAct) return false;
      if (MajorVersion != other.MajorVersion) return false;
      if (MinorVersion != other.MinorVersion) return false;
      if (BuildNumber != other.BuildNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBrakePedalPressed != false) hash ^= IsBrakePedalPressed.GetHashCode();
      if (IsBrakeForceExist != false) hash ^= IsBrakeForceExist.GetHashCode();
      if (IsBrakeOverHeat != false) hash ^= IsBrakeOverHeat.GetHashCode();
      if (IsHandBrakeOn != false) hash ^= IsHandBrakeOn.GetHashCode();
      if (BrakePedalPosition != 0D) hash ^= BrakePedalPosition.GetHashCode();
      if (IsBrakeValid != false) hash ^= IsBrakeValid.GetHashCode();
      if (BrakeInput != 0D) hash ^= BrakeInput.GetHashCode();
      if (BrakeCmd != 0D) hash ^= BrakeCmd.GetHashCode();
      if (BrakeOutput != 0D) hash ^= BrakeOutput.GetHashCode();
      if (BooInput != false) hash ^= BooInput.GetHashCode();
      if (BooCmd != false) hash ^= BooCmd.GetHashCode();
      if (BooOutput != false) hash ^= BooOutput.GetHashCode();
      if (WatchdogApplyingBrakes != false) hash ^= WatchdogApplyingBrakes.GetHashCode();
      if (WatchdogSource != 0) hash ^= WatchdogSource.GetHashCode();
      if (BrakeEnabled != false) hash ^= BrakeEnabled.GetHashCode();
      if (DriverOverride != false) hash ^= DriverOverride.GetHashCode();
      if (DriverActivity != false) hash ^= DriverActivity.GetHashCode();
      if (WatchdogFault != false) hash ^= WatchdogFault.GetHashCode();
      if (Channel1Fault != false) hash ^= Channel1Fault.GetHashCode();
      if (Channel2Fault != false) hash ^= Channel2Fault.GetHashCode();
      if (BooFault != false) hash ^= BooFault.GetHashCode();
      if (ConnectorFault != false) hash ^= ConnectorFault.GetHashCode();
      if (BrakeTorqueReq != 0D) hash ^= BrakeTorqueReq.GetHashCode();
      if (HsaStatus != 0) hash ^= HsaStatus.GetHashCode();
      if (BrakeTorqueAct != 0D) hash ^= BrakeTorqueAct.GetHashCode();
      if (HsaMode != 0) hash ^= HsaMode.GetHashCode();
      if (WheelTorqueAct != 0D) hash ^= WheelTorqueAct.GetHashCode();
      if (MajorVersion != 0) hash ^= MajorVersion.GetHashCode();
      if (MinorVersion != 0) hash ^= MinorVersion.GetHashCode();
      if (BuildNumber != 0) hash ^= BuildNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBrakePedalPressed != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBrakePedalPressed);
      }
      if (IsBrakeForceExist != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBrakeForceExist);
      }
      if (IsBrakeOverHeat != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBrakeOverHeat);
      }
      if (IsHandBrakeOn != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsHandBrakeOn);
      }
      if (BrakePedalPosition != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(BrakePedalPosition);
      }
      if (IsBrakeValid != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBrakeValid);
      }
      if (BrakeInput != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(BrakeInput);
      }
      if (BrakeCmd != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(BrakeCmd);
      }
      if (BrakeOutput != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(BrakeOutput);
      }
      if (BooInput != false) {
        output.WriteRawTag(80);
        output.WriteBool(BooInput);
      }
      if (BooCmd != false) {
        output.WriteRawTag(88);
        output.WriteBool(BooCmd);
      }
      if (BooOutput != false) {
        output.WriteRawTag(96);
        output.WriteBool(BooOutput);
      }
      if (WatchdogApplyingBrakes != false) {
        output.WriteRawTag(104);
        output.WriteBool(WatchdogApplyingBrakes);
      }
      if (WatchdogSource != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(WatchdogSource);
      }
      if (BrakeEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(BrakeEnabled);
      }
      if (DriverOverride != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(DriverOverride);
      }
      if (DriverActivity != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(DriverActivity);
      }
      if (WatchdogFault != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(WatchdogFault);
      }
      if (Channel1Fault != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Channel1Fault);
      }
      if (Channel2Fault != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Channel2Fault);
      }
      if (BooFault != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(BooFault);
      }
      if (ConnectorFault != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ConnectorFault);
      }
      if (BrakeTorqueReq != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(BrakeTorqueReq);
      }
      if (HsaStatus != 0) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) HsaStatus);
      }
      if (BrakeTorqueAct != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(BrakeTorqueAct);
      }
      if (HsaMode != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) HsaMode);
      }
      if (WheelTorqueAct != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(WheelTorqueAct);
      }
      if (MajorVersion != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(MajorVersion);
      }
      if (MinorVersion != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(MinorVersion);
      }
      if (BuildNumber != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(BuildNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBrakePedalPressed != false) {
        size += 1 + 1;
      }
      if (IsBrakeForceExist != false) {
        size += 1 + 1;
      }
      if (IsBrakeOverHeat != false) {
        size += 1 + 1;
      }
      if (IsHandBrakeOn != false) {
        size += 1 + 1;
      }
      if (BrakePedalPosition != 0D) {
        size += 1 + 8;
      }
      if (IsBrakeValid != false) {
        size += 1 + 1;
      }
      if (BrakeInput != 0D) {
        size += 1 + 8;
      }
      if (BrakeCmd != 0D) {
        size += 1 + 8;
      }
      if (BrakeOutput != 0D) {
        size += 1 + 8;
      }
      if (BooInput != false) {
        size += 1 + 1;
      }
      if (BooCmd != false) {
        size += 1 + 1;
      }
      if (BooOutput != false) {
        size += 1 + 1;
      }
      if (WatchdogApplyingBrakes != false) {
        size += 1 + 1;
      }
      if (WatchdogSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WatchdogSource);
      }
      if (BrakeEnabled != false) {
        size += 1 + 1;
      }
      if (DriverOverride != false) {
        size += 2 + 1;
      }
      if (DriverActivity != false) {
        size += 2 + 1;
      }
      if (WatchdogFault != false) {
        size += 2 + 1;
      }
      if (Channel1Fault != false) {
        size += 2 + 1;
      }
      if (Channel2Fault != false) {
        size += 2 + 1;
      }
      if (BooFault != false) {
        size += 2 + 1;
      }
      if (ConnectorFault != false) {
        size += 2 + 1;
      }
      if (BrakeTorqueReq != 0D) {
        size += 2 + 8;
      }
      if (HsaStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HsaStatus);
      }
      if (BrakeTorqueAct != 0D) {
        size += 2 + 8;
      }
      if (HsaMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HsaMode);
      }
      if (WheelTorqueAct != 0D) {
        size += 2 + 8;
      }
      if (MajorVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MajorVersion);
      }
      if (MinorVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinorVersion);
      }
      if (BuildNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuildNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake other) {
      if (other == null) {
        return;
      }
      if (other.IsBrakePedalPressed != false) {
        IsBrakePedalPressed = other.IsBrakePedalPressed;
      }
      if (other.IsBrakeForceExist != false) {
        IsBrakeForceExist = other.IsBrakeForceExist;
      }
      if (other.IsBrakeOverHeat != false) {
        IsBrakeOverHeat = other.IsBrakeOverHeat;
      }
      if (other.IsHandBrakeOn != false) {
        IsHandBrakeOn = other.IsHandBrakeOn;
      }
      if (other.BrakePedalPosition != 0D) {
        BrakePedalPosition = other.BrakePedalPosition;
      }
      if (other.IsBrakeValid != false) {
        IsBrakeValid = other.IsBrakeValid;
      }
      if (other.BrakeInput != 0D) {
        BrakeInput = other.BrakeInput;
      }
      if (other.BrakeCmd != 0D) {
        BrakeCmd = other.BrakeCmd;
      }
      if (other.BrakeOutput != 0D) {
        BrakeOutput = other.BrakeOutput;
      }
      if (other.BooInput != false) {
        BooInput = other.BooInput;
      }
      if (other.BooCmd != false) {
        BooCmd = other.BooCmd;
      }
      if (other.BooOutput != false) {
        BooOutput = other.BooOutput;
      }
      if (other.WatchdogApplyingBrakes != false) {
        WatchdogApplyingBrakes = other.WatchdogApplyingBrakes;
      }
      if (other.WatchdogSource != 0) {
        WatchdogSource = other.WatchdogSource;
      }
      if (other.BrakeEnabled != false) {
        BrakeEnabled = other.BrakeEnabled;
      }
      if (other.DriverOverride != false) {
        DriverOverride = other.DriverOverride;
      }
      if (other.DriverActivity != false) {
        DriverActivity = other.DriverActivity;
      }
      if (other.WatchdogFault != false) {
        WatchdogFault = other.WatchdogFault;
      }
      if (other.Channel1Fault != false) {
        Channel1Fault = other.Channel1Fault;
      }
      if (other.Channel2Fault != false) {
        Channel2Fault = other.Channel2Fault;
      }
      if (other.BooFault != false) {
        BooFault = other.BooFault;
      }
      if (other.ConnectorFault != false) {
        ConnectorFault = other.ConnectorFault;
      }
      if (other.BrakeTorqueReq != 0D) {
        BrakeTorqueReq = other.BrakeTorqueReq;
      }
      if (other.HsaStatus != 0) {
        HsaStatus = other.HsaStatus;
      }
      if (other.BrakeTorqueAct != 0D) {
        BrakeTorqueAct = other.BrakeTorqueAct;
      }
      if (other.HsaMode != 0) {
        HsaMode = other.HsaMode;
      }
      if (other.WheelTorqueAct != 0D) {
        WheelTorqueAct = other.WheelTorqueAct;
      }
      if (other.MajorVersion != 0) {
        MajorVersion = other.MajorVersion;
      }
      if (other.MinorVersion != 0) {
        MinorVersion = other.MinorVersion;
      }
      if (other.BuildNumber != 0) {
        BuildNumber = other.BuildNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBrakePedalPressed = input.ReadBool();
            break;
          }
          case 16: {
            IsBrakeForceExist = input.ReadBool();
            break;
          }
          case 24: {
            IsBrakeOverHeat = input.ReadBool();
            break;
          }
          case 32: {
            IsHandBrakeOn = input.ReadBool();
            break;
          }
          case 41: {
            BrakePedalPosition = input.ReadDouble();
            break;
          }
          case 48: {
            IsBrakeValid = input.ReadBool();
            break;
          }
          case 57: {
            BrakeInput = input.ReadDouble();
            break;
          }
          case 65: {
            BrakeCmd = input.ReadDouble();
            break;
          }
          case 73: {
            BrakeOutput = input.ReadDouble();
            break;
          }
          case 80: {
            BooInput = input.ReadBool();
            break;
          }
          case 88: {
            BooCmd = input.ReadBool();
            break;
          }
          case 96: {
            BooOutput = input.ReadBool();
            break;
          }
          case 104: {
            WatchdogApplyingBrakes = input.ReadBool();
            break;
          }
          case 112: {
            WatchdogSource = input.ReadInt32();
            break;
          }
          case 120: {
            BrakeEnabled = input.ReadBool();
            break;
          }
          case 128: {
            DriverOverride = input.ReadBool();
            break;
          }
          case 136: {
            DriverActivity = input.ReadBool();
            break;
          }
          case 144: {
            WatchdogFault = input.ReadBool();
            break;
          }
          case 152: {
            Channel1Fault = input.ReadBool();
            break;
          }
          case 160: {
            Channel2Fault = input.ReadBool();
            break;
          }
          case 168: {
            BooFault = input.ReadBool();
            break;
          }
          case 176: {
            ConnectorFault = input.ReadBool();
            break;
          }
          case 185: {
            BrakeTorqueReq = input.ReadDouble();
            break;
          }
          case 192: {
            hsaStatus_ = (global::Apollo.Canbus.Brake.Types.HSAStatusType) input.ReadEnum();
            break;
          }
          case 201: {
            BrakeTorqueAct = input.ReadDouble();
            break;
          }
          case 208: {
            hsaMode_ = (global::Apollo.Canbus.Brake.Types.HSAModeType) input.ReadEnum();
            break;
          }
          case 217: {
            WheelTorqueAct = input.ReadDouble();
            break;
          }
          case 224: {
            MajorVersion = input.ReadInt32();
            break;
          }
          case 232: {
            MinorVersion = input.ReadInt32();
            break;
          }
          case 240: {
            BuildNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Brake message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum HSAStatusType {
        [pbr::OriginalName("HSA_INACTIVE")] HsaInactive = 0,
        [pbr::OriginalName("HSA_FINDING_GRADIENT")] HsaFindingGradient = 1,
        [pbr::OriginalName("HSA_ACTIVE_PRESSED")] HsaActivePressed = 2,
        [pbr::OriginalName("HSA_ACTIVE_RELEASED")] HsaActiveReleased = 3,
        [pbr::OriginalName("HSA_FAST_RELEASE")] HsaFastRelease = 4,
        [pbr::OriginalName("HSA_SLOW_RELEASE")] HsaSlowRelease = 5,
        [pbr::OriginalName("HSA_FAILED")] HsaFailed = 6,
        [pbr::OriginalName("HSA_UNDEFINED")] HsaUndefined = 7,
      }

      public enum HSAModeType {
        [pbr::OriginalName("HSA_OFF")] HsaOff = 0,
        [pbr::OriginalName("HSA_AUTO")] HsaAuto = 1,
        [pbr::OriginalName("HSA_MANUAL")] HsaManual = 2,
        [pbr::OriginalName("HSA_MODE_UNDEFINED")] HsaModeUndefined = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Electrical Parking Brake
  /// </summary>
  public sealed partial class Epb : pb::IMessage<Epb> {
    private static readonly pb::MessageParser<Epb> _parser = new pb::MessageParser<Epb>(() => new Epb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Epb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Epb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Epb(Epb other) : this() {
      isEpbError_ = other.isEpbError_;
      isEpbReleased_ = other.isEpbReleased_;
      epbStatus_ = other.epbStatus_;
      parkingBrakeStatus_ = other.parkingBrakeStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Epb Clone() {
      return new Epb(this);
    }

    /// <summary>Field number for the "is_epb_error" field.</summary>
    public const int IsEpbErrorFieldNumber = 1;
    private bool isEpbError_;
    /// <summary>
    /// epb 256
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEpbError {
      get { return isEpbError_; }
      set {
        isEpbError_ = value;
      }
    }

    /// <summary>Field number for the "is_epb_released" field.</summary>
    public const int IsEpbReleasedFieldNumber = 2;
    private bool isEpbReleased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEpbReleased {
      get { return isEpbReleased_; }
      set {
        isEpbReleased_ = value;
      }
    }

    /// <summary>Field number for the "epb_status" field.</summary>
    public const int EpbStatusFieldNumber = 3;
    private int epbStatus_;
    /// <summary>
    /// byd epb 218
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EpbStatus {
      get { return epbStatus_; }
      set {
        epbStatus_ = value;
      }
    }

    /// <summary>Field number for the "parking_brake_status" field.</summary>
    public const int ParkingBrakeStatusFieldNumber = 4;
    private global::Apollo.Canbus.Epb.Types.PBrakeType parkingBrakeStatus_ = 0;
    /// <summary>
    /// lincoln brakeinfo 74
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Epb.Types.PBrakeType ParkingBrakeStatus {
      get { return parkingBrakeStatus_; }
      set {
        parkingBrakeStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Epb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Epb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEpbError != other.IsEpbError) return false;
      if (IsEpbReleased != other.IsEpbReleased) return false;
      if (EpbStatus != other.EpbStatus) return false;
      if (ParkingBrakeStatus != other.ParkingBrakeStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEpbError != false) hash ^= IsEpbError.GetHashCode();
      if (IsEpbReleased != false) hash ^= IsEpbReleased.GetHashCode();
      if (EpbStatus != 0) hash ^= EpbStatus.GetHashCode();
      if (ParkingBrakeStatus != 0) hash ^= ParkingBrakeStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsEpbError != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEpbError);
      }
      if (IsEpbReleased != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEpbReleased);
      }
      if (EpbStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EpbStatus);
      }
      if (ParkingBrakeStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ParkingBrakeStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEpbError != false) {
        size += 1 + 1;
      }
      if (IsEpbReleased != false) {
        size += 1 + 1;
      }
      if (EpbStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EpbStatus);
      }
      if (ParkingBrakeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ParkingBrakeStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Epb other) {
      if (other == null) {
        return;
      }
      if (other.IsEpbError != false) {
        IsEpbError = other.IsEpbError;
      }
      if (other.IsEpbReleased != false) {
        IsEpbReleased = other.IsEpbReleased;
      }
      if (other.EpbStatus != 0) {
        EpbStatus = other.EpbStatus;
      }
      if (other.ParkingBrakeStatus != 0) {
        ParkingBrakeStatus = other.ParkingBrakeStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsEpbError = input.ReadBool();
            break;
          }
          case 16: {
            IsEpbReleased = input.ReadBool();
            break;
          }
          case 24: {
            EpbStatus = input.ReadInt32();
            break;
          }
          case 32: {
            parkingBrakeStatus_ = (global::Apollo.Canbus.Epb.Types.PBrakeType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Epb message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PBrakeType {
        [pbr::OriginalName("PBRAKE_OFF")] PbrakeOff = 0,
        [pbr::OriginalName("PBRAKE_TRANSITION")] PbrakeTransition = 1,
        [pbr::OriginalName("PBRAKE_ON")] PbrakeOn = 2,
        [pbr::OriginalName("PBRAKE_FAULT")] PbrakeFault = 3,
      }

    }
    #endregion

  }

  public sealed partial class Gas : pb::IMessage<Gas> {
    private static readonly pb::MessageParser<Gas> _parser = new pb::MessageParser<Gas>(() => new Gas());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gas(Gas other) : this() {
      isGasPedalError_ = other.isGasPedalError_;
      isGasPedalPressedMore_ = other.isGasPedalPressedMore_;
      gasPedalPosition_ = other.gasPedalPosition_;
      isGasValid_ = other.isGasValid_;
      throttleInput_ = other.throttleInput_;
      throttleCmd_ = other.throttleCmd_;
      throttleOutput_ = other.throttleOutput_;
      watchdogSource_ = other.watchdogSource_;
      throttleEnabled_ = other.throttleEnabled_;
      driverOverride_ = other.driverOverride_;
      driverActivity_ = other.driverActivity_;
      watchdogFault_ = other.watchdogFault_;
      channel1Fault_ = other.channel1Fault_;
      channel2Fault_ = other.channel2Fault_;
      connectorFault_ = other.connectorFault_;
      acceleratorPedal_ = other.acceleratorPedal_;
      acceleratorPedalRate_ = other.acceleratorPedalRate_;
      majorVersion_ = other.majorVersion_;
      minorVersion_ = other.minorVersion_;
      buildNumber_ = other.buildNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gas Clone() {
      return new Gas(this);
    }

    /// <summary>Field number for the "is_gas_pedal_error" field.</summary>
    public const int IsGasPedalErrorFieldNumber = 1;
    private bool isGasPedalError_;
    /// <summary>
    /// ems 255
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGasPedalError {
      get { return isGasPedalError_; }
      set {
        isGasPedalError_ = value;
      }
    }

    /// <summary>Field number for the "is_gas_pedal_pressed_more" field.</summary>
    public const int IsGasPedalPressedMoreFieldNumber = 2;
    private bool isGasPedalPressedMore_;
    /// <summary>
    /// ems 26a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGasPedalPressedMore {
      get { return isGasPedalPressedMore_; }
      set {
        isGasPedalPressedMore_ = value;
      }
    }

    /// <summary>Field number for the "gas_pedal_position" field.</summary>
    public const int GasPedalPositionFieldNumber = 3;
    private double gasPedalPosition_;
    /// <summary>
    /// manual gas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasPedalPosition {
      get { return gasPedalPosition_; }
      set {
        gasPedalPosition_ = value;
      }
    }

    /// <summary>Field number for the "is_gas_valid" field.</summary>
    public const int IsGasValidFieldNumber = 4;
    private bool isGasValid_;
    /// <summary>
    /// byd vtog 342
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGasValid {
      get { return isGasValid_; }
      set {
        isGasValid_ = value;
      }
    }

    /// <summary>Field number for the "throttle_input" field.</summary>
    public const int ThrottleInputFieldNumber = 5;
    private double throttleInput_;
    /// <summary>
    /// lincoln throttle 63
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThrottleInput {
      get { return throttleInput_; }
      set {
        throttleInput_ = value;
      }
    }

    /// <summary>Field number for the "throttle_cmd" field.</summary>
    public const int ThrottleCmdFieldNumber = 6;
    private double throttleCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThrottleCmd {
      get { return throttleCmd_; }
      set {
        throttleCmd_ = value;
      }
    }

    /// <summary>Field number for the "throttle_output" field.</summary>
    public const int ThrottleOutputFieldNumber = 7;
    private double throttleOutput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThrottleOutput {
      get { return throttleOutput_; }
      set {
        throttleOutput_ = value;
      }
    }

    /// <summary>Field number for the "watchdog_source" field.</summary>
    public const int WatchdogSourceFieldNumber = 8;
    private int watchdogSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatchdogSource {
      get { return watchdogSource_; }
      set {
        watchdogSource_ = value;
      }
    }

    /// <summary>Field number for the "throttle_enabled" field.</summary>
    public const int ThrottleEnabledFieldNumber = 9;
    private bool throttleEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ThrottleEnabled {
      get { return throttleEnabled_; }
      set {
        throttleEnabled_ = value;
      }
    }

    /// <summary>Field number for the "driver_override" field.</summary>
    public const int DriverOverrideFieldNumber = 10;
    private bool driverOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverOverride {
      get { return driverOverride_; }
      set {
        driverOverride_ = value;
      }
    }

    /// <summary>Field number for the "driver_activity" field.</summary>
    public const int DriverActivityFieldNumber = 11;
    private bool driverActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverActivity {
      get { return driverActivity_; }
      set {
        driverActivity_ = value;
      }
    }

    /// <summary>Field number for the "watchdog_fault" field.</summary>
    public const int WatchdogFaultFieldNumber = 12;
    private bool watchdogFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WatchdogFault {
      get { return watchdogFault_; }
      set {
        watchdogFault_ = value;
      }
    }

    /// <summary>Field number for the "channel_1_fault" field.</summary>
    public const int Channel1FaultFieldNumber = 13;
    private bool channel1Fault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Channel1Fault {
      get { return channel1Fault_; }
      set {
        channel1Fault_ = value;
      }
    }

    /// <summary>Field number for the "channel_2_fault" field.</summary>
    public const int Channel2FaultFieldNumber = 14;
    private bool channel2Fault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Channel2Fault {
      get { return channel2Fault_; }
      set {
        channel2Fault_ = value;
      }
    }

    /// <summary>Field number for the "connector_fault" field.</summary>
    public const int ConnectorFaultFieldNumber = 15;
    private bool connectorFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConnectorFault {
      get { return connectorFault_; }
      set {
        connectorFault_ = value;
      }
    }

    /// <summary>Field number for the "accelerator_pedal" field.</summary>
    public const int AcceleratorPedalFieldNumber = 16;
    private double acceleratorPedal_;
    /// <summary>
    /// lincoln throttleinfo 75
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AcceleratorPedal {
      get { return acceleratorPedal_; }
      set {
        acceleratorPedal_ = value;
      }
    }

    /// <summary>Field number for the "accelerator_pedal_rate" field.</summary>
    public const int AcceleratorPedalRateFieldNumber = 17;
    private double acceleratorPedalRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AcceleratorPedalRate {
      get { return acceleratorPedalRate_; }
      set {
        acceleratorPedalRate_ = value;
      }
    }

    /// <summary>Field number for the "major_version" field.</summary>
    public const int MajorVersionFieldNumber = 18;
    private int majorVersion_;
    /// <summary>
    /// lincoln version 7f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MajorVersion {
      get { return majorVersion_; }
      set {
        majorVersion_ = value;
      }
    }

    /// <summary>Field number for the "minor_version" field.</summary>
    public const int MinorVersionFieldNumber = 19;
    private int minorVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinorVersion {
      get { return minorVersion_; }
      set {
        minorVersion_ = value;
      }
    }

    /// <summary>Field number for the "build_number" field.</summary>
    public const int BuildNumberFieldNumber = 20;
    private int buildNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildNumber {
      get { return buildNumber_; }
      set {
        buildNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsGasPedalError != other.IsGasPedalError) return false;
      if (IsGasPedalPressedMore != other.IsGasPedalPressedMore) return false;
      if (GasPedalPosition != other.GasPedalPosition) return false;
      if (IsGasValid != other.IsGasValid) return false;
      if (ThrottleInput != other.ThrottleInput) return false;
      if (ThrottleCmd != other.ThrottleCmd) return false;
      if (ThrottleOutput != other.ThrottleOutput) return false;
      if (WatchdogSource != other.WatchdogSource) return false;
      if (ThrottleEnabled != other.ThrottleEnabled) return false;
      if (DriverOverride != other.DriverOverride) return false;
      if (DriverActivity != other.DriverActivity) return false;
      if (WatchdogFault != other.WatchdogFault) return false;
      if (Channel1Fault != other.Channel1Fault) return false;
      if (Channel2Fault != other.Channel2Fault) return false;
      if (ConnectorFault != other.ConnectorFault) return false;
      if (AcceleratorPedal != other.AcceleratorPedal) return false;
      if (AcceleratorPedalRate != other.AcceleratorPedalRate) return false;
      if (MajorVersion != other.MajorVersion) return false;
      if (MinorVersion != other.MinorVersion) return false;
      if (BuildNumber != other.BuildNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsGasPedalError != false) hash ^= IsGasPedalError.GetHashCode();
      if (IsGasPedalPressedMore != false) hash ^= IsGasPedalPressedMore.GetHashCode();
      if (GasPedalPosition != 0D) hash ^= GasPedalPosition.GetHashCode();
      if (IsGasValid != false) hash ^= IsGasValid.GetHashCode();
      if (ThrottleInput != 0D) hash ^= ThrottleInput.GetHashCode();
      if (ThrottleCmd != 0D) hash ^= ThrottleCmd.GetHashCode();
      if (ThrottleOutput != 0D) hash ^= ThrottleOutput.GetHashCode();
      if (WatchdogSource != 0) hash ^= WatchdogSource.GetHashCode();
      if (ThrottleEnabled != false) hash ^= ThrottleEnabled.GetHashCode();
      if (DriverOverride != false) hash ^= DriverOverride.GetHashCode();
      if (DriverActivity != false) hash ^= DriverActivity.GetHashCode();
      if (WatchdogFault != false) hash ^= WatchdogFault.GetHashCode();
      if (Channel1Fault != false) hash ^= Channel1Fault.GetHashCode();
      if (Channel2Fault != false) hash ^= Channel2Fault.GetHashCode();
      if (ConnectorFault != false) hash ^= ConnectorFault.GetHashCode();
      if (AcceleratorPedal != 0D) hash ^= AcceleratorPedal.GetHashCode();
      if (AcceleratorPedalRate != 0D) hash ^= AcceleratorPedalRate.GetHashCode();
      if (MajorVersion != 0) hash ^= MajorVersion.GetHashCode();
      if (MinorVersion != 0) hash ^= MinorVersion.GetHashCode();
      if (BuildNumber != 0) hash ^= BuildNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGasPedalError != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGasPedalError);
      }
      if (IsGasPedalPressedMore != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGasPedalPressedMore);
      }
      if (GasPedalPosition != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(GasPedalPosition);
      }
      if (IsGasValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsGasValid);
      }
      if (ThrottleInput != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ThrottleInput);
      }
      if (ThrottleCmd != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ThrottleCmd);
      }
      if (ThrottleOutput != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ThrottleOutput);
      }
      if (WatchdogSource != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WatchdogSource);
      }
      if (ThrottleEnabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(ThrottleEnabled);
      }
      if (DriverOverride != false) {
        output.WriteRawTag(80);
        output.WriteBool(DriverOverride);
      }
      if (DriverActivity != false) {
        output.WriteRawTag(88);
        output.WriteBool(DriverActivity);
      }
      if (WatchdogFault != false) {
        output.WriteRawTag(96);
        output.WriteBool(WatchdogFault);
      }
      if (Channel1Fault != false) {
        output.WriteRawTag(104);
        output.WriteBool(Channel1Fault);
      }
      if (Channel2Fault != false) {
        output.WriteRawTag(112);
        output.WriteBool(Channel2Fault);
      }
      if (ConnectorFault != false) {
        output.WriteRawTag(120);
        output.WriteBool(ConnectorFault);
      }
      if (AcceleratorPedal != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(AcceleratorPedal);
      }
      if (AcceleratorPedalRate != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(AcceleratorPedalRate);
      }
      if (MajorVersion != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MajorVersion);
      }
      if (MinorVersion != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MinorVersion);
      }
      if (BuildNumber != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(BuildNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsGasPedalError != false) {
        size += 1 + 1;
      }
      if (IsGasPedalPressedMore != false) {
        size += 1 + 1;
      }
      if (GasPedalPosition != 0D) {
        size += 1 + 8;
      }
      if (IsGasValid != false) {
        size += 1 + 1;
      }
      if (ThrottleInput != 0D) {
        size += 1 + 8;
      }
      if (ThrottleCmd != 0D) {
        size += 1 + 8;
      }
      if (ThrottleOutput != 0D) {
        size += 1 + 8;
      }
      if (WatchdogSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WatchdogSource);
      }
      if (ThrottleEnabled != false) {
        size += 1 + 1;
      }
      if (DriverOverride != false) {
        size += 1 + 1;
      }
      if (DriverActivity != false) {
        size += 1 + 1;
      }
      if (WatchdogFault != false) {
        size += 1 + 1;
      }
      if (Channel1Fault != false) {
        size += 1 + 1;
      }
      if (Channel2Fault != false) {
        size += 1 + 1;
      }
      if (ConnectorFault != false) {
        size += 1 + 1;
      }
      if (AcceleratorPedal != 0D) {
        size += 2 + 8;
      }
      if (AcceleratorPedalRate != 0D) {
        size += 2 + 8;
      }
      if (MajorVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MajorVersion);
      }
      if (MinorVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinorVersion);
      }
      if (BuildNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuildNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gas other) {
      if (other == null) {
        return;
      }
      if (other.IsGasPedalError != false) {
        IsGasPedalError = other.IsGasPedalError;
      }
      if (other.IsGasPedalPressedMore != false) {
        IsGasPedalPressedMore = other.IsGasPedalPressedMore;
      }
      if (other.GasPedalPosition != 0D) {
        GasPedalPosition = other.GasPedalPosition;
      }
      if (other.IsGasValid != false) {
        IsGasValid = other.IsGasValid;
      }
      if (other.ThrottleInput != 0D) {
        ThrottleInput = other.ThrottleInput;
      }
      if (other.ThrottleCmd != 0D) {
        ThrottleCmd = other.ThrottleCmd;
      }
      if (other.ThrottleOutput != 0D) {
        ThrottleOutput = other.ThrottleOutput;
      }
      if (other.WatchdogSource != 0) {
        WatchdogSource = other.WatchdogSource;
      }
      if (other.ThrottleEnabled != false) {
        ThrottleEnabled = other.ThrottleEnabled;
      }
      if (other.DriverOverride != false) {
        DriverOverride = other.DriverOverride;
      }
      if (other.DriverActivity != false) {
        DriverActivity = other.DriverActivity;
      }
      if (other.WatchdogFault != false) {
        WatchdogFault = other.WatchdogFault;
      }
      if (other.Channel1Fault != false) {
        Channel1Fault = other.Channel1Fault;
      }
      if (other.Channel2Fault != false) {
        Channel2Fault = other.Channel2Fault;
      }
      if (other.ConnectorFault != false) {
        ConnectorFault = other.ConnectorFault;
      }
      if (other.AcceleratorPedal != 0D) {
        AcceleratorPedal = other.AcceleratorPedal;
      }
      if (other.AcceleratorPedalRate != 0D) {
        AcceleratorPedalRate = other.AcceleratorPedalRate;
      }
      if (other.MajorVersion != 0) {
        MajorVersion = other.MajorVersion;
      }
      if (other.MinorVersion != 0) {
        MinorVersion = other.MinorVersion;
      }
      if (other.BuildNumber != 0) {
        BuildNumber = other.BuildNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsGasPedalError = input.ReadBool();
            break;
          }
          case 16: {
            IsGasPedalPressedMore = input.ReadBool();
            break;
          }
          case 25: {
            GasPedalPosition = input.ReadDouble();
            break;
          }
          case 32: {
            IsGasValid = input.ReadBool();
            break;
          }
          case 41: {
            ThrottleInput = input.ReadDouble();
            break;
          }
          case 49: {
            ThrottleCmd = input.ReadDouble();
            break;
          }
          case 57: {
            ThrottleOutput = input.ReadDouble();
            break;
          }
          case 64: {
            WatchdogSource = input.ReadInt32();
            break;
          }
          case 72: {
            ThrottleEnabled = input.ReadBool();
            break;
          }
          case 80: {
            DriverOverride = input.ReadBool();
            break;
          }
          case 88: {
            DriverActivity = input.ReadBool();
            break;
          }
          case 96: {
            WatchdogFault = input.ReadBool();
            break;
          }
          case 104: {
            Channel1Fault = input.ReadBool();
            break;
          }
          case 112: {
            Channel2Fault = input.ReadBool();
            break;
          }
          case 120: {
            ConnectorFault = input.ReadBool();
            break;
          }
          case 129: {
            AcceleratorPedal = input.ReadDouble();
            break;
          }
          case 137: {
            AcceleratorPedalRate = input.ReadDouble();
            break;
          }
          case 144: {
            MajorVersion = input.ReadInt32();
            break;
          }
          case 152: {
            MinorVersion = input.ReadInt32();
            break;
          }
          case 160: {
            BuildNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Electronic Stability Program
  /// </summary>
  public sealed partial class Esp : pb::IMessage<Esp> {
    private static readonly pb::MessageParser<Esp> _parser = new pb::MessageParser<Esp>(() => new Esp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esp(Esp other) : this() {
      isEspAccError_ = other.isEspAccError_;
      isEspOn_ = other.isEspOn_;
      isEspActive_ = other.isEspActive_;
      isAbsError_ = other.isAbsError_;
      isAbsActive_ = other.isAbsActive_;
      isTcsvdcFail_ = other.isTcsvdcFail_;
      isAbsEnabled_ = other.isAbsEnabled_;
      isStabActive_ = other.isStabActive_;
      isStabEnabled_ = other.isStabEnabled_;
      isTracActive_ = other.isTracActive_;
      isTracEnabled_ = other.isTracEnabled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esp Clone() {
      return new Esp(this);
    }

    /// <summary>Field number for the "is_esp_acc_error" field.</summary>
    public const int IsEspAccErrorFieldNumber = 1;
    private bool isEspAccError_;
    /// <summary>
    /// esp 277
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEspAccError {
      get { return isEspAccError_; }
      set {
        isEspAccError_ = value;
      }
    }

    /// <summary>Field number for the "is_esp_on" field.</summary>
    public const int IsEspOnFieldNumber = 2;
    private bool isEspOn_;
    /// <summary>
    /// esp 218
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEspOn {
      get { return isEspOn_; }
      set {
        isEspOn_ = value;
      }
    }

    /// <summary>Field number for the "is_esp_active" field.</summary>
    public const int IsEspActiveFieldNumber = 3;
    private bool isEspActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEspActive {
      get { return isEspActive_; }
      set {
        isEspActive_ = value;
      }
    }

    /// <summary>Field number for the "is_abs_error" field.</summary>
    public const int IsAbsErrorFieldNumber = 4;
    private bool isAbsError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbsError {
      get { return isAbsError_; }
      set {
        isAbsError_ = value;
      }
    }

    /// <summary>Field number for the "is_abs_active" field.</summary>
    public const int IsAbsActiveFieldNumber = 5;
    private bool isAbsActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbsActive {
      get { return isAbsActive_; }
      set {
        isAbsActive_ = value;
      }
    }

    /// <summary>Field number for the "is_tcsvdc_fail" field.</summary>
    public const int IsTcsvdcFailFieldNumber = 6;
    private bool isTcsvdcFail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcsvdcFail {
      get { return isTcsvdcFail_; }
      set {
        isTcsvdcFail_ = value;
      }
    }

    /// <summary>Field number for the "is_abs_enabled" field.</summary>
    public const int IsAbsEnabledFieldNumber = 7;
    private bool isAbsEnabled_;
    /// <summary>
    /// lincoln brakeinfo 74
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbsEnabled {
      get { return isAbsEnabled_; }
      set {
        isAbsEnabled_ = value;
      }
    }

    /// <summary>Field number for the "is_stab_active" field.</summary>
    public const int IsStabActiveFieldNumber = 8;
    private bool isStabActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStabActive {
      get { return isStabActive_; }
      set {
        isStabActive_ = value;
      }
    }

    /// <summary>Field number for the "is_stab_enabled" field.</summary>
    public const int IsStabEnabledFieldNumber = 9;
    private bool isStabEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStabEnabled {
      get { return isStabEnabled_; }
      set {
        isStabEnabled_ = value;
      }
    }

    /// <summary>Field number for the "is_trac_active" field.</summary>
    public const int IsTracActiveFieldNumber = 10;
    private bool isTracActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTracActive {
      get { return isTracActive_; }
      set {
        isTracActive_ = value;
      }
    }

    /// <summary>Field number for the "is_trac_enabled" field.</summary>
    public const int IsTracEnabledFieldNumber = 11;
    private bool isTracEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTracEnabled {
      get { return isTracEnabled_; }
      set {
        isTracEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEspAccError != other.IsEspAccError) return false;
      if (IsEspOn != other.IsEspOn) return false;
      if (IsEspActive != other.IsEspActive) return false;
      if (IsAbsError != other.IsAbsError) return false;
      if (IsAbsActive != other.IsAbsActive) return false;
      if (IsTcsvdcFail != other.IsTcsvdcFail) return false;
      if (IsAbsEnabled != other.IsAbsEnabled) return false;
      if (IsStabActive != other.IsStabActive) return false;
      if (IsStabEnabled != other.IsStabEnabled) return false;
      if (IsTracActive != other.IsTracActive) return false;
      if (IsTracEnabled != other.IsTracEnabled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEspAccError != false) hash ^= IsEspAccError.GetHashCode();
      if (IsEspOn != false) hash ^= IsEspOn.GetHashCode();
      if (IsEspActive != false) hash ^= IsEspActive.GetHashCode();
      if (IsAbsError != false) hash ^= IsAbsError.GetHashCode();
      if (IsAbsActive != false) hash ^= IsAbsActive.GetHashCode();
      if (IsTcsvdcFail != false) hash ^= IsTcsvdcFail.GetHashCode();
      if (IsAbsEnabled != false) hash ^= IsAbsEnabled.GetHashCode();
      if (IsStabActive != false) hash ^= IsStabActive.GetHashCode();
      if (IsStabEnabled != false) hash ^= IsStabEnabled.GetHashCode();
      if (IsTracActive != false) hash ^= IsTracActive.GetHashCode();
      if (IsTracEnabled != false) hash ^= IsTracEnabled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsEspAccError != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEspAccError);
      }
      if (IsEspOn != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEspOn);
      }
      if (IsEspActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsEspActive);
      }
      if (IsAbsError != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAbsError);
      }
      if (IsAbsActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAbsActive);
      }
      if (IsTcsvdcFail != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTcsvdcFail);
      }
      if (IsAbsEnabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsAbsEnabled);
      }
      if (IsStabActive != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsStabActive);
      }
      if (IsStabEnabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsStabEnabled);
      }
      if (IsTracActive != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsTracActive);
      }
      if (IsTracEnabled != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsTracEnabled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEspAccError != false) {
        size += 1 + 1;
      }
      if (IsEspOn != false) {
        size += 1 + 1;
      }
      if (IsEspActive != false) {
        size += 1 + 1;
      }
      if (IsAbsError != false) {
        size += 1 + 1;
      }
      if (IsAbsActive != false) {
        size += 1 + 1;
      }
      if (IsTcsvdcFail != false) {
        size += 1 + 1;
      }
      if (IsAbsEnabled != false) {
        size += 1 + 1;
      }
      if (IsStabActive != false) {
        size += 1 + 1;
      }
      if (IsStabEnabled != false) {
        size += 1 + 1;
      }
      if (IsTracActive != false) {
        size += 1 + 1;
      }
      if (IsTracEnabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esp other) {
      if (other == null) {
        return;
      }
      if (other.IsEspAccError != false) {
        IsEspAccError = other.IsEspAccError;
      }
      if (other.IsEspOn != false) {
        IsEspOn = other.IsEspOn;
      }
      if (other.IsEspActive != false) {
        IsEspActive = other.IsEspActive;
      }
      if (other.IsAbsError != false) {
        IsAbsError = other.IsAbsError;
      }
      if (other.IsAbsActive != false) {
        IsAbsActive = other.IsAbsActive;
      }
      if (other.IsTcsvdcFail != false) {
        IsTcsvdcFail = other.IsTcsvdcFail;
      }
      if (other.IsAbsEnabled != false) {
        IsAbsEnabled = other.IsAbsEnabled;
      }
      if (other.IsStabActive != false) {
        IsStabActive = other.IsStabActive;
      }
      if (other.IsStabEnabled != false) {
        IsStabEnabled = other.IsStabEnabled;
      }
      if (other.IsTracActive != false) {
        IsTracActive = other.IsTracActive;
      }
      if (other.IsTracEnabled != false) {
        IsTracEnabled = other.IsTracEnabled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsEspAccError = input.ReadBool();
            break;
          }
          case 16: {
            IsEspOn = input.ReadBool();
            break;
          }
          case 24: {
            IsEspActive = input.ReadBool();
            break;
          }
          case 32: {
            IsAbsError = input.ReadBool();
            break;
          }
          case 40: {
            IsAbsActive = input.ReadBool();
            break;
          }
          case 48: {
            IsTcsvdcFail = input.ReadBool();
            break;
          }
          case 56: {
            IsAbsEnabled = input.ReadBool();
            break;
          }
          case 64: {
            IsStabActive = input.ReadBool();
            break;
          }
          case 72: {
            IsStabEnabled = input.ReadBool();
            break;
          }
          case 80: {
            IsTracActive = input.ReadBool();
            break;
          }
          case 88: {
            IsTracEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Engine Manager System
  /// </summary>
  public sealed partial class Ems : pb::IMessage<Ems> {
    private static readonly pb::MessageParser<Ems> _parser = new pb::MessageParser<Ems>(() => new Ems());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ems(Ems other) : this() {
      isEngineAccAvailable_ = other.isEngineAccAvailable_;
      isEngineAccError_ = other.isEngineAccError_;
      engineState_ = other.engineState_;
      maxEngineTorqPercent_ = other.maxEngineTorqPercent_;
      minEngineTorqPercent_ = other.minEngineTorqPercent_;
      baseEngineTorqConstant_ = other.baseEngineTorqConstant_;
      isEngineSpeedError_ = other.isEngineSpeedError_;
      engineSpeed_ = other.engineSpeed_;
      engineTorque_ = other.engineTorque_;
      isOverEngineTorque_ = other.isOverEngineTorque_;
      engineRpm_ = other.engineRpm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ems Clone() {
      return new Ems(this);
    }

    /// <summary>Field number for the "is_engine_acc_available" field.</summary>
    public const int IsEngineAccAvailableFieldNumber = 1;
    private bool isEngineAccAvailable_;
    /// <summary>
    /// ems 26a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEngineAccAvailable {
      get { return isEngineAccAvailable_; }
      set {
        isEngineAccAvailable_ = value;
      }
    }

    /// <summary>Field number for the "is_engine_acc_error" field.</summary>
    public const int IsEngineAccErrorFieldNumber = 2;
    private bool isEngineAccError_;
    /// <summary>
    /// for changan to control car
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEngineAccError {
      get { return isEngineAccError_; }
      set {
        isEngineAccError_ = value;
      }
    }

    /// <summary>Field number for the "engine_state" field.</summary>
    public const int EngineStateFieldNumber = 3;
    private global::Apollo.Canbus.Ems.Types.Type engineState_ = 0;
    /// <summary>
    /// ems 265
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Ems.Types.Type EngineState {
      get { return engineState_; }
      set {
        engineState_ = value;
      }
    }

    /// <summary>Field number for the "max_engine_torq_percent" field.</summary>
    public const int MaxEngineTorqPercentFieldNumber = 4;
    private double maxEngineTorqPercent_;
    /// <summary>
    /// for engine torq control, unit:%
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxEngineTorqPercent {
      get { return maxEngineTorqPercent_; }
      set {
        maxEngineTorqPercent_ = value;
      }
    }

    /// <summary>Field number for the "min_engine_torq_percent" field.</summary>
    public const int MinEngineTorqPercentFieldNumber = 5;
    private double minEngineTorqPercent_;
    /// <summary>
    /// for engine torq control, unit:%
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinEngineTorqPercent {
      get { return minEngineTorqPercent_; }
      set {
        minEngineTorqPercent_ = value;
      }
    }

    /// <summary>Field number for the "base_engine_torq_constant" field.</summary>
    public const int BaseEngineTorqConstantFieldNumber = 6;
    private int baseEngineTorqConstant_;
    /// <summary>
    /// for engine torq control, unit:Nm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseEngineTorqConstant {
      get { return baseEngineTorqConstant_; }
      set {
        baseEngineTorqConstant_ = value;
      }
    }

    /// <summary>Field number for the "is_engine_speed_error" field.</summary>
    public const int IsEngineSpeedErrorFieldNumber = 7;
    private bool isEngineSpeedError_;
    /// <summary>
    /// ems 255
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEngineSpeedError {
      get { return isEngineSpeedError_; }
      set {
        isEngineSpeedError_ = value;
      }
    }

    /// <summary>Field number for the "engine_speed" field.</summary>
    public const int EngineSpeedFieldNumber = 8;
    private double engineSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EngineSpeed {
      get { return engineSpeed_; }
      set {
        engineSpeed_ = value;
      }
    }

    /// <summary>Field number for the "engine_torque" field.</summary>
    public const int EngineTorqueFieldNumber = 9;
    private int engineTorque_;
    /// <summary>
    /// byd vtog 241
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EngineTorque {
      get { return engineTorque_; }
      set {
        engineTorque_ = value;
      }
    }

    /// <summary>Field number for the "is_over_engine_torque" field.</summary>
    public const int IsOverEngineTorqueFieldNumber = 10;
    private bool isOverEngineTorque_;
    /// <summary>
    /// byd vtog 242
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOverEngineTorque {
      get { return isOverEngineTorque_; }
      set {
        isOverEngineTorque_ = value;
      }
    }

    /// <summary>Field number for the "engine_rpm" field.</summary>
    public const int EngineRpmFieldNumber = 11;
    private double engineRpm_;
    /// <summary>
    /// lincoln mkz throttleinfo 75
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EngineRpm {
      get { return engineRpm_; }
      set {
        engineRpm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEngineAccAvailable != other.IsEngineAccAvailable) return false;
      if (IsEngineAccError != other.IsEngineAccError) return false;
      if (EngineState != other.EngineState) return false;
      if (MaxEngineTorqPercent != other.MaxEngineTorqPercent) return false;
      if (MinEngineTorqPercent != other.MinEngineTorqPercent) return false;
      if (BaseEngineTorqConstant != other.BaseEngineTorqConstant) return false;
      if (IsEngineSpeedError != other.IsEngineSpeedError) return false;
      if (EngineSpeed != other.EngineSpeed) return false;
      if (EngineTorque != other.EngineTorque) return false;
      if (IsOverEngineTorque != other.IsOverEngineTorque) return false;
      if (EngineRpm != other.EngineRpm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEngineAccAvailable != false) hash ^= IsEngineAccAvailable.GetHashCode();
      if (IsEngineAccError != false) hash ^= IsEngineAccError.GetHashCode();
      if (EngineState != 0) hash ^= EngineState.GetHashCode();
      if (MaxEngineTorqPercent != 0D) hash ^= MaxEngineTorqPercent.GetHashCode();
      if (MinEngineTorqPercent != 0D) hash ^= MinEngineTorqPercent.GetHashCode();
      if (BaseEngineTorqConstant != 0) hash ^= BaseEngineTorqConstant.GetHashCode();
      if (IsEngineSpeedError != false) hash ^= IsEngineSpeedError.GetHashCode();
      if (EngineSpeed != 0D) hash ^= EngineSpeed.GetHashCode();
      if (EngineTorque != 0) hash ^= EngineTorque.GetHashCode();
      if (IsOverEngineTorque != false) hash ^= IsOverEngineTorque.GetHashCode();
      if (EngineRpm != 0D) hash ^= EngineRpm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsEngineAccAvailable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEngineAccAvailable);
      }
      if (IsEngineAccError != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEngineAccError);
      }
      if (EngineState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EngineState);
      }
      if (MaxEngineTorqPercent != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxEngineTorqPercent);
      }
      if (MinEngineTorqPercent != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MinEngineTorqPercent);
      }
      if (BaseEngineTorqConstant != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BaseEngineTorqConstant);
      }
      if (IsEngineSpeedError != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsEngineSpeedError);
      }
      if (EngineSpeed != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(EngineSpeed);
      }
      if (EngineTorque != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EngineTorque);
      }
      if (IsOverEngineTorque != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsOverEngineTorque);
      }
      if (EngineRpm != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(EngineRpm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEngineAccAvailable != false) {
        size += 1 + 1;
      }
      if (IsEngineAccError != false) {
        size += 1 + 1;
      }
      if (EngineState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EngineState);
      }
      if (MaxEngineTorqPercent != 0D) {
        size += 1 + 8;
      }
      if (MinEngineTorqPercent != 0D) {
        size += 1 + 8;
      }
      if (BaseEngineTorqConstant != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseEngineTorqConstant);
      }
      if (IsEngineSpeedError != false) {
        size += 1 + 1;
      }
      if (EngineSpeed != 0D) {
        size += 1 + 8;
      }
      if (EngineTorque != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EngineTorque);
      }
      if (IsOverEngineTorque != false) {
        size += 1 + 1;
      }
      if (EngineRpm != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ems other) {
      if (other == null) {
        return;
      }
      if (other.IsEngineAccAvailable != false) {
        IsEngineAccAvailable = other.IsEngineAccAvailable;
      }
      if (other.IsEngineAccError != false) {
        IsEngineAccError = other.IsEngineAccError;
      }
      if (other.EngineState != 0) {
        EngineState = other.EngineState;
      }
      if (other.MaxEngineTorqPercent != 0D) {
        MaxEngineTorqPercent = other.MaxEngineTorqPercent;
      }
      if (other.MinEngineTorqPercent != 0D) {
        MinEngineTorqPercent = other.MinEngineTorqPercent;
      }
      if (other.BaseEngineTorqConstant != 0) {
        BaseEngineTorqConstant = other.BaseEngineTorqConstant;
      }
      if (other.IsEngineSpeedError != false) {
        IsEngineSpeedError = other.IsEngineSpeedError;
      }
      if (other.EngineSpeed != 0D) {
        EngineSpeed = other.EngineSpeed;
      }
      if (other.EngineTorque != 0) {
        EngineTorque = other.EngineTorque;
      }
      if (other.IsOverEngineTorque != false) {
        IsOverEngineTorque = other.IsOverEngineTorque;
      }
      if (other.EngineRpm != 0D) {
        EngineRpm = other.EngineRpm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsEngineAccAvailable = input.ReadBool();
            break;
          }
          case 16: {
            IsEngineAccError = input.ReadBool();
            break;
          }
          case 24: {
            engineState_ = (global::Apollo.Canbus.Ems.Types.Type) input.ReadEnum();
            break;
          }
          case 33: {
            MaxEngineTorqPercent = input.ReadDouble();
            break;
          }
          case 41: {
            MinEngineTorqPercent = input.ReadDouble();
            break;
          }
          case 48: {
            BaseEngineTorqConstant = input.ReadInt32();
            break;
          }
          case 56: {
            IsEngineSpeedError = input.ReadBool();
            break;
          }
          case 65: {
            EngineSpeed = input.ReadDouble();
            break;
          }
          case 72: {
            EngineTorque = input.ReadInt32();
            break;
          }
          case 80: {
            IsOverEngineTorque = input.ReadBool();
            break;
          }
          case 89: {
            EngineRpm = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Ems message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("STOP")] Stop = 0,
        [pbr::OriginalName("CRANK")] Crank = 1,
        [pbr::OriginalName("RUNNING")] Running = 2,
        [pbr::OriginalName("INVALID")] Invalid = 3,
      }

    }
    #endregion

  }

  public sealed partial class Gear : pb::IMessage<Gear> {
    private static readonly pb::MessageParser<Gear> _parser = new pb::MessageParser<Gear>(() => new Gear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gear(Gear other) : this() {
      isShiftPositionValid_ = other.isShiftPositionValid_;
      gearState_ = other.gearState_;
      driverOverride_ = other.driverOverride_;
      gearCmd_ = other.gearCmd_;
      canbusFault_ = other.canbusFault_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gear Clone() {
      return new Gear(this);
    }

    /// <summary>Field number for the "is_shift_position_valid" field.</summary>
    public const int IsShiftPositionValidFieldNumber = 1;
    private bool isShiftPositionValid_;
    /// <summary>
    /// tcu 268
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShiftPositionValid {
      get { return isShiftPositionValid_; }
      set {
        isShiftPositionValid_ = value;
      }
    }

    /// <summary>Field number for the "gear_state" field.</summary>
    public const int GearStateFieldNumber = 2;
    private global::Apollo.Canbus.Chassis.Types.GearPosition gearState_ = 0;
    /// <summary>
    /// chanan: tcu 268
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.GearPosition GearState {
      get { return gearState_; }
      set {
        gearState_ = value;
      }
    }

    /// <summary>Field number for the "driver_override" field.</summary>
    public const int DriverOverrideFieldNumber = 3;
    private bool driverOverride_;
    /// <summary>
    /// lincoln gear 67
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverOverride {
      get { return driverOverride_; }
      set {
        driverOverride_ = value;
      }
    }

    /// <summary>Field number for the "gear_cmd" field.</summary>
    public const int GearCmdFieldNumber = 4;
    private global::Apollo.Canbus.Chassis.Types.GearPosition gearCmd_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.GearPosition GearCmd {
      get { return gearCmd_; }
      set {
        gearCmd_ = value;
      }
    }

    /// <summary>Field number for the "canbus_fault" field.</summary>
    public const int CanbusFaultFieldNumber = 5;
    private bool canbusFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanbusFault {
      get { return canbusFault_; }
      set {
        canbusFault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsShiftPositionValid != other.IsShiftPositionValid) return false;
      if (GearState != other.GearState) return false;
      if (DriverOverride != other.DriverOverride) return false;
      if (GearCmd != other.GearCmd) return false;
      if (CanbusFault != other.CanbusFault) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsShiftPositionValid != false) hash ^= IsShiftPositionValid.GetHashCode();
      if (GearState != 0) hash ^= GearState.GetHashCode();
      if (DriverOverride != false) hash ^= DriverOverride.GetHashCode();
      if (GearCmd != 0) hash ^= GearCmd.GetHashCode();
      if (CanbusFault != false) hash ^= CanbusFault.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsShiftPositionValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsShiftPositionValid);
      }
      if (GearState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GearState);
      }
      if (DriverOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(DriverOverride);
      }
      if (GearCmd != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GearCmd);
      }
      if (CanbusFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(CanbusFault);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsShiftPositionValid != false) {
        size += 1 + 1;
      }
      if (GearState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GearState);
      }
      if (DriverOverride != false) {
        size += 1 + 1;
      }
      if (GearCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GearCmd);
      }
      if (CanbusFault != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gear other) {
      if (other == null) {
        return;
      }
      if (other.IsShiftPositionValid != false) {
        IsShiftPositionValid = other.IsShiftPositionValid;
      }
      if (other.GearState != 0) {
        GearState = other.GearState;
      }
      if (other.DriverOverride != false) {
        DriverOverride = other.DriverOverride;
      }
      if (other.GearCmd != 0) {
        GearCmd = other.GearCmd;
      }
      if (other.CanbusFault != false) {
        CanbusFault = other.CanbusFault;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsShiftPositionValid = input.ReadBool();
            break;
          }
          case 16: {
            gearState_ = (global::Apollo.Canbus.Chassis.Types.GearPosition) input.ReadEnum();
            break;
          }
          case 24: {
            DriverOverride = input.ReadBool();
            break;
          }
          case 32: {
            gearCmd_ = (global::Apollo.Canbus.Chassis.Types.GearPosition) input.ReadEnum();
            break;
          }
          case 40: {
            CanbusFault = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Safety : pb::IMessage<Safety> {
    private static readonly pb::MessageParser<Safety> _parser = new pb::MessageParser<Safety>(() => new Safety());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Safety> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Safety() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Safety(Safety other) : this() {
      isDriverCarDoorClose_ = other.isDriverCarDoorClose_;
      isDriverBuckled_ = other.isDriverBuckled_;
      emergencyButton_ = other.emergencyButton_;
      hasError_ = other.hasError_;
      isMotorInvertorFault_ = other.isMotorInvertorFault_;
      isSystemFault_ = other.isSystemFault_;
      isPowerBatteryFault_ = other.isPowerBatteryFault_;
      isMotorInvertorOverTemperature_ = other.isMotorInvertorOverTemperature_;
      isSmallBatteryChargeDischargeFault_ = other.isSmallBatteryChargeDischargeFault_;
      drivingMode_ = other.drivingMode_;
      isPassengerDoorOpen_ = other.isPassengerDoorOpen_;
      isRearleftDoorOpen_ = other.isRearleftDoorOpen_;
      isRearrightDoorOpen_ = other.isRearrightDoorOpen_;
      isHoodOpen_ = other.isHoodOpen_;
      isTrunkOpen_ = other.isTrunkOpen_;
      isPassengerDetected_ = other.isPassengerDetected_;
      isPassengerAirbagEnabled_ = other.isPassengerAirbagEnabled_;
      isPassengerBuckled_ = other.isPassengerBuckled_;
      frontLeftTirePress_ = other.frontLeftTirePress_;
      frontRightTirePress_ = other.frontRightTirePress_;
      rearLeftTirePress_ = other.rearLeftTirePress_;
      rearRightTirePress_ = other.rearRightTirePress_;
      carDrivingMode_ = other.carDrivingMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Safety Clone() {
      return new Safety(this);
    }

    /// <summary>Field number for the "is_driver_car_door_close" field.</summary>
    public const int IsDriverCarDoorCloseFieldNumber = 1;
    private bool isDriverCarDoorClose_;
    /// <summary>
    /// ip 270
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDriverCarDoorClose {
      get { return isDriverCarDoorClose_; }
      set {
        isDriverCarDoorClose_ = value;
      }
    }

    /// <summary>Field number for the "is_driver_buckled" field.</summary>
    public const int IsDriverBuckledFieldNumber = 2;
    private bool isDriverBuckled_;
    /// <summary>
    /// sas 50
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDriverBuckled {
      get { return isDriverBuckled_; }
      set {
        isDriverBuckled_ = value;
      }
    }

    /// <summary>Field number for the "emergency_button" field.</summary>
    public const int EmergencyButtonFieldNumber = 3;
    private int emergencyButton_;
    /// <summary>
    /// byd sws 4a8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmergencyButton {
      get { return emergencyButton_; }
      set {
        emergencyButton_ = value;
      }
    }

    /// <summary>Field number for the "has_error" field.</summary>
    public const int HasErrorFieldNumber = 4;
    private bool hasError_;
    /// <summary>
    /// qirui:403
    /// when car chassis error, like system fault, or warning report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return hasError_; }
      set {
        hasError_ = value;
      }
    }

    /// <summary>Field number for the "is_motor_invertor_fault" field.</summary>
    public const int IsMotorInvertorFaultFieldNumber = 5;
    private bool isMotorInvertorFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMotorInvertorFault {
      get { return isMotorInvertorFault_; }
      set {
        isMotorInvertorFault_ = value;
      }
    }

    /// <summary>Field number for the "is_system_fault" field.</summary>
    public const int IsSystemFaultFieldNumber = 6;
    private bool isSystemFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSystemFault {
      get { return isSystemFault_; }
      set {
        isSystemFault_ = value;
      }
    }

    /// <summary>Field number for the "is_power_battery_fault" field.</summary>
    public const int IsPowerBatteryFaultFieldNumber = 7;
    private bool isPowerBatteryFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPowerBatteryFault {
      get { return isPowerBatteryFault_; }
      set {
        isPowerBatteryFault_ = value;
      }
    }

    /// <summary>Field number for the "is_motor_invertor_over_temperature" field.</summary>
    public const int IsMotorInvertorOverTemperatureFieldNumber = 8;
    private bool isMotorInvertorOverTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMotorInvertorOverTemperature {
      get { return isMotorInvertorOverTemperature_; }
      set {
        isMotorInvertorOverTemperature_ = value;
      }
    }

    /// <summary>Field number for the "is_small_battery_charge_discharge_fault" field.</summary>
    public const int IsSmallBatteryChargeDischargeFaultFieldNumber = 9;
    private bool isSmallBatteryChargeDischargeFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSmallBatteryChargeDischargeFault {
      get { return isSmallBatteryChargeDischargeFault_; }
      set {
        isSmallBatteryChargeDischargeFault_ = value;
      }
    }

    /// <summary>Field number for the "driving_mode" field.</summary>
    public const int DrivingModeFieldNumber = 10;
    private int drivingMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrivingMode {
      get { return drivingMode_; }
      set {
        drivingMode_ = value;
      }
    }

    /// <summary>Field number for the "is_passenger_door_open" field.</summary>
    public const int IsPassengerDoorOpenFieldNumber = 11;
    private bool isPassengerDoorOpen_;
    /// <summary>
    /// lincoln misc 69
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassengerDoorOpen {
      get { return isPassengerDoorOpen_; }
      set {
        isPassengerDoorOpen_ = value;
      }
    }

    /// <summary>Field number for the "is_rearleft_door_open" field.</summary>
    public const int IsRearleftDoorOpenFieldNumber = 12;
    private bool isRearleftDoorOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRearleftDoorOpen {
      get { return isRearleftDoorOpen_; }
      set {
        isRearleftDoorOpen_ = value;
      }
    }

    /// <summary>Field number for the "is_rearright_door_open" field.</summary>
    public const int IsRearrightDoorOpenFieldNumber = 13;
    private bool isRearrightDoorOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRearrightDoorOpen {
      get { return isRearrightDoorOpen_; }
      set {
        isRearrightDoorOpen_ = value;
      }
    }

    /// <summary>Field number for the "is_hood_open" field.</summary>
    public const int IsHoodOpenFieldNumber = 14;
    private bool isHoodOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHoodOpen {
      get { return isHoodOpen_; }
      set {
        isHoodOpen_ = value;
      }
    }

    /// <summary>Field number for the "is_trunk_open" field.</summary>
    public const int IsTrunkOpenFieldNumber = 15;
    private bool isTrunkOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrunkOpen {
      get { return isTrunkOpen_; }
      set {
        isTrunkOpen_ = value;
      }
    }

    /// <summary>Field number for the "is_passenger_detected" field.</summary>
    public const int IsPassengerDetectedFieldNumber = 16;
    private bool isPassengerDetected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassengerDetected {
      get { return isPassengerDetected_; }
      set {
        isPassengerDetected_ = value;
      }
    }

    /// <summary>Field number for the "is_passenger_airbag_enabled" field.</summary>
    public const int IsPassengerAirbagEnabledFieldNumber = 17;
    private bool isPassengerAirbagEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassengerAirbagEnabled {
      get { return isPassengerAirbagEnabled_; }
      set {
        isPassengerAirbagEnabled_ = value;
      }
    }

    /// <summary>Field number for the "is_passenger_buckled" field.</summary>
    public const int IsPassengerBuckledFieldNumber = 18;
    private bool isPassengerBuckled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassengerBuckled {
      get { return isPassengerBuckled_; }
      set {
        isPassengerBuckled_ = value;
      }
    }

    /// <summary>Field number for the "front_left_tire_press" field.</summary>
    public const int FrontLeftTirePressFieldNumber = 19;
    private int frontLeftTirePress_;
    /// <summary>
    /// lincoln tirepressure 71
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrontLeftTirePress {
      get { return frontLeftTirePress_; }
      set {
        frontLeftTirePress_ = value;
      }
    }

    /// <summary>Field number for the "front_right_tire_press" field.</summary>
    public const int FrontRightTirePressFieldNumber = 20;
    private int frontRightTirePress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrontRightTirePress {
      get { return frontRightTirePress_; }
      set {
        frontRightTirePress_ = value;
      }
    }

    /// <summary>Field number for the "rear_left_tire_press" field.</summary>
    public const int RearLeftTirePressFieldNumber = 21;
    private int rearLeftTirePress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RearLeftTirePress {
      get { return rearLeftTirePress_; }
      set {
        rearLeftTirePress_ = value;
      }
    }

    /// <summary>Field number for the "rear_right_tire_press" field.</summary>
    public const int RearRightTirePressFieldNumber = 22;
    private int rearRightTirePress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RearRightTirePress {
      get { return rearRightTirePress_; }
      set {
        rearRightTirePress_ = value;
      }
    }

    /// <summary>Field number for the "car_driving_mode" field.</summary>
    public const int CarDrivingModeFieldNumber = 23;
    private global::Apollo.Canbus.Chassis.Types.DrivingMode carDrivingMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.DrivingMode CarDrivingMode {
      get { return carDrivingMode_; }
      set {
        carDrivingMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Safety);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Safety other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsDriverCarDoorClose != other.IsDriverCarDoorClose) return false;
      if (IsDriverBuckled != other.IsDriverBuckled) return false;
      if (EmergencyButton != other.EmergencyButton) return false;
      if (HasError != other.HasError) return false;
      if (IsMotorInvertorFault != other.IsMotorInvertorFault) return false;
      if (IsSystemFault != other.IsSystemFault) return false;
      if (IsPowerBatteryFault != other.IsPowerBatteryFault) return false;
      if (IsMotorInvertorOverTemperature != other.IsMotorInvertorOverTemperature) return false;
      if (IsSmallBatteryChargeDischargeFault != other.IsSmallBatteryChargeDischargeFault) return false;
      if (DrivingMode != other.DrivingMode) return false;
      if (IsPassengerDoorOpen != other.IsPassengerDoorOpen) return false;
      if (IsRearleftDoorOpen != other.IsRearleftDoorOpen) return false;
      if (IsRearrightDoorOpen != other.IsRearrightDoorOpen) return false;
      if (IsHoodOpen != other.IsHoodOpen) return false;
      if (IsTrunkOpen != other.IsTrunkOpen) return false;
      if (IsPassengerDetected != other.IsPassengerDetected) return false;
      if (IsPassengerAirbagEnabled != other.IsPassengerAirbagEnabled) return false;
      if (IsPassengerBuckled != other.IsPassengerBuckled) return false;
      if (FrontLeftTirePress != other.FrontLeftTirePress) return false;
      if (FrontRightTirePress != other.FrontRightTirePress) return false;
      if (RearLeftTirePress != other.RearLeftTirePress) return false;
      if (RearRightTirePress != other.RearRightTirePress) return false;
      if (CarDrivingMode != other.CarDrivingMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsDriverCarDoorClose != false) hash ^= IsDriverCarDoorClose.GetHashCode();
      if (IsDriverBuckled != false) hash ^= IsDriverBuckled.GetHashCode();
      if (EmergencyButton != 0) hash ^= EmergencyButton.GetHashCode();
      if (HasError != false) hash ^= HasError.GetHashCode();
      if (IsMotorInvertorFault != false) hash ^= IsMotorInvertorFault.GetHashCode();
      if (IsSystemFault != false) hash ^= IsSystemFault.GetHashCode();
      if (IsPowerBatteryFault != false) hash ^= IsPowerBatteryFault.GetHashCode();
      if (IsMotorInvertorOverTemperature != false) hash ^= IsMotorInvertorOverTemperature.GetHashCode();
      if (IsSmallBatteryChargeDischargeFault != false) hash ^= IsSmallBatteryChargeDischargeFault.GetHashCode();
      if (DrivingMode != 0) hash ^= DrivingMode.GetHashCode();
      if (IsPassengerDoorOpen != false) hash ^= IsPassengerDoorOpen.GetHashCode();
      if (IsRearleftDoorOpen != false) hash ^= IsRearleftDoorOpen.GetHashCode();
      if (IsRearrightDoorOpen != false) hash ^= IsRearrightDoorOpen.GetHashCode();
      if (IsHoodOpen != false) hash ^= IsHoodOpen.GetHashCode();
      if (IsTrunkOpen != false) hash ^= IsTrunkOpen.GetHashCode();
      if (IsPassengerDetected != false) hash ^= IsPassengerDetected.GetHashCode();
      if (IsPassengerAirbagEnabled != false) hash ^= IsPassengerAirbagEnabled.GetHashCode();
      if (IsPassengerBuckled != false) hash ^= IsPassengerBuckled.GetHashCode();
      if (FrontLeftTirePress != 0) hash ^= FrontLeftTirePress.GetHashCode();
      if (FrontRightTirePress != 0) hash ^= FrontRightTirePress.GetHashCode();
      if (RearLeftTirePress != 0) hash ^= RearLeftTirePress.GetHashCode();
      if (RearRightTirePress != 0) hash ^= RearRightTirePress.GetHashCode();
      if (CarDrivingMode != 0) hash ^= CarDrivingMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsDriverCarDoorClose != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsDriverCarDoorClose);
      }
      if (IsDriverBuckled != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDriverBuckled);
      }
      if (EmergencyButton != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EmergencyButton);
      }
      if (HasError != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasError);
      }
      if (IsMotorInvertorFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsMotorInvertorFault);
      }
      if (IsSystemFault != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSystemFault);
      }
      if (IsPowerBatteryFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsPowerBatteryFault);
      }
      if (IsMotorInvertorOverTemperature != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsMotorInvertorOverTemperature);
      }
      if (IsSmallBatteryChargeDischargeFault != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsSmallBatteryChargeDischargeFault);
      }
      if (DrivingMode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DrivingMode);
      }
      if (IsPassengerDoorOpen != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsPassengerDoorOpen);
      }
      if (IsRearleftDoorOpen != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsRearleftDoorOpen);
      }
      if (IsRearrightDoorOpen != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsRearrightDoorOpen);
      }
      if (IsHoodOpen != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsHoodOpen);
      }
      if (IsTrunkOpen != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsTrunkOpen);
      }
      if (IsPassengerDetected != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsPassengerDetected);
      }
      if (IsPassengerAirbagEnabled != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsPassengerAirbagEnabled);
      }
      if (IsPassengerBuckled != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsPassengerBuckled);
      }
      if (FrontLeftTirePress != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(FrontLeftTirePress);
      }
      if (FrontRightTirePress != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(FrontRightTirePress);
      }
      if (RearLeftTirePress != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RearLeftTirePress);
      }
      if (RearRightTirePress != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RearRightTirePress);
      }
      if (CarDrivingMode != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) CarDrivingMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsDriverCarDoorClose != false) {
        size += 1 + 1;
      }
      if (IsDriverBuckled != false) {
        size += 1 + 1;
      }
      if (EmergencyButton != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmergencyButton);
      }
      if (HasError != false) {
        size += 1 + 1;
      }
      if (IsMotorInvertorFault != false) {
        size += 1 + 1;
      }
      if (IsSystemFault != false) {
        size += 1 + 1;
      }
      if (IsPowerBatteryFault != false) {
        size += 1 + 1;
      }
      if (IsMotorInvertorOverTemperature != false) {
        size += 1 + 1;
      }
      if (IsSmallBatteryChargeDischargeFault != false) {
        size += 1 + 1;
      }
      if (DrivingMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrivingMode);
      }
      if (IsPassengerDoorOpen != false) {
        size += 1 + 1;
      }
      if (IsRearleftDoorOpen != false) {
        size += 1 + 1;
      }
      if (IsRearrightDoorOpen != false) {
        size += 1 + 1;
      }
      if (IsHoodOpen != false) {
        size += 1 + 1;
      }
      if (IsTrunkOpen != false) {
        size += 1 + 1;
      }
      if (IsPassengerDetected != false) {
        size += 2 + 1;
      }
      if (IsPassengerAirbagEnabled != false) {
        size += 2 + 1;
      }
      if (IsPassengerBuckled != false) {
        size += 2 + 1;
      }
      if (FrontLeftTirePress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrontLeftTirePress);
      }
      if (FrontRightTirePress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrontRightTirePress);
      }
      if (RearLeftTirePress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RearLeftTirePress);
      }
      if (RearRightTirePress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RearRightTirePress);
      }
      if (CarDrivingMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CarDrivingMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Safety other) {
      if (other == null) {
        return;
      }
      if (other.IsDriverCarDoorClose != false) {
        IsDriverCarDoorClose = other.IsDriverCarDoorClose;
      }
      if (other.IsDriverBuckled != false) {
        IsDriverBuckled = other.IsDriverBuckled;
      }
      if (other.EmergencyButton != 0) {
        EmergencyButton = other.EmergencyButton;
      }
      if (other.HasError != false) {
        HasError = other.HasError;
      }
      if (other.IsMotorInvertorFault != false) {
        IsMotorInvertorFault = other.IsMotorInvertorFault;
      }
      if (other.IsSystemFault != false) {
        IsSystemFault = other.IsSystemFault;
      }
      if (other.IsPowerBatteryFault != false) {
        IsPowerBatteryFault = other.IsPowerBatteryFault;
      }
      if (other.IsMotorInvertorOverTemperature != false) {
        IsMotorInvertorOverTemperature = other.IsMotorInvertorOverTemperature;
      }
      if (other.IsSmallBatteryChargeDischargeFault != false) {
        IsSmallBatteryChargeDischargeFault = other.IsSmallBatteryChargeDischargeFault;
      }
      if (other.DrivingMode != 0) {
        DrivingMode = other.DrivingMode;
      }
      if (other.IsPassengerDoorOpen != false) {
        IsPassengerDoorOpen = other.IsPassengerDoorOpen;
      }
      if (other.IsRearleftDoorOpen != false) {
        IsRearleftDoorOpen = other.IsRearleftDoorOpen;
      }
      if (other.IsRearrightDoorOpen != false) {
        IsRearrightDoorOpen = other.IsRearrightDoorOpen;
      }
      if (other.IsHoodOpen != false) {
        IsHoodOpen = other.IsHoodOpen;
      }
      if (other.IsTrunkOpen != false) {
        IsTrunkOpen = other.IsTrunkOpen;
      }
      if (other.IsPassengerDetected != false) {
        IsPassengerDetected = other.IsPassengerDetected;
      }
      if (other.IsPassengerAirbagEnabled != false) {
        IsPassengerAirbagEnabled = other.IsPassengerAirbagEnabled;
      }
      if (other.IsPassengerBuckled != false) {
        IsPassengerBuckled = other.IsPassengerBuckled;
      }
      if (other.FrontLeftTirePress != 0) {
        FrontLeftTirePress = other.FrontLeftTirePress;
      }
      if (other.FrontRightTirePress != 0) {
        FrontRightTirePress = other.FrontRightTirePress;
      }
      if (other.RearLeftTirePress != 0) {
        RearLeftTirePress = other.RearLeftTirePress;
      }
      if (other.RearRightTirePress != 0) {
        RearRightTirePress = other.RearRightTirePress;
      }
      if (other.CarDrivingMode != 0) {
        CarDrivingMode = other.CarDrivingMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsDriverCarDoorClose = input.ReadBool();
            break;
          }
          case 16: {
            IsDriverBuckled = input.ReadBool();
            break;
          }
          case 24: {
            EmergencyButton = input.ReadInt32();
            break;
          }
          case 32: {
            HasError = input.ReadBool();
            break;
          }
          case 40: {
            IsMotorInvertorFault = input.ReadBool();
            break;
          }
          case 48: {
            IsSystemFault = input.ReadBool();
            break;
          }
          case 56: {
            IsPowerBatteryFault = input.ReadBool();
            break;
          }
          case 64: {
            IsMotorInvertorOverTemperature = input.ReadBool();
            break;
          }
          case 72: {
            IsSmallBatteryChargeDischargeFault = input.ReadBool();
            break;
          }
          case 80: {
            DrivingMode = input.ReadInt32();
            break;
          }
          case 88: {
            IsPassengerDoorOpen = input.ReadBool();
            break;
          }
          case 96: {
            IsRearleftDoorOpen = input.ReadBool();
            break;
          }
          case 104: {
            IsRearrightDoorOpen = input.ReadBool();
            break;
          }
          case 112: {
            IsHoodOpen = input.ReadBool();
            break;
          }
          case 120: {
            IsTrunkOpen = input.ReadBool();
            break;
          }
          case 128: {
            IsPassengerDetected = input.ReadBool();
            break;
          }
          case 136: {
            IsPassengerAirbagEnabled = input.ReadBool();
            break;
          }
          case 144: {
            IsPassengerBuckled = input.ReadBool();
            break;
          }
          case 152: {
            FrontLeftTirePress = input.ReadInt32();
            break;
          }
          case 160: {
            FrontRightTirePress = input.ReadInt32();
            break;
          }
          case 168: {
            RearLeftTirePress = input.ReadInt32();
            break;
          }
          case 176: {
            RearRightTirePress = input.ReadInt32();
            break;
          }
          case 184: {
            carDrivingMode_ = (global::Apollo.Canbus.Chassis.Types.DrivingMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicInfo : pb::IMessage<BasicInfo> {
    private static readonly pb::MessageParser<BasicInfo> _parser = new pb::MessageParser<BasicInfo>(() => new BasicInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicInfo(BasicInfo other) : this() {
      isAutoMode_ = other.isAutoMode_;
      powerState_ = other.powerState_;
      isAirBagDeployed_ = other.isAirBagDeployed_;
      odoMeter_ = other.odoMeter_;
      driveRange_ = other.driveRange_;
      isSystemError_ = other.isSystemError_;
      isHumanInterrupt_ = other.isHumanInterrupt_;
      accOnButton_ = other.accOnButton_;
      accOffButton_ = other.accOffButton_;
      accResButton_ = other.accResButton_;
      accCancelButton_ = other.accCancelButton_;
      accOnOffButton_ = other.accOnOffButton_;
      accResCancelButton_ = other.accResCancelButton_;
      accIncSpdButton_ = other.accIncSpdButton_;
      accDecSpdButton_ = other.accDecSpdButton_;
      accIncGapButton_ = other.accIncGapButton_;
      accDecGapButton_ = other.accDecGapButton_;
      lkaButton_ = other.lkaButton_;
      canbusFault_ = other.canbusFault_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      gpsValid_ = other.gpsValid_;
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      hours_ = other.hours_;
      minutes_ = other.minutes_;
      seconds_ = other.seconds_;
      compassDirection_ = other.compassDirection_;
      pdop_ = other.pdop_;
      isGpsFault_ = other.isGpsFault_;
      isInferred_ = other.isInferred_;
      altitude_ = other.altitude_;
      heading_ = other.heading_;
      hdop_ = other.hdop_;
      vdop_ = other.vdop_;
      quality_ = other.quality_;
      numSatellites_ = other.numSatellites_;
      gpsSpeed_ = other.gpsSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicInfo Clone() {
      return new BasicInfo(this);
    }

    /// <summary>Field number for the "is_auto_mode" field.</summary>
    public const int IsAutoModeFieldNumber = 1;
    private bool isAutoMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoMode {
      get { return isAutoMode_; }
      set {
        isAutoMode_ = value;
      }
    }

    /// <summary>Field number for the "power_state" field.</summary>
    public const int PowerStateFieldNumber = 2;
    private global::Apollo.Canbus.BasicInfo.Types.Type powerState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.BasicInfo.Types.Type PowerState {
      get { return powerState_; }
      set {
        powerState_ = value;
      }
    }

    /// <summary>Field number for the "is_air_bag_deployed" field.</summary>
    public const int IsAirBagDeployedFieldNumber = 3;
    private bool isAirBagDeployed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAirBagDeployed {
      get { return isAirBagDeployed_; }
      set {
        isAirBagDeployed_ = value;
      }
    }

    /// <summary>Field number for the "odo_meter" field.</summary>
    public const int OdoMeterFieldNumber = 4;
    private double odoMeter_;
    /// <summary>
    /// odo meter, unit:km
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OdoMeter {
      get { return odoMeter_; }
      set {
        odoMeter_ = value;
      }
    }

    /// <summary>Field number for the "drive_range" field.</summary>
    public const int DriveRangeFieldNumber = 5;
    private double driveRange_;
    /// <summary>
    /// the meter left when drive continuously, unit:km
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DriveRange {
      get { return driveRange_; }
      set {
        driveRange_ = value;
      }
    }

    /// <summary>Field number for the "is_system_error" field.</summary>
    public const int IsSystemErrorFieldNumber = 6;
    private bool isSystemError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSystemError {
      get { return isSystemError_; }
      set {
        isSystemError_ = value;
      }
    }

    /// <summary>Field number for the "is_human_interrupt" field.</summary>
    public const int IsHumanInterruptFieldNumber = 7;
    private bool isHumanInterrupt_;
    /// <summary>
    /// human interrupt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHumanInterrupt {
      get { return isHumanInterrupt_; }
      set {
        isHumanInterrupt_ = value;
      }
    }

    /// <summary>Field number for the "acc_on_button" field.</summary>
    public const int AccOnButtonFieldNumber = 8;
    private bool accOnButton_;
    /// <summary>
    /// lincoln misc 69
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccOnButton {
      get { return accOnButton_; }
      set {
        accOnButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_off_button" field.</summary>
    public const int AccOffButtonFieldNumber = 9;
    private bool accOffButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccOffButton {
      get { return accOffButton_; }
      set {
        accOffButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_res_button" field.</summary>
    public const int AccResButtonFieldNumber = 10;
    private bool accResButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccResButton {
      get { return accResButton_; }
      set {
        accResButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_cancel_button" field.</summary>
    public const int AccCancelButtonFieldNumber = 11;
    private bool accCancelButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccCancelButton {
      get { return accCancelButton_; }
      set {
        accCancelButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_on_off_button" field.</summary>
    public const int AccOnOffButtonFieldNumber = 12;
    private bool accOnOffButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccOnOffButton {
      get { return accOnOffButton_; }
      set {
        accOnOffButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_res_cancel_button" field.</summary>
    public const int AccResCancelButtonFieldNumber = 13;
    private bool accResCancelButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccResCancelButton {
      get { return accResCancelButton_; }
      set {
        accResCancelButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_inc_spd_button" field.</summary>
    public const int AccIncSpdButtonFieldNumber = 14;
    private bool accIncSpdButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccIncSpdButton {
      get { return accIncSpdButton_; }
      set {
        accIncSpdButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_dec_spd_button" field.</summary>
    public const int AccDecSpdButtonFieldNumber = 15;
    private bool accDecSpdButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccDecSpdButton {
      get { return accDecSpdButton_; }
      set {
        accDecSpdButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_inc_gap_button" field.</summary>
    public const int AccIncGapButtonFieldNumber = 16;
    private bool accIncGapButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccIncGapButton {
      get { return accIncGapButton_; }
      set {
        accIncGapButton_ = value;
      }
    }

    /// <summary>Field number for the "acc_dec_gap_button" field.</summary>
    public const int AccDecGapButtonFieldNumber = 17;
    private bool accDecGapButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AccDecGapButton {
      get { return accDecGapButton_; }
      set {
        accDecGapButton_ = value;
      }
    }

    /// <summary>Field number for the "lka_button" field.</summary>
    public const int LkaButtonFieldNumber = 18;
    private bool lkaButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LkaButton {
      get { return lkaButton_; }
      set {
        lkaButton_ = value;
      }
    }

    /// <summary>Field number for the "canbus_fault" field.</summary>
    public const int CanbusFaultFieldNumber = 19;
    private bool canbusFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanbusFault {
      get { return canbusFault_; }
      set {
        canbusFault_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 20;
    private double latitude_;
    /// <summary>
    /// lincoln gps 6d
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 21;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "gps_valid" field.</summary>
    public const int GpsValidFieldNumber = 22;
    private bool gpsValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GpsValid {
      get { return gpsValid_; }
      set {
        gpsValid_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 23;
    private int year_;
    /// <summary>
    /// lincoln gps 6e
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 24;
    private int month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 25;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "hours" field.</summary>
    public const int HoursFieldNumber = 26;
    private int hours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hours {
      get { return hours_; }
      set {
        hours_ = value;
      }
    }

    /// <summary>Field number for the "minutes" field.</summary>
    public const int MinutesFieldNumber = 27;
    private int minutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minutes {
      get { return minutes_; }
      set {
        minutes_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 28;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "compass_direction" field.</summary>
    public const int CompassDirectionFieldNumber = 29;
    private double compassDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CompassDirection {
      get { return compassDirection_; }
      set {
        compassDirection_ = value;
      }
    }

    /// <summary>Field number for the "pdop" field.</summary>
    public const int PdopFieldNumber = 30;
    private double pdop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pdop {
      get { return pdop_; }
      set {
        pdop_ = value;
      }
    }

    /// <summary>Field number for the "is_gps_fault" field.</summary>
    public const int IsGpsFaultFieldNumber = 31;
    private bool isGpsFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGpsFault {
      get { return isGpsFault_; }
      set {
        isGpsFault_ = value;
      }
    }

    /// <summary>Field number for the "is_inferred" field.</summary>
    public const int IsInferredFieldNumber = 32;
    private bool isInferred_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInferred {
      get { return isInferred_; }
      set {
        isInferred_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 33;
    private double altitude_;
    /// <summary>
    /// lincoln gps 6f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 34;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "hdop" field.</summary>
    public const int HdopFieldNumber = 35;
    private double hdop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Hdop {
      get { return hdop_; }
      set {
        hdop_ = value;
      }
    }

    /// <summary>Field number for the "vdop" field.</summary>
    public const int VdopFieldNumber = 36;
    private double vdop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Vdop {
      get { return vdop_; }
      set {
        vdop_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 37;
    private global::Apollo.Canbus.GpsQuality quality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.GpsQuality Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "num_satellites" field.</summary>
    public const int NumSatellitesFieldNumber = 38;
    private int numSatellites_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumSatellites {
      get { return numSatellites_; }
      set {
        numSatellites_ = value;
      }
    }

    /// <summary>Field number for the "gps_speed" field.</summary>
    public const int GpsSpeedFieldNumber = 39;
    private double gpsSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GpsSpeed {
      get { return gpsSpeed_; }
      set {
        gpsSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsAutoMode != other.IsAutoMode) return false;
      if (PowerState != other.PowerState) return false;
      if (IsAirBagDeployed != other.IsAirBagDeployed) return false;
      if (OdoMeter != other.OdoMeter) return false;
      if (DriveRange != other.DriveRange) return false;
      if (IsSystemError != other.IsSystemError) return false;
      if (IsHumanInterrupt != other.IsHumanInterrupt) return false;
      if (AccOnButton != other.AccOnButton) return false;
      if (AccOffButton != other.AccOffButton) return false;
      if (AccResButton != other.AccResButton) return false;
      if (AccCancelButton != other.AccCancelButton) return false;
      if (AccOnOffButton != other.AccOnOffButton) return false;
      if (AccResCancelButton != other.AccResCancelButton) return false;
      if (AccIncSpdButton != other.AccIncSpdButton) return false;
      if (AccDecSpdButton != other.AccDecSpdButton) return false;
      if (AccIncGapButton != other.AccIncGapButton) return false;
      if (AccDecGapButton != other.AccDecGapButton) return false;
      if (LkaButton != other.LkaButton) return false;
      if (CanbusFault != other.CanbusFault) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (GpsValid != other.GpsValid) return false;
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (Hours != other.Hours) return false;
      if (Minutes != other.Minutes) return false;
      if (Seconds != other.Seconds) return false;
      if (CompassDirection != other.CompassDirection) return false;
      if (Pdop != other.Pdop) return false;
      if (IsGpsFault != other.IsGpsFault) return false;
      if (IsInferred != other.IsInferred) return false;
      if (Altitude != other.Altitude) return false;
      if (Heading != other.Heading) return false;
      if (Hdop != other.Hdop) return false;
      if (Vdop != other.Vdop) return false;
      if (Quality != other.Quality) return false;
      if (NumSatellites != other.NumSatellites) return false;
      if (GpsSpeed != other.GpsSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsAutoMode != false) hash ^= IsAutoMode.GetHashCode();
      if (PowerState != 0) hash ^= PowerState.GetHashCode();
      if (IsAirBagDeployed != false) hash ^= IsAirBagDeployed.GetHashCode();
      if (OdoMeter != 0D) hash ^= OdoMeter.GetHashCode();
      if (DriveRange != 0D) hash ^= DriveRange.GetHashCode();
      if (IsSystemError != false) hash ^= IsSystemError.GetHashCode();
      if (IsHumanInterrupt != false) hash ^= IsHumanInterrupt.GetHashCode();
      if (AccOnButton != false) hash ^= AccOnButton.GetHashCode();
      if (AccOffButton != false) hash ^= AccOffButton.GetHashCode();
      if (AccResButton != false) hash ^= AccResButton.GetHashCode();
      if (AccCancelButton != false) hash ^= AccCancelButton.GetHashCode();
      if (AccOnOffButton != false) hash ^= AccOnOffButton.GetHashCode();
      if (AccResCancelButton != false) hash ^= AccResCancelButton.GetHashCode();
      if (AccIncSpdButton != false) hash ^= AccIncSpdButton.GetHashCode();
      if (AccDecSpdButton != false) hash ^= AccDecSpdButton.GetHashCode();
      if (AccIncGapButton != false) hash ^= AccIncGapButton.GetHashCode();
      if (AccDecGapButton != false) hash ^= AccDecGapButton.GetHashCode();
      if (LkaButton != false) hash ^= LkaButton.GetHashCode();
      if (CanbusFault != false) hash ^= CanbusFault.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (GpsValid != false) hash ^= GpsValid.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Hours != 0) hash ^= Hours.GetHashCode();
      if (Minutes != 0) hash ^= Minutes.GetHashCode();
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      if (CompassDirection != 0D) hash ^= CompassDirection.GetHashCode();
      if (Pdop != 0D) hash ^= Pdop.GetHashCode();
      if (IsGpsFault != false) hash ^= IsGpsFault.GetHashCode();
      if (IsInferred != false) hash ^= IsInferred.GetHashCode();
      if (Altitude != 0D) hash ^= Altitude.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Hdop != 0D) hash ^= Hdop.GetHashCode();
      if (Vdop != 0D) hash ^= Vdop.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (NumSatellites != 0) hash ^= NumSatellites.GetHashCode();
      if (GpsSpeed != 0D) hash ^= GpsSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAutoMode != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAutoMode);
      }
      if (PowerState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PowerState);
      }
      if (IsAirBagDeployed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsAirBagDeployed);
      }
      if (OdoMeter != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(OdoMeter);
      }
      if (DriveRange != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DriveRange);
      }
      if (IsSystemError != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSystemError);
      }
      if (IsHumanInterrupt != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsHumanInterrupt);
      }
      if (AccOnButton != false) {
        output.WriteRawTag(64);
        output.WriteBool(AccOnButton);
      }
      if (AccOffButton != false) {
        output.WriteRawTag(72);
        output.WriteBool(AccOffButton);
      }
      if (AccResButton != false) {
        output.WriteRawTag(80);
        output.WriteBool(AccResButton);
      }
      if (AccCancelButton != false) {
        output.WriteRawTag(88);
        output.WriteBool(AccCancelButton);
      }
      if (AccOnOffButton != false) {
        output.WriteRawTag(96);
        output.WriteBool(AccOnOffButton);
      }
      if (AccResCancelButton != false) {
        output.WriteRawTag(104);
        output.WriteBool(AccResCancelButton);
      }
      if (AccIncSpdButton != false) {
        output.WriteRawTag(112);
        output.WriteBool(AccIncSpdButton);
      }
      if (AccDecSpdButton != false) {
        output.WriteRawTag(120);
        output.WriteBool(AccDecSpdButton);
      }
      if (AccIncGapButton != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AccIncGapButton);
      }
      if (AccDecGapButton != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(AccDecGapButton);
      }
      if (LkaButton != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(LkaButton);
      }
      if (CanbusFault != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(CanbusFault);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Longitude);
      }
      if (GpsValid != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(GpsValid);
      }
      if (Year != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Day);
      }
      if (Hours != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Hours);
      }
      if (Minutes != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Minutes);
      }
      if (Seconds != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(Seconds);
      }
      if (CompassDirection != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(CompassDirection);
      }
      if (Pdop != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(Pdop);
      }
      if (IsGpsFault != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsGpsFault);
      }
      if (IsInferred != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsInferred);
      }
      if (Altitude != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(Altitude);
      }
      if (Heading != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(Heading);
      }
      if (Hdop != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(Hdop);
      }
      if (Vdop != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(Vdop);
      }
      if (Quality != 0) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) Quality);
      }
      if (NumSatellites != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(NumSatellites);
      }
      if (GpsSpeed != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(GpsSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsAutoMode != false) {
        size += 1 + 1;
      }
      if (PowerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
      }
      if (IsAirBagDeployed != false) {
        size += 1 + 1;
      }
      if (OdoMeter != 0D) {
        size += 1 + 8;
      }
      if (DriveRange != 0D) {
        size += 1 + 8;
      }
      if (IsSystemError != false) {
        size += 1 + 1;
      }
      if (IsHumanInterrupt != false) {
        size += 1 + 1;
      }
      if (AccOnButton != false) {
        size += 1 + 1;
      }
      if (AccOffButton != false) {
        size += 1 + 1;
      }
      if (AccResButton != false) {
        size += 1 + 1;
      }
      if (AccCancelButton != false) {
        size += 1 + 1;
      }
      if (AccOnOffButton != false) {
        size += 1 + 1;
      }
      if (AccResCancelButton != false) {
        size += 1 + 1;
      }
      if (AccIncSpdButton != false) {
        size += 1 + 1;
      }
      if (AccDecSpdButton != false) {
        size += 1 + 1;
      }
      if (AccIncGapButton != false) {
        size += 2 + 1;
      }
      if (AccDecGapButton != false) {
        size += 2 + 1;
      }
      if (LkaButton != false) {
        size += 2 + 1;
      }
      if (CanbusFault != false) {
        size += 2 + 1;
      }
      if (Latitude != 0D) {
        size += 2 + 8;
      }
      if (Longitude != 0D) {
        size += 2 + 8;
      }
      if (GpsValid != false) {
        size += 2 + 1;
      }
      if (Year != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Month != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Day != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Hours != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hours);
      }
      if (Minutes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Minutes);
      }
      if (Seconds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      if (CompassDirection != 0D) {
        size += 2 + 8;
      }
      if (Pdop != 0D) {
        size += 2 + 8;
      }
      if (IsGpsFault != false) {
        size += 2 + 1;
      }
      if (IsInferred != false) {
        size += 2 + 1;
      }
      if (Altitude != 0D) {
        size += 2 + 8;
      }
      if (Heading != 0D) {
        size += 2 + 8;
      }
      if (Hdop != 0D) {
        size += 2 + 8;
      }
      if (Vdop != 0D) {
        size += 2 + 8;
      }
      if (Quality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Quality);
      }
      if (NumSatellites != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumSatellites);
      }
      if (GpsSpeed != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsAutoMode != false) {
        IsAutoMode = other.IsAutoMode;
      }
      if (other.PowerState != 0) {
        PowerState = other.PowerState;
      }
      if (other.IsAirBagDeployed != false) {
        IsAirBagDeployed = other.IsAirBagDeployed;
      }
      if (other.OdoMeter != 0D) {
        OdoMeter = other.OdoMeter;
      }
      if (other.DriveRange != 0D) {
        DriveRange = other.DriveRange;
      }
      if (other.IsSystemError != false) {
        IsSystemError = other.IsSystemError;
      }
      if (other.IsHumanInterrupt != false) {
        IsHumanInterrupt = other.IsHumanInterrupt;
      }
      if (other.AccOnButton != false) {
        AccOnButton = other.AccOnButton;
      }
      if (other.AccOffButton != false) {
        AccOffButton = other.AccOffButton;
      }
      if (other.AccResButton != false) {
        AccResButton = other.AccResButton;
      }
      if (other.AccCancelButton != false) {
        AccCancelButton = other.AccCancelButton;
      }
      if (other.AccOnOffButton != false) {
        AccOnOffButton = other.AccOnOffButton;
      }
      if (other.AccResCancelButton != false) {
        AccResCancelButton = other.AccResCancelButton;
      }
      if (other.AccIncSpdButton != false) {
        AccIncSpdButton = other.AccIncSpdButton;
      }
      if (other.AccDecSpdButton != false) {
        AccDecSpdButton = other.AccDecSpdButton;
      }
      if (other.AccIncGapButton != false) {
        AccIncGapButton = other.AccIncGapButton;
      }
      if (other.AccDecGapButton != false) {
        AccDecGapButton = other.AccDecGapButton;
      }
      if (other.LkaButton != false) {
        LkaButton = other.LkaButton;
      }
      if (other.CanbusFault != false) {
        CanbusFault = other.CanbusFault;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.GpsValid != false) {
        GpsValid = other.GpsValid;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Hours != 0) {
        Hours = other.Hours;
      }
      if (other.Minutes != 0) {
        Minutes = other.Minutes;
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
      if (other.CompassDirection != 0D) {
        CompassDirection = other.CompassDirection;
      }
      if (other.Pdop != 0D) {
        Pdop = other.Pdop;
      }
      if (other.IsGpsFault != false) {
        IsGpsFault = other.IsGpsFault;
      }
      if (other.IsInferred != false) {
        IsInferred = other.IsInferred;
      }
      if (other.Altitude != 0D) {
        Altitude = other.Altitude;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Hdop != 0D) {
        Hdop = other.Hdop;
      }
      if (other.Vdop != 0D) {
        Vdop = other.Vdop;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.NumSatellites != 0) {
        NumSatellites = other.NumSatellites;
      }
      if (other.GpsSpeed != 0D) {
        GpsSpeed = other.GpsSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAutoMode = input.ReadBool();
            break;
          }
          case 16: {
            powerState_ = (global::Apollo.Canbus.BasicInfo.Types.Type) input.ReadEnum();
            break;
          }
          case 24: {
            IsAirBagDeployed = input.ReadBool();
            break;
          }
          case 33: {
            OdoMeter = input.ReadDouble();
            break;
          }
          case 41: {
            DriveRange = input.ReadDouble();
            break;
          }
          case 48: {
            IsSystemError = input.ReadBool();
            break;
          }
          case 56: {
            IsHumanInterrupt = input.ReadBool();
            break;
          }
          case 64: {
            AccOnButton = input.ReadBool();
            break;
          }
          case 72: {
            AccOffButton = input.ReadBool();
            break;
          }
          case 80: {
            AccResButton = input.ReadBool();
            break;
          }
          case 88: {
            AccCancelButton = input.ReadBool();
            break;
          }
          case 96: {
            AccOnOffButton = input.ReadBool();
            break;
          }
          case 104: {
            AccResCancelButton = input.ReadBool();
            break;
          }
          case 112: {
            AccIncSpdButton = input.ReadBool();
            break;
          }
          case 120: {
            AccDecSpdButton = input.ReadBool();
            break;
          }
          case 128: {
            AccIncGapButton = input.ReadBool();
            break;
          }
          case 136: {
            AccDecGapButton = input.ReadBool();
            break;
          }
          case 144: {
            LkaButton = input.ReadBool();
            break;
          }
          case 152: {
            CanbusFault = input.ReadBool();
            break;
          }
          case 161: {
            Latitude = input.ReadDouble();
            break;
          }
          case 169: {
            Longitude = input.ReadDouble();
            break;
          }
          case 176: {
            GpsValid = input.ReadBool();
            break;
          }
          case 184: {
            Year = input.ReadInt32();
            break;
          }
          case 192: {
            Month = input.ReadInt32();
            break;
          }
          case 200: {
            Day = input.ReadInt32();
            break;
          }
          case 208: {
            Hours = input.ReadInt32();
            break;
          }
          case 216: {
            Minutes = input.ReadInt32();
            break;
          }
          case 224: {
            Seconds = input.ReadInt32();
            break;
          }
          case 233: {
            CompassDirection = input.ReadDouble();
            break;
          }
          case 241: {
            Pdop = input.ReadDouble();
            break;
          }
          case 248: {
            IsGpsFault = input.ReadBool();
            break;
          }
          case 256: {
            IsInferred = input.ReadBool();
            break;
          }
          case 265: {
            Altitude = input.ReadDouble();
            break;
          }
          case 273: {
            Heading = input.ReadDouble();
            break;
          }
          case 281: {
            Hdop = input.ReadDouble();
            break;
          }
          case 289: {
            Vdop = input.ReadDouble();
            break;
          }
          case 296: {
            quality_ = (global::Apollo.Canbus.GpsQuality) input.ReadEnum();
            break;
          }
          case 304: {
            NumSatellites = input.ReadInt32();
            break;
          }
          case 313: {
            GpsSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BasicInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("OFF")] Off = 0,
        [pbr::OriginalName("ACC")] Acc = 1,
        [pbr::OriginalName("ON")] On = 2,
        [pbr::OriginalName("START")] Start = 3,
        [pbr::OriginalName("INVALID")] Invalid = 4,
      }

    }
    #endregion

  }

  public sealed partial class Global_rpt_6a : pb::IMessage<Global_rpt_6a> {
    private static readonly pb::MessageParser<Global_rpt_6a> _parser = new pb::MessageParser<Global_rpt_6a>(() => new Global_rpt_6a());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Global_rpt_6a> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_rpt_6a() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_rpt_6a(Global_rpt_6a other) : this() {
      pacmodStatus_ = other.pacmodStatus_;
      overrideStatus_ = other.overrideStatus_;
      vehCanTimeout_ = other.vehCanTimeout_;
      strCanTimeout_ = other.strCanTimeout_;
      brkCanTimeout_ = other.brkCanTimeout_;
      usrCanTimeout_ = other.usrCanTimeout_;
      usrCanReadErrors_ = other.usrCanReadErrors_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_rpt_6a Clone() {
      return new Global_rpt_6a(this);
    }

    /// <summary>Field number for the "pacmod_status" field.</summary>
    public const int PacmodStatusFieldNumber = 1;
    private global::Apollo.Canbus.Global_rpt_6a.Types.Pacmod_statusType pacmodStatus_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_6a.Types.Pacmod_statusType PacmodStatus {
      get { return pacmodStatus_; }
      set {
        pacmodStatus_ = value;
      }
    }

    /// <summary>Field number for the "override_status" field.</summary>
    public const int OverrideStatusFieldNumber = 2;
    private global::Apollo.Canbus.Global_rpt_6a.Types.Override_statusType overrideStatus_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_6a.Types.Override_statusType OverrideStatus {
      get { return overrideStatus_; }
      set {
        overrideStatus_ = value;
      }
    }

    /// <summary>Field number for the "veh_can_timeout" field.</summary>
    public const int VehCanTimeoutFieldNumber = 3;
    private bool vehCanTimeout_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehCanTimeout {
      get { return vehCanTimeout_; }
      set {
        vehCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "str_can_timeout" field.</summary>
    public const int StrCanTimeoutFieldNumber = 4;
    private bool strCanTimeout_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StrCanTimeout {
      get { return strCanTimeout_; }
      set {
        strCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "brk_can_timeout" field.</summary>
    public const int BrkCanTimeoutFieldNumber = 5;
    private global::Apollo.Canbus.Global_rpt_6a.Types.Brk_can_timeoutType brkCanTimeout_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_6a.Types.Brk_can_timeoutType BrkCanTimeout {
      get { return brkCanTimeout_; }
      set {
        brkCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "usr_can_timeout" field.</summary>
    public const int UsrCanTimeoutFieldNumber = 6;
    private bool usrCanTimeout_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsrCanTimeout {
      get { return usrCanTimeout_; }
      set {
        usrCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "usr_can_read_errors" field.</summary>
    public const int UsrCanReadErrorsFieldNumber = 7;
    private int usrCanReadErrors_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsrCanReadErrors {
      get { return usrCanReadErrors_; }
      set {
        usrCanReadErrors_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Global_rpt_6a);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Global_rpt_6a other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacmodStatus != other.PacmodStatus) return false;
      if (OverrideStatus != other.OverrideStatus) return false;
      if (VehCanTimeout != other.VehCanTimeout) return false;
      if (StrCanTimeout != other.StrCanTimeout) return false;
      if (BrkCanTimeout != other.BrkCanTimeout) return false;
      if (UsrCanTimeout != other.UsrCanTimeout) return false;
      if (UsrCanReadErrors != other.UsrCanReadErrors) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacmodStatus != 0) hash ^= PacmodStatus.GetHashCode();
      if (OverrideStatus != 0) hash ^= OverrideStatus.GetHashCode();
      if (VehCanTimeout != false) hash ^= VehCanTimeout.GetHashCode();
      if (StrCanTimeout != false) hash ^= StrCanTimeout.GetHashCode();
      if (BrkCanTimeout != 0) hash ^= BrkCanTimeout.GetHashCode();
      if (UsrCanTimeout != false) hash ^= UsrCanTimeout.GetHashCode();
      if (UsrCanReadErrors != 0) hash ^= UsrCanReadErrors.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacmodStatus != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PacmodStatus);
      }
      if (OverrideStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) OverrideStatus);
      }
      if (VehCanTimeout != false) {
        output.WriteRawTag(24);
        output.WriteBool(VehCanTimeout);
      }
      if (StrCanTimeout != false) {
        output.WriteRawTag(32);
        output.WriteBool(StrCanTimeout);
      }
      if (BrkCanTimeout != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BrkCanTimeout);
      }
      if (UsrCanTimeout != false) {
        output.WriteRawTag(48);
        output.WriteBool(UsrCanTimeout);
      }
      if (UsrCanReadErrors != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UsrCanReadErrors);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacmodStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacmodStatus);
      }
      if (OverrideStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OverrideStatus);
      }
      if (VehCanTimeout != false) {
        size += 1 + 1;
      }
      if (StrCanTimeout != false) {
        size += 1 + 1;
      }
      if (BrkCanTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BrkCanTimeout);
      }
      if (UsrCanTimeout != false) {
        size += 1 + 1;
      }
      if (UsrCanReadErrors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsrCanReadErrors);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Global_rpt_6a other) {
      if (other == null) {
        return;
      }
      if (other.PacmodStatus != 0) {
        PacmodStatus = other.PacmodStatus;
      }
      if (other.OverrideStatus != 0) {
        OverrideStatus = other.OverrideStatus;
      }
      if (other.VehCanTimeout != false) {
        VehCanTimeout = other.VehCanTimeout;
      }
      if (other.StrCanTimeout != false) {
        StrCanTimeout = other.StrCanTimeout;
      }
      if (other.BrkCanTimeout != 0) {
        BrkCanTimeout = other.BrkCanTimeout;
      }
      if (other.UsrCanTimeout != false) {
        UsrCanTimeout = other.UsrCanTimeout;
      }
      if (other.UsrCanReadErrors != 0) {
        UsrCanReadErrors = other.UsrCanReadErrors;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pacmodStatus_ = (global::Apollo.Canbus.Global_rpt_6a.Types.Pacmod_statusType) input.ReadEnum();
            break;
          }
          case 16: {
            overrideStatus_ = (global::Apollo.Canbus.Global_rpt_6a.Types.Override_statusType) input.ReadEnum();
            break;
          }
          case 24: {
            VehCanTimeout = input.ReadBool();
            break;
          }
          case 32: {
            StrCanTimeout = input.ReadBool();
            break;
          }
          case 40: {
            brkCanTimeout_ = (global::Apollo.Canbus.Global_rpt_6a.Types.Brk_can_timeoutType) input.ReadEnum();
            break;
          }
          case 48: {
            UsrCanTimeout = input.ReadBool();
            break;
          }
          case 56: {
            UsrCanReadErrors = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Global_rpt_6a message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Pacmod_statusType {
        [pbr::OriginalName("PACMOD_STATUS_CONTROL_DISABLED")] PacmodStatusControlDisabled = 0,
        [pbr::OriginalName("PACMOD_STATUS_CONTROL_ENABLED")] PacmodStatusControlEnabled = 1,
      }

      public enum Override_statusType {
        [pbr::OriginalName("OVERRIDE_STATUS_NOT_OVERRIDDEN")] OverrideStatusNotOverridden = 0,
        [pbr::OriginalName("OVERRIDE_STATUS_OVERRIDDEN")] OverrideStatusOverridden = 1,
      }

      public enum Brk_can_timeoutType {
        [pbr::OriginalName("BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT")] BrkCanTimeoutNoActiveCanTimeout = 0,
        [pbr::OriginalName("BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT")] BrkCanTimeoutActiveCanTimeout = 1,
      }

    }
    #endregion

  }

  public sealed partial class Brake_cmd_6b : pb::IMessage<Brake_cmd_6b> {
    private static readonly pb::MessageParser<Brake_cmd_6b> _parser = new pb::MessageParser<Brake_cmd_6b>(() => new Brake_cmd_6b());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_cmd_6b> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_cmd_6b() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_cmd_6b(Brake_cmd_6b other) : this() {
      brakeCmd_ = other.brakeCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_cmd_6b Clone() {
      return new Brake_cmd_6b(this);
    }

    /// <summary>Field number for the "brake_cmd" field.</summary>
    public const int BrakeCmdFieldNumber = 1;
    private double brakeCmd_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeCmd {
      get { return brakeCmd_; }
      set {
        brakeCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_cmd_6b);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_cmd_6b other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrakeCmd != other.BrakeCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrakeCmd != 0D) hash ^= BrakeCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrakeCmd != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BrakeCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrakeCmd != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_cmd_6b other) {
      if (other == null) {
        return;
      }
      if (other.BrakeCmd != 0D) {
        BrakeCmd = other.BrakeCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            BrakeCmd = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_rpt_6c : pb::IMessage<Brake_rpt_6c> {
    private static readonly pb::MessageParser<Brake_rpt_6c> _parser = new pb::MessageParser<Brake_rpt_6c>(() => new Brake_rpt_6c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_rpt_6c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_rpt_6c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_rpt_6c(Brake_rpt_6c other) : this() {
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
      brakeOnOff_ = other.brakeOnOff_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_rpt_6c Clone() {
      return new Brake_rpt_6c(this);
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 1;
    private double manualInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private double commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 3;
    private double outputValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "brake_on_off" field.</summary>
    public const int BrakeOnOffFieldNumber = 4;
    private global::Apollo.Canbus.Brake_rpt_6c.Types.Brake_on_offType brakeOnOff_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_rpt_6c.Types.Brake_on_offType BrakeOnOff {
      get { return brakeOnOff_; }
      set {
        brakeOnOff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_rpt_6c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_rpt_6c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      if (BrakeOnOff != other.BrakeOnOff) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManualInput != 0D) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0D) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0D) hash ^= OutputValue.GetHashCode();
      if (BrakeOnOff != 0) hash ^= BrakeOnOff.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualInput != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ManualInput);
      }
      if (CommandedValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CommandedValue);
      }
      if (OutputValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(OutputValue);
      }
      if (BrakeOnOff != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) BrakeOnOff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualInput != 0D) {
        size += 1 + 8;
      }
      if (CommandedValue != 0D) {
        size += 1 + 8;
      }
      if (OutputValue != 0D) {
        size += 1 + 8;
      }
      if (BrakeOnOff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BrakeOnOff);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_rpt_6c other) {
      if (other == null) {
        return;
      }
      if (other.ManualInput != 0D) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0D) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0D) {
        OutputValue = other.OutputValue;
      }
      if (other.BrakeOnOff != 0) {
        BrakeOnOff = other.BrakeOnOff;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ManualInput = input.ReadDouble();
            break;
          }
          case 17: {
            CommandedValue = input.ReadDouble();
            break;
          }
          case 25: {
            OutputValue = input.ReadDouble();
            break;
          }
          case 32: {
            brakeOnOff_ = (global::Apollo.Canbus.Brake_rpt_6c.Types.Brake_on_offType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Brake_rpt_6c message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Brake_on_offType {
        [pbr::OriginalName("BRAKE_ON_OFF_OFF")] BrakeOnOffOff = 0,
        [pbr::OriginalName("BRAKE_ON_OFF_ON")] BrakeOnOffOn = 1,
      }

    }
    #endregion

  }

  public sealed partial class Steering_cmd_6d : pb::IMessage<Steering_cmd_6d> {
    private static readonly pb::MessageParser<Steering_cmd_6d> _parser = new pb::MessageParser<Steering_cmd_6d>(() => new Steering_cmd_6d());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_cmd_6d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_cmd_6d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_cmd_6d(Steering_cmd_6d other) : this() {
      positionValue_ = other.positionValue_;
      speedLimit_ = other.speedLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_cmd_6d Clone() {
      return new Steering_cmd_6d(this);
    }

    /// <summary>Field number for the "position_value" field.</summary>
    public const int PositionValueFieldNumber = 1;
    private double positionValue_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionValue {
      get { return positionValue_; }
      set {
        positionValue_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 2;
    private double speedLimit_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_cmd_6d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_cmd_6d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PositionValue != other.PositionValue) return false;
      if (SpeedLimit != other.SpeedLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PositionValue != 0D) hash ^= PositionValue.GetHashCode();
      if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PositionValue != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PositionValue);
      }
      if (SpeedLimit != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SpeedLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PositionValue != 0D) {
        size += 1 + 8;
      }
      if (SpeedLimit != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_cmd_6d other) {
      if (other == null) {
        return;
      }
      if (other.PositionValue != 0D) {
        PositionValue = other.PositionValue;
      }
      if (other.SpeedLimit != 0D) {
        SpeedLimit = other.SpeedLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PositionValue = input.ReadDouble();
            break;
          }
          case 17: {
            SpeedLimit = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steering_rpt_1_6e : pb::IMessage<Steering_rpt_1_6e> {
    private static readonly pb::MessageParser<Steering_rpt_1_6e> _parser = new pb::MessageParser<Steering_rpt_1_6e>(() => new Steering_rpt_1_6e());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_rpt_1_6e> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_rpt_1_6e() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_rpt_1_6e(Steering_rpt_1_6e other) : this() {
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_rpt_1_6e Clone() {
      return new Steering_rpt_1_6e(this);
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 1;
    private double manualInput_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private double commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 3;
    private double outputValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_rpt_1_6e);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_rpt_1_6e other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManualInput != 0D) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0D) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0D) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualInput != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ManualInput);
      }
      if (CommandedValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CommandedValue);
      }
      if (OutputValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualInput != 0D) {
        size += 1 + 8;
      }
      if (CommandedValue != 0D) {
        size += 1 + 8;
      }
      if (OutputValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_rpt_1_6e other) {
      if (other == null) {
        return;
      }
      if (other.ManualInput != 0D) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0D) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0D) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ManualInput = input.ReadDouble();
            break;
          }
          case 17: {
            CommandedValue = input.ReadDouble();
            break;
          }
          case 25: {
            OutputValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Wheel_speed_rpt_7a : pb::IMessage<Wheel_speed_rpt_7a> {
    private static readonly pb::MessageParser<Wheel_speed_rpt_7a> _parser = new pb::MessageParser<Wheel_speed_rpt_7a>(() => new Wheel_speed_rpt_7a());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wheel_speed_rpt_7a> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wheel_speed_rpt_7a() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wheel_speed_rpt_7a(Wheel_speed_rpt_7a other) : this() {
      wheelSpdRearRight_ = other.wheelSpdRearRight_;
      wheelSpdRearLeft_ = other.wheelSpdRearLeft_;
      wheelSpdFrontRight_ = other.wheelSpdFrontRight_;
      wheelSpdFrontLeft_ = other.wheelSpdFrontLeft_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wheel_speed_rpt_7a Clone() {
      return new Wheel_speed_rpt_7a(this);
    }

    /// <summary>Field number for the "wheel_spd_rear_right" field.</summary>
    public const int WheelSpdRearRightFieldNumber = 1;
    private int wheelSpdRearRight_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WheelSpdRearRight {
      get { return wheelSpdRearRight_; }
      set {
        wheelSpdRearRight_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_rear_left" field.</summary>
    public const int WheelSpdRearLeftFieldNumber = 2;
    private int wheelSpdRearLeft_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WheelSpdRearLeft {
      get { return wheelSpdRearLeft_; }
      set {
        wheelSpdRearLeft_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_front_right" field.</summary>
    public const int WheelSpdFrontRightFieldNumber = 3;
    private int wheelSpdFrontRight_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WheelSpdFrontRight {
      get { return wheelSpdFrontRight_; }
      set {
        wheelSpdFrontRight_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_front_left" field.</summary>
    public const int WheelSpdFrontLeftFieldNumber = 4;
    private int wheelSpdFrontLeft_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WheelSpdFrontLeft {
      get { return wheelSpdFrontLeft_; }
      set {
        wheelSpdFrontLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wheel_speed_rpt_7a);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wheel_speed_rpt_7a other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WheelSpdRearRight != other.WheelSpdRearRight) return false;
      if (WheelSpdRearLeft != other.WheelSpdRearLeft) return false;
      if (WheelSpdFrontRight != other.WheelSpdFrontRight) return false;
      if (WheelSpdFrontLeft != other.WheelSpdFrontLeft) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WheelSpdRearRight != 0) hash ^= WheelSpdRearRight.GetHashCode();
      if (WheelSpdRearLeft != 0) hash ^= WheelSpdRearLeft.GetHashCode();
      if (WheelSpdFrontRight != 0) hash ^= WheelSpdFrontRight.GetHashCode();
      if (WheelSpdFrontLeft != 0) hash ^= WheelSpdFrontLeft.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WheelSpdRearRight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WheelSpdRearRight);
      }
      if (WheelSpdRearLeft != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WheelSpdRearLeft);
      }
      if (WheelSpdFrontRight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WheelSpdFrontRight);
      }
      if (WheelSpdFrontLeft != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WheelSpdFrontLeft);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WheelSpdRearRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelSpdRearRight);
      }
      if (WheelSpdRearLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelSpdRearLeft);
      }
      if (WheelSpdFrontRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelSpdFrontRight);
      }
      if (WheelSpdFrontLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelSpdFrontLeft);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wheel_speed_rpt_7a other) {
      if (other == null) {
        return;
      }
      if (other.WheelSpdRearRight != 0) {
        WheelSpdRearRight = other.WheelSpdRearRight;
      }
      if (other.WheelSpdRearLeft != 0) {
        WheelSpdRearLeft = other.WheelSpdRearLeft;
      }
      if (other.WheelSpdFrontRight != 0) {
        WheelSpdFrontRight = other.WheelSpdFrontRight;
      }
      if (other.WheelSpdFrontLeft != 0) {
        WheelSpdFrontLeft = other.WheelSpdFrontLeft;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WheelSpdRearRight = input.ReadInt32();
            break;
          }
          case 16: {
            WheelSpdRearLeft = input.ReadInt32();
            break;
          }
          case 24: {
            WheelSpdFrontRight = input.ReadInt32();
            break;
          }
          case 32: {
            WheelSpdFrontLeft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Date_time_rpt_83 : pb::IMessage<Date_time_rpt_83> {
    private static readonly pb::MessageParser<Date_time_rpt_83> _parser = new pb::MessageParser<Date_time_rpt_83>(() => new Date_time_rpt_83());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Date_time_rpt_83> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date_time_rpt_83() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date_time_rpt_83(Date_time_rpt_83 other) : this() {
      timeSecond_ = other.timeSecond_;
      timeMinute_ = other.timeMinute_;
      timeHour_ = other.timeHour_;
      dateDay_ = other.dateDay_;
      dateMonth_ = other.dateMonth_;
      dateYear_ = other.dateYear_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date_time_rpt_83 Clone() {
      return new Date_time_rpt_83(this);
    }

    /// <summary>Field number for the "time_second" field.</summary>
    public const int TimeSecondFieldNumber = 1;
    private int timeSecond_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeSecond {
      get { return timeSecond_; }
      set {
        timeSecond_ = value;
      }
    }

    /// <summary>Field number for the "time_minute" field.</summary>
    public const int TimeMinuteFieldNumber = 2;
    private int timeMinute_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeMinute {
      get { return timeMinute_; }
      set {
        timeMinute_ = value;
      }
    }

    /// <summary>Field number for the "time_hour" field.</summary>
    public const int TimeHourFieldNumber = 3;
    private int timeHour_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeHour {
      get { return timeHour_; }
      set {
        timeHour_ = value;
      }
    }

    /// <summary>Field number for the "date_day" field.</summary>
    public const int DateDayFieldNumber = 4;
    private int dateDay_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateDay {
      get { return dateDay_; }
      set {
        dateDay_ = value;
      }
    }

    /// <summary>Field number for the "date_month" field.</summary>
    public const int DateMonthFieldNumber = 5;
    private int dateMonth_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateMonth {
      get { return dateMonth_; }
      set {
        dateMonth_ = value;
      }
    }

    /// <summary>Field number for the "date_year" field.</summary>
    public const int DateYearFieldNumber = 6;
    private int dateYear_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateYear {
      get { return dateYear_; }
      set {
        dateYear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Date_time_rpt_83);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Date_time_rpt_83 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeSecond != other.TimeSecond) return false;
      if (TimeMinute != other.TimeMinute) return false;
      if (TimeHour != other.TimeHour) return false;
      if (DateDay != other.DateDay) return false;
      if (DateMonth != other.DateMonth) return false;
      if (DateYear != other.DateYear) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeSecond != 0) hash ^= TimeSecond.GetHashCode();
      if (TimeMinute != 0) hash ^= TimeMinute.GetHashCode();
      if (TimeHour != 0) hash ^= TimeHour.GetHashCode();
      if (DateDay != 0) hash ^= DateDay.GetHashCode();
      if (DateMonth != 0) hash ^= DateMonth.GetHashCode();
      if (DateYear != 0) hash ^= DateYear.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeSecond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeSecond);
      }
      if (TimeMinute != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeMinute);
      }
      if (TimeHour != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimeHour);
      }
      if (DateDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DateDay);
      }
      if (DateMonth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DateMonth);
      }
      if (DateYear != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DateYear);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeSecond);
      }
      if (TimeMinute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeMinute);
      }
      if (TimeHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeHour);
      }
      if (DateDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateDay);
      }
      if (DateMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateMonth);
      }
      if (DateYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateYear);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Date_time_rpt_83 other) {
      if (other == null) {
        return;
      }
      if (other.TimeSecond != 0) {
        TimeSecond = other.TimeSecond;
      }
      if (other.TimeMinute != 0) {
        TimeMinute = other.TimeMinute;
      }
      if (other.TimeHour != 0) {
        TimeHour = other.TimeHour;
      }
      if (other.DateDay != 0) {
        DateDay = other.DateDay;
      }
      if (other.DateMonth != 0) {
        DateMonth = other.DateMonth;
      }
      if (other.DateYear != 0) {
        DateYear = other.DateYear;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeSecond = input.ReadInt32();
            break;
          }
          case 16: {
            TimeMinute = input.ReadInt32();
            break;
          }
          case 24: {
            TimeHour = input.ReadInt32();
            break;
          }
          case 32: {
            DateDay = input.ReadInt32();
            break;
          }
          case 40: {
            DateMonth = input.ReadInt32();
            break;
          }
          case 48: {
            DateYear = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_motor_rpt_1_70 : pb::IMessage<Brake_motor_rpt_1_70> {
    private static readonly pb::MessageParser<Brake_motor_rpt_1_70> _parser = new pb::MessageParser<Brake_motor_rpt_1_70>(() => new Brake_motor_rpt_1_70());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_motor_rpt_1_70> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_1_70() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_1_70(Brake_motor_rpt_1_70 other) : this() {
      motorCurrent_ = other.motorCurrent_;
      shaftPosition_ = other.shaftPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_1_70 Clone() {
      return new Brake_motor_rpt_1_70(this);
    }

    /// <summary>Field number for the "motor_current" field.</summary>
    public const int MotorCurrentFieldNumber = 1;
    private double motorCurrent_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MotorCurrent {
      get { return motorCurrent_; }
      set {
        motorCurrent_ = value;
      }
    }

    /// <summary>Field number for the "shaft_position" field.</summary>
    public const int ShaftPositionFieldNumber = 2;
    private double shaftPosition_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShaftPosition {
      get { return shaftPosition_; }
      set {
        shaftPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_motor_rpt_1_70);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_motor_rpt_1_70 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MotorCurrent != other.MotorCurrent) return false;
      if (ShaftPosition != other.ShaftPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MotorCurrent != 0D) hash ^= MotorCurrent.GetHashCode();
      if (ShaftPosition != 0D) hash ^= ShaftPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MotorCurrent != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MotorCurrent);
      }
      if (ShaftPosition != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ShaftPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MotorCurrent != 0D) {
        size += 1 + 8;
      }
      if (ShaftPosition != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_motor_rpt_1_70 other) {
      if (other == null) {
        return;
      }
      if (other.MotorCurrent != 0D) {
        MotorCurrent = other.MotorCurrent;
      }
      if (other.ShaftPosition != 0D) {
        ShaftPosition = other.ShaftPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MotorCurrent = input.ReadDouble();
            break;
          }
          case 17: {
            ShaftPosition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Headlight_rpt_77 : pb::IMessage<Headlight_rpt_77> {
    private static readonly pb::MessageParser<Headlight_rpt_77> _parser = new pb::MessageParser<Headlight_rpt_77>(() => new Headlight_rpt_77());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Headlight_rpt_77> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_rpt_77() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_rpt_77(Headlight_rpt_77 other) : this() {
      outputValue_ = other.outputValue_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_rpt_77 Clone() {
      return new Headlight_rpt_77(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private global::Apollo.Canbus.Headlight_rpt_77.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_77.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 2;
    private global::Apollo.Canbus.Headlight_rpt_77.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_77.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 3;
    private global::Apollo.Canbus.Headlight_rpt_77.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_77.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Headlight_rpt_77);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Headlight_rpt_77 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OutputValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ManualInput);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CommandedValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Headlight_rpt_77 other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            outputValue_ = (global::Apollo.Canbus.Headlight_rpt_77.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 16: {
            manualInput_ = (global::Apollo.Canbus.Headlight_rpt_77.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 24: {
            commandedValue_ = (global::Apollo.Canbus.Headlight_rpt_77.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Headlight_rpt_77 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_HEADLIGHTS_OFF")] OutputValueHeadlightsOff = 0,
        [pbr::OriginalName("OUTPUT_VALUE_LOW_BEAMS")] OutputValueLowBeams = 1,
        [pbr::OriginalName("OUTPUT_VALUE_HIGH_BEAMS")] OutputValueHighBeams = 2,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_HEADLIGHTS_OFF")] ManualInputHeadlightsOff = 0,
        [pbr::OriginalName("MANUAL_INPUT_LOW_BEAMS")] ManualInputLowBeams = 1,
        [pbr::OriginalName("MANUAL_INPUT_HIGH_BEAMS")] ManualInputHighBeams = 2,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_HEADLIGHTS_OFF")] CommandedValueHeadlightsOff = 0,
        [pbr::OriginalName("COMMANDED_VALUE_LOW_BEAMS")] CommandedValueLowBeams = 1,
        [pbr::OriginalName("COMMANDED_VALUE_HIGH_BEAMS")] CommandedValueHighBeams = 2,
      }

    }
    #endregion

  }

  public sealed partial class Accel_rpt_68 : pb::IMessage<Accel_rpt_68> {
    private static readonly pb::MessageParser<Accel_rpt_68> _parser = new pb::MessageParser<Accel_rpt_68>(() => new Accel_rpt_68());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Accel_rpt_68> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_rpt_68() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_rpt_68(Accel_rpt_68 other) : this() {
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_rpt_68 Clone() {
      return new Accel_rpt_68(this);
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 1;
    private double manualInput_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private double commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 3;
    private double outputValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Accel_rpt_68);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Accel_rpt_68 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManualInput != 0D) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0D) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0D) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualInput != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ManualInput);
      }
      if (CommandedValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CommandedValue);
      }
      if (OutputValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualInput != 0D) {
        size += 1 + 8;
      }
      if (CommandedValue != 0D) {
        size += 1 + 8;
      }
      if (OutputValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Accel_rpt_68 other) {
      if (other == null) {
        return;
      }
      if (other.ManualInput != 0D) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0D) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0D) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ManualInput = input.ReadDouble();
            break;
          }
          case 17: {
            CommandedValue = input.ReadDouble();
            break;
          }
          case 25: {
            OutputValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steering_motor_rpt_3_75 : pb::IMessage<Steering_motor_rpt_3_75> {
    private static readonly pb::MessageParser<Steering_motor_rpt_3_75> _parser = new pb::MessageParser<Steering_motor_rpt_3_75>(() => new Steering_motor_rpt_3_75());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_motor_rpt_3_75> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_3_75() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_3_75(Steering_motor_rpt_3_75 other) : this() {
      torqueOutput_ = other.torqueOutput_;
      torqueInput_ = other.torqueInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_3_75 Clone() {
      return new Steering_motor_rpt_3_75(this);
    }

    /// <summary>Field number for the "torque_output" field.</summary>
    public const int TorqueOutputFieldNumber = 1;
    private double torqueOutput_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueOutput {
      get { return torqueOutput_; }
      set {
        torqueOutput_ = value;
      }
    }

    /// <summary>Field number for the "torque_input" field.</summary>
    public const int TorqueInputFieldNumber = 2;
    private double torqueInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueInput {
      get { return torqueInput_; }
      set {
        torqueInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_motor_rpt_3_75);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_motor_rpt_3_75 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TorqueOutput != other.TorqueOutput) return false;
      if (TorqueInput != other.TorqueInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TorqueOutput != 0D) hash ^= TorqueOutput.GetHashCode();
      if (TorqueInput != 0D) hash ^= TorqueInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TorqueOutput != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TorqueOutput);
      }
      if (TorqueInput != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TorqueInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TorqueOutput != 0D) {
        size += 1 + 8;
      }
      if (TorqueInput != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_motor_rpt_3_75 other) {
      if (other == null) {
        return;
      }
      if (other.TorqueOutput != 0D) {
        TorqueOutput = other.TorqueOutput;
      }
      if (other.TorqueInput != 0D) {
        TorqueInput = other.TorqueInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TorqueOutput = input.ReadDouble();
            break;
          }
          case 17: {
            TorqueInput = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Turn_cmd_63 : pb::IMessage<Turn_cmd_63> {
    private static readonly pb::MessageParser<Turn_cmd_63> _parser = new pb::MessageParser<Turn_cmd_63>(() => new Turn_cmd_63());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Turn_cmd_63> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_cmd_63() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_cmd_63(Turn_cmd_63 other) : this() {
      turnSignalCmd_ = other.turnSignalCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_cmd_63 Clone() {
      return new Turn_cmd_63(this);
    }

    /// <summary>Field number for the "turn_signal_cmd" field.</summary>
    public const int TurnSignalCmdFieldNumber = 1;
    private global::Apollo.Canbus.Turn_cmd_63.Types.Turn_signal_cmdType turnSignalCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_cmd_63.Types.Turn_signal_cmdType TurnSignalCmd {
      get { return turnSignalCmd_; }
      set {
        turnSignalCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Turn_cmd_63);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Turn_cmd_63 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurnSignalCmd != other.TurnSignalCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurnSignalCmd != 0) hash ^= TurnSignalCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurnSignalCmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TurnSignalCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurnSignalCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TurnSignalCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Turn_cmd_63 other) {
      if (other == null) {
        return;
      }
      if (other.TurnSignalCmd != 0) {
        TurnSignalCmd = other.TurnSignalCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            turnSignalCmd_ = (global::Apollo.Canbus.Turn_cmd_63.Types.Turn_signal_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Turn_cmd_63 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Turn_signal_cmdType {
        [pbr::OriginalName("TURN_SIGNAL_CMD_RIGHT")] TurnSignalCmdRight = 0,
        [pbr::OriginalName("TURN_SIGNAL_CMD_NONE")] TurnSignalCmdNone = 1,
        [pbr::OriginalName("TURN_SIGNAL_CMD_LEFT")] TurnSignalCmdLeft = 2,
        [pbr::OriginalName("TURN_SIGNAL_CMD_HAZARD")] TurnSignalCmdHazard = 3,
      }

    }
    #endregion

  }

  public sealed partial class Turn_rpt_64 : pb::IMessage<Turn_rpt_64> {
    private static readonly pb::MessageParser<Turn_rpt_64> _parser = new pb::MessageParser<Turn_rpt_64>(() => new Turn_rpt_64());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Turn_rpt_64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_rpt_64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_rpt_64(Turn_rpt_64 other) : this() {
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_rpt_64 Clone() {
      return new Turn_rpt_64(this);
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 1;
    private global::Apollo.Canbus.Turn_rpt_64.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_64.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private global::Apollo.Canbus.Turn_rpt_64.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_64.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 3;
    private global::Apollo.Canbus.Turn_rpt_64.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_64.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Turn_rpt_64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Turn_rpt_64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualInput != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ManualInput);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandedValue);
      }
      if (OutputValue != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Turn_rpt_64 other) {
      if (other == null) {
        return;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            manualInput_ = (global::Apollo.Canbus.Turn_rpt_64.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 16: {
            commandedValue_ = (global::Apollo.Canbus.Turn_rpt_64.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 24: {
            outputValue_ = (global::Apollo.Canbus.Turn_rpt_64.Types.Output_valueType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Turn_rpt_64 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_RIGHT")] ManualInputRight = 0,
        [pbr::OriginalName("MANUAL_INPUT_NONE")] ManualInputNone = 1,
        [pbr::OriginalName("MANUAL_INPUT_LEFT")] ManualInputLeft = 2,
        [pbr::OriginalName("MANUAL_INPUT_HAZARD")] ManualInputHazard = 3,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_RIGHT")] CommandedValueRight = 0,
        [pbr::OriginalName("COMMANDED_VALUE_NONE")] CommandedValueNone = 1,
        [pbr::OriginalName("COMMANDED_VALUE_LEFT")] CommandedValueLeft = 2,
        [pbr::OriginalName("COMMANDED_VALUE_HAZARD")] CommandedValueHazard = 3,
      }

      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_RIGHT")] OutputValueRight = 0,
        [pbr::OriginalName("OUTPUT_VALUE_NONE")] OutputValueNone = 1,
        [pbr::OriginalName("OUTPUT_VALUE_LEFT")] OutputValueLeft = 2,
        [pbr::OriginalName("OUTPUT_VALUE_HAZARD")] OutputValueHazard = 3,
      }

    }
    #endregion

  }

  public sealed partial class Shift_cmd_65 : pb::IMessage<Shift_cmd_65> {
    private static readonly pb::MessageParser<Shift_cmd_65> _parser = new pb::MessageParser<Shift_cmd_65>(() => new Shift_cmd_65());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shift_cmd_65> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_cmd_65() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_cmd_65(Shift_cmd_65 other) : this() {
      shiftCmd_ = other.shiftCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_cmd_65 Clone() {
      return new Shift_cmd_65(this);
    }

    /// <summary>Field number for the "shift_cmd" field.</summary>
    public const int ShiftCmdFieldNumber = 1;
    private global::Apollo.Canbus.Shift_cmd_65.Types.Shift_cmdType shiftCmd_ = 0;
    /// <summary>
    /// FORWARD_is_also_LOW_on_vehicles_with_LOW/HIGH,_PARK_and_HIGH_only_available_on_certain_Vehicles
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_cmd_65.Types.Shift_cmdType ShiftCmd {
      get { return shiftCmd_; }
      set {
        shiftCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shift_cmd_65);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shift_cmd_65 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShiftCmd != other.ShiftCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShiftCmd != 0) hash ^= ShiftCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShiftCmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ShiftCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShiftCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShiftCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shift_cmd_65 other) {
      if (other == null) {
        return;
      }
      if (other.ShiftCmd != 0) {
        ShiftCmd = other.ShiftCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            shiftCmd_ = (global::Apollo.Canbus.Shift_cmd_65.Types.Shift_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Shift_cmd_65 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Shift_cmdType {
        [pbr::OriginalName("SHIFT_CMD_PARK")] ShiftCmdPark = 0,
        [pbr::OriginalName("SHIFT_CMD_REVERSE")] ShiftCmdReverse = 1,
        [pbr::OriginalName("SHIFT_CMD_NEUTRAL")] ShiftCmdNeutral = 2,
        [pbr::OriginalName("SHIFT_CMD_FORWARD")] ShiftCmdForward = 3,
        [pbr::OriginalName("SHIFT_CMD_LOW")] ShiftCmdLow = 4,
      }

    }
    #endregion

  }

  public sealed partial class Shift_rpt_66 : pb::IMessage<Shift_rpt_66> {
    private static readonly pb::MessageParser<Shift_rpt_66> _parser = new pb::MessageParser<Shift_rpt_66>(() => new Shift_rpt_66());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shift_rpt_66> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_rpt_66() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_rpt_66(Shift_rpt_66 other) : this() {
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_rpt_66 Clone() {
      return new Shift_rpt_66(this);
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 1;
    private global::Apollo.Canbus.Shift_rpt_66.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_66.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private global::Apollo.Canbus.Shift_rpt_66.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_66.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 3;
    private global::Apollo.Canbus.Shift_rpt_66.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_66.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shift_rpt_66);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shift_rpt_66 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualInput != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ManualInput);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandedValue);
      }
      if (OutputValue != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shift_rpt_66 other) {
      if (other == null) {
        return;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            manualInput_ = (global::Apollo.Canbus.Shift_rpt_66.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 16: {
            commandedValue_ = (global::Apollo.Canbus.Shift_rpt_66.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 24: {
            outputValue_ = (global::Apollo.Canbus.Shift_rpt_66.Types.Output_valueType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Shift_rpt_66 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_PARK")] ManualInputPark = 0,
        [pbr::OriginalName("MANUAL_INPUT_REVERSE")] ManualInputReverse = 1,
        [pbr::OriginalName("MANUAL_INPUT_NEUTRAL")] ManualInputNeutral = 2,
        [pbr::OriginalName("MANUAL_INPUT_FORWARD")] ManualInputForward = 3,
        [pbr::OriginalName("MANUAL_INPUT_HIGH")] ManualInputHigh = 4,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_PARK")] CommandedValuePark = 0,
        [pbr::OriginalName("COMMANDED_VALUE_REVERSE")] CommandedValueReverse = 1,
        [pbr::OriginalName("COMMANDED_VALUE_NEUTRAL")] CommandedValueNeutral = 2,
        [pbr::OriginalName("COMMANDED_VALUE_FORWARD")] CommandedValueForward = 3,
        [pbr::OriginalName("COMMANDED_VALUE_HIGH")] CommandedValueHigh = 4,
      }

      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_PARK")] OutputValuePark = 0,
        [pbr::OriginalName("OUTPUT_VALUE_REVERSE")] OutputValueReverse = 1,
        [pbr::OriginalName("OUTPUT_VALUE_NEUTRAL")] OutputValueNeutral = 2,
        [pbr::OriginalName("OUTPUT_VALUE_FORWARD")] OutputValueForward = 3,
        [pbr::OriginalName("OUTPUT_VALUE_HIGH")] OutputValueHigh = 4,
      }

    }
    #endregion

  }

  public sealed partial class Accel_cmd_67 : pb::IMessage<Accel_cmd_67> {
    private static readonly pb::MessageParser<Accel_cmd_67> _parser = new pb::MessageParser<Accel_cmd_67>(() => new Accel_cmd_67());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Accel_cmd_67> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_cmd_67() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_cmd_67(Accel_cmd_67 other) : this() {
      accelCmd_ = other.accelCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_cmd_67 Clone() {
      return new Accel_cmd_67(this);
    }

    /// <summary>Field number for the "accel_cmd" field.</summary>
    public const int AccelCmdFieldNumber = 1;
    private double accelCmd_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelCmd {
      get { return accelCmd_; }
      set {
        accelCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Accel_cmd_67);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Accel_cmd_67 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccelCmd != other.AccelCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccelCmd != 0D) hash ^= AccelCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccelCmd != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(AccelCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccelCmd != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Accel_cmd_67 other) {
      if (other == null) {
        return;
      }
      if (other.AccelCmd != 0D) {
        AccelCmd = other.AccelCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            AccelCmd = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lat_lon_heading_rpt_82 : pb::IMessage<Lat_lon_heading_rpt_82> {
    private static readonly pb::MessageParser<Lat_lon_heading_rpt_82> _parser = new pb::MessageParser<Lat_lon_heading_rpt_82>(() => new Lat_lon_heading_rpt_82());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lat_lon_heading_rpt_82> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lat_lon_heading_rpt_82() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lat_lon_heading_rpt_82(Lat_lon_heading_rpt_82 other) : this() {
      heading_ = other.heading_;
      longitudeSeconds_ = other.longitudeSeconds_;
      longitudeMinutes_ = other.longitudeMinutes_;
      longitudeDegrees_ = other.longitudeDegrees_;
      latitudeSeconds_ = other.latitudeSeconds_;
      latitudeMinutes_ = other.latitudeMinutes_;
      latitudeDegrees_ = other.latitudeDegrees_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lat_lon_heading_rpt_82 Clone() {
      return new Lat_lon_heading_rpt_82(this);
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 1;
    private double heading_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "longitude_seconds" field.</summary>
    public const int LongitudeSecondsFieldNumber = 2;
    private int longitudeSeconds_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongitudeSeconds {
      get { return longitudeSeconds_; }
      set {
        longitudeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "longitude_minutes" field.</summary>
    public const int LongitudeMinutesFieldNumber = 3;
    private int longitudeMinutes_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongitudeMinutes {
      get { return longitudeMinutes_; }
      set {
        longitudeMinutes_ = value;
      }
    }

    /// <summary>Field number for the "longitude_degrees" field.</summary>
    public const int LongitudeDegreesFieldNumber = 4;
    private int longitudeDegrees_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongitudeDegrees {
      get { return longitudeDegrees_; }
      set {
        longitudeDegrees_ = value;
      }
    }

    /// <summary>Field number for the "latitude_seconds" field.</summary>
    public const int LatitudeSecondsFieldNumber = 5;
    private int latitudeSeconds_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LatitudeSeconds {
      get { return latitudeSeconds_; }
      set {
        latitudeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "latitude_minutes" field.</summary>
    public const int LatitudeMinutesFieldNumber = 6;
    private int latitudeMinutes_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LatitudeMinutes {
      get { return latitudeMinutes_; }
      set {
        latitudeMinutes_ = value;
      }
    }

    /// <summary>Field number for the "latitude_degrees" field.</summary>
    public const int LatitudeDegreesFieldNumber = 7;
    private int latitudeDegrees_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LatitudeDegrees {
      get { return latitudeDegrees_; }
      set {
        latitudeDegrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lat_lon_heading_rpt_82);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lat_lon_heading_rpt_82 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Heading != other.Heading) return false;
      if (LongitudeSeconds != other.LongitudeSeconds) return false;
      if (LongitudeMinutes != other.LongitudeMinutes) return false;
      if (LongitudeDegrees != other.LongitudeDegrees) return false;
      if (LatitudeSeconds != other.LatitudeSeconds) return false;
      if (LatitudeMinutes != other.LatitudeMinutes) return false;
      if (LatitudeDegrees != other.LatitudeDegrees) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (LongitudeSeconds != 0) hash ^= LongitudeSeconds.GetHashCode();
      if (LongitudeMinutes != 0) hash ^= LongitudeMinutes.GetHashCode();
      if (LongitudeDegrees != 0) hash ^= LongitudeDegrees.GetHashCode();
      if (LatitudeSeconds != 0) hash ^= LatitudeSeconds.GetHashCode();
      if (LatitudeMinutes != 0) hash ^= LatitudeMinutes.GetHashCode();
      if (LatitudeDegrees != 0) hash ^= LatitudeDegrees.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Heading != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Heading);
      }
      if (LongitudeSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LongitudeSeconds);
      }
      if (LongitudeMinutes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LongitudeMinutes);
      }
      if (LongitudeDegrees != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LongitudeDegrees);
      }
      if (LatitudeSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LatitudeSeconds);
      }
      if (LatitudeMinutes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LatitudeMinutes);
      }
      if (LatitudeDegrees != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LatitudeDegrees);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (LongitudeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongitudeSeconds);
      }
      if (LongitudeMinutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongitudeMinutes);
      }
      if (LongitudeDegrees != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongitudeDegrees);
      }
      if (LatitudeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatitudeSeconds);
      }
      if (LatitudeMinutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatitudeMinutes);
      }
      if (LatitudeDegrees != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatitudeDegrees);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lat_lon_heading_rpt_82 other) {
      if (other == null) {
        return;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.LongitudeSeconds != 0) {
        LongitudeSeconds = other.LongitudeSeconds;
      }
      if (other.LongitudeMinutes != 0) {
        LongitudeMinutes = other.LongitudeMinutes;
      }
      if (other.LongitudeDegrees != 0) {
        LongitudeDegrees = other.LongitudeDegrees;
      }
      if (other.LatitudeSeconds != 0) {
        LatitudeSeconds = other.LatitudeSeconds;
      }
      if (other.LatitudeMinutes != 0) {
        LatitudeMinutes = other.LatitudeMinutes;
      }
      if (other.LatitudeDegrees != 0) {
        LatitudeDegrees = other.LatitudeDegrees;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Heading = input.ReadDouble();
            break;
          }
          case 16: {
            LongitudeSeconds = input.ReadInt32();
            break;
          }
          case 24: {
            LongitudeMinutes = input.ReadInt32();
            break;
          }
          case 32: {
            LongitudeDegrees = input.ReadInt32();
            break;
          }
          case 40: {
            LatitudeSeconds = input.ReadInt32();
            break;
          }
          case 48: {
            LatitudeMinutes = input.ReadInt32();
            break;
          }
          case 56: {
            LatitudeDegrees = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Global_cmd_69 : pb::IMessage<Global_cmd_69> {
    private static readonly pb::MessageParser<Global_cmd_69> _parser = new pb::MessageParser<Global_cmd_69>(() => new Global_cmd_69());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Global_cmd_69> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_cmd_69() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_cmd_69(Global_cmd_69 other) : this() {
      pacmodEnable_ = other.pacmodEnable_;
      clearOverride_ = other.clearOverride_;
      ignoreOverride_ = other.ignoreOverride_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_cmd_69 Clone() {
      return new Global_cmd_69(this);
    }

    /// <summary>Field number for the "pacmod_enable" field.</summary>
    public const int PacmodEnableFieldNumber = 1;
    private global::Apollo.Canbus.Global_cmd_69.Types.Pacmod_enableType pacmodEnable_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_cmd_69.Types.Pacmod_enableType PacmodEnable {
      get { return pacmodEnable_; }
      set {
        pacmodEnable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 2;
    private global::Apollo.Canbus.Global_cmd_69.Types.Clear_overrideType clearOverride_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_cmd_69.Types.Clear_overrideType ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "ignore_override" field.</summary>
    public const int IgnoreOverrideFieldNumber = 3;
    private global::Apollo.Canbus.Global_cmd_69.Types.Ignore_overrideType ignoreOverride_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_cmd_69.Types.Ignore_overrideType IgnoreOverride {
      get { return ignoreOverride_; }
      set {
        ignoreOverride_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Global_cmd_69);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Global_cmd_69 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacmodEnable != other.PacmodEnable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (IgnoreOverride != other.IgnoreOverride) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacmodEnable != 0) hash ^= PacmodEnable.GetHashCode();
      if (ClearOverride != 0) hash ^= ClearOverride.GetHashCode();
      if (IgnoreOverride != 0) hash ^= IgnoreOverride.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacmodEnable != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PacmodEnable);
      }
      if (ClearOverride != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ClearOverride);
      }
      if (IgnoreOverride != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) IgnoreOverride);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacmodEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacmodEnable);
      }
      if (ClearOverride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClearOverride);
      }
      if (IgnoreOverride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IgnoreOverride);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Global_cmd_69 other) {
      if (other == null) {
        return;
      }
      if (other.PacmodEnable != 0) {
        PacmodEnable = other.PacmodEnable;
      }
      if (other.ClearOverride != 0) {
        ClearOverride = other.ClearOverride;
      }
      if (other.IgnoreOverride != 0) {
        IgnoreOverride = other.IgnoreOverride;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pacmodEnable_ = (global::Apollo.Canbus.Global_cmd_69.Types.Pacmod_enableType) input.ReadEnum();
            break;
          }
          case 16: {
            clearOverride_ = (global::Apollo.Canbus.Global_cmd_69.Types.Clear_overrideType) input.ReadEnum();
            break;
          }
          case 24: {
            ignoreOverride_ = (global::Apollo.Canbus.Global_cmd_69.Types.Ignore_overrideType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Global_cmd_69 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Pacmod_enableType {
        [pbr::OriginalName("PACMOD_ENABLE_CONTROL_DISABLED")] PacmodEnableControlDisabled = 0,
        [pbr::OriginalName("PACMOD_ENABLE_CONTROL_ENABLED")] PacmodEnableControlEnabled = 1,
      }

      public enum Clear_overrideType {
        [pbr::OriginalName("CLEAR_OVERRIDE_DON_T_CLEAR_ACTIVE_OVERRIDES")] ClearOverrideDonTClearActiveOverrides = 0,
        [pbr::OriginalName("CLEAR_OVERRIDE_CLEAR_ACTIVE_OVERRIDES")] ClearOverrideClearActiveOverrides = 1,
      }

      public enum Ignore_overrideType {
        [pbr::OriginalName("IGNORE_OVERRIDE_DON_T_IGNORE_USER_OVERRIDES")] IgnoreOverrideDonTIgnoreUserOverrides = 0,
        [pbr::OriginalName("IGNORE_OVERRIDE_IGNORE_USER_OVERRIDES")] IgnoreOverrideIgnoreUserOverrides = 1,
      }

    }
    #endregion

  }

  public sealed partial class Parking_brake_status_rpt_80 : pb::IMessage<Parking_brake_status_rpt_80> {
    private static readonly pb::MessageParser<Parking_brake_status_rpt_80> _parser = new pb::MessageParser<Parking_brake_status_rpt_80>(() => new Parking_brake_status_rpt_80());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parking_brake_status_rpt_80> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_status_rpt_80() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_status_rpt_80(Parking_brake_status_rpt_80 other) : this() {
      parkingBrakeEnabled_ = other.parkingBrakeEnabled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_status_rpt_80 Clone() {
      return new Parking_brake_status_rpt_80(this);
    }

    /// <summary>Field number for the "parking_brake_enabled" field.</summary>
    public const int ParkingBrakeEnabledFieldNumber = 1;
    private global::Apollo.Canbus.Parking_brake_status_rpt_80.Types.Parking_brake_enabledType parkingBrakeEnabled_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Parking_brake_status_rpt_80.Types.Parking_brake_enabledType ParkingBrakeEnabled {
      get { return parkingBrakeEnabled_; }
      set {
        parkingBrakeEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parking_brake_status_rpt_80);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parking_brake_status_rpt_80 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParkingBrakeEnabled != other.ParkingBrakeEnabled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParkingBrakeEnabled != 0) hash ^= ParkingBrakeEnabled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParkingBrakeEnabled != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ParkingBrakeEnabled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParkingBrakeEnabled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ParkingBrakeEnabled);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parking_brake_status_rpt_80 other) {
      if (other == null) {
        return;
      }
      if (other.ParkingBrakeEnabled != 0) {
        ParkingBrakeEnabled = other.ParkingBrakeEnabled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            parkingBrakeEnabled_ = (global::Apollo.Canbus.Parking_brake_status_rpt_80.Types.Parking_brake_enabledType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Parking_brake_status_rpt_80 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Parking_brake_enabledType {
        [pbr::OriginalName("PARKING_BRAKE_ENABLED_OFF")] ParkingBrakeEnabledOff = 0,
        [pbr::OriginalName("PARKING_BRAKE_ENABLED_ON")] ParkingBrakeEnabledOn = 1,
      }

    }
    #endregion

  }

  public sealed partial class Yaw_rate_rpt_81 : pb::IMessage<Yaw_rate_rpt_81> {
    private static readonly pb::MessageParser<Yaw_rate_rpt_81> _parser = new pb::MessageParser<Yaw_rate_rpt_81>(() => new Yaw_rate_rpt_81());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Yaw_rate_rpt_81> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Yaw_rate_rpt_81() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Yaw_rate_rpt_81(Yaw_rate_rpt_81 other) : this() {
      yawRate_ = other.yawRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Yaw_rate_rpt_81 Clone() {
      return new Yaw_rate_rpt_81(this);
    }

    /// <summary>Field number for the "yaw_rate" field.</summary>
    public const int YawRateFieldNumber = 1;
    private double yawRate_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawRate {
      get { return yawRate_; }
      set {
        yawRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Yaw_rate_rpt_81);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Yaw_rate_rpt_81 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (YawRate != other.YawRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (YawRate != 0D) hash ^= YawRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (YawRate != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(YawRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (YawRate != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Yaw_rate_rpt_81 other) {
      if (other == null) {
        return;
      }
      if (other.YawRate != 0D) {
        YawRate = other.YawRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            YawRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Horn_rpt_79 : pb::IMessage<Horn_rpt_79> {
    private static readonly pb::MessageParser<Horn_rpt_79> _parser = new pb::MessageParser<Horn_rpt_79>(() => new Horn_rpt_79());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Horn_rpt_79> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_rpt_79() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_rpt_79(Horn_rpt_79 other) : this() {
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_rpt_79 Clone() {
      return new Horn_rpt_79(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private global::Apollo.Canbus.Horn_rpt_79.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_79.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private global::Apollo.Canbus.Horn_rpt_79.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_79.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 3;
    private global::Apollo.Canbus.Horn_rpt_79.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_79.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Horn_rpt_79);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Horn_rpt_79 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OutputValue);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandedValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ManualInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Horn_rpt_79 other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            outputValue_ = (global::Apollo.Canbus.Horn_rpt_79.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 16: {
            commandedValue_ = (global::Apollo.Canbus.Horn_rpt_79.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 24: {
            manualInput_ = (global::Apollo.Canbus.Horn_rpt_79.Types.Manual_inputType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Horn_rpt_79 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_OFF")] OutputValueOff = 0,
        [pbr::OriginalName("OUTPUT_VALUE_ON")] OutputValueOn = 1,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_OFF")] CommandedValueOff = 0,
        [pbr::OriginalName("COMMANDED_VALUE_ON")] CommandedValueOn = 1,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_OFF")] ManualInputOff = 0,
        [pbr::OriginalName("MANUAL_INPUT_ON")] ManualInputOn = 1,
      }

    }
    #endregion

  }

  public sealed partial class Horn_cmd_78 : pb::IMessage<Horn_cmd_78> {
    private static readonly pb::MessageParser<Horn_cmd_78> _parser = new pb::MessageParser<Horn_cmd_78>(() => new Horn_cmd_78());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Horn_cmd_78> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_cmd_78() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_cmd_78(Horn_cmd_78 other) : this() {
      hornCmd_ = other.hornCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_cmd_78 Clone() {
      return new Horn_cmd_78(this);
    }

    /// <summary>Field number for the "horn_cmd" field.</summary>
    public const int HornCmdFieldNumber = 1;
    private global::Apollo.Canbus.Horn_cmd_78.Types.Horn_cmdType hornCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_cmd_78.Types.Horn_cmdType HornCmd {
      get { return hornCmd_; }
      set {
        hornCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Horn_cmd_78);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Horn_cmd_78 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HornCmd != other.HornCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HornCmd != 0) hash ^= HornCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HornCmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HornCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HornCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HornCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Horn_cmd_78 other) {
      if (other == null) {
        return;
      }
      if (other.HornCmd != 0) {
        HornCmd = other.HornCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            hornCmd_ = (global::Apollo.Canbus.Horn_cmd_78.Types.Horn_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Horn_cmd_78 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Horn_cmdType {
        [pbr::OriginalName("HORN_CMD_OFF")] HornCmdOff = 0,
        [pbr::OriginalName("HORN_CMD_ON")] HornCmdOn = 1,
      }

    }
    #endregion

  }

  public sealed partial class Wiper_rpt_91 : pb::IMessage<Wiper_rpt_91> {
    private static readonly pb::MessageParser<Wiper_rpt_91> _parser = new pb::MessageParser<Wiper_rpt_91>(() => new Wiper_rpt_91());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wiper_rpt_91> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_rpt_91() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_rpt_91(Wiper_rpt_91 other) : this() {
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_rpt_91 Clone() {
      return new Wiper_rpt_91(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private global::Apollo.Canbus.Wiper_rpt_91.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_91.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private global::Apollo.Canbus.Wiper_rpt_91.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_91.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 3;
    private global::Apollo.Canbus.Wiper_rpt_91.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_91.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wiper_rpt_91);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wiper_rpt_91 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OutputValue);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandedValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ManualInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wiper_rpt_91 other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            outputValue_ = (global::Apollo.Canbus.Wiper_rpt_91.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 16: {
            commandedValue_ = (global::Apollo.Canbus.Wiper_rpt_91.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 24: {
            manualInput_ = (global::Apollo.Canbus.Wiper_rpt_91.Types.Manual_inputType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Wiper_rpt_91 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_WIPERS_OFF")] OutputValueWipersOff = 0,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_1")] OutputValueIntermittent1 = 1,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_2")] OutputValueIntermittent2 = 2,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_3")] OutputValueIntermittent3 = 3,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_4")] OutputValueIntermittent4 = 4,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_5")] OutputValueIntermittent5 = 5,
        [pbr::OriginalName("OUTPUT_VALUE_LOW")] OutputValueLow = 6,
        [pbr::OriginalName("OUTPUT_VALUE_HIGH")] OutputValueHigh = 7,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_WIPERS_OFF")] CommandedValueWipersOff = 0,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_1")] CommandedValueIntermittent1 = 1,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_2")] CommandedValueIntermittent2 = 2,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_3")] CommandedValueIntermittent3 = 3,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_4")] CommandedValueIntermittent4 = 4,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_5")] CommandedValueIntermittent5 = 5,
        [pbr::OriginalName("COMMANDED_VALUE_LOW")] CommandedValueLow = 6,
        [pbr::OriginalName("COMMANDED_VALUE_HIGH")] CommandedValueHigh = 7,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_WIPERS_OFF")] ManualInputWipersOff = 0,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_1")] ManualInputIntermittent1 = 1,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_2")] ManualInputIntermittent2 = 2,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_3")] ManualInputIntermittent3 = 3,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_4")] ManualInputIntermittent4 = 4,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_5")] ManualInputIntermittent5 = 5,
        [pbr::OriginalName("MANUAL_INPUT_LOW")] ManualInputLow = 6,
        [pbr::OriginalName("MANUAL_INPUT_HIGH")] ManualInputHigh = 7,
      }

    }
    #endregion

  }

  public sealed partial class Vehicle_speed_rpt_6f : pb::IMessage<Vehicle_speed_rpt_6f> {
    private static readonly pb::MessageParser<Vehicle_speed_rpt_6f> _parser = new pb::MessageParser<Vehicle_speed_rpt_6f>(() => new Vehicle_speed_rpt_6f());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle_speed_rpt_6f> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle_speed_rpt_6f() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle_speed_rpt_6f(Vehicle_speed_rpt_6f other) : this() {
      vehicleSpeed_ = other.vehicleSpeed_;
      vehicleSpeedValid_ = other.vehicleSpeedValid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle_speed_rpt_6f Clone() {
      return new Vehicle_speed_rpt_6f(this);
    }

    /// <summary>Field number for the "vehicle_speed" field.</summary>
    public const int VehicleSpeedFieldNumber = 1;
    private double vehicleSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleSpeed {
      get { return vehicleSpeed_; }
      set {
        vehicleSpeed_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_speed_valid" field.</summary>
    public const int VehicleSpeedValidFieldNumber = 2;
    private global::Apollo.Canbus.Vehicle_speed_rpt_6f.Types.Vehicle_speed_validType vehicleSpeedValid_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Vehicle_speed_rpt_6f.Types.Vehicle_speed_validType VehicleSpeedValid {
      get { return vehicleSpeedValid_; }
      set {
        vehicleSpeedValid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle_speed_rpt_6f);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle_speed_rpt_6f other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleSpeed != other.VehicleSpeed) return false;
      if (VehicleSpeedValid != other.VehicleSpeedValid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleSpeed != 0D) hash ^= VehicleSpeed.GetHashCode();
      if (VehicleSpeedValid != 0) hash ^= VehicleSpeedValid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(VehicleSpeed);
      }
      if (VehicleSpeedValid != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VehicleSpeedValid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleSpeed != 0D) {
        size += 1 + 8;
      }
      if (VehicleSpeedValid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VehicleSpeedValid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle_speed_rpt_6f other) {
      if (other == null) {
        return;
      }
      if (other.VehicleSpeed != 0D) {
        VehicleSpeed = other.VehicleSpeed;
      }
      if (other.VehicleSpeedValid != 0) {
        VehicleSpeedValid = other.VehicleSpeedValid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            VehicleSpeed = input.ReadDouble();
            break;
          }
          case 16: {
            vehicleSpeedValid_ = (global::Apollo.Canbus.Vehicle_speed_rpt_6f.Types.Vehicle_speed_validType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vehicle_speed_rpt_6f message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Vehicle_speed_validType {
        [pbr::OriginalName("VEHICLE_SPEED_VALID_INVALID")] VehicleSpeedValidInvalid = 0,
        [pbr::OriginalName("VEHICLE_SPEED_VALID_VALID")] VehicleSpeedValidValid = 1,
      }

    }
    #endregion

  }

  public sealed partial class Headlight_cmd_76 : pb::IMessage<Headlight_cmd_76> {
    private static readonly pb::MessageParser<Headlight_cmd_76> _parser = new pb::MessageParser<Headlight_cmd_76>(() => new Headlight_cmd_76());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Headlight_cmd_76> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_cmd_76() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_cmd_76(Headlight_cmd_76 other) : this() {
      headlightCmd_ = other.headlightCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_cmd_76 Clone() {
      return new Headlight_cmd_76(this);
    }

    /// <summary>Field number for the "headlight_cmd" field.</summary>
    public const int HeadlightCmdFieldNumber = 1;
    private global::Apollo.Canbus.Headlight_cmd_76.Types.Headlight_cmdType headlightCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_cmd_76.Types.Headlight_cmdType HeadlightCmd {
      get { return headlightCmd_; }
      set {
        headlightCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Headlight_cmd_76);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Headlight_cmd_76 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadlightCmd != other.HeadlightCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadlightCmd != 0) hash ^= HeadlightCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadlightCmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HeadlightCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadlightCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HeadlightCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Headlight_cmd_76 other) {
      if (other == null) {
        return;
      }
      if (other.HeadlightCmd != 0) {
        HeadlightCmd = other.HeadlightCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            headlightCmd_ = (global::Apollo.Canbus.Headlight_cmd_76.Types.Headlight_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Headlight_cmd_76 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Headlight_cmdType {
        [pbr::OriginalName("HEADLIGHT_CMD_HEADLIGHTS_OFF")] HeadlightCmdHeadlightsOff = 0,
        [pbr::OriginalName("HEADLIGHT_CMD_LOW_BEAMS")] HeadlightCmdLowBeams = 1,
        [pbr::OriginalName("HEADLIGHT_CMD_HIGH_BEAMS")] HeadlightCmdHighBeams = 2,
      }

    }
    #endregion

  }

  public sealed partial class Steering_motor_rpt_2_74 : pb::IMessage<Steering_motor_rpt_2_74> {
    private static readonly pb::MessageParser<Steering_motor_rpt_2_74> _parser = new pb::MessageParser<Steering_motor_rpt_2_74>(() => new Steering_motor_rpt_2_74());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_motor_rpt_2_74> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_2_74() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_2_74(Steering_motor_rpt_2_74 other) : this() {
      encoderTemperature_ = other.encoderTemperature_;
      motorTemperature_ = other.motorTemperature_;
      angularSpeed_ = other.angularSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_2_74 Clone() {
      return new Steering_motor_rpt_2_74(this);
    }

    /// <summary>Field number for the "encoder_temperature" field.</summary>
    public const int EncoderTemperatureFieldNumber = 1;
    private int encoderTemperature_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderTemperature {
      get { return encoderTemperature_; }
      set {
        encoderTemperature_ = value;
      }
    }

    /// <summary>Field number for the "motor_temperature" field.</summary>
    public const int MotorTemperatureFieldNumber = 2;
    private int motorTemperature_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MotorTemperature {
      get { return motorTemperature_; }
      set {
        motorTemperature_ = value;
      }
    }

    /// <summary>Field number for the "angular_speed" field.</summary>
    public const int AngularSpeedFieldNumber = 3;
    private double angularSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngularSpeed {
      get { return angularSpeed_; }
      set {
        angularSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_motor_rpt_2_74);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_motor_rpt_2_74 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncoderTemperature != other.EncoderTemperature) return false;
      if (MotorTemperature != other.MotorTemperature) return false;
      if (AngularSpeed != other.AngularSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncoderTemperature != 0) hash ^= EncoderTemperature.GetHashCode();
      if (MotorTemperature != 0) hash ^= MotorTemperature.GetHashCode();
      if (AngularSpeed != 0D) hash ^= AngularSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncoderTemperature != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AngularSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncoderTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_motor_rpt_2_74 other) {
      if (other == null) {
        return;
      }
      if (other.EncoderTemperature != 0) {
        EncoderTemperature = other.EncoderTemperature;
      }
      if (other.MotorTemperature != 0) {
        MotorTemperature = other.MotorTemperature;
      }
      if (other.AngularSpeed != 0D) {
        AngularSpeed = other.AngularSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EncoderTemperature = input.ReadInt32();
            break;
          }
          case 16: {
            MotorTemperature = input.ReadInt32();
            break;
          }
          case 25: {
            AngularSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_motor_rpt_2_71 : pb::IMessage<Brake_motor_rpt_2_71> {
    private static readonly pb::MessageParser<Brake_motor_rpt_2_71> _parser = new pb::MessageParser<Brake_motor_rpt_2_71>(() => new Brake_motor_rpt_2_71());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_motor_rpt_2_71> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_2_71() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_2_71(Brake_motor_rpt_2_71 other) : this() {
      encoderTemperature_ = other.encoderTemperature_;
      motorTemperature_ = other.motorTemperature_;
      angularSpeed_ = other.angularSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_2_71 Clone() {
      return new Brake_motor_rpt_2_71(this);
    }

    /// <summary>Field number for the "encoder_temperature" field.</summary>
    public const int EncoderTemperatureFieldNumber = 1;
    private int encoderTemperature_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderTemperature {
      get { return encoderTemperature_; }
      set {
        encoderTemperature_ = value;
      }
    }

    /// <summary>Field number for the "motor_temperature" field.</summary>
    public const int MotorTemperatureFieldNumber = 2;
    private int motorTemperature_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MotorTemperature {
      get { return motorTemperature_; }
      set {
        motorTemperature_ = value;
      }
    }

    /// <summary>Field number for the "angular_speed" field.</summary>
    public const int AngularSpeedFieldNumber = 3;
    private double angularSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngularSpeed {
      get { return angularSpeed_; }
      set {
        angularSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_motor_rpt_2_71);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_motor_rpt_2_71 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncoderTemperature != other.EncoderTemperature) return false;
      if (MotorTemperature != other.MotorTemperature) return false;
      if (AngularSpeed != other.AngularSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncoderTemperature != 0) hash ^= EncoderTemperature.GetHashCode();
      if (MotorTemperature != 0) hash ^= MotorTemperature.GetHashCode();
      if (AngularSpeed != 0D) hash ^= AngularSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncoderTemperature != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AngularSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncoderTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_motor_rpt_2_71 other) {
      if (other == null) {
        return;
      }
      if (other.EncoderTemperature != 0) {
        EncoderTemperature = other.EncoderTemperature;
      }
      if (other.MotorTemperature != 0) {
        MotorTemperature = other.MotorTemperature;
      }
      if (other.AngularSpeed != 0D) {
        AngularSpeed = other.AngularSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EncoderTemperature = input.ReadInt32();
            break;
          }
          case 16: {
            MotorTemperature = input.ReadInt32();
            break;
          }
          case 25: {
            AngularSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steering_motor_rpt_1_73 : pb::IMessage<Steering_motor_rpt_1_73> {
    private static readonly pb::MessageParser<Steering_motor_rpt_1_73> _parser = new pb::MessageParser<Steering_motor_rpt_1_73>(() => new Steering_motor_rpt_1_73());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_motor_rpt_1_73> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_1_73() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_1_73(Steering_motor_rpt_1_73 other) : this() {
      motorCurrent_ = other.motorCurrent_;
      shaftPosition_ = other.shaftPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_1_73 Clone() {
      return new Steering_motor_rpt_1_73(this);
    }

    /// <summary>Field number for the "motor_current" field.</summary>
    public const int MotorCurrentFieldNumber = 1;
    private double motorCurrent_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MotorCurrent {
      get { return motorCurrent_; }
      set {
        motorCurrent_ = value;
      }
    }

    /// <summary>Field number for the "shaft_position" field.</summary>
    public const int ShaftPositionFieldNumber = 2;
    private double shaftPosition_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShaftPosition {
      get { return shaftPosition_; }
      set {
        shaftPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_motor_rpt_1_73);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_motor_rpt_1_73 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MotorCurrent != other.MotorCurrent) return false;
      if (ShaftPosition != other.ShaftPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MotorCurrent != 0D) hash ^= MotorCurrent.GetHashCode();
      if (ShaftPosition != 0D) hash ^= ShaftPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MotorCurrent != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MotorCurrent);
      }
      if (ShaftPosition != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ShaftPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MotorCurrent != 0D) {
        size += 1 + 8;
      }
      if (ShaftPosition != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_motor_rpt_1_73 other) {
      if (other == null) {
        return;
      }
      if (other.MotorCurrent != 0D) {
        MotorCurrent = other.MotorCurrent;
      }
      if (other.ShaftPosition != 0D) {
        ShaftPosition = other.ShaftPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MotorCurrent = input.ReadDouble();
            break;
          }
          case 17: {
            ShaftPosition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Wiper_cmd_90 : pb::IMessage<Wiper_cmd_90> {
    private static readonly pb::MessageParser<Wiper_cmd_90> _parser = new pb::MessageParser<Wiper_cmd_90>(() => new Wiper_cmd_90());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wiper_cmd_90> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_cmd_90() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_cmd_90(Wiper_cmd_90 other) : this() {
      wiperCmd_ = other.wiperCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_cmd_90 Clone() {
      return new Wiper_cmd_90(this);
    }

    /// <summary>Field number for the "wiper_cmd" field.</summary>
    public const int WiperCmdFieldNumber = 1;
    private global::Apollo.Canbus.Wiper_cmd_90.Types.Wiper_cmdType wiperCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_cmd_90.Types.Wiper_cmdType WiperCmd {
      get { return wiperCmd_; }
      set {
        wiperCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wiper_cmd_90);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wiper_cmd_90 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WiperCmd != other.WiperCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WiperCmd != 0) hash ^= WiperCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WiperCmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) WiperCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WiperCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WiperCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wiper_cmd_90 other) {
      if (other == null) {
        return;
      }
      if (other.WiperCmd != 0) {
        WiperCmd = other.WiperCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            wiperCmd_ = (global::Apollo.Canbus.Wiper_cmd_90.Types.Wiper_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Wiper_cmd_90 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Wiper_cmdType {
        [pbr::OriginalName("WIPER_CMD_WIPERS_OFF")] WiperCmdWipersOff = 0,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_1")] WiperCmdIntermittent1 = 1,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_2")] WiperCmdIntermittent2 = 2,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_3")] WiperCmdIntermittent3 = 3,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_4")] WiperCmdIntermittent4 = 4,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_5")] WiperCmdIntermittent5 = 5,
        [pbr::OriginalName("WIPER_CMD_LOW")] WiperCmdLow = 6,
        [pbr::OriginalName("WIPER_CMD_HIGH")] WiperCmdHigh = 7,
      }

    }
    #endregion

  }

  public sealed partial class Brake_motor_rpt_3_72 : pb::IMessage<Brake_motor_rpt_3_72> {
    private static readonly pb::MessageParser<Brake_motor_rpt_3_72> _parser = new pb::MessageParser<Brake_motor_rpt_3_72>(() => new Brake_motor_rpt_3_72());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_motor_rpt_3_72> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_3_72() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_3_72(Brake_motor_rpt_3_72 other) : this() {
      torqueOutput_ = other.torqueOutput_;
      torqueInput_ = other.torqueInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_3_72 Clone() {
      return new Brake_motor_rpt_3_72(this);
    }

    /// <summary>Field number for the "torque_output" field.</summary>
    public const int TorqueOutputFieldNumber = 1;
    private double torqueOutput_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueOutput {
      get { return torqueOutput_; }
      set {
        torqueOutput_ = value;
      }
    }

    /// <summary>Field number for the "torque_input" field.</summary>
    public const int TorqueInputFieldNumber = 2;
    private double torqueInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueInput {
      get { return torqueInput_; }
      set {
        torqueInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_motor_rpt_3_72);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_motor_rpt_3_72 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TorqueOutput != other.TorqueOutput) return false;
      if (TorqueInput != other.TorqueInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TorqueOutput != 0D) hash ^= TorqueOutput.GetHashCode();
      if (TorqueInput != 0D) hash ^= TorqueInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TorqueOutput != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TorqueOutput);
      }
      if (TorqueInput != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TorqueInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TorqueOutput != 0D) {
        size += 1 + 8;
      }
      if (TorqueInput != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_motor_rpt_3_72 other) {
      if (other == null) {
        return;
      }
      if (other.TorqueOutput != 0D) {
        TorqueOutput = other.TorqueOutput;
      }
      if (other.TorqueInput != 0D) {
        TorqueInput = other.TorqueInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TorqueOutput = input.ReadDouble();
            break;
          }
          case 17: {
            TorqueInput = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Gem : pb::IMessage<Gem> {
    private static readonly pb::MessageParser<Gem> _parser = new pb::MessageParser<Gem>(() => new Gem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisDetailReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gem(Gem other) : this() {
      GlobalRpt6A = other.globalRpt6A_ != null ? other.GlobalRpt6A.Clone() : null;
      BrakeCmd6B = other.brakeCmd6B_ != null ? other.BrakeCmd6B.Clone() : null;
      BrakeRpt6C = other.brakeRpt6C_ != null ? other.BrakeRpt6C.Clone() : null;
      SteeringCmd6D = other.steeringCmd6D_ != null ? other.SteeringCmd6D.Clone() : null;
      SteeringRpt16E = other.steeringRpt16E_ != null ? other.SteeringRpt16E.Clone() : null;
      WheelSpeedRpt7A = other.wheelSpeedRpt7A_ != null ? other.WheelSpeedRpt7A.Clone() : null;
      DateTimeRpt83 = other.dateTimeRpt83_ != null ? other.DateTimeRpt83.Clone() : null;
      BrakeMotorRpt170 = other.brakeMotorRpt170_ != null ? other.BrakeMotorRpt170.Clone() : null;
      HeadlightRpt77 = other.headlightRpt77_ != null ? other.HeadlightRpt77.Clone() : null;
      AccelRpt68 = other.accelRpt68_ != null ? other.AccelRpt68.Clone() : null;
      SteeringMotorRpt375 = other.steeringMotorRpt375_ != null ? other.SteeringMotorRpt375.Clone() : null;
      TurnCmd63 = other.turnCmd63_ != null ? other.TurnCmd63.Clone() : null;
      TurnRpt64 = other.turnRpt64_ != null ? other.TurnRpt64.Clone() : null;
      ShiftCmd65 = other.shiftCmd65_ != null ? other.ShiftCmd65.Clone() : null;
      ShiftRpt66 = other.shiftRpt66_ != null ? other.ShiftRpt66.Clone() : null;
      AccelCmd67 = other.accelCmd67_ != null ? other.AccelCmd67.Clone() : null;
      LatLonHeadingRpt82 = other.latLonHeadingRpt82_ != null ? other.LatLonHeadingRpt82.Clone() : null;
      GlobalCmd69 = other.globalCmd69_ != null ? other.GlobalCmd69.Clone() : null;
      ParkingBrakeStatusRpt80 = other.parkingBrakeStatusRpt80_ != null ? other.ParkingBrakeStatusRpt80.Clone() : null;
      YawRateRpt81 = other.yawRateRpt81_ != null ? other.YawRateRpt81.Clone() : null;
      HornRpt79 = other.hornRpt79_ != null ? other.HornRpt79.Clone() : null;
      HornCmd78 = other.hornCmd78_ != null ? other.HornCmd78.Clone() : null;
      WiperRpt91 = other.wiperRpt91_ != null ? other.WiperRpt91.Clone() : null;
      VehicleSpeedRpt6F = other.vehicleSpeedRpt6F_ != null ? other.VehicleSpeedRpt6F.Clone() : null;
      HeadlightCmd76 = other.headlightCmd76_ != null ? other.HeadlightCmd76.Clone() : null;
      SteeringMotorRpt274 = other.steeringMotorRpt274_ != null ? other.SteeringMotorRpt274.Clone() : null;
      BrakeMotorRpt271 = other.brakeMotorRpt271_ != null ? other.BrakeMotorRpt271.Clone() : null;
      SteeringMotorRpt173 = other.steeringMotorRpt173_ != null ? other.SteeringMotorRpt173.Clone() : null;
      WiperCmd90 = other.wiperCmd90_ != null ? other.WiperCmd90.Clone() : null;
      BrakeMotorRpt372 = other.brakeMotorRpt372_ != null ? other.BrakeMotorRpt372.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gem Clone() {
      return new Gem(this);
    }

    /// <summary>Field number for the "global_rpt_6a" field.</summary>
    public const int GlobalRpt6AFieldNumber = 1;
    private global::Apollo.Canbus.Global_rpt_6a globalRpt6A_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_6a GlobalRpt6A {
      get { return globalRpt6A_; }
      set {
        globalRpt6A_ = value;
      }
    }

    /// <summary>Field number for the "brake_cmd_6b" field.</summary>
    public const int BrakeCmd6BFieldNumber = 2;
    private global::Apollo.Canbus.Brake_cmd_6b brakeCmd6B_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_cmd_6b BrakeCmd6B {
      get { return brakeCmd6B_; }
      set {
        brakeCmd6B_ = value;
      }
    }

    /// <summary>Field number for the "brake_rpt_6c" field.</summary>
    public const int BrakeRpt6CFieldNumber = 3;
    private global::Apollo.Canbus.Brake_rpt_6c brakeRpt6C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_rpt_6c BrakeRpt6C {
      get { return brakeRpt6C_; }
      set {
        brakeRpt6C_ = value;
      }
    }

    /// <summary>Field number for the "steering_cmd_6d" field.</summary>
    public const int SteeringCmd6DFieldNumber = 4;
    private global::Apollo.Canbus.Steering_cmd_6d steeringCmd6D_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_cmd_6d SteeringCmd6D {
      get { return steeringCmd6D_; }
      set {
        steeringCmd6D_ = value;
      }
    }

    /// <summary>Field number for the "steering_rpt_1_6e" field.</summary>
    public const int SteeringRpt16EFieldNumber = 5;
    private global::Apollo.Canbus.Steering_rpt_1_6e steeringRpt16E_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_rpt_1_6e SteeringRpt16E {
      get { return steeringRpt16E_; }
      set {
        steeringRpt16E_ = value;
      }
    }

    /// <summary>Field number for the "wheel_speed_rpt_7a" field.</summary>
    public const int WheelSpeedRpt7AFieldNumber = 6;
    private global::Apollo.Canbus.Wheel_speed_rpt_7a wheelSpeedRpt7A_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wheel_speed_rpt_7a WheelSpeedRpt7A {
      get { return wheelSpeedRpt7A_; }
      set {
        wheelSpeedRpt7A_ = value;
      }
    }

    /// <summary>Field number for the "date_time_rpt_83" field.</summary>
    public const int DateTimeRpt83FieldNumber = 7;
    private global::Apollo.Canbus.Date_time_rpt_83 dateTimeRpt83_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Date_time_rpt_83 DateTimeRpt83 {
      get { return dateTimeRpt83_; }
      set {
        dateTimeRpt83_ = value;
      }
    }

    /// <summary>Field number for the "brake_motor_rpt_1_70" field.</summary>
    public const int BrakeMotorRpt170FieldNumber = 8;
    private global::Apollo.Canbus.Brake_motor_rpt_1_70 brakeMotorRpt170_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_motor_rpt_1_70 BrakeMotorRpt170 {
      get { return brakeMotorRpt170_; }
      set {
        brakeMotorRpt170_ = value;
      }
    }

    /// <summary>Field number for the "headlight_rpt_77" field.</summary>
    public const int HeadlightRpt77FieldNumber = 9;
    private global::Apollo.Canbus.Headlight_rpt_77 headlightRpt77_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_77 HeadlightRpt77 {
      get { return headlightRpt77_; }
      set {
        headlightRpt77_ = value;
      }
    }

    /// <summary>Field number for the "accel_rpt_68" field.</summary>
    public const int AccelRpt68FieldNumber = 10;
    private global::Apollo.Canbus.Accel_rpt_68 accelRpt68_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Accel_rpt_68 AccelRpt68 {
      get { return accelRpt68_; }
      set {
        accelRpt68_ = value;
      }
    }

    /// <summary>Field number for the "steering_motor_rpt_3_75" field.</summary>
    public const int SteeringMotorRpt375FieldNumber = 11;
    private global::Apollo.Canbus.Steering_motor_rpt_3_75 steeringMotorRpt375_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_motor_rpt_3_75 SteeringMotorRpt375 {
      get { return steeringMotorRpt375_; }
      set {
        steeringMotorRpt375_ = value;
      }
    }

    /// <summary>Field number for the "turn_cmd_63" field.</summary>
    public const int TurnCmd63FieldNumber = 12;
    private global::Apollo.Canbus.Turn_cmd_63 turnCmd63_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_cmd_63 TurnCmd63 {
      get { return turnCmd63_; }
      set {
        turnCmd63_ = value;
      }
    }

    /// <summary>Field number for the "turn_rpt_64" field.</summary>
    public const int TurnRpt64FieldNumber = 13;
    private global::Apollo.Canbus.Turn_rpt_64 turnRpt64_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_64 TurnRpt64 {
      get { return turnRpt64_; }
      set {
        turnRpt64_ = value;
      }
    }

    /// <summary>Field number for the "shift_cmd_65" field.</summary>
    public const int ShiftCmd65FieldNumber = 14;
    private global::Apollo.Canbus.Shift_cmd_65 shiftCmd65_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_cmd_65 ShiftCmd65 {
      get { return shiftCmd65_; }
      set {
        shiftCmd65_ = value;
      }
    }

    /// <summary>Field number for the "shift_rpt_66" field.</summary>
    public const int ShiftRpt66FieldNumber = 15;
    private global::Apollo.Canbus.Shift_rpt_66 shiftRpt66_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_66 ShiftRpt66 {
      get { return shiftRpt66_; }
      set {
        shiftRpt66_ = value;
      }
    }

    /// <summary>Field number for the "accel_cmd_67" field.</summary>
    public const int AccelCmd67FieldNumber = 16;
    private global::Apollo.Canbus.Accel_cmd_67 accelCmd67_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Accel_cmd_67 AccelCmd67 {
      get { return accelCmd67_; }
      set {
        accelCmd67_ = value;
      }
    }

    /// <summary>Field number for the "lat_lon_heading_rpt_82" field.</summary>
    public const int LatLonHeadingRpt82FieldNumber = 17;
    private global::Apollo.Canbus.Lat_lon_heading_rpt_82 latLonHeadingRpt82_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Lat_lon_heading_rpt_82 LatLonHeadingRpt82 {
      get { return latLonHeadingRpt82_; }
      set {
        latLonHeadingRpt82_ = value;
      }
    }

    /// <summary>Field number for the "global_cmd_69" field.</summary>
    public const int GlobalCmd69FieldNumber = 18;
    private global::Apollo.Canbus.Global_cmd_69 globalCmd69_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_cmd_69 GlobalCmd69 {
      get { return globalCmd69_; }
      set {
        globalCmd69_ = value;
      }
    }

    /// <summary>Field number for the "parking_brake_status_rpt_80" field.</summary>
    public const int ParkingBrakeStatusRpt80FieldNumber = 19;
    private global::Apollo.Canbus.Parking_brake_status_rpt_80 parkingBrakeStatusRpt80_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Parking_brake_status_rpt_80 ParkingBrakeStatusRpt80 {
      get { return parkingBrakeStatusRpt80_; }
      set {
        parkingBrakeStatusRpt80_ = value;
      }
    }

    /// <summary>Field number for the "yaw_rate_rpt_81" field.</summary>
    public const int YawRateRpt81FieldNumber = 20;
    private global::Apollo.Canbus.Yaw_rate_rpt_81 yawRateRpt81_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Yaw_rate_rpt_81 YawRateRpt81 {
      get { return yawRateRpt81_; }
      set {
        yawRateRpt81_ = value;
      }
    }

    /// <summary>Field number for the "horn_rpt_79" field.</summary>
    public const int HornRpt79FieldNumber = 21;
    private global::Apollo.Canbus.Horn_rpt_79 hornRpt79_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_79 HornRpt79 {
      get { return hornRpt79_; }
      set {
        hornRpt79_ = value;
      }
    }

    /// <summary>Field number for the "horn_cmd_78" field.</summary>
    public const int HornCmd78FieldNumber = 22;
    private global::Apollo.Canbus.Horn_cmd_78 hornCmd78_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_cmd_78 HornCmd78 {
      get { return hornCmd78_; }
      set {
        hornCmd78_ = value;
      }
    }

    /// <summary>Field number for the "wiper_rpt_91" field.</summary>
    public const int WiperRpt91FieldNumber = 23;
    private global::Apollo.Canbus.Wiper_rpt_91 wiperRpt91_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_91 WiperRpt91 {
      get { return wiperRpt91_; }
      set {
        wiperRpt91_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_speed_rpt_6f" field.</summary>
    public const int VehicleSpeedRpt6FFieldNumber = 24;
    private global::Apollo.Canbus.Vehicle_speed_rpt_6f vehicleSpeedRpt6F_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Vehicle_speed_rpt_6f VehicleSpeedRpt6F {
      get { return vehicleSpeedRpt6F_; }
      set {
        vehicleSpeedRpt6F_ = value;
      }
    }

    /// <summary>Field number for the "headlight_cmd_76" field.</summary>
    public const int HeadlightCmd76FieldNumber = 25;
    private global::Apollo.Canbus.Headlight_cmd_76 headlightCmd76_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_cmd_76 HeadlightCmd76 {
      get { return headlightCmd76_; }
      set {
        headlightCmd76_ = value;
      }
    }

    /// <summary>Field number for the "steering_motor_rpt_2_74" field.</summary>
    public const int SteeringMotorRpt274FieldNumber = 26;
    private global::Apollo.Canbus.Steering_motor_rpt_2_74 steeringMotorRpt274_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_motor_rpt_2_74 SteeringMotorRpt274 {
      get { return steeringMotorRpt274_; }
      set {
        steeringMotorRpt274_ = value;
      }
    }

    /// <summary>Field number for the "brake_motor_rpt_2_71" field.</summary>
    public const int BrakeMotorRpt271FieldNumber = 27;
    private global::Apollo.Canbus.Brake_motor_rpt_2_71 brakeMotorRpt271_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_motor_rpt_2_71 BrakeMotorRpt271 {
      get { return brakeMotorRpt271_; }
      set {
        brakeMotorRpt271_ = value;
      }
    }

    /// <summary>Field number for the "steering_motor_rpt_1_73" field.</summary>
    public const int SteeringMotorRpt173FieldNumber = 28;
    private global::Apollo.Canbus.Steering_motor_rpt_1_73 steeringMotorRpt173_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_motor_rpt_1_73 SteeringMotorRpt173 {
      get { return steeringMotorRpt173_; }
      set {
        steeringMotorRpt173_ = value;
      }
    }

    /// <summary>Field number for the "wiper_cmd_90" field.</summary>
    public const int WiperCmd90FieldNumber = 29;
    private global::Apollo.Canbus.Wiper_cmd_90 wiperCmd90_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_cmd_90 WiperCmd90 {
      get { return wiperCmd90_; }
      set {
        wiperCmd90_ = value;
      }
    }

    /// <summary>Field number for the "brake_motor_rpt_3_72" field.</summary>
    public const int BrakeMotorRpt372FieldNumber = 30;
    private global::Apollo.Canbus.Brake_motor_rpt_3_72 brakeMotorRpt372_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_motor_rpt_3_72 BrakeMotorRpt372 {
      get { return brakeMotorRpt372_; }
      set {
        brakeMotorRpt372_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GlobalRpt6A, other.GlobalRpt6A)) return false;
      if (!object.Equals(BrakeCmd6B, other.BrakeCmd6B)) return false;
      if (!object.Equals(BrakeRpt6C, other.BrakeRpt6C)) return false;
      if (!object.Equals(SteeringCmd6D, other.SteeringCmd6D)) return false;
      if (!object.Equals(SteeringRpt16E, other.SteeringRpt16E)) return false;
      if (!object.Equals(WheelSpeedRpt7A, other.WheelSpeedRpt7A)) return false;
      if (!object.Equals(DateTimeRpt83, other.DateTimeRpt83)) return false;
      if (!object.Equals(BrakeMotorRpt170, other.BrakeMotorRpt170)) return false;
      if (!object.Equals(HeadlightRpt77, other.HeadlightRpt77)) return false;
      if (!object.Equals(AccelRpt68, other.AccelRpt68)) return false;
      if (!object.Equals(SteeringMotorRpt375, other.SteeringMotorRpt375)) return false;
      if (!object.Equals(TurnCmd63, other.TurnCmd63)) return false;
      if (!object.Equals(TurnRpt64, other.TurnRpt64)) return false;
      if (!object.Equals(ShiftCmd65, other.ShiftCmd65)) return false;
      if (!object.Equals(ShiftRpt66, other.ShiftRpt66)) return false;
      if (!object.Equals(AccelCmd67, other.AccelCmd67)) return false;
      if (!object.Equals(LatLonHeadingRpt82, other.LatLonHeadingRpt82)) return false;
      if (!object.Equals(GlobalCmd69, other.GlobalCmd69)) return false;
      if (!object.Equals(ParkingBrakeStatusRpt80, other.ParkingBrakeStatusRpt80)) return false;
      if (!object.Equals(YawRateRpt81, other.YawRateRpt81)) return false;
      if (!object.Equals(HornRpt79, other.HornRpt79)) return false;
      if (!object.Equals(HornCmd78, other.HornCmd78)) return false;
      if (!object.Equals(WiperRpt91, other.WiperRpt91)) return false;
      if (!object.Equals(VehicleSpeedRpt6F, other.VehicleSpeedRpt6F)) return false;
      if (!object.Equals(HeadlightCmd76, other.HeadlightCmd76)) return false;
      if (!object.Equals(SteeringMotorRpt274, other.SteeringMotorRpt274)) return false;
      if (!object.Equals(BrakeMotorRpt271, other.BrakeMotorRpt271)) return false;
      if (!object.Equals(SteeringMotorRpt173, other.SteeringMotorRpt173)) return false;
      if (!object.Equals(WiperCmd90, other.WiperCmd90)) return false;
      if (!object.Equals(BrakeMotorRpt372, other.BrakeMotorRpt372)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (globalRpt6A_ != null) hash ^= GlobalRpt6A.GetHashCode();
      if (brakeCmd6B_ != null) hash ^= BrakeCmd6B.GetHashCode();
      if (brakeRpt6C_ != null) hash ^= BrakeRpt6C.GetHashCode();
      if (steeringCmd6D_ != null) hash ^= SteeringCmd6D.GetHashCode();
      if (steeringRpt16E_ != null) hash ^= SteeringRpt16E.GetHashCode();
      if (wheelSpeedRpt7A_ != null) hash ^= WheelSpeedRpt7A.GetHashCode();
      if (dateTimeRpt83_ != null) hash ^= DateTimeRpt83.GetHashCode();
      if (brakeMotorRpt170_ != null) hash ^= BrakeMotorRpt170.GetHashCode();
      if (headlightRpt77_ != null) hash ^= HeadlightRpt77.GetHashCode();
      if (accelRpt68_ != null) hash ^= AccelRpt68.GetHashCode();
      if (steeringMotorRpt375_ != null) hash ^= SteeringMotorRpt375.GetHashCode();
      if (turnCmd63_ != null) hash ^= TurnCmd63.GetHashCode();
      if (turnRpt64_ != null) hash ^= TurnRpt64.GetHashCode();
      if (shiftCmd65_ != null) hash ^= ShiftCmd65.GetHashCode();
      if (shiftRpt66_ != null) hash ^= ShiftRpt66.GetHashCode();
      if (accelCmd67_ != null) hash ^= AccelCmd67.GetHashCode();
      if (latLonHeadingRpt82_ != null) hash ^= LatLonHeadingRpt82.GetHashCode();
      if (globalCmd69_ != null) hash ^= GlobalCmd69.GetHashCode();
      if (parkingBrakeStatusRpt80_ != null) hash ^= ParkingBrakeStatusRpt80.GetHashCode();
      if (yawRateRpt81_ != null) hash ^= YawRateRpt81.GetHashCode();
      if (hornRpt79_ != null) hash ^= HornRpt79.GetHashCode();
      if (hornCmd78_ != null) hash ^= HornCmd78.GetHashCode();
      if (wiperRpt91_ != null) hash ^= WiperRpt91.GetHashCode();
      if (vehicleSpeedRpt6F_ != null) hash ^= VehicleSpeedRpt6F.GetHashCode();
      if (headlightCmd76_ != null) hash ^= HeadlightCmd76.GetHashCode();
      if (steeringMotorRpt274_ != null) hash ^= SteeringMotorRpt274.GetHashCode();
      if (brakeMotorRpt271_ != null) hash ^= BrakeMotorRpt271.GetHashCode();
      if (steeringMotorRpt173_ != null) hash ^= SteeringMotorRpt173.GetHashCode();
      if (wiperCmd90_ != null) hash ^= WiperCmd90.GetHashCode();
      if (brakeMotorRpt372_ != null) hash ^= BrakeMotorRpt372.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (globalRpt6A_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GlobalRpt6A);
      }
      if (brakeCmd6B_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BrakeCmd6B);
      }
      if (brakeRpt6C_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BrakeRpt6C);
      }
      if (steeringCmd6D_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SteeringCmd6D);
      }
      if (steeringRpt16E_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SteeringRpt16E);
      }
      if (wheelSpeedRpt7A_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WheelSpeedRpt7A);
      }
      if (dateTimeRpt83_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DateTimeRpt83);
      }
      if (brakeMotorRpt170_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BrakeMotorRpt170);
      }
      if (headlightRpt77_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(HeadlightRpt77);
      }
      if (accelRpt68_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AccelRpt68);
      }
      if (steeringMotorRpt375_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SteeringMotorRpt375);
      }
      if (turnCmd63_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TurnCmd63);
      }
      if (turnRpt64_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TurnRpt64);
      }
      if (shiftCmd65_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ShiftCmd65);
      }
      if (shiftRpt66_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ShiftRpt66);
      }
      if (accelCmd67_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(AccelCmd67);
      }
      if (latLonHeadingRpt82_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(LatLonHeadingRpt82);
      }
      if (globalCmd69_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(GlobalCmd69);
      }
      if (parkingBrakeStatusRpt80_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ParkingBrakeStatusRpt80);
      }
      if (yawRateRpt81_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(YawRateRpt81);
      }
      if (hornRpt79_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(HornRpt79);
      }
      if (hornCmd78_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(HornCmd78);
      }
      if (wiperRpt91_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(WiperRpt91);
      }
      if (vehicleSpeedRpt6F_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(VehicleSpeedRpt6F);
      }
      if (headlightCmd76_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(HeadlightCmd76);
      }
      if (steeringMotorRpt274_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(SteeringMotorRpt274);
      }
      if (brakeMotorRpt271_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(BrakeMotorRpt271);
      }
      if (steeringMotorRpt173_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(SteeringMotorRpt173);
      }
      if (wiperCmd90_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(WiperCmd90);
      }
      if (brakeMotorRpt372_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(BrakeMotorRpt372);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (globalRpt6A_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlobalRpt6A);
      }
      if (brakeCmd6B_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrakeCmd6B);
      }
      if (brakeRpt6C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrakeRpt6C);
      }
      if (steeringCmd6D_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteeringCmd6D);
      }
      if (steeringRpt16E_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteeringRpt16E);
      }
      if (wheelSpeedRpt7A_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WheelSpeedRpt7A);
      }
      if (dateTimeRpt83_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateTimeRpt83);
      }
      if (brakeMotorRpt170_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrakeMotorRpt170);
      }
      if (headlightRpt77_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeadlightRpt77);
      }
      if (accelRpt68_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccelRpt68);
      }
      if (steeringMotorRpt375_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteeringMotorRpt375);
      }
      if (turnCmd63_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnCmd63);
      }
      if (turnRpt64_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnRpt64);
      }
      if (shiftCmd65_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShiftCmd65);
      }
      if (shiftRpt66_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShiftRpt66);
      }
      if (accelCmd67_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccelCmd67);
      }
      if (latLonHeadingRpt82_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LatLonHeadingRpt82);
      }
      if (globalCmd69_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GlobalCmd69);
      }
      if (parkingBrakeStatusRpt80_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParkingBrakeStatusRpt80);
      }
      if (yawRateRpt81_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(YawRateRpt81);
      }
      if (hornRpt79_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HornRpt79);
      }
      if (hornCmd78_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HornCmd78);
      }
      if (wiperRpt91_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WiperRpt91);
      }
      if (vehicleSpeedRpt6F_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VehicleSpeedRpt6F);
      }
      if (headlightCmd76_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeadlightCmd76);
      }
      if (steeringMotorRpt274_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SteeringMotorRpt274);
      }
      if (brakeMotorRpt271_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeMotorRpt271);
      }
      if (steeringMotorRpt173_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SteeringMotorRpt173);
      }
      if (wiperCmd90_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WiperCmd90);
      }
      if (brakeMotorRpt372_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeMotorRpt372);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gem other) {
      if (other == null) {
        return;
      }
      if (other.globalRpt6A_ != null) {
        if (globalRpt6A_ == null) {
          globalRpt6A_ = new global::Apollo.Canbus.Global_rpt_6a();
        }
        GlobalRpt6A.MergeFrom(other.GlobalRpt6A);
      }
      if (other.brakeCmd6B_ != null) {
        if (brakeCmd6B_ == null) {
          brakeCmd6B_ = new global::Apollo.Canbus.Brake_cmd_6b();
        }
        BrakeCmd6B.MergeFrom(other.BrakeCmd6B);
      }
      if (other.brakeRpt6C_ != null) {
        if (brakeRpt6C_ == null) {
          brakeRpt6C_ = new global::Apollo.Canbus.Brake_rpt_6c();
        }
        BrakeRpt6C.MergeFrom(other.BrakeRpt6C);
      }
      if (other.steeringCmd6D_ != null) {
        if (steeringCmd6D_ == null) {
          steeringCmd6D_ = new global::Apollo.Canbus.Steering_cmd_6d();
        }
        SteeringCmd6D.MergeFrom(other.SteeringCmd6D);
      }
      if (other.steeringRpt16E_ != null) {
        if (steeringRpt16E_ == null) {
          steeringRpt16E_ = new global::Apollo.Canbus.Steering_rpt_1_6e();
        }
        SteeringRpt16E.MergeFrom(other.SteeringRpt16E);
      }
      if (other.wheelSpeedRpt7A_ != null) {
        if (wheelSpeedRpt7A_ == null) {
          wheelSpeedRpt7A_ = new global::Apollo.Canbus.Wheel_speed_rpt_7a();
        }
        WheelSpeedRpt7A.MergeFrom(other.WheelSpeedRpt7A);
      }
      if (other.dateTimeRpt83_ != null) {
        if (dateTimeRpt83_ == null) {
          dateTimeRpt83_ = new global::Apollo.Canbus.Date_time_rpt_83();
        }
        DateTimeRpt83.MergeFrom(other.DateTimeRpt83);
      }
      if (other.brakeMotorRpt170_ != null) {
        if (brakeMotorRpt170_ == null) {
          brakeMotorRpt170_ = new global::Apollo.Canbus.Brake_motor_rpt_1_70();
        }
        BrakeMotorRpt170.MergeFrom(other.BrakeMotorRpt170);
      }
      if (other.headlightRpt77_ != null) {
        if (headlightRpt77_ == null) {
          headlightRpt77_ = new global::Apollo.Canbus.Headlight_rpt_77();
        }
        HeadlightRpt77.MergeFrom(other.HeadlightRpt77);
      }
      if (other.accelRpt68_ != null) {
        if (accelRpt68_ == null) {
          accelRpt68_ = new global::Apollo.Canbus.Accel_rpt_68();
        }
        AccelRpt68.MergeFrom(other.AccelRpt68);
      }
      if (other.steeringMotorRpt375_ != null) {
        if (steeringMotorRpt375_ == null) {
          steeringMotorRpt375_ = new global::Apollo.Canbus.Steering_motor_rpt_3_75();
        }
        SteeringMotorRpt375.MergeFrom(other.SteeringMotorRpt375);
      }
      if (other.turnCmd63_ != null) {
        if (turnCmd63_ == null) {
          turnCmd63_ = new global::Apollo.Canbus.Turn_cmd_63();
        }
        TurnCmd63.MergeFrom(other.TurnCmd63);
      }
      if (other.turnRpt64_ != null) {
        if (turnRpt64_ == null) {
          turnRpt64_ = new global::Apollo.Canbus.Turn_rpt_64();
        }
        TurnRpt64.MergeFrom(other.TurnRpt64);
      }
      if (other.shiftCmd65_ != null) {
        if (shiftCmd65_ == null) {
          shiftCmd65_ = new global::Apollo.Canbus.Shift_cmd_65();
        }
        ShiftCmd65.MergeFrom(other.ShiftCmd65);
      }
      if (other.shiftRpt66_ != null) {
        if (shiftRpt66_ == null) {
          shiftRpt66_ = new global::Apollo.Canbus.Shift_rpt_66();
        }
        ShiftRpt66.MergeFrom(other.ShiftRpt66);
      }
      if (other.accelCmd67_ != null) {
        if (accelCmd67_ == null) {
          accelCmd67_ = new global::Apollo.Canbus.Accel_cmd_67();
        }
        AccelCmd67.MergeFrom(other.AccelCmd67);
      }
      if (other.latLonHeadingRpt82_ != null) {
        if (latLonHeadingRpt82_ == null) {
          latLonHeadingRpt82_ = new global::Apollo.Canbus.Lat_lon_heading_rpt_82();
        }
        LatLonHeadingRpt82.MergeFrom(other.LatLonHeadingRpt82);
      }
      if (other.globalCmd69_ != null) {
        if (globalCmd69_ == null) {
          globalCmd69_ = new global::Apollo.Canbus.Global_cmd_69();
        }
        GlobalCmd69.MergeFrom(other.GlobalCmd69);
      }
      if (other.parkingBrakeStatusRpt80_ != null) {
        if (parkingBrakeStatusRpt80_ == null) {
          parkingBrakeStatusRpt80_ = new global::Apollo.Canbus.Parking_brake_status_rpt_80();
        }
        ParkingBrakeStatusRpt80.MergeFrom(other.ParkingBrakeStatusRpt80);
      }
      if (other.yawRateRpt81_ != null) {
        if (yawRateRpt81_ == null) {
          yawRateRpt81_ = new global::Apollo.Canbus.Yaw_rate_rpt_81();
        }
        YawRateRpt81.MergeFrom(other.YawRateRpt81);
      }
      if (other.hornRpt79_ != null) {
        if (hornRpt79_ == null) {
          hornRpt79_ = new global::Apollo.Canbus.Horn_rpt_79();
        }
        HornRpt79.MergeFrom(other.HornRpt79);
      }
      if (other.hornCmd78_ != null) {
        if (hornCmd78_ == null) {
          hornCmd78_ = new global::Apollo.Canbus.Horn_cmd_78();
        }
        HornCmd78.MergeFrom(other.HornCmd78);
      }
      if (other.wiperRpt91_ != null) {
        if (wiperRpt91_ == null) {
          wiperRpt91_ = new global::Apollo.Canbus.Wiper_rpt_91();
        }
        WiperRpt91.MergeFrom(other.WiperRpt91);
      }
      if (other.vehicleSpeedRpt6F_ != null) {
        if (vehicleSpeedRpt6F_ == null) {
          vehicleSpeedRpt6F_ = new global::Apollo.Canbus.Vehicle_speed_rpt_6f();
        }
        VehicleSpeedRpt6F.MergeFrom(other.VehicleSpeedRpt6F);
      }
      if (other.headlightCmd76_ != null) {
        if (headlightCmd76_ == null) {
          headlightCmd76_ = new global::Apollo.Canbus.Headlight_cmd_76();
        }
        HeadlightCmd76.MergeFrom(other.HeadlightCmd76);
      }
      if (other.steeringMotorRpt274_ != null) {
        if (steeringMotorRpt274_ == null) {
          steeringMotorRpt274_ = new global::Apollo.Canbus.Steering_motor_rpt_2_74();
        }
        SteeringMotorRpt274.MergeFrom(other.SteeringMotorRpt274);
      }
      if (other.brakeMotorRpt271_ != null) {
        if (brakeMotorRpt271_ == null) {
          brakeMotorRpt271_ = new global::Apollo.Canbus.Brake_motor_rpt_2_71();
        }
        BrakeMotorRpt271.MergeFrom(other.BrakeMotorRpt271);
      }
      if (other.steeringMotorRpt173_ != null) {
        if (steeringMotorRpt173_ == null) {
          steeringMotorRpt173_ = new global::Apollo.Canbus.Steering_motor_rpt_1_73();
        }
        SteeringMotorRpt173.MergeFrom(other.SteeringMotorRpt173);
      }
      if (other.wiperCmd90_ != null) {
        if (wiperCmd90_ == null) {
          wiperCmd90_ = new global::Apollo.Canbus.Wiper_cmd_90();
        }
        WiperCmd90.MergeFrom(other.WiperCmd90);
      }
      if (other.brakeMotorRpt372_ != null) {
        if (brakeMotorRpt372_ == null) {
          brakeMotorRpt372_ = new global::Apollo.Canbus.Brake_motor_rpt_3_72();
        }
        BrakeMotorRpt372.MergeFrom(other.BrakeMotorRpt372);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (globalRpt6A_ == null) {
              globalRpt6A_ = new global::Apollo.Canbus.Global_rpt_6a();
            }
            input.ReadMessage(globalRpt6A_);
            break;
          }
          case 18: {
            if (brakeCmd6B_ == null) {
              brakeCmd6B_ = new global::Apollo.Canbus.Brake_cmd_6b();
            }
            input.ReadMessage(brakeCmd6B_);
            break;
          }
          case 26: {
            if (brakeRpt6C_ == null) {
              brakeRpt6C_ = new global::Apollo.Canbus.Brake_rpt_6c();
            }
            input.ReadMessage(brakeRpt6C_);
            break;
          }
          case 34: {
            if (steeringCmd6D_ == null) {
              steeringCmd6D_ = new global::Apollo.Canbus.Steering_cmd_6d();
            }
            input.ReadMessage(steeringCmd6D_);
            break;
          }
          case 42: {
            if (steeringRpt16E_ == null) {
              steeringRpt16E_ = new global::Apollo.Canbus.Steering_rpt_1_6e();
            }
            input.ReadMessage(steeringRpt16E_);
            break;
          }
          case 50: {
            if (wheelSpeedRpt7A_ == null) {
              wheelSpeedRpt7A_ = new global::Apollo.Canbus.Wheel_speed_rpt_7a();
            }
            input.ReadMessage(wheelSpeedRpt7A_);
            break;
          }
          case 58: {
            if (dateTimeRpt83_ == null) {
              dateTimeRpt83_ = new global::Apollo.Canbus.Date_time_rpt_83();
            }
            input.ReadMessage(dateTimeRpt83_);
            break;
          }
          case 66: {
            if (brakeMotorRpt170_ == null) {
              brakeMotorRpt170_ = new global::Apollo.Canbus.Brake_motor_rpt_1_70();
            }
            input.ReadMessage(brakeMotorRpt170_);
            break;
          }
          case 74: {
            if (headlightRpt77_ == null) {
              headlightRpt77_ = new global::Apollo.Canbus.Headlight_rpt_77();
            }
            input.ReadMessage(headlightRpt77_);
            break;
          }
          case 82: {
            if (accelRpt68_ == null) {
              accelRpt68_ = new global::Apollo.Canbus.Accel_rpt_68();
            }
            input.ReadMessage(accelRpt68_);
            break;
          }
          case 90: {
            if (steeringMotorRpt375_ == null) {
              steeringMotorRpt375_ = new global::Apollo.Canbus.Steering_motor_rpt_3_75();
            }
            input.ReadMessage(steeringMotorRpt375_);
            break;
          }
          case 98: {
            if (turnCmd63_ == null) {
              turnCmd63_ = new global::Apollo.Canbus.Turn_cmd_63();
            }
            input.ReadMessage(turnCmd63_);
            break;
          }
          case 106: {
            if (turnRpt64_ == null) {
              turnRpt64_ = new global::Apollo.Canbus.Turn_rpt_64();
            }
            input.ReadMessage(turnRpt64_);
            break;
          }
          case 114: {
            if (shiftCmd65_ == null) {
              shiftCmd65_ = new global::Apollo.Canbus.Shift_cmd_65();
            }
            input.ReadMessage(shiftCmd65_);
            break;
          }
          case 122: {
            if (shiftRpt66_ == null) {
              shiftRpt66_ = new global::Apollo.Canbus.Shift_rpt_66();
            }
            input.ReadMessage(shiftRpt66_);
            break;
          }
          case 130: {
            if (accelCmd67_ == null) {
              accelCmd67_ = new global::Apollo.Canbus.Accel_cmd_67();
            }
            input.ReadMessage(accelCmd67_);
            break;
          }
          case 138: {
            if (latLonHeadingRpt82_ == null) {
              latLonHeadingRpt82_ = new global::Apollo.Canbus.Lat_lon_heading_rpt_82();
            }
            input.ReadMessage(latLonHeadingRpt82_);
            break;
          }
          case 146: {
            if (globalCmd69_ == null) {
              globalCmd69_ = new global::Apollo.Canbus.Global_cmd_69();
            }
            input.ReadMessage(globalCmd69_);
            break;
          }
          case 154: {
            if (parkingBrakeStatusRpt80_ == null) {
              parkingBrakeStatusRpt80_ = new global::Apollo.Canbus.Parking_brake_status_rpt_80();
            }
            input.ReadMessage(parkingBrakeStatusRpt80_);
            break;
          }
          case 162: {
            if (yawRateRpt81_ == null) {
              yawRateRpt81_ = new global::Apollo.Canbus.Yaw_rate_rpt_81();
            }
            input.ReadMessage(yawRateRpt81_);
            break;
          }
          case 170: {
            if (hornRpt79_ == null) {
              hornRpt79_ = new global::Apollo.Canbus.Horn_rpt_79();
            }
            input.ReadMessage(hornRpt79_);
            break;
          }
          case 178: {
            if (hornCmd78_ == null) {
              hornCmd78_ = new global::Apollo.Canbus.Horn_cmd_78();
            }
            input.ReadMessage(hornCmd78_);
            break;
          }
          case 186: {
            if (wiperRpt91_ == null) {
              wiperRpt91_ = new global::Apollo.Canbus.Wiper_rpt_91();
            }
            input.ReadMessage(wiperRpt91_);
            break;
          }
          case 194: {
            if (vehicleSpeedRpt6F_ == null) {
              vehicleSpeedRpt6F_ = new global::Apollo.Canbus.Vehicle_speed_rpt_6f();
            }
            input.ReadMessage(vehicleSpeedRpt6F_);
            break;
          }
          case 202: {
            if (headlightCmd76_ == null) {
              headlightCmd76_ = new global::Apollo.Canbus.Headlight_cmd_76();
            }
            input.ReadMessage(headlightCmd76_);
            break;
          }
          case 210: {
            if (steeringMotorRpt274_ == null) {
              steeringMotorRpt274_ = new global::Apollo.Canbus.Steering_motor_rpt_2_74();
            }
            input.ReadMessage(steeringMotorRpt274_);
            break;
          }
          case 218: {
            if (brakeMotorRpt271_ == null) {
              brakeMotorRpt271_ = new global::Apollo.Canbus.Brake_motor_rpt_2_71();
            }
            input.ReadMessage(brakeMotorRpt271_);
            break;
          }
          case 226: {
            if (steeringMotorRpt173_ == null) {
              steeringMotorRpt173_ = new global::Apollo.Canbus.Steering_motor_rpt_1_73();
            }
            input.ReadMessage(steeringMotorRpt173_);
            break;
          }
          case 234: {
            if (wiperCmd90_ == null) {
              wiperCmd90_ = new global::Apollo.Canbus.Wiper_cmd_90();
            }
            input.ReadMessage(wiperCmd90_);
            break;
          }
          case 242: {
            if (brakeMotorRpt372_ == null) {
              brakeMotorRpt372_ = new global::Apollo.Canbus.Brake_motor_rpt_3_72();
            }
            input.ReadMessage(brakeMotorRpt372_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
