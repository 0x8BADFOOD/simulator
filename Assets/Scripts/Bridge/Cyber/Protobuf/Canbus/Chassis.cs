// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Canbus {

  /// <summary>Holder for reflection information generated from modules/canbus/proto/chassis.proto</summary>
  public static partial class ChassisReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/canbus/proto/chassis.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChassisReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJtb2R1bGVzL2NhbmJ1cy9wcm90by9jaGFzc2lzLnByb3RvEg1hcG9sbG8u",
            "Y2FuYnVzGiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFkZXIucHJvdG8aKW1v",
            "ZHVsZXMvY29tbW9uL3Byb3RvL3ZlaGljbGVfc2lnbmFsLnByb3RvGiZtb2R1",
            "bGVzL2NvbW1vbi9wcm90by9kcml2ZV9zdGF0ZS5wcm90bxojbW9kdWxlcy9j",
            "b21tb24vcHJvdG8vZ2VvbWV0cnkucHJvdG8iywoKB0NoYXNzaXMSFgoOZW5n",
            "aW5lX3N0YXJ0ZWQYAyABKAgSEgoKZW5naW5lX3JwbRgEIAEoAhIRCglzcGVl",
            "ZF9tcHMYBSABKAISEgoKb2RvbWV0ZXJfbRgGIAEoAhIUCgxmdWVsX3Jhbmdl",
            "X20YByABKAUSGwoTdGhyb3R0bGVfcGVyY2VudGFnZRgIIAEoAhIYChBicmFr",
            "ZV9wZXJjZW50YWdlGAkgASgCEhsKE3N0ZWVyaW5nX3BlcmNlbnRhZ2UYCyAB",
            "KAISGgoSc3RlZXJpbmdfdG9ycXVlX25tGAwgASgCEhUKDXBhcmtpbmdfYnJh",
            "a2UYDSABKAgSGAoQaGlnaF9iZWFtX3NpZ25hbBgOIAEoCBIXCg9sb3dfYmVh",
            "bV9zaWduYWwYDyABKAgSGAoQbGVmdF90dXJuX3NpZ25hbBgQIAEoCBIZChFy",
            "aWdodF90dXJuX3NpZ25hbBgRIAEoCBIMCgRob3JuGBIgASgIEg0KBXdpcGVy",
            "GBMgASgIEhgKEGRpc2VuZ2FnZV9zdGF0dXMYFCABKAgSOAoMZHJpdmluZ19t",
            "b2RlGBUgASgOMiIuYXBvbGxvLmNhbmJ1cy5DaGFzc2lzLkRyaXZpbmdNb2Rl",
            "EjQKCmVycm9yX2NvZGUYFiABKA4yIC5hcG9sbG8uY2FuYnVzLkNoYXNzaXMu",
            "RXJyb3JDb2RlEjoKDWdlYXJfbG9jYXRpb24YFyABKA4yIy5hcG9sbG8uY2Fu",
            "YnVzLkNoYXNzaXMuR2VhclBvc2l0aW9uEhoKEnN0ZWVyaW5nX3RpbWVzdGFt",
            "cBgYIAEoARIlCgZoZWFkZXIYGSABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRl",
            "chIaChJjaGFzc2lzX2Vycm9yX21hc2sYGiABKAUSLAoGc2lnbmFsGBsgASgL",
            "MhwuYXBvbGxvLmNvbW1vbi5WZWhpY2xlU2lnbmFsEi4KC2NoYXNzaXNfZ3Bz",
            "GBwgASgLMhkuYXBvbGxvLmNhbmJ1cy5DaGFzc2lzR1BTEjIKDWVuZ2FnZV9h",
            "ZHZpY2UYHSABKAsyGy5hcG9sbG8uY29tbW9uLkVuZ2FnZUFkdmljZRIuCgt3",
            "aGVlbF9zcGVlZBgeIAEoCzIZLmFwb2xsby5jYW5idXMuV2hlZWxTcGVlZBIp",
            "CghzdXJyb3VuZBgfIAEoCzIXLmFwb2xsby5jYW5idXMuU3Vycm91bmQSJwoH",
            "bGljZW5zZRggIAEoCzIWLmFwb2xsby5jYW5idXMuTGljZW5zZSJ5CgtEcml2",
            "aW5nTW9kZRITCg9DT01QTEVURV9NQU5VQUwQABIXChNDT01QTEVURV9BVVRP",
            "X0RSSVZFEAESEwoPQVVUT19TVEVFUl9PTkxZEAISEwoPQVVUT19TUEVFRF9P",
            "TkxZEAMSEgoORU1FUkdFTkNZX01PREUQBCKOAQoJRXJyb3JDb2RlEgwKCE5P",
            "X0VSUk9SEAASFQoRQ01EX05PVF9JTl9QRVJJT0QQARIRCg1DSEFTU0lTX0VS",
            "Uk9SEAISFwoTTUFOVUFMX0lOVEVSVkVOVElPThADEh0KGUNIQVNTSVNfQ0FO",
            "X05PVF9JTl9QRVJJT0QQBBIRCg1VTktOT1dOX0VSUk9SEAUigwEKDEdlYXJQ",
            "b3NpdGlvbhIQCgxHRUFSX05FVVRSQUwQABIOCgpHRUFSX0RSSVZFEAESEAoM",
            "R0VBUl9SRVZFUlNFEAISEAoMR0VBUl9QQVJLSU5HEAMSDAoIR0VBUl9MT1cQ",
            "BBIQCgxHRUFSX0lOVkFMSUQQBRINCglHRUFSX05PTkUQBiKJAwoKQ2hhc3Np",
            "c0dQUxIQCghsYXRpdHVkZRgBIAEoARIRCglsb25naXR1ZGUYAiABKAESEQoJ",
            "Z3BzX3ZhbGlkGAMgASgIEgwKBHllYXIYBCABKAUSDQoFbW9udGgYBSABKAUS",
            "CwoDZGF5GAYgASgFEg0KBWhvdXJzGAcgASgFEg8KB21pbnV0ZXMYCCABKAUS",
            "DwoHc2Vjb25kcxgJIAEoBRIZChFjb21wYXNzX2RpcmVjdGlvbhgKIAEoARIM",
            "CgRwZG9wGAsgASgBEhQKDGlzX2dwc19mYXVsdBgMIAEoCBITCgtpc19pbmZl",
            "cnJlZBgNIAEoCBIQCghhbHRpdHVkZRgOIAEoARIPCgdoZWFkaW5nGA8gASgB",
            "EgwKBGhkb3AYECABKAESDAoEdmRvcBgRIAEoARIqCgdxdWFsaXR5GBIgASgO",
            "MhkuYXBvbGxvLmNhbmJ1cy5HcHNRdWFsaXR5EhYKDm51bV9zYXRlbGxpdGVz",
            "GBMgASgFEhEKCWdwc19zcGVlZBgUIAEoASLCBAoKV2hlZWxTcGVlZBIdChVp",
            "c193aGVlbF9zcGRfcnJfdmFsaWQYASABKAgSRAoSd2hlZWxfZGlyZWN0aW9u",
            "X3JyGAIgASgOMiguYXBvbGxvLmNhbmJ1cy5XaGVlbFNwZWVkLldoZWVsU3Bl",
            "ZWRUeXBlEhQKDHdoZWVsX3NwZF9ychgDIAEoARIdChVpc193aGVlbF9zcGRf",
            "cmxfdmFsaWQYBCABKAgSRAoSd2hlZWxfZGlyZWN0aW9uX3JsGAUgASgOMigu",
            "YXBvbGxvLmNhbmJ1cy5XaGVlbFNwZWVkLldoZWVsU3BlZWRUeXBlEhQKDHdo",
            "ZWVsX3NwZF9ybBgGIAEoARIdChVpc193aGVlbF9zcGRfZnJfdmFsaWQYByAB",
            "KAgSRAoSd2hlZWxfZGlyZWN0aW9uX2ZyGAggASgOMiguYXBvbGxvLmNhbmJ1",
            "cy5XaGVlbFNwZWVkLldoZWVsU3BlZWRUeXBlEhQKDHdoZWVsX3NwZF9mchgJ",
            "IAEoARIdChVpc193aGVlbF9zcGRfZmxfdmFsaWQYCiABKAgSRAoSd2hlZWxf",
            "ZGlyZWN0aW9uX2ZsGAsgASgOMiguYXBvbGxvLmNhbmJ1cy5XaGVlbFNwZWVk",
            "LldoZWVsU3BlZWRUeXBlEhQKDHdoZWVsX3NwZF9mbBgMIAEoASJICg5XaGVl",
            "bFNwZWVkVHlwZRILCgdGT1JXQVJEEAASDAoIQkFDS1dBUkQQARIOCgpTVEFO",
            "RFNUSUxMEAISCwoHSU5WQUxJRBADInAKBVNvbmFyEg0KBXJhbmdlGAEgASgB",
            "EisKC3RyYW5zbGF0aW9uGAIgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNE",
            "EisKCHJvdGF0aW9uGAMgASgLMhkuYXBvbGxvLmNvbW1vbi5RdWF0ZXJuaW9u",
            "IuQECghTdXJyb3VuZBIgChhjcm9zc190cmFmZmljX2FsZXJ0X2xlZnQYASAB",
            "KAgSKAogY3Jvc3NfdHJhZmZpY19hbGVydF9sZWZ0X2VuYWJsZWQYAiABKAgS",
            "HQoVYmxpbmRfc3BvdF9sZWZ0X2FsZXJ0GAMgASgIEiUKHWJsaW5kX3Nwb3Rf",
            "bGVmdF9hbGVydF9lbmFibGVkGAQgASgIEiEKGWNyb3NzX3RyYWZmaWNfYWxl",
            "cnRfcmlnaHQYBSABKAgSKQohY3Jvc3NfdHJhZmZpY19hbGVydF9yaWdodF9l",
            "bmFibGVkGAYgASgIEh4KFmJsaW5kX3Nwb3RfcmlnaHRfYWxlcnQYByABKAgS",
            "JgoeYmxpbmRfc3BvdF9yaWdodF9hbGVydF9lbmFibGVkGAggASgIEg8KB3Nv",
            "bmFyMDAYCSABKAESDwoHc29uYXIwMRgKIAEoARIPCgdzb25hcjAyGAsgASgB",
            "Eg8KB3NvbmFyMDMYDCABKAESDwoHc29uYXIwNBgNIAEoARIPCgdzb25hcjA1",
            "GA4gASgBEg8KB3NvbmFyMDYYDyABKAESDwoHc29uYXIwNxgQIAEoARIPCgdz",
            "b25hcjA4GBEgASgBEg8KB3NvbmFyMDkYEiABKAESDwoHc29uYXIxMBgTIAEo",
            "ARIPCgdzb25hcjExGBQgASgBEhUKDXNvbmFyX2VuYWJsZWQYFSABKAgSEwoL",
            "c29uYXJfZmF1bHQYFiABKAgSEwoLc29uYXJfcmFuZ2UYFyADKAESIwoFc29u",
            "YXIYGCADKAsyFC5hcG9sbG8uY2FuYnVzLlNvbmFyIhYKB0xpY2Vuc2USCwoD",
            "dmluGAEgASgJKkEKCkdwc1F1YWxpdHkSCgoGRklYX05PEAASCgoGRklYXzJE",
            "EAESCgoGRklYXzNEEAISDwoLRklYX0lOVkFMSUQQA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.VehicleSignalReflection.Descriptor, global::Apollo.Common.DriveStateReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Canbus.GpsQuality), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Chassis), global::Apollo.Canbus.Chassis.Parser, new[]{ "EngineStarted", "EngineRpm", "SpeedMps", "OdometerM", "FuelRangeM", "ThrottlePercentage", "BrakePercentage", "SteeringPercentage", "SteeringTorqueNm", "ParkingBrake", "HighBeamSignal", "LowBeamSignal", "LeftTurnSignal", "RightTurnSignal", "Horn", "Wiper", "DisengageStatus", "DrivingMode", "ErrorCode", "GearLocation", "SteeringTimestamp", "Header", "ChassisErrorMask", "Signal", "ChassisGps", "EngageAdvice", "WheelSpeed", "Surround", "License" }, null, new[]{ typeof(global::Apollo.Canbus.Chassis.Types.DrivingMode), typeof(global::Apollo.Canbus.Chassis.Types.ErrorCode), typeof(global::Apollo.Canbus.Chassis.Types.GearPosition) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.ChassisGPS), global::Apollo.Canbus.ChassisGPS.Parser, new[]{ "Latitude", "Longitude", "GpsValid", "Year", "Month", "Day", "Hours", "Minutes", "Seconds", "CompassDirection", "Pdop", "IsGpsFault", "IsInferred", "Altitude", "Heading", "Hdop", "Vdop", "Quality", "NumSatellites", "GpsSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.WheelSpeed), global::Apollo.Canbus.WheelSpeed.Parser, new[]{ "IsWheelSpdRrValid", "WheelDirectionRr", "WheelSpdRr", "IsWheelSpdRlValid", "WheelDirectionRl", "WheelSpdRl", "IsWheelSpdFrValid", "WheelDirectionFr", "WheelSpdFr", "IsWheelSpdFlValid", "WheelDirectionFl", "WheelSpdFl" }, null, new[]{ typeof(global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Sonar), global::Apollo.Canbus.Sonar.Parser, new[]{ "Range", "Translation", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Surround), global::Apollo.Canbus.Surround.Parser, new[]{ "CrossTrafficAlertLeft", "CrossTrafficAlertLeftEnabled", "BlindSpotLeftAlert", "BlindSpotLeftAlertEnabled", "CrossTrafficAlertRight", "CrossTrafficAlertRightEnabled", "BlindSpotRightAlert", "BlindSpotRightAlertEnabled", "Sonar00", "Sonar01", "Sonar02", "Sonar03", "Sonar04", "Sonar05", "Sonar06", "Sonar07", "Sonar08", "Sonar09", "Sonar10", "Sonar11", "SonarEnabled", "SonarFault", "SonarRange", "Sonar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.License), global::Apollo.Canbus.License.Parser, new[]{ "Vin" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GpsQuality {
    [pbr::OriginalName("FIX_NO")] FixNo = 0,
    [pbr::OriginalName("FIX_2D")] Fix2D = 1,
    [pbr::OriginalName("FIX_3D")] Fix3D = 2,
    [pbr::OriginalName("FIX_INVALID")] FixInvalid = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// next id :31
  /// </summary>
  public sealed partial class Chassis : pb::IMessage<Chassis> {
    private static readonly pb::MessageParser<Chassis> _parser = new pb::MessageParser<Chassis>(() => new Chassis());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chassis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chassis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chassis(Chassis other) : this() {
      engineStarted_ = other.engineStarted_;
      engineRpm_ = other.engineRpm_;
      speedMps_ = other.speedMps_;
      odometerM_ = other.odometerM_;
      fuelRangeM_ = other.fuelRangeM_;
      throttlePercentage_ = other.throttlePercentage_;
      brakePercentage_ = other.brakePercentage_;
      steeringPercentage_ = other.steeringPercentage_;
      steeringTorqueNm_ = other.steeringTorqueNm_;
      parkingBrake_ = other.parkingBrake_;
      highBeamSignal_ = other.highBeamSignal_;
      lowBeamSignal_ = other.lowBeamSignal_;
      leftTurnSignal_ = other.leftTurnSignal_;
      rightTurnSignal_ = other.rightTurnSignal_;
      horn_ = other.horn_;
      wiper_ = other.wiper_;
      disengageStatus_ = other.disengageStatus_;
      drivingMode_ = other.drivingMode_;
      errorCode_ = other.errorCode_;
      gearLocation_ = other.gearLocation_;
      steeringTimestamp_ = other.steeringTimestamp_;
      Header = other.header_ != null ? other.Header.Clone() : null;
      chassisErrorMask_ = other.chassisErrorMask_;
      Signal = other.signal_ != null ? other.Signal.Clone() : null;
      ChassisGps = other.chassisGps_ != null ? other.ChassisGps.Clone() : null;
      EngageAdvice = other.engageAdvice_ != null ? other.EngageAdvice.Clone() : null;
      WheelSpeed = other.wheelSpeed_ != null ? other.WheelSpeed.Clone() : null;
      Surround = other.surround_ != null ? other.Surround.Clone() : null;
      License = other.license_ != null ? other.License.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chassis Clone() {
      return new Chassis(this);
    }

    /// <summary>Field number for the "engine_started" field.</summary>
    public const int EngineStartedFieldNumber = 3;
    private bool engineStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EngineStarted {
      get { return engineStarted_; }
      set {
        engineStarted_ = value;
      }
    }

    /// <summary>Field number for the "engine_rpm" field.</summary>
    public const int EngineRpmFieldNumber = 4;
    private float engineRpm_;
    /// <summary>
    /// Engine speed in RPM.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EngineRpm {
      get { return engineRpm_; }
      set {
        engineRpm_ = value;
      }
    }

    /// <summary>Field number for the "speed_mps" field.</summary>
    public const int SpeedMpsFieldNumber = 5;
    private float speedMps_;
    /// <summary>
    /// Vehicle Speed in meters per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedMps {
      get { return speedMps_; }
      set {
        speedMps_ = value;
      }
    }

    /// <summary>Field number for the "odometer_m" field.</summary>
    public const int OdometerMFieldNumber = 6;
    private float odometerM_;
    /// <summary>
    /// Vehicle odometer in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OdometerM {
      get { return odometerM_; }
      set {
        odometerM_ = value;
      }
    }

    /// <summary>Field number for the "fuel_range_m" field.</summary>
    public const int FuelRangeMFieldNumber = 7;
    private int fuelRangeM_;
    /// <summary>
    /// Fuel range in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FuelRangeM {
      get { return fuelRangeM_; }
      set {
        fuelRangeM_ = value;
      }
    }

    /// <summary>Field number for the "throttle_percentage" field.</summary>
    public const int ThrottlePercentageFieldNumber = 8;
    private float throttlePercentage_;
    /// <summary>
    /// Real throttle location in , ranging from 0 to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ThrottlePercentage {
      get { return throttlePercentage_; }
      set {
        throttlePercentage_ = value;
      }
    }

    /// <summary>Field number for the "brake_percentage" field.</summary>
    public const int BrakePercentageFieldNumber = 9;
    private float brakePercentage_;
    /// <summary>
    /// Real brake location in , ranging from 0 to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrakePercentage {
      get { return brakePercentage_; }
      set {
        brakePercentage_ = value;
      }
    }

    /// <summary>Field number for the "steering_percentage" field.</summary>
    public const int SteeringPercentageFieldNumber = 11;
    private float steeringPercentage_;
    /// <summary>
    /// Real gear location.
    /// int32 gear_location = 10; deprecated use enum replace this 
    /// Real steering location in , ranging from 0 to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SteeringPercentage {
      get { return steeringPercentage_; }
      set {
        steeringPercentage_ = value;
      }
    }

    /// <summary>Field number for the "steering_torque_nm" field.</summary>
    public const int SteeringTorqueNmFieldNumber = 12;
    private float steeringTorqueNm_;
    /// <summary>
    /// Applied steering torque in .
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SteeringTorqueNm {
      get { return steeringTorqueNm_; }
      set {
        steeringTorqueNm_ = value;
      }
    }

    /// <summary>Field number for the "parking_brake" field.</summary>
    public const int ParkingBrakeFieldNumber = 13;
    private bool parkingBrake_;
    /// <summary>
    /// Parking brake status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ParkingBrake {
      get { return parkingBrake_; }
      set {
        parkingBrake_ = value;
      }
    }

    /// <summary>Field number for the "high_beam_signal" field.</summary>
    public const int HighBeamSignalFieldNumber = 14;
    private bool highBeamSignal_;
    /// <summary>
    /// Light signals.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HighBeamSignal {
      get { return highBeamSignal_; }
      set {
        highBeamSignal_ = value;
      }
    }

    /// <summary>Field number for the "low_beam_signal" field.</summary>
    public const int LowBeamSignalFieldNumber = 15;
    private bool lowBeamSignal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowBeamSignal {
      get { return lowBeamSignal_; }
      set {
        lowBeamSignal_ = value;
      }
    }

    /// <summary>Field number for the "left_turn_signal" field.</summary>
    public const int LeftTurnSignalFieldNumber = 16;
    private bool leftTurnSignal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftTurnSignal {
      get { return leftTurnSignal_; }
      set {
        leftTurnSignal_ = value;
      }
    }

    /// <summary>Field number for the "right_turn_signal" field.</summary>
    public const int RightTurnSignalFieldNumber = 17;
    private bool rightTurnSignal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RightTurnSignal {
      get { return rightTurnSignal_; }
      set {
        rightTurnSignal_ = value;
      }
    }

    /// <summary>Field number for the "horn" field.</summary>
    public const int HornFieldNumber = 18;
    private bool horn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Horn {
      get { return horn_; }
      set {
        horn_ = value;
      }
    }

    /// <summary>Field number for the "wiper" field.</summary>
    public const int WiperFieldNumber = 19;
    private bool wiper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Wiper {
      get { return wiper_; }
      set {
        wiper_ = value;
      }
    }

    /// <summary>Field number for the "disengage_status" field.</summary>
    public const int DisengageStatusFieldNumber = 20;
    private bool disengageStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisengageStatus {
      get { return disengageStatus_; }
      set {
        disengageStatus_ = value;
      }
    }

    /// <summary>Field number for the "driving_mode" field.</summary>
    public const int DrivingModeFieldNumber = 21;
    private global::Apollo.Canbus.Chassis.Types.DrivingMode drivingMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.DrivingMode DrivingMode {
      get { return drivingMode_; }
      set {
        drivingMode_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 22;
    private global::Apollo.Canbus.Chassis.Types.ErrorCode errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.ErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "gear_location" field.</summary>
    public const int GearLocationFieldNumber = 23;
    private global::Apollo.Canbus.Chassis.Types.GearPosition gearLocation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.GearPosition GearLocation {
      get { return gearLocation_; }
      set {
        gearLocation_ = value;
      }
    }

    /// <summary>Field number for the "steering_timestamp" field.</summary>
    public const int SteeringTimestampFieldNumber = 24;
    private double steeringTimestamp_;
    /// <summary>
    /// timestamp for steering module
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringTimestamp {
      get { return steeringTimestamp_; }
      set {
        steeringTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 25;
    private global::Apollo.Common.Header header_;
    /// <summary>
    /// chassis also needs it own sending timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "chassis_error_mask" field.</summary>
    public const int ChassisErrorMaskFieldNumber = 26;
    private int chassisErrorMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChassisErrorMask {
      get { return chassisErrorMask_; }
      set {
        chassisErrorMask_ = value;
      }
    }

    /// <summary>Field number for the "signal" field.</summary>
    public const int SignalFieldNumber = 27;
    private global::Apollo.Common.VehicleSignal signal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleSignal Signal {
      get { return signal_; }
      set {
        signal_ = value;
      }
    }

    /// <summary>Field number for the "chassis_gps" field.</summary>
    public const int ChassisGpsFieldNumber = 28;
    private global::Apollo.Canbus.ChassisGPS chassisGps_;
    /// <summary>
    /// Only available for Lincoln now
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.ChassisGPS ChassisGps {
      get { return chassisGps_; }
      set {
        chassisGps_ = value;
      }
    }

    /// <summary>Field number for the "engage_advice" field.</summary>
    public const int EngageAdviceFieldNumber = 29;
    private global::Apollo.Common.EngageAdvice engageAdvice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.EngageAdvice EngageAdvice {
      get { return engageAdvice_; }
      set {
        engageAdvice_ = value;
      }
    }

    /// <summary>Field number for the "wheel_speed" field.</summary>
    public const int WheelSpeedFieldNumber = 30;
    private global::Apollo.Canbus.WheelSpeed wheelSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed WheelSpeed {
      get { return wheelSpeed_; }
      set {
        wheelSpeed_ = value;
      }
    }

    /// <summary>Field number for the "surround" field.</summary>
    public const int SurroundFieldNumber = 31;
    private global::Apollo.Canbus.Surround surround_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Surround Surround {
      get { return surround_; }
      set {
        surround_ = value;
      }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 32;
    private global::Apollo.Canbus.License license_;
    /// <summary>
    /// Vehicle registration information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.License License {
      get { return license_; }
      set {
        license_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chassis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chassis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EngineStarted != other.EngineStarted) return false;
      if (EngineRpm != other.EngineRpm) return false;
      if (SpeedMps != other.SpeedMps) return false;
      if (OdometerM != other.OdometerM) return false;
      if (FuelRangeM != other.FuelRangeM) return false;
      if (ThrottlePercentage != other.ThrottlePercentage) return false;
      if (BrakePercentage != other.BrakePercentage) return false;
      if (SteeringPercentage != other.SteeringPercentage) return false;
      if (SteeringTorqueNm != other.SteeringTorqueNm) return false;
      if (ParkingBrake != other.ParkingBrake) return false;
      if (HighBeamSignal != other.HighBeamSignal) return false;
      if (LowBeamSignal != other.LowBeamSignal) return false;
      if (LeftTurnSignal != other.LeftTurnSignal) return false;
      if (RightTurnSignal != other.RightTurnSignal) return false;
      if (Horn != other.Horn) return false;
      if (Wiper != other.Wiper) return false;
      if (DisengageStatus != other.DisengageStatus) return false;
      if (DrivingMode != other.DrivingMode) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (GearLocation != other.GearLocation) return false;
      if (SteeringTimestamp != other.SteeringTimestamp) return false;
      if (!object.Equals(Header, other.Header)) return false;
      if (ChassisErrorMask != other.ChassisErrorMask) return false;
      if (!object.Equals(Signal, other.Signal)) return false;
      if (!object.Equals(ChassisGps, other.ChassisGps)) return false;
      if (!object.Equals(EngageAdvice, other.EngageAdvice)) return false;
      if (!object.Equals(WheelSpeed, other.WheelSpeed)) return false;
      if (!object.Equals(Surround, other.Surround)) return false;
      if (!object.Equals(License, other.License)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EngineStarted != false) hash ^= EngineStarted.GetHashCode();
      if (EngineRpm != 0F) hash ^= EngineRpm.GetHashCode();
      if (SpeedMps != 0F) hash ^= SpeedMps.GetHashCode();
      if (OdometerM != 0F) hash ^= OdometerM.GetHashCode();
      if (FuelRangeM != 0) hash ^= FuelRangeM.GetHashCode();
      if (ThrottlePercentage != 0F) hash ^= ThrottlePercentage.GetHashCode();
      if (BrakePercentage != 0F) hash ^= BrakePercentage.GetHashCode();
      if (SteeringPercentage != 0F) hash ^= SteeringPercentage.GetHashCode();
      if (SteeringTorqueNm != 0F) hash ^= SteeringTorqueNm.GetHashCode();
      if (ParkingBrake != false) hash ^= ParkingBrake.GetHashCode();
      if (HighBeamSignal != false) hash ^= HighBeamSignal.GetHashCode();
      if (LowBeamSignal != false) hash ^= LowBeamSignal.GetHashCode();
      if (LeftTurnSignal != false) hash ^= LeftTurnSignal.GetHashCode();
      if (RightTurnSignal != false) hash ^= RightTurnSignal.GetHashCode();
      if (Horn != false) hash ^= Horn.GetHashCode();
      if (Wiper != false) hash ^= Wiper.GetHashCode();
      if (DisengageStatus != false) hash ^= DisengageStatus.GetHashCode();
      if (DrivingMode != 0) hash ^= DrivingMode.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (GearLocation != 0) hash ^= GearLocation.GetHashCode();
      if (SteeringTimestamp != 0D) hash ^= SteeringTimestamp.GetHashCode();
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ChassisErrorMask != 0) hash ^= ChassisErrorMask.GetHashCode();
      if (signal_ != null) hash ^= Signal.GetHashCode();
      if (chassisGps_ != null) hash ^= ChassisGps.GetHashCode();
      if (engageAdvice_ != null) hash ^= EngageAdvice.GetHashCode();
      if (wheelSpeed_ != null) hash ^= WheelSpeed.GetHashCode();
      if (surround_ != null) hash ^= Surround.GetHashCode();
      if (license_ != null) hash ^= License.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EngineStarted != false) {
        output.WriteRawTag(24);
        output.WriteBool(EngineStarted);
      }
      if (EngineRpm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(EngineRpm);
      }
      if (SpeedMps != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedMps);
      }
      if (OdometerM != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(OdometerM);
      }
      if (FuelRangeM != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FuelRangeM);
      }
      if (ThrottlePercentage != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ThrottlePercentage);
      }
      if (BrakePercentage != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BrakePercentage);
      }
      if (SteeringPercentage != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SteeringPercentage);
      }
      if (SteeringTorqueNm != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(SteeringTorqueNm);
      }
      if (ParkingBrake != false) {
        output.WriteRawTag(104);
        output.WriteBool(ParkingBrake);
      }
      if (HighBeamSignal != false) {
        output.WriteRawTag(112);
        output.WriteBool(HighBeamSignal);
      }
      if (LowBeamSignal != false) {
        output.WriteRawTag(120);
        output.WriteBool(LowBeamSignal);
      }
      if (LeftTurnSignal != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(LeftTurnSignal);
      }
      if (RightTurnSignal != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(RightTurnSignal);
      }
      if (Horn != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Horn);
      }
      if (Wiper != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Wiper);
      }
      if (DisengageStatus != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(DisengageStatus);
      }
      if (DrivingMode != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) DrivingMode);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) ErrorCode);
      }
      if (GearLocation != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) GearLocation);
      }
      if (SteeringTimestamp != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(SteeringTimestamp);
      }
      if (header_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Header);
      }
      if (ChassisErrorMask != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(ChassisErrorMask);
      }
      if (signal_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Signal);
      }
      if (chassisGps_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(ChassisGps);
      }
      if (engageAdvice_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(EngageAdvice);
      }
      if (wheelSpeed_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(WheelSpeed);
      }
      if (surround_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Surround);
      }
      if (license_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(License);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EngineStarted != false) {
        size += 1 + 1;
      }
      if (EngineRpm != 0F) {
        size += 1 + 4;
      }
      if (SpeedMps != 0F) {
        size += 1 + 4;
      }
      if (OdometerM != 0F) {
        size += 1 + 4;
      }
      if (FuelRangeM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FuelRangeM);
      }
      if (ThrottlePercentage != 0F) {
        size += 1 + 4;
      }
      if (BrakePercentage != 0F) {
        size += 1 + 4;
      }
      if (SteeringPercentage != 0F) {
        size += 1 + 4;
      }
      if (SteeringTorqueNm != 0F) {
        size += 1 + 4;
      }
      if (ParkingBrake != false) {
        size += 1 + 1;
      }
      if (HighBeamSignal != false) {
        size += 1 + 1;
      }
      if (LowBeamSignal != false) {
        size += 1 + 1;
      }
      if (LeftTurnSignal != false) {
        size += 2 + 1;
      }
      if (RightTurnSignal != false) {
        size += 2 + 1;
      }
      if (Horn != false) {
        size += 2 + 1;
      }
      if (Wiper != false) {
        size += 2 + 1;
      }
      if (DisengageStatus != false) {
        size += 2 + 1;
      }
      if (DrivingMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingMode);
      }
      if (ErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (GearLocation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GearLocation);
      }
      if (SteeringTimestamp != 0D) {
        size += 2 + 8;
      }
      if (header_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ChassisErrorMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChassisErrorMask);
      }
      if (signal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Signal);
      }
      if (chassisGps_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChassisGps);
      }
      if (engageAdvice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EngageAdvice);
      }
      if (wheelSpeed_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WheelSpeed);
      }
      if (surround_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Surround);
      }
      if (license_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(License);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chassis other) {
      if (other == null) {
        return;
      }
      if (other.EngineStarted != false) {
        EngineStarted = other.EngineStarted;
      }
      if (other.EngineRpm != 0F) {
        EngineRpm = other.EngineRpm;
      }
      if (other.SpeedMps != 0F) {
        SpeedMps = other.SpeedMps;
      }
      if (other.OdometerM != 0F) {
        OdometerM = other.OdometerM;
      }
      if (other.FuelRangeM != 0) {
        FuelRangeM = other.FuelRangeM;
      }
      if (other.ThrottlePercentage != 0F) {
        ThrottlePercentage = other.ThrottlePercentage;
      }
      if (other.BrakePercentage != 0F) {
        BrakePercentage = other.BrakePercentage;
      }
      if (other.SteeringPercentage != 0F) {
        SteeringPercentage = other.SteeringPercentage;
      }
      if (other.SteeringTorqueNm != 0F) {
        SteeringTorqueNm = other.SteeringTorqueNm;
      }
      if (other.ParkingBrake != false) {
        ParkingBrake = other.ParkingBrake;
      }
      if (other.HighBeamSignal != false) {
        HighBeamSignal = other.HighBeamSignal;
      }
      if (other.LowBeamSignal != false) {
        LowBeamSignal = other.LowBeamSignal;
      }
      if (other.LeftTurnSignal != false) {
        LeftTurnSignal = other.LeftTurnSignal;
      }
      if (other.RightTurnSignal != false) {
        RightTurnSignal = other.RightTurnSignal;
      }
      if (other.Horn != false) {
        Horn = other.Horn;
      }
      if (other.Wiper != false) {
        Wiper = other.Wiper;
      }
      if (other.DisengageStatus != false) {
        DisengageStatus = other.DisengageStatus;
      }
      if (other.DrivingMode != 0) {
        DrivingMode = other.DrivingMode;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.GearLocation != 0) {
        GearLocation = other.GearLocation;
      }
      if (other.SteeringTimestamp != 0D) {
        SteeringTimestamp = other.SteeringTimestamp;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ChassisErrorMask != 0) {
        ChassisErrorMask = other.ChassisErrorMask;
      }
      if (other.signal_ != null) {
        if (signal_ == null) {
          signal_ = new global::Apollo.Common.VehicleSignal();
        }
        Signal.MergeFrom(other.Signal);
      }
      if (other.chassisGps_ != null) {
        if (chassisGps_ == null) {
          chassisGps_ = new global::Apollo.Canbus.ChassisGPS();
        }
        ChassisGps.MergeFrom(other.ChassisGps);
      }
      if (other.engageAdvice_ != null) {
        if (engageAdvice_ == null) {
          engageAdvice_ = new global::Apollo.Common.EngageAdvice();
        }
        EngageAdvice.MergeFrom(other.EngageAdvice);
      }
      if (other.wheelSpeed_ != null) {
        if (wheelSpeed_ == null) {
          wheelSpeed_ = new global::Apollo.Canbus.WheelSpeed();
        }
        WheelSpeed.MergeFrom(other.WheelSpeed);
      }
      if (other.surround_ != null) {
        if (surround_ == null) {
          surround_ = new global::Apollo.Canbus.Surround();
        }
        Surround.MergeFrom(other.Surround);
      }
      if (other.license_ != null) {
        if (license_ == null) {
          license_ = new global::Apollo.Canbus.License();
        }
        License.MergeFrom(other.License);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            EngineStarted = input.ReadBool();
            break;
          }
          case 37: {
            EngineRpm = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedMps = input.ReadFloat();
            break;
          }
          case 53: {
            OdometerM = input.ReadFloat();
            break;
          }
          case 56: {
            FuelRangeM = input.ReadInt32();
            break;
          }
          case 69: {
            ThrottlePercentage = input.ReadFloat();
            break;
          }
          case 77: {
            BrakePercentage = input.ReadFloat();
            break;
          }
          case 93: {
            SteeringPercentage = input.ReadFloat();
            break;
          }
          case 101: {
            SteeringTorqueNm = input.ReadFloat();
            break;
          }
          case 104: {
            ParkingBrake = input.ReadBool();
            break;
          }
          case 112: {
            HighBeamSignal = input.ReadBool();
            break;
          }
          case 120: {
            LowBeamSignal = input.ReadBool();
            break;
          }
          case 128: {
            LeftTurnSignal = input.ReadBool();
            break;
          }
          case 136: {
            RightTurnSignal = input.ReadBool();
            break;
          }
          case 144: {
            Horn = input.ReadBool();
            break;
          }
          case 152: {
            Wiper = input.ReadBool();
            break;
          }
          case 160: {
            DisengageStatus = input.ReadBool();
            break;
          }
          case 168: {
            drivingMode_ = (global::Apollo.Canbus.Chassis.Types.DrivingMode) input.ReadEnum();
            break;
          }
          case 176: {
            errorCode_ = (global::Apollo.Canbus.Chassis.Types.ErrorCode) input.ReadEnum();
            break;
          }
          case 184: {
            gearLocation_ = (global::Apollo.Canbus.Chassis.Types.GearPosition) input.ReadEnum();
            break;
          }
          case 193: {
            SteeringTimestamp = input.ReadDouble();
            break;
          }
          case 202: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 208: {
            ChassisErrorMask = input.ReadInt32();
            break;
          }
          case 218: {
            if (signal_ == null) {
              signal_ = new global::Apollo.Common.VehicleSignal();
            }
            input.ReadMessage(signal_);
            break;
          }
          case 226: {
            if (chassisGps_ == null) {
              chassisGps_ = new global::Apollo.Canbus.ChassisGPS();
            }
            input.ReadMessage(chassisGps_);
            break;
          }
          case 234: {
            if (engageAdvice_ == null) {
              engageAdvice_ = new global::Apollo.Common.EngageAdvice();
            }
            input.ReadMessage(engageAdvice_);
            break;
          }
          case 242: {
            if (wheelSpeed_ == null) {
              wheelSpeed_ = new global::Apollo.Canbus.WheelSpeed();
            }
            input.ReadMessage(wheelSpeed_);
            break;
          }
          case 250: {
            if (surround_ == null) {
              surround_ = new global::Apollo.Canbus.Surround();
            }
            input.ReadMessage(surround_);
            break;
          }
          case 258: {
            if (license_ == null) {
              license_ = new global::Apollo.Canbus.License();
            }
            input.ReadMessage(license_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Chassis message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DrivingMode {
        /// <summary>
        /// human drive
        /// </summary>
        [pbr::OriginalName("COMPLETE_MANUAL")] CompleteManual = 0,
        [pbr::OriginalName("COMPLETE_AUTO_DRIVE")] CompleteAutoDrive = 1,
        /// <summary>
        /// only steer
        /// </summary>
        [pbr::OriginalName("AUTO_STEER_ONLY")] AutoSteerOnly = 2,
        /// <summary>
        /// include throttle and brake
        /// </summary>
        [pbr::OriginalName("AUTO_SPEED_ONLY")] AutoSpeedOnly = 3,
        /// <summary>
        /// security mode when manual intervention happens, only response status
        /// </summary>
        [pbr::OriginalName("EMERGENCY_MODE")] EmergencyMode = 4,
      }

      public enum ErrorCode {
        [pbr::OriginalName("NO_ERROR")] NoError = 0,
        /// <summary>
        /// control cmd not in period
        /// </summary>
        [pbr::OriginalName("CMD_NOT_IN_PERIOD")] CmdNotInPeriod = 1,
        /// <summary>
        /// car chassis report error, like steer, brake, throttle, gear fault
        /// </summary>
        [pbr::OriginalName("CHASSIS_ERROR")] ChassisError = 2,
        /// <summary>
        /// human manual intervention
        /// </summary>
        [pbr::OriginalName("MANUAL_INTERVENTION")] ManualIntervention = 3,
        /// <summary>
        /// receive car chassis can frame not in period
        /// </summary>
        [pbr::OriginalName("CHASSIS_CAN_NOT_IN_PERIOD")] ChassisCanNotInPeriod = 4,
        [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 5,
      }

      public enum GearPosition {
        [pbr::OriginalName("GEAR_NEUTRAL")] GearNeutral = 0,
        [pbr::OriginalName("GEAR_DRIVE")] GearDrive = 1,
        [pbr::OriginalName("GEAR_REVERSE")] GearReverse = 2,
        [pbr::OriginalName("GEAR_PARKING")] GearParking = 3,
        [pbr::OriginalName("GEAR_LOW")] GearLow = 4,
        [pbr::OriginalName("GEAR_INVALID")] GearInvalid = 5,
        [pbr::OriginalName("GEAR_NONE")] GearNone = 6,
      }

    }
    #endregion

  }

  public sealed partial class ChassisGPS : pb::IMessage<ChassisGPS> {
    private static readonly pb::MessageParser<ChassisGPS> _parser = new pb::MessageParser<ChassisGPS>(() => new ChassisGPS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChassisGPS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisGPS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisGPS(ChassisGPS other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      gpsValid_ = other.gpsValid_;
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      hours_ = other.hours_;
      minutes_ = other.minutes_;
      seconds_ = other.seconds_;
      compassDirection_ = other.compassDirection_;
      pdop_ = other.pdop_;
      isGpsFault_ = other.isGpsFault_;
      isInferred_ = other.isInferred_;
      altitude_ = other.altitude_;
      heading_ = other.heading_;
      hdop_ = other.hdop_;
      vdop_ = other.vdop_;
      quality_ = other.quality_;
      numSatellites_ = other.numSatellites_;
      gpsSpeed_ = other.gpsSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisGPS Clone() {
      return new ChassisGPS(this);
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 1;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 2;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "gps_valid" field.</summary>
    public const int GpsValidFieldNumber = 3;
    private bool gpsValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GpsValid {
      get { return gpsValid_; }
      set {
        gpsValid_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 4;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 5;
    private int month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 6;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "hours" field.</summary>
    public const int HoursFieldNumber = 7;
    private int hours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hours {
      get { return hours_; }
      set {
        hours_ = value;
      }
    }

    /// <summary>Field number for the "minutes" field.</summary>
    public const int MinutesFieldNumber = 8;
    private int minutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minutes {
      get { return minutes_; }
      set {
        minutes_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 9;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "compass_direction" field.</summary>
    public const int CompassDirectionFieldNumber = 10;
    private double compassDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CompassDirection {
      get { return compassDirection_; }
      set {
        compassDirection_ = value;
      }
    }

    /// <summary>Field number for the "pdop" field.</summary>
    public const int PdopFieldNumber = 11;
    private double pdop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pdop {
      get { return pdop_; }
      set {
        pdop_ = value;
      }
    }

    /// <summary>Field number for the "is_gps_fault" field.</summary>
    public const int IsGpsFaultFieldNumber = 12;
    private bool isGpsFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGpsFault {
      get { return isGpsFault_; }
      set {
        isGpsFault_ = value;
      }
    }

    /// <summary>Field number for the "is_inferred" field.</summary>
    public const int IsInferredFieldNumber = 13;
    private bool isInferred_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInferred {
      get { return isInferred_; }
      set {
        isInferred_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 14;
    private double altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 15;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "hdop" field.</summary>
    public const int HdopFieldNumber = 16;
    private double hdop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Hdop {
      get { return hdop_; }
      set {
        hdop_ = value;
      }
    }

    /// <summary>Field number for the "vdop" field.</summary>
    public const int VdopFieldNumber = 17;
    private double vdop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Vdop {
      get { return vdop_; }
      set {
        vdop_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 18;
    private global::Apollo.Canbus.GpsQuality quality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.GpsQuality Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "num_satellites" field.</summary>
    public const int NumSatellitesFieldNumber = 19;
    private int numSatellites_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumSatellites {
      get { return numSatellites_; }
      set {
        numSatellites_ = value;
      }
    }

    /// <summary>Field number for the "gps_speed" field.</summary>
    public const int GpsSpeedFieldNumber = 20;
    private double gpsSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GpsSpeed {
      get { return gpsSpeed_; }
      set {
        gpsSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChassisGPS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChassisGPS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (GpsValid != other.GpsValid) return false;
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (Hours != other.Hours) return false;
      if (Minutes != other.Minutes) return false;
      if (Seconds != other.Seconds) return false;
      if (CompassDirection != other.CompassDirection) return false;
      if (Pdop != other.Pdop) return false;
      if (IsGpsFault != other.IsGpsFault) return false;
      if (IsInferred != other.IsInferred) return false;
      if (Altitude != other.Altitude) return false;
      if (Heading != other.Heading) return false;
      if (Hdop != other.Hdop) return false;
      if (Vdop != other.Vdop) return false;
      if (Quality != other.Quality) return false;
      if (NumSatellites != other.NumSatellites) return false;
      if (GpsSpeed != other.GpsSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (GpsValid != false) hash ^= GpsValid.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Hours != 0) hash ^= Hours.GetHashCode();
      if (Minutes != 0) hash ^= Minutes.GetHashCode();
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      if (CompassDirection != 0D) hash ^= CompassDirection.GetHashCode();
      if (Pdop != 0D) hash ^= Pdop.GetHashCode();
      if (IsGpsFault != false) hash ^= IsGpsFault.GetHashCode();
      if (IsInferred != false) hash ^= IsInferred.GetHashCode();
      if (Altitude != 0D) hash ^= Altitude.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Hdop != 0D) hash ^= Hdop.GetHashCode();
      if (Vdop != 0D) hash ^= Vdop.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (NumSatellites != 0) hash ^= NumSatellites.GetHashCode();
      if (GpsSpeed != 0D) hash ^= GpsSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Latitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Longitude);
      }
      if (GpsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(GpsValid);
      }
      if (Year != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Day);
      }
      if (Hours != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Hours);
      }
      if (Minutes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Minutes);
      }
      if (Seconds != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Seconds);
      }
      if (CompassDirection != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(CompassDirection);
      }
      if (Pdop != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Pdop);
      }
      if (IsGpsFault != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsGpsFault);
      }
      if (IsInferred != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsInferred);
      }
      if (Altitude != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Altitude);
      }
      if (Heading != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Heading);
      }
      if (Hdop != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(Hdop);
      }
      if (Vdop != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(Vdop);
      }
      if (Quality != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) Quality);
      }
      if (NumSatellites != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NumSatellites);
      }
      if (GpsSpeed != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(GpsSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (GpsValid != false) {
        size += 1 + 1;
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Hours != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hours);
      }
      if (Minutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minutes);
      }
      if (Seconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      if (CompassDirection != 0D) {
        size += 1 + 8;
      }
      if (Pdop != 0D) {
        size += 1 + 8;
      }
      if (IsGpsFault != false) {
        size += 1 + 1;
      }
      if (IsInferred != false) {
        size += 1 + 1;
      }
      if (Altitude != 0D) {
        size += 1 + 8;
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Hdop != 0D) {
        size += 2 + 8;
      }
      if (Vdop != 0D) {
        size += 2 + 8;
      }
      if (Quality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Quality);
      }
      if (NumSatellites != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumSatellites);
      }
      if (GpsSpeed != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChassisGPS other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.GpsValid != false) {
        GpsValid = other.GpsValid;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Hours != 0) {
        Hours = other.Hours;
      }
      if (other.Minutes != 0) {
        Minutes = other.Minutes;
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
      if (other.CompassDirection != 0D) {
        CompassDirection = other.CompassDirection;
      }
      if (other.Pdop != 0D) {
        Pdop = other.Pdop;
      }
      if (other.IsGpsFault != false) {
        IsGpsFault = other.IsGpsFault;
      }
      if (other.IsInferred != false) {
        IsInferred = other.IsInferred;
      }
      if (other.Altitude != 0D) {
        Altitude = other.Altitude;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Hdop != 0D) {
        Hdop = other.Hdop;
      }
      if (other.Vdop != 0D) {
        Vdop = other.Vdop;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.NumSatellites != 0) {
        NumSatellites = other.NumSatellites;
      }
      if (other.GpsSpeed != 0D) {
        GpsSpeed = other.GpsSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Latitude = input.ReadDouble();
            break;
          }
          case 17: {
            Longitude = input.ReadDouble();
            break;
          }
          case 24: {
            GpsValid = input.ReadBool();
            break;
          }
          case 32: {
            Year = input.ReadInt32();
            break;
          }
          case 40: {
            Month = input.ReadInt32();
            break;
          }
          case 48: {
            Day = input.ReadInt32();
            break;
          }
          case 56: {
            Hours = input.ReadInt32();
            break;
          }
          case 64: {
            Minutes = input.ReadInt32();
            break;
          }
          case 72: {
            Seconds = input.ReadInt32();
            break;
          }
          case 81: {
            CompassDirection = input.ReadDouble();
            break;
          }
          case 89: {
            Pdop = input.ReadDouble();
            break;
          }
          case 96: {
            IsGpsFault = input.ReadBool();
            break;
          }
          case 104: {
            IsInferred = input.ReadBool();
            break;
          }
          case 113: {
            Altitude = input.ReadDouble();
            break;
          }
          case 121: {
            Heading = input.ReadDouble();
            break;
          }
          case 129: {
            Hdop = input.ReadDouble();
            break;
          }
          case 137: {
            Vdop = input.ReadDouble();
            break;
          }
          case 144: {
            quality_ = (global::Apollo.Canbus.GpsQuality) input.ReadEnum();
            break;
          }
          case 152: {
            NumSatellites = input.ReadInt32();
            break;
          }
          case 161: {
            GpsSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WheelSpeed : pb::IMessage<WheelSpeed> {
    private static readonly pb::MessageParser<WheelSpeed> _parser = new pb::MessageParser<WheelSpeed>(() => new WheelSpeed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WheelSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelSpeed(WheelSpeed other) : this() {
      isWheelSpdRrValid_ = other.isWheelSpdRrValid_;
      wheelDirectionRr_ = other.wheelDirectionRr_;
      wheelSpdRr_ = other.wheelSpdRr_;
      isWheelSpdRlValid_ = other.isWheelSpdRlValid_;
      wheelDirectionRl_ = other.wheelDirectionRl_;
      wheelSpdRl_ = other.wheelSpdRl_;
      isWheelSpdFrValid_ = other.isWheelSpdFrValid_;
      wheelDirectionFr_ = other.wheelDirectionFr_;
      wheelSpdFr_ = other.wheelSpdFr_;
      isWheelSpdFlValid_ = other.isWheelSpdFlValid_;
      wheelDirectionFl_ = other.wheelDirectionFl_;
      wheelSpdFl_ = other.wheelSpdFl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelSpeed Clone() {
      return new WheelSpeed(this);
    }

    /// <summary>Field number for the "is_wheel_spd_rr_valid" field.</summary>
    public const int IsWheelSpdRrValidFieldNumber = 1;
    private bool isWheelSpdRrValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdRrValid {
      get { return isWheelSpdRrValid_; }
      set {
        isWheelSpdRrValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_rr" field.</summary>
    public const int WheelDirectionRrFieldNumber = 2;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionRr_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionRr {
      get { return wheelDirectionRr_; }
      set {
        wheelDirectionRr_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_rr" field.</summary>
    public const int WheelSpdRrFieldNumber = 3;
    private double wheelSpdRr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdRr {
      get { return wheelSpdRr_; }
      set {
        wheelSpdRr_ = value;
      }
    }

    /// <summary>Field number for the "is_wheel_spd_rl_valid" field.</summary>
    public const int IsWheelSpdRlValidFieldNumber = 4;
    private bool isWheelSpdRlValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdRlValid {
      get { return isWheelSpdRlValid_; }
      set {
        isWheelSpdRlValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_rl" field.</summary>
    public const int WheelDirectionRlFieldNumber = 5;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionRl_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionRl {
      get { return wheelDirectionRl_; }
      set {
        wheelDirectionRl_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_rl" field.</summary>
    public const int WheelSpdRlFieldNumber = 6;
    private double wheelSpdRl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdRl {
      get { return wheelSpdRl_; }
      set {
        wheelSpdRl_ = value;
      }
    }

    /// <summary>Field number for the "is_wheel_spd_fr_valid" field.</summary>
    public const int IsWheelSpdFrValidFieldNumber = 7;
    private bool isWheelSpdFrValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdFrValid {
      get { return isWheelSpdFrValid_; }
      set {
        isWheelSpdFrValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_fr" field.</summary>
    public const int WheelDirectionFrFieldNumber = 8;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionFr_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionFr {
      get { return wheelDirectionFr_; }
      set {
        wheelDirectionFr_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_fr" field.</summary>
    public const int WheelSpdFrFieldNumber = 9;
    private double wheelSpdFr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdFr {
      get { return wheelSpdFr_; }
      set {
        wheelSpdFr_ = value;
      }
    }

    /// <summary>Field number for the "is_wheel_spd_fl_valid" field.</summary>
    public const int IsWheelSpdFlValidFieldNumber = 10;
    private bool isWheelSpdFlValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWheelSpdFlValid {
      get { return isWheelSpdFlValid_; }
      set {
        isWheelSpdFlValid_ = value;
      }
    }

    /// <summary>Field number for the "wheel_direction_fl" field.</summary>
    public const int WheelDirectionFlFieldNumber = 11;
    private global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType wheelDirectionFl_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType WheelDirectionFl {
      get { return wheelDirectionFl_; }
      set {
        wheelDirectionFl_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_fl" field.</summary>
    public const int WheelSpdFlFieldNumber = 12;
    private double wheelSpdFl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdFl {
      get { return wheelSpdFl_; }
      set {
        wheelSpdFl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WheelSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WheelSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsWheelSpdRrValid != other.IsWheelSpdRrValid) return false;
      if (WheelDirectionRr != other.WheelDirectionRr) return false;
      if (WheelSpdRr != other.WheelSpdRr) return false;
      if (IsWheelSpdRlValid != other.IsWheelSpdRlValid) return false;
      if (WheelDirectionRl != other.WheelDirectionRl) return false;
      if (WheelSpdRl != other.WheelSpdRl) return false;
      if (IsWheelSpdFrValid != other.IsWheelSpdFrValid) return false;
      if (WheelDirectionFr != other.WheelDirectionFr) return false;
      if (WheelSpdFr != other.WheelSpdFr) return false;
      if (IsWheelSpdFlValid != other.IsWheelSpdFlValid) return false;
      if (WheelDirectionFl != other.WheelDirectionFl) return false;
      if (WheelSpdFl != other.WheelSpdFl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsWheelSpdRrValid != false) hash ^= IsWheelSpdRrValid.GetHashCode();
      if (WheelDirectionRr != 0) hash ^= WheelDirectionRr.GetHashCode();
      if (WheelSpdRr != 0D) hash ^= WheelSpdRr.GetHashCode();
      if (IsWheelSpdRlValid != false) hash ^= IsWheelSpdRlValid.GetHashCode();
      if (WheelDirectionRl != 0) hash ^= WheelDirectionRl.GetHashCode();
      if (WheelSpdRl != 0D) hash ^= WheelSpdRl.GetHashCode();
      if (IsWheelSpdFrValid != false) hash ^= IsWheelSpdFrValid.GetHashCode();
      if (WheelDirectionFr != 0) hash ^= WheelDirectionFr.GetHashCode();
      if (WheelSpdFr != 0D) hash ^= WheelSpdFr.GetHashCode();
      if (IsWheelSpdFlValid != false) hash ^= IsWheelSpdFlValid.GetHashCode();
      if (WheelDirectionFl != 0) hash ^= WheelDirectionFl.GetHashCode();
      if (WheelSpdFl != 0D) hash ^= WheelSpdFl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsWheelSpdRrValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsWheelSpdRrValid);
      }
      if (WheelDirectionRr != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) WheelDirectionRr);
      }
      if (WheelSpdRr != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(WheelSpdRr);
      }
      if (IsWheelSpdRlValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsWheelSpdRlValid);
      }
      if (WheelDirectionRl != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) WheelDirectionRl);
      }
      if (WheelSpdRl != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(WheelSpdRl);
      }
      if (IsWheelSpdFrValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsWheelSpdFrValid);
      }
      if (WheelDirectionFr != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) WheelDirectionFr);
      }
      if (WheelSpdFr != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(WheelSpdFr);
      }
      if (IsWheelSpdFlValid != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsWheelSpdFlValid);
      }
      if (WheelDirectionFl != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) WheelDirectionFl);
      }
      if (WheelSpdFl != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(WheelSpdFl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsWheelSpdRrValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionRr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionRr);
      }
      if (WheelSpdRr != 0D) {
        size += 1 + 8;
      }
      if (IsWheelSpdRlValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionRl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionRl);
      }
      if (WheelSpdRl != 0D) {
        size += 1 + 8;
      }
      if (IsWheelSpdFrValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionFr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionFr);
      }
      if (WheelSpdFr != 0D) {
        size += 1 + 8;
      }
      if (IsWheelSpdFlValid != false) {
        size += 1 + 1;
      }
      if (WheelDirectionFl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelDirectionFl);
      }
      if (WheelSpdFl != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WheelSpeed other) {
      if (other == null) {
        return;
      }
      if (other.IsWheelSpdRrValid != false) {
        IsWheelSpdRrValid = other.IsWheelSpdRrValid;
      }
      if (other.WheelDirectionRr != 0) {
        WheelDirectionRr = other.WheelDirectionRr;
      }
      if (other.WheelSpdRr != 0D) {
        WheelSpdRr = other.WheelSpdRr;
      }
      if (other.IsWheelSpdRlValid != false) {
        IsWheelSpdRlValid = other.IsWheelSpdRlValid;
      }
      if (other.WheelDirectionRl != 0) {
        WheelDirectionRl = other.WheelDirectionRl;
      }
      if (other.WheelSpdRl != 0D) {
        WheelSpdRl = other.WheelSpdRl;
      }
      if (other.IsWheelSpdFrValid != false) {
        IsWheelSpdFrValid = other.IsWheelSpdFrValid;
      }
      if (other.WheelDirectionFr != 0) {
        WheelDirectionFr = other.WheelDirectionFr;
      }
      if (other.WheelSpdFr != 0D) {
        WheelSpdFr = other.WheelSpdFr;
      }
      if (other.IsWheelSpdFlValid != false) {
        IsWheelSpdFlValid = other.IsWheelSpdFlValid;
      }
      if (other.WheelDirectionFl != 0) {
        WheelDirectionFl = other.WheelDirectionFl;
      }
      if (other.WheelSpdFl != 0D) {
        WheelSpdFl = other.WheelSpdFl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsWheelSpdRrValid = input.ReadBool();
            break;
          }
          case 16: {
            wheelDirectionRr_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 25: {
            WheelSpdRr = input.ReadDouble();
            break;
          }
          case 32: {
            IsWheelSpdRlValid = input.ReadBool();
            break;
          }
          case 40: {
            wheelDirectionRl_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 49: {
            WheelSpdRl = input.ReadDouble();
            break;
          }
          case 56: {
            IsWheelSpdFrValid = input.ReadBool();
            break;
          }
          case 64: {
            wheelDirectionFr_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 73: {
            WheelSpdFr = input.ReadDouble();
            break;
          }
          case 80: {
            IsWheelSpdFlValid = input.ReadBool();
            break;
          }
          case 88: {
            wheelDirectionFl_ = (global::Apollo.Canbus.WheelSpeed.Types.WheelSpeedType) input.ReadEnum();
            break;
          }
          case 97: {
            WheelSpdFl = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WheelSpeed message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum WheelSpeedType {
        [pbr::OriginalName("FORWARD")] Forward = 0,
        [pbr::OriginalName("BACKWARD")] Backward = 1,
        [pbr::OriginalName("STANDSTILL")] Standstill = 2,
        [pbr::OriginalName("INVALID")] Invalid = 3,
      }

    }
    #endregion

  }

  public sealed partial class Sonar : pb::IMessage<Sonar> {
    private static readonly pb::MessageParser<Sonar> _parser = new pb::MessageParser<Sonar>(() => new Sonar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sonar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sonar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sonar(Sonar other) : this() {
      range_ = other.range_;
      Translation = other.translation_ != null ? other.Translation.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sonar Clone() {
      return new Sonar(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private double range_;
    /// <summary>
    /// Meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 2;
    private global::Apollo.Common.Point3D translation_;
    /// <summary>
    /// Meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Translation {
      get { return translation_; }
      set {
        translation_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Apollo.Common.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sonar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sonar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Range != other.Range) return false;
      if (!object.Equals(Translation, other.Translation)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Range != 0D) hash ^= Range.GetHashCode();
      if (translation_ != null) hash ^= Translation.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Range != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Range);
      }
      if (translation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Translation);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Range != 0D) {
        size += 1 + 8;
      }
      if (translation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translation);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sonar other) {
      if (other == null) {
        return;
      }
      if (other.Range != 0D) {
        Range = other.Range;
      }
      if (other.translation_ != null) {
        if (translation_ == null) {
          translation_ = new global::Apollo.Common.Point3D();
        }
        Translation.MergeFrom(other.Translation);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Apollo.Common.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Range = input.ReadDouble();
            break;
          }
          case 18: {
            if (translation_ == null) {
              translation_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(translation_);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::Apollo.Common.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Surround : pb::IMessage<Surround> {
    private static readonly pb::MessageParser<Surround> _parser = new pb::MessageParser<Surround>(() => new Surround());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Surround> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Surround() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Surround(Surround other) : this() {
      crossTrafficAlertLeft_ = other.crossTrafficAlertLeft_;
      crossTrafficAlertLeftEnabled_ = other.crossTrafficAlertLeftEnabled_;
      blindSpotLeftAlert_ = other.blindSpotLeftAlert_;
      blindSpotLeftAlertEnabled_ = other.blindSpotLeftAlertEnabled_;
      crossTrafficAlertRight_ = other.crossTrafficAlertRight_;
      crossTrafficAlertRightEnabled_ = other.crossTrafficAlertRightEnabled_;
      blindSpotRightAlert_ = other.blindSpotRightAlert_;
      blindSpotRightAlertEnabled_ = other.blindSpotRightAlertEnabled_;
      sonar00_ = other.sonar00_;
      sonar01_ = other.sonar01_;
      sonar02_ = other.sonar02_;
      sonar03_ = other.sonar03_;
      sonar04_ = other.sonar04_;
      sonar05_ = other.sonar05_;
      sonar06_ = other.sonar06_;
      sonar07_ = other.sonar07_;
      sonar08_ = other.sonar08_;
      sonar09_ = other.sonar09_;
      sonar10_ = other.sonar10_;
      sonar11_ = other.sonar11_;
      sonarEnabled_ = other.sonarEnabled_;
      sonarFault_ = other.sonarFault_;
      sonarRange_ = other.sonarRange_.Clone();
      sonar_ = other.sonar_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Surround Clone() {
      return new Surround(this);
    }

    /// <summary>Field number for the "cross_traffic_alert_left" field.</summary>
    public const int CrossTrafficAlertLeftFieldNumber = 1;
    private bool crossTrafficAlertLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrossTrafficAlertLeft {
      get { return crossTrafficAlertLeft_; }
      set {
        crossTrafficAlertLeft_ = value;
      }
    }

    /// <summary>Field number for the "cross_traffic_alert_left_enabled" field.</summary>
    public const int CrossTrafficAlertLeftEnabledFieldNumber = 2;
    private bool crossTrafficAlertLeftEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrossTrafficAlertLeftEnabled {
      get { return crossTrafficAlertLeftEnabled_; }
      set {
        crossTrafficAlertLeftEnabled_ = value;
      }
    }

    /// <summary>Field number for the "blind_spot_left_alert" field.</summary>
    public const int BlindSpotLeftAlertFieldNumber = 3;
    private bool blindSpotLeftAlert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlindSpotLeftAlert {
      get { return blindSpotLeftAlert_; }
      set {
        blindSpotLeftAlert_ = value;
      }
    }

    /// <summary>Field number for the "blind_spot_left_alert_enabled" field.</summary>
    public const int BlindSpotLeftAlertEnabledFieldNumber = 4;
    private bool blindSpotLeftAlertEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlindSpotLeftAlertEnabled {
      get { return blindSpotLeftAlertEnabled_; }
      set {
        blindSpotLeftAlertEnabled_ = value;
      }
    }

    /// <summary>Field number for the "cross_traffic_alert_right" field.</summary>
    public const int CrossTrafficAlertRightFieldNumber = 5;
    private bool crossTrafficAlertRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrossTrafficAlertRight {
      get { return crossTrafficAlertRight_; }
      set {
        crossTrafficAlertRight_ = value;
      }
    }

    /// <summary>Field number for the "cross_traffic_alert_right_enabled" field.</summary>
    public const int CrossTrafficAlertRightEnabledFieldNumber = 6;
    private bool crossTrafficAlertRightEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrossTrafficAlertRightEnabled {
      get { return crossTrafficAlertRightEnabled_; }
      set {
        crossTrafficAlertRightEnabled_ = value;
      }
    }

    /// <summary>Field number for the "blind_spot_right_alert" field.</summary>
    public const int BlindSpotRightAlertFieldNumber = 7;
    private bool blindSpotRightAlert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlindSpotRightAlert {
      get { return blindSpotRightAlert_; }
      set {
        blindSpotRightAlert_ = value;
      }
    }

    /// <summary>Field number for the "blind_spot_right_alert_enabled" field.</summary>
    public const int BlindSpotRightAlertEnabledFieldNumber = 8;
    private bool blindSpotRightAlertEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlindSpotRightAlertEnabled {
      get { return blindSpotRightAlertEnabled_; }
      set {
        blindSpotRightAlertEnabled_ = value;
      }
    }

    /// <summary>Field number for the "sonar00" field.</summary>
    public const int Sonar00FieldNumber = 9;
    private double sonar00_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar00 {
      get { return sonar00_; }
      set {
        sonar00_ = value;
      }
    }

    /// <summary>Field number for the "sonar01" field.</summary>
    public const int Sonar01FieldNumber = 10;
    private double sonar01_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar01 {
      get { return sonar01_; }
      set {
        sonar01_ = value;
      }
    }

    /// <summary>Field number for the "sonar02" field.</summary>
    public const int Sonar02FieldNumber = 11;
    private double sonar02_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar02 {
      get { return sonar02_; }
      set {
        sonar02_ = value;
      }
    }

    /// <summary>Field number for the "sonar03" field.</summary>
    public const int Sonar03FieldNumber = 12;
    private double sonar03_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar03 {
      get { return sonar03_; }
      set {
        sonar03_ = value;
      }
    }

    /// <summary>Field number for the "sonar04" field.</summary>
    public const int Sonar04FieldNumber = 13;
    private double sonar04_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar04 {
      get { return sonar04_; }
      set {
        sonar04_ = value;
      }
    }

    /// <summary>Field number for the "sonar05" field.</summary>
    public const int Sonar05FieldNumber = 14;
    private double sonar05_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar05 {
      get { return sonar05_; }
      set {
        sonar05_ = value;
      }
    }

    /// <summary>Field number for the "sonar06" field.</summary>
    public const int Sonar06FieldNumber = 15;
    private double sonar06_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar06 {
      get { return sonar06_; }
      set {
        sonar06_ = value;
      }
    }

    /// <summary>Field number for the "sonar07" field.</summary>
    public const int Sonar07FieldNumber = 16;
    private double sonar07_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar07 {
      get { return sonar07_; }
      set {
        sonar07_ = value;
      }
    }

    /// <summary>Field number for the "sonar08" field.</summary>
    public const int Sonar08FieldNumber = 17;
    private double sonar08_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar08 {
      get { return sonar08_; }
      set {
        sonar08_ = value;
      }
    }

    /// <summary>Field number for the "sonar09" field.</summary>
    public const int Sonar09FieldNumber = 18;
    private double sonar09_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar09 {
      get { return sonar09_; }
      set {
        sonar09_ = value;
      }
    }

    /// <summary>Field number for the "sonar10" field.</summary>
    public const int Sonar10FieldNumber = 19;
    private double sonar10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar10 {
      get { return sonar10_; }
      set {
        sonar10_ = value;
      }
    }

    /// <summary>Field number for the "sonar11" field.</summary>
    public const int Sonar11FieldNumber = 20;
    private double sonar11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sonar11 {
      get { return sonar11_; }
      set {
        sonar11_ = value;
      }
    }

    /// <summary>Field number for the "sonar_enabled" field.</summary>
    public const int SonarEnabledFieldNumber = 21;
    private bool sonarEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SonarEnabled {
      get { return sonarEnabled_; }
      set {
        sonarEnabled_ = value;
      }
    }

    /// <summary>Field number for the "sonar_fault" field.</summary>
    public const int SonarFaultFieldNumber = 22;
    private bool sonarFault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SonarFault {
      get { return sonarFault_; }
      set {
        sonarFault_ = value;
      }
    }

    /// <summary>Field number for the "sonar_range" field.</summary>
    public const int SonarRangeFieldNumber = 23;
    private static readonly pb::FieldCodec<double> _repeated_sonarRange_codec
        = pb::FieldCodec.ForDouble(186);
    private readonly pbc::RepeatedField<double> sonarRange_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> SonarRange {
      get { return sonarRange_; }
    }

    /// <summary>Field number for the "sonar" field.</summary>
    public const int SonarFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Apollo.Canbus.Sonar> _repeated_sonar_codec
        = pb::FieldCodec.ForMessage(194, global::Apollo.Canbus.Sonar.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Canbus.Sonar> sonar_ = new pbc::RepeatedField<global::Apollo.Canbus.Sonar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Canbus.Sonar> Sonar {
      get { return sonar_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Surround);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Surround other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CrossTrafficAlertLeft != other.CrossTrafficAlertLeft) return false;
      if (CrossTrafficAlertLeftEnabled != other.CrossTrafficAlertLeftEnabled) return false;
      if (BlindSpotLeftAlert != other.BlindSpotLeftAlert) return false;
      if (BlindSpotLeftAlertEnabled != other.BlindSpotLeftAlertEnabled) return false;
      if (CrossTrafficAlertRight != other.CrossTrafficAlertRight) return false;
      if (CrossTrafficAlertRightEnabled != other.CrossTrafficAlertRightEnabled) return false;
      if (BlindSpotRightAlert != other.BlindSpotRightAlert) return false;
      if (BlindSpotRightAlertEnabled != other.BlindSpotRightAlertEnabled) return false;
      if (Sonar00 != other.Sonar00) return false;
      if (Sonar01 != other.Sonar01) return false;
      if (Sonar02 != other.Sonar02) return false;
      if (Sonar03 != other.Sonar03) return false;
      if (Sonar04 != other.Sonar04) return false;
      if (Sonar05 != other.Sonar05) return false;
      if (Sonar06 != other.Sonar06) return false;
      if (Sonar07 != other.Sonar07) return false;
      if (Sonar08 != other.Sonar08) return false;
      if (Sonar09 != other.Sonar09) return false;
      if (Sonar10 != other.Sonar10) return false;
      if (Sonar11 != other.Sonar11) return false;
      if (SonarEnabled != other.SonarEnabled) return false;
      if (SonarFault != other.SonarFault) return false;
      if(!sonarRange_.Equals(other.sonarRange_)) return false;
      if(!sonar_.Equals(other.sonar_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CrossTrafficAlertLeft != false) hash ^= CrossTrafficAlertLeft.GetHashCode();
      if (CrossTrafficAlertLeftEnabled != false) hash ^= CrossTrafficAlertLeftEnabled.GetHashCode();
      if (BlindSpotLeftAlert != false) hash ^= BlindSpotLeftAlert.GetHashCode();
      if (BlindSpotLeftAlertEnabled != false) hash ^= BlindSpotLeftAlertEnabled.GetHashCode();
      if (CrossTrafficAlertRight != false) hash ^= CrossTrafficAlertRight.GetHashCode();
      if (CrossTrafficAlertRightEnabled != false) hash ^= CrossTrafficAlertRightEnabled.GetHashCode();
      if (BlindSpotRightAlert != false) hash ^= BlindSpotRightAlert.GetHashCode();
      if (BlindSpotRightAlertEnabled != false) hash ^= BlindSpotRightAlertEnabled.GetHashCode();
      if (Sonar00 != 0D) hash ^= Sonar00.GetHashCode();
      if (Sonar01 != 0D) hash ^= Sonar01.GetHashCode();
      if (Sonar02 != 0D) hash ^= Sonar02.GetHashCode();
      if (Sonar03 != 0D) hash ^= Sonar03.GetHashCode();
      if (Sonar04 != 0D) hash ^= Sonar04.GetHashCode();
      if (Sonar05 != 0D) hash ^= Sonar05.GetHashCode();
      if (Sonar06 != 0D) hash ^= Sonar06.GetHashCode();
      if (Sonar07 != 0D) hash ^= Sonar07.GetHashCode();
      if (Sonar08 != 0D) hash ^= Sonar08.GetHashCode();
      if (Sonar09 != 0D) hash ^= Sonar09.GetHashCode();
      if (Sonar10 != 0D) hash ^= Sonar10.GetHashCode();
      if (Sonar11 != 0D) hash ^= Sonar11.GetHashCode();
      if (SonarEnabled != false) hash ^= SonarEnabled.GetHashCode();
      if (SonarFault != false) hash ^= SonarFault.GetHashCode();
      hash ^= sonarRange_.GetHashCode();
      hash ^= sonar_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CrossTrafficAlertLeft != false) {
        output.WriteRawTag(8);
        output.WriteBool(CrossTrafficAlertLeft);
      }
      if (CrossTrafficAlertLeftEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(CrossTrafficAlertLeftEnabled);
      }
      if (BlindSpotLeftAlert != false) {
        output.WriteRawTag(24);
        output.WriteBool(BlindSpotLeftAlert);
      }
      if (BlindSpotLeftAlertEnabled != false) {
        output.WriteRawTag(32);
        output.WriteBool(BlindSpotLeftAlertEnabled);
      }
      if (CrossTrafficAlertRight != false) {
        output.WriteRawTag(40);
        output.WriteBool(CrossTrafficAlertRight);
      }
      if (CrossTrafficAlertRightEnabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(CrossTrafficAlertRightEnabled);
      }
      if (BlindSpotRightAlert != false) {
        output.WriteRawTag(56);
        output.WriteBool(BlindSpotRightAlert);
      }
      if (BlindSpotRightAlertEnabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(BlindSpotRightAlertEnabled);
      }
      if (Sonar00 != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Sonar00);
      }
      if (Sonar01 != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Sonar01);
      }
      if (Sonar02 != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Sonar02);
      }
      if (Sonar03 != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Sonar03);
      }
      if (Sonar04 != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Sonar04);
      }
      if (Sonar05 != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Sonar05);
      }
      if (Sonar06 != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Sonar06);
      }
      if (Sonar07 != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(Sonar07);
      }
      if (Sonar08 != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(Sonar08);
      }
      if (Sonar09 != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Sonar09);
      }
      if (Sonar10 != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Sonar10);
      }
      if (Sonar11 != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Sonar11);
      }
      if (SonarEnabled != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(SonarEnabled);
      }
      if (SonarFault != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SonarFault);
      }
      sonarRange_.WriteTo(output, _repeated_sonarRange_codec);
      sonar_.WriteTo(output, _repeated_sonar_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CrossTrafficAlertLeft != false) {
        size += 1 + 1;
      }
      if (CrossTrafficAlertLeftEnabled != false) {
        size += 1 + 1;
      }
      if (BlindSpotLeftAlert != false) {
        size += 1 + 1;
      }
      if (BlindSpotLeftAlertEnabled != false) {
        size += 1 + 1;
      }
      if (CrossTrafficAlertRight != false) {
        size += 1 + 1;
      }
      if (CrossTrafficAlertRightEnabled != false) {
        size += 1 + 1;
      }
      if (BlindSpotRightAlert != false) {
        size += 1 + 1;
      }
      if (BlindSpotRightAlertEnabled != false) {
        size += 1 + 1;
      }
      if (Sonar00 != 0D) {
        size += 1 + 8;
      }
      if (Sonar01 != 0D) {
        size += 1 + 8;
      }
      if (Sonar02 != 0D) {
        size += 1 + 8;
      }
      if (Sonar03 != 0D) {
        size += 1 + 8;
      }
      if (Sonar04 != 0D) {
        size += 1 + 8;
      }
      if (Sonar05 != 0D) {
        size += 1 + 8;
      }
      if (Sonar06 != 0D) {
        size += 1 + 8;
      }
      if (Sonar07 != 0D) {
        size += 2 + 8;
      }
      if (Sonar08 != 0D) {
        size += 2 + 8;
      }
      if (Sonar09 != 0D) {
        size += 2 + 8;
      }
      if (Sonar10 != 0D) {
        size += 2 + 8;
      }
      if (Sonar11 != 0D) {
        size += 2 + 8;
      }
      if (SonarEnabled != false) {
        size += 2 + 1;
      }
      if (SonarFault != false) {
        size += 2 + 1;
      }
      size += sonarRange_.CalculateSize(_repeated_sonarRange_codec);
      size += sonar_.CalculateSize(_repeated_sonar_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Surround other) {
      if (other == null) {
        return;
      }
      if (other.CrossTrafficAlertLeft != false) {
        CrossTrafficAlertLeft = other.CrossTrafficAlertLeft;
      }
      if (other.CrossTrafficAlertLeftEnabled != false) {
        CrossTrafficAlertLeftEnabled = other.CrossTrafficAlertLeftEnabled;
      }
      if (other.BlindSpotLeftAlert != false) {
        BlindSpotLeftAlert = other.BlindSpotLeftAlert;
      }
      if (other.BlindSpotLeftAlertEnabled != false) {
        BlindSpotLeftAlertEnabled = other.BlindSpotLeftAlertEnabled;
      }
      if (other.CrossTrafficAlertRight != false) {
        CrossTrafficAlertRight = other.CrossTrafficAlertRight;
      }
      if (other.CrossTrafficAlertRightEnabled != false) {
        CrossTrafficAlertRightEnabled = other.CrossTrafficAlertRightEnabled;
      }
      if (other.BlindSpotRightAlert != false) {
        BlindSpotRightAlert = other.BlindSpotRightAlert;
      }
      if (other.BlindSpotRightAlertEnabled != false) {
        BlindSpotRightAlertEnabled = other.BlindSpotRightAlertEnabled;
      }
      if (other.Sonar00 != 0D) {
        Sonar00 = other.Sonar00;
      }
      if (other.Sonar01 != 0D) {
        Sonar01 = other.Sonar01;
      }
      if (other.Sonar02 != 0D) {
        Sonar02 = other.Sonar02;
      }
      if (other.Sonar03 != 0D) {
        Sonar03 = other.Sonar03;
      }
      if (other.Sonar04 != 0D) {
        Sonar04 = other.Sonar04;
      }
      if (other.Sonar05 != 0D) {
        Sonar05 = other.Sonar05;
      }
      if (other.Sonar06 != 0D) {
        Sonar06 = other.Sonar06;
      }
      if (other.Sonar07 != 0D) {
        Sonar07 = other.Sonar07;
      }
      if (other.Sonar08 != 0D) {
        Sonar08 = other.Sonar08;
      }
      if (other.Sonar09 != 0D) {
        Sonar09 = other.Sonar09;
      }
      if (other.Sonar10 != 0D) {
        Sonar10 = other.Sonar10;
      }
      if (other.Sonar11 != 0D) {
        Sonar11 = other.Sonar11;
      }
      if (other.SonarEnabled != false) {
        SonarEnabled = other.SonarEnabled;
      }
      if (other.SonarFault != false) {
        SonarFault = other.SonarFault;
      }
      sonarRange_.Add(other.sonarRange_);
      sonar_.Add(other.sonar_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CrossTrafficAlertLeft = input.ReadBool();
            break;
          }
          case 16: {
            CrossTrafficAlertLeftEnabled = input.ReadBool();
            break;
          }
          case 24: {
            BlindSpotLeftAlert = input.ReadBool();
            break;
          }
          case 32: {
            BlindSpotLeftAlertEnabled = input.ReadBool();
            break;
          }
          case 40: {
            CrossTrafficAlertRight = input.ReadBool();
            break;
          }
          case 48: {
            CrossTrafficAlertRightEnabled = input.ReadBool();
            break;
          }
          case 56: {
            BlindSpotRightAlert = input.ReadBool();
            break;
          }
          case 64: {
            BlindSpotRightAlertEnabled = input.ReadBool();
            break;
          }
          case 73: {
            Sonar00 = input.ReadDouble();
            break;
          }
          case 81: {
            Sonar01 = input.ReadDouble();
            break;
          }
          case 89: {
            Sonar02 = input.ReadDouble();
            break;
          }
          case 97: {
            Sonar03 = input.ReadDouble();
            break;
          }
          case 105: {
            Sonar04 = input.ReadDouble();
            break;
          }
          case 113: {
            Sonar05 = input.ReadDouble();
            break;
          }
          case 121: {
            Sonar06 = input.ReadDouble();
            break;
          }
          case 129: {
            Sonar07 = input.ReadDouble();
            break;
          }
          case 137: {
            Sonar08 = input.ReadDouble();
            break;
          }
          case 145: {
            Sonar09 = input.ReadDouble();
            break;
          }
          case 153: {
            Sonar10 = input.ReadDouble();
            break;
          }
          case 161: {
            Sonar11 = input.ReadDouble();
            break;
          }
          case 168: {
            SonarEnabled = input.ReadBool();
            break;
          }
          case 176: {
            SonarFault = input.ReadBool();
            break;
          }
          case 186:
          case 185: {
            sonarRange_.AddEntriesFrom(input, _repeated_sonarRange_codec);
            break;
          }
          case 194: {
            sonar_.AddEntriesFrom(input, _repeated_sonar_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class License : pb::IMessage<License> {
    private static readonly pb::MessageParser<License> _parser = new pb::MessageParser<License>(() => new License());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<License> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.ChassisReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License(License other) : this() {
      vin_ = other.vin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License Clone() {
      return new License(this);
    }

    /// <summary>Field number for the "vin" field.</summary>
    public const int VinFieldNumber = 1;
    private string vin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vin {
      get { return vin_; }
      set {
        vin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as License);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(License other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vin != other.Vin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vin.Length != 0) hash ^= Vin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Vin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(License other) {
      if (other == null) {
        return;
      }
      if (other.Vin.Length != 0) {
        Vin = other.Vin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Vin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
