// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/lexus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Canbus {

  /// <summary>Holder for reflection information generated from modules/canbus/proto/lexus.proto</summary>
  public static partial class LexusReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/canbus/proto/lexus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LexusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBtb2R1bGVzL2NhbmJ1cy9wcm90by9sZXh1cy5wcm90bxINYXBvbGxvLmNh",
            "bmJ1cyKMAgoVSGF6YXJkX2xpZ2h0c19ycHRfMjE0EhQKDG91dHB1dF92YWx1",
            "ZRgBIAEoCBIXCg9jb21tYW5kZWRfdmFsdWUYAiABKAgSFAoMbWFudWFsX2lu",
            "cHV0GAMgASgIEhUKDXZlaGljbGVfZmF1bHQYBCABKAgSFAoMcGFjbW9kX2Zh",
            "dWx0GAUgASgIEhcKD292ZXJyaWRlX2FjdGl2ZRgGIAEoCBIdChVvdXRwdXRf",
            "cmVwb3J0ZWRfZmF1bHQYByABKAgSGgoSaW5wdXRfb3V0cHV0X2ZhdWx0GAgg",
            "ASgIEg8KB2VuYWJsZWQYCSABKAgSHAoUY29tbWFuZF9vdXRwdXRfZmF1bHQY",
            "CiABKAgikwEKEFN0ZWVyaW5nX2NtZF8xMmMSGAoQaWdub3JlX292ZXJyaWRl",
            "cxgBIAEoCBIOCgZlbmFibGUYAiABKAgSFgoOY2xlYXJfb3ZlcnJpZGUYAyAB",
            "KAgSFAoMY2xlYXJfZmF1bHRzGAQgASgIEhAKCHBvc2l0aW9uGAUgASgBEhUK",
            "DXJvdGF0aW9uX3JhdGUYBiABKAEinwkKG0Rhc2hfY29udHJvbHNfcmlnaHRf",
            "cnB0XzIxMBJRCgxvdXRwdXRfdmFsdWUYASABKA4yOy5hcG9sbG8uY2FuYnVz",
            "LkRhc2hfY29udHJvbHNfcmlnaHRfcnB0XzIxMC5PdXRwdXRfdmFsdWVUeXBl",
            "ElcKD2NvbW1hbmRlZF92YWx1ZRgCIAEoDjI+LmFwb2xsby5jYW5idXMuRGFz",
            "aF9jb250cm9sc19yaWdodF9ycHRfMjEwLkNvbW1hbmRlZF92YWx1ZVR5cGUS",
            "FQoNdmVoaWNsZV9mYXVsdBgDIAEoCBIUCgxwYWNtb2RfZmF1bHQYBCABKAgS",
            "FwoPb3ZlcnJpZGVfYWN0aXZlGAUgASgIEh0KFW91dHB1dF9yZXBvcnRlZF9m",
            "YXVsdBgGIAEoCBIaChJpbnB1dF9vdXRwdXRfZmF1bHQYByABKAgSDwoHZW5h",
            "YmxlZBgIIAEoCBIcChRjb21tYW5kX291dHB1dF9mYXVsdBgJIAEoCBJRCgxt",
            "YW51YWxfaW5wdXQYCiABKA4yOy5hcG9sbG8uY2FuYnVzLkRhc2hfY29udHJv",
            "bHNfcmlnaHRfcnB0XzIxMC5NYW51YWxfaW5wdXRUeXBlIucBChBPdXRwdXRf",
            "dmFsdWVUeXBlEiIKHk9VVFBVVF9WQUxVRV9EQVNIX0NPTlRST0xfTk9ORRAA",
            "EiAKHE9VVFBVVF9WQUxVRV9EQVNIX0NPTlRST0xfT0sQARIiCh5PVVRQVVRf",
            "VkFMVUVfREFTSF9DT05UUk9MX0xFRlQQAhIjCh9PVVRQVVRfVkFMVUVfREFT",
            "SF9DT05UUk9MX1JJR0hUEAMSIAocT1VUUFVUX1ZBTFVFX0RBU0hfQ09OVFJP",
            "TF9VUBAEEiIKHk9VVFBVVF9WQUxVRV9EQVNIX0NPTlRST0xfRE9XThAFIvwB",
            "ChNDb21tYW5kZWRfdmFsdWVUeXBlEiUKIUNPTU1BTkRFRF9WQUxVRV9EQVNI",
            "X0NPTlRST0xfTk9ORRAAEiMKH0NPTU1BTkRFRF9WQUxVRV9EQVNIX0NPTlRS",
            "T0xfT0sQARIlCiFDT01NQU5ERURfVkFMVUVfREFTSF9DT05UUk9MX0xFRlQQ",
            "AhImCiJDT01NQU5ERURfVkFMVUVfREFTSF9DT05UUk9MX1JJR0hUEAMSIwof",
            "Q09NTUFOREVEX1ZBTFVFX0RBU0hfQ09OVFJPTF9VUBAEEiUKIUNPTU1BTkRF",
            "RF9WQUxVRV9EQVNIX0NPTlRST0xfRE9XThAFIucBChBNYW51YWxfaW5wdXRU",
            "eXBlEiIKHk1BTlVBTF9JTlBVVF9EQVNIX0NPTlRST0xfTk9ORRAAEiAKHE1B",
            "TlVBTF9JTlBVVF9EQVNIX0NPTlRST0xfT0sQARIiCh5NQU5VQUxfSU5QVVRf",
            "REFTSF9DT05UUk9MX0xFRlQQAhIjCh9NQU5VQUxfSU5QVVRfREFTSF9DT05U",
            "Uk9MX1JJR0hUEAMSIAocTUFOVUFMX0lOUFVUX0RBU0hfQ09OVFJPTF9VUBAE",
            "EiIKHk1BTlVBTF9JTlBVVF9EQVNIX0NPTlRST0xfRE9XThAFIvgDChpEYXNo",
            "X2NvbnRyb2xzX2xlZnRfY21kXzEwYxIYChBpZ25vcmVfb3ZlcnJpZGVzGAEg",
            "ASgIEg4KBmVuYWJsZRgCIAEoCBIWCg5jbGVhcl9vdmVycmlkZRgDIAEoCBIU",
            "CgxjbGVhcl9mYXVsdHMYBCABKAgSYAoUZGFzaF9jb250cm9sc19idXR0b24Y",
            "BSABKA4yQi5hcG9sbG8uY2FuYnVzLkRhc2hfY29udHJvbHNfbGVmdF9jbWRf",
            "MTBjLkRhc2hfY29udHJvbHNfYnV0dG9uVHlwZSKfAgoYRGFzaF9jb250cm9s",
            "c19idXR0b25UeXBlEioKJkRBU0hfQ09OVFJPTFNfQlVUVE9OX0RBU0hfQ09O",
            "VFJPTF9OT05FEAASKAokREFTSF9DT05UUk9MU19CVVRUT05fREFTSF9DT05U",
            "Uk9MX09LEAESKgomREFTSF9DT05UUk9MU19CVVRUT05fREFTSF9DT05UUk9M",
            "X0xFRlQQAhIrCidEQVNIX0NPTlRST0xTX0JVVFRPTl9EQVNIX0NPTlRST0xf",
            "UklHSFQQAxIoCiREQVNIX0NPTlRST0xTX0JVVFRPTl9EQVNIX0NPTlRST0xf",
            "VVAQBBIqCiZEQVNIX0NPTlRST0xTX0JVVFRPTl9EQVNIX0NPTlRST0xfRE9X",
            "ThAFIocCChBTdGVlcmluZ19ycHRfMjJjEhUKDXZlaGljbGVfZmF1bHQYASAB",
            "KAgSFAoMcGFjbW9kX2ZhdWx0GAIgASgIEhcKD292ZXJyaWRlX2FjdGl2ZRgD",
            "IAEoCBIdChVvdXRwdXRfcmVwb3J0ZWRfZmF1bHQYBCABKAgSGgoSaW5wdXRf",
            "b3V0cHV0X2ZhdWx0GAUgASgIEg8KB2VuYWJsZWQYBiABKAgSHAoUY29tbWFu",
            "ZF9vdXRwdXRfZmF1bHQYByABKAgSFAoMbWFudWFsX2lucHV0GAggASgBEhcK",
            "D2NvbW1hbmRlZF92YWx1ZRgJIAEoARIUCgxvdXRwdXRfdmFsdWUYCiABKAEi",
            "oAEKEFR1cm5fYXV4X3JwdF8zMzASJQodcGFzc19ibGlua2VyX2J1bGJfb25f",
            "aXNfdmFsaWQYASABKAgSHAoUcGFzc19ibGlua2VyX2J1bGJfb24YAiABKAgS",
            "JwofZHJpdmVyX2JsaW5rZXJfYnVsYl9vbl9pc192YWxpZBgDIAEoCBIeChZk",
            "cml2ZXJfYmxpbmtlcl9idWxiX29uGAQgASgIIvoFChFIZWFkbGlnaHRfcnB0",
            "XzIxOBIVCg12ZWhpY2xlX2ZhdWx0GAEgASgIEhQKDHBhY21vZF9mYXVsdBgC",
            "IAEoCBIXCg9vdmVycmlkZV9hY3RpdmUYAyABKAgSHQoVb3V0cHV0X3JlcG9y",
            "dGVkX2ZhdWx0GAQgASgIEhoKEmlucHV0X291dHB1dF9mYXVsdBgFIAEoCBIP",
            "CgdlbmFibGVkGAYgASgIEhwKFGNvbW1hbmRfb3V0cHV0X2ZhdWx0GAcgASgI",
            "EkcKDG91dHB1dF92YWx1ZRgIIAEoDjIxLmFwb2xsby5jYW5idXMuSGVhZGxp",
            "Z2h0X3JwdF8yMTguT3V0cHV0X3ZhbHVlVHlwZRJHCgxtYW51YWxfaW5wdXQY",
            "CSABKA4yMS5hcG9sbG8uY2FuYnVzLkhlYWRsaWdodF9ycHRfMjE4Lk1hbnVh",
            "bF9pbnB1dFR5cGUSTQoPY29tbWFuZGVkX3ZhbHVlGAogASgOMjQuYXBvbGxv",
            "LmNhbmJ1cy5IZWFkbGlnaHRfcnB0XzIxOC5Db21tYW5kZWRfdmFsdWVUeXBl",
            "ImwKEE91dHB1dF92YWx1ZVR5cGUSHwobT1VUUFVUX1ZBTFVFX0hFQURMSUdI",
            "VFNfT0ZGEAASGgoWT1VUUFVUX1ZBTFVFX0xPV19CRUFNUxABEhsKF09VVFBV",
            "VF9WQUxVRV9ISUdIX0JFQU1TEAIibAoQTWFudWFsX2lucHV0VHlwZRIfChtN",
            "QU5VQUxfSU5QVVRfSEVBRExJR0hUU19PRkYQABIaChZNQU5VQUxfSU5QVVRf",
            "TE9XX0JFQU1TEAESGwoXTUFOVUFMX0lOUFVUX0hJR0hfQkVBTVMQAiJ4ChND",
            "b21tYW5kZWRfdmFsdWVUeXBlEiIKHkNPTU1BTkRFRF9WQUxVRV9IRUFETElH",
            "SFRTX09GRhAAEh0KGUNPTU1BTkRFRF9WQUxVRV9MT1dfQkVBTVMQARIeChpD",
            "T01NQU5ERURfVkFMVUVfSElHSF9CRUFNUxACIooBChVIYXphcmRfbGlnaHRz",
            "X2NtZF8xMTQSGQoRaGF6YXJkX2xpZ2h0c19jbWQYASABKAgSGAoQaWdub3Jl",
            "X292ZXJyaWRlcxgCIAEoCBIWCg5jbGVhcl9vdmVycmlkZRgDIAEoCBIOCgZl",
            "bmFibGUYBCABKAgSFAoMY2xlYXJfZmF1bHRzGAUgASgIIpsJChpEYXNoX2Nv",
            "bnRyb2xzX2xlZnRfcnB0XzIwYxJQCgxvdXRwdXRfdmFsdWUYASABKA4yOi5h",
            "cG9sbG8uY2FuYnVzLkRhc2hfY29udHJvbHNfbGVmdF9ycHRfMjBjLk91dHB1",
            "dF92YWx1ZVR5cGUSVgoPY29tbWFuZGVkX3ZhbHVlGAIgASgOMj0uYXBvbGxv",
            "LmNhbmJ1cy5EYXNoX2NvbnRyb2xzX2xlZnRfcnB0XzIwYy5Db21tYW5kZWRf",
            "dmFsdWVUeXBlElAKDG1hbnVhbF9pbnB1dBgDIAEoDjI6LmFwb2xsby5jYW5i",
            "dXMuRGFzaF9jb250cm9sc19sZWZ0X3JwdF8yMGMuTWFudWFsX2lucHV0VHlw",
            "ZRIVCg12ZWhpY2xlX2ZhdWx0GAQgASgIEhQKDHBhY21vZF9mYXVsdBgFIAEo",
            "CBIXCg9vdmVycmlkZV9hY3RpdmUYBiABKAgSHQoVb3V0cHV0X3JlcG9ydGVk",
            "X2ZhdWx0GAcgASgIEhoKEmlucHV0X291dHB1dF9mYXVsdBgIIAEoCBIPCgdl",
            "bmFibGVkGAkgASgIEhwKFGNvbW1hbmRfb3V0cHV0X2ZhdWx0GAogASgIIucB",
            "ChBPdXRwdXRfdmFsdWVUeXBlEiIKHk9VVFBVVF9WQUxVRV9EQVNIX0NPTlRS",
            "T0xfTk9ORRAAEiAKHE9VVFBVVF9WQUxVRV9EQVNIX0NPTlRST0xfT0sQARIi",
            "Ch5PVVRQVVRfVkFMVUVfREFTSF9DT05UUk9MX0xFRlQQAhIjCh9PVVRQVVRf",
            "VkFMVUVfREFTSF9DT05UUk9MX1JJR0hUEAMSIAocT1VUUFVUX1ZBTFVFX0RB",
            "U0hfQ09OVFJPTF9VUBAEEiIKHk9VVFBVVF9WQUxVRV9EQVNIX0NPTlRST0xf",
            "RE9XThAFIvwBChNDb21tYW5kZWRfdmFsdWVUeXBlEiUKIUNPTU1BTkRFRF9W",
            "QUxVRV9EQVNIX0NPTlRST0xfTk9ORRAAEiMKH0NPTU1BTkRFRF9WQUxVRV9E",
            "QVNIX0NPTlRST0xfT0sQARIlCiFDT01NQU5ERURfVkFMVUVfREFTSF9DT05U",
            "Uk9MX0xFRlQQAhImCiJDT01NQU5ERURfVkFMVUVfREFTSF9DT05UUk9MX1JJ",
            "R0hUEAMSIwofQ09NTUFOREVEX1ZBTFVFX0RBU0hfQ09OVFJPTF9VUBAEEiUK",
            "IUNPTU1BTkRFRF9WQUxVRV9EQVNIX0NPTlRST0xfRE9XThAFIucBChBNYW51",
            "YWxfaW5wdXRUeXBlEiIKHk1BTlVBTF9JTlBVVF9EQVNIX0NPTlRST0xfTk9O",
            "RRAAEiAKHE1BTlVBTF9JTlBVVF9EQVNIX0NPTlRST0xfT0sQARIiCh5NQU5V",
            "QUxfSU5QVVRfREFTSF9DT05UUk9MX0xFRlQQAhIjCh9NQU5VQUxfSU5QVVRf",
            "REFTSF9DT05UUk9MX1JJR0hUEAMSIAocTUFOVUFMX0lOUFVUX0RBU0hfQ09O",
            "VFJPTF9VUBAEEiIKHk1BTlVBTF9JTlBVVF9EQVNIX0NPTlRST0xfRE9XThAF",
            "IoAEChVIZWFkbGlnaHRfYXV4X3JwdF8zMTgSIAoYaGVhZGxpZ2h0c19tb2Rl",
            "X2lzX3ZhbGlkGAEgASgIElEKD2hlYWRsaWdodHNfbW9kZRgCIAEoDjI4LmFw",
            "b2xsby5jYW5idXMuSGVhZGxpZ2h0X2F1eF9ycHRfMzE4LkhlYWRsaWdodHNf",
            "bW9kZVR5cGUSHgoWZm9nX2xpZ2h0c19vbl9pc192YWxpZBgDIAEoCBIVCg1m",
            "b2dfbGlnaHRzX29uGAQgASgIEiUKHWhlYWRsaWdodHNfb25fYnJpZ2h0X2lz",
            "X3ZhbGlkGAUgASgIEhwKFGhlYWRsaWdodHNfb25fYnJpZ2h0GAYgASgIEh4K",
            "FmhlYWRsaWdodHNfb25faXNfdmFsaWQYByABKAgSFQoNaGVhZGxpZ2h0c19v",
            "bhgIIAEoCCK+AQoTSGVhZGxpZ2h0c19tb2RlVHlwZRIiCh5IRUFETElHSFRT",
            "X01PREVfSEVBRExJR0hUU19PRkYQABInCiNIRUFETElHSFRTX01PREVfUEFS",
            "S0lOR19MSUdIVFNfT05MWRABEi0KKUhFQURMSUdIVFNfTU9ERV9IRUFETElH",
            "SFRTX09OX01BTlVBTF9NT0RFEAISKwonSEVBRExJR0hUU19NT0RFX0hFQURM",
            "SUdIVFNfT05fQVVUT19NT0RFEAMi+gMKG0Rhc2hfY29udHJvbHNfcmlnaHRf",
            "Y21kXzExMBIYChBpZ25vcmVfb3ZlcnJpZGVzGAEgASgIEg4KBmVuYWJsZRgC",
            "IAEoCBIWCg5jbGVhcl9vdmVycmlkZRgDIAEoCBIUCgxjbGVhcl9mYXVsdHMY",
            "BCABKAgSYQoUZGFzaF9jb250cm9sc19idXR0b24YBSABKA4yQy5hcG9sbG8u",
            "Y2FuYnVzLkRhc2hfY29udHJvbHNfcmlnaHRfY21kXzExMC5EYXNoX2NvbnRy",
            "b2xzX2J1dHRvblR5cGUinwIKGERhc2hfY29udHJvbHNfYnV0dG9uVHlwZRIq",
            "CiZEQVNIX0NPTlRST0xTX0JVVFRPTl9EQVNIX0NPTlRST0xfTk9ORRAAEigK",
            "JERBU0hfQ09OVFJPTFNfQlVUVE9OX0RBU0hfQ09OVFJPTF9PSxABEioKJkRB",
            "U0hfQ09OVFJPTFNfQlVUVE9OX0RBU0hfQ09OVFJPTF9MRUZUEAISKwonREFT",
            "SF9DT05UUk9MU19CVVRUT05fREFTSF9DT05UUk9MX1JJR0hUEAMSKAokREFT",
            "SF9DT05UUk9MU19CVVRUT05fREFTSF9DT05UUk9MX1VQEAQSKgomREFTSF9D",
            "T05UUk9MU19CVVRUT05fREFTSF9DT05UUk9MX0RPV04QBSKPAwoNV2lwZXJf",
            "Y21kXzEzNBIYChBpZ25vcmVfb3ZlcnJpZGVzGAEgASgIEg4KBmVuYWJsZRgC",
            "IAEoCBIWCg5jbGVhcl9vdmVycmlkZRgDIAEoCBI9Cgl3aXBlcl9jbWQYBCAB",
            "KA4yKi5hcG9sbG8uY2FuYnVzLldpcGVyX2NtZF8xMzQuV2lwZXJfY21kVHlw",
            "ZRIUCgxjbGVhcl9mYXVsdHMYBSABKAgi5gEKDVdpcGVyX2NtZFR5cGUSGAoU",
            "V0lQRVJfQ01EX1dJUEVSU19PRkYQABIcChhXSVBFUl9DTURfSU5URVJNSVRU",
            "RU5UXzEQARIcChhXSVBFUl9DTURfSU5URVJNSVRURU5UXzIQAhIcChhXSVBF",
            "Ul9DTURfSU5URVJNSVRURU5UXzMQAxIcChhXSVBFUl9DTURfSU5URVJNSVRU",
            "RU5UXzQQBBIcChhXSVBFUl9DTURfSU5URVJNSVRURU5UXzUQBRIRCg1XSVBF",
            "Ul9DTURfTE9XEAYSEgoOV0lQRVJfQ01EX0hJR0gQByK7CQoNV2lwZXJfcnB0",
            "XzIzNBIVCg12ZWhpY2xlX2ZhdWx0GAEgASgIEhQKDHBhY21vZF9mYXVsdBgC",
            "IAEoCBIXCg9vdmVycmlkZV9hY3RpdmUYAyABKAgSHQoVb3V0cHV0X3JlcG9y",
            "dGVkX2ZhdWx0GAQgASgIEhoKEmlucHV0X291dHB1dF9mYXVsdBgFIAEoCBIP",
            "CgdlbmFibGVkGAYgASgIEhwKFGNvbW1hbmRfb3V0cHV0X2ZhdWx0GAcgASgI",
            "EkMKDG91dHB1dF92YWx1ZRgIIAEoDjItLmFwb2xsby5jYW5idXMuV2lwZXJf",
            "cnB0XzIzNC5PdXRwdXRfdmFsdWVUeXBlEkkKD2NvbW1hbmRlZF92YWx1ZRgJ",
            "IAEoDjIwLmFwb2xsby5jYW5idXMuV2lwZXJfcnB0XzIzNC5Db21tYW5kZWRf",
            "dmFsdWVUeXBlEkMKDG1hbnVhbF9pbnB1dBgKIAEoDjItLmFwb2xsby5jYW5i",
            "dXMuV2lwZXJfcnB0XzIzNC5NYW51YWxfaW5wdXRUeXBlIoECChBPdXRwdXRf",
            "dmFsdWVUeXBlEhsKF09VVFBVVF9WQUxVRV9XSVBFUlNfT0ZGEAASHwobT1VU",
            "UFVUX1ZBTFVFX0lOVEVSTUlUVEVOVF8xEAESHwobT1VUUFVUX1ZBTFVFX0lO",
            "VEVSTUlUVEVOVF8yEAISHwobT1VUUFVUX1ZBTFVFX0lOVEVSTUlUVEVOVF8z",
            "EAMSHwobT1VUUFVUX1ZBTFVFX0lOVEVSTUlUVEVOVF80EAQSHwobT1VUUFVU",
            "X1ZBTFVFX0lOVEVSTUlUVEVOVF81EAUSFAoQT1VUUFVUX1ZBTFVFX0xPVxAG",
            "EhUKEU9VVFBVVF9WQUxVRV9ISUdIEAcinAIKE0NvbW1hbmRlZF92YWx1ZVR5",
            "cGUSHgoaQ09NTUFOREVEX1ZBTFVFX1dJUEVSU19PRkYQABIiCh5DT01NQU5E",
            "RURfVkFMVUVfSU5URVJNSVRURU5UXzEQARIiCh5DT01NQU5ERURfVkFMVUVf",
            "SU5URVJNSVRURU5UXzIQAhIiCh5DT01NQU5ERURfVkFMVUVfSU5URVJNSVRU",
            "RU5UXzMQAxIiCh5DT01NQU5ERURfVkFMVUVfSU5URVJNSVRURU5UXzQQBBIi",
            "Ch5DT01NQU5ERURfVkFMVUVfSU5URVJNSVRURU5UXzUQBRIXChNDT01NQU5E",
            "RURfVkFMVUVfTE9XEAYSGAoUQ09NTUFOREVEX1ZBTFVFX0hJR0gQByKBAgoQ",
            "TWFudWFsX2lucHV0VHlwZRIbChdNQU5VQUxfSU5QVVRfV0lQRVJTX09GRhAA",
            "Eh8KG01BTlVBTF9JTlBVVF9JTlRFUk1JVFRFTlRfMRABEh8KG01BTlVBTF9J",
            "TlBVVF9JTlRFUk1JVFRFTlRfMhACEh8KG01BTlVBTF9JTlBVVF9JTlRFUk1J",
            "VFRFTlRfMxADEh8KG01BTlVBTF9JTlBVVF9JTlRFUk1JVFRFTlRfNBAEEh8K",
            "G01BTlVBTF9JTlBVVF9JTlRFUk1JVFRFTlRfNRAFEhQKEE1BTlVBTF9JTlBV",
            "VF9MT1cQBhIVChFNQU5VQUxfSU5QVVRfSElHSBAHIvkFCgxUdXJuX3JwdF8y",
            "MzASFQoNdmVoaWNsZV9mYXVsdBgBIAEoCBIUCgxwYWNtb2RfZmF1bHQYAiAB",
            "KAgSFwoPb3ZlcnJpZGVfYWN0aXZlGAMgASgIEh0KFW91dHB1dF9yZXBvcnRl",
            "ZF9mYXVsdBgEIAEoCBIaChJpbnB1dF9vdXRwdXRfZmF1bHQYBSABKAgSDwoH",
            "ZW5hYmxlZBgGIAEoCBIcChRjb21tYW5kX291dHB1dF9mYXVsdBgHIAEoCBJC",
            "CgxtYW51YWxfaW5wdXQYCCABKA4yLC5hcG9sbG8uY2FuYnVzLlR1cm5fcnB0",
            "XzIzMC5NYW51YWxfaW5wdXRUeXBlEkgKD2NvbW1hbmRlZF92YWx1ZRgJIAEo",
            "DjIvLmFwb2xsby5jYW5idXMuVHVybl9ycHRfMjMwLkNvbW1hbmRlZF92YWx1",
            "ZVR5cGUSQgoMb3V0cHV0X3ZhbHVlGAogASgOMiwuYXBvbGxvLmNhbmJ1cy5U",
            "dXJuX3JwdF8yMzAuT3V0cHV0X3ZhbHVlVHlwZSJxChBNYW51YWxfaW5wdXRU",
            "eXBlEhYKEk1BTlVBTF9JTlBVVF9SSUdIVBAAEhUKEU1BTlVBTF9JTlBVVF9O",
            "T05FEAESFQoRTUFOVUFMX0lOUFVUX0xFRlQQAhIXChNNQU5VQUxfSU5QVVRf",
            "SEFaQVJEEAMigAEKE0NvbW1hbmRlZF92YWx1ZVR5cGUSGQoVQ09NTUFOREVE",
            "X1ZBTFVFX1JJR0hUEAASGAoUQ09NTUFOREVEX1ZBTFVFX05PTkUQARIYChRD",
            "T01NQU5ERURfVkFMVUVfTEVGVBACEhoKFkNPTU1BTkRFRF9WQUxVRV9IQVpB",
            "UkQQAyJxChBPdXRwdXRfdmFsdWVUeXBlEhYKEk9VVFBVVF9WQUxVRV9SSUdI",
            "VBAAEhUKEU9VVFBVVF9WQUxVRV9OT05FEAESFQoRT1VUUFVUX1ZBTFVFX0xF",
            "RlQQAhIXChNPVVRQVVRfVkFMVUVfSEFaQVJEEAMiqAIKEUhlYWRsaWdodF9j",
            "bWRfMTE4EhgKEGlnbm9yZV9vdmVycmlkZXMYASABKAgSDgoGZW5hYmxlGAIg",
            "ASgIEhYKDmNsZWFyX292ZXJyaWRlGAMgASgIEhQKDGNsZWFyX2ZhdWx0cxgE",
            "IAEoCBJJCg1oZWFkbGlnaHRfY21kGAUgASgOMjIuYXBvbGxvLmNhbmJ1cy5I",
            "ZWFkbGlnaHRfY21kXzExOC5IZWFkbGlnaHRfY21kVHlwZSJwChFIZWFkbGln",
            "aHRfY21kVHlwZRIgChxIRUFETElHSFRfQ01EX0hFQURMSUdIVFNfT0ZGEAAS",
            "GwoXSEVBRExJR0hUX0NNRF9MT1dfQkVBTVMQARIcChhIRUFETElHSFRfQ01E",
            "X0hJR0hfQkVBTVMQAiKnAwoMRG9vcl9ycHRfNDE3Eh8KF2Z1ZWxfZG9vcl9v",
            "cGVuX2lzX3ZhbGlkGAEgASgIEhsKE3RydW5rX29wZW5faXNfdmFsaWQYAiAB",
            "KAgSGgoSaG9vZF9vcGVuX2lzX3ZhbGlkGAMgASgIEiQKHHJlYXJfcGFzc19k",
            "b29yX29wZW5faXNfdmFsaWQYBCABKAgSJgoecmVhcl9kcml2ZXJfZG9vcl9v",
            "cGVuX2lzX3ZhbGlkGAUgASgIEh8KF3Bhc3NfZG9vcl9vcGVuX2lzX3ZhbGlk",
            "GAYgASgIEiEKGWRyaXZlcl9kb29yX29wZW5faXNfdmFsaWQYByABKAgSFgoO",
            "ZnVlbF9kb29yX29wZW4YCCABKAgSEgoKdHJ1bmtfb3BlbhgJIAEoCBIRCglo",
            "b29kX29wZW4YCiABKAgSGwoTcmVhcl9wYXNzX2Rvb3Jfb3BlbhgLIAEoCBId",
            "ChVyZWFyX2RyaXZlcl9kb29yX29wZW4YDCABKAgSFgoOcGFzc19kb29yX29w",
            "ZW4YDSABKAgSGAoQZHJpdmVyX2Rvb3Jfb3BlbhgOIAEoCCLvBAoQQ29tcG9u",
            "ZW50X3JwdF8yMBJKCg5jb21wb25lbnRfdHlwZRgBIAEoDjIyLmFwb2xsby5j",
            "YW5idXMuQ29tcG9uZW50X3JwdF8yMC5Db21wb25lbnRfdHlwZVR5cGUSSgoO",
            "Y29tcG9uZW50X2Z1bmMYAiABKA4yMi5hcG9sbG8uY2FuYnVzLkNvbXBvbmVu",
            "dF9ycHRfMjAuQ29tcG9uZW50X2Z1bmNUeXBlEg8KB2NvdW50ZXIYAyABKAUS",
            "EgoKY29tcGxlbWVudBgEIAEoBRIUCgxjb25maWdfZmF1bHQYBSABKAgiaAoS",
            "Q29tcG9uZW50X3R5cGVUeXBlEhkKFUNPTVBPTkVOVF9UWVBFX1BBQ01PRBAA",
            "EhoKFkNPTVBPTkVOVF9UWVBFX1BBQ01JTkkQARIbChdDT01QT05FTlRfVFlQ",
            "RV9QQUNNSUNSTxACIp0CChJDb21wb25lbnRfZnVuY1R5cGUSGQoVQ09NUE9O",
            "RU5UX0ZVTkNfUEFDTU9EEAASLworQ09NUE9ORU5UX0ZVTkNfU1RFRVJJTkdf",
            "QU5EX1NURUVSSU5HX0NPTFVNThABEioKJkNPTVBPTkVOVF9GVU5DX0FDQ0VM",
            "RVJBVE9SX0FORF9CUkFLSU5HEAISGgoWQ09NUE9ORU5UX0ZVTkNfQlJBS0lO",
            "RxADEhsKF0NPTVBPTkVOVF9GVU5DX1NISUZUSU5HEAQSGwoXQ09NUE9ORU5U",
            "X0ZVTkNfU1RFRVJJTkcQBRIcChhDT01QT05FTlRfRlVOQ19FX1NISUZURVIQ",
            "BhIbChdDT01QT05FTlRfRlVOQ19XQVRDSERPRxAHIo0BChNXaGVlbF9zcGVl",
            "ZF9ycHRfNDA3EhwKFHdoZWVsX3NwZF9yZWFyX3JpZ2h0GAEgASgBEhsKE3do",
            "ZWVsX3NwZF9yZWFyX2xlZnQYAiABKAESHQoVd2hlZWxfc3BkX2Zyb250X3Jp",
            "Z2h0GAMgASgBEhwKFHdoZWVsX3NwZF9mcm9udF9sZWZ0GAQgASgBIkcKGFN0",
            "ZWVyaW5nX21vdG9yX3JwdF8zXzQwNhIVCg10b3JxdWVfb3V0cHV0GAEgASgB",
            "EhQKDHRvcnF1ZV9pbnB1dBgCIAEoASJpChhTdGVlcmluZ19tb3Rvcl9ycHRf",
            "Ml80MDUSGwoTZW5jb2Rlcl90ZW1wZXJhdHVyZRgBIAEoBRIZChFtb3Rvcl90",
            "ZW1wZXJhdHVyZRgCIAEoBRIVCg1hbmd1bGFyX3NwZWVkGAMgASgBIkkKGFN0",
            "ZWVyaW5nX21vdG9yX3JwdF8xXzQwNBIVCg1tb3Rvcl9jdXJyZW50GAEgASgB",
            "EhYKDnNoYWZ0X3Bvc2l0aW9uGAIgASgBIkQKFUJyYWtlX21vdG9yX3JwdF8z",
            "XzQwMxIVCg10b3JxdWVfb3V0cHV0GAEgASgBEhQKDHRvcnF1ZV9pbnB1dBgC",
            "IAEoASJmChVCcmFrZV9tb3Rvcl9ycHRfMl80MDISGwoTZW5jb2Rlcl90ZW1w",
            "ZXJhdHVyZRgBIAEoBRIZChFtb3Rvcl90ZW1wZXJhdHVyZRgCIAEoBRIVCg1h",
            "bmd1bGFyX3NwZWVkGAMgASgBIkYKFUJyYWtlX21vdG9yX3JwdF8xXzQwMRIV",
            "Cg1tb3Rvcl9jdXJyZW50GAEgASgBEhYKDnNoYWZ0X3Bvc2l0aW9uGAIgASgB",
            "ItsCChFXaXBlcl9hdXhfcnB0XzMzNBIcChRzcHJheV9lbXB0eV9pc192YWxp",
            "ZBgBIAEoCBITCgtzcHJheV9lbXB0eRgCIAEoCBIhChlzcHJheV9uZWFyX2Vt",
            "cHR5X2lzX3ZhbGlkGAMgASgIEhgKEHNwcmF5X25lYXJfZW1wdHkYBCABKAgS",
            "HgoWcmVhcl9zcHJheWluZ19pc192YWxpZBgFIAEoCBIVCg1yZWFyX3NwcmF5",
            "aW5nGAYgASgIEhwKFHJlYXJfd2lwaW5nX2lzX3ZhbGlkGAcgASgIEhMKC3Jl",
            "YXJfd2lwaW5nGAggASgIEh8KF2Zyb250X3NwcmF5aW5nX2lzX3ZhbGlkGAkg",
            "ASgIEhYKDmZyb250X3NwcmF5aW5nGAogASgIEh0KFWZyb250X3dpcGluZ19p",
            "c192YWxpZBgLIAEoCBIUCgxmcm9udF93aXBpbmcYDCABKAgioQIKEVNoaWZ0",
            "X2F1eF9ycHRfMzI4EicKH3NwZWVkX2ludGVybG9ja19hY3RpdmVfaXNfdmFs",
            "aWQYASABKAgSHgoWc3BlZWRfaW50ZXJsb2NrX2FjdGl2ZRgCIAEoCBInCh9i",
            "cmFrZV9pbnRlcmxvY2tfYWN0aXZlX2lzX3ZhbGlkGAMgASgIEh4KFmJyYWtl",
            "X2ludGVybG9ja19hY3RpdmUYBCABKAgSJQodc3RheV9pbl9uZXV0cmFsX21v",
            "ZGVfaXNfdmFsaWQYBSABKAgSHAoUc3RheV9pbl9uZXV0cmFsX21vZGUYBiAB",
            "KAgSHgoWYmV0d2Vlbl9nZWFyc19pc192YWxpZBgHIAEoCBIVCg1iZXR3ZWVu",
            "X2dlYXJzGAggASgIIoQCCg1BY2NlbF9ycHRfMjAwEhUKDXZlaGljbGVfZmF1",
            "bHQYASABKAgSFAoMcGFjbW9kX2ZhdWx0GAIgASgIEh0KFW91dHB1dF9yZXBv",
            "cnRlZF9mYXVsdBgDIAEoCBIaChJpbnB1dF9vdXRwdXRfZmF1bHQYBCABKAgS",
            "HAoUY29tbWFuZF9vdXRwdXRfZmF1bHQYBSABKAgSFwoPb3ZlcnJpZGVfYWN0",
            "aXZlGAYgASgIEg8KB2VuYWJsZWQYByABKAgSFAoMbWFudWFsX2lucHV0GAgg",
            "ASgBEhcKD2NvbW1hbmRlZF92YWx1ZRgJIAEoARIUCgxvdXRwdXRfdmFsdWUY",
            "CiABKAEihAIKDUJyYWtlX3JwdF8yMDQSHAoUY29tbWFuZF9vdXRwdXRfZmF1",
            "bHQYASABKAgSFQoNdmVoaWNsZV9mYXVsdBgCIAEoCBIUCgxwYWNtb2RfZmF1",
            "bHQYAyABKAgSFwoPb3ZlcnJpZGVfYWN0aXZlGAQgASgIEh0KFW91dHB1dF9y",
            "ZXBvcnRlZF9mYXVsdBgFIAEoCBIaChJpbnB1dF9vdXRwdXRfZmF1bHQYBiAB",
            "KAgSDwoHZW5hYmxlZBgHIAEoCBIUCgxtYW51YWxfaW5wdXQYCCABKAESFwoP",
            "Y29tbWFuZGVkX3ZhbHVlGAkgASgBEhQKDG91dHB1dF92YWx1ZRgKIAEoASLV",
            "AQoMSG9ybl9jbWRfMTFjEhgKEGlnbm9yZV9vdmVycmlkZXMYASABKAgSDgoG",
            "ZW5hYmxlGAIgASgIEhYKDmNsZWFyX292ZXJyaWRlGAMgASgIEhQKDGNsZWFy",
            "X2ZhdWx0cxgEIAEoCBI6Cghob3JuX2NtZBgFIAEoDjIoLmFwb2xsby5jYW5i",
            "dXMuSG9ybl9jbWRfMTFjLkhvcm5fY21kVHlwZSIxCgxIb3JuX2NtZFR5cGUS",
            "EAoMSE9STl9DTURfT0ZGEAASDwoLSE9STl9DTURfT04QASLHBgoNR2xvYmFs",
            "X3JwdF8xMBIbChNjb25maWdfZmF1bHRfYWN0aXZlGAEgASgIEiAKGHBhY21v",
            "ZF9zdWJzeXN0ZW1fdGltZW91dBgCIAEoCBJVChVwYWNtb2Rfc3lzdGVtX2Vu",
            "YWJsZWQYAyABKA4yNi5hcG9sbG8uY2FuYnVzLkdsb2JhbF9ycHRfMTAuUGFj",
            "bW9kX3N5c3RlbV9lbmFibGVkVHlwZRJlCh1wYWNtb2Rfc3lzdGVtX292ZXJy",
            "aWRlX2FjdGl2ZRgEIAEoDjI+LmFwb2xsby5jYW5idXMuR2xvYmFsX3JwdF8x",
            "MC5QYWNtb2Rfc3lzdGVtX292ZXJyaWRlX2FjdGl2ZVR5cGUSIgoacGFjbW9k",
            "X3N5c3RlbV9mYXVsdF9hY3RpdmUYBSABKAgSFwoPdmVoX2Nhbl90aW1lb3V0",
            "GAYgASgIEhcKD3N0cl9jYW5fdGltZW91dBgHIAEoCBJJCg9icmtfY2FuX3Rp",
            "bWVvdXQYCCABKA4yMC5hcG9sbG8uY2FuYnVzLkdsb2JhbF9ycHRfMTAuQnJr",
            "X2Nhbl90aW1lb3V0VHlwZRIXCg91c3JfY2FuX3RpbWVvdXQYCSABKAgSGwoT",
            "dXNyX2Nhbl9yZWFkX2Vycm9ycxgKIAEoBSJyChlQYWNtb2Rfc3lzdGVtX2Vu",
            "YWJsZWRUeXBlEioKJlBBQ01PRF9TWVNURU1fRU5BQkxFRF9DT05UUk9MX0RJ",
            "U0FCTEVEEAASKQolUEFDTU9EX1NZU1RFTV9FTkFCTEVEX0NPTlRST0xfRU5B",
            "QkxFRBABIoMBCiFQYWNtb2Rfc3lzdGVtX292ZXJyaWRlX2FjdGl2ZVR5cGUS",
            "MAosUEFDTU9EX1NZU1RFTV9PVkVSUklERV9BQ1RJVkVfTk9UX09WRVJSSURE",
            "RU4QABIsCihQQUNNT0RfU1lTVEVNX09WRVJSSURFX0FDVElWRV9PVkVSUklE",
            "REVOEAEiaAoTQnJrX2Nhbl90aW1lb3V0VHlwZRIpCiVCUktfQ0FOX1RJTUVP",
            "VVRfTk9fQUNUSVZFX0NBTl9USU1FT1VUEAASJgoiQlJLX0NBTl9USU1FT1VU",
            "X0FDVElWRV9DQU5fVElNRU9VVBABIsIBChFBY2NlbF9hdXhfcnB0XzMwMBIh",
            "Chl1c2VyX2ludGVyYWN0aW9uX2lzX3ZhbGlkGAEgASgIEhgKEHVzZXJfaW50",
            "ZXJhY3Rpb24YAiABKAgSIAoYcmF3X3BlZGFsX2ZvcmNlX2lzX3ZhbGlkGAMg",
            "ASgIEhcKD3Jhd19wZWRhbF9mb3JjZRgEIAEoARIeChZyYXdfcGVkYWxfcG9z",
            "X2lzX3ZhbGlkGAUgASgIEhUKDXJhd19wZWRhbF9wb3MYBiABKAEijAsKHkNy",
            "dWlzZV9jb250cm9sX2J1dHRvbnNfcnB0XzIwOBJUCgxvdXRwdXRfdmFsdWUY",
            "ASABKA4yPi5hcG9sbG8uY2FuYnVzLkNydWlzZV9jb250cm9sX2J1dHRvbnNf",
            "cnB0XzIwOC5PdXRwdXRfdmFsdWVUeXBlElQKDG1hbnVhbF9pbnB1dBgCIAEo",
            "DjI+LmFwb2xsby5jYW5idXMuQ3J1aXNlX2NvbnRyb2xfYnV0dG9uc19ycHRf",
            "MjA4Lk1hbnVhbF9pbnB1dFR5cGUSWgoPY29tbWFuZGVkX3ZhbHVlGAMgASgO",
            "MkEuYXBvbGxvLmNhbmJ1cy5DcnVpc2VfY29udHJvbF9idXR0b25zX3JwdF8y",
            "MDguQ29tbWFuZGVkX3ZhbHVlVHlwZRIVCg12ZWhpY2xlX2ZhdWx0GAQgASgI",
            "EhQKDHBhY21vZF9mYXVsdBgFIAEoCBIXCg9vdmVycmlkZV9hY3RpdmUYBiAB",
            "KAgSHQoVb3V0cHV0X3JlcG9ydGVkX2ZhdWx0GAcgASgIEhoKEmlucHV0X291",
            "dHB1dF9mYXVsdBgIIAEoCBIPCgdlbmFibGVkGAkgASgIEhwKFGNvbW1hbmRf",
            "b3V0cHV0X2ZhdWx0GAogASgIIrECChBPdXRwdXRfdmFsdWVUeXBlEiQKIE9V",
            "VFBVVF9WQUxVRV9DUlVJU0VfQ09OVFJPTF9OT05FEAASJAogT1VUUFVUX1ZB",
            "TFVFX0NSVUlTRV9DT05UUk9MX0NOQ0wQARIrCidPVVRQVVRfVkFMVUVfQ1JV",
            "SVNFX0NPTlRST0xfQUNDX0ZVUlRIRVIQAhIqCiZPVVRQVVRfVkFMVUVfQ1JV",
            "SVNFX0NPTlRST0xfQUNDX0NMT1NFUhADEicKI09VVFBVVF9WQUxVRV9DUlVJ",
            "U0VfQ09OVFJPTF9TRVRfREVDEAQSJwojT1VUUFVUX1ZBTFVFX0NSVUlTRV9D",
            "T05UUk9MX1JFU19JTkMQBRImCiJPVVRQVVRfVkFMVUVfQ1JVSVNFX0NPTlRS",
            "T0xfT05fT0ZGEAYisQIKEE1hbnVhbF9pbnB1dFR5cGUSJAogTUFOVUFMX0lO",
            "UFVUX0NSVUlTRV9DT05UUk9MX05PTkUQABIkCiBNQU5VQUxfSU5QVVRfQ1JV",
            "SVNFX0NPTlRST0xfQ05DTBABEisKJ01BTlVBTF9JTlBVVF9DUlVJU0VfQ09O",
            "VFJPTF9BQ0NfRlVSVEhFUhACEioKJk1BTlVBTF9JTlBVVF9DUlVJU0VfQ09O",
            "VFJPTF9BQ0NfQ0xPU0VSEAMSJwojTUFOVUFMX0lOUFVUX0NSVUlTRV9DT05U",
            "Uk9MX1NFVF9ERUMQBBInCiNNQU5VQUxfSU5QVVRfQ1JVSVNFX0NPTlRST0xf",
            "UkVTX0lOQxAFEiYKIk1BTlVBTF9JTlBVVF9DUlVJU0VfQ09OVFJPTF9PTl9P",
            "RkYQBiLJAgoTQ29tbWFuZGVkX3ZhbHVlVHlwZRInCiNDT01NQU5ERURfVkFM",
            "VUVfQ1JVSVNFX0NPTlRST0xfTk9ORRAAEicKI0NPTU1BTkRFRF9WQUxVRV9D",
            "UlVJU0VfQ09OVFJPTF9DTkNMEAESLgoqQ09NTUFOREVEX1ZBTFVFX0NSVUlT",
            "RV9DT05UUk9MX0FDQ19GVVJUSEVSEAISLQopQ09NTUFOREVEX1ZBTFVFX0NS",
            "VUlTRV9DT05UUk9MX0FDQ19DTE9TRVIQAxIqCiZDT01NQU5ERURfVkFMVUVf",
            "Q1JVSVNFX0NPTlRST0xfU0VUX0RFQxAEEioKJkNPTU1BTkRFRF9WQUxVRV9D",
            "UlVJU0VfQ09OVFJPTF9SRVNfSU5DEAUSKQolQ09NTUFOREVEX1ZBTFVFX0NS",
            "VUlTRV9DT05UUk9MX09OX09GRhAGIuQBChVWZWhpY2xlX3NwZWVkX3JwdF80",
            "MDASFQoNdmVoaWNsZV9zcGVlZBgBIAEoARJZChN2ZWhpY2xlX3NwZWVkX3Zh",
            "bGlkGAIgASgOMjwuYXBvbGxvLmNhbmJ1cy5WZWhpY2xlX3NwZWVkX3JwdF80",
            "MDAuVmVoaWNsZV9zcGVlZF92YWxpZFR5cGUiWQoXVmVoaWNsZV9zcGVlZF92",
            "YWxpZFR5cGUSHwobVkVISUNMRV9TUEVFRF9WQUxJRF9JTlZBTElEEAASHQoZ",
            "VkVISUNMRV9TUEVFRF9WQUxJRF9WQUxJRBABIrgCChFCcmFrZV9hdXhfcnB0",
            "XzMwNBIdChVicmFrZV9vbl9vZmZfaXNfdmFsaWQYASABKAgSFAoMYnJha2Vf",
            "b25fb2ZmGAIgASgIEiEKGXVzZXJfaW50ZXJhY3Rpb25faXNfdmFsaWQYAyAB",
            "KAgSGAoQdXNlcl9pbnRlcmFjdGlvbhgEIAEoCBIjChtyYXdfYnJha2VfcHJl",
            "c3N1cmVfaXNfdmFsaWQYBSABKAgSGgoScmF3X2JyYWtlX3ByZXNzdXJlGAYg",
            "ASgBEiAKGHJhd19wZWRhbF9mb3JjZV9pc192YWxpZBgHIAEoCBIXCg9yYXdf",
            "cGVkYWxfZm9yY2UYCCABKAESHgoWcmF3X3BlZGFsX3Bvc19pc192YWxpZBgJ",
            "IAEoCBIVCg1yYXdfcGVkYWxfcG9zGAogASgBIrwEChZNZWRpYV9jb250cm9s",
            "c19jbWRfMTIwElgKEm1lZGlhX2NvbnRyb2xzX2NtZBgBIAEoDjI8LmFwb2xs",
            "by5jYW5idXMuTWVkaWFfY29udHJvbHNfY21kXzEyMC5NZWRpYV9jb250cm9s",
            "c19jbWRUeXBlEhgKEGlnbm9yZV9vdmVycmlkZXMYAiABKAgSFgoOY2xlYXJf",
            "b3ZlcnJpZGUYAyABKAgSFAoMY2xlYXJfZmF1bHRzGAQgASgIEg4KBmVuYWJs",
            "ZRgFIAEoCCLvAgoWTWVkaWFfY29udHJvbHNfY21kVHlwZRIpCiVNRURJQV9D",
            "T05UUk9MU19DTURfTUVESUFfQ09OVFJPTF9OT05FEAASMgouTUVESUFfQ09O",
            "VFJPTFNfQ01EX01FRElBX0NPTlRST0xfVk9JQ0VfQ09NTUFORBABEikKJU1F",
            "RElBX0NPTlRST0xTX0NNRF9NRURJQV9DT05UUk9MX01VVEUQAhI2CjJNRURJ",
            "QV9DT05UUk9MU19DTURfTUVESUFfQ09OVFJPTF9QUkVWX1RSQUNLX0FOU1dF",
            "UhADEjcKM01FRElBX0NPTlRST0xTX0NNRF9NRURJQV9DT05UUk9MX05FWFRf",
            "VFJBQ0tfSEFOR19VUBAEEisKJ01FRElBX0NPTlRST0xTX0NNRF9NRURJQV9D",
            "T05UUk9MX1ZPTF9VUBAFEi0KKU1FRElBX0NPTlRST0xTX0NNRF9NRURJQV9D",
            "T05UUk9MX1ZPTF9ET1dOEAYi3AQKHkNydWlzZV9jb250cm9sX2J1dHRvbnNf",
            "Y21kXzEwOBJmChVjcnVpc2VfY29udHJvbF9idXR0b24YASABKA4yRy5hcG9s",
            "bG8uY2FuYnVzLkNydWlzZV9jb250cm9sX2J1dHRvbnNfY21kXzEwOC5DcnVp",
            "c2VfY29udHJvbF9idXR0b25UeXBlEhgKEGlnbm9yZV9vdmVycmlkZXMYAiAB",
            "KAgSFgoOY2xlYXJfb3ZlcnJpZGUYAyABKAgSDgoGZW5hYmxlGAQgASgIEhQK",
            "DGNsZWFyX2ZhdWx0cxgFIAEoCCL5AgoZQ3J1aXNlX2NvbnRyb2xfYnV0dG9u",
            "VHlwZRItCilDUlVJU0VfQ09OVFJPTF9CVVRUT05fQ1JVSVNFX0NPTlRST0xf",
            "Tk9ORRAAEi0KKUNSVUlTRV9DT05UUk9MX0JVVFRPTl9DUlVJU0VfQ09OVFJP",
            "TF9DTkNMEAESNAowQ1JVSVNFX0NPTlRST0xfQlVUVE9OX0NSVUlTRV9DT05U",
            "Uk9MX0FDQ19GVVJUSEVSEAISMwovQ1JVSVNFX0NPTlRST0xfQlVUVE9OX0NS",
            "VUlTRV9DT05UUk9MX0FDQ19DTE9TRVIQAxIwCixDUlVJU0VfQ09OVFJPTF9C",
            "VVRUT05fQ1JVSVNFX0NPTlRST0xfU0VUX0RFQxAEEjAKLENSVUlTRV9DT05U",
            "Uk9MX0JVVFRPTl9DUlVJU0VfQ09OVFJPTF9SRVNfSU5DEAUSLworQ1JVSVNF",
            "X0NPTlRST0xfQlVUVE9OX0NSVUlTRV9DT05UUk9MX09OX09GRhAGIooBChVQ",
            "YXJraW5nX2JyYWtlX2NtZF8xMjQSGAoQaWdub3JlX292ZXJyaWRlcxgBIAEo",
            "CBIOCgZlbmFibGUYAiABKAgSFgoOY2xlYXJfb3ZlcnJpZGUYAyABKAgSGQoR",
            "cGFya2luZ19icmFrZV9jbWQYBCABKAgSFAoMY2xlYXJfZmF1bHRzGAUgASgI",
            "ItYECgxIb3JuX3JwdF8yMWMSFQoNdmVoaWNsZV9mYXVsdBgBIAEoCBIUCgxw",
            "YWNtb2RfZmF1bHQYAiABKAgSFwoPb3ZlcnJpZGVfYWN0aXZlGAMgASgIEh0K",
            "FW91dHB1dF9yZXBvcnRlZF9mYXVsdBgEIAEoCBIaChJpbnB1dF9vdXRwdXRf",
            "ZmF1bHQYBSABKAgSDwoHZW5hYmxlZBgGIAEoCBIcChRjb21tYW5kX291dHB1",
            "dF9mYXVsdBgHIAEoCBJCCgxvdXRwdXRfdmFsdWUYCCABKA4yLC5hcG9sbG8u",
            "Y2FuYnVzLkhvcm5fcnB0XzIxYy5PdXRwdXRfdmFsdWVUeXBlEkgKD2NvbW1h",
            "bmRlZF92YWx1ZRgJIAEoDjIvLmFwb2xsby5jYW5idXMuSG9ybl9ycHRfMjFj",
            "LkNvbW1hbmRlZF92YWx1ZVR5cGUSQgoMbWFudWFsX2lucHV0GAogASgOMiwu",
            "YXBvbGxvLmNhbmJ1cy5Ib3JuX3JwdF8yMWMuTWFudWFsX2lucHV0VHlwZSI9",
            "ChBPdXRwdXRfdmFsdWVUeXBlEhQKEE9VVFBVVF9WQUxVRV9PRkYQABITCg9P",
            "VVRQVVRfVkFMVUVfT04QASJGChNDb21tYW5kZWRfdmFsdWVUeXBlEhcKE0NP",
            "TU1BTkRFRF9WQUxVRV9PRkYQABIWChJDT01NQU5ERURfVkFMVUVfT04QASI9",
            "ChBNYW51YWxfaW5wdXRUeXBlEhQKEE1BTlVBTF9JTlBVVF9PRkYQABITCg9N",
            "QU5VQUxfSU5QVVRfT04QASKdCAoNU2hpZnRfcnB0XzIyOBIVCg12ZWhpY2xl",
            "X2ZhdWx0GAEgASgIEhQKDHBhY21vZF9mYXVsdBgCIAEoCBIXCg9vdmVycmlk",
            "ZV9hY3RpdmUYAyABKAgSHQoVb3V0cHV0X3JlcG9ydGVkX2ZhdWx0GAQgASgI",
            "EhoKEmlucHV0X291dHB1dF9mYXVsdBgFIAEoCBIPCgdlbmFibGVkGAYgASgI",
            "EhwKFGNvbW1hbmRfb3V0cHV0X2ZhdWx0GAcgASgIEkMKDG1hbnVhbF9pbnB1",
            "dBgIIAEoDjItLmFwb2xsby5jYW5idXMuU2hpZnRfcnB0XzIyOC5NYW51YWxf",
            "aW5wdXRUeXBlEkkKD2NvbW1hbmRlZF92YWx1ZRgJIAEoDjIwLmFwb2xsby5j",
            "YW5idXMuU2hpZnRfcnB0XzIyOC5Db21tYW5kZWRfdmFsdWVUeXBlEkMKDG91",
            "dHB1dF92YWx1ZRgKIAEoDjItLmFwb2xsby5jYW5idXMuU2hpZnRfcnB0XzIy",
            "OC5PdXRwdXRfdmFsdWVUeXBlIuEBChBNYW51YWxfaW5wdXRUeXBlEhUKEU1B",
            "TlVBTF9JTlBVVF9QQVJLEAASGAoUTUFOVUFMX0lOUFVUX1JFVkVSU0UQARIY",
            "ChRNQU5VQUxfSU5QVVRfTkVVVFJBTBACEh0KGU1BTlVBTF9JTlBVVF9GT1JX",
            "QVJEX0hJR0gQAxIUChBNQU5VQUxfSU5QVVRfTE9XEAQSHgoaTUFOVUFMX0lO",
            "UFVUX0JFVFdFRU5fR0VBUlMQBRIWChJNQU5VQUxfSU5QVVRfRVJST1IQBhIV",
            "ChFNQU5VQUxfSU5QVVRfTk9ORRAHIr4BChNDb21tYW5kZWRfdmFsdWVUeXBl",
            "EhgKFENPTU1BTkRFRF9WQUxVRV9QQVJLEAASGwoXQ09NTUFOREVEX1ZBTFVF",
            "X1JFVkVSU0UQARIbChdDT01NQU5ERURfVkFMVUVfTkVVVFJBTBACEiAKHENP",
            "TU1BTkRFRF9WQUxVRV9GT1JXQVJEX0hJR0gQAxIXChNDT01NQU5ERURfVkFM",
            "VUVfTE9XEAQSGAoUQ09NTUFOREVEX1ZBTFVFX05PTkUQByLhAQoQT3V0cHV0",
            "X3ZhbHVlVHlwZRIVChFPVVRQVVRfVkFMVUVfUEFSSxAAEhgKFE9VVFBVVF9W",
            "QUxVRV9SRVZFUlNFEAESGAoUT1VUUFVUX1ZBTFVFX05FVVRSQUwQAhIdChlP",
            "VVRQVVRfVkFMVUVfRk9SV0FSRF9ISUdIEAMSFAoQT1VUUFVUX1ZBTFVFX0xP",
            "VxAEEh4KGk9VVFBVVF9WQUxVRV9CRVRXRUVOX0dFQVJTEAUSFgoST1VUUFVU",
            "X1ZBTFVFX0VSUk9SEAYSFQoRT1VUUFVUX1ZBTFVFX05PTkUQByK9AgoNU2hp",
            "ZnRfY21kXzEyOBIYChBpZ25vcmVfb3ZlcnJpZGVzGAEgASgIEg4KBmVuYWJs",
            "ZRgCIAEoCBIWCg5jbGVhcl9vdmVycmlkZRgDIAEoCBIUCgxjbGVhcl9mYXVs",
            "dHMYBCABKAgSPQoJc2hpZnRfY21kGAUgASgOMiouYXBvbGxvLmNhbmJ1cy5T",
            "aGlmdF9jbWRfMTI4LlNoaWZ0X2NtZFR5cGUilAEKDVNoaWZ0X2NtZFR5cGUS",
            "EgoOU0hJRlRfQ01EX1BBUksQABIVChFTSElGVF9DTURfUkVWRVJTRRABEhUK",
            "EVNISUZUX0NNRF9ORVVUUkFMEAISGgoWU0hJRlRfQ01EX0ZPUldBUkRfSElH",
            "SBADEhEKDVNISUZUX0NNRF9MT1cQBBISCg5TSElGVF9DTURfTk9ORRAHInoK",
            "DUFjY2VsX2NtZF8xMDASGAoQaWdub3JlX292ZXJyaWRlcxgBIAEoCBIOCgZl",
            "bmFibGUYAiABKAgSFgoOY2xlYXJfb3ZlcnJpZGUYAyABKAgSFAoMY2xlYXJf",
            "ZmF1bHRzGAQgASgIEhEKCWFjY2VsX2NtZBgFIAEoASKMAgoVUGFya2luZ19i",
            "cmFrZV9ycHRfMjI0EhUKDXZlaGljbGVfZmF1bHQYASABKAgSFAoMcGFjbW9k",
            "X2ZhdWx0GAIgASgIEhcKD292ZXJyaWRlX2FjdGl2ZRgDIAEoCBIdChVvdXRw",
            "dXRfcmVwb3J0ZWRfZmF1bHQYBCABKAgSGgoSaW5wdXRfb3V0cHV0X2ZhdWx0",
            "GAUgASgIEg8KB2VuYWJsZWQYBiABKAgSHAoUY29tbWFuZF9vdXRwdXRfZmF1",
            "bHQYByABKAgSFAoMb3V0cHV0X3ZhbHVlGAggASgIEhcKD2NvbW1hbmRlZF92",
            "YWx1ZRgJIAEoCBIUCgxtYW51YWxfaW5wdXQYCiABKAgiegoNQnJha2VfY21k",
            "XzEwNBIYChBpZ25vcmVfb3ZlcnJpZGVzGAEgASgIEg4KBmVuYWJsZRgCIAEo",
            "CBIWCg5jbGVhcl9vdmVycmlkZRgDIAEoCBIUCgxjbGVhcl9mYXVsdHMYBCAB",
            "KAgSEQoJYnJha2VfY21kGAUgASgBIpYLChZNZWRpYV9jb250cm9sc19ycHRf",
            "MjIwEkwKDG91dHB1dF92YWx1ZRgBIAEoDjI2LmFwb2xsby5jYW5idXMuTWVk",
            "aWFfY29udHJvbHNfcnB0XzIyMC5PdXRwdXRfdmFsdWVUeXBlElIKD2NvbW1h",
            "bmRlZF92YWx1ZRgCIAEoDjI5LmFwb2xsby5jYW5idXMuTWVkaWFfY29udHJv",
            "bHNfcnB0XzIyMC5Db21tYW5kZWRfdmFsdWVUeXBlEkwKDG1hbnVhbF9pbnB1",
            "dBgDIAEoDjI2LmFwb2xsby5jYW5idXMuTWVkaWFfY29udHJvbHNfcnB0XzIy",
            "MC5NYW51YWxfaW5wdXRUeXBlEhUKDXZlaGljbGVfZmF1bHQYBCABKAgSFAoM",
            "cGFjbW9kX2ZhdWx0GAUgASgIEhcKD292ZXJyaWRlX2FjdGl2ZRgGIAEoCBId",
            "ChVvdXRwdXRfcmVwb3J0ZWRfZmF1bHQYByABKAgSGgoSaW5wdXRfb3V0cHV0",
            "X2ZhdWx0GAggASgIEg8KB2VuYWJsZWQYCSABKAgSHAoUY29tbWFuZF9vdXRw",
            "dXRfZmF1bHQYCiABKAgivwIKEE91dHB1dF92YWx1ZVR5cGUSIwofT1VUUFVU",
            "X1ZBTFVFX01FRElBX0NPTlRST0xfTk9ORRAAEiwKKE9VVFBVVF9WQUxVRV9N",
            "RURJQV9DT05UUk9MX1ZPSUNFX0NPTU1BTkQQARIjCh9PVVRQVVRfVkFMVUVf",
            "TUVESUFfQ09OVFJPTF9NVVRFEAISMAosT1VUUFVUX1ZBTFVFX01FRElBX0NP",
            "TlRST0xfUFJFVl9UUkFDS19BTlNXRVIQAxIxCi1PVVRQVVRfVkFMVUVfTUVE",
            "SUFfQ09OVFJPTF9ORVhUX1RSQUNLX0hBTkdfVVAQBBIlCiFPVVRQVVRfVkFM",
            "VUVfTUVESUFfQ09OVFJPTF9WT0xfVVAQBRInCiNPVVRQVVRfVkFMVUVfTUVE",
            "SUFfQ09OVFJPTF9WT0xfRE9XThAGItcCChNDb21tYW5kZWRfdmFsdWVUeXBl",
            "EiYKIkNPTU1BTkRFRF9WQUxVRV9NRURJQV9DT05UUk9MX05PTkUQABIvCitD",
            "T01NQU5ERURfVkFMVUVfTUVESUFfQ09OVFJPTF9WT0lDRV9DT01NQU5EEAES",
            "JgoiQ09NTUFOREVEX1ZBTFVFX01FRElBX0NPTlRST0xfTVVURRACEjMKL0NP",
            "TU1BTkRFRF9WQUxVRV9NRURJQV9DT05UUk9MX1BSRVZfVFJBQ0tfQU5TV0VS",
            "EAMSNAowQ09NTUFOREVEX1ZBTFVFX01FRElBX0NPTlRST0xfTkVYVF9UUkFD",
            "S19IQU5HX1VQEAQSKAokQ09NTUFOREVEX1ZBTFVFX01FRElBX0NPTlRST0xf",
            "Vk9MX1VQEAUSKgomQ09NTUFOREVEX1ZBTFVFX01FRElBX0NPTlRST0xfVk9M",
            "X0RPV04QBiK/AgoQTWFudWFsX2lucHV0VHlwZRIjCh9NQU5VQUxfSU5QVVRf",
            "TUVESUFfQ09OVFJPTF9OT05FEAASLAooTUFOVUFMX0lOUFVUX01FRElBX0NP",
            "TlRST0xfVk9JQ0VfQ09NTUFORBABEiMKH01BTlVBTF9JTlBVVF9NRURJQV9D",
            "T05UUk9MX01VVEUQAhIwCixNQU5VQUxfSU5QVVRfTUVESUFfQ09OVFJPTF9Q",
            "UkVWX1RSQUNLX0FOU1dFUhADEjEKLU1BTlVBTF9JTlBVVF9NRURJQV9DT05U",
            "Uk9MX05FWFRfVFJBQ0tfSEFOR19VUBAEEiUKIU1BTlVBTF9JTlBVVF9NRURJ",
            "QV9DT05UUk9MX1ZPTF9VUBAFEicKI01BTlVBTF9JTlBVVF9NRURJQV9DT05U",
            "Uk9MX1ZPTF9ET1dOEAYi8AEKFFN0ZWVyaW5nX2F1eF9ycHRfMzJjEiEKGXVz",
            "ZXJfaW50ZXJhY3Rpb25faXNfdmFsaWQYASABKAgSGAoQdXNlcl9pbnRlcmFj",
            "dGlvbhgCIAEoCBIeChZyb3RhdGlvbl9yYXRlX2lzX3ZhbGlkGAMgASgIEhUK",
            "DXJvdGF0aW9uX3JhdGUYBCABKAESGwoTcmF3X3RvcnF1ZV9pc192YWxpZBgF",
            "IAEoCBISCgpyYXdfdG9ycXVlGAYgASgBEh0KFXJhd19wb3NpdGlvbl9pc192",
            "YWxpZBgHIAEoCBIUCgxyYXdfcG9zaXRpb24YCCABKAEiyQEKF0xhdF9sb25f",
            "aGVhZGluZ19ycHRfNDBlEg8KB2hlYWRpbmcYASABKAESGQoRbG9uZ2l0dWRl",
            "X3NlY29uZHMYAiABKAUSGQoRbG9uZ2l0dWRlX21pbnV0ZXMYAyABKAUSGQoR",
            "bG9uZ2l0dWRlX2RlZ3JlZXMYBCABKAUSGAoQbGF0aXR1ZGVfc2Vjb25kcxgF",
            "IAEoBRIYChBsYXRpdHVkZV9taW51dGVzGAYgASgFEhgKEGxhdGl0dWRlX2Rl",
            "Z3JlZXMYByABKAUiJAoQWWF3X3JhdGVfcnB0XzQwZBIQCgh5YXdfcmF0ZRgB",
            "IAEoASKJAQoRRGF0ZV90aW1lX3JwdF80MGYSEwoLdGltZV9zZWNvbmQYASAB",
            "KAUSEwoLdGltZV9taW51dGUYAiABKAUSEQoJdGltZV9ob3VyGAMgASgFEhAK",
            "CGRhdGVfZGF5GAQgASgFEhIKCmRhdGVfbW9udGgYBSABKAUSEQoJZGF0ZV95",
            "ZWFyGAYgASgFIkwKC1Zpbl9ycHRfNDE0EhIKCnZlaF9zZXJpYWwYASABKAUS",
            "EwoLdmVoX215X2NvZGUYAiABKAUSFAoMdmVoX21mZ19jb2RlGAMgASgFIrMD",
            "ChFPY2N1cGFuY3lfcnB0XzQxNRImCh5yZWFyX3NlYXRiZWx0X2J1Y2tsZWRf",
            "aXNfdmFsaWQYASABKAgSJgoecGFzc19zZWF0YmVsdF9idWNrbGVkX2lzX3Zh",
            "bGlkGAIgASgIEigKIGRyaXZlcl9zZWF0YmVsdF9idWNrbGVkX2lzX3ZhbGlk",
            "GAMgASgIEiMKG3JlYXJfc2VhdF9vY2N1cGllZF9pc192YWxpZBgEIAEoCBIj",
            "ChtwYXNzX3NlYXRfb2NjdXBpZWRfaXNfdmFsaWQYBSABKAgSJQodZHJpdmVy",
            "X3NlYXRfb2NjdXBpZWRfaXNfdmFsaWQYBiABKAgSHQoVcmVhcl9zZWF0YmVs",
            "dF9idWNrbGVkGAcgASgIEh0KFXBhc3Nfc2VhdGJlbHRfYnVja2xlZBgIIAEo",
            "CBIfChdkcml2ZXJfc2VhdGJlbHRfYnVja2xlZBgJIAEoCBIaChJyZWFyX3Nl",
            "YXRfb2NjdXBpZWQYCiABKAgSGgoScGFzc19zZWF0X29jY3VwaWVkGAsgASgI",
            "EhwKFGRyaXZlcl9zZWF0X29jY3VwaWVkGAwgASgIIrYFChdJbnRlcmlvcl9s",
            "aWdodHNfcnB0XzQxNhIaChJkaW1fbGV2ZWxfaXNfdmFsaWQYASABKAgSHwoX",
            "bW9vZF9saWdodHNfb25faXNfdmFsaWQYAiABKAgSJAoccmVhcl9kb21lX2xp",
            "Z2h0c19vbl9pc192YWxpZBgDIAEoCBIlCh1mcm9udF9kb21lX2xpZ2h0c19v",
            "bl9pc192YWxpZBgEIAEoCBJHCglkaW1fbGV2ZWwYBSABKA4yNC5hcG9sbG8u",
            "Y2FuYnVzLkludGVyaW9yX2xpZ2h0c19ycHRfNDE2LkRpbV9sZXZlbFR5cGUS",
            "FgoObW9vZF9saWdodHNfb24YBiABKAgSGwoTcmVhcl9kb21lX2xpZ2h0c19v",
            "bhgHIAEoCBIcChRmcm9udF9kb21lX2xpZ2h0c19vbhgIIAEoCCL0AgoNRGlt",
            "X2xldmVsVHlwZRIbChdESU1fTEVWRUxfRElNX0xFVkVMX01JThAAEhkKFURJ",
            "TV9MRVZFTF9ESU1fTEVWRUxfMRABEhkKFURJTV9MRVZFTF9ESU1fTEVWRUxf",
            "MhACEhkKFURJTV9MRVZFTF9ESU1fTEVWRUxfMxADEhkKFURJTV9MRVZFTF9E",
            "SU1fTEVWRUxfNBAEEhkKFURJTV9MRVZFTF9ESU1fTEVWRUxfNRAFEhkKFURJ",
            "TV9MRVZFTF9ESU1fTEVWRUxfNhAGEhkKFURJTV9MRVZFTF9ESU1fTEVWRUxf",
            "NxAHEhkKFURJTV9MRVZFTF9ESU1fTEVWRUxfOBAIEhkKFURJTV9MRVZFTF9E",
            "SU1fTEVWRUxfORAJEhoKFkRJTV9MRVZFTF9ESU1fTEVWRUxfMTAQChIaChZE",
            "SU1fTEVWRUxfRElNX0xFVkVMXzExEAsSGwoXRElNX0xFVkVMX0RJTV9MRVZF",
            "TF9NQVgQDCKzAgoMVHVybl9jbWRfMTMwEhgKEGlnbm9yZV9vdmVycmlkZXMY",
            "ASABKAgSDgoGZW5hYmxlGAIgASgIEhYKDmNsZWFyX292ZXJyaWRlGAMgASgI",
            "EhQKDGNsZWFyX2ZhdWx0cxgEIAEoCBJICg90dXJuX3NpZ25hbF9jbWQYBSAB",
            "KA4yLy5hcG9sbG8uY2FuYnVzLlR1cm5fY21kXzEzMC5UdXJuX3NpZ25hbF9j",
            "bWRUeXBlIoABChNUdXJuX3NpZ25hbF9jbWRUeXBlEhkKFVRVUk5fU0lHTkFM",
            "X0NNRF9SSUdIVBAAEhgKFFRVUk5fU0lHTkFMX0NNRF9OT05FEAESGAoUVFVS",
            "Tl9TSUdOQUxfQ01EX0xFRlQQAhIaChZUVVJOX1NJR05BTF9DTURfSEFaQVJE",
            "EAMiaAoXRGV0ZWN0ZWRfb2JqZWN0X3JwdF80MTESJgoeZnJvbnRfb2JqZWN0",
            "X2Rpc3RhbmNlX2hpZ2hfcmVzGAEgASgBEiUKHWZyb250X29iamVjdF9kaXN0",
            "YW5jZV9sb3dfcmVzGAIgASgBIkIKFlZlaF9zcGVjaWZpY19ycHRfMV80MTIS",
            "EwoLc2hpZnRfcG9zXzIYASABKAUSEwoLc2hpZnRfcG9zXzEYAiABKAUiLAoU",
            "VmVoX2R5bmFtaWNzX3JwdF80MTMSFAoMdmVoX2dfZm9yY2VzGAEgASgBIo8B",
            "ChNSZWFyX2xpZ2h0c19ycHRfNDE4EiIKGnJldmVyc2VfbGlnaHRzX29uX2lz",
            "X3ZhbGlkGAEgASgIEiAKGGJyYWtlX2xpZ2h0c19vbl9pc192YWxpZBgCIAEo",
            "CBIZChFyZXZlcnNlX2xpZ2h0c19vbhgDIAEoCBIXCg9icmFrZV9saWdodHNf",
            "b24YBCABKAgilxwKBUxleHVzEkMKFWhhemFyZF9saWdodHNfcnB0XzIxNBgB",
            "IAEoCzIkLmFwb2xsby5jYW5idXMuSGF6YXJkX2xpZ2h0c19ycHRfMjE0EjkK",
            "EHN0ZWVyaW5nX2NtZF8xMmMYAiABKAsyHy5hcG9sbG8uY2FuYnVzLlN0ZWVy",
            "aW5nX2NtZF8xMmMSTwobZGFzaF9jb250cm9sc19yaWdodF9ycHRfMjEwGAMg",
            "ASgLMiouYXBvbGxvLmNhbmJ1cy5EYXNoX2NvbnRyb2xzX3JpZ2h0X3JwdF8y",
            "MTASTQoaZGFzaF9jb250cm9sc19sZWZ0X2NtZF8xMGMYBCABKAsyKS5hcG9s",
            "bG8uY2FuYnVzLkRhc2hfY29udHJvbHNfbGVmdF9jbWRfMTBjEjkKEHN0ZWVy",
            "aW5nX3JwdF8yMmMYBSABKAsyHy5hcG9sbG8uY2FuYnVzLlN0ZWVyaW5nX3Jw",
            "dF8yMmMSOQoQdHVybl9hdXhfcnB0XzMzMBgGIAEoCzIfLmFwb2xsby5jYW5i",
            "dXMuVHVybl9hdXhfcnB0XzMzMBI7ChFoZWFkbGlnaHRfcnB0XzIxOBgHIAEo",
            "CzIgLmFwb2xsby5jYW5idXMuSGVhZGxpZ2h0X3JwdF8yMTgSQwoVaGF6YXJk",
            "X2xpZ2h0c19jbWRfMTE0GAggASgLMiQuYXBvbGxvLmNhbmJ1cy5IYXphcmRf",
            "bGlnaHRzX2NtZF8xMTQSTQoaZGFzaF9jb250cm9sc19sZWZ0X3JwdF8yMGMY",
            "CSABKAsyKS5hcG9sbG8uY2FuYnVzLkRhc2hfY29udHJvbHNfbGVmdF9ycHRf",
            "MjBjEkMKFWhlYWRsaWdodF9hdXhfcnB0XzMxOBgKIAEoCzIkLmFwb2xsby5j",
            "YW5idXMuSGVhZGxpZ2h0X2F1eF9ycHRfMzE4Ek8KG2Rhc2hfY29udHJvbHNf",
            "cmlnaHRfY21kXzExMBgLIAEoCzIqLmFwb2xsby5jYW5idXMuRGFzaF9jb250",
            "cm9sc19yaWdodF9jbWRfMTEwEjMKDXdpcGVyX2NtZF8xMzQYDCABKAsyHC5h",
            "cG9sbG8uY2FuYnVzLldpcGVyX2NtZF8xMzQSMwoNd2lwZXJfcnB0XzIzNBgN",
            "IAEoCzIcLmFwb2xsby5jYW5idXMuV2lwZXJfcnB0XzIzNBIxCgx0dXJuX3Jw",
            "dF8yMzAYDiABKAsyGy5hcG9sbG8uY2FuYnVzLlR1cm5fcnB0XzIzMBI7ChFo",
            "ZWFkbGlnaHRfY21kXzExOBgPIAEoCzIgLmFwb2xsby5jYW5idXMuSGVhZGxp",
            "Z2h0X2NtZF8xMTgSMQoMZG9vcl9ycHRfNDE3GBAgASgLMhsuYXBvbGxvLmNh",
            "bmJ1cy5Eb29yX3JwdF80MTcSOQoQY29tcG9uZW50X3JwdF8yMBgRIAEoCzIf",
            "LmFwb2xsby5jYW5idXMuQ29tcG9uZW50X3JwdF8yMBI/ChN3aGVlbF9zcGVl",
            "ZF9ycHRfNDA3GBIgASgLMiIuYXBvbGxvLmNhbmJ1cy5XaGVlbF9zcGVlZF9y",
            "cHRfNDA3EkkKGHN0ZWVyaW5nX21vdG9yX3JwdF8zXzQwNhgTIAEoCzInLmFw",
            "b2xsby5jYW5idXMuU3RlZXJpbmdfbW90b3JfcnB0XzNfNDA2EkkKGHN0ZWVy",
            "aW5nX21vdG9yX3JwdF8yXzQwNRgUIAEoCzInLmFwb2xsby5jYW5idXMuU3Rl",
            "ZXJpbmdfbW90b3JfcnB0XzJfNDA1EkkKGHN0ZWVyaW5nX21vdG9yX3JwdF8x",
            "XzQwNBgVIAEoCzInLmFwb2xsby5jYW5idXMuU3RlZXJpbmdfbW90b3JfcnB0",
            "XzFfNDA0EkMKFWJyYWtlX21vdG9yX3JwdF8zXzQwMxgWIAEoCzIkLmFwb2xs",
            "by5jYW5idXMuQnJha2VfbW90b3JfcnB0XzNfNDAzEkMKFWJyYWtlX21vdG9y",
            "X3JwdF8yXzQwMhgXIAEoCzIkLmFwb2xsby5jYW5idXMuQnJha2VfbW90b3Jf",
            "cnB0XzJfNDAyEkMKFWJyYWtlX21vdG9yX3JwdF8xXzQwMRgYIAEoCzIkLmFw",
            "b2xsby5jYW5idXMuQnJha2VfbW90b3JfcnB0XzFfNDAxEjsKEXdpcGVyX2F1",
            "eF9ycHRfMzM0GBkgASgLMiAuYXBvbGxvLmNhbmJ1cy5XaXBlcl9hdXhfcnB0",
            "XzMzNBI7ChFzaGlmdF9hdXhfcnB0XzMyOBgaIAEoCzIgLmFwb2xsby5jYW5i",
            "dXMuU2hpZnRfYXV4X3JwdF8zMjgSMwoNYWNjZWxfcnB0XzIwMBgbIAEoCzIc",
            "LmFwb2xsby5jYW5idXMuQWNjZWxfcnB0XzIwMBIzCg1icmFrZV9ycHRfMjA0",
            "GBwgASgLMhwuYXBvbGxvLmNhbmJ1cy5CcmFrZV9ycHRfMjA0EjEKDGhvcm5f",
            "Y21kXzExYxgdIAEoCzIbLmFwb2xsby5jYW5idXMuSG9ybl9jbWRfMTFjEjMK",
            "DWdsb2JhbF9ycHRfMTAYHiABKAsyHC5hcG9sbG8uY2FuYnVzLkdsb2JhbF9y",
            "cHRfMTASOwoRYWNjZWxfYXV4X3JwdF8zMDAYHyABKAsyIC5hcG9sbG8uY2Fu",
            "YnVzLkFjY2VsX2F1eF9ycHRfMzAwElUKHmNydWlzZV9jb250cm9sX2J1dHRv",
            "bnNfcnB0XzIwOBggIAEoCzItLmFwb2xsby5jYW5idXMuQ3J1aXNlX2NvbnRy",
            "b2xfYnV0dG9uc19ycHRfMjA4EkMKFXZlaGljbGVfc3BlZWRfcnB0XzQwMBgh",
            "IAEoCzIkLmFwb2xsby5jYW5idXMuVmVoaWNsZV9zcGVlZF9ycHRfNDAwEjsK",
            "EWJyYWtlX2F1eF9ycHRfMzA0GCIgASgLMiAuYXBvbGxvLmNhbmJ1cy5CcmFr",
            "ZV9hdXhfcnB0XzMwNBJFChZtZWRpYV9jb250cm9sc19jbWRfMTIwGCMgASgL",
            "MiUuYXBvbGxvLmNhbmJ1cy5NZWRpYV9jb250cm9sc19jbWRfMTIwElUKHmNy",
            "dWlzZV9jb250cm9sX2J1dHRvbnNfY21kXzEwOBgkIAEoCzItLmFwb2xsby5j",
            "YW5idXMuQ3J1aXNlX2NvbnRyb2xfYnV0dG9uc19jbWRfMTA4EkMKFXBhcmtp",
            "bmdfYnJha2VfY21kXzEyNBglIAEoCzIkLmFwb2xsby5jYW5idXMuUGFya2lu",
            "Z19icmFrZV9jbWRfMTI0EjEKDGhvcm5fcnB0XzIxYxgmIAEoCzIbLmFwb2xs",
            "by5jYW5idXMuSG9ybl9ycHRfMjFjEjMKDXNoaWZ0X3JwdF8yMjgYJyABKAsy",
            "HC5hcG9sbG8uY2FuYnVzLlNoaWZ0X3JwdF8yMjgSMwoNc2hpZnRfY21kXzEy",
            "OBgoIAEoCzIcLmFwb2xsby5jYW5idXMuU2hpZnRfY21kXzEyOBIzCg1hY2Nl",
            "bF9jbWRfMTAwGCkgASgLMhwuYXBvbGxvLmNhbmJ1cy5BY2NlbF9jbWRfMTAw",
            "EkMKFXBhcmtpbmdfYnJha2VfcnB0XzIyNBgqIAEoCzIkLmFwb2xsby5jYW5i",
            "dXMuUGFya2luZ19icmFrZV9ycHRfMjI0EjMKDWJyYWtlX2NtZF8xMDQYKyAB",
            "KAsyHC5hcG9sbG8uY2FuYnVzLkJyYWtlX2NtZF8xMDQSRQoWbWVkaWFfY29u",
            "dHJvbHNfcnB0XzIyMBgsIAEoCzIlLmFwb2xsby5jYW5idXMuTWVkaWFfY29u",
            "dHJvbHNfcnB0XzIyMBJBChRzdGVlcmluZ19hdXhfcnB0XzMyYxgtIAEoCzIj",
            "LmFwb2xsby5jYW5idXMuU3RlZXJpbmdfYXV4X3JwdF8zMmMSRwoXbGF0X2xv",
            "bl9oZWFkaW5nX3JwdF80MGUYLiABKAsyJi5hcG9sbG8uY2FuYnVzLkxhdF9s",
            "b25faGVhZGluZ19ycHRfNDBlEjkKEHlhd19yYXRlX3JwdF80MGQYLyABKAsy",
            "Hy5hcG9sbG8uY2FuYnVzLllhd19yYXRlX3JwdF80MGQSOwoRZGF0ZV90aW1l",
            "X3JwdF80MGYYMCABKAsyIC5hcG9sbG8uY2FuYnVzLkRhdGVfdGltZV9ycHRf",
            "NDBmEi8KC3Zpbl9ycHRfNDE0GDEgASgLMhouYXBvbGxvLmNhbmJ1cy5WaW5f",
            "cnB0XzQxNBI7ChFvY2N1cGFuY3lfcnB0XzQxNRgyIAEoCzIgLmFwb2xsby5j",
            "YW5idXMuT2NjdXBhbmN5X3JwdF80MTUSRwoXaW50ZXJpb3JfbGlnaHRzX3Jw",
            "dF80MTYYMyABKAsyJi5hcG9sbG8uY2FuYnVzLkludGVyaW9yX2xpZ2h0c19y",
            "cHRfNDE2EjEKDHR1cm5fY21kXzEzMBg0IAEoCzIbLmFwb2xsby5jYW5idXMu",
            "VHVybl9jbWRfMTMwEkcKF2RldGVjdGVkX29iamVjdF9ycHRfNDExGDUgASgL",
            "MiYuYXBvbGxvLmNhbmJ1cy5EZXRlY3RlZF9vYmplY3RfcnB0XzQxMRJFChZ2",
            "ZWhfc3BlY2lmaWNfcnB0XzFfNDEyGDYgASgLMiUuYXBvbGxvLmNhbmJ1cy5W",
            "ZWhfc3BlY2lmaWNfcnB0XzFfNDEyEkEKFHZlaF9keW5hbWljc19ycHRfNDEz",
            "GDcgASgLMiMuYXBvbGxvLmNhbmJ1cy5WZWhfZHluYW1pY3NfcnB0XzQxMxI/",
            "ChNyZWFyX2xpZ2h0c19ycHRfNDE4GDggASgLMiIuYXBvbGxvLmNhbmJ1cy5S",
            "ZWFyX2xpZ2h0c19ycHRfNDE4YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Hazard_lights_rpt_214), global::Apollo.Canbus.Hazard_lights_rpt_214.Parser, new[]{ "OutputValue", "CommandedValue", "ManualInput", "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_cmd_12c), global::Apollo.Canbus.Steering_cmd_12c.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "Position", "RotationRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Dash_controls_right_rpt_210), global::Apollo.Canbus.Dash_controls_right_rpt_210.Parser, new[]{ "OutputValue", "CommandedValue", "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "ManualInput" }, null, new[]{ typeof(global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Output_valueType), typeof(global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Manual_inputType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Dash_controls_left_cmd_10c), global::Apollo.Canbus.Dash_controls_left_cmd_10c.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "DashControlsButton" }, null, new[]{ typeof(global::Apollo.Canbus.Dash_controls_left_cmd_10c.Types.Dash_controls_buttonType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_rpt_22c), global::Apollo.Canbus.Steering_rpt_22c.Parser, new[]{ "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "ManualInput", "CommandedValue", "OutputValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Turn_aux_rpt_330), global::Apollo.Canbus.Turn_aux_rpt_330.Parser, new[]{ "PassBlinkerBulbOnIsValid", "PassBlinkerBulbOn", "DriverBlinkerBulbOnIsValid", "DriverBlinkerBulbOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Headlight_rpt_218), global::Apollo.Canbus.Headlight_rpt_218.Parser, new[]{ "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "OutputValue", "ManualInput", "CommandedValue" }, null, new[]{ typeof(global::Apollo.Canbus.Headlight_rpt_218.Types.Output_valueType), typeof(global::Apollo.Canbus.Headlight_rpt_218.Types.Manual_inputType), typeof(global::Apollo.Canbus.Headlight_rpt_218.Types.Commanded_valueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Hazard_lights_cmd_114), global::Apollo.Canbus.Hazard_lights_cmd_114.Parser, new[]{ "HazardLightsCmd", "IgnoreOverrides", "ClearOverride", "Enable", "ClearFaults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Dash_controls_left_rpt_20c), global::Apollo.Canbus.Dash_controls_left_rpt_20c.Parser, new[]{ "OutputValue", "CommandedValue", "ManualInput", "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault" }, null, new[]{ typeof(global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Output_valueType), typeof(global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Manual_inputType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Headlight_aux_rpt_318), global::Apollo.Canbus.Headlight_aux_rpt_318.Parser, new[]{ "HeadlightsModeIsValid", "HeadlightsMode", "FogLightsOnIsValid", "FogLightsOn", "HeadlightsOnBrightIsValid", "HeadlightsOnBright", "HeadlightsOnIsValid", "HeadlightsOn" }, null, new[]{ typeof(global::Apollo.Canbus.Headlight_aux_rpt_318.Types.Headlights_modeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Dash_controls_right_cmd_110), global::Apollo.Canbus.Dash_controls_right_cmd_110.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "DashControlsButton" }, null, new[]{ typeof(global::Apollo.Canbus.Dash_controls_right_cmd_110.Types.Dash_controls_buttonType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Wiper_cmd_134), global::Apollo.Canbus.Wiper_cmd_134.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "WiperCmd", "ClearFaults" }, null, new[]{ typeof(global::Apollo.Canbus.Wiper_cmd_134.Types.Wiper_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Wiper_rpt_234), global::Apollo.Canbus.Wiper_rpt_234.Parser, new[]{ "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "OutputValue", "CommandedValue", "ManualInput" }, null, new[]{ typeof(global::Apollo.Canbus.Wiper_rpt_234.Types.Output_valueType), typeof(global::Apollo.Canbus.Wiper_rpt_234.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Wiper_rpt_234.Types.Manual_inputType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Turn_rpt_230), global::Apollo.Canbus.Turn_rpt_230.Parser, new[]{ "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "ManualInput", "CommandedValue", "OutputValue" }, null, new[]{ typeof(global::Apollo.Canbus.Turn_rpt_230.Types.Manual_inputType), typeof(global::Apollo.Canbus.Turn_rpt_230.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Turn_rpt_230.Types.Output_valueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Headlight_cmd_118), global::Apollo.Canbus.Headlight_cmd_118.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "HeadlightCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Headlight_cmd_118.Types.Headlight_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Door_rpt_417), global::Apollo.Canbus.Door_rpt_417.Parser, new[]{ "FuelDoorOpenIsValid", "TrunkOpenIsValid", "HoodOpenIsValid", "RearPassDoorOpenIsValid", "RearDriverDoorOpenIsValid", "PassDoorOpenIsValid", "DriverDoorOpenIsValid", "FuelDoorOpen", "TrunkOpen", "HoodOpen", "RearPassDoorOpen", "RearDriverDoorOpen", "PassDoorOpen", "DriverDoorOpen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Component_rpt_20), global::Apollo.Canbus.Component_rpt_20.Parser, new[]{ "ComponentType", "ComponentFunc", "Counter", "Complement", "ConfigFault" }, null, new[]{ typeof(global::Apollo.Canbus.Component_rpt_20.Types.Component_typeType), typeof(global::Apollo.Canbus.Component_rpt_20.Types.Component_funcType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Wheel_speed_rpt_407), global::Apollo.Canbus.Wheel_speed_rpt_407.Parser, new[]{ "WheelSpdRearRight", "WheelSpdRearLeft", "WheelSpdFrontRight", "WheelSpdFrontLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_motor_rpt_3_406), global::Apollo.Canbus.Steering_motor_rpt_3_406.Parser, new[]{ "TorqueOutput", "TorqueInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_motor_rpt_2_405), global::Apollo.Canbus.Steering_motor_rpt_2_405.Parser, new[]{ "EncoderTemperature", "MotorTemperature", "AngularSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_motor_rpt_1_404), global::Apollo.Canbus.Steering_motor_rpt_1_404.Parser, new[]{ "MotorCurrent", "ShaftPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_motor_rpt_3_403), global::Apollo.Canbus.Brake_motor_rpt_3_403.Parser, new[]{ "TorqueOutput", "TorqueInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_motor_rpt_2_402), global::Apollo.Canbus.Brake_motor_rpt_2_402.Parser, new[]{ "EncoderTemperature", "MotorTemperature", "AngularSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_motor_rpt_1_401), global::Apollo.Canbus.Brake_motor_rpt_1_401.Parser, new[]{ "MotorCurrent", "ShaftPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Wiper_aux_rpt_334), global::Apollo.Canbus.Wiper_aux_rpt_334.Parser, new[]{ "SprayEmptyIsValid", "SprayEmpty", "SprayNearEmptyIsValid", "SprayNearEmpty", "RearSprayingIsValid", "RearSpraying", "RearWipingIsValid", "RearWiping", "FrontSprayingIsValid", "FrontSpraying", "FrontWipingIsValid", "FrontWiping" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Shift_aux_rpt_328), global::Apollo.Canbus.Shift_aux_rpt_328.Parser, new[]{ "SpeedInterlockActiveIsValid", "SpeedInterlockActive", "BrakeInterlockActiveIsValid", "BrakeInterlockActive", "StayInNeutralModeIsValid", "StayInNeutralMode", "BetweenGearsIsValid", "BetweenGears" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Accel_rpt_200), global::Apollo.Canbus.Accel_rpt_200.Parser, new[]{ "VehicleFault", "PacmodFault", "OutputReportedFault", "InputOutputFault", "CommandOutputFault", "OverrideActive", "Enabled", "ManualInput", "CommandedValue", "OutputValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_rpt_204), global::Apollo.Canbus.Brake_rpt_204.Parser, new[]{ "CommandOutputFault", "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "ManualInput", "CommandedValue", "OutputValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Horn_cmd_11c), global::Apollo.Canbus.Horn_cmd_11c.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "HornCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Horn_cmd_11c.Types.Horn_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Global_rpt_10), global::Apollo.Canbus.Global_rpt_10.Parser, new[]{ "ConfigFaultActive", "PacmodSubsystemTimeout", "PacmodSystemEnabled", "PacmodSystemOverrideActive", "PacmodSystemFaultActive", "VehCanTimeout", "StrCanTimeout", "BrkCanTimeout", "UsrCanTimeout", "UsrCanReadErrors" }, null, new[]{ typeof(global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_enabledType), typeof(global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_override_activeType), typeof(global::Apollo.Canbus.Global_rpt_10.Types.Brk_can_timeoutType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Accel_aux_rpt_300), global::Apollo.Canbus.Accel_aux_rpt_300.Parser, new[]{ "UserInteractionIsValid", "UserInteraction", "RawPedalForceIsValid", "RawPedalForce", "RawPedalPosIsValid", "RawPedalPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Cruise_control_buttons_rpt_208), global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Parser, new[]{ "OutputValue", "ManualInput", "CommandedValue", "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault" }, null, new[]{ typeof(global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Output_valueType), typeof(global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Manual_inputType), typeof(global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Commanded_valueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Vehicle_speed_rpt_400), global::Apollo.Canbus.Vehicle_speed_rpt_400.Parser, new[]{ "VehicleSpeed", "VehicleSpeedValid" }, null, new[]{ typeof(global::Apollo.Canbus.Vehicle_speed_rpt_400.Types.Vehicle_speed_validType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_aux_rpt_304), global::Apollo.Canbus.Brake_aux_rpt_304.Parser, new[]{ "BrakeOnOffIsValid", "BrakeOnOff", "UserInteractionIsValid", "UserInteraction", "RawBrakePressureIsValid", "RawBrakePressure", "RawPedalForceIsValid", "RawPedalForce", "RawPedalPosIsValid", "RawPedalPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Media_controls_cmd_120), global::Apollo.Canbus.Media_controls_cmd_120.Parser, new[]{ "MediaControlsCmd", "IgnoreOverrides", "ClearOverride", "ClearFaults", "Enable" }, null, new[]{ typeof(global::Apollo.Canbus.Media_controls_cmd_120.Types.Media_controls_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Cruise_control_buttons_cmd_108), global::Apollo.Canbus.Cruise_control_buttons_cmd_108.Parser, new[]{ "CruiseControlButton", "IgnoreOverrides", "ClearOverride", "Enable", "ClearFaults" }, null, new[]{ typeof(global::Apollo.Canbus.Cruise_control_buttons_cmd_108.Types.Cruise_control_buttonType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Parking_brake_cmd_124), global::Apollo.Canbus.Parking_brake_cmd_124.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ParkingBrakeCmd", "ClearFaults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Horn_rpt_21c), global::Apollo.Canbus.Horn_rpt_21c.Parser, new[]{ "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "OutputValue", "CommandedValue", "ManualInput" }, null, new[]{ typeof(global::Apollo.Canbus.Horn_rpt_21c.Types.Output_valueType), typeof(global::Apollo.Canbus.Horn_rpt_21c.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Horn_rpt_21c.Types.Manual_inputType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Shift_rpt_228), global::Apollo.Canbus.Shift_rpt_228.Parser, new[]{ "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "ManualInput", "CommandedValue", "OutputValue" }, null, new[]{ typeof(global::Apollo.Canbus.Shift_rpt_228.Types.Manual_inputType), typeof(global::Apollo.Canbus.Shift_rpt_228.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Shift_rpt_228.Types.Output_valueType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Shift_cmd_128), global::Apollo.Canbus.Shift_cmd_128.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "ShiftCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Shift_cmd_128.Types.Shift_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Accel_cmd_100), global::Apollo.Canbus.Accel_cmd_100.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "AccelCmd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Parking_brake_rpt_224), global::Apollo.Canbus.Parking_brake_rpt_224.Parser, new[]{ "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault", "OutputValue", "CommandedValue", "ManualInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Brake_cmd_104), global::Apollo.Canbus.Brake_cmd_104.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "BrakeCmd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Media_controls_rpt_220), global::Apollo.Canbus.Media_controls_rpt_220.Parser, new[]{ "OutputValue", "CommandedValue", "ManualInput", "VehicleFault", "PacmodFault", "OverrideActive", "OutputReportedFault", "InputOutputFault", "Enabled", "CommandOutputFault" }, null, new[]{ typeof(global::Apollo.Canbus.Media_controls_rpt_220.Types.Output_valueType), typeof(global::Apollo.Canbus.Media_controls_rpt_220.Types.Commanded_valueType), typeof(global::Apollo.Canbus.Media_controls_rpt_220.Types.Manual_inputType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Steering_aux_rpt_32c), global::Apollo.Canbus.Steering_aux_rpt_32c.Parser, new[]{ "UserInteractionIsValid", "UserInteraction", "RotationRateIsValid", "RotationRate", "RawTorqueIsValid", "RawTorque", "RawPositionIsValid", "RawPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Lat_lon_heading_rpt_40e), global::Apollo.Canbus.Lat_lon_heading_rpt_40e.Parser, new[]{ "Heading", "LongitudeSeconds", "LongitudeMinutes", "LongitudeDegrees", "LatitudeSeconds", "LatitudeMinutes", "LatitudeDegrees" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Yaw_rate_rpt_40d), global::Apollo.Canbus.Yaw_rate_rpt_40d.Parser, new[]{ "YawRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Date_time_rpt_40f), global::Apollo.Canbus.Date_time_rpt_40f.Parser, new[]{ "TimeSecond", "TimeMinute", "TimeHour", "DateDay", "DateMonth", "DateYear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Vin_rpt_414), global::Apollo.Canbus.Vin_rpt_414.Parser, new[]{ "VehSerial", "VehMyCode", "VehMfgCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Occupancy_rpt_415), global::Apollo.Canbus.Occupancy_rpt_415.Parser, new[]{ "RearSeatbeltBuckledIsValid", "PassSeatbeltBuckledIsValid", "DriverSeatbeltBuckledIsValid", "RearSeatOccupiedIsValid", "PassSeatOccupiedIsValid", "DriverSeatOccupiedIsValid", "RearSeatbeltBuckled", "PassSeatbeltBuckled", "DriverSeatbeltBuckled", "RearSeatOccupied", "PassSeatOccupied", "DriverSeatOccupied" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Interior_lights_rpt_416), global::Apollo.Canbus.Interior_lights_rpt_416.Parser, new[]{ "DimLevelIsValid", "MoodLightsOnIsValid", "RearDomeLightsOnIsValid", "FrontDomeLightsOnIsValid", "DimLevel", "MoodLightsOn", "RearDomeLightsOn", "FrontDomeLightsOn" }, null, new[]{ typeof(global::Apollo.Canbus.Interior_lights_rpt_416.Types.Dim_levelType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Turn_cmd_130), global::Apollo.Canbus.Turn_cmd_130.Parser, new[]{ "IgnoreOverrides", "Enable", "ClearOverride", "ClearFaults", "TurnSignalCmd" }, null, new[]{ typeof(global::Apollo.Canbus.Turn_cmd_130.Types.Turn_signal_cmdType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Detected_object_rpt_411), global::Apollo.Canbus.Detected_object_rpt_411.Parser, new[]{ "FrontObjectDistanceHighRes", "FrontObjectDistanceLowRes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Veh_specific_rpt_1_412), global::Apollo.Canbus.Veh_specific_rpt_1_412.Parser, new[]{ "ShiftPos2", "ShiftPos1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Veh_dynamics_rpt_413), global::Apollo.Canbus.Veh_dynamics_rpt_413.Parser, new[]{ "VehGForces" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Rear_lights_rpt_418), global::Apollo.Canbus.Rear_lights_rpt_418.Parser, new[]{ "ReverseLightsOnIsValid", "BrakeLightsOnIsValid", "ReverseLightsOn", "BrakeLightsOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Lexus), global::Apollo.Canbus.Lexus.Parser, new[]{ "HazardLightsRpt214", "SteeringCmd12C", "DashControlsRightRpt210", "DashControlsLeftCmd10C", "SteeringRpt22C", "TurnAuxRpt330", "HeadlightRpt218", "HazardLightsCmd114", "DashControlsLeftRpt20C", "HeadlightAuxRpt318", "DashControlsRightCmd110", "WiperCmd134", "WiperRpt234", "TurnRpt230", "HeadlightCmd118", "DoorRpt417", "ComponentRpt20", "WheelSpeedRpt407", "SteeringMotorRpt3406", "SteeringMotorRpt2405", "SteeringMotorRpt1404", "BrakeMotorRpt3403", "BrakeMotorRpt2402", "BrakeMotorRpt1401", "WiperAuxRpt334", "ShiftAuxRpt328", "AccelRpt200", "BrakeRpt204", "HornCmd11C", "GlobalRpt10", "AccelAuxRpt300", "CruiseControlButtonsRpt208", "VehicleSpeedRpt400", "BrakeAuxRpt304", "MediaControlsCmd120", "CruiseControlButtonsCmd108", "ParkingBrakeCmd124", "HornRpt21C", "ShiftRpt228", "ShiftCmd128", "AccelCmd100", "ParkingBrakeRpt224", "BrakeCmd104", "MediaControlsRpt220", "SteeringAuxRpt32C", "LatLonHeadingRpt40E", "YawRateRpt40D", "DateTimeRpt40F", "VinRpt414", "OccupancyRpt415", "InteriorLightsRpt416", "TurnCmd130", "DetectedObjectRpt411", "VehSpecificRpt1412", "VehDynamicsRpt413", "RearLightsRpt418" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Hazard_lights_rpt_214 : pb::IMessage<Hazard_lights_rpt_214> {
    private static readonly pb::MessageParser<Hazard_lights_rpt_214> _parser = new pb::MessageParser<Hazard_lights_rpt_214>(() => new Hazard_lights_rpt_214());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hazard_lights_rpt_214> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hazard_lights_rpt_214() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hazard_lights_rpt_214(Hazard_lights_rpt_214 other) : this() {
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hazard_lights_rpt_214 Clone() {
      return new Hazard_lights_rpt_214(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private bool outputValue_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private bool commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 3;
    private bool manualInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 4;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 5;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 6;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 7;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 8;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 9;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 10;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hazard_lights_rpt_214);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hazard_lights_rpt_214 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != false) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != false) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != false) hash ^= ManualInput.GetHashCode();
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != false) {
        output.WriteRawTag(8);
        output.WriteBool(OutputValue);
      }
      if (CommandedValue != false) {
        output.WriteRawTag(16);
        output.WriteBool(CommandedValue);
      }
      if (ManualInput != false) {
        output.WriteRawTag(24);
        output.WriteBool(ManualInput);
      }
      if (VehicleFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(48);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(64);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(80);
        output.WriteBool(CommandOutputFault);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != false) {
        size += 1 + 1;
      }
      if (CommandedValue != false) {
        size += 1 + 1;
      }
      if (ManualInput != false) {
        size += 1 + 1;
      }
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hazard_lights_rpt_214 other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != false) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != false) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != false) {
        ManualInput = other.ManualInput;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OutputValue = input.ReadBool();
            break;
          }
          case 16: {
            CommandedValue = input.ReadBool();
            break;
          }
          case 24: {
            ManualInput = input.ReadBool();
            break;
          }
          case 32: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 40: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 48: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 56: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 64: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 72: {
            Enabled = input.ReadBool();
            break;
          }
          case 80: {
            CommandOutputFault = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steering_cmd_12c : pb::IMessage<Steering_cmd_12c> {
    private static readonly pb::MessageParser<Steering_cmd_12c> _parser = new pb::MessageParser<Steering_cmd_12c>(() => new Steering_cmd_12c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_cmd_12c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_cmd_12c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_cmd_12c(Steering_cmd_12c other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      position_ = other.position_;
      rotationRate_ = other.rotationRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_cmd_12c Clone() {
      return new Steering_cmd_12c(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private double position_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation_rate" field.</summary>
    public const int RotationRateFieldNumber = 6;
    private double rotationRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationRate {
      get { return rotationRate_; }
      set {
        rotationRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_cmd_12c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_cmd_12c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (Position != other.Position) return false;
      if (RotationRate != other.RotationRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (Position != 0D) hash ^= Position.GetHashCode();
      if (RotationRate != 0D) hash ^= RotationRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (Position != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Position);
      }
      if (RotationRate != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RotationRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (Position != 0D) {
        size += 1 + 8;
      }
      if (RotationRate != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_cmd_12c other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.Position != 0D) {
        Position = other.Position;
      }
      if (other.RotationRate != 0D) {
        RotationRate = other.RotationRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 41: {
            Position = input.ReadDouble();
            break;
          }
          case 49: {
            RotationRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dash_controls_right_rpt_210 : pb::IMessage<Dash_controls_right_rpt_210> {
    private static readonly pb::MessageParser<Dash_controls_right_rpt_210> _parser = new pb::MessageParser<Dash_controls_right_rpt_210>(() => new Dash_controls_right_rpt_210());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dash_controls_right_rpt_210> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_right_rpt_210() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_right_rpt_210(Dash_controls_right_rpt_210 other) : this() {
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      manualInput_ = other.manualInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_right_rpt_210 Clone() {
      return new Dash_controls_right_rpt_210(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 3;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 4;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 5;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 6;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 7;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 8;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 9;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 10;
    private global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dash_controls_right_rpt_210);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dash_controls_right_rpt_210 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (ManualInput != other.ManualInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OutputValue);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandedValue);
      }
      if (VehicleFault != false) {
        output.WriteRawTag(24);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(48);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(72);
        output.WriteBool(CommandOutputFault);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ManualInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dash_controls_right_rpt_210 other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            outputValue_ = (global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 16: {
            commandedValue_ = (global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 24: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 32: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 40: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 48: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 56: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 64: {
            Enabled = input.ReadBool();
            break;
          }
          case 72: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 80: {
            manualInput_ = (global::Apollo.Canbus.Dash_controls_right_rpt_210.Types.Manual_inputType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Dash_controls_right_rpt_210 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_NONE")] OutputValueDashControlNone = 0,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_OK")] OutputValueDashControlOk = 1,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_LEFT")] OutputValueDashControlLeft = 2,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_RIGHT")] OutputValueDashControlRight = 3,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_UP")] OutputValueDashControlUp = 4,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_DOWN")] OutputValueDashControlDown = 5,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_NONE")] CommandedValueDashControlNone = 0,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_OK")] CommandedValueDashControlOk = 1,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_LEFT")] CommandedValueDashControlLeft = 2,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_RIGHT")] CommandedValueDashControlRight = 3,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_UP")] CommandedValueDashControlUp = 4,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_DOWN")] CommandedValueDashControlDown = 5,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_NONE")] ManualInputDashControlNone = 0,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_OK")] ManualInputDashControlOk = 1,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_LEFT")] ManualInputDashControlLeft = 2,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_RIGHT")] ManualInputDashControlRight = 3,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_UP")] ManualInputDashControlUp = 4,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_DOWN")] ManualInputDashControlDown = 5,
      }

    }
    #endregion

  }

  public sealed partial class Dash_controls_left_cmd_10c : pb::IMessage<Dash_controls_left_cmd_10c> {
    private static readonly pb::MessageParser<Dash_controls_left_cmd_10c> _parser = new pb::MessageParser<Dash_controls_left_cmd_10c>(() => new Dash_controls_left_cmd_10c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dash_controls_left_cmd_10c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_left_cmd_10c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_left_cmd_10c(Dash_controls_left_cmd_10c other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      dashControlsButton_ = other.dashControlsButton_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_left_cmd_10c Clone() {
      return new Dash_controls_left_cmd_10c(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "dash_controls_button" field.</summary>
    public const int DashControlsButtonFieldNumber = 5;
    private global::Apollo.Canbus.Dash_controls_left_cmd_10c.Types.Dash_controls_buttonType dashControlsButton_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_left_cmd_10c.Types.Dash_controls_buttonType DashControlsButton {
      get { return dashControlsButton_; }
      set {
        dashControlsButton_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dash_controls_left_cmd_10c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dash_controls_left_cmd_10c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (DashControlsButton != other.DashControlsButton) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (DashControlsButton != 0) hash ^= DashControlsButton.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (DashControlsButton != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DashControlsButton);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (DashControlsButton != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DashControlsButton);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dash_controls_left_cmd_10c other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.DashControlsButton != 0) {
        DashControlsButton = other.DashControlsButton;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 40: {
            dashControlsButton_ = (global::Apollo.Canbus.Dash_controls_left_cmd_10c.Types.Dash_controls_buttonType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Dash_controls_left_cmd_10c message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Dash_controls_buttonType {
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE")] DashControlsButtonDashControlNone = 0,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_OK")] DashControlsButtonDashControlOk = 1,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT")] DashControlsButtonDashControlLeft = 2,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT")] DashControlsButtonDashControlRight = 3,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_UP")] DashControlsButtonDashControlUp = 4,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN")] DashControlsButtonDashControlDown = 5,
      }

    }
    #endregion

  }

  public sealed partial class Steering_rpt_22c : pb::IMessage<Steering_rpt_22c> {
    private static readonly pb::MessageParser<Steering_rpt_22c> _parser = new pb::MessageParser<Steering_rpt_22c>(() => new Steering_rpt_22c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_rpt_22c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_rpt_22c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_rpt_22c(Steering_rpt_22c other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_rpt_22c Clone() {
      return new Steering_rpt_22c(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 3;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 4;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 5;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 7;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 8;
    private double manualInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private double commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 10;
    private double outputValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_rpt_22c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_rpt_22c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (ManualInput != 0D) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0D) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0D) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(CommandOutputFault);
      }
      if (ManualInput != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ManualInput);
      }
      if (CommandedValue != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CommandedValue);
      }
      if (OutputValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (ManualInput != 0D) {
        size += 1 + 8;
      }
      if (CommandedValue != 0D) {
        size += 1 + 8;
      }
      if (OutputValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_rpt_22c other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.ManualInput != 0D) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0D) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0D) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 32: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 40: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 65: {
            ManualInput = input.ReadDouble();
            break;
          }
          case 73: {
            CommandedValue = input.ReadDouble();
            break;
          }
          case 81: {
            OutputValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Turn_aux_rpt_330 : pb::IMessage<Turn_aux_rpt_330> {
    private static readonly pb::MessageParser<Turn_aux_rpt_330> _parser = new pb::MessageParser<Turn_aux_rpt_330>(() => new Turn_aux_rpt_330());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Turn_aux_rpt_330> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_aux_rpt_330() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_aux_rpt_330(Turn_aux_rpt_330 other) : this() {
      passBlinkerBulbOnIsValid_ = other.passBlinkerBulbOnIsValid_;
      passBlinkerBulbOn_ = other.passBlinkerBulbOn_;
      driverBlinkerBulbOnIsValid_ = other.driverBlinkerBulbOnIsValid_;
      driverBlinkerBulbOn_ = other.driverBlinkerBulbOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_aux_rpt_330 Clone() {
      return new Turn_aux_rpt_330(this);
    }

    /// <summary>Field number for the "pass_blinker_bulb_on_is_valid" field.</summary>
    public const int PassBlinkerBulbOnIsValidFieldNumber = 1;
    private bool passBlinkerBulbOnIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassBlinkerBulbOnIsValid {
      get { return passBlinkerBulbOnIsValid_; }
      set {
        passBlinkerBulbOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "pass_blinker_bulb_on" field.</summary>
    public const int PassBlinkerBulbOnFieldNumber = 2;
    private bool passBlinkerBulbOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassBlinkerBulbOn {
      get { return passBlinkerBulbOn_; }
      set {
        passBlinkerBulbOn_ = value;
      }
    }

    /// <summary>Field number for the "driver_blinker_bulb_on_is_valid" field.</summary>
    public const int DriverBlinkerBulbOnIsValidFieldNumber = 3;
    private bool driverBlinkerBulbOnIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverBlinkerBulbOnIsValid {
      get { return driverBlinkerBulbOnIsValid_; }
      set {
        driverBlinkerBulbOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "driver_blinker_bulb_on" field.</summary>
    public const int DriverBlinkerBulbOnFieldNumber = 4;
    private bool driverBlinkerBulbOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverBlinkerBulbOn {
      get { return driverBlinkerBulbOn_; }
      set {
        driverBlinkerBulbOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Turn_aux_rpt_330);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Turn_aux_rpt_330 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PassBlinkerBulbOnIsValid != other.PassBlinkerBulbOnIsValid) return false;
      if (PassBlinkerBulbOn != other.PassBlinkerBulbOn) return false;
      if (DriverBlinkerBulbOnIsValid != other.DriverBlinkerBulbOnIsValid) return false;
      if (DriverBlinkerBulbOn != other.DriverBlinkerBulbOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PassBlinkerBulbOnIsValid != false) hash ^= PassBlinkerBulbOnIsValid.GetHashCode();
      if (PassBlinkerBulbOn != false) hash ^= PassBlinkerBulbOn.GetHashCode();
      if (DriverBlinkerBulbOnIsValid != false) hash ^= DriverBlinkerBulbOnIsValid.GetHashCode();
      if (DriverBlinkerBulbOn != false) hash ^= DriverBlinkerBulbOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PassBlinkerBulbOnIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(PassBlinkerBulbOnIsValid);
      }
      if (PassBlinkerBulbOn != false) {
        output.WriteRawTag(16);
        output.WriteBool(PassBlinkerBulbOn);
      }
      if (DriverBlinkerBulbOnIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(DriverBlinkerBulbOnIsValid);
      }
      if (DriverBlinkerBulbOn != false) {
        output.WriteRawTag(32);
        output.WriteBool(DriverBlinkerBulbOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PassBlinkerBulbOnIsValid != false) {
        size += 1 + 1;
      }
      if (PassBlinkerBulbOn != false) {
        size += 1 + 1;
      }
      if (DriverBlinkerBulbOnIsValid != false) {
        size += 1 + 1;
      }
      if (DriverBlinkerBulbOn != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Turn_aux_rpt_330 other) {
      if (other == null) {
        return;
      }
      if (other.PassBlinkerBulbOnIsValid != false) {
        PassBlinkerBulbOnIsValid = other.PassBlinkerBulbOnIsValid;
      }
      if (other.PassBlinkerBulbOn != false) {
        PassBlinkerBulbOn = other.PassBlinkerBulbOn;
      }
      if (other.DriverBlinkerBulbOnIsValid != false) {
        DriverBlinkerBulbOnIsValid = other.DriverBlinkerBulbOnIsValid;
      }
      if (other.DriverBlinkerBulbOn != false) {
        DriverBlinkerBulbOn = other.DriverBlinkerBulbOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PassBlinkerBulbOnIsValid = input.ReadBool();
            break;
          }
          case 16: {
            PassBlinkerBulbOn = input.ReadBool();
            break;
          }
          case 24: {
            DriverBlinkerBulbOnIsValid = input.ReadBool();
            break;
          }
          case 32: {
            DriverBlinkerBulbOn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Headlight_rpt_218 : pb::IMessage<Headlight_rpt_218> {
    private static readonly pb::MessageParser<Headlight_rpt_218> _parser = new pb::MessageParser<Headlight_rpt_218>(() => new Headlight_rpt_218());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Headlight_rpt_218> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_rpt_218() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_rpt_218(Headlight_rpt_218 other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      outputValue_ = other.outputValue_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_rpt_218 Clone() {
      return new Headlight_rpt_218(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 3;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 4;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 5;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 7;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 8;
    private global::Apollo.Canbus.Headlight_rpt_218.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_218.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 9;
    private global::Apollo.Canbus.Headlight_rpt_218.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_218.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 10;
    private global::Apollo.Canbus.Headlight_rpt_218.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_218.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Headlight_rpt_218);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Headlight_rpt_218 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (OutputValue != other.OutputValue) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(CommandOutputFault);
      }
      if (OutputValue != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OutputValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ManualInput);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CommandedValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Headlight_rpt_218 other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 32: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 40: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 64: {
            outputValue_ = (global::Apollo.Canbus.Headlight_rpt_218.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 72: {
            manualInput_ = (global::Apollo.Canbus.Headlight_rpt_218.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 80: {
            commandedValue_ = (global::Apollo.Canbus.Headlight_rpt_218.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Headlight_rpt_218 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_HEADLIGHTS_OFF")] OutputValueHeadlightsOff = 0,
        [pbr::OriginalName("OUTPUT_VALUE_LOW_BEAMS")] OutputValueLowBeams = 1,
        [pbr::OriginalName("OUTPUT_VALUE_HIGH_BEAMS")] OutputValueHighBeams = 2,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_HEADLIGHTS_OFF")] ManualInputHeadlightsOff = 0,
        [pbr::OriginalName("MANUAL_INPUT_LOW_BEAMS")] ManualInputLowBeams = 1,
        [pbr::OriginalName("MANUAL_INPUT_HIGH_BEAMS")] ManualInputHighBeams = 2,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_HEADLIGHTS_OFF")] CommandedValueHeadlightsOff = 0,
        [pbr::OriginalName("COMMANDED_VALUE_LOW_BEAMS")] CommandedValueLowBeams = 1,
        [pbr::OriginalName("COMMANDED_VALUE_HIGH_BEAMS")] CommandedValueHighBeams = 2,
      }

    }
    #endregion

  }

  public sealed partial class Hazard_lights_cmd_114 : pb::IMessage<Hazard_lights_cmd_114> {
    private static readonly pb::MessageParser<Hazard_lights_cmd_114> _parser = new pb::MessageParser<Hazard_lights_cmd_114>(() => new Hazard_lights_cmd_114());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hazard_lights_cmd_114> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hazard_lights_cmd_114() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hazard_lights_cmd_114(Hazard_lights_cmd_114 other) : this() {
      hazardLightsCmd_ = other.hazardLightsCmd_;
      ignoreOverrides_ = other.ignoreOverrides_;
      clearOverride_ = other.clearOverride_;
      enable_ = other.enable_;
      clearFaults_ = other.clearFaults_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hazard_lights_cmd_114 Clone() {
      return new Hazard_lights_cmd_114(this);
    }

    /// <summary>Field number for the "hazard_lights_cmd" field.</summary>
    public const int HazardLightsCmdFieldNumber = 1;
    private bool hazardLightsCmd_;
    /// <summary>
    /// Control Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HazardLightsCmd {
      get { return hazardLightsCmd_; }
      set {
        hazardLightsCmd_ = value;
      }
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 2;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 4;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 5;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hazard_lights_cmd_114);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hazard_lights_cmd_114 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HazardLightsCmd != other.HazardLightsCmd) return false;
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (Enable != other.Enable) return false;
      if (ClearFaults != other.ClearFaults) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HazardLightsCmd != false) hash ^= HazardLightsCmd.GetHashCode();
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HazardLightsCmd != false) {
        output.WriteRawTag(8);
        output.WriteBool(HazardLightsCmd);
      }
      if (IgnoreOverrides != false) {
        output.WriteRawTag(16);
        output.WriteBool(IgnoreOverrides);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (Enable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enable);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(40);
        output.WriteBool(ClearFaults);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HazardLightsCmd != false) {
        size += 1 + 1;
      }
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hazard_lights_cmd_114 other) {
      if (other == null) {
        return;
      }
      if (other.HazardLightsCmd != false) {
        HazardLightsCmd = other.HazardLightsCmd;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HazardLightsCmd = input.ReadBool();
            break;
          }
          case 16: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            Enable = input.ReadBool();
            break;
          }
          case 40: {
            ClearFaults = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dash_controls_left_rpt_20c : pb::IMessage<Dash_controls_left_rpt_20c> {
    private static readonly pb::MessageParser<Dash_controls_left_rpt_20c> _parser = new pb::MessageParser<Dash_controls_left_rpt_20c>(() => new Dash_controls_left_rpt_20c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dash_controls_left_rpt_20c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_left_rpt_20c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_left_rpt_20c(Dash_controls_left_rpt_20c other) : this() {
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_left_rpt_20c Clone() {
      return new Dash_controls_left_rpt_20c(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 3;
    private global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 4;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 5;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 6;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 7;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 8;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 9;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 10;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dash_controls_left_rpt_20c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dash_controls_left_rpt_20c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OutputValue);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandedValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ManualInput);
      }
      if (VehicleFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(48);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(64);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(80);
        output.WriteBool(CommandOutputFault);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dash_controls_left_rpt_20c other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            outputValue_ = (global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 16: {
            commandedValue_ = (global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 24: {
            manualInput_ = (global::Apollo.Canbus.Dash_controls_left_rpt_20c.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 32: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 40: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 48: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 56: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 64: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 72: {
            Enabled = input.ReadBool();
            break;
          }
          case 80: {
            CommandOutputFault = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Dash_controls_left_rpt_20c message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_NONE")] OutputValueDashControlNone = 0,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_OK")] OutputValueDashControlOk = 1,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_LEFT")] OutputValueDashControlLeft = 2,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_RIGHT")] OutputValueDashControlRight = 3,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_UP")] OutputValueDashControlUp = 4,
        [pbr::OriginalName("OUTPUT_VALUE_DASH_CONTROL_DOWN")] OutputValueDashControlDown = 5,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_NONE")] CommandedValueDashControlNone = 0,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_OK")] CommandedValueDashControlOk = 1,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_LEFT")] CommandedValueDashControlLeft = 2,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_RIGHT")] CommandedValueDashControlRight = 3,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_UP")] CommandedValueDashControlUp = 4,
        [pbr::OriginalName("COMMANDED_VALUE_DASH_CONTROL_DOWN")] CommandedValueDashControlDown = 5,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_NONE")] ManualInputDashControlNone = 0,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_OK")] ManualInputDashControlOk = 1,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_LEFT")] ManualInputDashControlLeft = 2,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_RIGHT")] ManualInputDashControlRight = 3,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_UP")] ManualInputDashControlUp = 4,
        [pbr::OriginalName("MANUAL_INPUT_DASH_CONTROL_DOWN")] ManualInputDashControlDown = 5,
      }

    }
    #endregion

  }

  public sealed partial class Headlight_aux_rpt_318 : pb::IMessage<Headlight_aux_rpt_318> {
    private static readonly pb::MessageParser<Headlight_aux_rpt_318> _parser = new pb::MessageParser<Headlight_aux_rpt_318>(() => new Headlight_aux_rpt_318());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Headlight_aux_rpt_318> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_aux_rpt_318() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_aux_rpt_318(Headlight_aux_rpt_318 other) : this() {
      headlightsModeIsValid_ = other.headlightsModeIsValid_;
      headlightsMode_ = other.headlightsMode_;
      fogLightsOnIsValid_ = other.fogLightsOnIsValid_;
      fogLightsOn_ = other.fogLightsOn_;
      headlightsOnBrightIsValid_ = other.headlightsOnBrightIsValid_;
      headlightsOnBright_ = other.headlightsOnBright_;
      headlightsOnIsValid_ = other.headlightsOnIsValid_;
      headlightsOn_ = other.headlightsOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_aux_rpt_318 Clone() {
      return new Headlight_aux_rpt_318(this);
    }

    /// <summary>Field number for the "headlights_mode_is_valid" field.</summary>
    public const int HeadlightsModeIsValidFieldNumber = 1;
    private bool headlightsModeIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeadlightsModeIsValid {
      get { return headlightsModeIsValid_; }
      set {
        headlightsModeIsValid_ = value;
      }
    }

    /// <summary>Field number for the "headlights_mode" field.</summary>
    public const int HeadlightsModeFieldNumber = 2;
    private global::Apollo.Canbus.Headlight_aux_rpt_318.Types.Headlights_modeType headlightsMode_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_aux_rpt_318.Types.Headlights_modeType HeadlightsMode {
      get { return headlightsMode_; }
      set {
        headlightsMode_ = value;
      }
    }

    /// <summary>Field number for the "fog_lights_on_is_valid" field.</summary>
    public const int FogLightsOnIsValidFieldNumber = 3;
    private bool fogLightsOnIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FogLightsOnIsValid {
      get { return fogLightsOnIsValid_; }
      set {
        fogLightsOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "fog_lights_on" field.</summary>
    public const int FogLightsOnFieldNumber = 4;
    private bool fogLightsOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FogLightsOn {
      get { return fogLightsOn_; }
      set {
        fogLightsOn_ = value;
      }
    }

    /// <summary>Field number for the "headlights_on_bright_is_valid" field.</summary>
    public const int HeadlightsOnBrightIsValidFieldNumber = 5;
    private bool headlightsOnBrightIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeadlightsOnBrightIsValid {
      get { return headlightsOnBrightIsValid_; }
      set {
        headlightsOnBrightIsValid_ = value;
      }
    }

    /// <summary>Field number for the "headlights_on_bright" field.</summary>
    public const int HeadlightsOnBrightFieldNumber = 6;
    private bool headlightsOnBright_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeadlightsOnBright {
      get { return headlightsOnBright_; }
      set {
        headlightsOnBright_ = value;
      }
    }

    /// <summary>Field number for the "headlights_on_is_valid" field.</summary>
    public const int HeadlightsOnIsValidFieldNumber = 7;
    private bool headlightsOnIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeadlightsOnIsValid {
      get { return headlightsOnIsValid_; }
      set {
        headlightsOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "headlights_on" field.</summary>
    public const int HeadlightsOnFieldNumber = 8;
    private bool headlightsOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeadlightsOn {
      get { return headlightsOn_; }
      set {
        headlightsOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Headlight_aux_rpt_318);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Headlight_aux_rpt_318 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadlightsModeIsValid != other.HeadlightsModeIsValid) return false;
      if (HeadlightsMode != other.HeadlightsMode) return false;
      if (FogLightsOnIsValid != other.FogLightsOnIsValid) return false;
      if (FogLightsOn != other.FogLightsOn) return false;
      if (HeadlightsOnBrightIsValid != other.HeadlightsOnBrightIsValid) return false;
      if (HeadlightsOnBright != other.HeadlightsOnBright) return false;
      if (HeadlightsOnIsValid != other.HeadlightsOnIsValid) return false;
      if (HeadlightsOn != other.HeadlightsOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadlightsModeIsValid != false) hash ^= HeadlightsModeIsValid.GetHashCode();
      if (HeadlightsMode != 0) hash ^= HeadlightsMode.GetHashCode();
      if (FogLightsOnIsValid != false) hash ^= FogLightsOnIsValid.GetHashCode();
      if (FogLightsOn != false) hash ^= FogLightsOn.GetHashCode();
      if (HeadlightsOnBrightIsValid != false) hash ^= HeadlightsOnBrightIsValid.GetHashCode();
      if (HeadlightsOnBright != false) hash ^= HeadlightsOnBright.GetHashCode();
      if (HeadlightsOnIsValid != false) hash ^= HeadlightsOnIsValid.GetHashCode();
      if (HeadlightsOn != false) hash ^= HeadlightsOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadlightsModeIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(HeadlightsModeIsValid);
      }
      if (HeadlightsMode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) HeadlightsMode);
      }
      if (FogLightsOnIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(FogLightsOnIsValid);
      }
      if (FogLightsOn != false) {
        output.WriteRawTag(32);
        output.WriteBool(FogLightsOn);
      }
      if (HeadlightsOnBrightIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(HeadlightsOnBrightIsValid);
      }
      if (HeadlightsOnBright != false) {
        output.WriteRawTag(48);
        output.WriteBool(HeadlightsOnBright);
      }
      if (HeadlightsOnIsValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(HeadlightsOnIsValid);
      }
      if (HeadlightsOn != false) {
        output.WriteRawTag(64);
        output.WriteBool(HeadlightsOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadlightsModeIsValid != false) {
        size += 1 + 1;
      }
      if (HeadlightsMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HeadlightsMode);
      }
      if (FogLightsOnIsValid != false) {
        size += 1 + 1;
      }
      if (FogLightsOn != false) {
        size += 1 + 1;
      }
      if (HeadlightsOnBrightIsValid != false) {
        size += 1 + 1;
      }
      if (HeadlightsOnBright != false) {
        size += 1 + 1;
      }
      if (HeadlightsOnIsValid != false) {
        size += 1 + 1;
      }
      if (HeadlightsOn != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Headlight_aux_rpt_318 other) {
      if (other == null) {
        return;
      }
      if (other.HeadlightsModeIsValid != false) {
        HeadlightsModeIsValid = other.HeadlightsModeIsValid;
      }
      if (other.HeadlightsMode != 0) {
        HeadlightsMode = other.HeadlightsMode;
      }
      if (other.FogLightsOnIsValid != false) {
        FogLightsOnIsValid = other.FogLightsOnIsValid;
      }
      if (other.FogLightsOn != false) {
        FogLightsOn = other.FogLightsOn;
      }
      if (other.HeadlightsOnBrightIsValid != false) {
        HeadlightsOnBrightIsValid = other.HeadlightsOnBrightIsValid;
      }
      if (other.HeadlightsOnBright != false) {
        HeadlightsOnBright = other.HeadlightsOnBright;
      }
      if (other.HeadlightsOnIsValid != false) {
        HeadlightsOnIsValid = other.HeadlightsOnIsValid;
      }
      if (other.HeadlightsOn != false) {
        HeadlightsOn = other.HeadlightsOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadlightsModeIsValid = input.ReadBool();
            break;
          }
          case 16: {
            headlightsMode_ = (global::Apollo.Canbus.Headlight_aux_rpt_318.Types.Headlights_modeType) input.ReadEnum();
            break;
          }
          case 24: {
            FogLightsOnIsValid = input.ReadBool();
            break;
          }
          case 32: {
            FogLightsOn = input.ReadBool();
            break;
          }
          case 40: {
            HeadlightsOnBrightIsValid = input.ReadBool();
            break;
          }
          case 48: {
            HeadlightsOnBright = input.ReadBool();
            break;
          }
          case 56: {
            HeadlightsOnIsValid = input.ReadBool();
            break;
          }
          case 64: {
            HeadlightsOn = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Headlight_aux_rpt_318 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Headlights_modeType {
        [pbr::OriginalName("HEADLIGHTS_MODE_HEADLIGHTS_OFF")] HeadlightsModeHeadlightsOff = 0,
        [pbr::OriginalName("HEADLIGHTS_MODE_PARKING_LIGHTS_ONLY")] HeadlightsModeParkingLightsOnly = 1,
        [pbr::OriginalName("HEADLIGHTS_MODE_HEADLIGHTS_ON_MANUAL_MODE")] HeadlightsModeHeadlightsOnManualMode = 2,
        [pbr::OriginalName("HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE")] HeadlightsModeHeadlightsOnAutoMode = 3,
      }

    }
    #endregion

  }

  public sealed partial class Dash_controls_right_cmd_110 : pb::IMessage<Dash_controls_right_cmd_110> {
    private static readonly pb::MessageParser<Dash_controls_right_cmd_110> _parser = new pb::MessageParser<Dash_controls_right_cmd_110>(() => new Dash_controls_right_cmd_110());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dash_controls_right_cmd_110> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_right_cmd_110() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_right_cmd_110(Dash_controls_right_cmd_110 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      dashControlsButton_ = other.dashControlsButton_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dash_controls_right_cmd_110 Clone() {
      return new Dash_controls_right_cmd_110(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "dash_controls_button" field.</summary>
    public const int DashControlsButtonFieldNumber = 5;
    private global::Apollo.Canbus.Dash_controls_right_cmd_110.Types.Dash_controls_buttonType dashControlsButton_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_right_cmd_110.Types.Dash_controls_buttonType DashControlsButton {
      get { return dashControlsButton_; }
      set {
        dashControlsButton_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dash_controls_right_cmd_110);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dash_controls_right_cmd_110 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (DashControlsButton != other.DashControlsButton) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (DashControlsButton != 0) hash ^= DashControlsButton.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (DashControlsButton != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DashControlsButton);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (DashControlsButton != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DashControlsButton);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dash_controls_right_cmd_110 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.DashControlsButton != 0) {
        DashControlsButton = other.DashControlsButton;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 40: {
            dashControlsButton_ = (global::Apollo.Canbus.Dash_controls_right_cmd_110.Types.Dash_controls_buttonType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Dash_controls_right_cmd_110 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Dash_controls_buttonType {
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE")] DashControlsButtonDashControlNone = 0,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_OK")] DashControlsButtonDashControlOk = 1,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT")] DashControlsButtonDashControlLeft = 2,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT")] DashControlsButtonDashControlRight = 3,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_UP")] DashControlsButtonDashControlUp = 4,
        [pbr::OriginalName("DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN")] DashControlsButtonDashControlDown = 5,
      }

    }
    #endregion

  }

  public sealed partial class Wiper_cmd_134 : pb::IMessage<Wiper_cmd_134> {
    private static readonly pb::MessageParser<Wiper_cmd_134> _parser = new pb::MessageParser<Wiper_cmd_134>(() => new Wiper_cmd_134());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wiper_cmd_134> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_cmd_134() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_cmd_134(Wiper_cmd_134 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      wiperCmd_ = other.wiperCmd_;
      clearFaults_ = other.clearFaults_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_cmd_134 Clone() {
      return new Wiper_cmd_134(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "wiper_cmd" field.</summary>
    public const int WiperCmdFieldNumber = 4;
    private global::Apollo.Canbus.Wiper_cmd_134.Types.Wiper_cmdType wiperCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_cmd_134.Types.Wiper_cmdType WiperCmd {
      get { return wiperCmd_; }
      set {
        wiperCmd_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 5;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wiper_cmd_134);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wiper_cmd_134 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (WiperCmd != other.WiperCmd) return false;
      if (ClearFaults != other.ClearFaults) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (WiperCmd != 0) hash ^= WiperCmd.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (WiperCmd != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) WiperCmd);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(40);
        output.WriteBool(ClearFaults);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (WiperCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WiperCmd);
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wiper_cmd_134 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.WiperCmd != 0) {
        WiperCmd = other.WiperCmd;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            wiperCmd_ = (global::Apollo.Canbus.Wiper_cmd_134.Types.Wiper_cmdType) input.ReadEnum();
            break;
          }
          case 40: {
            ClearFaults = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Wiper_cmd_134 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Wiper_cmdType {
        [pbr::OriginalName("WIPER_CMD_WIPERS_OFF")] WiperCmdWipersOff = 0,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_1")] WiperCmdIntermittent1 = 1,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_2")] WiperCmdIntermittent2 = 2,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_3")] WiperCmdIntermittent3 = 3,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_4")] WiperCmdIntermittent4 = 4,
        [pbr::OriginalName("WIPER_CMD_INTERMITTENT_5")] WiperCmdIntermittent5 = 5,
        [pbr::OriginalName("WIPER_CMD_LOW")] WiperCmdLow = 6,
        [pbr::OriginalName("WIPER_CMD_HIGH")] WiperCmdHigh = 7,
      }

    }
    #endregion

  }

  public sealed partial class Wiper_rpt_234 : pb::IMessage<Wiper_rpt_234> {
    private static readonly pb::MessageParser<Wiper_rpt_234> _parser = new pb::MessageParser<Wiper_rpt_234>(() => new Wiper_rpt_234());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wiper_rpt_234> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_rpt_234() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_rpt_234(Wiper_rpt_234 other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_rpt_234 Clone() {
      return new Wiper_rpt_234(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 3;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 4;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 5;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 7;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 8;
    private global::Apollo.Canbus.Wiper_rpt_234.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_234.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private global::Apollo.Canbus.Wiper_rpt_234.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_234.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 10;
    private global::Apollo.Canbus.Wiper_rpt_234.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_234.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wiper_rpt_234);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wiper_rpt_234 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(CommandOutputFault);
      }
      if (OutputValue != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OutputValue);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CommandedValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ManualInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wiper_rpt_234 other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 32: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 40: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 64: {
            outputValue_ = (global::Apollo.Canbus.Wiper_rpt_234.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 72: {
            commandedValue_ = (global::Apollo.Canbus.Wiper_rpt_234.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 80: {
            manualInput_ = (global::Apollo.Canbus.Wiper_rpt_234.Types.Manual_inputType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Wiper_rpt_234 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_WIPERS_OFF")] OutputValueWipersOff = 0,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_1")] OutputValueIntermittent1 = 1,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_2")] OutputValueIntermittent2 = 2,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_3")] OutputValueIntermittent3 = 3,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_4")] OutputValueIntermittent4 = 4,
        [pbr::OriginalName("OUTPUT_VALUE_INTERMITTENT_5")] OutputValueIntermittent5 = 5,
        [pbr::OriginalName("OUTPUT_VALUE_LOW")] OutputValueLow = 6,
        [pbr::OriginalName("OUTPUT_VALUE_HIGH")] OutputValueHigh = 7,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_WIPERS_OFF")] CommandedValueWipersOff = 0,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_1")] CommandedValueIntermittent1 = 1,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_2")] CommandedValueIntermittent2 = 2,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_3")] CommandedValueIntermittent3 = 3,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_4")] CommandedValueIntermittent4 = 4,
        [pbr::OriginalName("COMMANDED_VALUE_INTERMITTENT_5")] CommandedValueIntermittent5 = 5,
        [pbr::OriginalName("COMMANDED_VALUE_LOW")] CommandedValueLow = 6,
        [pbr::OriginalName("COMMANDED_VALUE_HIGH")] CommandedValueHigh = 7,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_WIPERS_OFF")] ManualInputWipersOff = 0,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_1")] ManualInputIntermittent1 = 1,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_2")] ManualInputIntermittent2 = 2,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_3")] ManualInputIntermittent3 = 3,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_4")] ManualInputIntermittent4 = 4,
        [pbr::OriginalName("MANUAL_INPUT_INTERMITTENT_5")] ManualInputIntermittent5 = 5,
        [pbr::OriginalName("MANUAL_INPUT_LOW")] ManualInputLow = 6,
        [pbr::OriginalName("MANUAL_INPUT_HIGH")] ManualInputHigh = 7,
      }

    }
    #endregion

  }

  public sealed partial class Turn_rpt_230 : pb::IMessage<Turn_rpt_230> {
    private static readonly pb::MessageParser<Turn_rpt_230> _parser = new pb::MessageParser<Turn_rpt_230>(() => new Turn_rpt_230());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Turn_rpt_230> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_rpt_230() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_rpt_230(Turn_rpt_230 other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_rpt_230 Clone() {
      return new Turn_rpt_230(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 3;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 4;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 5;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 7;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 8;
    private global::Apollo.Canbus.Turn_rpt_230.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_230.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private global::Apollo.Canbus.Turn_rpt_230.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_230.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 10;
    private global::Apollo.Canbus.Turn_rpt_230.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_230.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Turn_rpt_230);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Turn_rpt_230 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(CommandOutputFault);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ManualInput);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CommandedValue);
      }
      if (OutputValue != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Turn_rpt_230 other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 32: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 40: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 64: {
            manualInput_ = (global::Apollo.Canbus.Turn_rpt_230.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 72: {
            commandedValue_ = (global::Apollo.Canbus.Turn_rpt_230.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 80: {
            outputValue_ = (global::Apollo.Canbus.Turn_rpt_230.Types.Output_valueType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Turn_rpt_230 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_RIGHT")] ManualInputRight = 0,
        [pbr::OriginalName("MANUAL_INPUT_NONE")] ManualInputNone = 1,
        [pbr::OriginalName("MANUAL_INPUT_LEFT")] ManualInputLeft = 2,
        [pbr::OriginalName("MANUAL_INPUT_HAZARD")] ManualInputHazard = 3,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_RIGHT")] CommandedValueRight = 0,
        [pbr::OriginalName("COMMANDED_VALUE_NONE")] CommandedValueNone = 1,
        [pbr::OriginalName("COMMANDED_VALUE_LEFT")] CommandedValueLeft = 2,
        [pbr::OriginalName("COMMANDED_VALUE_HAZARD")] CommandedValueHazard = 3,
      }

      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_RIGHT")] OutputValueRight = 0,
        [pbr::OriginalName("OUTPUT_VALUE_NONE")] OutputValueNone = 1,
        [pbr::OriginalName("OUTPUT_VALUE_LEFT")] OutputValueLeft = 2,
        [pbr::OriginalName("OUTPUT_VALUE_HAZARD")] OutputValueHazard = 3,
      }

    }
    #endregion

  }

  public sealed partial class Headlight_cmd_118 : pb::IMessage<Headlight_cmd_118> {
    private static readonly pb::MessageParser<Headlight_cmd_118> _parser = new pb::MessageParser<Headlight_cmd_118>(() => new Headlight_cmd_118());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Headlight_cmd_118> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_cmd_118() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_cmd_118(Headlight_cmd_118 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      headlightCmd_ = other.headlightCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Headlight_cmd_118 Clone() {
      return new Headlight_cmd_118(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "headlight_cmd" field.</summary>
    public const int HeadlightCmdFieldNumber = 5;
    private global::Apollo.Canbus.Headlight_cmd_118.Types.Headlight_cmdType headlightCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_cmd_118.Types.Headlight_cmdType HeadlightCmd {
      get { return headlightCmd_; }
      set {
        headlightCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Headlight_cmd_118);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Headlight_cmd_118 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (HeadlightCmd != other.HeadlightCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (HeadlightCmd != 0) hash ^= HeadlightCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (HeadlightCmd != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) HeadlightCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (HeadlightCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HeadlightCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Headlight_cmd_118 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.HeadlightCmd != 0) {
        HeadlightCmd = other.HeadlightCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 40: {
            headlightCmd_ = (global::Apollo.Canbus.Headlight_cmd_118.Types.Headlight_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Headlight_cmd_118 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Headlight_cmdType {
        [pbr::OriginalName("HEADLIGHT_CMD_HEADLIGHTS_OFF")] HeadlightCmdHeadlightsOff = 0,
        [pbr::OriginalName("HEADLIGHT_CMD_LOW_BEAMS")] HeadlightCmdLowBeams = 1,
        [pbr::OriginalName("HEADLIGHT_CMD_HIGH_BEAMS")] HeadlightCmdHighBeams = 2,
      }

    }
    #endregion

  }

  public sealed partial class Door_rpt_417 : pb::IMessage<Door_rpt_417> {
    private static readonly pb::MessageParser<Door_rpt_417> _parser = new pb::MessageParser<Door_rpt_417>(() => new Door_rpt_417());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Door_rpt_417> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Door_rpt_417() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Door_rpt_417(Door_rpt_417 other) : this() {
      fuelDoorOpenIsValid_ = other.fuelDoorOpenIsValid_;
      trunkOpenIsValid_ = other.trunkOpenIsValid_;
      hoodOpenIsValid_ = other.hoodOpenIsValid_;
      rearPassDoorOpenIsValid_ = other.rearPassDoorOpenIsValid_;
      rearDriverDoorOpenIsValid_ = other.rearDriverDoorOpenIsValid_;
      passDoorOpenIsValid_ = other.passDoorOpenIsValid_;
      driverDoorOpenIsValid_ = other.driverDoorOpenIsValid_;
      fuelDoorOpen_ = other.fuelDoorOpen_;
      trunkOpen_ = other.trunkOpen_;
      hoodOpen_ = other.hoodOpen_;
      rearPassDoorOpen_ = other.rearPassDoorOpen_;
      rearDriverDoorOpen_ = other.rearDriverDoorOpen_;
      passDoorOpen_ = other.passDoorOpen_;
      driverDoorOpen_ = other.driverDoorOpen_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Door_rpt_417 Clone() {
      return new Door_rpt_417(this);
    }

    /// <summary>Field number for the "fuel_door_open_is_valid" field.</summary>
    public const int FuelDoorOpenIsValidFieldNumber = 1;
    private bool fuelDoorOpenIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FuelDoorOpenIsValid {
      get { return fuelDoorOpenIsValid_; }
      set {
        fuelDoorOpenIsValid_ = value;
      }
    }

    /// <summary>Field number for the "trunk_open_is_valid" field.</summary>
    public const int TrunkOpenIsValidFieldNumber = 2;
    private bool trunkOpenIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrunkOpenIsValid {
      get { return trunkOpenIsValid_; }
      set {
        trunkOpenIsValid_ = value;
      }
    }

    /// <summary>Field number for the "hood_open_is_valid" field.</summary>
    public const int HoodOpenIsValidFieldNumber = 3;
    private bool hoodOpenIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HoodOpenIsValid {
      get { return hoodOpenIsValid_; }
      set {
        hoodOpenIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rear_pass_door_open_is_valid" field.</summary>
    public const int RearPassDoorOpenIsValidFieldNumber = 4;
    private bool rearPassDoorOpenIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearPassDoorOpenIsValid {
      get { return rearPassDoorOpenIsValid_; }
      set {
        rearPassDoorOpenIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rear_driver_door_open_is_valid" field.</summary>
    public const int RearDriverDoorOpenIsValidFieldNumber = 5;
    private bool rearDriverDoorOpenIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearDriverDoorOpenIsValid {
      get { return rearDriverDoorOpenIsValid_; }
      set {
        rearDriverDoorOpenIsValid_ = value;
      }
    }

    /// <summary>Field number for the "pass_door_open_is_valid" field.</summary>
    public const int PassDoorOpenIsValidFieldNumber = 6;
    private bool passDoorOpenIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassDoorOpenIsValid {
      get { return passDoorOpenIsValid_; }
      set {
        passDoorOpenIsValid_ = value;
      }
    }

    /// <summary>Field number for the "driver_door_open_is_valid" field.</summary>
    public const int DriverDoorOpenIsValidFieldNumber = 7;
    private bool driverDoorOpenIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverDoorOpenIsValid {
      get { return driverDoorOpenIsValid_; }
      set {
        driverDoorOpenIsValid_ = value;
      }
    }

    /// <summary>Field number for the "fuel_door_open" field.</summary>
    public const int FuelDoorOpenFieldNumber = 8;
    private bool fuelDoorOpen_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FuelDoorOpen {
      get { return fuelDoorOpen_; }
      set {
        fuelDoorOpen_ = value;
      }
    }

    /// <summary>Field number for the "trunk_open" field.</summary>
    public const int TrunkOpenFieldNumber = 9;
    private bool trunkOpen_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrunkOpen {
      get { return trunkOpen_; }
      set {
        trunkOpen_ = value;
      }
    }

    /// <summary>Field number for the "hood_open" field.</summary>
    public const int HoodOpenFieldNumber = 10;
    private bool hoodOpen_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HoodOpen {
      get { return hoodOpen_; }
      set {
        hoodOpen_ = value;
      }
    }

    /// <summary>Field number for the "rear_pass_door_open" field.</summary>
    public const int RearPassDoorOpenFieldNumber = 11;
    private bool rearPassDoorOpen_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearPassDoorOpen {
      get { return rearPassDoorOpen_; }
      set {
        rearPassDoorOpen_ = value;
      }
    }

    /// <summary>Field number for the "rear_driver_door_open" field.</summary>
    public const int RearDriverDoorOpenFieldNumber = 12;
    private bool rearDriverDoorOpen_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearDriverDoorOpen {
      get { return rearDriverDoorOpen_; }
      set {
        rearDriverDoorOpen_ = value;
      }
    }

    /// <summary>Field number for the "pass_door_open" field.</summary>
    public const int PassDoorOpenFieldNumber = 13;
    private bool passDoorOpen_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassDoorOpen {
      get { return passDoorOpen_; }
      set {
        passDoorOpen_ = value;
      }
    }

    /// <summary>Field number for the "driver_door_open" field.</summary>
    public const int DriverDoorOpenFieldNumber = 14;
    private bool driverDoorOpen_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverDoorOpen {
      get { return driverDoorOpen_; }
      set {
        driverDoorOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Door_rpt_417);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Door_rpt_417 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FuelDoorOpenIsValid != other.FuelDoorOpenIsValid) return false;
      if (TrunkOpenIsValid != other.TrunkOpenIsValid) return false;
      if (HoodOpenIsValid != other.HoodOpenIsValid) return false;
      if (RearPassDoorOpenIsValid != other.RearPassDoorOpenIsValid) return false;
      if (RearDriverDoorOpenIsValid != other.RearDriverDoorOpenIsValid) return false;
      if (PassDoorOpenIsValid != other.PassDoorOpenIsValid) return false;
      if (DriverDoorOpenIsValid != other.DriverDoorOpenIsValid) return false;
      if (FuelDoorOpen != other.FuelDoorOpen) return false;
      if (TrunkOpen != other.TrunkOpen) return false;
      if (HoodOpen != other.HoodOpen) return false;
      if (RearPassDoorOpen != other.RearPassDoorOpen) return false;
      if (RearDriverDoorOpen != other.RearDriverDoorOpen) return false;
      if (PassDoorOpen != other.PassDoorOpen) return false;
      if (DriverDoorOpen != other.DriverDoorOpen) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FuelDoorOpenIsValid != false) hash ^= FuelDoorOpenIsValid.GetHashCode();
      if (TrunkOpenIsValid != false) hash ^= TrunkOpenIsValid.GetHashCode();
      if (HoodOpenIsValid != false) hash ^= HoodOpenIsValid.GetHashCode();
      if (RearPassDoorOpenIsValid != false) hash ^= RearPassDoorOpenIsValid.GetHashCode();
      if (RearDriverDoorOpenIsValid != false) hash ^= RearDriverDoorOpenIsValid.GetHashCode();
      if (PassDoorOpenIsValid != false) hash ^= PassDoorOpenIsValid.GetHashCode();
      if (DriverDoorOpenIsValid != false) hash ^= DriverDoorOpenIsValid.GetHashCode();
      if (FuelDoorOpen != false) hash ^= FuelDoorOpen.GetHashCode();
      if (TrunkOpen != false) hash ^= TrunkOpen.GetHashCode();
      if (HoodOpen != false) hash ^= HoodOpen.GetHashCode();
      if (RearPassDoorOpen != false) hash ^= RearPassDoorOpen.GetHashCode();
      if (RearDriverDoorOpen != false) hash ^= RearDriverDoorOpen.GetHashCode();
      if (PassDoorOpen != false) hash ^= PassDoorOpen.GetHashCode();
      if (DriverDoorOpen != false) hash ^= DriverDoorOpen.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FuelDoorOpenIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(FuelDoorOpenIsValid);
      }
      if (TrunkOpenIsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(TrunkOpenIsValid);
      }
      if (HoodOpenIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(HoodOpenIsValid);
      }
      if (RearPassDoorOpenIsValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(RearPassDoorOpenIsValid);
      }
      if (RearDriverDoorOpenIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(RearDriverDoorOpenIsValid);
      }
      if (PassDoorOpenIsValid != false) {
        output.WriteRawTag(48);
        output.WriteBool(PassDoorOpenIsValid);
      }
      if (DriverDoorOpenIsValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(DriverDoorOpenIsValid);
      }
      if (FuelDoorOpen != false) {
        output.WriteRawTag(64);
        output.WriteBool(FuelDoorOpen);
      }
      if (TrunkOpen != false) {
        output.WriteRawTag(72);
        output.WriteBool(TrunkOpen);
      }
      if (HoodOpen != false) {
        output.WriteRawTag(80);
        output.WriteBool(HoodOpen);
      }
      if (RearPassDoorOpen != false) {
        output.WriteRawTag(88);
        output.WriteBool(RearPassDoorOpen);
      }
      if (RearDriverDoorOpen != false) {
        output.WriteRawTag(96);
        output.WriteBool(RearDriverDoorOpen);
      }
      if (PassDoorOpen != false) {
        output.WriteRawTag(104);
        output.WriteBool(PassDoorOpen);
      }
      if (DriverDoorOpen != false) {
        output.WriteRawTag(112);
        output.WriteBool(DriverDoorOpen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FuelDoorOpenIsValid != false) {
        size += 1 + 1;
      }
      if (TrunkOpenIsValid != false) {
        size += 1 + 1;
      }
      if (HoodOpenIsValid != false) {
        size += 1 + 1;
      }
      if (RearPassDoorOpenIsValid != false) {
        size += 1 + 1;
      }
      if (RearDriverDoorOpenIsValid != false) {
        size += 1 + 1;
      }
      if (PassDoorOpenIsValid != false) {
        size += 1 + 1;
      }
      if (DriverDoorOpenIsValid != false) {
        size += 1 + 1;
      }
      if (FuelDoorOpen != false) {
        size += 1 + 1;
      }
      if (TrunkOpen != false) {
        size += 1 + 1;
      }
      if (HoodOpen != false) {
        size += 1 + 1;
      }
      if (RearPassDoorOpen != false) {
        size += 1 + 1;
      }
      if (RearDriverDoorOpen != false) {
        size += 1 + 1;
      }
      if (PassDoorOpen != false) {
        size += 1 + 1;
      }
      if (DriverDoorOpen != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Door_rpt_417 other) {
      if (other == null) {
        return;
      }
      if (other.FuelDoorOpenIsValid != false) {
        FuelDoorOpenIsValid = other.FuelDoorOpenIsValid;
      }
      if (other.TrunkOpenIsValid != false) {
        TrunkOpenIsValid = other.TrunkOpenIsValid;
      }
      if (other.HoodOpenIsValid != false) {
        HoodOpenIsValid = other.HoodOpenIsValid;
      }
      if (other.RearPassDoorOpenIsValid != false) {
        RearPassDoorOpenIsValid = other.RearPassDoorOpenIsValid;
      }
      if (other.RearDriverDoorOpenIsValid != false) {
        RearDriverDoorOpenIsValid = other.RearDriverDoorOpenIsValid;
      }
      if (other.PassDoorOpenIsValid != false) {
        PassDoorOpenIsValid = other.PassDoorOpenIsValid;
      }
      if (other.DriverDoorOpenIsValid != false) {
        DriverDoorOpenIsValid = other.DriverDoorOpenIsValid;
      }
      if (other.FuelDoorOpen != false) {
        FuelDoorOpen = other.FuelDoorOpen;
      }
      if (other.TrunkOpen != false) {
        TrunkOpen = other.TrunkOpen;
      }
      if (other.HoodOpen != false) {
        HoodOpen = other.HoodOpen;
      }
      if (other.RearPassDoorOpen != false) {
        RearPassDoorOpen = other.RearPassDoorOpen;
      }
      if (other.RearDriverDoorOpen != false) {
        RearDriverDoorOpen = other.RearDriverDoorOpen;
      }
      if (other.PassDoorOpen != false) {
        PassDoorOpen = other.PassDoorOpen;
      }
      if (other.DriverDoorOpen != false) {
        DriverDoorOpen = other.DriverDoorOpen;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FuelDoorOpenIsValid = input.ReadBool();
            break;
          }
          case 16: {
            TrunkOpenIsValid = input.ReadBool();
            break;
          }
          case 24: {
            HoodOpenIsValid = input.ReadBool();
            break;
          }
          case 32: {
            RearPassDoorOpenIsValid = input.ReadBool();
            break;
          }
          case 40: {
            RearDriverDoorOpenIsValid = input.ReadBool();
            break;
          }
          case 48: {
            PassDoorOpenIsValid = input.ReadBool();
            break;
          }
          case 56: {
            DriverDoorOpenIsValid = input.ReadBool();
            break;
          }
          case 64: {
            FuelDoorOpen = input.ReadBool();
            break;
          }
          case 72: {
            TrunkOpen = input.ReadBool();
            break;
          }
          case 80: {
            HoodOpen = input.ReadBool();
            break;
          }
          case 88: {
            RearPassDoorOpen = input.ReadBool();
            break;
          }
          case 96: {
            RearDriverDoorOpen = input.ReadBool();
            break;
          }
          case 104: {
            PassDoorOpen = input.ReadBool();
            break;
          }
          case 112: {
            DriverDoorOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Component_rpt_20 : pb::IMessage<Component_rpt_20> {
    private static readonly pb::MessageParser<Component_rpt_20> _parser = new pb::MessageParser<Component_rpt_20>(() => new Component_rpt_20());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Component_rpt_20> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component_rpt_20() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component_rpt_20(Component_rpt_20 other) : this() {
      componentType_ = other.componentType_;
      componentFunc_ = other.componentFunc_;
      counter_ = other.counter_;
      complement_ = other.complement_;
      configFault_ = other.configFault_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component_rpt_20 Clone() {
      return new Component_rpt_20(this);
    }

    /// <summary>Field number for the "component_type" field.</summary>
    public const int ComponentTypeFieldNumber = 1;
    private global::Apollo.Canbus.Component_rpt_20.Types.Component_typeType componentType_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Component_rpt_20.Types.Component_typeType ComponentType {
      get { return componentType_; }
      set {
        componentType_ = value;
      }
    }

    /// <summary>Field number for the "component_func" field.</summary>
    public const int ComponentFuncFieldNumber = 2;
    private global::Apollo.Canbus.Component_rpt_20.Types.Component_funcType componentFunc_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Component_rpt_20.Types.Component_funcType ComponentFunc {
      get { return componentFunc_; }
      set {
        componentFunc_ = value;
      }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 3;
    private int counter_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    /// <summary>Field number for the "complement" field.</summary>
    public const int ComplementFieldNumber = 4;
    private int complement_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Complement {
      get { return complement_; }
      set {
        complement_ = value;
      }
    }

    /// <summary>Field number for the "config_fault" field.</summary>
    public const int ConfigFaultFieldNumber = 5;
    private bool configFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConfigFault {
      get { return configFault_; }
      set {
        configFault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Component_rpt_20);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Component_rpt_20 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ComponentType != other.ComponentType) return false;
      if (ComponentFunc != other.ComponentFunc) return false;
      if (Counter != other.Counter) return false;
      if (Complement != other.Complement) return false;
      if (ConfigFault != other.ConfigFault) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ComponentType != 0) hash ^= ComponentType.GetHashCode();
      if (ComponentFunc != 0) hash ^= ComponentFunc.GetHashCode();
      if (Counter != 0) hash ^= Counter.GetHashCode();
      if (Complement != 0) hash ^= Complement.GetHashCode();
      if (ConfigFault != false) hash ^= ConfigFault.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ComponentType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ComponentType);
      }
      if (ComponentFunc != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ComponentFunc);
      }
      if (Counter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Counter);
      }
      if (Complement != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Complement);
      }
      if (ConfigFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(ConfigFault);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ComponentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ComponentType);
      }
      if (ComponentFunc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ComponentFunc);
      }
      if (Counter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Counter);
      }
      if (Complement != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Complement);
      }
      if (ConfigFault != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Component_rpt_20 other) {
      if (other == null) {
        return;
      }
      if (other.ComponentType != 0) {
        ComponentType = other.ComponentType;
      }
      if (other.ComponentFunc != 0) {
        ComponentFunc = other.ComponentFunc;
      }
      if (other.Counter != 0) {
        Counter = other.Counter;
      }
      if (other.Complement != 0) {
        Complement = other.Complement;
      }
      if (other.ConfigFault != false) {
        ConfigFault = other.ConfigFault;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            componentType_ = (global::Apollo.Canbus.Component_rpt_20.Types.Component_typeType) input.ReadEnum();
            break;
          }
          case 16: {
            componentFunc_ = (global::Apollo.Canbus.Component_rpt_20.Types.Component_funcType) input.ReadEnum();
            break;
          }
          case 24: {
            Counter = input.ReadInt32();
            break;
          }
          case 32: {
            Complement = input.ReadInt32();
            break;
          }
          case 40: {
            ConfigFault = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Component_rpt_20 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Component_typeType {
        [pbr::OriginalName("COMPONENT_TYPE_PACMOD")] ComponentTypePacmod = 0,
        [pbr::OriginalName("COMPONENT_TYPE_PACMINI")] ComponentTypePacmini = 1,
        [pbr::OriginalName("COMPONENT_TYPE_PACMICRO")] ComponentTypePacmicro = 2,
      }

      public enum Component_funcType {
        [pbr::OriginalName("COMPONENT_FUNC_PACMOD")] ComponentFuncPacmod = 0,
        [pbr::OriginalName("COMPONENT_FUNC_STEERING_AND_STEERING_COLUMN")] ComponentFuncSteeringAndSteeringColumn = 1,
        [pbr::OriginalName("COMPONENT_FUNC_ACCELERATOR_AND_BRAKING")] ComponentFuncAcceleratorAndBraking = 2,
        [pbr::OriginalName("COMPONENT_FUNC_BRAKING")] ComponentFuncBraking = 3,
        [pbr::OriginalName("COMPONENT_FUNC_SHIFTING")] ComponentFuncShifting = 4,
        [pbr::OriginalName("COMPONENT_FUNC_STEERING")] ComponentFuncSteering = 5,
        [pbr::OriginalName("COMPONENT_FUNC_E_SHIFTER")] ComponentFuncEShifter = 6,
        [pbr::OriginalName("COMPONENT_FUNC_WATCHDOG")] ComponentFuncWatchdog = 7,
      }

    }
    #endregion

  }

  public sealed partial class Wheel_speed_rpt_407 : pb::IMessage<Wheel_speed_rpt_407> {
    private static readonly pb::MessageParser<Wheel_speed_rpt_407> _parser = new pb::MessageParser<Wheel_speed_rpt_407>(() => new Wheel_speed_rpt_407());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wheel_speed_rpt_407> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wheel_speed_rpt_407() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wheel_speed_rpt_407(Wheel_speed_rpt_407 other) : this() {
      wheelSpdRearRight_ = other.wheelSpdRearRight_;
      wheelSpdRearLeft_ = other.wheelSpdRearLeft_;
      wheelSpdFrontRight_ = other.wheelSpdFrontRight_;
      wheelSpdFrontLeft_ = other.wheelSpdFrontLeft_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wheel_speed_rpt_407 Clone() {
      return new Wheel_speed_rpt_407(this);
    }

    /// <summary>Field number for the "wheel_spd_rear_right" field.</summary>
    public const int WheelSpdRearRightFieldNumber = 1;
    private double wheelSpdRearRight_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdRearRight {
      get { return wheelSpdRearRight_; }
      set {
        wheelSpdRearRight_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_rear_left" field.</summary>
    public const int WheelSpdRearLeftFieldNumber = 2;
    private double wheelSpdRearLeft_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdRearLeft {
      get { return wheelSpdRearLeft_; }
      set {
        wheelSpdRearLeft_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_front_right" field.</summary>
    public const int WheelSpdFrontRightFieldNumber = 3;
    private double wheelSpdFrontRight_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdFrontRight {
      get { return wheelSpdFrontRight_; }
      set {
        wheelSpdFrontRight_ = value;
      }
    }

    /// <summary>Field number for the "wheel_spd_front_left" field.</summary>
    public const int WheelSpdFrontLeftFieldNumber = 4;
    private double wheelSpdFrontLeft_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpdFrontLeft {
      get { return wheelSpdFrontLeft_; }
      set {
        wheelSpdFrontLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wheel_speed_rpt_407);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wheel_speed_rpt_407 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WheelSpdRearRight != other.WheelSpdRearRight) return false;
      if (WheelSpdRearLeft != other.WheelSpdRearLeft) return false;
      if (WheelSpdFrontRight != other.WheelSpdFrontRight) return false;
      if (WheelSpdFrontLeft != other.WheelSpdFrontLeft) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WheelSpdRearRight != 0D) hash ^= WheelSpdRearRight.GetHashCode();
      if (WheelSpdRearLeft != 0D) hash ^= WheelSpdRearLeft.GetHashCode();
      if (WheelSpdFrontRight != 0D) hash ^= WheelSpdFrontRight.GetHashCode();
      if (WheelSpdFrontLeft != 0D) hash ^= WheelSpdFrontLeft.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WheelSpdRearRight != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(WheelSpdRearRight);
      }
      if (WheelSpdRearLeft != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(WheelSpdRearLeft);
      }
      if (WheelSpdFrontRight != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(WheelSpdFrontRight);
      }
      if (WheelSpdFrontLeft != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(WheelSpdFrontLeft);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WheelSpdRearRight != 0D) {
        size += 1 + 8;
      }
      if (WheelSpdRearLeft != 0D) {
        size += 1 + 8;
      }
      if (WheelSpdFrontRight != 0D) {
        size += 1 + 8;
      }
      if (WheelSpdFrontLeft != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wheel_speed_rpt_407 other) {
      if (other == null) {
        return;
      }
      if (other.WheelSpdRearRight != 0D) {
        WheelSpdRearRight = other.WheelSpdRearRight;
      }
      if (other.WheelSpdRearLeft != 0D) {
        WheelSpdRearLeft = other.WheelSpdRearLeft;
      }
      if (other.WheelSpdFrontRight != 0D) {
        WheelSpdFrontRight = other.WheelSpdFrontRight;
      }
      if (other.WheelSpdFrontLeft != 0D) {
        WheelSpdFrontLeft = other.WheelSpdFrontLeft;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            WheelSpdRearRight = input.ReadDouble();
            break;
          }
          case 17: {
            WheelSpdRearLeft = input.ReadDouble();
            break;
          }
          case 25: {
            WheelSpdFrontRight = input.ReadDouble();
            break;
          }
          case 33: {
            WheelSpdFrontLeft = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steering_motor_rpt_3_406 : pb::IMessage<Steering_motor_rpt_3_406> {
    private static readonly pb::MessageParser<Steering_motor_rpt_3_406> _parser = new pb::MessageParser<Steering_motor_rpt_3_406>(() => new Steering_motor_rpt_3_406());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_motor_rpt_3_406> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_3_406() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_3_406(Steering_motor_rpt_3_406 other) : this() {
      torqueOutput_ = other.torqueOutput_;
      torqueInput_ = other.torqueInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_3_406 Clone() {
      return new Steering_motor_rpt_3_406(this);
    }

    /// <summary>Field number for the "torque_output" field.</summary>
    public const int TorqueOutputFieldNumber = 1;
    private double torqueOutput_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueOutput {
      get { return torqueOutput_; }
      set {
        torqueOutput_ = value;
      }
    }

    /// <summary>Field number for the "torque_input" field.</summary>
    public const int TorqueInputFieldNumber = 2;
    private double torqueInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueInput {
      get { return torqueInput_; }
      set {
        torqueInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_motor_rpt_3_406);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_motor_rpt_3_406 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TorqueOutput != other.TorqueOutput) return false;
      if (TorqueInput != other.TorqueInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TorqueOutput != 0D) hash ^= TorqueOutput.GetHashCode();
      if (TorqueInput != 0D) hash ^= TorqueInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TorqueOutput != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TorqueOutput);
      }
      if (TorqueInput != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TorqueInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TorqueOutput != 0D) {
        size += 1 + 8;
      }
      if (TorqueInput != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_motor_rpt_3_406 other) {
      if (other == null) {
        return;
      }
      if (other.TorqueOutput != 0D) {
        TorqueOutput = other.TorqueOutput;
      }
      if (other.TorqueInput != 0D) {
        TorqueInput = other.TorqueInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TorqueOutput = input.ReadDouble();
            break;
          }
          case 17: {
            TorqueInput = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steering_motor_rpt_2_405 : pb::IMessage<Steering_motor_rpt_2_405> {
    private static readonly pb::MessageParser<Steering_motor_rpt_2_405> _parser = new pb::MessageParser<Steering_motor_rpt_2_405>(() => new Steering_motor_rpt_2_405());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_motor_rpt_2_405> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_2_405() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_2_405(Steering_motor_rpt_2_405 other) : this() {
      encoderTemperature_ = other.encoderTemperature_;
      motorTemperature_ = other.motorTemperature_;
      angularSpeed_ = other.angularSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_2_405 Clone() {
      return new Steering_motor_rpt_2_405(this);
    }

    /// <summary>Field number for the "encoder_temperature" field.</summary>
    public const int EncoderTemperatureFieldNumber = 1;
    private int encoderTemperature_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderTemperature {
      get { return encoderTemperature_; }
      set {
        encoderTemperature_ = value;
      }
    }

    /// <summary>Field number for the "motor_temperature" field.</summary>
    public const int MotorTemperatureFieldNumber = 2;
    private int motorTemperature_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MotorTemperature {
      get { return motorTemperature_; }
      set {
        motorTemperature_ = value;
      }
    }

    /// <summary>Field number for the "angular_speed" field.</summary>
    public const int AngularSpeedFieldNumber = 3;
    private double angularSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngularSpeed {
      get { return angularSpeed_; }
      set {
        angularSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_motor_rpt_2_405);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_motor_rpt_2_405 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncoderTemperature != other.EncoderTemperature) return false;
      if (MotorTemperature != other.MotorTemperature) return false;
      if (AngularSpeed != other.AngularSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncoderTemperature != 0) hash ^= EncoderTemperature.GetHashCode();
      if (MotorTemperature != 0) hash ^= MotorTemperature.GetHashCode();
      if (AngularSpeed != 0D) hash ^= AngularSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncoderTemperature != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AngularSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncoderTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_motor_rpt_2_405 other) {
      if (other == null) {
        return;
      }
      if (other.EncoderTemperature != 0) {
        EncoderTemperature = other.EncoderTemperature;
      }
      if (other.MotorTemperature != 0) {
        MotorTemperature = other.MotorTemperature;
      }
      if (other.AngularSpeed != 0D) {
        AngularSpeed = other.AngularSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EncoderTemperature = input.ReadInt32();
            break;
          }
          case 16: {
            MotorTemperature = input.ReadInt32();
            break;
          }
          case 25: {
            AngularSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Steering_motor_rpt_1_404 : pb::IMessage<Steering_motor_rpt_1_404> {
    private static readonly pb::MessageParser<Steering_motor_rpt_1_404> _parser = new pb::MessageParser<Steering_motor_rpt_1_404>(() => new Steering_motor_rpt_1_404());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_motor_rpt_1_404> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_1_404() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_1_404(Steering_motor_rpt_1_404 other) : this() {
      motorCurrent_ = other.motorCurrent_;
      shaftPosition_ = other.shaftPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_motor_rpt_1_404 Clone() {
      return new Steering_motor_rpt_1_404(this);
    }

    /// <summary>Field number for the "motor_current" field.</summary>
    public const int MotorCurrentFieldNumber = 1;
    private double motorCurrent_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MotorCurrent {
      get { return motorCurrent_; }
      set {
        motorCurrent_ = value;
      }
    }

    /// <summary>Field number for the "shaft_position" field.</summary>
    public const int ShaftPositionFieldNumber = 2;
    private double shaftPosition_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShaftPosition {
      get { return shaftPosition_; }
      set {
        shaftPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_motor_rpt_1_404);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_motor_rpt_1_404 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MotorCurrent != other.MotorCurrent) return false;
      if (ShaftPosition != other.ShaftPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MotorCurrent != 0D) hash ^= MotorCurrent.GetHashCode();
      if (ShaftPosition != 0D) hash ^= ShaftPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MotorCurrent != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MotorCurrent);
      }
      if (ShaftPosition != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ShaftPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MotorCurrent != 0D) {
        size += 1 + 8;
      }
      if (ShaftPosition != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_motor_rpt_1_404 other) {
      if (other == null) {
        return;
      }
      if (other.MotorCurrent != 0D) {
        MotorCurrent = other.MotorCurrent;
      }
      if (other.ShaftPosition != 0D) {
        ShaftPosition = other.ShaftPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MotorCurrent = input.ReadDouble();
            break;
          }
          case 17: {
            ShaftPosition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_motor_rpt_3_403 : pb::IMessage<Brake_motor_rpt_3_403> {
    private static readonly pb::MessageParser<Brake_motor_rpt_3_403> _parser = new pb::MessageParser<Brake_motor_rpt_3_403>(() => new Brake_motor_rpt_3_403());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_motor_rpt_3_403> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_3_403() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_3_403(Brake_motor_rpt_3_403 other) : this() {
      torqueOutput_ = other.torqueOutput_;
      torqueInput_ = other.torqueInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_3_403 Clone() {
      return new Brake_motor_rpt_3_403(this);
    }

    /// <summary>Field number for the "torque_output" field.</summary>
    public const int TorqueOutputFieldNumber = 1;
    private double torqueOutput_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueOutput {
      get { return torqueOutput_; }
      set {
        torqueOutput_ = value;
      }
    }

    /// <summary>Field number for the "torque_input" field.</summary>
    public const int TorqueInputFieldNumber = 2;
    private double torqueInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TorqueInput {
      get { return torqueInput_; }
      set {
        torqueInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_motor_rpt_3_403);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_motor_rpt_3_403 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TorqueOutput != other.TorqueOutput) return false;
      if (TorqueInput != other.TorqueInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TorqueOutput != 0D) hash ^= TorqueOutput.GetHashCode();
      if (TorqueInput != 0D) hash ^= TorqueInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TorqueOutput != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TorqueOutput);
      }
      if (TorqueInput != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TorqueInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TorqueOutput != 0D) {
        size += 1 + 8;
      }
      if (TorqueInput != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_motor_rpt_3_403 other) {
      if (other == null) {
        return;
      }
      if (other.TorqueOutput != 0D) {
        TorqueOutput = other.TorqueOutput;
      }
      if (other.TorqueInput != 0D) {
        TorqueInput = other.TorqueInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TorqueOutput = input.ReadDouble();
            break;
          }
          case 17: {
            TorqueInput = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_motor_rpt_2_402 : pb::IMessage<Brake_motor_rpt_2_402> {
    private static readonly pb::MessageParser<Brake_motor_rpt_2_402> _parser = new pb::MessageParser<Brake_motor_rpt_2_402>(() => new Brake_motor_rpt_2_402());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_motor_rpt_2_402> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_2_402() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_2_402(Brake_motor_rpt_2_402 other) : this() {
      encoderTemperature_ = other.encoderTemperature_;
      motorTemperature_ = other.motorTemperature_;
      angularSpeed_ = other.angularSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_2_402 Clone() {
      return new Brake_motor_rpt_2_402(this);
    }

    /// <summary>Field number for the "encoder_temperature" field.</summary>
    public const int EncoderTemperatureFieldNumber = 1;
    private int encoderTemperature_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderTemperature {
      get { return encoderTemperature_; }
      set {
        encoderTemperature_ = value;
      }
    }

    /// <summary>Field number for the "motor_temperature" field.</summary>
    public const int MotorTemperatureFieldNumber = 2;
    private int motorTemperature_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MotorTemperature {
      get { return motorTemperature_; }
      set {
        motorTemperature_ = value;
      }
    }

    /// <summary>Field number for the "angular_speed" field.</summary>
    public const int AngularSpeedFieldNumber = 3;
    private double angularSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngularSpeed {
      get { return angularSpeed_; }
      set {
        angularSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_motor_rpt_2_402);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_motor_rpt_2_402 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncoderTemperature != other.EncoderTemperature) return false;
      if (MotorTemperature != other.MotorTemperature) return false;
      if (AngularSpeed != other.AngularSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncoderTemperature != 0) hash ^= EncoderTemperature.GetHashCode();
      if (MotorTemperature != 0) hash ^= MotorTemperature.GetHashCode();
      if (AngularSpeed != 0D) hash ^= AngularSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncoderTemperature != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AngularSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncoderTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderTemperature);
      }
      if (MotorTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MotorTemperature);
      }
      if (AngularSpeed != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_motor_rpt_2_402 other) {
      if (other == null) {
        return;
      }
      if (other.EncoderTemperature != 0) {
        EncoderTemperature = other.EncoderTemperature;
      }
      if (other.MotorTemperature != 0) {
        MotorTemperature = other.MotorTemperature;
      }
      if (other.AngularSpeed != 0D) {
        AngularSpeed = other.AngularSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EncoderTemperature = input.ReadInt32();
            break;
          }
          case 16: {
            MotorTemperature = input.ReadInt32();
            break;
          }
          case 25: {
            AngularSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_motor_rpt_1_401 : pb::IMessage<Brake_motor_rpt_1_401> {
    private static readonly pb::MessageParser<Brake_motor_rpt_1_401> _parser = new pb::MessageParser<Brake_motor_rpt_1_401>(() => new Brake_motor_rpt_1_401());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_motor_rpt_1_401> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_1_401() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_1_401(Brake_motor_rpt_1_401 other) : this() {
      motorCurrent_ = other.motorCurrent_;
      shaftPosition_ = other.shaftPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_motor_rpt_1_401 Clone() {
      return new Brake_motor_rpt_1_401(this);
    }

    /// <summary>Field number for the "motor_current" field.</summary>
    public const int MotorCurrentFieldNumber = 1;
    private double motorCurrent_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MotorCurrent {
      get { return motorCurrent_; }
      set {
        motorCurrent_ = value;
      }
    }

    /// <summary>Field number for the "shaft_position" field.</summary>
    public const int ShaftPositionFieldNumber = 2;
    private double shaftPosition_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShaftPosition {
      get { return shaftPosition_; }
      set {
        shaftPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_motor_rpt_1_401);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_motor_rpt_1_401 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MotorCurrent != other.MotorCurrent) return false;
      if (ShaftPosition != other.ShaftPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MotorCurrent != 0D) hash ^= MotorCurrent.GetHashCode();
      if (ShaftPosition != 0D) hash ^= ShaftPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MotorCurrent != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MotorCurrent);
      }
      if (ShaftPosition != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ShaftPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MotorCurrent != 0D) {
        size += 1 + 8;
      }
      if (ShaftPosition != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_motor_rpt_1_401 other) {
      if (other == null) {
        return;
      }
      if (other.MotorCurrent != 0D) {
        MotorCurrent = other.MotorCurrent;
      }
      if (other.ShaftPosition != 0D) {
        ShaftPosition = other.ShaftPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MotorCurrent = input.ReadDouble();
            break;
          }
          case 17: {
            ShaftPosition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Wiper_aux_rpt_334 : pb::IMessage<Wiper_aux_rpt_334> {
    private static readonly pb::MessageParser<Wiper_aux_rpt_334> _parser = new pb::MessageParser<Wiper_aux_rpt_334>(() => new Wiper_aux_rpt_334());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wiper_aux_rpt_334> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_aux_rpt_334() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_aux_rpt_334(Wiper_aux_rpt_334 other) : this() {
      sprayEmptyIsValid_ = other.sprayEmptyIsValid_;
      sprayEmpty_ = other.sprayEmpty_;
      sprayNearEmptyIsValid_ = other.sprayNearEmptyIsValid_;
      sprayNearEmpty_ = other.sprayNearEmpty_;
      rearSprayingIsValid_ = other.rearSprayingIsValid_;
      rearSpraying_ = other.rearSpraying_;
      rearWipingIsValid_ = other.rearWipingIsValid_;
      rearWiping_ = other.rearWiping_;
      frontSprayingIsValid_ = other.frontSprayingIsValid_;
      frontSpraying_ = other.frontSpraying_;
      frontWipingIsValid_ = other.frontWipingIsValid_;
      frontWiping_ = other.frontWiping_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wiper_aux_rpt_334 Clone() {
      return new Wiper_aux_rpt_334(this);
    }

    /// <summary>Field number for the "spray_empty_is_valid" field.</summary>
    public const int SprayEmptyIsValidFieldNumber = 1;
    private bool sprayEmptyIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SprayEmptyIsValid {
      get { return sprayEmptyIsValid_; }
      set {
        sprayEmptyIsValid_ = value;
      }
    }

    /// <summary>Field number for the "spray_empty" field.</summary>
    public const int SprayEmptyFieldNumber = 2;
    private bool sprayEmpty_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SprayEmpty {
      get { return sprayEmpty_; }
      set {
        sprayEmpty_ = value;
      }
    }

    /// <summary>Field number for the "spray_near_empty_is_valid" field.</summary>
    public const int SprayNearEmptyIsValidFieldNumber = 3;
    private bool sprayNearEmptyIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SprayNearEmptyIsValid {
      get { return sprayNearEmptyIsValid_; }
      set {
        sprayNearEmptyIsValid_ = value;
      }
    }

    /// <summary>Field number for the "spray_near_empty" field.</summary>
    public const int SprayNearEmptyFieldNumber = 4;
    private bool sprayNearEmpty_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SprayNearEmpty {
      get { return sprayNearEmpty_; }
      set {
        sprayNearEmpty_ = value;
      }
    }

    /// <summary>Field number for the "rear_spraying_is_valid" field.</summary>
    public const int RearSprayingIsValidFieldNumber = 5;
    private bool rearSprayingIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearSprayingIsValid {
      get { return rearSprayingIsValid_; }
      set {
        rearSprayingIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rear_spraying" field.</summary>
    public const int RearSprayingFieldNumber = 6;
    private bool rearSpraying_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearSpraying {
      get { return rearSpraying_; }
      set {
        rearSpraying_ = value;
      }
    }

    /// <summary>Field number for the "rear_wiping_is_valid" field.</summary>
    public const int RearWipingIsValidFieldNumber = 7;
    private bool rearWipingIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearWipingIsValid {
      get { return rearWipingIsValid_; }
      set {
        rearWipingIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rear_wiping" field.</summary>
    public const int RearWipingFieldNumber = 8;
    private bool rearWiping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearWiping {
      get { return rearWiping_; }
      set {
        rearWiping_ = value;
      }
    }

    /// <summary>Field number for the "front_spraying_is_valid" field.</summary>
    public const int FrontSprayingIsValidFieldNumber = 9;
    private bool frontSprayingIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrontSprayingIsValid {
      get { return frontSprayingIsValid_; }
      set {
        frontSprayingIsValid_ = value;
      }
    }

    /// <summary>Field number for the "front_spraying" field.</summary>
    public const int FrontSprayingFieldNumber = 10;
    private bool frontSpraying_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrontSpraying {
      get { return frontSpraying_; }
      set {
        frontSpraying_ = value;
      }
    }

    /// <summary>Field number for the "front_wiping_is_valid" field.</summary>
    public const int FrontWipingIsValidFieldNumber = 11;
    private bool frontWipingIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrontWipingIsValid {
      get { return frontWipingIsValid_; }
      set {
        frontWipingIsValid_ = value;
      }
    }

    /// <summary>Field number for the "front_wiping" field.</summary>
    public const int FrontWipingFieldNumber = 12;
    private bool frontWiping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrontWiping {
      get { return frontWiping_; }
      set {
        frontWiping_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wiper_aux_rpt_334);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wiper_aux_rpt_334 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SprayEmptyIsValid != other.SprayEmptyIsValid) return false;
      if (SprayEmpty != other.SprayEmpty) return false;
      if (SprayNearEmptyIsValid != other.SprayNearEmptyIsValid) return false;
      if (SprayNearEmpty != other.SprayNearEmpty) return false;
      if (RearSprayingIsValid != other.RearSprayingIsValid) return false;
      if (RearSpraying != other.RearSpraying) return false;
      if (RearWipingIsValid != other.RearWipingIsValid) return false;
      if (RearWiping != other.RearWiping) return false;
      if (FrontSprayingIsValid != other.FrontSprayingIsValid) return false;
      if (FrontSpraying != other.FrontSpraying) return false;
      if (FrontWipingIsValid != other.FrontWipingIsValid) return false;
      if (FrontWiping != other.FrontWiping) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SprayEmptyIsValid != false) hash ^= SprayEmptyIsValid.GetHashCode();
      if (SprayEmpty != false) hash ^= SprayEmpty.GetHashCode();
      if (SprayNearEmptyIsValid != false) hash ^= SprayNearEmptyIsValid.GetHashCode();
      if (SprayNearEmpty != false) hash ^= SprayNearEmpty.GetHashCode();
      if (RearSprayingIsValid != false) hash ^= RearSprayingIsValid.GetHashCode();
      if (RearSpraying != false) hash ^= RearSpraying.GetHashCode();
      if (RearWipingIsValid != false) hash ^= RearWipingIsValid.GetHashCode();
      if (RearWiping != false) hash ^= RearWiping.GetHashCode();
      if (FrontSprayingIsValid != false) hash ^= FrontSprayingIsValid.GetHashCode();
      if (FrontSpraying != false) hash ^= FrontSpraying.GetHashCode();
      if (FrontWipingIsValid != false) hash ^= FrontWipingIsValid.GetHashCode();
      if (FrontWiping != false) hash ^= FrontWiping.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SprayEmptyIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(SprayEmptyIsValid);
      }
      if (SprayEmpty != false) {
        output.WriteRawTag(16);
        output.WriteBool(SprayEmpty);
      }
      if (SprayNearEmptyIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(SprayNearEmptyIsValid);
      }
      if (SprayNearEmpty != false) {
        output.WriteRawTag(32);
        output.WriteBool(SprayNearEmpty);
      }
      if (RearSprayingIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(RearSprayingIsValid);
      }
      if (RearSpraying != false) {
        output.WriteRawTag(48);
        output.WriteBool(RearSpraying);
      }
      if (RearWipingIsValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(RearWipingIsValid);
      }
      if (RearWiping != false) {
        output.WriteRawTag(64);
        output.WriteBool(RearWiping);
      }
      if (FrontSprayingIsValid != false) {
        output.WriteRawTag(72);
        output.WriteBool(FrontSprayingIsValid);
      }
      if (FrontSpraying != false) {
        output.WriteRawTag(80);
        output.WriteBool(FrontSpraying);
      }
      if (FrontWipingIsValid != false) {
        output.WriteRawTag(88);
        output.WriteBool(FrontWipingIsValid);
      }
      if (FrontWiping != false) {
        output.WriteRawTag(96);
        output.WriteBool(FrontWiping);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SprayEmptyIsValid != false) {
        size += 1 + 1;
      }
      if (SprayEmpty != false) {
        size += 1 + 1;
      }
      if (SprayNearEmptyIsValid != false) {
        size += 1 + 1;
      }
      if (SprayNearEmpty != false) {
        size += 1 + 1;
      }
      if (RearSprayingIsValid != false) {
        size += 1 + 1;
      }
      if (RearSpraying != false) {
        size += 1 + 1;
      }
      if (RearWipingIsValid != false) {
        size += 1 + 1;
      }
      if (RearWiping != false) {
        size += 1 + 1;
      }
      if (FrontSprayingIsValid != false) {
        size += 1 + 1;
      }
      if (FrontSpraying != false) {
        size += 1 + 1;
      }
      if (FrontWipingIsValid != false) {
        size += 1 + 1;
      }
      if (FrontWiping != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wiper_aux_rpt_334 other) {
      if (other == null) {
        return;
      }
      if (other.SprayEmptyIsValid != false) {
        SprayEmptyIsValid = other.SprayEmptyIsValid;
      }
      if (other.SprayEmpty != false) {
        SprayEmpty = other.SprayEmpty;
      }
      if (other.SprayNearEmptyIsValid != false) {
        SprayNearEmptyIsValid = other.SprayNearEmptyIsValid;
      }
      if (other.SprayNearEmpty != false) {
        SprayNearEmpty = other.SprayNearEmpty;
      }
      if (other.RearSprayingIsValid != false) {
        RearSprayingIsValid = other.RearSprayingIsValid;
      }
      if (other.RearSpraying != false) {
        RearSpraying = other.RearSpraying;
      }
      if (other.RearWipingIsValid != false) {
        RearWipingIsValid = other.RearWipingIsValid;
      }
      if (other.RearWiping != false) {
        RearWiping = other.RearWiping;
      }
      if (other.FrontSprayingIsValid != false) {
        FrontSprayingIsValid = other.FrontSprayingIsValid;
      }
      if (other.FrontSpraying != false) {
        FrontSpraying = other.FrontSpraying;
      }
      if (other.FrontWipingIsValid != false) {
        FrontWipingIsValid = other.FrontWipingIsValid;
      }
      if (other.FrontWiping != false) {
        FrontWiping = other.FrontWiping;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SprayEmptyIsValid = input.ReadBool();
            break;
          }
          case 16: {
            SprayEmpty = input.ReadBool();
            break;
          }
          case 24: {
            SprayNearEmptyIsValid = input.ReadBool();
            break;
          }
          case 32: {
            SprayNearEmpty = input.ReadBool();
            break;
          }
          case 40: {
            RearSprayingIsValid = input.ReadBool();
            break;
          }
          case 48: {
            RearSpraying = input.ReadBool();
            break;
          }
          case 56: {
            RearWipingIsValid = input.ReadBool();
            break;
          }
          case 64: {
            RearWiping = input.ReadBool();
            break;
          }
          case 72: {
            FrontSprayingIsValid = input.ReadBool();
            break;
          }
          case 80: {
            FrontSpraying = input.ReadBool();
            break;
          }
          case 88: {
            FrontWipingIsValid = input.ReadBool();
            break;
          }
          case 96: {
            FrontWiping = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Shift_aux_rpt_328 : pb::IMessage<Shift_aux_rpt_328> {
    private static readonly pb::MessageParser<Shift_aux_rpt_328> _parser = new pb::MessageParser<Shift_aux_rpt_328>(() => new Shift_aux_rpt_328());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shift_aux_rpt_328> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_aux_rpt_328() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_aux_rpt_328(Shift_aux_rpt_328 other) : this() {
      speedInterlockActiveIsValid_ = other.speedInterlockActiveIsValid_;
      speedInterlockActive_ = other.speedInterlockActive_;
      brakeInterlockActiveIsValid_ = other.brakeInterlockActiveIsValid_;
      brakeInterlockActive_ = other.brakeInterlockActive_;
      stayInNeutralModeIsValid_ = other.stayInNeutralModeIsValid_;
      stayInNeutralMode_ = other.stayInNeutralMode_;
      betweenGearsIsValid_ = other.betweenGearsIsValid_;
      betweenGears_ = other.betweenGears_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_aux_rpt_328 Clone() {
      return new Shift_aux_rpt_328(this);
    }

    /// <summary>Field number for the "speed_interlock_active_is_valid" field.</summary>
    public const int SpeedInterlockActiveIsValidFieldNumber = 1;
    private bool speedInterlockActiveIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpeedInterlockActiveIsValid {
      get { return speedInterlockActiveIsValid_; }
      set {
        speedInterlockActiveIsValid_ = value;
      }
    }

    /// <summary>Field number for the "speed_interlock_active" field.</summary>
    public const int SpeedInterlockActiveFieldNumber = 2;
    private bool speedInterlockActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpeedInterlockActive {
      get { return speedInterlockActive_; }
      set {
        speedInterlockActive_ = value;
      }
    }

    /// <summary>Field number for the "brake_interlock_active_is_valid" field.</summary>
    public const int BrakeInterlockActiveIsValidFieldNumber = 3;
    private bool brakeInterlockActiveIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeInterlockActiveIsValid {
      get { return brakeInterlockActiveIsValid_; }
      set {
        brakeInterlockActiveIsValid_ = value;
      }
    }

    /// <summary>Field number for the "brake_interlock_active" field.</summary>
    public const int BrakeInterlockActiveFieldNumber = 4;
    private bool brakeInterlockActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeInterlockActive {
      get { return brakeInterlockActive_; }
      set {
        brakeInterlockActive_ = value;
      }
    }

    /// <summary>Field number for the "stay_in_neutral_mode_is_valid" field.</summary>
    public const int StayInNeutralModeIsValidFieldNumber = 5;
    private bool stayInNeutralModeIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StayInNeutralModeIsValid {
      get { return stayInNeutralModeIsValid_; }
      set {
        stayInNeutralModeIsValid_ = value;
      }
    }

    /// <summary>Field number for the "stay_in_neutral_mode" field.</summary>
    public const int StayInNeutralModeFieldNumber = 6;
    private bool stayInNeutralMode_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StayInNeutralMode {
      get { return stayInNeutralMode_; }
      set {
        stayInNeutralMode_ = value;
      }
    }

    /// <summary>Field number for the "between_gears_is_valid" field.</summary>
    public const int BetweenGearsIsValidFieldNumber = 7;
    private bool betweenGearsIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BetweenGearsIsValid {
      get { return betweenGearsIsValid_; }
      set {
        betweenGearsIsValid_ = value;
      }
    }

    /// <summary>Field number for the "between_gears" field.</summary>
    public const int BetweenGearsFieldNumber = 8;
    private bool betweenGears_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BetweenGears {
      get { return betweenGears_; }
      set {
        betweenGears_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shift_aux_rpt_328);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shift_aux_rpt_328 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeedInterlockActiveIsValid != other.SpeedInterlockActiveIsValid) return false;
      if (SpeedInterlockActive != other.SpeedInterlockActive) return false;
      if (BrakeInterlockActiveIsValid != other.BrakeInterlockActiveIsValid) return false;
      if (BrakeInterlockActive != other.BrakeInterlockActive) return false;
      if (StayInNeutralModeIsValid != other.StayInNeutralModeIsValid) return false;
      if (StayInNeutralMode != other.StayInNeutralMode) return false;
      if (BetweenGearsIsValid != other.BetweenGearsIsValid) return false;
      if (BetweenGears != other.BetweenGears) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeedInterlockActiveIsValid != false) hash ^= SpeedInterlockActiveIsValid.GetHashCode();
      if (SpeedInterlockActive != false) hash ^= SpeedInterlockActive.GetHashCode();
      if (BrakeInterlockActiveIsValid != false) hash ^= BrakeInterlockActiveIsValid.GetHashCode();
      if (BrakeInterlockActive != false) hash ^= BrakeInterlockActive.GetHashCode();
      if (StayInNeutralModeIsValid != false) hash ^= StayInNeutralModeIsValid.GetHashCode();
      if (StayInNeutralMode != false) hash ^= StayInNeutralMode.GetHashCode();
      if (BetweenGearsIsValid != false) hash ^= BetweenGearsIsValid.GetHashCode();
      if (BetweenGears != false) hash ^= BetweenGears.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeedInterlockActiveIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(SpeedInterlockActiveIsValid);
      }
      if (SpeedInterlockActive != false) {
        output.WriteRawTag(16);
        output.WriteBool(SpeedInterlockActive);
      }
      if (BrakeInterlockActiveIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(BrakeInterlockActiveIsValid);
      }
      if (BrakeInterlockActive != false) {
        output.WriteRawTag(32);
        output.WriteBool(BrakeInterlockActive);
      }
      if (StayInNeutralModeIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(StayInNeutralModeIsValid);
      }
      if (StayInNeutralMode != false) {
        output.WriteRawTag(48);
        output.WriteBool(StayInNeutralMode);
      }
      if (BetweenGearsIsValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(BetweenGearsIsValid);
      }
      if (BetweenGears != false) {
        output.WriteRawTag(64);
        output.WriteBool(BetweenGears);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeedInterlockActiveIsValid != false) {
        size += 1 + 1;
      }
      if (SpeedInterlockActive != false) {
        size += 1 + 1;
      }
      if (BrakeInterlockActiveIsValid != false) {
        size += 1 + 1;
      }
      if (BrakeInterlockActive != false) {
        size += 1 + 1;
      }
      if (StayInNeutralModeIsValid != false) {
        size += 1 + 1;
      }
      if (StayInNeutralMode != false) {
        size += 1 + 1;
      }
      if (BetweenGearsIsValid != false) {
        size += 1 + 1;
      }
      if (BetweenGears != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shift_aux_rpt_328 other) {
      if (other == null) {
        return;
      }
      if (other.SpeedInterlockActiveIsValid != false) {
        SpeedInterlockActiveIsValid = other.SpeedInterlockActiveIsValid;
      }
      if (other.SpeedInterlockActive != false) {
        SpeedInterlockActive = other.SpeedInterlockActive;
      }
      if (other.BrakeInterlockActiveIsValid != false) {
        BrakeInterlockActiveIsValid = other.BrakeInterlockActiveIsValid;
      }
      if (other.BrakeInterlockActive != false) {
        BrakeInterlockActive = other.BrakeInterlockActive;
      }
      if (other.StayInNeutralModeIsValid != false) {
        StayInNeutralModeIsValid = other.StayInNeutralModeIsValid;
      }
      if (other.StayInNeutralMode != false) {
        StayInNeutralMode = other.StayInNeutralMode;
      }
      if (other.BetweenGearsIsValid != false) {
        BetweenGearsIsValid = other.BetweenGearsIsValid;
      }
      if (other.BetweenGears != false) {
        BetweenGears = other.BetweenGears;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SpeedInterlockActiveIsValid = input.ReadBool();
            break;
          }
          case 16: {
            SpeedInterlockActive = input.ReadBool();
            break;
          }
          case 24: {
            BrakeInterlockActiveIsValid = input.ReadBool();
            break;
          }
          case 32: {
            BrakeInterlockActive = input.ReadBool();
            break;
          }
          case 40: {
            StayInNeutralModeIsValid = input.ReadBool();
            break;
          }
          case 48: {
            StayInNeutralMode = input.ReadBool();
            break;
          }
          case 56: {
            BetweenGearsIsValid = input.ReadBool();
            break;
          }
          case 64: {
            BetweenGears = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Accel_rpt_200 : pb::IMessage<Accel_rpt_200> {
    private static readonly pb::MessageParser<Accel_rpt_200> _parser = new pb::MessageParser<Accel_rpt_200>(() => new Accel_rpt_200());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Accel_rpt_200> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_rpt_200() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_rpt_200(Accel_rpt_200 other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      commandOutputFault_ = other.commandOutputFault_;
      overrideActive_ = other.overrideActive_;
      enabled_ = other.enabled_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_rpt_200 Clone() {
      return new Accel_rpt_200(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 3;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 4;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 5;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 6;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 7;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 8;
    private double manualInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private double commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 10;
    private double outputValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Accel_rpt_200);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Accel_rpt_200 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (Enabled != other.Enabled) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (ManualInput != 0D) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0D) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0D) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(24);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(InputOutputFault);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(CommandOutputFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(48);
        output.WriteBool(OverrideActive);
      }
      if (Enabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(Enabled);
      }
      if (ManualInput != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ManualInput);
      }
      if (CommandedValue != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CommandedValue);
      }
      if (OutputValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (ManualInput != 0D) {
        size += 1 + 8;
      }
      if (CommandedValue != 0D) {
        size += 1 + 8;
      }
      if (OutputValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Accel_rpt_200 other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.ManualInput != 0D) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0D) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0D) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 32: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 40: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 56: {
            Enabled = input.ReadBool();
            break;
          }
          case 65: {
            ManualInput = input.ReadDouble();
            break;
          }
          case 73: {
            CommandedValue = input.ReadDouble();
            break;
          }
          case 81: {
            OutputValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_rpt_204 : pb::IMessage<Brake_rpt_204> {
    private static readonly pb::MessageParser<Brake_rpt_204> _parser = new pb::MessageParser<Brake_rpt_204>(() => new Brake_rpt_204());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_rpt_204> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_rpt_204() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_rpt_204(Brake_rpt_204 other) : this() {
      commandOutputFault_ = other.commandOutputFault_;
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_rpt_204 Clone() {
      return new Brake_rpt_204(this);
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 1;
    private bool commandOutputFault_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 2;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 3;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 4;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 5;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 6;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 7;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 8;
    private double manualInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private double commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 10;
    private double outputValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_rpt_204);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_rpt_204 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (ManualInput != 0D) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0D) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0D) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommandOutputFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(CommandOutputFault);
      }
      if (VehicleFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(24);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(32);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(48);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(Enabled);
      }
      if (ManualInput != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ManualInput);
      }
      if (CommandedValue != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CommandedValue);
      }
      if (OutputValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (ManualInput != 0D) {
        size += 1 + 8;
      }
      if (CommandedValue != 0D) {
        size += 1 + 8;
      }
      if (OutputValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_rpt_204 other) {
      if (other == null) {
        return;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.ManualInput != 0D) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0D) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0D) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 16: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 24: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 32: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 40: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 48: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 56: {
            Enabled = input.ReadBool();
            break;
          }
          case 65: {
            ManualInput = input.ReadDouble();
            break;
          }
          case 73: {
            CommandedValue = input.ReadDouble();
            break;
          }
          case 81: {
            OutputValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Horn_cmd_11c : pb::IMessage<Horn_cmd_11c> {
    private static readonly pb::MessageParser<Horn_cmd_11c> _parser = new pb::MessageParser<Horn_cmd_11c>(() => new Horn_cmd_11c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Horn_cmd_11c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_cmd_11c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_cmd_11c(Horn_cmd_11c other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      hornCmd_ = other.hornCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_cmd_11c Clone() {
      return new Horn_cmd_11c(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "horn_cmd" field.</summary>
    public const int HornCmdFieldNumber = 5;
    private global::Apollo.Canbus.Horn_cmd_11c.Types.Horn_cmdType hornCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_cmd_11c.Types.Horn_cmdType HornCmd {
      get { return hornCmd_; }
      set {
        hornCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Horn_cmd_11c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Horn_cmd_11c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (HornCmd != other.HornCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (HornCmd != 0) hash ^= HornCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (HornCmd != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) HornCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (HornCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HornCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Horn_cmd_11c other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.HornCmd != 0) {
        HornCmd = other.HornCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 40: {
            hornCmd_ = (global::Apollo.Canbus.Horn_cmd_11c.Types.Horn_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Horn_cmd_11c message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Horn_cmdType {
        [pbr::OriginalName("HORN_CMD_OFF")] HornCmdOff = 0,
        [pbr::OriginalName("HORN_CMD_ON")] HornCmdOn = 1,
      }

    }
    #endregion

  }

  public sealed partial class Global_rpt_10 : pb::IMessage<Global_rpt_10> {
    private static readonly pb::MessageParser<Global_rpt_10> _parser = new pb::MessageParser<Global_rpt_10>(() => new Global_rpt_10());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Global_rpt_10> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_rpt_10() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_rpt_10(Global_rpt_10 other) : this() {
      configFaultActive_ = other.configFaultActive_;
      pacmodSubsystemTimeout_ = other.pacmodSubsystemTimeout_;
      pacmodSystemEnabled_ = other.pacmodSystemEnabled_;
      pacmodSystemOverrideActive_ = other.pacmodSystemOverrideActive_;
      pacmodSystemFaultActive_ = other.pacmodSystemFaultActive_;
      vehCanTimeout_ = other.vehCanTimeout_;
      strCanTimeout_ = other.strCanTimeout_;
      brkCanTimeout_ = other.brkCanTimeout_;
      usrCanTimeout_ = other.usrCanTimeout_;
      usrCanReadErrors_ = other.usrCanReadErrors_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_rpt_10 Clone() {
      return new Global_rpt_10(this);
    }

    /// <summary>Field number for the "config_fault_active" field.</summary>
    public const int ConfigFaultActiveFieldNumber = 1;
    private bool configFaultActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConfigFaultActive {
      get { return configFaultActive_; }
      set {
        configFaultActive_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_subsystem_timeout" field.</summary>
    public const int PacmodSubsystemTimeoutFieldNumber = 2;
    private bool pacmodSubsystemTimeout_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodSubsystemTimeout {
      get { return pacmodSubsystemTimeout_; }
      set {
        pacmodSubsystemTimeout_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_system_enabled" field.</summary>
    public const int PacmodSystemEnabledFieldNumber = 3;
    private global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_enabledType pacmodSystemEnabled_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_enabledType PacmodSystemEnabled {
      get { return pacmodSystemEnabled_; }
      set {
        pacmodSystemEnabled_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_system_override_active" field.</summary>
    public const int PacmodSystemOverrideActiveFieldNumber = 4;
    private global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_override_activeType pacmodSystemOverrideActive_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_override_activeType PacmodSystemOverrideActive {
      get { return pacmodSystemOverrideActive_; }
      set {
        pacmodSystemOverrideActive_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_system_fault_active" field.</summary>
    public const int PacmodSystemFaultActiveFieldNumber = 5;
    private bool pacmodSystemFaultActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodSystemFaultActive {
      get { return pacmodSystemFaultActive_; }
      set {
        pacmodSystemFaultActive_ = value;
      }
    }

    /// <summary>Field number for the "veh_can_timeout" field.</summary>
    public const int VehCanTimeoutFieldNumber = 6;
    private bool vehCanTimeout_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehCanTimeout {
      get { return vehCanTimeout_; }
      set {
        vehCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "str_can_timeout" field.</summary>
    public const int StrCanTimeoutFieldNumber = 7;
    private bool strCanTimeout_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StrCanTimeout {
      get { return strCanTimeout_; }
      set {
        strCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "brk_can_timeout" field.</summary>
    public const int BrkCanTimeoutFieldNumber = 8;
    private global::Apollo.Canbus.Global_rpt_10.Types.Brk_can_timeoutType brkCanTimeout_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_10.Types.Brk_can_timeoutType BrkCanTimeout {
      get { return brkCanTimeout_; }
      set {
        brkCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "usr_can_timeout" field.</summary>
    public const int UsrCanTimeoutFieldNumber = 9;
    private bool usrCanTimeout_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsrCanTimeout {
      get { return usrCanTimeout_; }
      set {
        usrCanTimeout_ = value;
      }
    }

    /// <summary>Field number for the "usr_can_read_errors" field.</summary>
    public const int UsrCanReadErrorsFieldNumber = 10;
    private int usrCanReadErrors_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsrCanReadErrors {
      get { return usrCanReadErrors_; }
      set {
        usrCanReadErrors_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Global_rpt_10);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Global_rpt_10 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigFaultActive != other.ConfigFaultActive) return false;
      if (PacmodSubsystemTimeout != other.PacmodSubsystemTimeout) return false;
      if (PacmodSystemEnabled != other.PacmodSystemEnabled) return false;
      if (PacmodSystemOverrideActive != other.PacmodSystemOverrideActive) return false;
      if (PacmodSystemFaultActive != other.PacmodSystemFaultActive) return false;
      if (VehCanTimeout != other.VehCanTimeout) return false;
      if (StrCanTimeout != other.StrCanTimeout) return false;
      if (BrkCanTimeout != other.BrkCanTimeout) return false;
      if (UsrCanTimeout != other.UsrCanTimeout) return false;
      if (UsrCanReadErrors != other.UsrCanReadErrors) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigFaultActive != false) hash ^= ConfigFaultActive.GetHashCode();
      if (PacmodSubsystemTimeout != false) hash ^= PacmodSubsystemTimeout.GetHashCode();
      if (PacmodSystemEnabled != 0) hash ^= PacmodSystemEnabled.GetHashCode();
      if (PacmodSystemOverrideActive != 0) hash ^= PacmodSystemOverrideActive.GetHashCode();
      if (PacmodSystemFaultActive != false) hash ^= PacmodSystemFaultActive.GetHashCode();
      if (VehCanTimeout != false) hash ^= VehCanTimeout.GetHashCode();
      if (StrCanTimeout != false) hash ^= StrCanTimeout.GetHashCode();
      if (BrkCanTimeout != 0) hash ^= BrkCanTimeout.GetHashCode();
      if (UsrCanTimeout != false) hash ^= UsrCanTimeout.GetHashCode();
      if (UsrCanReadErrors != 0) hash ^= UsrCanReadErrors.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigFaultActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(ConfigFaultActive);
      }
      if (PacmodSubsystemTimeout != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodSubsystemTimeout);
      }
      if (PacmodSystemEnabled != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PacmodSystemEnabled);
      }
      if (PacmodSystemOverrideActive != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PacmodSystemOverrideActive);
      }
      if (PacmodSystemFaultActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(PacmodSystemFaultActive);
      }
      if (VehCanTimeout != false) {
        output.WriteRawTag(48);
        output.WriteBool(VehCanTimeout);
      }
      if (StrCanTimeout != false) {
        output.WriteRawTag(56);
        output.WriteBool(StrCanTimeout);
      }
      if (BrkCanTimeout != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) BrkCanTimeout);
      }
      if (UsrCanTimeout != false) {
        output.WriteRawTag(72);
        output.WriteBool(UsrCanTimeout);
      }
      if (UsrCanReadErrors != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UsrCanReadErrors);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigFaultActive != false) {
        size += 1 + 1;
      }
      if (PacmodSubsystemTimeout != false) {
        size += 1 + 1;
      }
      if (PacmodSystemEnabled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacmodSystemEnabled);
      }
      if (PacmodSystemOverrideActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacmodSystemOverrideActive);
      }
      if (PacmodSystemFaultActive != false) {
        size += 1 + 1;
      }
      if (VehCanTimeout != false) {
        size += 1 + 1;
      }
      if (StrCanTimeout != false) {
        size += 1 + 1;
      }
      if (BrkCanTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BrkCanTimeout);
      }
      if (UsrCanTimeout != false) {
        size += 1 + 1;
      }
      if (UsrCanReadErrors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsrCanReadErrors);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Global_rpt_10 other) {
      if (other == null) {
        return;
      }
      if (other.ConfigFaultActive != false) {
        ConfigFaultActive = other.ConfigFaultActive;
      }
      if (other.PacmodSubsystemTimeout != false) {
        PacmodSubsystemTimeout = other.PacmodSubsystemTimeout;
      }
      if (other.PacmodSystemEnabled != 0) {
        PacmodSystemEnabled = other.PacmodSystemEnabled;
      }
      if (other.PacmodSystemOverrideActive != 0) {
        PacmodSystemOverrideActive = other.PacmodSystemOverrideActive;
      }
      if (other.PacmodSystemFaultActive != false) {
        PacmodSystemFaultActive = other.PacmodSystemFaultActive;
      }
      if (other.VehCanTimeout != false) {
        VehCanTimeout = other.VehCanTimeout;
      }
      if (other.StrCanTimeout != false) {
        StrCanTimeout = other.StrCanTimeout;
      }
      if (other.BrkCanTimeout != 0) {
        BrkCanTimeout = other.BrkCanTimeout;
      }
      if (other.UsrCanTimeout != false) {
        UsrCanTimeout = other.UsrCanTimeout;
      }
      if (other.UsrCanReadErrors != 0) {
        UsrCanReadErrors = other.UsrCanReadErrors;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigFaultActive = input.ReadBool();
            break;
          }
          case 16: {
            PacmodSubsystemTimeout = input.ReadBool();
            break;
          }
          case 24: {
            pacmodSystemEnabled_ = (global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_enabledType) input.ReadEnum();
            break;
          }
          case 32: {
            pacmodSystemOverrideActive_ = (global::Apollo.Canbus.Global_rpt_10.Types.Pacmod_system_override_activeType) input.ReadEnum();
            break;
          }
          case 40: {
            PacmodSystemFaultActive = input.ReadBool();
            break;
          }
          case 48: {
            VehCanTimeout = input.ReadBool();
            break;
          }
          case 56: {
            StrCanTimeout = input.ReadBool();
            break;
          }
          case 64: {
            brkCanTimeout_ = (global::Apollo.Canbus.Global_rpt_10.Types.Brk_can_timeoutType) input.ReadEnum();
            break;
          }
          case 72: {
            UsrCanTimeout = input.ReadBool();
            break;
          }
          case 80: {
            UsrCanReadErrors = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Global_rpt_10 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Pacmod_system_enabledType {
        [pbr::OriginalName("PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED")] PacmodSystemEnabledControlDisabled = 0,
        [pbr::OriginalName("PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED")] PacmodSystemEnabledControlEnabled = 1,
      }

      public enum Pacmod_system_override_activeType {
        [pbr::OriginalName("PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN")] PacmodSystemOverrideActiveNotOverridden = 0,
        [pbr::OriginalName("PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN")] PacmodSystemOverrideActiveOverridden = 1,
      }

      public enum Brk_can_timeoutType {
        [pbr::OriginalName("BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT")] BrkCanTimeoutNoActiveCanTimeout = 0,
        [pbr::OriginalName("BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT")] BrkCanTimeoutActiveCanTimeout = 1,
      }

    }
    #endregion

  }

  public sealed partial class Accel_aux_rpt_300 : pb::IMessage<Accel_aux_rpt_300> {
    private static readonly pb::MessageParser<Accel_aux_rpt_300> _parser = new pb::MessageParser<Accel_aux_rpt_300>(() => new Accel_aux_rpt_300());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Accel_aux_rpt_300> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_aux_rpt_300() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_aux_rpt_300(Accel_aux_rpt_300 other) : this() {
      userInteractionIsValid_ = other.userInteractionIsValid_;
      userInteraction_ = other.userInteraction_;
      rawPedalForceIsValid_ = other.rawPedalForceIsValid_;
      rawPedalForce_ = other.rawPedalForce_;
      rawPedalPosIsValid_ = other.rawPedalPosIsValid_;
      rawPedalPos_ = other.rawPedalPos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_aux_rpt_300 Clone() {
      return new Accel_aux_rpt_300(this);
    }

    /// <summary>Field number for the "user_interaction_is_valid" field.</summary>
    public const int UserInteractionIsValidFieldNumber = 1;
    private bool userInteractionIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserInteractionIsValid {
      get { return userInteractionIsValid_; }
      set {
        userInteractionIsValid_ = value;
      }
    }

    /// <summary>Field number for the "user_interaction" field.</summary>
    public const int UserInteractionFieldNumber = 2;
    private bool userInteraction_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserInteraction {
      get { return userInteraction_; }
      set {
        userInteraction_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_force_is_valid" field.</summary>
    public const int RawPedalForceIsValidFieldNumber = 3;
    private bool rawPedalForceIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RawPedalForceIsValid {
      get { return rawPedalForceIsValid_; }
      set {
        rawPedalForceIsValid_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_force" field.</summary>
    public const int RawPedalForceFieldNumber = 4;
    private double rawPedalForce_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RawPedalForce {
      get { return rawPedalForce_; }
      set {
        rawPedalForce_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_pos_is_valid" field.</summary>
    public const int RawPedalPosIsValidFieldNumber = 5;
    private bool rawPedalPosIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RawPedalPosIsValid {
      get { return rawPedalPosIsValid_; }
      set {
        rawPedalPosIsValid_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_pos" field.</summary>
    public const int RawPedalPosFieldNumber = 6;
    private double rawPedalPos_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RawPedalPos {
      get { return rawPedalPos_; }
      set {
        rawPedalPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Accel_aux_rpt_300);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Accel_aux_rpt_300 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserInteractionIsValid != other.UserInteractionIsValid) return false;
      if (UserInteraction != other.UserInteraction) return false;
      if (RawPedalForceIsValid != other.RawPedalForceIsValid) return false;
      if (RawPedalForce != other.RawPedalForce) return false;
      if (RawPedalPosIsValid != other.RawPedalPosIsValid) return false;
      if (RawPedalPos != other.RawPedalPos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserInteractionIsValid != false) hash ^= UserInteractionIsValid.GetHashCode();
      if (UserInteraction != false) hash ^= UserInteraction.GetHashCode();
      if (RawPedalForceIsValid != false) hash ^= RawPedalForceIsValid.GetHashCode();
      if (RawPedalForce != 0D) hash ^= RawPedalForce.GetHashCode();
      if (RawPedalPosIsValid != false) hash ^= RawPedalPosIsValid.GetHashCode();
      if (RawPedalPos != 0D) hash ^= RawPedalPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserInteractionIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(UserInteractionIsValid);
      }
      if (UserInteraction != false) {
        output.WriteRawTag(16);
        output.WriteBool(UserInteraction);
      }
      if (RawPedalForceIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(RawPedalForceIsValid);
      }
      if (RawPedalForce != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RawPedalForce);
      }
      if (RawPedalPosIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(RawPedalPosIsValid);
      }
      if (RawPedalPos != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RawPedalPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserInteractionIsValid != false) {
        size += 1 + 1;
      }
      if (UserInteraction != false) {
        size += 1 + 1;
      }
      if (RawPedalForceIsValid != false) {
        size += 1 + 1;
      }
      if (RawPedalForce != 0D) {
        size += 1 + 8;
      }
      if (RawPedalPosIsValid != false) {
        size += 1 + 1;
      }
      if (RawPedalPos != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Accel_aux_rpt_300 other) {
      if (other == null) {
        return;
      }
      if (other.UserInteractionIsValid != false) {
        UserInteractionIsValid = other.UserInteractionIsValid;
      }
      if (other.UserInteraction != false) {
        UserInteraction = other.UserInteraction;
      }
      if (other.RawPedalForceIsValid != false) {
        RawPedalForceIsValid = other.RawPedalForceIsValid;
      }
      if (other.RawPedalForce != 0D) {
        RawPedalForce = other.RawPedalForce;
      }
      if (other.RawPedalPosIsValid != false) {
        RawPedalPosIsValid = other.RawPedalPosIsValid;
      }
      if (other.RawPedalPos != 0D) {
        RawPedalPos = other.RawPedalPos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserInteractionIsValid = input.ReadBool();
            break;
          }
          case 16: {
            UserInteraction = input.ReadBool();
            break;
          }
          case 24: {
            RawPedalForceIsValid = input.ReadBool();
            break;
          }
          case 33: {
            RawPedalForce = input.ReadDouble();
            break;
          }
          case 40: {
            RawPedalPosIsValid = input.ReadBool();
            break;
          }
          case 49: {
            RawPedalPos = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cruise_control_buttons_rpt_208 : pb::IMessage<Cruise_control_buttons_rpt_208> {
    private static readonly pb::MessageParser<Cruise_control_buttons_rpt_208> _parser = new pb::MessageParser<Cruise_control_buttons_rpt_208>(() => new Cruise_control_buttons_rpt_208());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cruise_control_buttons_rpt_208> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cruise_control_buttons_rpt_208() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cruise_control_buttons_rpt_208(Cruise_control_buttons_rpt_208 other) : this() {
      outputValue_ = other.outputValue_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cruise_control_buttons_rpt_208 Clone() {
      return new Cruise_control_buttons_rpt_208(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 2;
    private global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 3;
    private global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 4;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 5;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 6;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 7;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 8;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 9;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 10;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cruise_control_buttons_rpt_208);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cruise_control_buttons_rpt_208 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OutputValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ManualInput);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CommandedValue);
      }
      if (VehicleFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(48);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(64);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(80);
        output.WriteBool(CommandOutputFault);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cruise_control_buttons_rpt_208 other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            outputValue_ = (global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 16: {
            manualInput_ = (global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 24: {
            commandedValue_ = (global::Apollo.Canbus.Cruise_control_buttons_rpt_208.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 32: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 40: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 48: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 56: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 64: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 72: {
            Enabled = input.ReadBool();
            break;
          }
          case 80: {
            CommandOutputFault = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Cruise_control_buttons_rpt_208 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_CRUISE_CONTROL_NONE")] OutputValueCruiseControlNone = 0,
        [pbr::OriginalName("OUTPUT_VALUE_CRUISE_CONTROL_CNCL")] OutputValueCruiseControlCncl = 1,
        [pbr::OriginalName("OUTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER")] OutputValueCruiseControlAccFurther = 2,
        [pbr::OriginalName("OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOSER")] OutputValueCruiseControlAccCloser = 3,
        [pbr::OriginalName("OUTPUT_VALUE_CRUISE_CONTROL_SET_DEC")] OutputValueCruiseControlSetDec = 4,
        [pbr::OriginalName("OUTPUT_VALUE_CRUISE_CONTROL_RES_INC")] OutputValueCruiseControlResInc = 5,
        [pbr::OriginalName("OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF")] OutputValueCruiseControlOnOff = 6,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_CRUISE_CONTROL_NONE")] ManualInputCruiseControlNone = 0,
        [pbr::OriginalName("MANUAL_INPUT_CRUISE_CONTROL_CNCL")] ManualInputCruiseControlCncl = 1,
        [pbr::OriginalName("MANUAL_INPUT_CRUISE_CONTROL_ACC_FURTHER")] ManualInputCruiseControlAccFurther = 2,
        [pbr::OriginalName("MANUAL_INPUT_CRUISE_CONTROL_ACC_CLOSER")] ManualInputCruiseControlAccCloser = 3,
        [pbr::OriginalName("MANUAL_INPUT_CRUISE_CONTROL_SET_DEC")] ManualInputCruiseControlSetDec = 4,
        [pbr::OriginalName("MANUAL_INPUT_CRUISE_CONTROL_RES_INC")] ManualInputCruiseControlResInc = 5,
        [pbr::OriginalName("MANUAL_INPUT_CRUISE_CONTROL_ON_OFF")] ManualInputCruiseControlOnOff = 6,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_CRUISE_CONTROL_NONE")] CommandedValueCruiseControlNone = 0,
        [pbr::OriginalName("COMMANDED_VALUE_CRUISE_CONTROL_CNCL")] CommandedValueCruiseControlCncl = 1,
        [pbr::OriginalName("COMMANDED_VALUE_CRUISE_CONTROL_ACC_FURTHER")] CommandedValueCruiseControlAccFurther = 2,
        [pbr::OriginalName("COMMANDED_VALUE_CRUISE_CONTROL_ACC_CLOSER")] CommandedValueCruiseControlAccCloser = 3,
        [pbr::OriginalName("COMMANDED_VALUE_CRUISE_CONTROL_SET_DEC")] CommandedValueCruiseControlSetDec = 4,
        [pbr::OriginalName("COMMANDED_VALUE_CRUISE_CONTROL_RES_INC")] CommandedValueCruiseControlResInc = 5,
        [pbr::OriginalName("COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF")] CommandedValueCruiseControlOnOff = 6,
      }

    }
    #endregion

  }

  public sealed partial class Vehicle_speed_rpt_400 : pb::IMessage<Vehicle_speed_rpt_400> {
    private static readonly pb::MessageParser<Vehicle_speed_rpt_400> _parser = new pb::MessageParser<Vehicle_speed_rpt_400>(() => new Vehicle_speed_rpt_400());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle_speed_rpt_400> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle_speed_rpt_400() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle_speed_rpt_400(Vehicle_speed_rpt_400 other) : this() {
      vehicleSpeed_ = other.vehicleSpeed_;
      vehicleSpeedValid_ = other.vehicleSpeedValid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle_speed_rpt_400 Clone() {
      return new Vehicle_speed_rpt_400(this);
    }

    /// <summary>Field number for the "vehicle_speed" field.</summary>
    public const int VehicleSpeedFieldNumber = 1;
    private double vehicleSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleSpeed {
      get { return vehicleSpeed_; }
      set {
        vehicleSpeed_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_speed_valid" field.</summary>
    public const int VehicleSpeedValidFieldNumber = 2;
    private global::Apollo.Canbus.Vehicle_speed_rpt_400.Types.Vehicle_speed_validType vehicleSpeedValid_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Vehicle_speed_rpt_400.Types.Vehicle_speed_validType VehicleSpeedValid {
      get { return vehicleSpeedValid_; }
      set {
        vehicleSpeedValid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle_speed_rpt_400);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle_speed_rpt_400 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleSpeed != other.VehicleSpeed) return false;
      if (VehicleSpeedValid != other.VehicleSpeedValid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleSpeed != 0D) hash ^= VehicleSpeed.GetHashCode();
      if (VehicleSpeedValid != 0) hash ^= VehicleSpeedValid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(VehicleSpeed);
      }
      if (VehicleSpeedValid != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VehicleSpeedValid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleSpeed != 0D) {
        size += 1 + 8;
      }
      if (VehicleSpeedValid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VehicleSpeedValid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle_speed_rpt_400 other) {
      if (other == null) {
        return;
      }
      if (other.VehicleSpeed != 0D) {
        VehicleSpeed = other.VehicleSpeed;
      }
      if (other.VehicleSpeedValid != 0) {
        VehicleSpeedValid = other.VehicleSpeedValid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            VehicleSpeed = input.ReadDouble();
            break;
          }
          case 16: {
            vehicleSpeedValid_ = (global::Apollo.Canbus.Vehicle_speed_rpt_400.Types.Vehicle_speed_validType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vehicle_speed_rpt_400 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Vehicle_speed_validType {
        [pbr::OriginalName("VEHICLE_SPEED_VALID_INVALID")] VehicleSpeedValidInvalid = 0,
        [pbr::OriginalName("VEHICLE_SPEED_VALID_VALID")] VehicleSpeedValidValid = 1,
      }

    }
    #endregion

  }

  public sealed partial class Brake_aux_rpt_304 : pb::IMessage<Brake_aux_rpt_304> {
    private static readonly pb::MessageParser<Brake_aux_rpt_304> _parser = new pb::MessageParser<Brake_aux_rpt_304>(() => new Brake_aux_rpt_304());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_aux_rpt_304> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_aux_rpt_304() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_aux_rpt_304(Brake_aux_rpt_304 other) : this() {
      brakeOnOffIsValid_ = other.brakeOnOffIsValid_;
      brakeOnOff_ = other.brakeOnOff_;
      userInteractionIsValid_ = other.userInteractionIsValid_;
      userInteraction_ = other.userInteraction_;
      rawBrakePressureIsValid_ = other.rawBrakePressureIsValid_;
      rawBrakePressure_ = other.rawBrakePressure_;
      rawPedalForceIsValid_ = other.rawPedalForceIsValid_;
      rawPedalForce_ = other.rawPedalForce_;
      rawPedalPosIsValid_ = other.rawPedalPosIsValid_;
      rawPedalPos_ = other.rawPedalPos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_aux_rpt_304 Clone() {
      return new Brake_aux_rpt_304(this);
    }

    /// <summary>Field number for the "brake_on_off_is_valid" field.</summary>
    public const int BrakeOnOffIsValidFieldNumber = 1;
    private bool brakeOnOffIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeOnOffIsValid {
      get { return brakeOnOffIsValid_; }
      set {
        brakeOnOffIsValid_ = value;
      }
    }

    /// <summary>Field number for the "brake_on_off" field.</summary>
    public const int BrakeOnOffFieldNumber = 2;
    private bool brakeOnOff_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeOnOff {
      get { return brakeOnOff_; }
      set {
        brakeOnOff_ = value;
      }
    }

    /// <summary>Field number for the "user_interaction_is_valid" field.</summary>
    public const int UserInteractionIsValidFieldNumber = 3;
    private bool userInteractionIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserInteractionIsValid {
      get { return userInteractionIsValid_; }
      set {
        userInteractionIsValid_ = value;
      }
    }

    /// <summary>Field number for the "user_interaction" field.</summary>
    public const int UserInteractionFieldNumber = 4;
    private bool userInteraction_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserInteraction {
      get { return userInteraction_; }
      set {
        userInteraction_ = value;
      }
    }

    /// <summary>Field number for the "raw_brake_pressure_is_valid" field.</summary>
    public const int RawBrakePressureIsValidFieldNumber = 5;
    private bool rawBrakePressureIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RawBrakePressureIsValid {
      get { return rawBrakePressureIsValid_; }
      set {
        rawBrakePressureIsValid_ = value;
      }
    }

    /// <summary>Field number for the "raw_brake_pressure" field.</summary>
    public const int RawBrakePressureFieldNumber = 6;
    private double rawBrakePressure_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RawBrakePressure {
      get { return rawBrakePressure_; }
      set {
        rawBrakePressure_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_force_is_valid" field.</summary>
    public const int RawPedalForceIsValidFieldNumber = 7;
    private bool rawPedalForceIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RawPedalForceIsValid {
      get { return rawPedalForceIsValid_; }
      set {
        rawPedalForceIsValid_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_force" field.</summary>
    public const int RawPedalForceFieldNumber = 8;
    private double rawPedalForce_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RawPedalForce {
      get { return rawPedalForce_; }
      set {
        rawPedalForce_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_pos_is_valid" field.</summary>
    public const int RawPedalPosIsValidFieldNumber = 9;
    private bool rawPedalPosIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RawPedalPosIsValid {
      get { return rawPedalPosIsValid_; }
      set {
        rawPedalPosIsValid_ = value;
      }
    }

    /// <summary>Field number for the "raw_pedal_pos" field.</summary>
    public const int RawPedalPosFieldNumber = 10;
    private double rawPedalPos_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RawPedalPos {
      get { return rawPedalPos_; }
      set {
        rawPedalPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_aux_rpt_304);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_aux_rpt_304 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrakeOnOffIsValid != other.BrakeOnOffIsValid) return false;
      if (BrakeOnOff != other.BrakeOnOff) return false;
      if (UserInteractionIsValid != other.UserInteractionIsValid) return false;
      if (UserInteraction != other.UserInteraction) return false;
      if (RawBrakePressureIsValid != other.RawBrakePressureIsValid) return false;
      if (RawBrakePressure != other.RawBrakePressure) return false;
      if (RawPedalForceIsValid != other.RawPedalForceIsValid) return false;
      if (RawPedalForce != other.RawPedalForce) return false;
      if (RawPedalPosIsValid != other.RawPedalPosIsValid) return false;
      if (RawPedalPos != other.RawPedalPos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrakeOnOffIsValid != false) hash ^= BrakeOnOffIsValid.GetHashCode();
      if (BrakeOnOff != false) hash ^= BrakeOnOff.GetHashCode();
      if (UserInteractionIsValid != false) hash ^= UserInteractionIsValid.GetHashCode();
      if (UserInteraction != false) hash ^= UserInteraction.GetHashCode();
      if (RawBrakePressureIsValid != false) hash ^= RawBrakePressureIsValid.GetHashCode();
      if (RawBrakePressure != 0D) hash ^= RawBrakePressure.GetHashCode();
      if (RawPedalForceIsValid != false) hash ^= RawPedalForceIsValid.GetHashCode();
      if (RawPedalForce != 0D) hash ^= RawPedalForce.GetHashCode();
      if (RawPedalPosIsValid != false) hash ^= RawPedalPosIsValid.GetHashCode();
      if (RawPedalPos != 0D) hash ^= RawPedalPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrakeOnOffIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(BrakeOnOffIsValid);
      }
      if (BrakeOnOff != false) {
        output.WriteRawTag(16);
        output.WriteBool(BrakeOnOff);
      }
      if (UserInteractionIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(UserInteractionIsValid);
      }
      if (UserInteraction != false) {
        output.WriteRawTag(32);
        output.WriteBool(UserInteraction);
      }
      if (RawBrakePressureIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(RawBrakePressureIsValid);
      }
      if (RawBrakePressure != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RawBrakePressure);
      }
      if (RawPedalForceIsValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(RawPedalForceIsValid);
      }
      if (RawPedalForce != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(RawPedalForce);
      }
      if (RawPedalPosIsValid != false) {
        output.WriteRawTag(72);
        output.WriteBool(RawPedalPosIsValid);
      }
      if (RawPedalPos != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(RawPedalPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrakeOnOffIsValid != false) {
        size += 1 + 1;
      }
      if (BrakeOnOff != false) {
        size += 1 + 1;
      }
      if (UserInteractionIsValid != false) {
        size += 1 + 1;
      }
      if (UserInteraction != false) {
        size += 1 + 1;
      }
      if (RawBrakePressureIsValid != false) {
        size += 1 + 1;
      }
      if (RawBrakePressure != 0D) {
        size += 1 + 8;
      }
      if (RawPedalForceIsValid != false) {
        size += 1 + 1;
      }
      if (RawPedalForce != 0D) {
        size += 1 + 8;
      }
      if (RawPedalPosIsValid != false) {
        size += 1 + 1;
      }
      if (RawPedalPos != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_aux_rpt_304 other) {
      if (other == null) {
        return;
      }
      if (other.BrakeOnOffIsValid != false) {
        BrakeOnOffIsValid = other.BrakeOnOffIsValid;
      }
      if (other.BrakeOnOff != false) {
        BrakeOnOff = other.BrakeOnOff;
      }
      if (other.UserInteractionIsValid != false) {
        UserInteractionIsValid = other.UserInteractionIsValid;
      }
      if (other.UserInteraction != false) {
        UserInteraction = other.UserInteraction;
      }
      if (other.RawBrakePressureIsValid != false) {
        RawBrakePressureIsValid = other.RawBrakePressureIsValid;
      }
      if (other.RawBrakePressure != 0D) {
        RawBrakePressure = other.RawBrakePressure;
      }
      if (other.RawPedalForceIsValid != false) {
        RawPedalForceIsValid = other.RawPedalForceIsValid;
      }
      if (other.RawPedalForce != 0D) {
        RawPedalForce = other.RawPedalForce;
      }
      if (other.RawPedalPosIsValid != false) {
        RawPedalPosIsValid = other.RawPedalPosIsValid;
      }
      if (other.RawPedalPos != 0D) {
        RawPedalPos = other.RawPedalPos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BrakeOnOffIsValid = input.ReadBool();
            break;
          }
          case 16: {
            BrakeOnOff = input.ReadBool();
            break;
          }
          case 24: {
            UserInteractionIsValid = input.ReadBool();
            break;
          }
          case 32: {
            UserInteraction = input.ReadBool();
            break;
          }
          case 40: {
            RawBrakePressureIsValid = input.ReadBool();
            break;
          }
          case 49: {
            RawBrakePressure = input.ReadDouble();
            break;
          }
          case 56: {
            RawPedalForceIsValid = input.ReadBool();
            break;
          }
          case 65: {
            RawPedalForce = input.ReadDouble();
            break;
          }
          case 72: {
            RawPedalPosIsValid = input.ReadBool();
            break;
          }
          case 81: {
            RawPedalPos = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Media_controls_cmd_120 : pb::IMessage<Media_controls_cmd_120> {
    private static readonly pb::MessageParser<Media_controls_cmd_120> _parser = new pb::MessageParser<Media_controls_cmd_120>(() => new Media_controls_cmd_120());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Media_controls_cmd_120> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Media_controls_cmd_120() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Media_controls_cmd_120(Media_controls_cmd_120 other) : this() {
      mediaControlsCmd_ = other.mediaControlsCmd_;
      ignoreOverrides_ = other.ignoreOverrides_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      enable_ = other.enable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Media_controls_cmd_120 Clone() {
      return new Media_controls_cmd_120(this);
    }

    /// <summary>Field number for the "media_controls_cmd" field.</summary>
    public const int MediaControlsCmdFieldNumber = 1;
    private global::Apollo.Canbus.Media_controls_cmd_120.Types.Media_controls_cmdType mediaControlsCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Media_controls_cmd_120.Types.Media_controls_cmdType MediaControlsCmd {
      get { return mediaControlsCmd_; }
      set {
        mediaControlsCmd_ = value;
      }
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 2;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 5;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Media_controls_cmd_120);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Media_controls_cmd_120 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MediaControlsCmd != other.MediaControlsCmd) return false;
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (Enable != other.Enable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MediaControlsCmd != 0) hash ^= MediaControlsCmd.GetHashCode();
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MediaControlsCmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MediaControlsCmd);
      }
      if (IgnoreOverrides != false) {
        output.WriteRawTag(16);
        output.WriteBool(IgnoreOverrides);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (Enable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Enable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MediaControlsCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MediaControlsCmd);
      }
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Media_controls_cmd_120 other) {
      if (other == null) {
        return;
      }
      if (other.MediaControlsCmd != 0) {
        MediaControlsCmd = other.MediaControlsCmd;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mediaControlsCmd_ = (global::Apollo.Canbus.Media_controls_cmd_120.Types.Media_controls_cmdType) input.ReadEnum();
            break;
          }
          case 16: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 40: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Media_controls_cmd_120 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Media_controls_cmdType {
        [pbr::OriginalName("MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE")] MediaControlsCmdMediaControlNone = 0,
        [pbr::OriginalName("MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND")] MediaControlsCmdMediaControlVoiceCommand = 1,
        [pbr::OriginalName("MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE")] MediaControlsCmdMediaControlMute = 2,
        [pbr::OriginalName("MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER")] MediaControlsCmdMediaControlPrevTrackAnswer = 3,
        [pbr::OriginalName("MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP")] MediaControlsCmdMediaControlNextTrackHangUp = 4,
        [pbr::OriginalName("MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP")] MediaControlsCmdMediaControlVolUp = 5,
        [pbr::OriginalName("MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN")] MediaControlsCmdMediaControlVolDown = 6,
      }

    }
    #endregion

  }

  public sealed partial class Cruise_control_buttons_cmd_108 : pb::IMessage<Cruise_control_buttons_cmd_108> {
    private static readonly pb::MessageParser<Cruise_control_buttons_cmd_108> _parser = new pb::MessageParser<Cruise_control_buttons_cmd_108>(() => new Cruise_control_buttons_cmd_108());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cruise_control_buttons_cmd_108> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cruise_control_buttons_cmd_108() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cruise_control_buttons_cmd_108(Cruise_control_buttons_cmd_108 other) : this() {
      cruiseControlButton_ = other.cruiseControlButton_;
      ignoreOverrides_ = other.ignoreOverrides_;
      clearOverride_ = other.clearOverride_;
      enable_ = other.enable_;
      clearFaults_ = other.clearFaults_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cruise_control_buttons_cmd_108 Clone() {
      return new Cruise_control_buttons_cmd_108(this);
    }

    /// <summary>Field number for the "cruise_control_button" field.</summary>
    public const int CruiseControlButtonFieldNumber = 1;
    private global::Apollo.Canbus.Cruise_control_buttons_cmd_108.Types.Cruise_control_buttonType cruiseControlButton_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Cruise_control_buttons_cmd_108.Types.Cruise_control_buttonType CruiseControlButton {
      get { return cruiseControlButton_; }
      set {
        cruiseControlButton_ = value;
      }
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 2;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 4;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 5;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cruise_control_buttons_cmd_108);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cruise_control_buttons_cmd_108 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CruiseControlButton != other.CruiseControlButton) return false;
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (Enable != other.Enable) return false;
      if (ClearFaults != other.ClearFaults) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CruiseControlButton != 0) hash ^= CruiseControlButton.GetHashCode();
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CruiseControlButton != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CruiseControlButton);
      }
      if (IgnoreOverrides != false) {
        output.WriteRawTag(16);
        output.WriteBool(IgnoreOverrides);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (Enable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enable);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(40);
        output.WriteBool(ClearFaults);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CruiseControlButton != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CruiseControlButton);
      }
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cruise_control_buttons_cmd_108 other) {
      if (other == null) {
        return;
      }
      if (other.CruiseControlButton != 0) {
        CruiseControlButton = other.CruiseControlButton;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            cruiseControlButton_ = (global::Apollo.Canbus.Cruise_control_buttons_cmd_108.Types.Cruise_control_buttonType) input.ReadEnum();
            break;
          }
          case 16: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            Enable = input.ReadBool();
            break;
          }
          case 40: {
            ClearFaults = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Cruise_control_buttons_cmd_108 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Cruise_control_buttonType {
        [pbr::OriginalName("CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE")] CruiseControlButtonCruiseControlNone = 0,
        [pbr::OriginalName("CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_CNCL")] CruiseControlButtonCruiseControlCncl = 1,
        [pbr::OriginalName("CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_FURTHER")] CruiseControlButtonCruiseControlAccFurther = 2,
        [pbr::OriginalName("CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_CLOSER")] CruiseControlButtonCruiseControlAccCloser = 3,
        [pbr::OriginalName("CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_SET_DEC")] CruiseControlButtonCruiseControlSetDec = 4,
        [pbr::OriginalName("CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_INC")] CruiseControlButtonCruiseControlResInc = 5,
        [pbr::OriginalName("CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF")] CruiseControlButtonCruiseControlOnOff = 6,
      }

    }
    #endregion

  }

  public sealed partial class Parking_brake_cmd_124 : pb::IMessage<Parking_brake_cmd_124> {
    private static readonly pb::MessageParser<Parking_brake_cmd_124> _parser = new pb::MessageParser<Parking_brake_cmd_124>(() => new Parking_brake_cmd_124());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parking_brake_cmd_124> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_cmd_124() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_cmd_124(Parking_brake_cmd_124 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      parkingBrakeCmd_ = other.parkingBrakeCmd_;
      clearFaults_ = other.clearFaults_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_cmd_124 Clone() {
      return new Parking_brake_cmd_124(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    /// Control Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "parking_brake_cmd" field.</summary>
    public const int ParkingBrakeCmdFieldNumber = 4;
    private bool parkingBrakeCmd_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ParkingBrakeCmd {
      get { return parkingBrakeCmd_; }
      set {
        parkingBrakeCmd_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 5;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parking_brake_cmd_124);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parking_brake_cmd_124 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ParkingBrakeCmd != other.ParkingBrakeCmd) return false;
      if (ClearFaults != other.ClearFaults) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ParkingBrakeCmd != false) hash ^= ParkingBrakeCmd.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ParkingBrakeCmd != false) {
        output.WriteRawTag(32);
        output.WriteBool(ParkingBrakeCmd);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(40);
        output.WriteBool(ClearFaults);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ParkingBrakeCmd != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parking_brake_cmd_124 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ParkingBrakeCmd != false) {
        ParkingBrakeCmd = other.ParkingBrakeCmd;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ParkingBrakeCmd = input.ReadBool();
            break;
          }
          case 40: {
            ClearFaults = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Horn_rpt_21c : pb::IMessage<Horn_rpt_21c> {
    private static readonly pb::MessageParser<Horn_rpt_21c> _parser = new pb::MessageParser<Horn_rpt_21c>(() => new Horn_rpt_21c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Horn_rpt_21c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_rpt_21c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_rpt_21c(Horn_rpt_21c other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Horn_rpt_21c Clone() {
      return new Horn_rpt_21c(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 3;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 4;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 5;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 7;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 8;
    private global::Apollo.Canbus.Horn_rpt_21c.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_21c.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private global::Apollo.Canbus.Horn_rpt_21c.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_21c.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 10;
    private global::Apollo.Canbus.Horn_rpt_21c.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_21c.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Horn_rpt_21c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Horn_rpt_21c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(CommandOutputFault);
      }
      if (OutputValue != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OutputValue);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CommandedValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ManualInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Horn_rpt_21c other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 32: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 40: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 64: {
            outputValue_ = (global::Apollo.Canbus.Horn_rpt_21c.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 72: {
            commandedValue_ = (global::Apollo.Canbus.Horn_rpt_21c.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 80: {
            manualInput_ = (global::Apollo.Canbus.Horn_rpt_21c.Types.Manual_inputType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Horn_rpt_21c message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_OFF")] OutputValueOff = 0,
        [pbr::OriginalName("OUTPUT_VALUE_ON")] OutputValueOn = 1,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_OFF")] CommandedValueOff = 0,
        [pbr::OriginalName("COMMANDED_VALUE_ON")] CommandedValueOn = 1,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_OFF")] ManualInputOff = 0,
        [pbr::OriginalName("MANUAL_INPUT_ON")] ManualInputOn = 1,
      }

    }
    #endregion

  }

  public sealed partial class Shift_rpt_228 : pb::IMessage<Shift_rpt_228> {
    private static readonly pb::MessageParser<Shift_rpt_228> _parser = new pb::MessageParser<Shift_rpt_228>(() => new Shift_rpt_228());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shift_rpt_228> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_rpt_228() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_rpt_228(Shift_rpt_228 other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      manualInput_ = other.manualInput_;
      commandedValue_ = other.commandedValue_;
      outputValue_ = other.outputValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_rpt_228 Clone() {
      return new Shift_rpt_228(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 3;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 4;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 5;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 7;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 8;
    private global::Apollo.Canbus.Shift_rpt_228.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_228.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private global::Apollo.Canbus.Shift_rpt_228.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_228.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 10;
    private global::Apollo.Canbus.Shift_rpt_228.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_228.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shift_rpt_228);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shift_rpt_228 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (ManualInput != other.ManualInput) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (OutputValue != other.OutputValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(CommandOutputFault);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ManualInput);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CommandedValue);
      }
      if (OutputValue != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OutputValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shift_rpt_228 other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 32: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 40: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 64: {
            manualInput_ = (global::Apollo.Canbus.Shift_rpt_228.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 72: {
            commandedValue_ = (global::Apollo.Canbus.Shift_rpt_228.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 80: {
            outputValue_ = (global::Apollo.Canbus.Shift_rpt_228.Types.Output_valueType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Shift_rpt_228 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_PARK")] ManualInputPark = 0,
        [pbr::OriginalName("MANUAL_INPUT_REVERSE")] ManualInputReverse = 1,
        [pbr::OriginalName("MANUAL_INPUT_NEUTRAL")] ManualInputNeutral = 2,
        [pbr::OriginalName("MANUAL_INPUT_FORWARD_HIGH")] ManualInputForwardHigh = 3,
        [pbr::OriginalName("MANUAL_INPUT_LOW")] ManualInputLow = 4,
        [pbr::OriginalName("MANUAL_INPUT_BETWEEN_GEARS")] ManualInputBetweenGears = 5,
        [pbr::OriginalName("MANUAL_INPUT_ERROR")] ManualInputError = 6,
        [pbr::OriginalName("MANUAL_INPUT_NONE")] ManualInputNone = 7,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_PARK")] CommandedValuePark = 0,
        [pbr::OriginalName("COMMANDED_VALUE_REVERSE")] CommandedValueReverse = 1,
        [pbr::OriginalName("COMMANDED_VALUE_NEUTRAL")] CommandedValueNeutral = 2,
        [pbr::OriginalName("COMMANDED_VALUE_FORWARD_HIGH")] CommandedValueForwardHigh = 3,
        [pbr::OriginalName("COMMANDED_VALUE_LOW")] CommandedValueLow = 4,
        [pbr::OriginalName("COMMANDED_VALUE_NONE")] CommandedValueNone = 7,
      }

      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_PARK")] OutputValuePark = 0,
        [pbr::OriginalName("OUTPUT_VALUE_REVERSE")] OutputValueReverse = 1,
        [pbr::OriginalName("OUTPUT_VALUE_NEUTRAL")] OutputValueNeutral = 2,
        [pbr::OriginalName("OUTPUT_VALUE_FORWARD_HIGH")] OutputValueForwardHigh = 3,
        [pbr::OriginalName("OUTPUT_VALUE_LOW")] OutputValueLow = 4,
        [pbr::OriginalName("OUTPUT_VALUE_BETWEEN_GEARS")] OutputValueBetweenGears = 5,
        [pbr::OriginalName("OUTPUT_VALUE_ERROR")] OutputValueError = 6,
        [pbr::OriginalName("OUTPUT_VALUE_NONE")] OutputValueNone = 7,
      }

    }
    #endregion

  }

  public sealed partial class Shift_cmd_128 : pb::IMessage<Shift_cmd_128> {
    private static readonly pb::MessageParser<Shift_cmd_128> _parser = new pb::MessageParser<Shift_cmd_128>(() => new Shift_cmd_128());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shift_cmd_128> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_cmd_128() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_cmd_128(Shift_cmd_128 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      shiftCmd_ = other.shiftCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shift_cmd_128 Clone() {
      return new Shift_cmd_128(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "shift_cmd" field.</summary>
    public const int ShiftCmdFieldNumber = 5;
    private global::Apollo.Canbus.Shift_cmd_128.Types.Shift_cmdType shiftCmd_ = 0;
    /// <summary>
    /// FORWARD is also HIGH on vehicles with LOW/HIGH, PARK and LOW only available on certain Vehicles.  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_cmd_128.Types.Shift_cmdType ShiftCmd {
      get { return shiftCmd_; }
      set {
        shiftCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shift_cmd_128);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shift_cmd_128 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (ShiftCmd != other.ShiftCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (ShiftCmd != 0) hash ^= ShiftCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (ShiftCmd != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ShiftCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (ShiftCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShiftCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shift_cmd_128 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.ShiftCmd != 0) {
        ShiftCmd = other.ShiftCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 40: {
            shiftCmd_ = (global::Apollo.Canbus.Shift_cmd_128.Types.Shift_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Shift_cmd_128 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Shift_cmdType {
        [pbr::OriginalName("SHIFT_CMD_PARK")] ShiftCmdPark = 0,
        [pbr::OriginalName("SHIFT_CMD_REVERSE")] ShiftCmdReverse = 1,
        [pbr::OriginalName("SHIFT_CMD_NEUTRAL")] ShiftCmdNeutral = 2,
        [pbr::OriginalName("SHIFT_CMD_FORWARD_HIGH")] ShiftCmdForwardHigh = 3,
        [pbr::OriginalName("SHIFT_CMD_LOW")] ShiftCmdLow = 4,
        [pbr::OriginalName("SHIFT_CMD_NONE")] ShiftCmdNone = 7,
      }

    }
    #endregion

  }

  public sealed partial class Accel_cmd_100 : pb::IMessage<Accel_cmd_100> {
    private static readonly pb::MessageParser<Accel_cmd_100> _parser = new pb::MessageParser<Accel_cmd_100>(() => new Accel_cmd_100());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Accel_cmd_100> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_cmd_100() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_cmd_100(Accel_cmd_100 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      accelCmd_ = other.accelCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accel_cmd_100 Clone() {
      return new Accel_cmd_100(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    /// Control Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "accel_cmd" field.</summary>
    public const int AccelCmdFieldNumber = 5;
    private double accelCmd_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelCmd {
      get { return accelCmd_; }
      set {
        accelCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Accel_cmd_100);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Accel_cmd_100 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (AccelCmd != other.AccelCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (AccelCmd != 0D) hash ^= AccelCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (AccelCmd != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AccelCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (AccelCmd != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Accel_cmd_100 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.AccelCmd != 0D) {
        AccelCmd = other.AccelCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 41: {
            AccelCmd = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parking_brake_rpt_224 : pb::IMessage<Parking_brake_rpt_224> {
    private static readonly pb::MessageParser<Parking_brake_rpt_224> _parser = new pb::MessageParser<Parking_brake_rpt_224>(() => new Parking_brake_rpt_224());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parking_brake_rpt_224> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_rpt_224() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_rpt_224(Parking_brake_rpt_224 other) : this() {
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parking_brake_rpt_224 Clone() {
      return new Parking_brake_rpt_224(this);
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 1;
    private bool vehicleFault_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 2;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 3;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 4;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 5;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 7;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 8;
    private bool outputValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 9;
    private bool commandedValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 10;
    private bool manualInput_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parking_brake_rpt_224);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parking_brake_rpt_224 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      if (OutputValue != false) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != false) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != false) hash ^= ManualInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehicleFault != false) {
        output.WriteRawTag(8);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(16);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(CommandOutputFault);
      }
      if (OutputValue != false) {
        output.WriteRawTag(64);
        output.WriteBool(OutputValue);
      }
      if (CommandedValue != false) {
        output.WriteRawTag(72);
        output.WriteBool(CommandedValue);
      }
      if (ManualInput != false) {
        output.WriteRawTag(80);
        output.WriteBool(ManualInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      if (OutputValue != false) {
        size += 1 + 1;
      }
      if (CommandedValue != false) {
        size += 1 + 1;
      }
      if (ManualInput != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parking_brake_rpt_224 other) {
      if (other == null) {
        return;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
      if (other.OutputValue != false) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != false) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != false) {
        ManualInput = other.ManualInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 16: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 24: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 32: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 40: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            CommandOutputFault = input.ReadBool();
            break;
          }
          case 64: {
            OutputValue = input.ReadBool();
            break;
          }
          case 72: {
            CommandedValue = input.ReadBool();
            break;
          }
          case 80: {
            ManualInput = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Brake_cmd_104 : pb::IMessage<Brake_cmd_104> {
    private static readonly pb::MessageParser<Brake_cmd_104> _parser = new pb::MessageParser<Brake_cmd_104>(() => new Brake_cmd_104());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brake_cmd_104> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_cmd_104() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_cmd_104(Brake_cmd_104 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      brakeCmd_ = other.brakeCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brake_cmd_104 Clone() {
      return new Brake_cmd_104(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    /// Control Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "brake_cmd" field.</summary>
    public const int BrakeCmdFieldNumber = 5;
    private double brakeCmd_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeCmd {
      get { return brakeCmd_; }
      set {
        brakeCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brake_cmd_104);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brake_cmd_104 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (BrakeCmd != other.BrakeCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (BrakeCmd != 0D) hash ^= BrakeCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (BrakeCmd != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(BrakeCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (BrakeCmd != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brake_cmd_104 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.BrakeCmd != 0D) {
        BrakeCmd = other.BrakeCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 41: {
            BrakeCmd = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Media_controls_rpt_220 : pb::IMessage<Media_controls_rpt_220> {
    private static readonly pb::MessageParser<Media_controls_rpt_220> _parser = new pb::MessageParser<Media_controls_rpt_220>(() => new Media_controls_rpt_220());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Media_controls_rpt_220> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Media_controls_rpt_220() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Media_controls_rpt_220(Media_controls_rpt_220 other) : this() {
      outputValue_ = other.outputValue_;
      commandedValue_ = other.commandedValue_;
      manualInput_ = other.manualInput_;
      vehicleFault_ = other.vehicleFault_;
      pacmodFault_ = other.pacmodFault_;
      overrideActive_ = other.overrideActive_;
      outputReportedFault_ = other.outputReportedFault_;
      inputOutputFault_ = other.inputOutputFault_;
      enabled_ = other.enabled_;
      commandOutputFault_ = other.commandOutputFault_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Media_controls_rpt_220 Clone() {
      return new Media_controls_rpt_220(this);
    }

    /// <summary>Field number for the "output_value" field.</summary>
    public const int OutputValueFieldNumber = 1;
    private global::Apollo.Canbus.Media_controls_rpt_220.Types.Output_valueType outputValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Media_controls_rpt_220.Types.Output_valueType OutputValue {
      get { return outputValue_; }
      set {
        outputValue_ = value;
      }
    }

    /// <summary>Field number for the "commanded_value" field.</summary>
    public const int CommandedValueFieldNumber = 2;
    private global::Apollo.Canbus.Media_controls_rpt_220.Types.Commanded_valueType commandedValue_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Media_controls_rpt_220.Types.Commanded_valueType CommandedValue {
      get { return commandedValue_; }
      set {
        commandedValue_ = value;
      }
    }

    /// <summary>Field number for the "manual_input" field.</summary>
    public const int ManualInputFieldNumber = 3;
    private global::Apollo.Canbus.Media_controls_rpt_220.Types.Manual_inputType manualInput_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Media_controls_rpt_220.Types.Manual_inputType ManualInput {
      get { return manualInput_; }
      set {
        manualInput_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_fault" field.</summary>
    public const int VehicleFaultFieldNumber = 4;
    private bool vehicleFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleFault {
      get { return vehicleFault_; }
      set {
        vehicleFault_ = value;
      }
    }

    /// <summary>Field number for the "pacmod_fault" field.</summary>
    public const int PacmodFaultFieldNumber = 5;
    private bool pacmodFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PacmodFault {
      get { return pacmodFault_; }
      set {
        pacmodFault_ = value;
      }
    }

    /// <summary>Field number for the "override_active" field.</summary>
    public const int OverrideActiveFieldNumber = 6;
    private bool overrideActive_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverrideActive {
      get { return overrideActive_; }
      set {
        overrideActive_ = value;
      }
    }

    /// <summary>Field number for the "output_reported_fault" field.</summary>
    public const int OutputReportedFaultFieldNumber = 7;
    private bool outputReportedFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputReportedFault {
      get { return outputReportedFault_; }
      set {
        outputReportedFault_ = value;
      }
    }

    /// <summary>Field number for the "input_output_fault" field.</summary>
    public const int InputOutputFaultFieldNumber = 8;
    private bool inputOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputOutputFault {
      get { return inputOutputFault_; }
      set {
        inputOutputFault_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 9;
    private bool enabled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "command_output_fault" field.</summary>
    public const int CommandOutputFaultFieldNumber = 10;
    private bool commandOutputFault_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandOutputFault {
      get { return commandOutputFault_; }
      set {
        commandOutputFault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Media_controls_rpt_220);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Media_controls_rpt_220 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputValue != other.OutputValue) return false;
      if (CommandedValue != other.CommandedValue) return false;
      if (ManualInput != other.ManualInput) return false;
      if (VehicleFault != other.VehicleFault) return false;
      if (PacmodFault != other.PacmodFault) return false;
      if (OverrideActive != other.OverrideActive) return false;
      if (OutputReportedFault != other.OutputReportedFault) return false;
      if (InputOutputFault != other.InputOutputFault) return false;
      if (Enabled != other.Enabled) return false;
      if (CommandOutputFault != other.CommandOutputFault) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputValue != 0) hash ^= OutputValue.GetHashCode();
      if (CommandedValue != 0) hash ^= CommandedValue.GetHashCode();
      if (ManualInput != 0) hash ^= ManualInput.GetHashCode();
      if (VehicleFault != false) hash ^= VehicleFault.GetHashCode();
      if (PacmodFault != false) hash ^= PacmodFault.GetHashCode();
      if (OverrideActive != false) hash ^= OverrideActive.GetHashCode();
      if (OutputReportedFault != false) hash ^= OutputReportedFault.GetHashCode();
      if (InputOutputFault != false) hash ^= InputOutputFault.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (CommandOutputFault != false) hash ^= CommandOutputFault.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputValue != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OutputValue);
      }
      if (CommandedValue != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandedValue);
      }
      if (ManualInput != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ManualInput);
      }
      if (VehicleFault != false) {
        output.WriteRawTag(32);
        output.WriteBool(VehicleFault);
      }
      if (PacmodFault != false) {
        output.WriteRawTag(40);
        output.WriteBool(PacmodFault);
      }
      if (OverrideActive != false) {
        output.WriteRawTag(48);
        output.WriteBool(OverrideActive);
      }
      if (OutputReportedFault != false) {
        output.WriteRawTag(56);
        output.WriteBool(OutputReportedFault);
      }
      if (InputOutputFault != false) {
        output.WriteRawTag(64);
        output.WriteBool(InputOutputFault);
      }
      if (Enabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(Enabled);
      }
      if (CommandOutputFault != false) {
        output.WriteRawTag(80);
        output.WriteBool(CommandOutputFault);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputValue);
      }
      if (CommandedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandedValue);
      }
      if (ManualInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ManualInput);
      }
      if (VehicleFault != false) {
        size += 1 + 1;
      }
      if (PacmodFault != false) {
        size += 1 + 1;
      }
      if (OverrideActive != false) {
        size += 1 + 1;
      }
      if (OutputReportedFault != false) {
        size += 1 + 1;
      }
      if (InputOutputFault != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (CommandOutputFault != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Media_controls_rpt_220 other) {
      if (other == null) {
        return;
      }
      if (other.OutputValue != 0) {
        OutputValue = other.OutputValue;
      }
      if (other.CommandedValue != 0) {
        CommandedValue = other.CommandedValue;
      }
      if (other.ManualInput != 0) {
        ManualInput = other.ManualInput;
      }
      if (other.VehicleFault != false) {
        VehicleFault = other.VehicleFault;
      }
      if (other.PacmodFault != false) {
        PacmodFault = other.PacmodFault;
      }
      if (other.OverrideActive != false) {
        OverrideActive = other.OverrideActive;
      }
      if (other.OutputReportedFault != false) {
        OutputReportedFault = other.OutputReportedFault;
      }
      if (other.InputOutputFault != false) {
        InputOutputFault = other.InputOutputFault;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.CommandOutputFault != false) {
        CommandOutputFault = other.CommandOutputFault;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            outputValue_ = (global::Apollo.Canbus.Media_controls_rpt_220.Types.Output_valueType) input.ReadEnum();
            break;
          }
          case 16: {
            commandedValue_ = (global::Apollo.Canbus.Media_controls_rpt_220.Types.Commanded_valueType) input.ReadEnum();
            break;
          }
          case 24: {
            manualInput_ = (global::Apollo.Canbus.Media_controls_rpt_220.Types.Manual_inputType) input.ReadEnum();
            break;
          }
          case 32: {
            VehicleFault = input.ReadBool();
            break;
          }
          case 40: {
            PacmodFault = input.ReadBool();
            break;
          }
          case 48: {
            OverrideActive = input.ReadBool();
            break;
          }
          case 56: {
            OutputReportedFault = input.ReadBool();
            break;
          }
          case 64: {
            InputOutputFault = input.ReadBool();
            break;
          }
          case 72: {
            Enabled = input.ReadBool();
            break;
          }
          case 80: {
            CommandOutputFault = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Media_controls_rpt_220 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Output_valueType {
        [pbr::OriginalName("OUTPUT_VALUE_MEDIA_CONTROL_NONE")] OutputValueMediaControlNone = 0,
        [pbr::OriginalName("OUTPUT_VALUE_MEDIA_CONTROL_VOICE_COMMAND")] OutputValueMediaControlVoiceCommand = 1,
        [pbr::OriginalName("OUTPUT_VALUE_MEDIA_CONTROL_MUTE")] OutputValueMediaControlMute = 2,
        [pbr::OriginalName("OUTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER")] OutputValueMediaControlPrevTrackAnswer = 3,
        [pbr::OriginalName("OUTPUT_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP")] OutputValueMediaControlNextTrackHangUp = 4,
        [pbr::OriginalName("OUTPUT_VALUE_MEDIA_CONTROL_VOL_UP")] OutputValueMediaControlVolUp = 5,
        [pbr::OriginalName("OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN")] OutputValueMediaControlVolDown = 6,
      }

      public enum Commanded_valueType {
        [pbr::OriginalName("COMMANDED_VALUE_MEDIA_CONTROL_NONE")] CommandedValueMediaControlNone = 0,
        [pbr::OriginalName("COMMANDED_VALUE_MEDIA_CONTROL_VOICE_COMMAND")] CommandedValueMediaControlVoiceCommand = 1,
        [pbr::OriginalName("COMMANDED_VALUE_MEDIA_CONTROL_MUTE")] CommandedValueMediaControlMute = 2,
        [pbr::OriginalName("COMMANDED_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER")] CommandedValueMediaControlPrevTrackAnswer = 3,
        [pbr::OriginalName("COMMANDED_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP")] CommandedValueMediaControlNextTrackHangUp = 4,
        [pbr::OriginalName("COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP")] CommandedValueMediaControlVolUp = 5,
        [pbr::OriginalName("COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN")] CommandedValueMediaControlVolDown = 6,
      }

      public enum Manual_inputType {
        [pbr::OriginalName("MANUAL_INPUT_MEDIA_CONTROL_NONE")] ManualInputMediaControlNone = 0,
        [pbr::OriginalName("MANUAL_INPUT_MEDIA_CONTROL_VOICE_COMMAND")] ManualInputMediaControlVoiceCommand = 1,
        [pbr::OriginalName("MANUAL_INPUT_MEDIA_CONTROL_MUTE")] ManualInputMediaControlMute = 2,
        [pbr::OriginalName("MANUAL_INPUT_MEDIA_CONTROL_PREV_TRACK_ANSWER")] ManualInputMediaControlPrevTrackAnswer = 3,
        [pbr::OriginalName("MANUAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP")] ManualInputMediaControlNextTrackHangUp = 4,
        [pbr::OriginalName("MANUAL_INPUT_MEDIA_CONTROL_VOL_UP")] ManualInputMediaControlVolUp = 5,
        [pbr::OriginalName("MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN")] ManualInputMediaControlVolDown = 6,
      }

    }
    #endregion

  }

  public sealed partial class Steering_aux_rpt_32c : pb::IMessage<Steering_aux_rpt_32c> {
    private static readonly pb::MessageParser<Steering_aux_rpt_32c> _parser = new pb::MessageParser<Steering_aux_rpt_32c>(() => new Steering_aux_rpt_32c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Steering_aux_rpt_32c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_aux_rpt_32c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_aux_rpt_32c(Steering_aux_rpt_32c other) : this() {
      userInteractionIsValid_ = other.userInteractionIsValid_;
      userInteraction_ = other.userInteraction_;
      rotationRateIsValid_ = other.rotationRateIsValid_;
      rotationRate_ = other.rotationRate_;
      rawTorqueIsValid_ = other.rawTorqueIsValid_;
      rawTorque_ = other.rawTorque_;
      rawPositionIsValid_ = other.rawPositionIsValid_;
      rawPosition_ = other.rawPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Steering_aux_rpt_32c Clone() {
      return new Steering_aux_rpt_32c(this);
    }

    /// <summary>Field number for the "user_interaction_is_valid" field.</summary>
    public const int UserInteractionIsValidFieldNumber = 1;
    private bool userInteractionIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserInteractionIsValid {
      get { return userInteractionIsValid_; }
      set {
        userInteractionIsValid_ = value;
      }
    }

    /// <summary>Field number for the "user_interaction" field.</summary>
    public const int UserInteractionFieldNumber = 2;
    private bool userInteraction_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserInteraction {
      get { return userInteraction_; }
      set {
        userInteraction_ = value;
      }
    }

    /// <summary>Field number for the "rotation_rate_is_valid" field.</summary>
    public const int RotationRateIsValidFieldNumber = 3;
    private bool rotationRateIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RotationRateIsValid {
      get { return rotationRateIsValid_; }
      set {
        rotationRateIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rotation_rate" field.</summary>
    public const int RotationRateFieldNumber = 4;
    private double rotationRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationRate {
      get { return rotationRate_; }
      set {
        rotationRate_ = value;
      }
    }

    /// <summary>Field number for the "raw_torque_is_valid" field.</summary>
    public const int RawTorqueIsValidFieldNumber = 5;
    private bool rawTorqueIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RawTorqueIsValid {
      get { return rawTorqueIsValid_; }
      set {
        rawTorqueIsValid_ = value;
      }
    }

    /// <summary>Field number for the "raw_torque" field.</summary>
    public const int RawTorqueFieldNumber = 6;
    private double rawTorque_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RawTorque {
      get { return rawTorque_; }
      set {
        rawTorque_ = value;
      }
    }

    /// <summary>Field number for the "raw_position_is_valid" field.</summary>
    public const int RawPositionIsValidFieldNumber = 7;
    private bool rawPositionIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RawPositionIsValid {
      get { return rawPositionIsValid_; }
      set {
        rawPositionIsValid_ = value;
      }
    }

    /// <summary>Field number for the "raw_position" field.</summary>
    public const int RawPositionFieldNumber = 8;
    private double rawPosition_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RawPosition {
      get { return rawPosition_; }
      set {
        rawPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Steering_aux_rpt_32c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Steering_aux_rpt_32c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserInteractionIsValid != other.UserInteractionIsValid) return false;
      if (UserInteraction != other.UserInteraction) return false;
      if (RotationRateIsValid != other.RotationRateIsValid) return false;
      if (RotationRate != other.RotationRate) return false;
      if (RawTorqueIsValid != other.RawTorqueIsValid) return false;
      if (RawTorque != other.RawTorque) return false;
      if (RawPositionIsValid != other.RawPositionIsValid) return false;
      if (RawPosition != other.RawPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserInteractionIsValid != false) hash ^= UserInteractionIsValid.GetHashCode();
      if (UserInteraction != false) hash ^= UserInteraction.GetHashCode();
      if (RotationRateIsValid != false) hash ^= RotationRateIsValid.GetHashCode();
      if (RotationRate != 0D) hash ^= RotationRate.GetHashCode();
      if (RawTorqueIsValid != false) hash ^= RawTorqueIsValid.GetHashCode();
      if (RawTorque != 0D) hash ^= RawTorque.GetHashCode();
      if (RawPositionIsValid != false) hash ^= RawPositionIsValid.GetHashCode();
      if (RawPosition != 0D) hash ^= RawPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserInteractionIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(UserInteractionIsValid);
      }
      if (UserInteraction != false) {
        output.WriteRawTag(16);
        output.WriteBool(UserInteraction);
      }
      if (RotationRateIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(RotationRateIsValid);
      }
      if (RotationRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RotationRate);
      }
      if (RawTorqueIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(RawTorqueIsValid);
      }
      if (RawTorque != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RawTorque);
      }
      if (RawPositionIsValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(RawPositionIsValid);
      }
      if (RawPosition != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(RawPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserInteractionIsValid != false) {
        size += 1 + 1;
      }
      if (UserInteraction != false) {
        size += 1 + 1;
      }
      if (RotationRateIsValid != false) {
        size += 1 + 1;
      }
      if (RotationRate != 0D) {
        size += 1 + 8;
      }
      if (RawTorqueIsValid != false) {
        size += 1 + 1;
      }
      if (RawTorque != 0D) {
        size += 1 + 8;
      }
      if (RawPositionIsValid != false) {
        size += 1 + 1;
      }
      if (RawPosition != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Steering_aux_rpt_32c other) {
      if (other == null) {
        return;
      }
      if (other.UserInteractionIsValid != false) {
        UserInteractionIsValid = other.UserInteractionIsValid;
      }
      if (other.UserInteraction != false) {
        UserInteraction = other.UserInteraction;
      }
      if (other.RotationRateIsValid != false) {
        RotationRateIsValid = other.RotationRateIsValid;
      }
      if (other.RotationRate != 0D) {
        RotationRate = other.RotationRate;
      }
      if (other.RawTorqueIsValid != false) {
        RawTorqueIsValid = other.RawTorqueIsValid;
      }
      if (other.RawTorque != 0D) {
        RawTorque = other.RawTorque;
      }
      if (other.RawPositionIsValid != false) {
        RawPositionIsValid = other.RawPositionIsValid;
      }
      if (other.RawPosition != 0D) {
        RawPosition = other.RawPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserInteractionIsValid = input.ReadBool();
            break;
          }
          case 16: {
            UserInteraction = input.ReadBool();
            break;
          }
          case 24: {
            RotationRateIsValid = input.ReadBool();
            break;
          }
          case 33: {
            RotationRate = input.ReadDouble();
            break;
          }
          case 40: {
            RawTorqueIsValid = input.ReadBool();
            break;
          }
          case 49: {
            RawTorque = input.ReadDouble();
            break;
          }
          case 56: {
            RawPositionIsValid = input.ReadBool();
            break;
          }
          case 65: {
            RawPosition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lat_lon_heading_rpt_40e : pb::IMessage<Lat_lon_heading_rpt_40e> {
    private static readonly pb::MessageParser<Lat_lon_heading_rpt_40e> _parser = new pb::MessageParser<Lat_lon_heading_rpt_40e>(() => new Lat_lon_heading_rpt_40e());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lat_lon_heading_rpt_40e> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lat_lon_heading_rpt_40e() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lat_lon_heading_rpt_40e(Lat_lon_heading_rpt_40e other) : this() {
      heading_ = other.heading_;
      longitudeSeconds_ = other.longitudeSeconds_;
      longitudeMinutes_ = other.longitudeMinutes_;
      longitudeDegrees_ = other.longitudeDegrees_;
      latitudeSeconds_ = other.latitudeSeconds_;
      latitudeMinutes_ = other.latitudeMinutes_;
      latitudeDegrees_ = other.latitudeDegrees_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lat_lon_heading_rpt_40e Clone() {
      return new Lat_lon_heading_rpt_40e(this);
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 1;
    private double heading_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "longitude_seconds" field.</summary>
    public const int LongitudeSecondsFieldNumber = 2;
    private int longitudeSeconds_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongitudeSeconds {
      get { return longitudeSeconds_; }
      set {
        longitudeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "longitude_minutes" field.</summary>
    public const int LongitudeMinutesFieldNumber = 3;
    private int longitudeMinutes_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongitudeMinutes {
      get { return longitudeMinutes_; }
      set {
        longitudeMinutes_ = value;
      }
    }

    /// <summary>Field number for the "longitude_degrees" field.</summary>
    public const int LongitudeDegreesFieldNumber = 4;
    private int longitudeDegrees_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongitudeDegrees {
      get { return longitudeDegrees_; }
      set {
        longitudeDegrees_ = value;
      }
    }

    /// <summary>Field number for the "latitude_seconds" field.</summary>
    public const int LatitudeSecondsFieldNumber = 5;
    private int latitudeSeconds_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LatitudeSeconds {
      get { return latitudeSeconds_; }
      set {
        latitudeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "latitude_minutes" field.</summary>
    public const int LatitudeMinutesFieldNumber = 6;
    private int latitudeMinutes_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LatitudeMinutes {
      get { return latitudeMinutes_; }
      set {
        latitudeMinutes_ = value;
      }
    }

    /// <summary>Field number for the "latitude_degrees" field.</summary>
    public const int LatitudeDegreesFieldNumber = 7;
    private int latitudeDegrees_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LatitudeDegrees {
      get { return latitudeDegrees_; }
      set {
        latitudeDegrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lat_lon_heading_rpt_40e);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lat_lon_heading_rpt_40e other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Heading != other.Heading) return false;
      if (LongitudeSeconds != other.LongitudeSeconds) return false;
      if (LongitudeMinutes != other.LongitudeMinutes) return false;
      if (LongitudeDegrees != other.LongitudeDegrees) return false;
      if (LatitudeSeconds != other.LatitudeSeconds) return false;
      if (LatitudeMinutes != other.LatitudeMinutes) return false;
      if (LatitudeDegrees != other.LatitudeDegrees) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (LongitudeSeconds != 0) hash ^= LongitudeSeconds.GetHashCode();
      if (LongitudeMinutes != 0) hash ^= LongitudeMinutes.GetHashCode();
      if (LongitudeDegrees != 0) hash ^= LongitudeDegrees.GetHashCode();
      if (LatitudeSeconds != 0) hash ^= LatitudeSeconds.GetHashCode();
      if (LatitudeMinutes != 0) hash ^= LatitudeMinutes.GetHashCode();
      if (LatitudeDegrees != 0) hash ^= LatitudeDegrees.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Heading != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Heading);
      }
      if (LongitudeSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LongitudeSeconds);
      }
      if (LongitudeMinutes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LongitudeMinutes);
      }
      if (LongitudeDegrees != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LongitudeDegrees);
      }
      if (LatitudeSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LatitudeSeconds);
      }
      if (LatitudeMinutes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LatitudeMinutes);
      }
      if (LatitudeDegrees != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LatitudeDegrees);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (LongitudeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongitudeSeconds);
      }
      if (LongitudeMinutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongitudeMinutes);
      }
      if (LongitudeDegrees != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongitudeDegrees);
      }
      if (LatitudeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatitudeSeconds);
      }
      if (LatitudeMinutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatitudeMinutes);
      }
      if (LatitudeDegrees != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LatitudeDegrees);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lat_lon_heading_rpt_40e other) {
      if (other == null) {
        return;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.LongitudeSeconds != 0) {
        LongitudeSeconds = other.LongitudeSeconds;
      }
      if (other.LongitudeMinutes != 0) {
        LongitudeMinutes = other.LongitudeMinutes;
      }
      if (other.LongitudeDegrees != 0) {
        LongitudeDegrees = other.LongitudeDegrees;
      }
      if (other.LatitudeSeconds != 0) {
        LatitudeSeconds = other.LatitudeSeconds;
      }
      if (other.LatitudeMinutes != 0) {
        LatitudeMinutes = other.LatitudeMinutes;
      }
      if (other.LatitudeDegrees != 0) {
        LatitudeDegrees = other.LatitudeDegrees;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Heading = input.ReadDouble();
            break;
          }
          case 16: {
            LongitudeSeconds = input.ReadInt32();
            break;
          }
          case 24: {
            LongitudeMinutes = input.ReadInt32();
            break;
          }
          case 32: {
            LongitudeDegrees = input.ReadInt32();
            break;
          }
          case 40: {
            LatitudeSeconds = input.ReadInt32();
            break;
          }
          case 48: {
            LatitudeMinutes = input.ReadInt32();
            break;
          }
          case 56: {
            LatitudeDegrees = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Yaw_rate_rpt_40d : pb::IMessage<Yaw_rate_rpt_40d> {
    private static readonly pb::MessageParser<Yaw_rate_rpt_40d> _parser = new pb::MessageParser<Yaw_rate_rpt_40d>(() => new Yaw_rate_rpt_40d());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Yaw_rate_rpt_40d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Yaw_rate_rpt_40d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Yaw_rate_rpt_40d(Yaw_rate_rpt_40d other) : this() {
      yawRate_ = other.yawRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Yaw_rate_rpt_40d Clone() {
      return new Yaw_rate_rpt_40d(this);
    }

    /// <summary>Field number for the "yaw_rate" field.</summary>
    public const int YawRateFieldNumber = 1;
    private double yawRate_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawRate {
      get { return yawRate_; }
      set {
        yawRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Yaw_rate_rpt_40d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Yaw_rate_rpt_40d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (YawRate != other.YawRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (YawRate != 0D) hash ^= YawRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (YawRate != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(YawRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (YawRate != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Yaw_rate_rpt_40d other) {
      if (other == null) {
        return;
      }
      if (other.YawRate != 0D) {
        YawRate = other.YawRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            YawRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Date_time_rpt_40f : pb::IMessage<Date_time_rpt_40f> {
    private static readonly pb::MessageParser<Date_time_rpt_40f> _parser = new pb::MessageParser<Date_time_rpt_40f>(() => new Date_time_rpt_40f());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Date_time_rpt_40f> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date_time_rpt_40f() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date_time_rpt_40f(Date_time_rpt_40f other) : this() {
      timeSecond_ = other.timeSecond_;
      timeMinute_ = other.timeMinute_;
      timeHour_ = other.timeHour_;
      dateDay_ = other.dateDay_;
      dateMonth_ = other.dateMonth_;
      dateYear_ = other.dateYear_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date_time_rpt_40f Clone() {
      return new Date_time_rpt_40f(this);
    }

    /// <summary>Field number for the "time_second" field.</summary>
    public const int TimeSecondFieldNumber = 1;
    private int timeSecond_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeSecond {
      get { return timeSecond_; }
      set {
        timeSecond_ = value;
      }
    }

    /// <summary>Field number for the "time_minute" field.</summary>
    public const int TimeMinuteFieldNumber = 2;
    private int timeMinute_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeMinute {
      get { return timeMinute_; }
      set {
        timeMinute_ = value;
      }
    }

    /// <summary>Field number for the "time_hour" field.</summary>
    public const int TimeHourFieldNumber = 3;
    private int timeHour_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeHour {
      get { return timeHour_; }
      set {
        timeHour_ = value;
      }
    }

    /// <summary>Field number for the "date_day" field.</summary>
    public const int DateDayFieldNumber = 4;
    private int dateDay_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateDay {
      get { return dateDay_; }
      set {
        dateDay_ = value;
      }
    }

    /// <summary>Field number for the "date_month" field.</summary>
    public const int DateMonthFieldNumber = 5;
    private int dateMonth_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateMonth {
      get { return dateMonth_; }
      set {
        dateMonth_ = value;
      }
    }

    /// <summary>Field number for the "date_year" field.</summary>
    public const int DateYearFieldNumber = 6;
    private int dateYear_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateYear {
      get { return dateYear_; }
      set {
        dateYear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Date_time_rpt_40f);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Date_time_rpt_40f other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeSecond != other.TimeSecond) return false;
      if (TimeMinute != other.TimeMinute) return false;
      if (TimeHour != other.TimeHour) return false;
      if (DateDay != other.DateDay) return false;
      if (DateMonth != other.DateMonth) return false;
      if (DateYear != other.DateYear) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeSecond != 0) hash ^= TimeSecond.GetHashCode();
      if (TimeMinute != 0) hash ^= TimeMinute.GetHashCode();
      if (TimeHour != 0) hash ^= TimeHour.GetHashCode();
      if (DateDay != 0) hash ^= DateDay.GetHashCode();
      if (DateMonth != 0) hash ^= DateMonth.GetHashCode();
      if (DateYear != 0) hash ^= DateYear.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeSecond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeSecond);
      }
      if (TimeMinute != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeMinute);
      }
      if (TimeHour != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimeHour);
      }
      if (DateDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DateDay);
      }
      if (DateMonth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DateMonth);
      }
      if (DateYear != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DateYear);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeSecond);
      }
      if (TimeMinute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeMinute);
      }
      if (TimeHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeHour);
      }
      if (DateDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateDay);
      }
      if (DateMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateMonth);
      }
      if (DateYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateYear);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Date_time_rpt_40f other) {
      if (other == null) {
        return;
      }
      if (other.TimeSecond != 0) {
        TimeSecond = other.TimeSecond;
      }
      if (other.TimeMinute != 0) {
        TimeMinute = other.TimeMinute;
      }
      if (other.TimeHour != 0) {
        TimeHour = other.TimeHour;
      }
      if (other.DateDay != 0) {
        DateDay = other.DateDay;
      }
      if (other.DateMonth != 0) {
        DateMonth = other.DateMonth;
      }
      if (other.DateYear != 0) {
        DateYear = other.DateYear;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeSecond = input.ReadInt32();
            break;
          }
          case 16: {
            TimeMinute = input.ReadInt32();
            break;
          }
          case 24: {
            TimeHour = input.ReadInt32();
            break;
          }
          case 32: {
            DateDay = input.ReadInt32();
            break;
          }
          case 40: {
            DateMonth = input.ReadInt32();
            break;
          }
          case 48: {
            DateYear = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vin_rpt_414 : pb::IMessage<Vin_rpt_414> {
    private static readonly pb::MessageParser<Vin_rpt_414> _parser = new pb::MessageParser<Vin_rpt_414>(() => new Vin_rpt_414());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vin_rpt_414> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vin_rpt_414() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vin_rpt_414(Vin_rpt_414 other) : this() {
      vehSerial_ = other.vehSerial_;
      vehMyCode_ = other.vehMyCode_;
      vehMfgCode_ = other.vehMfgCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vin_rpt_414 Clone() {
      return new Vin_rpt_414(this);
    }

    /// <summary>Field number for the "veh_serial" field.</summary>
    public const int VehSerialFieldNumber = 1;
    private int vehSerial_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VehSerial {
      get { return vehSerial_; }
      set {
        vehSerial_ = value;
      }
    }

    /// <summary>Field number for the "veh_my_code" field.</summary>
    public const int VehMyCodeFieldNumber = 2;
    private int vehMyCode_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VehMyCode {
      get { return vehMyCode_; }
      set {
        vehMyCode_ = value;
      }
    }

    /// <summary>Field number for the "veh_mfg_code" field.</summary>
    public const int VehMfgCodeFieldNumber = 3;
    private int vehMfgCode_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VehMfgCode {
      get { return vehMfgCode_; }
      set {
        vehMfgCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vin_rpt_414);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vin_rpt_414 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehSerial != other.VehSerial) return false;
      if (VehMyCode != other.VehMyCode) return false;
      if (VehMfgCode != other.VehMfgCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehSerial != 0) hash ^= VehSerial.GetHashCode();
      if (VehMyCode != 0) hash ^= VehMyCode.GetHashCode();
      if (VehMfgCode != 0) hash ^= VehMfgCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehSerial != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VehSerial);
      }
      if (VehMyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VehMyCode);
      }
      if (VehMfgCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VehMfgCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehSerial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VehSerial);
      }
      if (VehMyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VehMyCode);
      }
      if (VehMfgCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VehMfgCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vin_rpt_414 other) {
      if (other == null) {
        return;
      }
      if (other.VehSerial != 0) {
        VehSerial = other.VehSerial;
      }
      if (other.VehMyCode != 0) {
        VehMyCode = other.VehMyCode;
      }
      if (other.VehMfgCode != 0) {
        VehMfgCode = other.VehMfgCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VehSerial = input.ReadInt32();
            break;
          }
          case 16: {
            VehMyCode = input.ReadInt32();
            break;
          }
          case 24: {
            VehMfgCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Occupancy_rpt_415 : pb::IMessage<Occupancy_rpt_415> {
    private static readonly pb::MessageParser<Occupancy_rpt_415> _parser = new pb::MessageParser<Occupancy_rpt_415>(() => new Occupancy_rpt_415());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Occupancy_rpt_415> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occupancy_rpt_415() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occupancy_rpt_415(Occupancy_rpt_415 other) : this() {
      rearSeatbeltBuckledIsValid_ = other.rearSeatbeltBuckledIsValid_;
      passSeatbeltBuckledIsValid_ = other.passSeatbeltBuckledIsValid_;
      driverSeatbeltBuckledIsValid_ = other.driverSeatbeltBuckledIsValid_;
      rearSeatOccupiedIsValid_ = other.rearSeatOccupiedIsValid_;
      passSeatOccupiedIsValid_ = other.passSeatOccupiedIsValid_;
      driverSeatOccupiedIsValid_ = other.driverSeatOccupiedIsValid_;
      rearSeatbeltBuckled_ = other.rearSeatbeltBuckled_;
      passSeatbeltBuckled_ = other.passSeatbeltBuckled_;
      driverSeatbeltBuckled_ = other.driverSeatbeltBuckled_;
      rearSeatOccupied_ = other.rearSeatOccupied_;
      passSeatOccupied_ = other.passSeatOccupied_;
      driverSeatOccupied_ = other.driverSeatOccupied_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occupancy_rpt_415 Clone() {
      return new Occupancy_rpt_415(this);
    }

    /// <summary>Field number for the "rear_seatbelt_buckled_is_valid" field.</summary>
    public const int RearSeatbeltBuckledIsValidFieldNumber = 1;
    private bool rearSeatbeltBuckledIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearSeatbeltBuckledIsValid {
      get { return rearSeatbeltBuckledIsValid_; }
      set {
        rearSeatbeltBuckledIsValid_ = value;
      }
    }

    /// <summary>Field number for the "pass_seatbelt_buckled_is_valid" field.</summary>
    public const int PassSeatbeltBuckledIsValidFieldNumber = 2;
    private bool passSeatbeltBuckledIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassSeatbeltBuckledIsValid {
      get { return passSeatbeltBuckledIsValid_; }
      set {
        passSeatbeltBuckledIsValid_ = value;
      }
    }

    /// <summary>Field number for the "driver_seatbelt_buckled_is_valid" field.</summary>
    public const int DriverSeatbeltBuckledIsValidFieldNumber = 3;
    private bool driverSeatbeltBuckledIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverSeatbeltBuckledIsValid {
      get { return driverSeatbeltBuckledIsValid_; }
      set {
        driverSeatbeltBuckledIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rear_seat_occupied_is_valid" field.</summary>
    public const int RearSeatOccupiedIsValidFieldNumber = 4;
    private bool rearSeatOccupiedIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearSeatOccupiedIsValid {
      get { return rearSeatOccupiedIsValid_; }
      set {
        rearSeatOccupiedIsValid_ = value;
      }
    }

    /// <summary>Field number for the "pass_seat_occupied_is_valid" field.</summary>
    public const int PassSeatOccupiedIsValidFieldNumber = 5;
    private bool passSeatOccupiedIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassSeatOccupiedIsValid {
      get { return passSeatOccupiedIsValid_; }
      set {
        passSeatOccupiedIsValid_ = value;
      }
    }

    /// <summary>Field number for the "driver_seat_occupied_is_valid" field.</summary>
    public const int DriverSeatOccupiedIsValidFieldNumber = 6;
    private bool driverSeatOccupiedIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverSeatOccupiedIsValid {
      get { return driverSeatOccupiedIsValid_; }
      set {
        driverSeatOccupiedIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rear_seatbelt_buckled" field.</summary>
    public const int RearSeatbeltBuckledFieldNumber = 7;
    private bool rearSeatbeltBuckled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearSeatbeltBuckled {
      get { return rearSeatbeltBuckled_; }
      set {
        rearSeatbeltBuckled_ = value;
      }
    }

    /// <summary>Field number for the "pass_seatbelt_buckled" field.</summary>
    public const int PassSeatbeltBuckledFieldNumber = 8;
    private bool passSeatbeltBuckled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassSeatbeltBuckled {
      get { return passSeatbeltBuckled_; }
      set {
        passSeatbeltBuckled_ = value;
      }
    }

    /// <summary>Field number for the "driver_seatbelt_buckled" field.</summary>
    public const int DriverSeatbeltBuckledFieldNumber = 9;
    private bool driverSeatbeltBuckled_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverSeatbeltBuckled {
      get { return driverSeatbeltBuckled_; }
      set {
        driverSeatbeltBuckled_ = value;
      }
    }

    /// <summary>Field number for the "rear_seat_occupied" field.</summary>
    public const int RearSeatOccupiedFieldNumber = 10;
    private bool rearSeatOccupied_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearSeatOccupied {
      get { return rearSeatOccupied_; }
      set {
        rearSeatOccupied_ = value;
      }
    }

    /// <summary>Field number for the "pass_seat_occupied" field.</summary>
    public const int PassSeatOccupiedFieldNumber = 11;
    private bool passSeatOccupied_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassSeatOccupied {
      get { return passSeatOccupied_; }
      set {
        passSeatOccupied_ = value;
      }
    }

    /// <summary>Field number for the "driver_seat_occupied" field.</summary>
    public const int DriverSeatOccupiedFieldNumber = 12;
    private bool driverSeatOccupied_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverSeatOccupied {
      get { return driverSeatOccupied_; }
      set {
        driverSeatOccupied_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Occupancy_rpt_415);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Occupancy_rpt_415 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RearSeatbeltBuckledIsValid != other.RearSeatbeltBuckledIsValid) return false;
      if (PassSeatbeltBuckledIsValid != other.PassSeatbeltBuckledIsValid) return false;
      if (DriverSeatbeltBuckledIsValid != other.DriverSeatbeltBuckledIsValid) return false;
      if (RearSeatOccupiedIsValid != other.RearSeatOccupiedIsValid) return false;
      if (PassSeatOccupiedIsValid != other.PassSeatOccupiedIsValid) return false;
      if (DriverSeatOccupiedIsValid != other.DriverSeatOccupiedIsValid) return false;
      if (RearSeatbeltBuckled != other.RearSeatbeltBuckled) return false;
      if (PassSeatbeltBuckled != other.PassSeatbeltBuckled) return false;
      if (DriverSeatbeltBuckled != other.DriverSeatbeltBuckled) return false;
      if (RearSeatOccupied != other.RearSeatOccupied) return false;
      if (PassSeatOccupied != other.PassSeatOccupied) return false;
      if (DriverSeatOccupied != other.DriverSeatOccupied) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RearSeatbeltBuckledIsValid != false) hash ^= RearSeatbeltBuckledIsValid.GetHashCode();
      if (PassSeatbeltBuckledIsValid != false) hash ^= PassSeatbeltBuckledIsValid.GetHashCode();
      if (DriverSeatbeltBuckledIsValid != false) hash ^= DriverSeatbeltBuckledIsValid.GetHashCode();
      if (RearSeatOccupiedIsValid != false) hash ^= RearSeatOccupiedIsValid.GetHashCode();
      if (PassSeatOccupiedIsValid != false) hash ^= PassSeatOccupiedIsValid.GetHashCode();
      if (DriverSeatOccupiedIsValid != false) hash ^= DriverSeatOccupiedIsValid.GetHashCode();
      if (RearSeatbeltBuckled != false) hash ^= RearSeatbeltBuckled.GetHashCode();
      if (PassSeatbeltBuckled != false) hash ^= PassSeatbeltBuckled.GetHashCode();
      if (DriverSeatbeltBuckled != false) hash ^= DriverSeatbeltBuckled.GetHashCode();
      if (RearSeatOccupied != false) hash ^= RearSeatOccupied.GetHashCode();
      if (PassSeatOccupied != false) hash ^= PassSeatOccupied.GetHashCode();
      if (DriverSeatOccupied != false) hash ^= DriverSeatOccupied.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RearSeatbeltBuckledIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(RearSeatbeltBuckledIsValid);
      }
      if (PassSeatbeltBuckledIsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(PassSeatbeltBuckledIsValid);
      }
      if (DriverSeatbeltBuckledIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(DriverSeatbeltBuckledIsValid);
      }
      if (RearSeatOccupiedIsValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(RearSeatOccupiedIsValid);
      }
      if (PassSeatOccupiedIsValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(PassSeatOccupiedIsValid);
      }
      if (DriverSeatOccupiedIsValid != false) {
        output.WriteRawTag(48);
        output.WriteBool(DriverSeatOccupiedIsValid);
      }
      if (RearSeatbeltBuckled != false) {
        output.WriteRawTag(56);
        output.WriteBool(RearSeatbeltBuckled);
      }
      if (PassSeatbeltBuckled != false) {
        output.WriteRawTag(64);
        output.WriteBool(PassSeatbeltBuckled);
      }
      if (DriverSeatbeltBuckled != false) {
        output.WriteRawTag(72);
        output.WriteBool(DriverSeatbeltBuckled);
      }
      if (RearSeatOccupied != false) {
        output.WriteRawTag(80);
        output.WriteBool(RearSeatOccupied);
      }
      if (PassSeatOccupied != false) {
        output.WriteRawTag(88);
        output.WriteBool(PassSeatOccupied);
      }
      if (DriverSeatOccupied != false) {
        output.WriteRawTag(96);
        output.WriteBool(DriverSeatOccupied);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RearSeatbeltBuckledIsValid != false) {
        size += 1 + 1;
      }
      if (PassSeatbeltBuckledIsValid != false) {
        size += 1 + 1;
      }
      if (DriverSeatbeltBuckledIsValid != false) {
        size += 1 + 1;
      }
      if (RearSeatOccupiedIsValid != false) {
        size += 1 + 1;
      }
      if (PassSeatOccupiedIsValid != false) {
        size += 1 + 1;
      }
      if (DriverSeatOccupiedIsValid != false) {
        size += 1 + 1;
      }
      if (RearSeatbeltBuckled != false) {
        size += 1 + 1;
      }
      if (PassSeatbeltBuckled != false) {
        size += 1 + 1;
      }
      if (DriverSeatbeltBuckled != false) {
        size += 1 + 1;
      }
      if (RearSeatOccupied != false) {
        size += 1 + 1;
      }
      if (PassSeatOccupied != false) {
        size += 1 + 1;
      }
      if (DriverSeatOccupied != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Occupancy_rpt_415 other) {
      if (other == null) {
        return;
      }
      if (other.RearSeatbeltBuckledIsValid != false) {
        RearSeatbeltBuckledIsValid = other.RearSeatbeltBuckledIsValid;
      }
      if (other.PassSeatbeltBuckledIsValid != false) {
        PassSeatbeltBuckledIsValid = other.PassSeatbeltBuckledIsValid;
      }
      if (other.DriverSeatbeltBuckledIsValid != false) {
        DriverSeatbeltBuckledIsValid = other.DriverSeatbeltBuckledIsValid;
      }
      if (other.RearSeatOccupiedIsValid != false) {
        RearSeatOccupiedIsValid = other.RearSeatOccupiedIsValid;
      }
      if (other.PassSeatOccupiedIsValid != false) {
        PassSeatOccupiedIsValid = other.PassSeatOccupiedIsValid;
      }
      if (other.DriverSeatOccupiedIsValid != false) {
        DriverSeatOccupiedIsValid = other.DriverSeatOccupiedIsValid;
      }
      if (other.RearSeatbeltBuckled != false) {
        RearSeatbeltBuckled = other.RearSeatbeltBuckled;
      }
      if (other.PassSeatbeltBuckled != false) {
        PassSeatbeltBuckled = other.PassSeatbeltBuckled;
      }
      if (other.DriverSeatbeltBuckled != false) {
        DriverSeatbeltBuckled = other.DriverSeatbeltBuckled;
      }
      if (other.RearSeatOccupied != false) {
        RearSeatOccupied = other.RearSeatOccupied;
      }
      if (other.PassSeatOccupied != false) {
        PassSeatOccupied = other.PassSeatOccupied;
      }
      if (other.DriverSeatOccupied != false) {
        DriverSeatOccupied = other.DriverSeatOccupied;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RearSeatbeltBuckledIsValid = input.ReadBool();
            break;
          }
          case 16: {
            PassSeatbeltBuckledIsValid = input.ReadBool();
            break;
          }
          case 24: {
            DriverSeatbeltBuckledIsValid = input.ReadBool();
            break;
          }
          case 32: {
            RearSeatOccupiedIsValid = input.ReadBool();
            break;
          }
          case 40: {
            PassSeatOccupiedIsValid = input.ReadBool();
            break;
          }
          case 48: {
            DriverSeatOccupiedIsValid = input.ReadBool();
            break;
          }
          case 56: {
            RearSeatbeltBuckled = input.ReadBool();
            break;
          }
          case 64: {
            PassSeatbeltBuckled = input.ReadBool();
            break;
          }
          case 72: {
            DriverSeatbeltBuckled = input.ReadBool();
            break;
          }
          case 80: {
            RearSeatOccupied = input.ReadBool();
            break;
          }
          case 88: {
            PassSeatOccupied = input.ReadBool();
            break;
          }
          case 96: {
            DriverSeatOccupied = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Interior_lights_rpt_416 : pb::IMessage<Interior_lights_rpt_416> {
    private static readonly pb::MessageParser<Interior_lights_rpt_416> _parser = new pb::MessageParser<Interior_lights_rpt_416>(() => new Interior_lights_rpt_416());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Interior_lights_rpt_416> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interior_lights_rpt_416() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interior_lights_rpt_416(Interior_lights_rpt_416 other) : this() {
      dimLevelIsValid_ = other.dimLevelIsValid_;
      moodLightsOnIsValid_ = other.moodLightsOnIsValid_;
      rearDomeLightsOnIsValid_ = other.rearDomeLightsOnIsValid_;
      frontDomeLightsOnIsValid_ = other.frontDomeLightsOnIsValid_;
      dimLevel_ = other.dimLevel_;
      moodLightsOn_ = other.moodLightsOn_;
      rearDomeLightsOn_ = other.rearDomeLightsOn_;
      frontDomeLightsOn_ = other.frontDomeLightsOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interior_lights_rpt_416 Clone() {
      return new Interior_lights_rpt_416(this);
    }

    /// <summary>Field number for the "dim_level_is_valid" field.</summary>
    public const int DimLevelIsValidFieldNumber = 1;
    private bool dimLevelIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DimLevelIsValid {
      get { return dimLevelIsValid_; }
      set {
        dimLevelIsValid_ = value;
      }
    }

    /// <summary>Field number for the "mood_lights_on_is_valid" field.</summary>
    public const int MoodLightsOnIsValidFieldNumber = 2;
    private bool moodLightsOnIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MoodLightsOnIsValid {
      get { return moodLightsOnIsValid_; }
      set {
        moodLightsOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "rear_dome_lights_on_is_valid" field.</summary>
    public const int RearDomeLightsOnIsValidFieldNumber = 3;
    private bool rearDomeLightsOnIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearDomeLightsOnIsValid {
      get { return rearDomeLightsOnIsValid_; }
      set {
        rearDomeLightsOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "front_dome_lights_on_is_valid" field.</summary>
    public const int FrontDomeLightsOnIsValidFieldNumber = 4;
    private bool frontDomeLightsOnIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrontDomeLightsOnIsValid {
      get { return frontDomeLightsOnIsValid_; }
      set {
        frontDomeLightsOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "dim_level" field.</summary>
    public const int DimLevelFieldNumber = 5;
    private global::Apollo.Canbus.Interior_lights_rpt_416.Types.Dim_levelType dimLevel_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Interior_lights_rpt_416.Types.Dim_levelType DimLevel {
      get { return dimLevel_; }
      set {
        dimLevel_ = value;
      }
    }

    /// <summary>Field number for the "mood_lights_on" field.</summary>
    public const int MoodLightsOnFieldNumber = 6;
    private bool moodLightsOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MoodLightsOn {
      get { return moodLightsOn_; }
      set {
        moodLightsOn_ = value;
      }
    }

    /// <summary>Field number for the "rear_dome_lights_on" field.</summary>
    public const int RearDomeLightsOnFieldNumber = 7;
    private bool rearDomeLightsOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RearDomeLightsOn {
      get { return rearDomeLightsOn_; }
      set {
        rearDomeLightsOn_ = value;
      }
    }

    /// <summary>Field number for the "front_dome_lights_on" field.</summary>
    public const int FrontDomeLightsOnFieldNumber = 8;
    private bool frontDomeLightsOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrontDomeLightsOn {
      get { return frontDomeLightsOn_; }
      set {
        frontDomeLightsOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Interior_lights_rpt_416);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Interior_lights_rpt_416 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DimLevelIsValid != other.DimLevelIsValid) return false;
      if (MoodLightsOnIsValid != other.MoodLightsOnIsValid) return false;
      if (RearDomeLightsOnIsValid != other.RearDomeLightsOnIsValid) return false;
      if (FrontDomeLightsOnIsValid != other.FrontDomeLightsOnIsValid) return false;
      if (DimLevel != other.DimLevel) return false;
      if (MoodLightsOn != other.MoodLightsOn) return false;
      if (RearDomeLightsOn != other.RearDomeLightsOn) return false;
      if (FrontDomeLightsOn != other.FrontDomeLightsOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DimLevelIsValid != false) hash ^= DimLevelIsValid.GetHashCode();
      if (MoodLightsOnIsValid != false) hash ^= MoodLightsOnIsValid.GetHashCode();
      if (RearDomeLightsOnIsValid != false) hash ^= RearDomeLightsOnIsValid.GetHashCode();
      if (FrontDomeLightsOnIsValid != false) hash ^= FrontDomeLightsOnIsValid.GetHashCode();
      if (DimLevel != 0) hash ^= DimLevel.GetHashCode();
      if (MoodLightsOn != false) hash ^= MoodLightsOn.GetHashCode();
      if (RearDomeLightsOn != false) hash ^= RearDomeLightsOn.GetHashCode();
      if (FrontDomeLightsOn != false) hash ^= FrontDomeLightsOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DimLevelIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(DimLevelIsValid);
      }
      if (MoodLightsOnIsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(MoodLightsOnIsValid);
      }
      if (RearDomeLightsOnIsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(RearDomeLightsOnIsValid);
      }
      if (FrontDomeLightsOnIsValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(FrontDomeLightsOnIsValid);
      }
      if (DimLevel != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DimLevel);
      }
      if (MoodLightsOn != false) {
        output.WriteRawTag(48);
        output.WriteBool(MoodLightsOn);
      }
      if (RearDomeLightsOn != false) {
        output.WriteRawTag(56);
        output.WriteBool(RearDomeLightsOn);
      }
      if (FrontDomeLightsOn != false) {
        output.WriteRawTag(64);
        output.WriteBool(FrontDomeLightsOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DimLevelIsValid != false) {
        size += 1 + 1;
      }
      if (MoodLightsOnIsValid != false) {
        size += 1 + 1;
      }
      if (RearDomeLightsOnIsValid != false) {
        size += 1 + 1;
      }
      if (FrontDomeLightsOnIsValid != false) {
        size += 1 + 1;
      }
      if (DimLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DimLevel);
      }
      if (MoodLightsOn != false) {
        size += 1 + 1;
      }
      if (RearDomeLightsOn != false) {
        size += 1 + 1;
      }
      if (FrontDomeLightsOn != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Interior_lights_rpt_416 other) {
      if (other == null) {
        return;
      }
      if (other.DimLevelIsValid != false) {
        DimLevelIsValid = other.DimLevelIsValid;
      }
      if (other.MoodLightsOnIsValid != false) {
        MoodLightsOnIsValid = other.MoodLightsOnIsValid;
      }
      if (other.RearDomeLightsOnIsValid != false) {
        RearDomeLightsOnIsValid = other.RearDomeLightsOnIsValid;
      }
      if (other.FrontDomeLightsOnIsValid != false) {
        FrontDomeLightsOnIsValid = other.FrontDomeLightsOnIsValid;
      }
      if (other.DimLevel != 0) {
        DimLevel = other.DimLevel;
      }
      if (other.MoodLightsOn != false) {
        MoodLightsOn = other.MoodLightsOn;
      }
      if (other.RearDomeLightsOn != false) {
        RearDomeLightsOn = other.RearDomeLightsOn;
      }
      if (other.FrontDomeLightsOn != false) {
        FrontDomeLightsOn = other.FrontDomeLightsOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DimLevelIsValid = input.ReadBool();
            break;
          }
          case 16: {
            MoodLightsOnIsValid = input.ReadBool();
            break;
          }
          case 24: {
            RearDomeLightsOnIsValid = input.ReadBool();
            break;
          }
          case 32: {
            FrontDomeLightsOnIsValid = input.ReadBool();
            break;
          }
          case 40: {
            dimLevel_ = (global::Apollo.Canbus.Interior_lights_rpt_416.Types.Dim_levelType) input.ReadEnum();
            break;
          }
          case 48: {
            MoodLightsOn = input.ReadBool();
            break;
          }
          case 56: {
            RearDomeLightsOn = input.ReadBool();
            break;
          }
          case 64: {
            FrontDomeLightsOn = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Interior_lights_rpt_416 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Dim_levelType {
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_MIN")] DimLevelDimLevelMin = 0,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_1")] DimLevelDimLevel1 = 1,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_2")] DimLevelDimLevel2 = 2,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_3")] DimLevelDimLevel3 = 3,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_4")] DimLevelDimLevel4 = 4,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_5")] DimLevelDimLevel5 = 5,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_6")] DimLevelDimLevel6 = 6,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_7")] DimLevelDimLevel7 = 7,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_8")] DimLevelDimLevel8 = 8,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_9")] DimLevelDimLevel9 = 9,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_10")] DimLevelDimLevel10 = 10,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_11")] DimLevelDimLevel11 = 11,
        [pbr::OriginalName("DIM_LEVEL_DIM_LEVEL_MAX")] DimLevelDimLevelMax = 12,
      }

    }
    #endregion

  }

  public sealed partial class Turn_cmd_130 : pb::IMessage<Turn_cmd_130> {
    private static readonly pb::MessageParser<Turn_cmd_130> _parser = new pb::MessageParser<Turn_cmd_130>(() => new Turn_cmd_130());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Turn_cmd_130> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_cmd_130() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_cmd_130(Turn_cmd_130 other) : this() {
      ignoreOverrides_ = other.ignoreOverrides_;
      enable_ = other.enable_;
      clearOverride_ = other.clearOverride_;
      clearFaults_ = other.clearFaults_;
      turnSignalCmd_ = other.turnSignalCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turn_cmd_130 Clone() {
      return new Turn_cmd_130(this);
    }

    /// <summary>Field number for the "ignore_overrides" field.</summary>
    public const int IgnoreOverridesFieldNumber = 1;
    private bool ignoreOverrides_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreOverrides {
      get { return ignoreOverrides_; }
      set {
        ignoreOverrides_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "clear_override" field.</summary>
    public const int ClearOverrideFieldNumber = 3;
    private bool clearOverride_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearOverride {
      get { return clearOverride_; }
      set {
        clearOverride_ = value;
      }
    }

    /// <summary>Field number for the "clear_faults" field.</summary>
    public const int ClearFaultsFieldNumber = 4;
    private bool clearFaults_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearFaults {
      get { return clearFaults_; }
      set {
        clearFaults_ = value;
      }
    }

    /// <summary>Field number for the "turn_signal_cmd" field.</summary>
    public const int TurnSignalCmdFieldNumber = 5;
    private global::Apollo.Canbus.Turn_cmd_130.Types.Turn_signal_cmdType turnSignalCmd_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_cmd_130.Types.Turn_signal_cmdType TurnSignalCmd {
      get { return turnSignalCmd_; }
      set {
        turnSignalCmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Turn_cmd_130);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Turn_cmd_130 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreOverrides != other.IgnoreOverrides) return false;
      if (Enable != other.Enable) return false;
      if (ClearOverride != other.ClearOverride) return false;
      if (ClearFaults != other.ClearFaults) return false;
      if (TurnSignalCmd != other.TurnSignalCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreOverrides != false) hash ^= IgnoreOverrides.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (ClearOverride != false) hash ^= ClearOverride.GetHashCode();
      if (ClearFaults != false) hash ^= ClearFaults.GetHashCode();
      if (TurnSignalCmd != 0) hash ^= TurnSignalCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreOverrides != false) {
        output.WriteRawTag(8);
        output.WriteBool(IgnoreOverrides);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (ClearOverride != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearOverride);
      }
      if (ClearFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearFaults);
      }
      if (TurnSignalCmd != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TurnSignalCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreOverrides != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (ClearOverride != false) {
        size += 1 + 1;
      }
      if (ClearFaults != false) {
        size += 1 + 1;
      }
      if (TurnSignalCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TurnSignalCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Turn_cmd_130 other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreOverrides != false) {
        IgnoreOverrides = other.IgnoreOverrides;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.ClearOverride != false) {
        ClearOverride = other.ClearOverride;
      }
      if (other.ClearFaults != false) {
        ClearFaults = other.ClearFaults;
      }
      if (other.TurnSignalCmd != 0) {
        TurnSignalCmd = other.TurnSignalCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreOverrides = input.ReadBool();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ClearOverride = input.ReadBool();
            break;
          }
          case 32: {
            ClearFaults = input.ReadBool();
            break;
          }
          case 40: {
            turnSignalCmd_ = (global::Apollo.Canbus.Turn_cmd_130.Types.Turn_signal_cmdType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Turn_cmd_130 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Turn_signal_cmdType {
        [pbr::OriginalName("TURN_SIGNAL_CMD_RIGHT")] TurnSignalCmdRight = 0,
        [pbr::OriginalName("TURN_SIGNAL_CMD_NONE")] TurnSignalCmdNone = 1,
        [pbr::OriginalName("TURN_SIGNAL_CMD_LEFT")] TurnSignalCmdLeft = 2,
        [pbr::OriginalName("TURN_SIGNAL_CMD_HAZARD")] TurnSignalCmdHazard = 3,
      }

    }
    #endregion

  }

  public sealed partial class Detected_object_rpt_411 : pb::IMessage<Detected_object_rpt_411> {
    private static readonly pb::MessageParser<Detected_object_rpt_411> _parser = new pb::MessageParser<Detected_object_rpt_411>(() => new Detected_object_rpt_411());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Detected_object_rpt_411> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Detected_object_rpt_411() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Detected_object_rpt_411(Detected_object_rpt_411 other) : this() {
      frontObjectDistanceHighRes_ = other.frontObjectDistanceHighRes_;
      frontObjectDistanceLowRes_ = other.frontObjectDistanceLowRes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Detected_object_rpt_411 Clone() {
      return new Detected_object_rpt_411(this);
    }

    /// <summary>Field number for the "front_object_distance_high_res" field.</summary>
    public const int FrontObjectDistanceHighResFieldNumber = 1;
    private double frontObjectDistanceHighRes_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrontObjectDistanceHighRes {
      get { return frontObjectDistanceHighRes_; }
      set {
        frontObjectDistanceHighRes_ = value;
      }
    }

    /// <summary>Field number for the "front_object_distance_low_res" field.</summary>
    public const int FrontObjectDistanceLowResFieldNumber = 2;
    private double frontObjectDistanceLowRes_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrontObjectDistanceLowRes {
      get { return frontObjectDistanceLowRes_; }
      set {
        frontObjectDistanceLowRes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Detected_object_rpt_411);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Detected_object_rpt_411 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrontObjectDistanceHighRes != other.FrontObjectDistanceHighRes) return false;
      if (FrontObjectDistanceLowRes != other.FrontObjectDistanceLowRes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrontObjectDistanceHighRes != 0D) hash ^= FrontObjectDistanceHighRes.GetHashCode();
      if (FrontObjectDistanceLowRes != 0D) hash ^= FrontObjectDistanceLowRes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrontObjectDistanceHighRes != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(FrontObjectDistanceHighRes);
      }
      if (FrontObjectDistanceLowRes != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FrontObjectDistanceLowRes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrontObjectDistanceHighRes != 0D) {
        size += 1 + 8;
      }
      if (FrontObjectDistanceLowRes != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Detected_object_rpt_411 other) {
      if (other == null) {
        return;
      }
      if (other.FrontObjectDistanceHighRes != 0D) {
        FrontObjectDistanceHighRes = other.FrontObjectDistanceHighRes;
      }
      if (other.FrontObjectDistanceLowRes != 0D) {
        FrontObjectDistanceLowRes = other.FrontObjectDistanceLowRes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            FrontObjectDistanceHighRes = input.ReadDouble();
            break;
          }
          case 17: {
            FrontObjectDistanceLowRes = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Veh_specific_rpt_1_412 : pb::IMessage<Veh_specific_rpt_1_412> {
    private static readonly pb::MessageParser<Veh_specific_rpt_1_412> _parser = new pb::MessageParser<Veh_specific_rpt_1_412>(() => new Veh_specific_rpt_1_412());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Veh_specific_rpt_1_412> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Veh_specific_rpt_1_412() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Veh_specific_rpt_1_412(Veh_specific_rpt_1_412 other) : this() {
      shiftPos2_ = other.shiftPos2_;
      shiftPos1_ = other.shiftPos1_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Veh_specific_rpt_1_412 Clone() {
      return new Veh_specific_rpt_1_412(this);
    }

    /// <summary>Field number for the "shift_pos_2" field.</summary>
    public const int ShiftPos2FieldNumber = 1;
    private int shiftPos2_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShiftPos2 {
      get { return shiftPos2_; }
      set {
        shiftPos2_ = value;
      }
    }

    /// <summary>Field number for the "shift_pos_1" field.</summary>
    public const int ShiftPos1FieldNumber = 2;
    private int shiftPos1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShiftPos1 {
      get { return shiftPos1_; }
      set {
        shiftPos1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Veh_specific_rpt_1_412);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Veh_specific_rpt_1_412 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShiftPos2 != other.ShiftPos2) return false;
      if (ShiftPos1 != other.ShiftPos1) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShiftPos2 != 0) hash ^= ShiftPos2.GetHashCode();
      if (ShiftPos1 != 0) hash ^= ShiftPos1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShiftPos2 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShiftPos2);
      }
      if (ShiftPos1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShiftPos1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShiftPos2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShiftPos2);
      }
      if (ShiftPos1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShiftPos1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Veh_specific_rpt_1_412 other) {
      if (other == null) {
        return;
      }
      if (other.ShiftPos2 != 0) {
        ShiftPos2 = other.ShiftPos2;
      }
      if (other.ShiftPos1 != 0) {
        ShiftPos1 = other.ShiftPos1;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShiftPos2 = input.ReadInt32();
            break;
          }
          case 16: {
            ShiftPos1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Veh_dynamics_rpt_413 : pb::IMessage<Veh_dynamics_rpt_413> {
    private static readonly pb::MessageParser<Veh_dynamics_rpt_413> _parser = new pb::MessageParser<Veh_dynamics_rpt_413>(() => new Veh_dynamics_rpt_413());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Veh_dynamics_rpt_413> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Veh_dynamics_rpt_413() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Veh_dynamics_rpt_413(Veh_dynamics_rpt_413 other) : this() {
      vehGForces_ = other.vehGForces_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Veh_dynamics_rpt_413 Clone() {
      return new Veh_dynamics_rpt_413(this);
    }

    /// <summary>Field number for the "veh_g_forces" field.</summary>
    public const int VehGForcesFieldNumber = 1;
    private double vehGForces_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehGForces {
      get { return vehGForces_; }
      set {
        vehGForces_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Veh_dynamics_rpt_413);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Veh_dynamics_rpt_413 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VehGForces != other.VehGForces) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VehGForces != 0D) hash ^= VehGForces.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VehGForces != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(VehGForces);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VehGForces != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Veh_dynamics_rpt_413 other) {
      if (other == null) {
        return;
      }
      if (other.VehGForces != 0D) {
        VehGForces = other.VehGForces;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            VehGForces = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rear_lights_rpt_418 : pb::IMessage<Rear_lights_rpt_418> {
    private static readonly pb::MessageParser<Rear_lights_rpt_418> _parser = new pb::MessageParser<Rear_lights_rpt_418>(() => new Rear_lights_rpt_418());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rear_lights_rpt_418> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rear_lights_rpt_418() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rear_lights_rpt_418(Rear_lights_rpt_418 other) : this() {
      reverseLightsOnIsValid_ = other.reverseLightsOnIsValid_;
      brakeLightsOnIsValid_ = other.brakeLightsOnIsValid_;
      reverseLightsOn_ = other.reverseLightsOn_;
      brakeLightsOn_ = other.brakeLightsOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rear_lights_rpt_418 Clone() {
      return new Rear_lights_rpt_418(this);
    }

    /// <summary>Field number for the "reverse_lights_on_is_valid" field.</summary>
    public const int ReverseLightsOnIsValidFieldNumber = 1;
    private bool reverseLightsOnIsValid_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseLightsOnIsValid {
      get { return reverseLightsOnIsValid_; }
      set {
        reverseLightsOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "brake_lights_on_is_valid" field.</summary>
    public const int BrakeLightsOnIsValidFieldNumber = 2;
    private bool brakeLightsOnIsValid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeLightsOnIsValid {
      get { return brakeLightsOnIsValid_; }
      set {
        brakeLightsOnIsValid_ = value;
      }
    }

    /// <summary>Field number for the "reverse_lights_on" field.</summary>
    public const int ReverseLightsOnFieldNumber = 3;
    private bool reverseLightsOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseLightsOn {
      get { return reverseLightsOn_; }
      set {
        reverseLightsOn_ = value;
      }
    }

    /// <summary>Field number for the "brake_lights_on" field.</summary>
    public const int BrakeLightsOnFieldNumber = 4;
    private bool brakeLightsOn_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeLightsOn {
      get { return brakeLightsOn_; }
      set {
        brakeLightsOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rear_lights_rpt_418);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rear_lights_rpt_418 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReverseLightsOnIsValid != other.ReverseLightsOnIsValid) return false;
      if (BrakeLightsOnIsValid != other.BrakeLightsOnIsValid) return false;
      if (ReverseLightsOn != other.ReverseLightsOn) return false;
      if (BrakeLightsOn != other.BrakeLightsOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReverseLightsOnIsValid != false) hash ^= ReverseLightsOnIsValid.GetHashCode();
      if (BrakeLightsOnIsValid != false) hash ^= BrakeLightsOnIsValid.GetHashCode();
      if (ReverseLightsOn != false) hash ^= ReverseLightsOn.GetHashCode();
      if (BrakeLightsOn != false) hash ^= BrakeLightsOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReverseLightsOnIsValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReverseLightsOnIsValid);
      }
      if (BrakeLightsOnIsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(BrakeLightsOnIsValid);
      }
      if (ReverseLightsOn != false) {
        output.WriteRawTag(24);
        output.WriteBool(ReverseLightsOn);
      }
      if (BrakeLightsOn != false) {
        output.WriteRawTag(32);
        output.WriteBool(BrakeLightsOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReverseLightsOnIsValid != false) {
        size += 1 + 1;
      }
      if (BrakeLightsOnIsValid != false) {
        size += 1 + 1;
      }
      if (ReverseLightsOn != false) {
        size += 1 + 1;
      }
      if (BrakeLightsOn != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rear_lights_rpt_418 other) {
      if (other == null) {
        return;
      }
      if (other.ReverseLightsOnIsValid != false) {
        ReverseLightsOnIsValid = other.ReverseLightsOnIsValid;
      }
      if (other.BrakeLightsOnIsValid != false) {
        BrakeLightsOnIsValid = other.BrakeLightsOnIsValid;
      }
      if (other.ReverseLightsOn != false) {
        ReverseLightsOn = other.ReverseLightsOn;
      }
      if (other.BrakeLightsOn != false) {
        BrakeLightsOn = other.BrakeLightsOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReverseLightsOnIsValid = input.ReadBool();
            break;
          }
          case 16: {
            BrakeLightsOnIsValid = input.ReadBool();
            break;
          }
          case 24: {
            ReverseLightsOn = input.ReadBool();
            break;
          }
          case 32: {
            BrakeLightsOn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lexus : pb::IMessage<Lexus> {
    private static readonly pb::MessageParser<Lexus> _parser = new pb::MessageParser<Lexus>(() => new Lexus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lexus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.LexusReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lexus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lexus(Lexus other) : this() {
      HazardLightsRpt214 = other.hazardLightsRpt214_ != null ? other.HazardLightsRpt214.Clone() : null;
      SteeringCmd12C = other.steeringCmd12C_ != null ? other.SteeringCmd12C.Clone() : null;
      DashControlsRightRpt210 = other.dashControlsRightRpt210_ != null ? other.DashControlsRightRpt210.Clone() : null;
      DashControlsLeftCmd10C = other.dashControlsLeftCmd10C_ != null ? other.DashControlsLeftCmd10C.Clone() : null;
      SteeringRpt22C = other.steeringRpt22C_ != null ? other.SteeringRpt22C.Clone() : null;
      TurnAuxRpt330 = other.turnAuxRpt330_ != null ? other.TurnAuxRpt330.Clone() : null;
      HeadlightRpt218 = other.headlightRpt218_ != null ? other.HeadlightRpt218.Clone() : null;
      HazardLightsCmd114 = other.hazardLightsCmd114_ != null ? other.HazardLightsCmd114.Clone() : null;
      DashControlsLeftRpt20C = other.dashControlsLeftRpt20C_ != null ? other.DashControlsLeftRpt20C.Clone() : null;
      HeadlightAuxRpt318 = other.headlightAuxRpt318_ != null ? other.HeadlightAuxRpt318.Clone() : null;
      DashControlsRightCmd110 = other.dashControlsRightCmd110_ != null ? other.DashControlsRightCmd110.Clone() : null;
      WiperCmd134 = other.wiperCmd134_ != null ? other.WiperCmd134.Clone() : null;
      WiperRpt234 = other.wiperRpt234_ != null ? other.WiperRpt234.Clone() : null;
      TurnRpt230 = other.turnRpt230_ != null ? other.TurnRpt230.Clone() : null;
      HeadlightCmd118 = other.headlightCmd118_ != null ? other.HeadlightCmd118.Clone() : null;
      DoorRpt417 = other.doorRpt417_ != null ? other.DoorRpt417.Clone() : null;
      ComponentRpt20 = other.componentRpt20_ != null ? other.ComponentRpt20.Clone() : null;
      WheelSpeedRpt407 = other.wheelSpeedRpt407_ != null ? other.WheelSpeedRpt407.Clone() : null;
      SteeringMotorRpt3406 = other.steeringMotorRpt3406_ != null ? other.SteeringMotorRpt3406.Clone() : null;
      SteeringMotorRpt2405 = other.steeringMotorRpt2405_ != null ? other.SteeringMotorRpt2405.Clone() : null;
      SteeringMotorRpt1404 = other.steeringMotorRpt1404_ != null ? other.SteeringMotorRpt1404.Clone() : null;
      BrakeMotorRpt3403 = other.brakeMotorRpt3403_ != null ? other.BrakeMotorRpt3403.Clone() : null;
      BrakeMotorRpt2402 = other.brakeMotorRpt2402_ != null ? other.BrakeMotorRpt2402.Clone() : null;
      BrakeMotorRpt1401 = other.brakeMotorRpt1401_ != null ? other.BrakeMotorRpt1401.Clone() : null;
      WiperAuxRpt334 = other.wiperAuxRpt334_ != null ? other.WiperAuxRpt334.Clone() : null;
      ShiftAuxRpt328 = other.shiftAuxRpt328_ != null ? other.ShiftAuxRpt328.Clone() : null;
      AccelRpt200 = other.accelRpt200_ != null ? other.AccelRpt200.Clone() : null;
      BrakeRpt204 = other.brakeRpt204_ != null ? other.BrakeRpt204.Clone() : null;
      HornCmd11C = other.hornCmd11C_ != null ? other.HornCmd11C.Clone() : null;
      GlobalRpt10 = other.globalRpt10_ != null ? other.GlobalRpt10.Clone() : null;
      AccelAuxRpt300 = other.accelAuxRpt300_ != null ? other.AccelAuxRpt300.Clone() : null;
      CruiseControlButtonsRpt208 = other.cruiseControlButtonsRpt208_ != null ? other.CruiseControlButtonsRpt208.Clone() : null;
      VehicleSpeedRpt400 = other.vehicleSpeedRpt400_ != null ? other.VehicleSpeedRpt400.Clone() : null;
      BrakeAuxRpt304 = other.brakeAuxRpt304_ != null ? other.BrakeAuxRpt304.Clone() : null;
      MediaControlsCmd120 = other.mediaControlsCmd120_ != null ? other.MediaControlsCmd120.Clone() : null;
      CruiseControlButtonsCmd108 = other.cruiseControlButtonsCmd108_ != null ? other.CruiseControlButtonsCmd108.Clone() : null;
      ParkingBrakeCmd124 = other.parkingBrakeCmd124_ != null ? other.ParkingBrakeCmd124.Clone() : null;
      HornRpt21C = other.hornRpt21C_ != null ? other.HornRpt21C.Clone() : null;
      ShiftRpt228 = other.shiftRpt228_ != null ? other.ShiftRpt228.Clone() : null;
      ShiftCmd128 = other.shiftCmd128_ != null ? other.ShiftCmd128.Clone() : null;
      AccelCmd100 = other.accelCmd100_ != null ? other.AccelCmd100.Clone() : null;
      ParkingBrakeRpt224 = other.parkingBrakeRpt224_ != null ? other.ParkingBrakeRpt224.Clone() : null;
      BrakeCmd104 = other.brakeCmd104_ != null ? other.BrakeCmd104.Clone() : null;
      MediaControlsRpt220 = other.mediaControlsRpt220_ != null ? other.MediaControlsRpt220.Clone() : null;
      SteeringAuxRpt32C = other.steeringAuxRpt32C_ != null ? other.SteeringAuxRpt32C.Clone() : null;
      LatLonHeadingRpt40E = other.latLonHeadingRpt40E_ != null ? other.LatLonHeadingRpt40E.Clone() : null;
      YawRateRpt40D = other.yawRateRpt40D_ != null ? other.YawRateRpt40D.Clone() : null;
      DateTimeRpt40F = other.dateTimeRpt40F_ != null ? other.DateTimeRpt40F.Clone() : null;
      VinRpt414 = other.vinRpt414_ != null ? other.VinRpt414.Clone() : null;
      OccupancyRpt415 = other.occupancyRpt415_ != null ? other.OccupancyRpt415.Clone() : null;
      InteriorLightsRpt416 = other.interiorLightsRpt416_ != null ? other.InteriorLightsRpt416.Clone() : null;
      TurnCmd130 = other.turnCmd130_ != null ? other.TurnCmd130.Clone() : null;
      DetectedObjectRpt411 = other.detectedObjectRpt411_ != null ? other.DetectedObjectRpt411.Clone() : null;
      VehSpecificRpt1412 = other.vehSpecificRpt1412_ != null ? other.VehSpecificRpt1412.Clone() : null;
      VehDynamicsRpt413 = other.vehDynamicsRpt413_ != null ? other.VehDynamicsRpt413.Clone() : null;
      RearLightsRpt418 = other.rearLightsRpt418_ != null ? other.RearLightsRpt418.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lexus Clone() {
      return new Lexus(this);
    }

    /// <summary>Field number for the "hazard_lights_rpt_214" field.</summary>
    public const int HazardLightsRpt214FieldNumber = 1;
    private global::Apollo.Canbus.Hazard_lights_rpt_214 hazardLightsRpt214_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Hazard_lights_rpt_214 HazardLightsRpt214 {
      get { return hazardLightsRpt214_; }
      set {
        hazardLightsRpt214_ = value;
      }
    }

    /// <summary>Field number for the "steering_cmd_12c" field.</summary>
    public const int SteeringCmd12CFieldNumber = 2;
    private global::Apollo.Canbus.Steering_cmd_12c steeringCmd12C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_cmd_12c SteeringCmd12C {
      get { return steeringCmd12C_; }
      set {
        steeringCmd12C_ = value;
      }
    }

    /// <summary>Field number for the "dash_controls_right_rpt_210" field.</summary>
    public const int DashControlsRightRpt210FieldNumber = 3;
    private global::Apollo.Canbus.Dash_controls_right_rpt_210 dashControlsRightRpt210_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_right_rpt_210 DashControlsRightRpt210 {
      get { return dashControlsRightRpt210_; }
      set {
        dashControlsRightRpt210_ = value;
      }
    }

    /// <summary>Field number for the "dash_controls_left_cmd_10c" field.</summary>
    public const int DashControlsLeftCmd10CFieldNumber = 4;
    private global::Apollo.Canbus.Dash_controls_left_cmd_10c dashControlsLeftCmd10C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_left_cmd_10c DashControlsLeftCmd10C {
      get { return dashControlsLeftCmd10C_; }
      set {
        dashControlsLeftCmd10C_ = value;
      }
    }

    /// <summary>Field number for the "steering_rpt_22c" field.</summary>
    public const int SteeringRpt22CFieldNumber = 5;
    private global::Apollo.Canbus.Steering_rpt_22c steeringRpt22C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_rpt_22c SteeringRpt22C {
      get { return steeringRpt22C_; }
      set {
        steeringRpt22C_ = value;
      }
    }

    /// <summary>Field number for the "turn_aux_rpt_330" field.</summary>
    public const int TurnAuxRpt330FieldNumber = 6;
    private global::Apollo.Canbus.Turn_aux_rpt_330 turnAuxRpt330_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_aux_rpt_330 TurnAuxRpt330 {
      get { return turnAuxRpt330_; }
      set {
        turnAuxRpt330_ = value;
      }
    }

    /// <summary>Field number for the "headlight_rpt_218" field.</summary>
    public const int HeadlightRpt218FieldNumber = 7;
    private global::Apollo.Canbus.Headlight_rpt_218 headlightRpt218_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_rpt_218 HeadlightRpt218 {
      get { return headlightRpt218_; }
      set {
        headlightRpt218_ = value;
      }
    }

    /// <summary>Field number for the "hazard_lights_cmd_114" field.</summary>
    public const int HazardLightsCmd114FieldNumber = 8;
    private global::Apollo.Canbus.Hazard_lights_cmd_114 hazardLightsCmd114_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Hazard_lights_cmd_114 HazardLightsCmd114 {
      get { return hazardLightsCmd114_; }
      set {
        hazardLightsCmd114_ = value;
      }
    }

    /// <summary>Field number for the "dash_controls_left_rpt_20c" field.</summary>
    public const int DashControlsLeftRpt20CFieldNumber = 9;
    private global::Apollo.Canbus.Dash_controls_left_rpt_20c dashControlsLeftRpt20C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_left_rpt_20c DashControlsLeftRpt20C {
      get { return dashControlsLeftRpt20C_; }
      set {
        dashControlsLeftRpt20C_ = value;
      }
    }

    /// <summary>Field number for the "headlight_aux_rpt_318" field.</summary>
    public const int HeadlightAuxRpt318FieldNumber = 10;
    private global::Apollo.Canbus.Headlight_aux_rpt_318 headlightAuxRpt318_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_aux_rpt_318 HeadlightAuxRpt318 {
      get { return headlightAuxRpt318_; }
      set {
        headlightAuxRpt318_ = value;
      }
    }

    /// <summary>Field number for the "dash_controls_right_cmd_110" field.</summary>
    public const int DashControlsRightCmd110FieldNumber = 11;
    private global::Apollo.Canbus.Dash_controls_right_cmd_110 dashControlsRightCmd110_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Dash_controls_right_cmd_110 DashControlsRightCmd110 {
      get { return dashControlsRightCmd110_; }
      set {
        dashControlsRightCmd110_ = value;
      }
    }

    /// <summary>Field number for the "wiper_cmd_134" field.</summary>
    public const int WiperCmd134FieldNumber = 12;
    private global::Apollo.Canbus.Wiper_cmd_134 wiperCmd134_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_cmd_134 WiperCmd134 {
      get { return wiperCmd134_; }
      set {
        wiperCmd134_ = value;
      }
    }

    /// <summary>Field number for the "wiper_rpt_234" field.</summary>
    public const int WiperRpt234FieldNumber = 13;
    private global::Apollo.Canbus.Wiper_rpt_234 wiperRpt234_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_rpt_234 WiperRpt234 {
      get { return wiperRpt234_; }
      set {
        wiperRpt234_ = value;
      }
    }

    /// <summary>Field number for the "turn_rpt_230" field.</summary>
    public const int TurnRpt230FieldNumber = 14;
    private global::Apollo.Canbus.Turn_rpt_230 turnRpt230_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_rpt_230 TurnRpt230 {
      get { return turnRpt230_; }
      set {
        turnRpt230_ = value;
      }
    }

    /// <summary>Field number for the "headlight_cmd_118" field.</summary>
    public const int HeadlightCmd118FieldNumber = 15;
    private global::Apollo.Canbus.Headlight_cmd_118 headlightCmd118_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Headlight_cmd_118 HeadlightCmd118 {
      get { return headlightCmd118_; }
      set {
        headlightCmd118_ = value;
      }
    }

    /// <summary>Field number for the "door_rpt_417" field.</summary>
    public const int DoorRpt417FieldNumber = 16;
    private global::Apollo.Canbus.Door_rpt_417 doorRpt417_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Door_rpt_417 DoorRpt417 {
      get { return doorRpt417_; }
      set {
        doorRpt417_ = value;
      }
    }

    /// <summary>Field number for the "component_rpt_20" field.</summary>
    public const int ComponentRpt20FieldNumber = 17;
    private global::Apollo.Canbus.Component_rpt_20 componentRpt20_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Component_rpt_20 ComponentRpt20 {
      get { return componentRpt20_; }
      set {
        componentRpt20_ = value;
      }
    }

    /// <summary>Field number for the "wheel_speed_rpt_407" field.</summary>
    public const int WheelSpeedRpt407FieldNumber = 18;
    private global::Apollo.Canbus.Wheel_speed_rpt_407 wheelSpeedRpt407_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wheel_speed_rpt_407 WheelSpeedRpt407 {
      get { return wheelSpeedRpt407_; }
      set {
        wheelSpeedRpt407_ = value;
      }
    }

    /// <summary>Field number for the "steering_motor_rpt_3_406" field.</summary>
    public const int SteeringMotorRpt3406FieldNumber = 19;
    private global::Apollo.Canbus.Steering_motor_rpt_3_406 steeringMotorRpt3406_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_motor_rpt_3_406 SteeringMotorRpt3406 {
      get { return steeringMotorRpt3406_; }
      set {
        steeringMotorRpt3406_ = value;
      }
    }

    /// <summary>Field number for the "steering_motor_rpt_2_405" field.</summary>
    public const int SteeringMotorRpt2405FieldNumber = 20;
    private global::Apollo.Canbus.Steering_motor_rpt_2_405 steeringMotorRpt2405_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_motor_rpt_2_405 SteeringMotorRpt2405 {
      get { return steeringMotorRpt2405_; }
      set {
        steeringMotorRpt2405_ = value;
      }
    }

    /// <summary>Field number for the "steering_motor_rpt_1_404" field.</summary>
    public const int SteeringMotorRpt1404FieldNumber = 21;
    private global::Apollo.Canbus.Steering_motor_rpt_1_404 steeringMotorRpt1404_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_motor_rpt_1_404 SteeringMotorRpt1404 {
      get { return steeringMotorRpt1404_; }
      set {
        steeringMotorRpt1404_ = value;
      }
    }

    /// <summary>Field number for the "brake_motor_rpt_3_403" field.</summary>
    public const int BrakeMotorRpt3403FieldNumber = 22;
    private global::Apollo.Canbus.Brake_motor_rpt_3_403 brakeMotorRpt3403_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_motor_rpt_3_403 BrakeMotorRpt3403 {
      get { return brakeMotorRpt3403_; }
      set {
        brakeMotorRpt3403_ = value;
      }
    }

    /// <summary>Field number for the "brake_motor_rpt_2_402" field.</summary>
    public const int BrakeMotorRpt2402FieldNumber = 23;
    private global::Apollo.Canbus.Brake_motor_rpt_2_402 brakeMotorRpt2402_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_motor_rpt_2_402 BrakeMotorRpt2402 {
      get { return brakeMotorRpt2402_; }
      set {
        brakeMotorRpt2402_ = value;
      }
    }

    /// <summary>Field number for the "brake_motor_rpt_1_401" field.</summary>
    public const int BrakeMotorRpt1401FieldNumber = 24;
    private global::Apollo.Canbus.Brake_motor_rpt_1_401 brakeMotorRpt1401_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_motor_rpt_1_401 BrakeMotorRpt1401 {
      get { return brakeMotorRpt1401_; }
      set {
        brakeMotorRpt1401_ = value;
      }
    }

    /// <summary>Field number for the "wiper_aux_rpt_334" field.</summary>
    public const int WiperAuxRpt334FieldNumber = 25;
    private global::Apollo.Canbus.Wiper_aux_rpt_334 wiperAuxRpt334_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Wiper_aux_rpt_334 WiperAuxRpt334 {
      get { return wiperAuxRpt334_; }
      set {
        wiperAuxRpt334_ = value;
      }
    }

    /// <summary>Field number for the "shift_aux_rpt_328" field.</summary>
    public const int ShiftAuxRpt328FieldNumber = 26;
    private global::Apollo.Canbus.Shift_aux_rpt_328 shiftAuxRpt328_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_aux_rpt_328 ShiftAuxRpt328 {
      get { return shiftAuxRpt328_; }
      set {
        shiftAuxRpt328_ = value;
      }
    }

    /// <summary>Field number for the "accel_rpt_200" field.</summary>
    public const int AccelRpt200FieldNumber = 27;
    private global::Apollo.Canbus.Accel_rpt_200 accelRpt200_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Accel_rpt_200 AccelRpt200 {
      get { return accelRpt200_; }
      set {
        accelRpt200_ = value;
      }
    }

    /// <summary>Field number for the "brake_rpt_204" field.</summary>
    public const int BrakeRpt204FieldNumber = 28;
    private global::Apollo.Canbus.Brake_rpt_204 brakeRpt204_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_rpt_204 BrakeRpt204 {
      get { return brakeRpt204_; }
      set {
        brakeRpt204_ = value;
      }
    }

    /// <summary>Field number for the "horn_cmd_11c" field.</summary>
    public const int HornCmd11CFieldNumber = 29;
    private global::Apollo.Canbus.Horn_cmd_11c hornCmd11C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_cmd_11c HornCmd11C {
      get { return hornCmd11C_; }
      set {
        hornCmd11C_ = value;
      }
    }

    /// <summary>Field number for the "global_rpt_10" field.</summary>
    public const int GlobalRpt10FieldNumber = 30;
    private global::Apollo.Canbus.Global_rpt_10 globalRpt10_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Global_rpt_10 GlobalRpt10 {
      get { return globalRpt10_; }
      set {
        globalRpt10_ = value;
      }
    }

    /// <summary>Field number for the "accel_aux_rpt_300" field.</summary>
    public const int AccelAuxRpt300FieldNumber = 31;
    private global::Apollo.Canbus.Accel_aux_rpt_300 accelAuxRpt300_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Accel_aux_rpt_300 AccelAuxRpt300 {
      get { return accelAuxRpt300_; }
      set {
        accelAuxRpt300_ = value;
      }
    }

    /// <summary>Field number for the "cruise_control_buttons_rpt_208" field.</summary>
    public const int CruiseControlButtonsRpt208FieldNumber = 32;
    private global::Apollo.Canbus.Cruise_control_buttons_rpt_208 cruiseControlButtonsRpt208_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Cruise_control_buttons_rpt_208 CruiseControlButtonsRpt208 {
      get { return cruiseControlButtonsRpt208_; }
      set {
        cruiseControlButtonsRpt208_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_speed_rpt_400" field.</summary>
    public const int VehicleSpeedRpt400FieldNumber = 33;
    private global::Apollo.Canbus.Vehicle_speed_rpt_400 vehicleSpeedRpt400_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Vehicle_speed_rpt_400 VehicleSpeedRpt400 {
      get { return vehicleSpeedRpt400_; }
      set {
        vehicleSpeedRpt400_ = value;
      }
    }

    /// <summary>Field number for the "brake_aux_rpt_304" field.</summary>
    public const int BrakeAuxRpt304FieldNumber = 34;
    private global::Apollo.Canbus.Brake_aux_rpt_304 brakeAuxRpt304_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_aux_rpt_304 BrakeAuxRpt304 {
      get { return brakeAuxRpt304_; }
      set {
        brakeAuxRpt304_ = value;
      }
    }

    /// <summary>Field number for the "media_controls_cmd_120" field.</summary>
    public const int MediaControlsCmd120FieldNumber = 35;
    private global::Apollo.Canbus.Media_controls_cmd_120 mediaControlsCmd120_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Media_controls_cmd_120 MediaControlsCmd120 {
      get { return mediaControlsCmd120_; }
      set {
        mediaControlsCmd120_ = value;
      }
    }

    /// <summary>Field number for the "cruise_control_buttons_cmd_108" field.</summary>
    public const int CruiseControlButtonsCmd108FieldNumber = 36;
    private global::Apollo.Canbus.Cruise_control_buttons_cmd_108 cruiseControlButtonsCmd108_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Cruise_control_buttons_cmd_108 CruiseControlButtonsCmd108 {
      get { return cruiseControlButtonsCmd108_; }
      set {
        cruiseControlButtonsCmd108_ = value;
      }
    }

    /// <summary>Field number for the "parking_brake_cmd_124" field.</summary>
    public const int ParkingBrakeCmd124FieldNumber = 37;
    private global::Apollo.Canbus.Parking_brake_cmd_124 parkingBrakeCmd124_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Parking_brake_cmd_124 ParkingBrakeCmd124 {
      get { return parkingBrakeCmd124_; }
      set {
        parkingBrakeCmd124_ = value;
      }
    }

    /// <summary>Field number for the "horn_rpt_21c" field.</summary>
    public const int HornRpt21CFieldNumber = 38;
    private global::Apollo.Canbus.Horn_rpt_21c hornRpt21C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Horn_rpt_21c HornRpt21C {
      get { return hornRpt21C_; }
      set {
        hornRpt21C_ = value;
      }
    }

    /// <summary>Field number for the "shift_rpt_228" field.</summary>
    public const int ShiftRpt228FieldNumber = 39;
    private global::Apollo.Canbus.Shift_rpt_228 shiftRpt228_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_rpt_228 ShiftRpt228 {
      get { return shiftRpt228_; }
      set {
        shiftRpt228_ = value;
      }
    }

    /// <summary>Field number for the "shift_cmd_128" field.</summary>
    public const int ShiftCmd128FieldNumber = 40;
    private global::Apollo.Canbus.Shift_cmd_128 shiftCmd128_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Shift_cmd_128 ShiftCmd128 {
      get { return shiftCmd128_; }
      set {
        shiftCmd128_ = value;
      }
    }

    /// <summary>Field number for the "accel_cmd_100" field.</summary>
    public const int AccelCmd100FieldNumber = 41;
    private global::Apollo.Canbus.Accel_cmd_100 accelCmd100_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Accel_cmd_100 AccelCmd100 {
      get { return accelCmd100_; }
      set {
        accelCmd100_ = value;
      }
    }

    /// <summary>Field number for the "parking_brake_rpt_224" field.</summary>
    public const int ParkingBrakeRpt224FieldNumber = 42;
    private global::Apollo.Canbus.Parking_brake_rpt_224 parkingBrakeRpt224_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Parking_brake_rpt_224 ParkingBrakeRpt224 {
      get { return parkingBrakeRpt224_; }
      set {
        parkingBrakeRpt224_ = value;
      }
    }

    /// <summary>Field number for the "brake_cmd_104" field.</summary>
    public const int BrakeCmd104FieldNumber = 43;
    private global::Apollo.Canbus.Brake_cmd_104 brakeCmd104_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Brake_cmd_104 BrakeCmd104 {
      get { return brakeCmd104_; }
      set {
        brakeCmd104_ = value;
      }
    }

    /// <summary>Field number for the "media_controls_rpt_220" field.</summary>
    public const int MediaControlsRpt220FieldNumber = 44;
    private global::Apollo.Canbus.Media_controls_rpt_220 mediaControlsRpt220_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Media_controls_rpt_220 MediaControlsRpt220 {
      get { return mediaControlsRpt220_; }
      set {
        mediaControlsRpt220_ = value;
      }
    }

    /// <summary>Field number for the "steering_aux_rpt_32c" field.</summary>
    public const int SteeringAuxRpt32CFieldNumber = 45;
    private global::Apollo.Canbus.Steering_aux_rpt_32c steeringAuxRpt32C_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Steering_aux_rpt_32c SteeringAuxRpt32C {
      get { return steeringAuxRpt32C_; }
      set {
        steeringAuxRpt32C_ = value;
      }
    }

    /// <summary>Field number for the "lat_lon_heading_rpt_40e" field.</summary>
    public const int LatLonHeadingRpt40EFieldNumber = 46;
    private global::Apollo.Canbus.Lat_lon_heading_rpt_40e latLonHeadingRpt40E_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Lat_lon_heading_rpt_40e LatLonHeadingRpt40E {
      get { return latLonHeadingRpt40E_; }
      set {
        latLonHeadingRpt40E_ = value;
      }
    }

    /// <summary>Field number for the "yaw_rate_rpt_40d" field.</summary>
    public const int YawRateRpt40DFieldNumber = 47;
    private global::Apollo.Canbus.Yaw_rate_rpt_40d yawRateRpt40D_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Yaw_rate_rpt_40d YawRateRpt40D {
      get { return yawRateRpt40D_; }
      set {
        yawRateRpt40D_ = value;
      }
    }

    /// <summary>Field number for the "date_time_rpt_40f" field.</summary>
    public const int DateTimeRpt40FFieldNumber = 48;
    private global::Apollo.Canbus.Date_time_rpt_40f dateTimeRpt40F_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Date_time_rpt_40f DateTimeRpt40F {
      get { return dateTimeRpt40F_; }
      set {
        dateTimeRpt40F_ = value;
      }
    }

    /// <summary>Field number for the "vin_rpt_414" field.</summary>
    public const int VinRpt414FieldNumber = 49;
    private global::Apollo.Canbus.Vin_rpt_414 vinRpt414_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Vin_rpt_414 VinRpt414 {
      get { return vinRpt414_; }
      set {
        vinRpt414_ = value;
      }
    }

    /// <summary>Field number for the "occupancy_rpt_415" field.</summary>
    public const int OccupancyRpt415FieldNumber = 50;
    private global::Apollo.Canbus.Occupancy_rpt_415 occupancyRpt415_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Occupancy_rpt_415 OccupancyRpt415 {
      get { return occupancyRpt415_; }
      set {
        occupancyRpt415_ = value;
      }
    }

    /// <summary>Field number for the "interior_lights_rpt_416" field.</summary>
    public const int InteriorLightsRpt416FieldNumber = 51;
    private global::Apollo.Canbus.Interior_lights_rpt_416 interiorLightsRpt416_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Interior_lights_rpt_416 InteriorLightsRpt416 {
      get { return interiorLightsRpt416_; }
      set {
        interiorLightsRpt416_ = value;
      }
    }

    /// <summary>Field number for the "turn_cmd_130" field.</summary>
    public const int TurnCmd130FieldNumber = 52;
    private global::Apollo.Canbus.Turn_cmd_130 turnCmd130_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Turn_cmd_130 TurnCmd130 {
      get { return turnCmd130_; }
      set {
        turnCmd130_ = value;
      }
    }

    /// <summary>Field number for the "detected_object_rpt_411" field.</summary>
    public const int DetectedObjectRpt411FieldNumber = 53;
    private global::Apollo.Canbus.Detected_object_rpt_411 detectedObjectRpt411_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Detected_object_rpt_411 DetectedObjectRpt411 {
      get { return detectedObjectRpt411_; }
      set {
        detectedObjectRpt411_ = value;
      }
    }

    /// <summary>Field number for the "veh_specific_rpt_1_412" field.</summary>
    public const int VehSpecificRpt1412FieldNumber = 54;
    private global::Apollo.Canbus.Veh_specific_rpt_1_412 vehSpecificRpt1412_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Veh_specific_rpt_1_412 VehSpecificRpt1412 {
      get { return vehSpecificRpt1412_; }
      set {
        vehSpecificRpt1412_ = value;
      }
    }

    /// <summary>Field number for the "veh_dynamics_rpt_413" field.</summary>
    public const int VehDynamicsRpt413FieldNumber = 55;
    private global::Apollo.Canbus.Veh_dynamics_rpt_413 vehDynamicsRpt413_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Veh_dynamics_rpt_413 VehDynamicsRpt413 {
      get { return vehDynamicsRpt413_; }
      set {
        vehDynamicsRpt413_ = value;
      }
    }

    /// <summary>Field number for the "rear_lights_rpt_418" field.</summary>
    public const int RearLightsRpt418FieldNumber = 56;
    private global::Apollo.Canbus.Rear_lights_rpt_418 rearLightsRpt418_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Rear_lights_rpt_418 RearLightsRpt418 {
      get { return rearLightsRpt418_; }
      set {
        rearLightsRpt418_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lexus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lexus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HazardLightsRpt214, other.HazardLightsRpt214)) return false;
      if (!object.Equals(SteeringCmd12C, other.SteeringCmd12C)) return false;
      if (!object.Equals(DashControlsRightRpt210, other.DashControlsRightRpt210)) return false;
      if (!object.Equals(DashControlsLeftCmd10C, other.DashControlsLeftCmd10C)) return false;
      if (!object.Equals(SteeringRpt22C, other.SteeringRpt22C)) return false;
      if (!object.Equals(TurnAuxRpt330, other.TurnAuxRpt330)) return false;
      if (!object.Equals(HeadlightRpt218, other.HeadlightRpt218)) return false;
      if (!object.Equals(HazardLightsCmd114, other.HazardLightsCmd114)) return false;
      if (!object.Equals(DashControlsLeftRpt20C, other.DashControlsLeftRpt20C)) return false;
      if (!object.Equals(HeadlightAuxRpt318, other.HeadlightAuxRpt318)) return false;
      if (!object.Equals(DashControlsRightCmd110, other.DashControlsRightCmd110)) return false;
      if (!object.Equals(WiperCmd134, other.WiperCmd134)) return false;
      if (!object.Equals(WiperRpt234, other.WiperRpt234)) return false;
      if (!object.Equals(TurnRpt230, other.TurnRpt230)) return false;
      if (!object.Equals(HeadlightCmd118, other.HeadlightCmd118)) return false;
      if (!object.Equals(DoorRpt417, other.DoorRpt417)) return false;
      if (!object.Equals(ComponentRpt20, other.ComponentRpt20)) return false;
      if (!object.Equals(WheelSpeedRpt407, other.WheelSpeedRpt407)) return false;
      if (!object.Equals(SteeringMotorRpt3406, other.SteeringMotorRpt3406)) return false;
      if (!object.Equals(SteeringMotorRpt2405, other.SteeringMotorRpt2405)) return false;
      if (!object.Equals(SteeringMotorRpt1404, other.SteeringMotorRpt1404)) return false;
      if (!object.Equals(BrakeMotorRpt3403, other.BrakeMotorRpt3403)) return false;
      if (!object.Equals(BrakeMotorRpt2402, other.BrakeMotorRpt2402)) return false;
      if (!object.Equals(BrakeMotorRpt1401, other.BrakeMotorRpt1401)) return false;
      if (!object.Equals(WiperAuxRpt334, other.WiperAuxRpt334)) return false;
      if (!object.Equals(ShiftAuxRpt328, other.ShiftAuxRpt328)) return false;
      if (!object.Equals(AccelRpt200, other.AccelRpt200)) return false;
      if (!object.Equals(BrakeRpt204, other.BrakeRpt204)) return false;
      if (!object.Equals(HornCmd11C, other.HornCmd11C)) return false;
      if (!object.Equals(GlobalRpt10, other.GlobalRpt10)) return false;
      if (!object.Equals(AccelAuxRpt300, other.AccelAuxRpt300)) return false;
      if (!object.Equals(CruiseControlButtonsRpt208, other.CruiseControlButtonsRpt208)) return false;
      if (!object.Equals(VehicleSpeedRpt400, other.VehicleSpeedRpt400)) return false;
      if (!object.Equals(BrakeAuxRpt304, other.BrakeAuxRpt304)) return false;
      if (!object.Equals(MediaControlsCmd120, other.MediaControlsCmd120)) return false;
      if (!object.Equals(CruiseControlButtonsCmd108, other.CruiseControlButtonsCmd108)) return false;
      if (!object.Equals(ParkingBrakeCmd124, other.ParkingBrakeCmd124)) return false;
      if (!object.Equals(HornRpt21C, other.HornRpt21C)) return false;
      if (!object.Equals(ShiftRpt228, other.ShiftRpt228)) return false;
      if (!object.Equals(ShiftCmd128, other.ShiftCmd128)) return false;
      if (!object.Equals(AccelCmd100, other.AccelCmd100)) return false;
      if (!object.Equals(ParkingBrakeRpt224, other.ParkingBrakeRpt224)) return false;
      if (!object.Equals(BrakeCmd104, other.BrakeCmd104)) return false;
      if (!object.Equals(MediaControlsRpt220, other.MediaControlsRpt220)) return false;
      if (!object.Equals(SteeringAuxRpt32C, other.SteeringAuxRpt32C)) return false;
      if (!object.Equals(LatLonHeadingRpt40E, other.LatLonHeadingRpt40E)) return false;
      if (!object.Equals(YawRateRpt40D, other.YawRateRpt40D)) return false;
      if (!object.Equals(DateTimeRpt40F, other.DateTimeRpt40F)) return false;
      if (!object.Equals(VinRpt414, other.VinRpt414)) return false;
      if (!object.Equals(OccupancyRpt415, other.OccupancyRpt415)) return false;
      if (!object.Equals(InteriorLightsRpt416, other.InteriorLightsRpt416)) return false;
      if (!object.Equals(TurnCmd130, other.TurnCmd130)) return false;
      if (!object.Equals(DetectedObjectRpt411, other.DetectedObjectRpt411)) return false;
      if (!object.Equals(VehSpecificRpt1412, other.VehSpecificRpt1412)) return false;
      if (!object.Equals(VehDynamicsRpt413, other.VehDynamicsRpt413)) return false;
      if (!object.Equals(RearLightsRpt418, other.RearLightsRpt418)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hazardLightsRpt214_ != null) hash ^= HazardLightsRpt214.GetHashCode();
      if (steeringCmd12C_ != null) hash ^= SteeringCmd12C.GetHashCode();
      if (dashControlsRightRpt210_ != null) hash ^= DashControlsRightRpt210.GetHashCode();
      if (dashControlsLeftCmd10C_ != null) hash ^= DashControlsLeftCmd10C.GetHashCode();
      if (steeringRpt22C_ != null) hash ^= SteeringRpt22C.GetHashCode();
      if (turnAuxRpt330_ != null) hash ^= TurnAuxRpt330.GetHashCode();
      if (headlightRpt218_ != null) hash ^= HeadlightRpt218.GetHashCode();
      if (hazardLightsCmd114_ != null) hash ^= HazardLightsCmd114.GetHashCode();
      if (dashControlsLeftRpt20C_ != null) hash ^= DashControlsLeftRpt20C.GetHashCode();
      if (headlightAuxRpt318_ != null) hash ^= HeadlightAuxRpt318.GetHashCode();
      if (dashControlsRightCmd110_ != null) hash ^= DashControlsRightCmd110.GetHashCode();
      if (wiperCmd134_ != null) hash ^= WiperCmd134.GetHashCode();
      if (wiperRpt234_ != null) hash ^= WiperRpt234.GetHashCode();
      if (turnRpt230_ != null) hash ^= TurnRpt230.GetHashCode();
      if (headlightCmd118_ != null) hash ^= HeadlightCmd118.GetHashCode();
      if (doorRpt417_ != null) hash ^= DoorRpt417.GetHashCode();
      if (componentRpt20_ != null) hash ^= ComponentRpt20.GetHashCode();
      if (wheelSpeedRpt407_ != null) hash ^= WheelSpeedRpt407.GetHashCode();
      if (steeringMotorRpt3406_ != null) hash ^= SteeringMotorRpt3406.GetHashCode();
      if (steeringMotorRpt2405_ != null) hash ^= SteeringMotorRpt2405.GetHashCode();
      if (steeringMotorRpt1404_ != null) hash ^= SteeringMotorRpt1404.GetHashCode();
      if (brakeMotorRpt3403_ != null) hash ^= BrakeMotorRpt3403.GetHashCode();
      if (brakeMotorRpt2402_ != null) hash ^= BrakeMotorRpt2402.GetHashCode();
      if (brakeMotorRpt1401_ != null) hash ^= BrakeMotorRpt1401.GetHashCode();
      if (wiperAuxRpt334_ != null) hash ^= WiperAuxRpt334.GetHashCode();
      if (shiftAuxRpt328_ != null) hash ^= ShiftAuxRpt328.GetHashCode();
      if (accelRpt200_ != null) hash ^= AccelRpt200.GetHashCode();
      if (brakeRpt204_ != null) hash ^= BrakeRpt204.GetHashCode();
      if (hornCmd11C_ != null) hash ^= HornCmd11C.GetHashCode();
      if (globalRpt10_ != null) hash ^= GlobalRpt10.GetHashCode();
      if (accelAuxRpt300_ != null) hash ^= AccelAuxRpt300.GetHashCode();
      if (cruiseControlButtonsRpt208_ != null) hash ^= CruiseControlButtonsRpt208.GetHashCode();
      if (vehicleSpeedRpt400_ != null) hash ^= VehicleSpeedRpt400.GetHashCode();
      if (brakeAuxRpt304_ != null) hash ^= BrakeAuxRpt304.GetHashCode();
      if (mediaControlsCmd120_ != null) hash ^= MediaControlsCmd120.GetHashCode();
      if (cruiseControlButtonsCmd108_ != null) hash ^= CruiseControlButtonsCmd108.GetHashCode();
      if (parkingBrakeCmd124_ != null) hash ^= ParkingBrakeCmd124.GetHashCode();
      if (hornRpt21C_ != null) hash ^= HornRpt21C.GetHashCode();
      if (shiftRpt228_ != null) hash ^= ShiftRpt228.GetHashCode();
      if (shiftCmd128_ != null) hash ^= ShiftCmd128.GetHashCode();
      if (accelCmd100_ != null) hash ^= AccelCmd100.GetHashCode();
      if (parkingBrakeRpt224_ != null) hash ^= ParkingBrakeRpt224.GetHashCode();
      if (brakeCmd104_ != null) hash ^= BrakeCmd104.GetHashCode();
      if (mediaControlsRpt220_ != null) hash ^= MediaControlsRpt220.GetHashCode();
      if (steeringAuxRpt32C_ != null) hash ^= SteeringAuxRpt32C.GetHashCode();
      if (latLonHeadingRpt40E_ != null) hash ^= LatLonHeadingRpt40E.GetHashCode();
      if (yawRateRpt40D_ != null) hash ^= YawRateRpt40D.GetHashCode();
      if (dateTimeRpt40F_ != null) hash ^= DateTimeRpt40F.GetHashCode();
      if (vinRpt414_ != null) hash ^= VinRpt414.GetHashCode();
      if (occupancyRpt415_ != null) hash ^= OccupancyRpt415.GetHashCode();
      if (interiorLightsRpt416_ != null) hash ^= InteriorLightsRpt416.GetHashCode();
      if (turnCmd130_ != null) hash ^= TurnCmd130.GetHashCode();
      if (detectedObjectRpt411_ != null) hash ^= DetectedObjectRpt411.GetHashCode();
      if (vehSpecificRpt1412_ != null) hash ^= VehSpecificRpt1412.GetHashCode();
      if (vehDynamicsRpt413_ != null) hash ^= VehDynamicsRpt413.GetHashCode();
      if (rearLightsRpt418_ != null) hash ^= RearLightsRpt418.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hazardLightsRpt214_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HazardLightsRpt214);
      }
      if (steeringCmd12C_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SteeringCmd12C);
      }
      if (dashControlsRightRpt210_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DashControlsRightRpt210);
      }
      if (dashControlsLeftCmd10C_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DashControlsLeftCmd10C);
      }
      if (steeringRpt22C_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SteeringRpt22C);
      }
      if (turnAuxRpt330_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TurnAuxRpt330);
      }
      if (headlightRpt218_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HeadlightRpt218);
      }
      if (hazardLightsCmd114_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HazardLightsCmd114);
      }
      if (dashControlsLeftRpt20C_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DashControlsLeftRpt20C);
      }
      if (headlightAuxRpt318_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(HeadlightAuxRpt318);
      }
      if (dashControlsRightCmd110_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DashControlsRightCmd110);
      }
      if (wiperCmd134_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(WiperCmd134);
      }
      if (wiperRpt234_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(WiperRpt234);
      }
      if (turnRpt230_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TurnRpt230);
      }
      if (headlightCmd118_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(HeadlightCmd118);
      }
      if (doorRpt417_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(DoorRpt417);
      }
      if (componentRpt20_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ComponentRpt20);
      }
      if (wheelSpeedRpt407_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(WheelSpeedRpt407);
      }
      if (steeringMotorRpt3406_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SteeringMotorRpt3406);
      }
      if (steeringMotorRpt2405_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SteeringMotorRpt2405);
      }
      if (steeringMotorRpt1404_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SteeringMotorRpt1404);
      }
      if (brakeMotorRpt3403_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(BrakeMotorRpt3403);
      }
      if (brakeMotorRpt2402_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(BrakeMotorRpt2402);
      }
      if (brakeMotorRpt1401_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(BrakeMotorRpt1401);
      }
      if (wiperAuxRpt334_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(WiperAuxRpt334);
      }
      if (shiftAuxRpt328_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ShiftAuxRpt328);
      }
      if (accelRpt200_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(AccelRpt200);
      }
      if (brakeRpt204_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(BrakeRpt204);
      }
      if (hornCmd11C_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(HornCmd11C);
      }
      if (globalRpt10_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GlobalRpt10);
      }
      if (accelAuxRpt300_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(AccelAuxRpt300);
      }
      if (cruiseControlButtonsRpt208_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(CruiseControlButtonsRpt208);
      }
      if (vehicleSpeedRpt400_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(VehicleSpeedRpt400);
      }
      if (brakeAuxRpt304_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(BrakeAuxRpt304);
      }
      if (mediaControlsCmd120_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(MediaControlsCmd120);
      }
      if (cruiseControlButtonsCmd108_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(CruiseControlButtonsCmd108);
      }
      if (parkingBrakeCmd124_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(ParkingBrakeCmd124);
      }
      if (hornRpt21C_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(HornRpt21C);
      }
      if (shiftRpt228_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(ShiftRpt228);
      }
      if (shiftCmd128_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(ShiftCmd128);
      }
      if (accelCmd100_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(AccelCmd100);
      }
      if (parkingBrakeRpt224_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(ParkingBrakeRpt224);
      }
      if (brakeCmd104_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(BrakeCmd104);
      }
      if (mediaControlsRpt220_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(MediaControlsRpt220);
      }
      if (steeringAuxRpt32C_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(SteeringAuxRpt32C);
      }
      if (latLonHeadingRpt40E_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(LatLonHeadingRpt40E);
      }
      if (yawRateRpt40D_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(YawRateRpt40D);
      }
      if (dateTimeRpt40F_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(DateTimeRpt40F);
      }
      if (vinRpt414_ != null) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(VinRpt414);
      }
      if (occupancyRpt415_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(OccupancyRpt415);
      }
      if (interiorLightsRpt416_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(InteriorLightsRpt416);
      }
      if (turnCmd130_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(TurnCmd130);
      }
      if (detectedObjectRpt411_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(DetectedObjectRpt411);
      }
      if (vehSpecificRpt1412_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(VehSpecificRpt1412);
      }
      if (vehDynamicsRpt413_ != null) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(VehDynamicsRpt413);
      }
      if (rearLightsRpt418_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(RearLightsRpt418);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hazardLightsRpt214_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HazardLightsRpt214);
      }
      if (steeringCmd12C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteeringCmd12C);
      }
      if (dashControlsRightRpt210_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DashControlsRightRpt210);
      }
      if (dashControlsLeftCmd10C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DashControlsLeftCmd10C);
      }
      if (steeringRpt22C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteeringRpt22C);
      }
      if (turnAuxRpt330_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnAuxRpt330);
      }
      if (headlightRpt218_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeadlightRpt218);
      }
      if (hazardLightsCmd114_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HazardLightsCmd114);
      }
      if (dashControlsLeftRpt20C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DashControlsLeftRpt20C);
      }
      if (headlightAuxRpt318_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeadlightAuxRpt318);
      }
      if (dashControlsRightCmd110_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DashControlsRightCmd110);
      }
      if (wiperCmd134_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WiperCmd134);
      }
      if (wiperRpt234_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WiperRpt234);
      }
      if (turnRpt230_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnRpt230);
      }
      if (headlightCmd118_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeadlightCmd118);
      }
      if (doorRpt417_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DoorRpt417);
      }
      if (componentRpt20_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ComponentRpt20);
      }
      if (wheelSpeedRpt407_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WheelSpeedRpt407);
      }
      if (steeringMotorRpt3406_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SteeringMotorRpt3406);
      }
      if (steeringMotorRpt2405_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SteeringMotorRpt2405);
      }
      if (steeringMotorRpt1404_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SteeringMotorRpt1404);
      }
      if (brakeMotorRpt3403_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeMotorRpt3403);
      }
      if (brakeMotorRpt2402_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeMotorRpt2402);
      }
      if (brakeMotorRpt1401_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeMotorRpt1401);
      }
      if (wiperAuxRpt334_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WiperAuxRpt334);
      }
      if (shiftAuxRpt328_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShiftAuxRpt328);
      }
      if (accelRpt200_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccelRpt200);
      }
      if (brakeRpt204_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeRpt204);
      }
      if (hornCmd11C_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HornCmd11C);
      }
      if (globalRpt10_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GlobalRpt10);
      }
      if (accelAuxRpt300_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccelAuxRpt300);
      }
      if (cruiseControlButtonsRpt208_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CruiseControlButtonsRpt208);
      }
      if (vehicleSpeedRpt400_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VehicleSpeedRpt400);
      }
      if (brakeAuxRpt304_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeAuxRpt304);
      }
      if (mediaControlsCmd120_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MediaControlsCmd120);
      }
      if (cruiseControlButtonsCmd108_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CruiseControlButtonsCmd108);
      }
      if (parkingBrakeCmd124_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParkingBrakeCmd124);
      }
      if (hornRpt21C_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HornRpt21C);
      }
      if (shiftRpt228_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShiftRpt228);
      }
      if (shiftCmd128_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShiftCmd128);
      }
      if (accelCmd100_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccelCmd100);
      }
      if (parkingBrakeRpt224_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParkingBrakeRpt224);
      }
      if (brakeCmd104_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrakeCmd104);
      }
      if (mediaControlsRpt220_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MediaControlsRpt220);
      }
      if (steeringAuxRpt32C_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SteeringAuxRpt32C);
      }
      if (latLonHeadingRpt40E_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LatLonHeadingRpt40E);
      }
      if (yawRateRpt40D_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(YawRateRpt40D);
      }
      if (dateTimeRpt40F_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DateTimeRpt40F);
      }
      if (vinRpt414_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VinRpt414);
      }
      if (occupancyRpt415_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OccupancyRpt415);
      }
      if (interiorLightsRpt416_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteriorLightsRpt416);
      }
      if (turnCmd130_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurnCmd130);
      }
      if (detectedObjectRpt411_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DetectedObjectRpt411);
      }
      if (vehSpecificRpt1412_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VehSpecificRpt1412);
      }
      if (vehDynamicsRpt413_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VehDynamicsRpt413);
      }
      if (rearLightsRpt418_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RearLightsRpt418);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lexus other) {
      if (other == null) {
        return;
      }
      if (other.hazardLightsRpt214_ != null) {
        if (hazardLightsRpt214_ == null) {
          hazardLightsRpt214_ = new global::Apollo.Canbus.Hazard_lights_rpt_214();
        }
        HazardLightsRpt214.MergeFrom(other.HazardLightsRpt214);
      }
      if (other.steeringCmd12C_ != null) {
        if (steeringCmd12C_ == null) {
          steeringCmd12C_ = new global::Apollo.Canbus.Steering_cmd_12c();
        }
        SteeringCmd12C.MergeFrom(other.SteeringCmd12C);
      }
      if (other.dashControlsRightRpt210_ != null) {
        if (dashControlsRightRpt210_ == null) {
          dashControlsRightRpt210_ = new global::Apollo.Canbus.Dash_controls_right_rpt_210();
        }
        DashControlsRightRpt210.MergeFrom(other.DashControlsRightRpt210);
      }
      if (other.dashControlsLeftCmd10C_ != null) {
        if (dashControlsLeftCmd10C_ == null) {
          dashControlsLeftCmd10C_ = new global::Apollo.Canbus.Dash_controls_left_cmd_10c();
        }
        DashControlsLeftCmd10C.MergeFrom(other.DashControlsLeftCmd10C);
      }
      if (other.steeringRpt22C_ != null) {
        if (steeringRpt22C_ == null) {
          steeringRpt22C_ = new global::Apollo.Canbus.Steering_rpt_22c();
        }
        SteeringRpt22C.MergeFrom(other.SteeringRpt22C);
      }
      if (other.turnAuxRpt330_ != null) {
        if (turnAuxRpt330_ == null) {
          turnAuxRpt330_ = new global::Apollo.Canbus.Turn_aux_rpt_330();
        }
        TurnAuxRpt330.MergeFrom(other.TurnAuxRpt330);
      }
      if (other.headlightRpt218_ != null) {
        if (headlightRpt218_ == null) {
          headlightRpt218_ = new global::Apollo.Canbus.Headlight_rpt_218();
        }
        HeadlightRpt218.MergeFrom(other.HeadlightRpt218);
      }
      if (other.hazardLightsCmd114_ != null) {
        if (hazardLightsCmd114_ == null) {
          hazardLightsCmd114_ = new global::Apollo.Canbus.Hazard_lights_cmd_114();
        }
        HazardLightsCmd114.MergeFrom(other.HazardLightsCmd114);
      }
      if (other.dashControlsLeftRpt20C_ != null) {
        if (dashControlsLeftRpt20C_ == null) {
          dashControlsLeftRpt20C_ = new global::Apollo.Canbus.Dash_controls_left_rpt_20c();
        }
        DashControlsLeftRpt20C.MergeFrom(other.DashControlsLeftRpt20C);
      }
      if (other.headlightAuxRpt318_ != null) {
        if (headlightAuxRpt318_ == null) {
          headlightAuxRpt318_ = new global::Apollo.Canbus.Headlight_aux_rpt_318();
        }
        HeadlightAuxRpt318.MergeFrom(other.HeadlightAuxRpt318);
      }
      if (other.dashControlsRightCmd110_ != null) {
        if (dashControlsRightCmd110_ == null) {
          dashControlsRightCmd110_ = new global::Apollo.Canbus.Dash_controls_right_cmd_110();
        }
        DashControlsRightCmd110.MergeFrom(other.DashControlsRightCmd110);
      }
      if (other.wiperCmd134_ != null) {
        if (wiperCmd134_ == null) {
          wiperCmd134_ = new global::Apollo.Canbus.Wiper_cmd_134();
        }
        WiperCmd134.MergeFrom(other.WiperCmd134);
      }
      if (other.wiperRpt234_ != null) {
        if (wiperRpt234_ == null) {
          wiperRpt234_ = new global::Apollo.Canbus.Wiper_rpt_234();
        }
        WiperRpt234.MergeFrom(other.WiperRpt234);
      }
      if (other.turnRpt230_ != null) {
        if (turnRpt230_ == null) {
          turnRpt230_ = new global::Apollo.Canbus.Turn_rpt_230();
        }
        TurnRpt230.MergeFrom(other.TurnRpt230);
      }
      if (other.headlightCmd118_ != null) {
        if (headlightCmd118_ == null) {
          headlightCmd118_ = new global::Apollo.Canbus.Headlight_cmd_118();
        }
        HeadlightCmd118.MergeFrom(other.HeadlightCmd118);
      }
      if (other.doorRpt417_ != null) {
        if (doorRpt417_ == null) {
          doorRpt417_ = new global::Apollo.Canbus.Door_rpt_417();
        }
        DoorRpt417.MergeFrom(other.DoorRpt417);
      }
      if (other.componentRpt20_ != null) {
        if (componentRpt20_ == null) {
          componentRpt20_ = new global::Apollo.Canbus.Component_rpt_20();
        }
        ComponentRpt20.MergeFrom(other.ComponentRpt20);
      }
      if (other.wheelSpeedRpt407_ != null) {
        if (wheelSpeedRpt407_ == null) {
          wheelSpeedRpt407_ = new global::Apollo.Canbus.Wheel_speed_rpt_407();
        }
        WheelSpeedRpt407.MergeFrom(other.WheelSpeedRpt407);
      }
      if (other.steeringMotorRpt3406_ != null) {
        if (steeringMotorRpt3406_ == null) {
          steeringMotorRpt3406_ = new global::Apollo.Canbus.Steering_motor_rpt_3_406();
        }
        SteeringMotorRpt3406.MergeFrom(other.SteeringMotorRpt3406);
      }
      if (other.steeringMotorRpt2405_ != null) {
        if (steeringMotorRpt2405_ == null) {
          steeringMotorRpt2405_ = new global::Apollo.Canbus.Steering_motor_rpt_2_405();
        }
        SteeringMotorRpt2405.MergeFrom(other.SteeringMotorRpt2405);
      }
      if (other.steeringMotorRpt1404_ != null) {
        if (steeringMotorRpt1404_ == null) {
          steeringMotorRpt1404_ = new global::Apollo.Canbus.Steering_motor_rpt_1_404();
        }
        SteeringMotorRpt1404.MergeFrom(other.SteeringMotorRpt1404);
      }
      if (other.brakeMotorRpt3403_ != null) {
        if (brakeMotorRpt3403_ == null) {
          brakeMotorRpt3403_ = new global::Apollo.Canbus.Brake_motor_rpt_3_403();
        }
        BrakeMotorRpt3403.MergeFrom(other.BrakeMotorRpt3403);
      }
      if (other.brakeMotorRpt2402_ != null) {
        if (brakeMotorRpt2402_ == null) {
          brakeMotorRpt2402_ = new global::Apollo.Canbus.Brake_motor_rpt_2_402();
        }
        BrakeMotorRpt2402.MergeFrom(other.BrakeMotorRpt2402);
      }
      if (other.brakeMotorRpt1401_ != null) {
        if (brakeMotorRpt1401_ == null) {
          brakeMotorRpt1401_ = new global::Apollo.Canbus.Brake_motor_rpt_1_401();
        }
        BrakeMotorRpt1401.MergeFrom(other.BrakeMotorRpt1401);
      }
      if (other.wiperAuxRpt334_ != null) {
        if (wiperAuxRpt334_ == null) {
          wiperAuxRpt334_ = new global::Apollo.Canbus.Wiper_aux_rpt_334();
        }
        WiperAuxRpt334.MergeFrom(other.WiperAuxRpt334);
      }
      if (other.shiftAuxRpt328_ != null) {
        if (shiftAuxRpt328_ == null) {
          shiftAuxRpt328_ = new global::Apollo.Canbus.Shift_aux_rpt_328();
        }
        ShiftAuxRpt328.MergeFrom(other.ShiftAuxRpt328);
      }
      if (other.accelRpt200_ != null) {
        if (accelRpt200_ == null) {
          accelRpt200_ = new global::Apollo.Canbus.Accel_rpt_200();
        }
        AccelRpt200.MergeFrom(other.AccelRpt200);
      }
      if (other.brakeRpt204_ != null) {
        if (brakeRpt204_ == null) {
          brakeRpt204_ = new global::Apollo.Canbus.Brake_rpt_204();
        }
        BrakeRpt204.MergeFrom(other.BrakeRpt204);
      }
      if (other.hornCmd11C_ != null) {
        if (hornCmd11C_ == null) {
          hornCmd11C_ = new global::Apollo.Canbus.Horn_cmd_11c();
        }
        HornCmd11C.MergeFrom(other.HornCmd11C);
      }
      if (other.globalRpt10_ != null) {
        if (globalRpt10_ == null) {
          globalRpt10_ = new global::Apollo.Canbus.Global_rpt_10();
        }
        GlobalRpt10.MergeFrom(other.GlobalRpt10);
      }
      if (other.accelAuxRpt300_ != null) {
        if (accelAuxRpt300_ == null) {
          accelAuxRpt300_ = new global::Apollo.Canbus.Accel_aux_rpt_300();
        }
        AccelAuxRpt300.MergeFrom(other.AccelAuxRpt300);
      }
      if (other.cruiseControlButtonsRpt208_ != null) {
        if (cruiseControlButtonsRpt208_ == null) {
          cruiseControlButtonsRpt208_ = new global::Apollo.Canbus.Cruise_control_buttons_rpt_208();
        }
        CruiseControlButtonsRpt208.MergeFrom(other.CruiseControlButtonsRpt208);
      }
      if (other.vehicleSpeedRpt400_ != null) {
        if (vehicleSpeedRpt400_ == null) {
          vehicleSpeedRpt400_ = new global::Apollo.Canbus.Vehicle_speed_rpt_400();
        }
        VehicleSpeedRpt400.MergeFrom(other.VehicleSpeedRpt400);
      }
      if (other.brakeAuxRpt304_ != null) {
        if (brakeAuxRpt304_ == null) {
          brakeAuxRpt304_ = new global::Apollo.Canbus.Brake_aux_rpt_304();
        }
        BrakeAuxRpt304.MergeFrom(other.BrakeAuxRpt304);
      }
      if (other.mediaControlsCmd120_ != null) {
        if (mediaControlsCmd120_ == null) {
          mediaControlsCmd120_ = new global::Apollo.Canbus.Media_controls_cmd_120();
        }
        MediaControlsCmd120.MergeFrom(other.MediaControlsCmd120);
      }
      if (other.cruiseControlButtonsCmd108_ != null) {
        if (cruiseControlButtonsCmd108_ == null) {
          cruiseControlButtonsCmd108_ = new global::Apollo.Canbus.Cruise_control_buttons_cmd_108();
        }
        CruiseControlButtonsCmd108.MergeFrom(other.CruiseControlButtonsCmd108);
      }
      if (other.parkingBrakeCmd124_ != null) {
        if (parkingBrakeCmd124_ == null) {
          parkingBrakeCmd124_ = new global::Apollo.Canbus.Parking_brake_cmd_124();
        }
        ParkingBrakeCmd124.MergeFrom(other.ParkingBrakeCmd124);
      }
      if (other.hornRpt21C_ != null) {
        if (hornRpt21C_ == null) {
          hornRpt21C_ = new global::Apollo.Canbus.Horn_rpt_21c();
        }
        HornRpt21C.MergeFrom(other.HornRpt21C);
      }
      if (other.shiftRpt228_ != null) {
        if (shiftRpt228_ == null) {
          shiftRpt228_ = new global::Apollo.Canbus.Shift_rpt_228();
        }
        ShiftRpt228.MergeFrom(other.ShiftRpt228);
      }
      if (other.shiftCmd128_ != null) {
        if (shiftCmd128_ == null) {
          shiftCmd128_ = new global::Apollo.Canbus.Shift_cmd_128();
        }
        ShiftCmd128.MergeFrom(other.ShiftCmd128);
      }
      if (other.accelCmd100_ != null) {
        if (accelCmd100_ == null) {
          accelCmd100_ = new global::Apollo.Canbus.Accel_cmd_100();
        }
        AccelCmd100.MergeFrom(other.AccelCmd100);
      }
      if (other.parkingBrakeRpt224_ != null) {
        if (parkingBrakeRpt224_ == null) {
          parkingBrakeRpt224_ = new global::Apollo.Canbus.Parking_brake_rpt_224();
        }
        ParkingBrakeRpt224.MergeFrom(other.ParkingBrakeRpt224);
      }
      if (other.brakeCmd104_ != null) {
        if (brakeCmd104_ == null) {
          brakeCmd104_ = new global::Apollo.Canbus.Brake_cmd_104();
        }
        BrakeCmd104.MergeFrom(other.BrakeCmd104);
      }
      if (other.mediaControlsRpt220_ != null) {
        if (mediaControlsRpt220_ == null) {
          mediaControlsRpt220_ = new global::Apollo.Canbus.Media_controls_rpt_220();
        }
        MediaControlsRpt220.MergeFrom(other.MediaControlsRpt220);
      }
      if (other.steeringAuxRpt32C_ != null) {
        if (steeringAuxRpt32C_ == null) {
          steeringAuxRpt32C_ = new global::Apollo.Canbus.Steering_aux_rpt_32c();
        }
        SteeringAuxRpt32C.MergeFrom(other.SteeringAuxRpt32C);
      }
      if (other.latLonHeadingRpt40E_ != null) {
        if (latLonHeadingRpt40E_ == null) {
          latLonHeadingRpt40E_ = new global::Apollo.Canbus.Lat_lon_heading_rpt_40e();
        }
        LatLonHeadingRpt40E.MergeFrom(other.LatLonHeadingRpt40E);
      }
      if (other.yawRateRpt40D_ != null) {
        if (yawRateRpt40D_ == null) {
          yawRateRpt40D_ = new global::Apollo.Canbus.Yaw_rate_rpt_40d();
        }
        YawRateRpt40D.MergeFrom(other.YawRateRpt40D);
      }
      if (other.dateTimeRpt40F_ != null) {
        if (dateTimeRpt40F_ == null) {
          dateTimeRpt40F_ = new global::Apollo.Canbus.Date_time_rpt_40f();
        }
        DateTimeRpt40F.MergeFrom(other.DateTimeRpt40F);
      }
      if (other.vinRpt414_ != null) {
        if (vinRpt414_ == null) {
          vinRpt414_ = new global::Apollo.Canbus.Vin_rpt_414();
        }
        VinRpt414.MergeFrom(other.VinRpt414);
      }
      if (other.occupancyRpt415_ != null) {
        if (occupancyRpt415_ == null) {
          occupancyRpt415_ = new global::Apollo.Canbus.Occupancy_rpt_415();
        }
        OccupancyRpt415.MergeFrom(other.OccupancyRpt415);
      }
      if (other.interiorLightsRpt416_ != null) {
        if (interiorLightsRpt416_ == null) {
          interiorLightsRpt416_ = new global::Apollo.Canbus.Interior_lights_rpt_416();
        }
        InteriorLightsRpt416.MergeFrom(other.InteriorLightsRpt416);
      }
      if (other.turnCmd130_ != null) {
        if (turnCmd130_ == null) {
          turnCmd130_ = new global::Apollo.Canbus.Turn_cmd_130();
        }
        TurnCmd130.MergeFrom(other.TurnCmd130);
      }
      if (other.detectedObjectRpt411_ != null) {
        if (detectedObjectRpt411_ == null) {
          detectedObjectRpt411_ = new global::Apollo.Canbus.Detected_object_rpt_411();
        }
        DetectedObjectRpt411.MergeFrom(other.DetectedObjectRpt411);
      }
      if (other.vehSpecificRpt1412_ != null) {
        if (vehSpecificRpt1412_ == null) {
          vehSpecificRpt1412_ = new global::Apollo.Canbus.Veh_specific_rpt_1_412();
        }
        VehSpecificRpt1412.MergeFrom(other.VehSpecificRpt1412);
      }
      if (other.vehDynamicsRpt413_ != null) {
        if (vehDynamicsRpt413_ == null) {
          vehDynamicsRpt413_ = new global::Apollo.Canbus.Veh_dynamics_rpt_413();
        }
        VehDynamicsRpt413.MergeFrom(other.VehDynamicsRpt413);
      }
      if (other.rearLightsRpt418_ != null) {
        if (rearLightsRpt418_ == null) {
          rearLightsRpt418_ = new global::Apollo.Canbus.Rear_lights_rpt_418();
        }
        RearLightsRpt418.MergeFrom(other.RearLightsRpt418);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hazardLightsRpt214_ == null) {
              hazardLightsRpt214_ = new global::Apollo.Canbus.Hazard_lights_rpt_214();
            }
            input.ReadMessage(hazardLightsRpt214_);
            break;
          }
          case 18: {
            if (steeringCmd12C_ == null) {
              steeringCmd12C_ = new global::Apollo.Canbus.Steering_cmd_12c();
            }
            input.ReadMessage(steeringCmd12C_);
            break;
          }
          case 26: {
            if (dashControlsRightRpt210_ == null) {
              dashControlsRightRpt210_ = new global::Apollo.Canbus.Dash_controls_right_rpt_210();
            }
            input.ReadMessage(dashControlsRightRpt210_);
            break;
          }
          case 34: {
            if (dashControlsLeftCmd10C_ == null) {
              dashControlsLeftCmd10C_ = new global::Apollo.Canbus.Dash_controls_left_cmd_10c();
            }
            input.ReadMessage(dashControlsLeftCmd10C_);
            break;
          }
          case 42: {
            if (steeringRpt22C_ == null) {
              steeringRpt22C_ = new global::Apollo.Canbus.Steering_rpt_22c();
            }
            input.ReadMessage(steeringRpt22C_);
            break;
          }
          case 50: {
            if (turnAuxRpt330_ == null) {
              turnAuxRpt330_ = new global::Apollo.Canbus.Turn_aux_rpt_330();
            }
            input.ReadMessage(turnAuxRpt330_);
            break;
          }
          case 58: {
            if (headlightRpt218_ == null) {
              headlightRpt218_ = new global::Apollo.Canbus.Headlight_rpt_218();
            }
            input.ReadMessage(headlightRpt218_);
            break;
          }
          case 66: {
            if (hazardLightsCmd114_ == null) {
              hazardLightsCmd114_ = new global::Apollo.Canbus.Hazard_lights_cmd_114();
            }
            input.ReadMessage(hazardLightsCmd114_);
            break;
          }
          case 74: {
            if (dashControlsLeftRpt20C_ == null) {
              dashControlsLeftRpt20C_ = new global::Apollo.Canbus.Dash_controls_left_rpt_20c();
            }
            input.ReadMessage(dashControlsLeftRpt20C_);
            break;
          }
          case 82: {
            if (headlightAuxRpt318_ == null) {
              headlightAuxRpt318_ = new global::Apollo.Canbus.Headlight_aux_rpt_318();
            }
            input.ReadMessage(headlightAuxRpt318_);
            break;
          }
          case 90: {
            if (dashControlsRightCmd110_ == null) {
              dashControlsRightCmd110_ = new global::Apollo.Canbus.Dash_controls_right_cmd_110();
            }
            input.ReadMessage(dashControlsRightCmd110_);
            break;
          }
          case 98: {
            if (wiperCmd134_ == null) {
              wiperCmd134_ = new global::Apollo.Canbus.Wiper_cmd_134();
            }
            input.ReadMessage(wiperCmd134_);
            break;
          }
          case 106: {
            if (wiperRpt234_ == null) {
              wiperRpt234_ = new global::Apollo.Canbus.Wiper_rpt_234();
            }
            input.ReadMessage(wiperRpt234_);
            break;
          }
          case 114: {
            if (turnRpt230_ == null) {
              turnRpt230_ = new global::Apollo.Canbus.Turn_rpt_230();
            }
            input.ReadMessage(turnRpt230_);
            break;
          }
          case 122: {
            if (headlightCmd118_ == null) {
              headlightCmd118_ = new global::Apollo.Canbus.Headlight_cmd_118();
            }
            input.ReadMessage(headlightCmd118_);
            break;
          }
          case 130: {
            if (doorRpt417_ == null) {
              doorRpt417_ = new global::Apollo.Canbus.Door_rpt_417();
            }
            input.ReadMessage(doorRpt417_);
            break;
          }
          case 138: {
            if (componentRpt20_ == null) {
              componentRpt20_ = new global::Apollo.Canbus.Component_rpt_20();
            }
            input.ReadMessage(componentRpt20_);
            break;
          }
          case 146: {
            if (wheelSpeedRpt407_ == null) {
              wheelSpeedRpt407_ = new global::Apollo.Canbus.Wheel_speed_rpt_407();
            }
            input.ReadMessage(wheelSpeedRpt407_);
            break;
          }
          case 154: {
            if (steeringMotorRpt3406_ == null) {
              steeringMotorRpt3406_ = new global::Apollo.Canbus.Steering_motor_rpt_3_406();
            }
            input.ReadMessage(steeringMotorRpt3406_);
            break;
          }
          case 162: {
            if (steeringMotorRpt2405_ == null) {
              steeringMotorRpt2405_ = new global::Apollo.Canbus.Steering_motor_rpt_2_405();
            }
            input.ReadMessage(steeringMotorRpt2405_);
            break;
          }
          case 170: {
            if (steeringMotorRpt1404_ == null) {
              steeringMotorRpt1404_ = new global::Apollo.Canbus.Steering_motor_rpt_1_404();
            }
            input.ReadMessage(steeringMotorRpt1404_);
            break;
          }
          case 178: {
            if (brakeMotorRpt3403_ == null) {
              brakeMotorRpt3403_ = new global::Apollo.Canbus.Brake_motor_rpt_3_403();
            }
            input.ReadMessage(brakeMotorRpt3403_);
            break;
          }
          case 186: {
            if (brakeMotorRpt2402_ == null) {
              brakeMotorRpt2402_ = new global::Apollo.Canbus.Brake_motor_rpt_2_402();
            }
            input.ReadMessage(brakeMotorRpt2402_);
            break;
          }
          case 194: {
            if (brakeMotorRpt1401_ == null) {
              brakeMotorRpt1401_ = new global::Apollo.Canbus.Brake_motor_rpt_1_401();
            }
            input.ReadMessage(brakeMotorRpt1401_);
            break;
          }
          case 202: {
            if (wiperAuxRpt334_ == null) {
              wiperAuxRpt334_ = new global::Apollo.Canbus.Wiper_aux_rpt_334();
            }
            input.ReadMessage(wiperAuxRpt334_);
            break;
          }
          case 210: {
            if (shiftAuxRpt328_ == null) {
              shiftAuxRpt328_ = new global::Apollo.Canbus.Shift_aux_rpt_328();
            }
            input.ReadMessage(shiftAuxRpt328_);
            break;
          }
          case 218: {
            if (accelRpt200_ == null) {
              accelRpt200_ = new global::Apollo.Canbus.Accel_rpt_200();
            }
            input.ReadMessage(accelRpt200_);
            break;
          }
          case 226: {
            if (brakeRpt204_ == null) {
              brakeRpt204_ = new global::Apollo.Canbus.Brake_rpt_204();
            }
            input.ReadMessage(brakeRpt204_);
            break;
          }
          case 234: {
            if (hornCmd11C_ == null) {
              hornCmd11C_ = new global::Apollo.Canbus.Horn_cmd_11c();
            }
            input.ReadMessage(hornCmd11C_);
            break;
          }
          case 242: {
            if (globalRpt10_ == null) {
              globalRpt10_ = new global::Apollo.Canbus.Global_rpt_10();
            }
            input.ReadMessage(globalRpt10_);
            break;
          }
          case 250: {
            if (accelAuxRpt300_ == null) {
              accelAuxRpt300_ = new global::Apollo.Canbus.Accel_aux_rpt_300();
            }
            input.ReadMessage(accelAuxRpt300_);
            break;
          }
          case 258: {
            if (cruiseControlButtonsRpt208_ == null) {
              cruiseControlButtonsRpt208_ = new global::Apollo.Canbus.Cruise_control_buttons_rpt_208();
            }
            input.ReadMessage(cruiseControlButtonsRpt208_);
            break;
          }
          case 266: {
            if (vehicleSpeedRpt400_ == null) {
              vehicleSpeedRpt400_ = new global::Apollo.Canbus.Vehicle_speed_rpt_400();
            }
            input.ReadMessage(vehicleSpeedRpt400_);
            break;
          }
          case 274: {
            if (brakeAuxRpt304_ == null) {
              brakeAuxRpt304_ = new global::Apollo.Canbus.Brake_aux_rpt_304();
            }
            input.ReadMessage(brakeAuxRpt304_);
            break;
          }
          case 282: {
            if (mediaControlsCmd120_ == null) {
              mediaControlsCmd120_ = new global::Apollo.Canbus.Media_controls_cmd_120();
            }
            input.ReadMessage(mediaControlsCmd120_);
            break;
          }
          case 290: {
            if (cruiseControlButtonsCmd108_ == null) {
              cruiseControlButtonsCmd108_ = new global::Apollo.Canbus.Cruise_control_buttons_cmd_108();
            }
            input.ReadMessage(cruiseControlButtonsCmd108_);
            break;
          }
          case 298: {
            if (parkingBrakeCmd124_ == null) {
              parkingBrakeCmd124_ = new global::Apollo.Canbus.Parking_brake_cmd_124();
            }
            input.ReadMessage(parkingBrakeCmd124_);
            break;
          }
          case 306: {
            if (hornRpt21C_ == null) {
              hornRpt21C_ = new global::Apollo.Canbus.Horn_rpt_21c();
            }
            input.ReadMessage(hornRpt21C_);
            break;
          }
          case 314: {
            if (shiftRpt228_ == null) {
              shiftRpt228_ = new global::Apollo.Canbus.Shift_rpt_228();
            }
            input.ReadMessage(shiftRpt228_);
            break;
          }
          case 322: {
            if (shiftCmd128_ == null) {
              shiftCmd128_ = new global::Apollo.Canbus.Shift_cmd_128();
            }
            input.ReadMessage(shiftCmd128_);
            break;
          }
          case 330: {
            if (accelCmd100_ == null) {
              accelCmd100_ = new global::Apollo.Canbus.Accel_cmd_100();
            }
            input.ReadMessage(accelCmd100_);
            break;
          }
          case 338: {
            if (parkingBrakeRpt224_ == null) {
              parkingBrakeRpt224_ = new global::Apollo.Canbus.Parking_brake_rpt_224();
            }
            input.ReadMessage(parkingBrakeRpt224_);
            break;
          }
          case 346: {
            if (brakeCmd104_ == null) {
              brakeCmd104_ = new global::Apollo.Canbus.Brake_cmd_104();
            }
            input.ReadMessage(brakeCmd104_);
            break;
          }
          case 354: {
            if (mediaControlsRpt220_ == null) {
              mediaControlsRpt220_ = new global::Apollo.Canbus.Media_controls_rpt_220();
            }
            input.ReadMessage(mediaControlsRpt220_);
            break;
          }
          case 362: {
            if (steeringAuxRpt32C_ == null) {
              steeringAuxRpt32C_ = new global::Apollo.Canbus.Steering_aux_rpt_32c();
            }
            input.ReadMessage(steeringAuxRpt32C_);
            break;
          }
          case 370: {
            if (latLonHeadingRpt40E_ == null) {
              latLonHeadingRpt40E_ = new global::Apollo.Canbus.Lat_lon_heading_rpt_40e();
            }
            input.ReadMessage(latLonHeadingRpt40E_);
            break;
          }
          case 378: {
            if (yawRateRpt40D_ == null) {
              yawRateRpt40D_ = new global::Apollo.Canbus.Yaw_rate_rpt_40d();
            }
            input.ReadMessage(yawRateRpt40D_);
            break;
          }
          case 386: {
            if (dateTimeRpt40F_ == null) {
              dateTimeRpt40F_ = new global::Apollo.Canbus.Date_time_rpt_40f();
            }
            input.ReadMessage(dateTimeRpt40F_);
            break;
          }
          case 394: {
            if (vinRpt414_ == null) {
              vinRpt414_ = new global::Apollo.Canbus.Vin_rpt_414();
            }
            input.ReadMessage(vinRpt414_);
            break;
          }
          case 402: {
            if (occupancyRpt415_ == null) {
              occupancyRpt415_ = new global::Apollo.Canbus.Occupancy_rpt_415();
            }
            input.ReadMessage(occupancyRpt415_);
            break;
          }
          case 410: {
            if (interiorLightsRpt416_ == null) {
              interiorLightsRpt416_ = new global::Apollo.Canbus.Interior_lights_rpt_416();
            }
            input.ReadMessage(interiorLightsRpt416_);
            break;
          }
          case 418: {
            if (turnCmd130_ == null) {
              turnCmd130_ = new global::Apollo.Canbus.Turn_cmd_130();
            }
            input.ReadMessage(turnCmd130_);
            break;
          }
          case 426: {
            if (detectedObjectRpt411_ == null) {
              detectedObjectRpt411_ = new global::Apollo.Canbus.Detected_object_rpt_411();
            }
            input.ReadMessage(detectedObjectRpt411_);
            break;
          }
          case 434: {
            if (vehSpecificRpt1412_ == null) {
              vehSpecificRpt1412_ = new global::Apollo.Canbus.Veh_specific_rpt_1_412();
            }
            input.ReadMessage(vehSpecificRpt1412_);
            break;
          }
          case 442: {
            if (vehDynamicsRpt413_ == null) {
              vehDynamicsRpt413_ = new global::Apollo.Canbus.Veh_dynamics_rpt_413();
            }
            input.ReadMessage(vehDynamicsRpt413_);
            break;
          }
          case 450: {
            if (rearLightsRpt418_ == null) {
              rearLightsRpt418_ = new global::Apollo.Canbus.Rear_lights_rpt_418();
            }
            input.ReadMessage(rearLightsRpt418_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
