// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/measure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Localization {

  /// <summary>Holder for reflection information generated from modules/localization/proto/measure.proto</summary>
  public static partial class MeasureReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/localization/proto/measure.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MeasureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihtb2R1bGVzL2xvY2FsaXphdGlvbi9wcm90by9tZWFzdXJlLnByb3RvEhNh",
            "cG9sbG8ubG9jYWxpemF0aW9uGiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFk",
            "ZXIucHJvdG8aI21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21ldHJ5LnByb3Rv",
            "ItIECgxJbnRlZ01lYXN1cmUSJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNv",
            "bW1vbi5IZWFkZXISQwoMbWVhc3VyZV90eXBlGAIgASgOMi0uYXBvbGxvLmxv",
            "Y2FsaXphdGlvbi5JbnRlZ01lYXN1cmUuTWVhc3VyZVR5cGUSPwoKZnJhbWVf",
            "dHlwZRgDIAEoDjIrLmFwb2xsby5sb2NhbGl6YXRpb24uSW50ZWdNZWFzdXJl",
            "LkZyYW1lVHlwZRIoCghwb3NpdGlvbhgEIAEoCzIWLmFwb2xsby5jb21tb24u",
            "UG9pbnQzRBIoCgh2ZWxvY2l0eRgFIAEoCzIWLmFwb2xsby5jb21tb24uUG9p",
            "bnQzRBILCgN5YXcYBiABKAESDwoHem9uZV9pZBgHIAEoBRIYChBpc19oYXZl",
            "X3ZhcmlhbmNlGAggASgIEh4KFmlzX2duc3NfZG91YmxlX2FudGVubmEYCSAB",
            "KAgSFQoNbWVhc3VyZV9jb3ZhchgKIAMoASKaAQoLTWVhc3VyZVR5cGUSEQoN",
            "R05TU19QT1NfT05MWRAAEhAKDEdOU1NfUE9TX1ZFTBABEg8KC0dOU1NfUE9T",
            "X1hZEAISEQoNR05TU19WRUxfT05MWRADEhMKD1BPSU5UX0NMT1VEX1BPUxAE",
            "EhUKEU9ET01FVEVSX1ZFTF9PTkxZEAUSFgoSVkVISUNMRV9DT05TVFJBSU5U",
            "EAYiNQoJRnJhbWVUeXBlEgcKA0VOVRAAEggKBEVDRUYQARIHCgNVVE0QAhIM",
            "CghPRE9NRVRFUhADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.IntegMeasure), global::Apollo.Localization.IntegMeasure.Parser, new[]{ "Header", "MeasureType", "FrameType", "Position", "Velocity", "Yaw", "ZoneId", "IsHaveVariance", "IsGnssDoubleAntenna", "MeasureCovar" }, null, new[]{ typeof(global::Apollo.Localization.IntegMeasure.Types.MeasureType), typeof(global::Apollo.Localization.IntegMeasure.Types.FrameType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IntegMeasure : pb::IMessage<IntegMeasure> {
    private static readonly pb::MessageParser<IntegMeasure> _parser = new pb::MessageParser<IntegMeasure>(() => new IntegMeasure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntegMeasure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.MeasureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegMeasure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegMeasure(IntegMeasure other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      measureType_ = other.measureType_;
      frameType_ = other.frameType_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      yaw_ = other.yaw_;
      zoneId_ = other.zoneId_;
      isHaveVariance_ = other.isHaveVariance_;
      isGnssDoubleAntenna_ = other.isGnssDoubleAntenna_;
      measureCovar_ = other.measureCovar_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegMeasure Clone() {
      return new IntegMeasure(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "measure_type" field.</summary>
    public const int MeasureTypeFieldNumber = 2;
    private global::Apollo.Localization.IntegMeasure.Types.MeasureType measureType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.IntegMeasure.Types.MeasureType MeasureType {
      get { return measureType_; }
      set {
        measureType_ = value;
      }
    }

    /// <summary>Field number for the "frame_type" field.</summary>
    public const int FrameTypeFieldNumber = 3;
    private global::Apollo.Localization.IntegMeasure.Types.FrameType frameType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.IntegMeasure.Types.FrameType FrameType {
      get { return frameType_; }
      set {
        frameType_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Apollo.Common.Point3D position_;
    /// <summary>
    /// Position measurement from GNSS or Lidar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 5;
    private global::Apollo.Common.Point3D velocity_;
    /// <summary>
    /// Velocity measurement from GNSS or odometer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 6;
    private double yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 7;
    private int zoneId_;
    /// <summary>
    /// Utm zone id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "is_have_variance" field.</summary>
    public const int IsHaveVarianceFieldNumber = 8;
    private bool isHaveVariance_;
    /// <summary>
    /// Whether the measurement contains variance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHaveVariance {
      get { return isHaveVariance_; }
      set {
        isHaveVariance_ = value;
      }
    }

    /// <summary>Field number for the "is_gnss_double_antenna" field.</summary>
    public const int IsGnssDoubleAntennaFieldNumber = 9;
    private bool isGnssDoubleAntenna_;
    /// <summary>
    /// Whether use double antenna gnss to get yaw measurement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGnssDoubleAntenna {
      get { return isGnssDoubleAntenna_; }
      set {
        isGnssDoubleAntenna_ = value;
      }
    }

    /// <summary>Field number for the "measure_covar" field.</summary>
    public const int MeasureCovarFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_measureCovar_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> measureCovar_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Covariance matrix of measurement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> MeasureCovar {
      get { return measureCovar_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntegMeasure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntegMeasure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MeasureType != other.MeasureType) return false;
      if (FrameType != other.FrameType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (Yaw != other.Yaw) return false;
      if (ZoneId != other.ZoneId) return false;
      if (IsHaveVariance != other.IsHaveVariance) return false;
      if (IsGnssDoubleAntenna != other.IsGnssDoubleAntenna) return false;
      if(!measureCovar_.Equals(other.measureCovar_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MeasureType != 0) hash ^= MeasureType.GetHashCode();
      if (FrameType != 0) hash ^= FrameType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (Yaw != 0D) hash ^= Yaw.GetHashCode();
      if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
      if (IsHaveVariance != false) hash ^= IsHaveVariance.GetHashCode();
      if (IsGnssDoubleAntenna != false) hash ^= IsGnssDoubleAntenna.GetHashCode();
      hash ^= measureCovar_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MeasureType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MeasureType);
      }
      if (FrameType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FrameType);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Velocity);
      }
      if (Yaw != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Yaw);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ZoneId);
      }
      if (IsHaveVariance != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsHaveVariance);
      }
      if (IsGnssDoubleAntenna != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsGnssDoubleAntenna);
      }
      measureCovar_.WriteTo(output, _repeated_measureCovar_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MeasureType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MeasureType);
      }
      if (FrameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FrameType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (Yaw != 0D) {
        size += 1 + 8;
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      if (IsHaveVariance != false) {
        size += 1 + 1;
      }
      if (IsGnssDoubleAntenna != false) {
        size += 1 + 1;
      }
      size += measureCovar_.CalculateSize(_repeated_measureCovar_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntegMeasure other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MeasureType != 0) {
        MeasureType = other.MeasureType;
      }
      if (other.FrameType != 0) {
        FrameType = other.FrameType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Apollo.Common.Point3D();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.Yaw != 0D) {
        Yaw = other.Yaw;
      }
      if (other.ZoneId != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.IsHaveVariance != false) {
        IsHaveVariance = other.IsHaveVariance;
      }
      if (other.IsGnssDoubleAntenna != false) {
        IsGnssDoubleAntenna = other.IsGnssDoubleAntenna;
      }
      measureCovar_.Add(other.measureCovar_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            measureType_ = (global::Apollo.Localization.IntegMeasure.Types.MeasureType) input.ReadEnum();
            break;
          }
          case 24: {
            frameType_ = (global::Apollo.Localization.IntegMeasure.Types.FrameType) input.ReadEnum();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(position_);
            break;
          }
          case 42: {
            if (velocity_ == null) {
              velocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 49: {
            Yaw = input.ReadDouble();
            break;
          }
          case 56: {
            ZoneId = input.ReadInt32();
            break;
          }
          case 64: {
            IsHaveVariance = input.ReadBool();
            break;
          }
          case 72: {
            IsGnssDoubleAntenna = input.ReadBool();
            break;
          }
          case 82:
          case 81: {
            measureCovar_.AddEntriesFrom(input, _repeated_measureCovar_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the IntegMeasure message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MeasureType {
        /// <summary>
        /// the measure data only include gnss position
        /// </summary>
        [pbr::OriginalName("GNSS_POS_ONLY")] GnssPosOnly = 0,
        /// <summary>
        /// the measure data include gnss position and velocity
        /// </summary>
        [pbr::OriginalName("GNSS_POS_VEL")] GnssPosVel = 1,
        /// <summary>
        /// the measure data include gnss position
        /// </summary>
        [pbr::OriginalName("GNSS_POS_XY")] GnssPosXy = 2,
        /// <summary>
        /// the measure data only include gnss velocity
        /// </summary>
        [pbr::OriginalName("GNSS_VEL_ONLY")] GnssVelOnly = 3,
        /// <summary>
        /// the measure data only include point cloud position
        /// </summary>
        [pbr::OriginalName("POINT_CLOUD_POS")] PointCloudPos = 4,
        /// <summary>
        /// the measure data only include odometer velocity
        /// </summary>
        [pbr::OriginalName("ODOMETER_VEL_ONLY")] OdometerVelOnly = 5,
        /// <summary>
        /// trigger measure update using vehicle constraint
        /// </summary>
        [pbr::OriginalName("VEHICLE_CONSTRAINT")] VehicleConstraint = 6,
      }

      public enum FrameType {
        /// <summary>
        /// Position give the longitude and latitude unit:rad.
        /// </summary>
        [pbr::OriginalName("ENU")] Enu = 0,
        /// <summary>
        /// Position give x y and z from earth center.
        /// </summary>
        [pbr::OriginalName("ECEF")] Ecef = 1,
        /// <summary>
        /// Position give x y and z in utm frame.
        /// </summary>
        [pbr::OriginalName("UTM")] Utm = 2,
        [pbr::OriginalName("ODOMETER")] Odometer = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
