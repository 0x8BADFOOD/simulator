// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/localization.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Localization {

  /// <summary>Holder for reflection information generated from modules/localization/proto/localization.proto</summary>
  public static partial class LocalizationReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/localization/proto/localization.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocalizationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1tb2R1bGVzL2xvY2FsaXphdGlvbi9wcm90by9sb2NhbGl6YXRpb24ucHJv",
            "dG8SE2Fwb2xsby5sb2NhbGl6YXRpb24aIW1vZHVsZXMvY29tbW9uL3Byb3Rv",
            "L2hlYWRlci5wcm90bxolbW9kdWxlcy9sb2NhbGl6YXRpb24vcHJvdG8vcG9z",
            "ZS5wcm90bxojbW9kdWxlcy9jb21tb24vcHJvdG8vZ2VvbWV0cnkucHJvdG8a",
            "JG1vZHVsZXMvY29tbW9uL3Byb3RvL3BuY19wb2ludC5wcm90bxo0bW9kdWxl",
            "cy9sb2NhbGl6YXRpb24vcHJvdG8vbG9jYWxpemF0aW9uX3N0YXR1cy5wcm90",
            "byKkAgoLVW5jZXJ0YWludHkSMAoQcG9zaXRpb25fc3RkX2RldhgBIAEoCzIW",
            "LmFwb2xsby5jb21tb24uUG9pbnQzRBIzChNvcmllbnRhdGlvbl9zdGRfZGV2",
            "GAIgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNEEjcKF2xpbmVhcl92ZWxv",
            "Y2l0eV9zdGRfZGV2GAMgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNEEjsK",
            "G2xpbmVhcl9hY2NlbGVyYXRpb25fc3RkX2RldhgEIAEoCzIWLmFwb2xsby5j",
            "b21tb24uUG9pbnQzRBI4Chhhbmd1bGFyX3ZlbG9jaXR5X3N0ZF9kZXYYBSAB",
            "KAsyFi5hcG9sbG8uY29tbW9uLlBvaW50M0Qi5QIKFExvY2FsaXphdGlvbkVz",
            "dGltYXRlEiUKBmhlYWRlchgBIAEoCzIVLmFwb2xsby5jb21tb24uSGVhZGVy",
            "EicKBHBvc2UYAiABKAsyGS5hcG9sbG8ubG9jYWxpemF0aW9uLlBvc2USNQoL",
            "dW5jZXJ0YWludHkYAyABKAsyIC5hcG9sbG8ubG9jYWxpemF0aW9uLlVuY2Vy",
            "dGFpbnR5EhgKEG1lYXN1cmVtZW50X3RpbWUYBCABKAESOAoQdHJhamVjdG9y",
            "eV9wb2ludBgFIAMoCzIeLmFwb2xsby5jb21tb24uVHJhamVjdG9yeVBvaW50",
            "EjIKCm1zZl9zdGF0dXMYBiABKAsyHi5hcG9sbG8ubG9jYWxpemF0aW9uLk1z",
            "ZlN0YXR1cxI+Cg1zZW5zb3Jfc3RhdHVzGAcgASgLMicuYXBvbGxvLmxvY2Fs",
            "aXphdGlvbi5Nc2ZTZW5zb3JNc2dTdGF0dXMilwIKEkxvY2FsaXphdGlvblN0",
            "YXR1cxIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRlchI4",
            "Cg1mdXNpb25fc3RhdHVzGAIgASgOMiEuYXBvbGxvLmxvY2FsaXphdGlvbi5N",
            "ZWFzdXJlU3RhdGUSNgoLZ25zc19zdGF0dXMYAyABKA4yIS5hcG9sbG8ubG9j",
            "YWxpemF0aW9uLk1lYXN1cmVTdGF0ZRI3CgxsaWRhcl9zdGF0dXMYBCABKA4y",
            "IS5hcG9sbG8ubG9jYWxpemF0aW9uLk1lYXN1cmVTdGF0ZRIYChBtZWFzdXJl",
            "bWVudF90aW1lGAUgASgBEhUKDXN0YXRlX21lc3NhZ2UYBiABKAkqVAoMTWVh",
            "c3VyZVN0YXRlEgYKAk9LEAASDAoIV0FSTk5JTkcQARIJCgVFUlJPUhACEhIK",
            "DkNSSVRJQ0FMX0VSUk9SEAMSDwoLRkFUQUxfRVJST1IQBGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Localization.PoseReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Common.PncPointReflection.Descriptor, global::Apollo.Localization.LocalizationStatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Localization.MeasureState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.Uncertainty), global::Apollo.Localization.Uncertainty.Parser, new[]{ "PositionStdDev", "OrientationStdDev", "LinearVelocityStdDev", "LinearAccelerationStdDev", "AngularVelocityStdDev" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.LocalizationEstimate), global::Apollo.Localization.LocalizationEstimate.Parser, new[]{ "Header", "Pose", "Uncertainty", "MeasurementTime", "TrajectoryPoint", "MsfStatus", "SensorStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.LocalizationStatus), global::Apollo.Localization.LocalizationStatus.Parser, new[]{ "Header", "FusionStatus", "GnssStatus", "LidarStatus", "MeasurementTime", "StateMessage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MeasureState {
    [pbr::OriginalName("OK")] Ok = 0,
    [pbr::OriginalName("WARNNING")] Warnning = 1,
    [pbr::OriginalName("ERROR")] Error = 2,
    [pbr::OriginalName("CRITICAL_ERROR")] CriticalError = 3,
    [pbr::OriginalName("FATAL_ERROR")] FatalError = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Uncertainty : pb::IMessage<Uncertainty> {
    private static readonly pb::MessageParser<Uncertainty> _parser = new pb::MessageParser<Uncertainty>(() => new Uncertainty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uncertainty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.LocalizationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uncertainty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uncertainty(Uncertainty other) : this() {
      PositionStdDev = other.positionStdDev_ != null ? other.PositionStdDev.Clone() : null;
      OrientationStdDev = other.orientationStdDev_ != null ? other.OrientationStdDev.Clone() : null;
      LinearVelocityStdDev = other.linearVelocityStdDev_ != null ? other.LinearVelocityStdDev.Clone() : null;
      LinearAccelerationStdDev = other.linearAccelerationStdDev_ != null ? other.LinearAccelerationStdDev.Clone() : null;
      AngularVelocityStdDev = other.angularVelocityStdDev_ != null ? other.AngularVelocityStdDev.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uncertainty Clone() {
      return new Uncertainty(this);
    }

    /// <summary>Field number for the "position_std_dev" field.</summary>
    public const int PositionStdDevFieldNumber = 1;
    private global::Apollo.Common.Point3D positionStdDev_;
    /// <summary>
    /// Standard deviation of position, east/north/up in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D PositionStdDev {
      get { return positionStdDev_; }
      set {
        positionStdDev_ = value;
      }
    }

    /// <summary>Field number for the "orientation_std_dev" field.</summary>
    public const int OrientationStdDevFieldNumber = 2;
    private global::Apollo.Common.Point3D orientationStdDev_;
    /// <summary>
    /// Standard deviation of quaternion qx/qy/qz, unitless.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D OrientationStdDev {
      get { return orientationStdDev_; }
      set {
        orientationStdDev_ = value;
      }
    }

    /// <summary>Field number for the "linear_velocity_std_dev" field.</summary>
    public const int LinearVelocityStdDevFieldNumber = 3;
    private global::Apollo.Common.Point3D linearVelocityStdDev_;
    /// <summary>
    /// Standard deviation of linear velocity, east/north/up in meters per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearVelocityStdDev {
      get { return linearVelocityStdDev_; }
      set {
        linearVelocityStdDev_ = value;
      }
    }

    /// <summary>Field number for the "linear_acceleration_std_dev" field.</summary>
    public const int LinearAccelerationStdDevFieldNumber = 4;
    private global::Apollo.Common.Point3D linearAccelerationStdDev_;
    /// <summary>
    /// Standard deviation of linear acceleration, right/forward/up in meters per
    /// square second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearAccelerationStdDev {
      get { return linearAccelerationStdDev_; }
      set {
        linearAccelerationStdDev_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity_std_dev" field.</summary>
    public const int AngularVelocityStdDevFieldNumber = 5;
    private global::Apollo.Common.Point3D angularVelocityStdDev_;
    /// <summary>
    /// Standard deviation of angular velocity, right/forward/up in radians per
    /// second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D AngularVelocityStdDev {
      get { return angularVelocityStdDev_; }
      set {
        angularVelocityStdDev_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uncertainty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uncertainty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PositionStdDev, other.PositionStdDev)) return false;
      if (!object.Equals(OrientationStdDev, other.OrientationStdDev)) return false;
      if (!object.Equals(LinearVelocityStdDev, other.LinearVelocityStdDev)) return false;
      if (!object.Equals(LinearAccelerationStdDev, other.LinearAccelerationStdDev)) return false;
      if (!object.Equals(AngularVelocityStdDev, other.AngularVelocityStdDev)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (positionStdDev_ != null) hash ^= PositionStdDev.GetHashCode();
      if (orientationStdDev_ != null) hash ^= OrientationStdDev.GetHashCode();
      if (linearVelocityStdDev_ != null) hash ^= LinearVelocityStdDev.GetHashCode();
      if (linearAccelerationStdDev_ != null) hash ^= LinearAccelerationStdDev.GetHashCode();
      if (angularVelocityStdDev_ != null) hash ^= AngularVelocityStdDev.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (positionStdDev_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PositionStdDev);
      }
      if (orientationStdDev_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OrientationStdDev);
      }
      if (linearVelocityStdDev_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LinearVelocityStdDev);
      }
      if (linearAccelerationStdDev_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LinearAccelerationStdDev);
      }
      if (angularVelocityStdDev_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AngularVelocityStdDev);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (positionStdDev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PositionStdDev);
      }
      if (orientationStdDev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrientationStdDev);
      }
      if (linearVelocityStdDev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearVelocityStdDev);
      }
      if (linearAccelerationStdDev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearAccelerationStdDev);
      }
      if (angularVelocityStdDev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocityStdDev);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uncertainty other) {
      if (other == null) {
        return;
      }
      if (other.positionStdDev_ != null) {
        if (positionStdDev_ == null) {
          positionStdDev_ = new global::Apollo.Common.Point3D();
        }
        PositionStdDev.MergeFrom(other.PositionStdDev);
      }
      if (other.orientationStdDev_ != null) {
        if (orientationStdDev_ == null) {
          orientationStdDev_ = new global::Apollo.Common.Point3D();
        }
        OrientationStdDev.MergeFrom(other.OrientationStdDev);
      }
      if (other.linearVelocityStdDev_ != null) {
        if (linearVelocityStdDev_ == null) {
          linearVelocityStdDev_ = new global::Apollo.Common.Point3D();
        }
        LinearVelocityStdDev.MergeFrom(other.LinearVelocityStdDev);
      }
      if (other.linearAccelerationStdDev_ != null) {
        if (linearAccelerationStdDev_ == null) {
          linearAccelerationStdDev_ = new global::Apollo.Common.Point3D();
        }
        LinearAccelerationStdDev.MergeFrom(other.LinearAccelerationStdDev);
      }
      if (other.angularVelocityStdDev_ != null) {
        if (angularVelocityStdDev_ == null) {
          angularVelocityStdDev_ = new global::Apollo.Common.Point3D();
        }
        AngularVelocityStdDev.MergeFrom(other.AngularVelocityStdDev);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (positionStdDev_ == null) {
              positionStdDev_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(positionStdDev_);
            break;
          }
          case 18: {
            if (orientationStdDev_ == null) {
              orientationStdDev_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(orientationStdDev_);
            break;
          }
          case 26: {
            if (linearVelocityStdDev_ == null) {
              linearVelocityStdDev_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearVelocityStdDev_);
            break;
          }
          case 34: {
            if (linearAccelerationStdDev_ == null) {
              linearAccelerationStdDev_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearAccelerationStdDev_);
            break;
          }
          case 42: {
            if (angularVelocityStdDev_ == null) {
              angularVelocityStdDev_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(angularVelocityStdDev_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalizationEstimate : pb::IMessage<LocalizationEstimate> {
    private static readonly pb::MessageParser<LocalizationEstimate> _parser = new pb::MessageParser<LocalizationEstimate>(() => new LocalizationEstimate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalizationEstimate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.LocalizationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizationEstimate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizationEstimate(LocalizationEstimate other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      Pose = other.pose_ != null ? other.Pose.Clone() : null;
      Uncertainty = other.uncertainty_ != null ? other.Uncertainty.Clone() : null;
      measurementTime_ = other.measurementTime_;
      trajectoryPoint_ = other.trajectoryPoint_.Clone();
      MsfStatus = other.msfStatus_ != null ? other.MsfStatus.Clone() : null;
      SensorStatus = other.sensorStatus_ != null ? other.SensorStatus.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizationEstimate Clone() {
      return new LocalizationEstimate(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 2;
    private global::Apollo.Localization.Pose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "uncertainty" field.</summary>
    public const int UncertaintyFieldNumber = 3;
    private global::Apollo.Localization.Uncertainty uncertainty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.Uncertainty Uncertainty {
      get { return uncertainty_; }
      set {
        uncertainty_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 4;
    private double measurementTime_;
    /// <summary>
    /// The time of pose measurement, seconds since 1970-1-1 (UNIX time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "trajectory_point" field.</summary>
    public const int TrajectoryPointFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Common.TrajectoryPoint> _repeated_trajectoryPoint_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Common.TrajectoryPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint> trajectoryPoint_ = new pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint>();
    /// <summary>
    /// Future trajectory acturally driven by the drivers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint> TrajectoryPoint {
      get { return trajectoryPoint_; }
    }

    /// <summary>Field number for the "msf_status" field.</summary>
    public const int MsfStatusFieldNumber = 6;
    private global::Apollo.Localization.MsfStatus msfStatus_;
    /// <summary>
    /// msf status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.MsfStatus MsfStatus {
      get { return msfStatus_; }
      set {
        msfStatus_ = value;
      }
    }

    /// <summary>Field number for the "sensor_status" field.</summary>
    public const int SensorStatusFieldNumber = 7;
    private global::Apollo.Localization.MsfSensorMsgStatus sensorStatus_;
    /// <summary>
    /// msf quality
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.MsfSensorMsgStatus SensorStatus {
      get { return sensorStatus_; }
      set {
        sensorStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalizationEstimate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalizationEstimate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!object.Equals(Uncertainty, other.Uncertainty)) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if(!trajectoryPoint_.Equals(other.trajectoryPoint_)) return false;
      if (!object.Equals(MsfStatus, other.MsfStatus)) return false;
      if (!object.Equals(SensorStatus, other.SensorStatus)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (uncertainty_ != null) hash ^= Uncertainty.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      hash ^= trajectoryPoint_.GetHashCode();
      if (msfStatus_ != null) hash ^= MsfStatus.GetHashCode();
      if (sensorStatus_ != null) hash ^= SensorStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (pose_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pose);
      }
      if (uncertainty_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Uncertainty);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MeasurementTime);
      }
      trajectoryPoint_.WriteTo(output, _repeated_trajectoryPoint_codec);
      if (msfStatus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MsfStatus);
      }
      if (sensorStatus_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SensorStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (uncertainty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uncertainty);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      size += trajectoryPoint_.CalculateSize(_repeated_trajectoryPoint_codec);
      if (msfStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MsfStatus);
      }
      if (sensorStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalizationEstimate other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Apollo.Localization.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.uncertainty_ != null) {
        if (uncertainty_ == null) {
          uncertainty_ = new global::Apollo.Localization.Uncertainty();
        }
        Uncertainty.MergeFrom(other.Uncertainty);
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      trajectoryPoint_.Add(other.trajectoryPoint_);
      if (other.msfStatus_ != null) {
        if (msfStatus_ == null) {
          msfStatus_ = new global::Apollo.Localization.MsfStatus();
        }
        MsfStatus.MergeFrom(other.MsfStatus);
      }
      if (other.sensorStatus_ != null) {
        if (sensorStatus_ == null) {
          sensorStatus_ = new global::Apollo.Localization.MsfSensorMsgStatus();
        }
        SensorStatus.MergeFrom(other.SensorStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (pose_ == null) {
              pose_ = new global::Apollo.Localization.Pose();
            }
            input.ReadMessage(pose_);
            break;
          }
          case 26: {
            if (uncertainty_ == null) {
              uncertainty_ = new global::Apollo.Localization.Uncertainty();
            }
            input.ReadMessage(uncertainty_);
            break;
          }
          case 33: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 42: {
            trajectoryPoint_.AddEntriesFrom(input, _repeated_trajectoryPoint_codec);
            break;
          }
          case 50: {
            if (msfStatus_ == null) {
              msfStatus_ = new global::Apollo.Localization.MsfStatus();
            }
            input.ReadMessage(msfStatus_);
            break;
          }
          case 58: {
            if (sensorStatus_ == null) {
              sensorStatus_ = new global::Apollo.Localization.MsfSensorMsgStatus();
            }
            input.ReadMessage(sensorStatus_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalizationStatus : pb::IMessage<LocalizationStatus> {
    private static readonly pb::MessageParser<LocalizationStatus> _parser = new pb::MessageParser<LocalizationStatus>(() => new LocalizationStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalizationStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.LocalizationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizationStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizationStatus(LocalizationStatus other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      fusionStatus_ = other.fusionStatus_;
      gnssStatus_ = other.gnssStatus_;
      lidarStatus_ = other.lidarStatus_;
      measurementTime_ = other.measurementTime_;
      stateMessage_ = other.stateMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizationStatus Clone() {
      return new LocalizationStatus(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "fusion_status" field.</summary>
    public const int FusionStatusFieldNumber = 2;
    private global::Apollo.Localization.MeasureState fusionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.MeasureState FusionStatus {
      get { return fusionStatus_; }
      set {
        fusionStatus_ = value;
      }
    }

    /// <summary>Field number for the "gnss_status" field.</summary>
    public const int GnssStatusFieldNumber = 3;
    private global::Apollo.Localization.MeasureState gnssStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.MeasureState GnssStatus {
      get { return gnssStatus_; }
      set {
        gnssStatus_ = value;
      }
    }

    /// <summary>Field number for the "lidar_status" field.</summary>
    public const int LidarStatusFieldNumber = 4;
    private global::Apollo.Localization.MeasureState lidarStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.MeasureState LidarStatus {
      get { return lidarStatus_; }
      set {
        lidarStatus_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 5;
    private double measurementTime_;
    /// <summary>
    /// The time of pose measurement, seconds since 1970-1-1 (UNIX time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "state_message" field.</summary>
    public const int StateMessageFieldNumber = 6;
    private string stateMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateMessage {
      get { return stateMessage_; }
      set {
        stateMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalizationStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalizationStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (FusionStatus != other.FusionStatus) return false;
      if (GnssStatus != other.GnssStatus) return false;
      if (LidarStatus != other.LidarStatus) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if (StateMessage != other.StateMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (FusionStatus != 0) hash ^= FusionStatus.GetHashCode();
      if (GnssStatus != 0) hash ^= GnssStatus.GetHashCode();
      if (LidarStatus != 0) hash ^= LidarStatus.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      if (StateMessage.Length != 0) hash ^= StateMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (FusionStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FusionStatus);
      }
      if (GnssStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GnssStatus);
      }
      if (LidarStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LidarStatus);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MeasurementTime);
      }
      if (StateMessage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StateMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (FusionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FusionStatus);
      }
      if (GnssStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssStatus);
      }
      if (LidarStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LidarStatus);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      if (StateMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalizationStatus other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.FusionStatus != 0) {
        FusionStatus = other.FusionStatus;
      }
      if (other.GnssStatus != 0) {
        GnssStatus = other.GnssStatus;
      }
      if (other.LidarStatus != 0) {
        LidarStatus = other.LidarStatus;
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      if (other.StateMessage.Length != 0) {
        StateMessage = other.StateMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            fusionStatus_ = (global::Apollo.Localization.MeasureState) input.ReadEnum();
            break;
          }
          case 24: {
            gnssStatus_ = (global::Apollo.Localization.MeasureState) input.ReadEnum();
            break;
          }
          case 32: {
            lidarStatus_ = (global::Apollo.Localization.MeasureState) input.ReadEnum();
            break;
          }
          case 41: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 50: {
            StateMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
