// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/localization_status.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Localization {

  /// <summary>Holder for reflection information generated from modules/localization/proto/localization_status.proto</summary>
  public static partial class LocalizationStatusReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/localization/proto/localization_status.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocalizationStatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRtb2R1bGVzL2xvY2FsaXphdGlvbi9wcm90by9sb2NhbGl6YXRpb25fc3Rh",
            "dHVzLnByb3RvEhNhcG9sbG8ubG9jYWxpemF0aW9uItwBChJNc2ZTZW5zb3JN",
            "c2dTdGF0dXMSQAoQaW11X2RlbGF5X3N0YXR1cxgBIAEoDjImLmFwb2xsby5s",
            "b2NhbGl6YXRpb24uSW11TXNnRGVsYXlTdGF0dXMSRAoSaW11X21pc3Npbmdf",
            "c3RhdHVzGAIgASgOMiguYXBvbGxvLmxvY2FsaXphdGlvbi5JbXVNc2dNaXNz",
            "aW5nU3RhdHVzEj4KD2ltdV9kYXRhX3N0YXR1cxgDIAEoDjIlLmFwb2xsby5s",
            "b2NhbGl6YXRpb24uSW11TXNnRGF0YVN0YXR1cyKpAwoJTXNmU3RhdHVzEksK",
            "F2xvY2FsX2xpZGFyX2NvbnNpc3RlbmN5GAEgASgOMiouYXBvbGxvLmxvY2Fs",
            "aXphdGlvbi5Mb2NhbExpZGFyQ29uc2lzdGVuY3kSPgoQZ25zc19jb25zaXN0",
            "ZW5jeRgCIAEoDjIkLmFwb2xsby5sb2NhbGl6YXRpb24uR25zc0NvbnNpc3Rl",
            "bmN5EkEKEmxvY2FsX2xpZGFyX3N0YXR1cxgDIAEoDjIlLmFwb2xsby5sb2Nh",
            "bGl6YXRpb24uTG9jYWxMaWRhclN0YXR1cxJDChNsb2NhbF9saWRhcl9xdWFs",
            "aXR5GAQgASgOMiYuYXBvbGxvLmxvY2FsaXphdGlvbi5Mb2NhbExpZGFyUXVh",
            "bGl0eRJEChVnbnNzcG9zX3Bvc2l0aW9uX3R5cGUYBSABKA4yJS5hcG9sbG8u",
            "bG9jYWxpemF0aW9uLkduc3NQb3NpdGlvblR5cGUSQQoSbXNmX3J1bm5pbmdf",
            "c3RhdHVzGAYgASgOMiUuYXBvbGxvLmxvY2FsaXphdGlvbi5Nc2ZSdW5uaW5n",
            "U3RhdHVzKqICChBMb2NhbExpZGFyU3RhdHVzEhoKFk1TRl9MT0NBTF9MSURB",
            "Ul9OT1JNQUwQABIfChtNU0ZfTE9DQUxfTElEQVJfTUFQX01JU1NJTkcQARIm",
            "CiJNU0ZfTE9DQUxfTElEQVJfRVhUUklOU0lDU19NSVNTSU5HEAISJgoiTVNG",
            "X0xPQ0FMX0xJREFSX01BUF9MT0FESU5HX0ZBSUxFRBADEh0KGU1TRl9MT0NB",
            "TF9MSURBUl9OT19PVVRQVVQQBBIeChpNU0ZfTE9DQUxfTElEQVJfT1VUX09G",
            "X01BUBAFEhwKGE1TRl9MT0NBTF9MSURBUl9OT1RfR09PRBAGEiQKIE1TRl9M",
            "T0NBTF9MSURBUl9VTkRFRklORURfU1RBVFVTEAcqggEKEUxvY2FsTGlkYXJR",
            "dWFsaXR5Eh0KGU1TRl9MT0NBTF9MSURBUl9WRVJZX0dPT0QQABIYChRNU0Zf",
            "TE9DQUxfTElEQVJfR09PRBABEhsKF01TRl9MT0NBTF9MSURBUl9OT1RfQkFE",
            "EAISFwoTTVNGX0xPQ0FMX0xJREFSX0JBRBADKqcBChVMb2NhbExpZGFyQ29u",
            "c2lzdGVuY3kSIgoeTVNGX0xPQ0FMX0xJREFSX0NPTlNJU1RFTkNZXzAwEAAS",
            "IgoeTVNGX0xPQ0FMX0xJREFSX0NPTlNJU1RFTkNZXzAxEAESIgoeTVNGX0xP",
            "Q0FMX0xJREFSX0NPTlNJU1RFTkNZXzAyEAISIgoeTVNGX0xPQ0FMX0xJREFS",
            "X0NPTlNJU1RFTkNZXzAzEAMqhQEKD0duc3NDb25zaXN0ZW5jeRIbChdNU0Zf",
            "R05TU19DT05TSVNURU5DWV8wMBAAEhsKF01TRl9HTlNTX0NPTlNJU1RFTkNZ",
            "XzAxEAESGwoXTVNGX0dOU1NfQ09OU0lTVEVOQ1lfMDIQAhIbChdNU0ZfR05T",
            "U19DT05TSVNURU5DWV8wMxADKrEEChBHbnNzUG9zaXRpb25UeXBlEggKBE5P",
            "TkUQABIMCghGSVhFRFBPUxABEg8KC0ZJWEVESEVJR0hUEAISDQoJRkxPQVRD",
            "T05WEAQSDAoIV0lERUxBTkUQBRIOCgpOQVJST1dMQU5FEAYSFAoQRE9QUExF",
            "Ul9WRUxPQ0lUWRAIEgoKBlNJTkdMRRAQEgsKB1BTUkRJRkYQERIICgRXQUFT",
            "EBISDgoKUFJPUE9HQVRFRBATEgwKCE9NTklTVEFSEBQSDAoITDFfRkxPQVQQ",
            "IBISCg5JT05PRlJFRV9GTE9BVBAhEhAKDE5BUlJPV19GTE9BVBAiEgoKBkwx",
            "X0lOVBAwEgwKCFdJREVfSU5UEDESDgoKTkFSUk9XX0lOVBAyEhIKDlJUS19E",
            "SVJFQ1RfSU5TEDMSDAoISU5TX1NCQVMQNBINCglJTlNfUFNSU1AQNRIPCgtJ",
            "TlNfUFNSRElGRhA2EhAKDElOU19SVEtGTE9BVBA3EhAKDElOU19SVEtGSVhF",
            "RBA4EhAKDElOU19PTU5JU1RBUhA5EhMKD0lOU19PTU5JU1RBUl9IUBA6EhMK",
            "D0lOU19PTU5JU1RBUl9YUBA7Eg8KC09NTklTVEFSX0hQEEASDwoLT01OSVNU",
            "QVJfWFAQQRISCg5QUFBfQ09OVkVSR0lORxBEEgcKA1BQUBBFEhYKEklOU19Q",
            "UFBfQ29udmVyZ2luZxBJEgsKB0lOU19QUFAQShIMCghNU0dfTE9TUxBbKnQK",
            "EUltdU1zZ0RlbGF5U3RhdHVzEhQKEElNVV9ERUxBWV9OT1JNQUwQABIPCgtJ",
            "TVVfREVMQVlfMRABEg8KC0lNVV9ERUxBWV8yEAISDwoLSU1VX0RFTEFZXzMQ",
            "AxIWChJJTVVfREVMQVlfQUJOT1JNQUwQBCqmAQoTSW11TXNnTWlzc2luZ1N0",
            "YXR1cxIWChJJTVVfTUlTU0lOR19OT1JNQUwQABIRCg1JTVVfTUlTU0lOR18x",
            "EAESEQoNSU1VX01JU1NJTkdfMhACEhEKDUlNVV9NSVNTSU5HXzMQAxIRCg1J",
            "TVVfTUlTU0lOR180EAQSEQoNSU1VX01JU1NJTkdfNRAFEhgKFElNVV9NSVNT",
            "SU5HX0FCTk9STUFMEAYqUgoQSW11TXNnRGF0YVN0YXR1cxITCg9JTVVfREFU",
            "QV9OT1JNQUwQABIVChFJTVVfREFUQV9BQk5PUk1BTBABEhIKDklNVV9EQVRB",
            "X09USEVSEAIqrAQKEE1zZlJ1bm5pbmdTdGF0dXMSFgoSTVNGX1NPTF9MSURB",
            "Ul9HTlNTEAASEgoOTVNGX1NPTF9YX0dOU1MQARITCg9NU0ZfU09MX0xJREFS",
            "X1gQAhIUChBNU0ZfU09MX0xJREFSX1hYEAMSFQoRTVNGX1NPTF9MSURBUl9Y",
            "WFgQBBIPCgtNU0ZfU09MX1hfWBAFEhAKDE1TRl9TT0xfWF9YWBAGEhEKDU1T",
            "Rl9TT0xfWF9YWFgQBxIXChNNU0ZfU1NPTF9MSURBUl9HTlNTEAgSEwoPTVNG",
            "X1NTT0xfWF9HTlNTEAkSFAoQTVNGX1NTT0xfTElEQVJfWBAKEhUKEU1TRl9T",
            "U09MX0xJREFSX1hYEAsSFgoSTVNGX1NTT0xfTElEQVJfWFhYEAwSEAoMTVNG",
            "X1NTT0xfWF9YEA0SEQoNTVNGX1NTT0xfWF9YWBAOEhIKDk1TRl9TU09MX1hf",
            "WFhYEA8SGAoUTVNGX05PU09MX0xJREFSX0dOU1MQEBIUChBNU0ZfTk9TT0xf",
            "WF9HTlNTEBESFQoRTVNGX05PU09MX0xJREFSX1gQEhIWChJNU0ZfTk9TT0xf",
            "TElEQVJfWFgQExIXChNNU0ZfTk9TT0xfTElEQVJfWFhYEBQSEQoNTVNGX05P",
            "U09MX1hfWBAVEhIKDk1TRl9OT1NPTF9YX1hYEBYSEwoPTVNGX05PU09MX1hf",
            "WFhYEBcSFAoQTVNGX1JVTk5JTkdfSU5JVBAYYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Localization.LocalLidarStatus), typeof(global::Apollo.Localization.LocalLidarQuality), typeof(global::Apollo.Localization.LocalLidarConsistency), typeof(global::Apollo.Localization.GnssConsistency), typeof(global::Apollo.Localization.GnssPositionType), typeof(global::Apollo.Localization.ImuMsgDelayStatus), typeof(global::Apollo.Localization.ImuMsgMissingStatus), typeof(global::Apollo.Localization.ImuMsgDataStatus), typeof(global::Apollo.Localization.MsfRunningStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.MsfSensorMsgStatus), global::Apollo.Localization.MsfSensorMsgStatus.Parser, new[]{ "ImuDelayStatus", "ImuMissingStatus", "ImuDataStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.MsfStatus), global::Apollo.Localization.MsfStatus.Parser, new[]{ "LocalLidarConsistency", "GnssConsistency", "LocalLidarStatus", "LocalLidarQuality", "GnssposPositionType", "MsfRunningStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// LiDAR-based loclaization module status
  /// </summary>
  public enum LocalLidarStatus {
    /// <summary>
    /// Localization result satisfy threshold
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_NORMAL")] MsfLocalLidarNormal = 0,
    /// <summary>
    /// Can't find localization map (config.xml)
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_MAP_MISSING")] MsfLocalLidarMapMissing = 1,
    /// <summary>
    /// Missing extrinsic parameters
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_EXTRINSICS_MISSING")] MsfLocalLidarExtrinsicsMissing = 2,
    /// <summary>
    /// Fail to load localization map
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_MAP_LOADING_FAILED")] MsfLocalLidarMapLoadingFailed = 3,
    /// <summary>
    /// No output (comparing to timestamp of imu msg)
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_NO_OUTPUT")] MsfLocalLidarNoOutput = 4,
    /// <summary>
    /// Coverage of online pointcloud and map is lower than threshold 
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_OUT_OF_MAP")] MsfLocalLidarOutOfMap = 5,
    /// <summary>
    /// Localization result do not meet threshold
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_NOT_GOOD")] MsfLocalLidarNotGood = 6,
    /// <summary>
    /// others
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_UNDEFINED_STATUS")] MsfLocalLidarUndefinedStatus = 7,
  }

  public enum LocalLidarQuality {
    [pbr::OriginalName("MSF_LOCAL_LIDAR_VERY_GOOD")] MsfLocalLidarVeryGood = 0,
    [pbr::OriginalName("MSF_LOCAL_LIDAR_GOOD")] MsfLocalLidarGood = 1,
    [pbr::OriginalName("MSF_LOCAL_LIDAR_NOT_BAD")] MsfLocalLidarNotBad = 2,
    [pbr::OriginalName("MSF_LOCAL_LIDAR_BAD")] MsfLocalLidarBad = 3,
  }

  /// <summary>
  /// LiDAR-based localization result check (the difference between lidar and sins result)
  /// </summary>
  public enum LocalLidarConsistency {
    /// <summary>
    /// The difference is less than threshold 1
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_CONSISTENCY_00")] MsfLocalLidarConsistency00 = 0,
    /// <summary>
    /// The difference is bigger than threshold 1 but less than threshold 2
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_CONSISTENCY_01")] MsfLocalLidarConsistency01 = 1,
    /// <summary>
    /// The difference is bigger than threshold 2
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_CONSISTENCY_02")] MsfLocalLidarConsistency02 = 2,
    /// <summary>
    /// others
    /// </summary>
    [pbr::OriginalName("MSF_LOCAL_LIDAR_CONSISTENCY_03")] MsfLocalLidarConsistency03 = 3,
  }

  /// <summary>
  /// GNSS-based localization result check (the difference between GNSS and sins result)
  /// </summary>
  public enum GnssConsistency {
    /// <summary>
    /// The difference is less than threshold 1
    /// </summary>
    [pbr::OriginalName("MSF_GNSS_CONSISTENCY_00")] MsfGnssConsistency00 = 0,
    /// <summary>
    /// The difference is bigger than threshold 1 but less than threshold 2
    /// </summary>
    [pbr::OriginalName("MSF_GNSS_CONSISTENCY_01")] MsfGnssConsistency01 = 1,
    /// <summary>
    /// The difference is bigger than threshold 2
    /// </summary>
    [pbr::OriginalName("MSF_GNSS_CONSISTENCY_02")] MsfGnssConsistency02 = 2,
    /// <summary>
    /// others
    /// </summary>
    [pbr::OriginalName("MSF_GNSS_CONSISTENCY_03")] MsfGnssConsistency03 = 3,
  }

  public enum GnssPositionType {
    /// <summary>
    /// No solution
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// Position has been fixed by the FIX POSITION command or by position averaging
    /// </summary>
    [pbr::OriginalName("FIXEDPOS")] Fixedpos = 1,
    /// <summary>
    ///Position has been fixed by the FIX HEIGHT, or FIX AUTO, command or by position averaging 
    /// </summary>
    [pbr::OriginalName("FIXEDHEIGHT")] Fixedheight = 2,
    /// <summary>
    /// Solution from floating point carrier phase anbiguities
    /// </summary>
    [pbr::OriginalName("FLOATCONV")] Floatconv = 4,
    /// <summary>
    /// Solution from wide-lane ambiguities
    /// </summary>
    [pbr::OriginalName("WIDELANE")] Widelane = 5,
    /// <summary>
    /// Solution from narrow-lane ambiguities
    /// </summary>
    [pbr::OriginalName("NARROWLANE")] Narrowlane = 6,
    /// <summary>
    /// Velocity computed using instantaneous Doppler
    /// </summary>
    [pbr::OriginalName("DOPPLER_VELOCITY")] DopplerVelocity = 8,
    /// <summary>
    /// Single point position
    /// </summary>
    [pbr::OriginalName("SINGLE")] Single = 16,
    /// <summary>
    /// Pseudorange differential solution
    /// </summary>
    [pbr::OriginalName("PSRDIFF")] Psrdiff = 17,
    /// <summary>
    /// Solution calculated using corrections from an SBAS
    /// </summary>
    [pbr::OriginalName("WAAS")] Waas = 18,
    /// <summary>
    /// Propagated by a Kalman filter without new observations
    /// </summary>
    [pbr::OriginalName("PROPOGATED")] Propogated = 19,
    /// <summary>
    /// OmniSTAR VBS position
    /// </summary>
    [pbr::OriginalName("OMNISTAR")] Omnistar = 20,
    /// <summary>
    /// Floating L1 albiguity solution
    /// </summary>
    [pbr::OriginalName("L1_FLOAT")] L1Float = 32,
    /// <summary>
    /// Floating ionospheric free ambiguity solution
    /// </summary>
    [pbr::OriginalName("IONOFREE_FLOAT")] IonofreeFloat = 33,
    /// <summary>
    /// Floating narrow-lane anbiguity solution
    /// </summary>
    [pbr::OriginalName("NARROW_FLOAT")] NarrowFloat = 34,
    /// <summary>
    /// Integer L1 ambiguity solution
    /// </summary>
    [pbr::OriginalName("L1_INT")] L1Int = 48,
    /// <summary>
    /// Integer wide-lane ambiguity solution
    /// </summary>
    [pbr::OriginalName("WIDE_INT")] WideInt = 49,
    /// <summary>
    /// Integer narrow-lane ambiguity solution
    /// </summary>
    [pbr::OriginalName("NARROW_INT")] NarrowInt = 50,
    /// <summary>
    /// RTK status where RTK filter is directly initialized from the INS filter
    /// </summary>
    [pbr::OriginalName("RTK_DIRECT_INS")] RtkDirectIns = 51,
    /// <summary>
    /// INS calculated position corrected for the antenna
    /// </summary>
    [pbr::OriginalName("INS_SBAS")] InsSbas = 52,
    /// <summary>
    /// INS pseudorange single point solution - no DGPS corrections
    /// </summary>
    [pbr::OriginalName("INS_PSRSP")] InsPsrsp = 53,
    /// <summary>
    /// INS pseudorange differential solution
    /// </summary>
    [pbr::OriginalName("INS_PSRDIFF")] InsPsrdiff = 54,
    /// <summary>
    /// INS RTK float point ambiguities solution
    /// </summary>
    [pbr::OriginalName("INS_RTKFLOAT")] InsRtkfloat = 55,
    /// <summary>
    /// INS RTK fixed ambiguities solution
    /// </summary>
    [pbr::OriginalName("INS_RTKFIXED")] InsRtkfixed = 56,
    /// <summary>
    /// INS OmniSTAR VBS solution
    /// </summary>
    [pbr::OriginalName("INS_OMNISTAR")] InsOmnistar = 57,
    /// <summary>
    /// INS OmniSTAR high precision solution
    /// </summary>
    [pbr::OriginalName("INS_OMNISTAR_HP")] InsOmnistarHp = 58,
    /// <summary>
    /// INS OmniSTAR extra precision solution
    /// </summary>
    [pbr::OriginalName("INS_OMNISTAR_XP")] InsOmnistarXp = 59,
    /// <summary>
    /// OmniSTAR high precision
    /// </summary>
    [pbr::OriginalName("OMNISTAR_HP")] OmnistarHp = 64,
    /// <summary>
    /// OmniSTAR extra precision
    /// </summary>
    [pbr::OriginalName("OMNISTAR_XP")] OmnistarXp = 65,
    /// <summary>
    /// Precise Point Position(PPP) solution converging
    /// </summary>
    [pbr::OriginalName("PPP_CONVERGING")] PppConverging = 68,
    /// <summary>
    /// Precise Point Position(PPP)solution
    /// </summary>
    [pbr::OriginalName("PPP")] Ppp = 69,
    /// <summary>
    /// INS NovAtel CORRECT Precise Point Position(PPP) solution converging
    /// </summary>
    [pbr::OriginalName("INS_PPP_Converging")] InsPppConverging = 73,
    /// <summary>
    /// INS NovAtel CORRECT Precise Point Position(PPP) solution
    /// </summary>
    [pbr::OriginalName("INS_PPP")] InsPpp = 74,
    /// <summary>
    /// Gnss position message loss
    /// </summary>
    [pbr::OriginalName("MSG_LOSS")] MsgLoss = 91,
  }

  /// <summary>
  /// IMU msg status
  /// </summary>
  public enum ImuMsgDelayStatus {
    [pbr::OriginalName("IMU_DELAY_NORMAL")] ImuDelayNormal = 0,
    [pbr::OriginalName("IMU_DELAY_1")] ImuDelay1 = 1,
    [pbr::OriginalName("IMU_DELAY_2")] ImuDelay2 = 2,
    [pbr::OriginalName("IMU_DELAY_3")] ImuDelay3 = 3,
    [pbr::OriginalName("IMU_DELAY_ABNORMAL")] ImuDelayAbnormal = 4,
  }

  public enum ImuMsgMissingStatus {
    [pbr::OriginalName("IMU_MISSING_NORMAL")] ImuMissingNormal = 0,
    [pbr::OriginalName("IMU_MISSING_1")] ImuMissing1 = 1,
    [pbr::OriginalName("IMU_MISSING_2")] ImuMissing2 = 2,
    [pbr::OriginalName("IMU_MISSING_3")] ImuMissing3 = 3,
    [pbr::OriginalName("IMU_MISSING_4")] ImuMissing4 = 4,
    [pbr::OriginalName("IMU_MISSING_5")] ImuMissing5 = 5,
    [pbr::OriginalName("IMU_MISSING_ABNORMAL")] ImuMissingAbnormal = 6,
  }

  public enum ImuMsgDataStatus {
    [pbr::OriginalName("IMU_DATA_NORMAL")] ImuDataNormal = 0,
    [pbr::OriginalName("IMU_DATA_ABNORMAL")] ImuDataAbnormal = 1,
    [pbr::OriginalName("IMU_DATA_OTHER")] ImuDataOther = 2,
  }

  /// <summary>
  /// The running status of localization module
  /// </summary>
  public enum MsfRunningStatus {
    [pbr::OriginalName("MSF_SOL_LIDAR_GNSS")] MsfSolLidarGnss = 0,
    [pbr::OriginalName("MSF_SOL_X_GNSS")] MsfSolXGnss = 1,
    [pbr::OriginalName("MSF_SOL_LIDAR_X")] MsfSolLidarX = 2,
    [pbr::OriginalName("MSF_SOL_LIDAR_XX")] MsfSolLidarXx = 3,
    [pbr::OriginalName("MSF_SOL_LIDAR_XXX")] MsfSolLidarXxx = 4,
    [pbr::OriginalName("MSF_SOL_X_X")] MsfSolXX = 5,
    [pbr::OriginalName("MSF_SOL_X_XX")] MsfSolXXx = 6,
    [pbr::OriginalName("MSF_SOL_X_XXX")] MsfSolXXxx = 7,
    [pbr::OriginalName("MSF_SSOL_LIDAR_GNSS")] MsfSsolLidarGnss = 8,
    [pbr::OriginalName("MSF_SSOL_X_GNSS")] MsfSsolXGnss = 9,
    [pbr::OriginalName("MSF_SSOL_LIDAR_X")] MsfSsolLidarX = 10,
    [pbr::OriginalName("MSF_SSOL_LIDAR_XX")] MsfSsolLidarXx = 11,
    [pbr::OriginalName("MSF_SSOL_LIDAR_XXX")] MsfSsolLidarXxx = 12,
    [pbr::OriginalName("MSF_SSOL_X_X")] MsfSsolXX = 13,
    [pbr::OriginalName("MSF_SSOL_X_XX")] MsfSsolXXx = 14,
    [pbr::OriginalName("MSF_SSOL_X_XXX")] MsfSsolXXxx = 15,
    [pbr::OriginalName("MSF_NOSOL_LIDAR_GNSS")] MsfNosolLidarGnss = 16,
    [pbr::OriginalName("MSF_NOSOL_X_GNSS")] MsfNosolXGnss = 17,
    [pbr::OriginalName("MSF_NOSOL_LIDAR_X")] MsfNosolLidarX = 18,
    [pbr::OriginalName("MSF_NOSOL_LIDAR_XX")] MsfNosolLidarXx = 19,
    [pbr::OriginalName("MSF_NOSOL_LIDAR_XXX")] MsfNosolLidarXxx = 20,
    [pbr::OriginalName("MSF_NOSOL_X_X")] MsfNosolXX = 21,
    [pbr::OriginalName("MSF_NOSOL_X_XX")] MsfNosolXXx = 22,
    [pbr::OriginalName("MSF_NOSOL_X_XXX")] MsfNosolXXxx = 23,
    [pbr::OriginalName("MSF_RUNNING_INIT")] MsfRunningInit = 24,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The status of sensor msg
  /// </summary>
  public sealed partial class MsfSensorMsgStatus : pb::IMessage<MsfSensorMsgStatus> {
    private static readonly pb::MessageParser<MsfSensorMsgStatus> _parser = new pb::MessageParser<MsfSensorMsgStatus>(() => new MsfSensorMsgStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsfSensorMsgStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.LocalizationStatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsfSensorMsgStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsfSensorMsgStatus(MsfSensorMsgStatus other) : this() {
      imuDelayStatus_ = other.imuDelayStatus_;
      imuMissingStatus_ = other.imuMissingStatus_;
      imuDataStatus_ = other.imuDataStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsfSensorMsgStatus Clone() {
      return new MsfSensorMsgStatus(this);
    }

    /// <summary>Field number for the "imu_delay_status" field.</summary>
    public const int ImuDelayStatusFieldNumber = 1;
    private global::Apollo.Localization.ImuMsgDelayStatus imuDelayStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.ImuMsgDelayStatus ImuDelayStatus {
      get { return imuDelayStatus_; }
      set {
        imuDelayStatus_ = value;
      }
    }

    /// <summary>Field number for the "imu_missing_status" field.</summary>
    public const int ImuMissingStatusFieldNumber = 2;
    private global::Apollo.Localization.ImuMsgMissingStatus imuMissingStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.ImuMsgMissingStatus ImuMissingStatus {
      get { return imuMissingStatus_; }
      set {
        imuMissingStatus_ = value;
      }
    }

    /// <summary>Field number for the "imu_data_status" field.</summary>
    public const int ImuDataStatusFieldNumber = 3;
    private global::Apollo.Localization.ImuMsgDataStatus imuDataStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.ImuMsgDataStatus ImuDataStatus {
      get { return imuDataStatus_; }
      set {
        imuDataStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsfSensorMsgStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsfSensorMsgStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImuDelayStatus != other.ImuDelayStatus) return false;
      if (ImuMissingStatus != other.ImuMissingStatus) return false;
      if (ImuDataStatus != other.ImuDataStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImuDelayStatus != 0) hash ^= ImuDelayStatus.GetHashCode();
      if (ImuMissingStatus != 0) hash ^= ImuMissingStatus.GetHashCode();
      if (ImuDataStatus != 0) hash ^= ImuDataStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImuDelayStatus != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ImuDelayStatus);
      }
      if (ImuMissingStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ImuMissingStatus);
      }
      if (ImuDataStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ImuDataStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImuDelayStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImuDelayStatus);
      }
      if (ImuMissingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImuMissingStatus);
      }
      if (ImuDataStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImuDataStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsfSensorMsgStatus other) {
      if (other == null) {
        return;
      }
      if (other.ImuDelayStatus != 0) {
        ImuDelayStatus = other.ImuDelayStatus;
      }
      if (other.ImuMissingStatus != 0) {
        ImuMissingStatus = other.ImuMissingStatus;
      }
      if (other.ImuDataStatus != 0) {
        ImuDataStatus = other.ImuDataStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            imuDelayStatus_ = (global::Apollo.Localization.ImuMsgDelayStatus) input.ReadEnum();
            break;
          }
          case 16: {
            imuMissingStatus_ = (global::Apollo.Localization.ImuMsgMissingStatus) input.ReadEnum();
            break;
          }
          case 24: {
            imuDataStatus_ = (global::Apollo.Localization.ImuMsgDataStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The status of msf localization module
  /// </summary>
  public sealed partial class MsfStatus : pb::IMessage<MsfStatus> {
    private static readonly pb::MessageParser<MsfStatus> _parser = new pb::MessageParser<MsfStatus>(() => new MsfStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsfStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.LocalizationStatusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsfStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsfStatus(MsfStatus other) : this() {
      localLidarConsistency_ = other.localLidarConsistency_;
      gnssConsistency_ = other.gnssConsistency_;
      localLidarStatus_ = other.localLidarStatus_;
      localLidarQuality_ = other.localLidarQuality_;
      gnssposPositionType_ = other.gnssposPositionType_;
      msfRunningStatus_ = other.msfRunningStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsfStatus Clone() {
      return new MsfStatus(this);
    }

    /// <summary>Field number for the "local_lidar_consistency" field.</summary>
    public const int LocalLidarConsistencyFieldNumber = 1;
    private global::Apollo.Localization.LocalLidarConsistency localLidarConsistency_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.LocalLidarConsistency LocalLidarConsistency {
      get { return localLidarConsistency_; }
      set {
        localLidarConsistency_ = value;
      }
    }

    /// <summary>Field number for the "gnss_consistency" field.</summary>
    public const int GnssConsistencyFieldNumber = 2;
    private global::Apollo.Localization.GnssConsistency gnssConsistency_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.GnssConsistency GnssConsistency {
      get { return gnssConsistency_; }
      set {
        gnssConsistency_ = value;
      }
    }

    /// <summary>Field number for the "local_lidar_status" field.</summary>
    public const int LocalLidarStatusFieldNumber = 3;
    private global::Apollo.Localization.LocalLidarStatus localLidarStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.LocalLidarStatus LocalLidarStatus {
      get { return localLidarStatus_; }
      set {
        localLidarStatus_ = value;
      }
    }

    /// <summary>Field number for the "local_lidar_quality" field.</summary>
    public const int LocalLidarQualityFieldNumber = 4;
    private global::Apollo.Localization.LocalLidarQuality localLidarQuality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.LocalLidarQuality LocalLidarQuality {
      get { return localLidarQuality_; }
      set {
        localLidarQuality_ = value;
      }
    }

    /// <summary>Field number for the "gnsspos_position_type" field.</summary>
    public const int GnssposPositionTypeFieldNumber = 5;
    private global::Apollo.Localization.GnssPositionType gnssposPositionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.GnssPositionType GnssposPositionType {
      get { return gnssposPositionType_; }
      set {
        gnssposPositionType_ = value;
      }
    }

    /// <summary>Field number for the "msf_running_status" field.</summary>
    public const int MsfRunningStatusFieldNumber = 6;
    private global::Apollo.Localization.MsfRunningStatus msfRunningStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.MsfRunningStatus MsfRunningStatus {
      get { return msfRunningStatus_; }
      set {
        msfRunningStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsfStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsfStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalLidarConsistency != other.LocalLidarConsistency) return false;
      if (GnssConsistency != other.GnssConsistency) return false;
      if (LocalLidarStatus != other.LocalLidarStatus) return false;
      if (LocalLidarQuality != other.LocalLidarQuality) return false;
      if (GnssposPositionType != other.GnssposPositionType) return false;
      if (MsfRunningStatus != other.MsfRunningStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalLidarConsistency != 0) hash ^= LocalLidarConsistency.GetHashCode();
      if (GnssConsistency != 0) hash ^= GnssConsistency.GetHashCode();
      if (LocalLidarStatus != 0) hash ^= LocalLidarStatus.GetHashCode();
      if (LocalLidarQuality != 0) hash ^= LocalLidarQuality.GetHashCode();
      if (GnssposPositionType != 0) hash ^= GnssposPositionType.GetHashCode();
      if (MsfRunningStatus != 0) hash ^= MsfRunningStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalLidarConsistency != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LocalLidarConsistency);
      }
      if (GnssConsistency != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GnssConsistency);
      }
      if (LocalLidarStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LocalLidarStatus);
      }
      if (LocalLidarQuality != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LocalLidarQuality);
      }
      if (GnssposPositionType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GnssposPositionType);
      }
      if (MsfRunningStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MsfRunningStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalLidarConsistency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LocalLidarConsistency);
      }
      if (GnssConsistency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssConsistency);
      }
      if (LocalLidarStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LocalLidarStatus);
      }
      if (LocalLidarQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LocalLidarQuality);
      }
      if (GnssposPositionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssposPositionType);
      }
      if (MsfRunningStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsfRunningStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsfStatus other) {
      if (other == null) {
        return;
      }
      if (other.LocalLidarConsistency != 0) {
        LocalLidarConsistency = other.LocalLidarConsistency;
      }
      if (other.GnssConsistency != 0) {
        GnssConsistency = other.GnssConsistency;
      }
      if (other.LocalLidarStatus != 0) {
        LocalLidarStatus = other.LocalLidarStatus;
      }
      if (other.LocalLidarQuality != 0) {
        LocalLidarQuality = other.LocalLidarQuality;
      }
      if (other.GnssposPositionType != 0) {
        GnssposPositionType = other.GnssposPositionType;
      }
      if (other.MsfRunningStatus != 0) {
        MsfRunningStatus = other.MsfRunningStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            localLidarConsistency_ = (global::Apollo.Localization.LocalLidarConsistency) input.ReadEnum();
            break;
          }
          case 16: {
            gnssConsistency_ = (global::Apollo.Localization.GnssConsistency) input.ReadEnum();
            break;
          }
          case 24: {
            localLidarStatus_ = (global::Apollo.Localization.LocalLidarStatus) input.ReadEnum();
            break;
          }
          case 32: {
            localLidarQuality_ = (global::Apollo.Localization.LocalLidarQuality) input.ReadEnum();
            break;
          }
          case 40: {
            gnssposPositionType_ = (global::Apollo.Localization.GnssPositionType) input.ReadEnum();
            break;
          }
          case 48: {
            msfRunningStatus_ = (global::Apollo.Localization.MsfRunningStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
