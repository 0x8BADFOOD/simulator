// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/calibration_table.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Control.Calibrationtable {

  /// <summary>Holder for reflection information generated from modules/control/proto/calibration_table.proto</summary>
  public static partial class CalibrationTableReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/control/proto/calibration_table.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CalibrationTableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1tb2R1bGVzL2NvbnRyb2wvcHJvdG8vY2FsaWJyYXRpb25fdGFibGUucHJv",
            "dG8SH2Fwb2xsby5jb250cm9sLmNhbGlicmF0aW9udGFibGUiZwoXQ29udHJv",
            "bENhbGlicmF0aW9uVGFibGUSTAoLY2FsaWJyYXRpb24YASADKAsyNy5hcG9s",
            "bG8uY29udHJvbC5jYWxpYnJhdGlvbnRhYmxlLkNvbnRyb2xDYWxpYnJhdGlv",
            "bkluZm8iTgoWQ29udHJvbENhbGlicmF0aW9uSW5mbxINCgVzcGVlZBgBIAEo",
            "ARIUCgxhY2NlbGVyYXRpb24YAiABKAESDwoHY29tbWFuZBgDIAEoAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.Calibrationtable.ControlCalibrationTable), global::Apollo.Control.Calibrationtable.ControlCalibrationTable.Parser, new[]{ "Calibration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.Calibrationtable.ControlCalibrationInfo), global::Apollo.Control.Calibrationtable.ControlCalibrationInfo.Parser, new[]{ "Speed", "Acceleration", "Command" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ControlCalibrationTable : pb::IMessage<ControlCalibrationTable> {
    private static readonly pb::MessageParser<ControlCalibrationTable> _parser = new pb::MessageParser<ControlCalibrationTable>(() => new ControlCalibrationTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlCalibrationTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.Calibrationtable.CalibrationTableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCalibrationTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCalibrationTable(ControlCalibrationTable other) : this() {
      calibration_ = other.calibration_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCalibrationTable Clone() {
      return new ControlCalibrationTable(this);
    }

    /// <summary>Field number for the "calibration" field.</summary>
    public const int CalibrationFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Control.Calibrationtable.ControlCalibrationInfo> _repeated_calibration_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Control.Calibrationtable.ControlCalibrationInfo.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Control.Calibrationtable.ControlCalibrationInfo> calibration_ = new pbc::RepeatedField<global::Apollo.Control.Calibrationtable.ControlCalibrationInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Control.Calibrationtable.ControlCalibrationInfo> Calibration {
      get { return calibration_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlCalibrationTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlCalibrationTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!calibration_.Equals(other.calibration_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= calibration_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      calibration_.WriteTo(output, _repeated_calibration_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += calibration_.CalculateSize(_repeated_calibration_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlCalibrationTable other) {
      if (other == null) {
        return;
      }
      calibration_.Add(other.calibration_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            calibration_.AddEntriesFrom(input, _repeated_calibration_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ControlCalibrationInfo : pb::IMessage<ControlCalibrationInfo> {
    private static readonly pb::MessageParser<ControlCalibrationInfo> _parser = new pb::MessageParser<ControlCalibrationInfo>(() => new ControlCalibrationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlCalibrationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.Calibrationtable.CalibrationTableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCalibrationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCalibrationInfo(ControlCalibrationInfo other) : this() {
      speed_ = other.speed_;
      acceleration_ = other.acceleration_;
      command_ = other.command_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCalibrationInfo Clone() {
      return new ControlCalibrationInfo(this);
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 1;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 2;
    private double acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 3;
    private double command_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlCalibrationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlCalibrationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Speed != other.Speed) return false;
      if (Acceleration != other.Acceleration) return false;
      if (Command != other.Command) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (Acceleration != 0D) hash ^= Acceleration.GetHashCode();
      if (Command != 0D) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Speed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Speed);
      }
      if (Acceleration != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Acceleration);
      }
      if (Command != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (Acceleration != 0D) {
        size += 1 + 8;
      }
      if (Command != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlCalibrationInfo other) {
      if (other == null) {
        return;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.Acceleration != 0D) {
        Acceleration = other.Acceleration;
      }
      if (other.Command != 0D) {
        Command = other.Command;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Speed = input.ReadDouble();
            break;
          }
          case 17: {
            Acceleration = input.ReadDouble();
            break;
          }
          case 25: {
            Command = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
