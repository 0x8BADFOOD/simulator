// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_cmd.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Control {

  /// <summary>Holder for reflection information generated from modules/control/proto/control_cmd.proto</summary>
  public static partial class ControlCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/control/proto/control_cmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControlCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cidtb2R1bGVzL2NvbnRyb2wvcHJvdG8vY29udHJvbF9jbWQucHJvdG8SDmFw",
            "b2xsby5jb250cm9sGiJtb2R1bGVzL2NhbmJ1cy9wcm90by9jaGFzc2lzLnBy",
            "b3RvGiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFkZXIucHJvdG8aKW1vZHVs",
            "ZXMvY29tbW9uL3Byb3RvL3ZlaGljbGVfc2lnbmFsLnByb3RvGiNtb2R1bGVz",
            "L2NvbnRyb2wvcHJvdG8vcGFkX21zZy5wcm90bxombW9kdWxlcy9jb21tb24v",
            "cHJvdG8vZHJpdmVfc3RhdGUucHJvdG8iXgoMTGF0ZW5jeVN0YXRzEhUKDXRv",
            "dGFsX3RpbWVfbXMYASABKAESGgoSY29udHJvbGxlcl90aW1lX21zGAIgAygB",
            "EhsKE3RvdGFsX3RpbWVfZXhjZWVkZWQYAyABKAgikAYKDkNvbnRyb2xDb21t",
            "YW5kEiUKBmhlYWRlchgBIAEoCzIVLmFwb2xsby5jb21tb24uSGVhZGVyEhAK",
            "CHRocm90dGxlGAMgASgBEg0KBWJyYWtlGAQgASgBEhUKDXN0ZWVyaW5nX3Jh",
            "dGUYBiABKAESFwoPc3RlZXJpbmdfdGFyZ2V0GAcgASgBEhUKDXBhcmtpbmdf",
            "YnJha2UYCCABKAgSDQoFc3BlZWQYCSABKAESFAoMYWNjZWxlcmF0aW9uGAog",
            "ASgBEhMKC3Jlc2V0X21vZGVsGBAgASgIEhUKDWVuZ2luZV9vbl9vZmYYESAB",
            "KAgSGwoTdHJhamVjdG9yeV9mcmFjdGlvbhgSIAEoARI4Cgxkcml2aW5nX21v",
            "ZGUYEyABKA4yIi5hcG9sbG8uY2FuYnVzLkNoYXNzaXMuRHJpdmluZ01vZGUS",
            "OgoNZ2Vhcl9sb2NhdGlvbhgUIAEoDjIjLmFwb2xsby5jYW5idXMuQ2hhc3Np",
            "cy5HZWFyUG9zaXRpb24SJAoFZGVidWcYFiABKAsyFS5hcG9sbG8uY29udHJv",
            "bC5EZWJ1ZxIsCgZzaWduYWwYFyABKAsyHC5hcG9sbG8uY29tbW9uLlZlaGlj",
            "bGVTaWduYWwSMwoNbGF0ZW5jeV9zdGF0cxgYIAEoCzIcLmFwb2xsby5jb250",
            "cm9sLkxhdGVuY3lTdGF0cxIrCgdwYWRfbXNnGBkgASgLMhouYXBvbGxvLmNv",
            "bnRyb2wuUGFkTWVzc2FnZRIyCg1lbmdhZ2VfYWR2aWNlGBogASgLMhsuYXBv",
            "bGxvLmNvbW1vbi5FbmdhZ2VBZHZpY2USFwoPaXNfaW5fc2FmZV9tb2RlGBsg",
            "ASgIEhEKCWxlZnRfdHVybhgNIAEoCBISCgpyaWdodF90dXJuGA4gASgIEhEK",
            "CWhpZ2hfYmVhbRgLIAEoCBIQCghsb3dfYmVhbRgMIAEoCBIMCgRob3JuGA8g",
            "ASgIEi4KCnR1cm5zaWduYWwYFSABKA4yGi5hcG9sbG8uY29udHJvbC5UdXJu",
            "U2lnbmFsIuEEChdTaW1wbGVMb25naXR1ZGluYWxEZWJ1ZxIZChFzdGF0aW9u",
            "X3JlZmVyZW5jZRgBIAEoARIVCg1zdGF0aW9uX2Vycm9yGAIgASgBEh0KFXN0",
            "YXRpb25fZXJyb3JfbGltaXRlZBgDIAEoARIdChVwcmV2aWV3X3N0YXRpb25f",
            "ZXJyb3IYBCABKAESFwoPc3BlZWRfcmVmZXJlbmNlGAUgASgBEhMKC3NwZWVk",
            "X2Vycm9yGAYgASgBEiYKHnNwZWVkX2NvbnRyb2xsZXJfaW5wdXRfbGltaXRl",
            "ZBgHIAEoARIfChdwcmV2aWV3X3NwZWVkX3JlZmVyZW5jZRgIIAEoARIbChNw",
            "cmV2aWV3X3NwZWVkX2Vycm9yGAkgASgBEiYKHnByZXZpZXdfYWNjZWxlcmF0",
            "aW9uX3JlZmVyZW5jZRgKIAEoARIiChphY2NlbGVyYXRpb25fY21kX2Nsb3Nl",
            "bG9vcBgLIAEoARIYChBhY2NlbGVyYXRpb25fY21kGAwgASgBEhsKE2FjY2Vs",
            "ZXJhdGlvbl9sb29rdXAYDSABKAESFAoMc3BlZWRfbG9va3VwGA4gASgBEhkK",
            "EWNhbGlicmF0aW9uX3ZhbHVlGA8gASgBEhQKDHRocm90dGxlX2NtZBgQIAEo",
            "ARIRCglicmFrZV9jbWQYESABKAESFAoMaXNfZnVsbF9zdG9wGBIgASgIEiEK",
            "GXNsb3BlX29mZnNldF9jb21wZW5zYXRpb24YEyABKAESFwoPY3VycmVudF9z",
            "dGF0aW9uGBQgASgBEhMKC3BhdGhfcmVtYWluGBUgASgBIoQEChJTaW1wbGVM",
            "YXRlcmFsRGVidWcSFQoNbGF0ZXJhbF9lcnJvchgBIAEoARITCgtyZWZfaGVh",
            "ZGluZxgCIAEoARIPCgdoZWFkaW5nGAMgASgBEhUKDWhlYWRpbmdfZXJyb3IY",
            "BCABKAESGgoSaGVhZGluZ19lcnJvcl9yYXRlGAUgASgBEhoKEmxhdGVyYWxf",
            "ZXJyb3JfcmF0ZRgGIAEoARIRCgljdXJ2YXR1cmUYByABKAESEwoLc3RlZXJf",
            "YW5nbGUYCCABKAESHwoXc3RlZXJfYW5nbGVfZmVlZGZvcndhcmQYCSABKAES",
            "KAogc3RlZXJfYW5nbGVfbGF0ZXJhbF9jb250cmlidXRpb24YCiABKAESLQol",
            "c3RlZXJfYW5nbGVfbGF0ZXJhbF9yYXRlX2NvbnRyaWJ1dGlvbhgLIAEoARIo",
            "CiBzdGVlcl9hbmdsZV9oZWFkaW5nX2NvbnRyaWJ1dGlvbhgMIAEoARItCiVz",
            "dGVlcl9hbmdsZV9oZWFkaW5nX3JhdGVfY29udHJpYnV0aW9uGA0gASgBEhwK",
            "FHN0ZWVyX2FuZ2xlX2ZlZWRiYWNrGA4gASgBEhkKEXN0ZWVyaW5nX3Bvc2l0",
            "aW9uGA8gASgBEhEKCXJlZl9zcGVlZBgQIAEoARIbChNzdGVlcl9hbmdsZV9s",
            "aW1pdGVkGBEgASgBIogHCg5TaW1wbGVNUENEZWJ1ZxIVCg1sYXRlcmFsX2Vy",
            "cm9yGAEgASgBEhMKC3JlZl9oZWFkaW5nGAIgASgBEg8KB2hlYWRpbmcYAyAB",
            "KAESFQoNaGVhZGluZ19lcnJvchgEIAEoARIaChJoZWFkaW5nX2Vycm9yX3Jh",
            "dGUYBSABKAESGgoSbGF0ZXJhbF9lcnJvcl9yYXRlGAYgASgBEhEKCWN1cnZh",
            "dHVyZRgHIAEoARITCgtzdGVlcl9hbmdsZRgIIAEoARIfChdzdGVlcl9hbmds",
            "ZV9mZWVkZm9yd2FyZBgJIAEoARIoCiBzdGVlcl9hbmdsZV9sYXRlcmFsX2Nv",
            "bnRyaWJ1dGlvbhgKIAEoARItCiVzdGVlcl9hbmdsZV9sYXRlcmFsX3JhdGVf",
            "Y29udHJpYnV0aW9uGAsgASgBEigKIHN0ZWVyX2FuZ2xlX2hlYWRpbmdfY29u",
            "dHJpYnV0aW9uGAwgASgBEi0KJXN0ZWVyX2FuZ2xlX2hlYWRpbmdfcmF0ZV9j",
            "b250cmlidXRpb24YDSABKAESHAoUc3RlZXJfYW5nbGVfZmVlZGJhY2sYDiAB",
            "KAESGQoRc3RlZXJpbmdfcG9zaXRpb24YDyABKAESEQoJcmVmX3NwZWVkGBAg",
            "ASgBEhsKE3N0ZWVyX2FuZ2xlX2xpbWl0ZWQYESABKAESGQoRc3RhdGlvbl9y",
            "ZWZlcmVuY2UYEiABKAESFQoNc3RhdGlvbl9lcnJvchgTIAEoARIXCg9zcGVl",
            "ZF9yZWZlcmVuY2UYFCABKAESEwoLc3BlZWRfZXJyb3IYFSABKAESHgoWYWNj",
            "ZWxlcmF0aW9uX3JlZmVyZW5jZRgWIAEoARIUCgxpc19mdWxsX3N0b3AYFyAB",
            "KAgSGAoQc3RhdGlvbl9mZWVkYmFjaxgYIAEoARIWCg5zcGVlZF9mZWVkYmFj",
            "axgZIAEoARIiChphY2NlbGVyYXRpb25fY21kX2Nsb3NlbG9vcBgaIAEoARIY",
            "ChBhY2NlbGVyYXRpb25fY21kGBsgASgBEhsKE2FjY2VsZXJhdGlvbl9sb29r",
            "dXAYHCABKAESFAoMc3BlZWRfbG9va3VwGB0gASgBEhkKEWNhbGlicmF0aW9u",
            "X3ZhbHVlGB4gASgBEhgKEG1hdHJpeF9xX3VwZGF0ZWQYHyADKAESGAoQbWF0",
            "cml4X3JfdXBkYXRlZBggIAMoASKgAQoKSW5wdXREZWJ1ZxIyChNsb2NhbGl6",
            "YXRpb25faGVhZGVyGAEgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFkZXISLAoN",
            "Y2FuYnVzX2hlYWRlchgCIAEoCzIVLmFwb2xsby5jb21tb24uSGVhZGVyEjAK",
            "EXRyYWplY3RvcnlfaGVhZGVyGAMgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFk",
            "ZXIi8wEKBURlYnVnEkEKEHNpbXBsZV9sb25fZGVidWcYASABKAsyJy5hcG9s",
            "bG8uY29udHJvbC5TaW1wbGVMb25naXR1ZGluYWxEZWJ1ZxI8ChBzaW1wbGVf",
            "bGF0X2RlYnVnGAIgASgLMiIuYXBvbGxvLmNvbnRyb2wuU2ltcGxlTGF0ZXJh",
            "bERlYnVnEi8KC2lucHV0X2RlYnVnGAMgASgLMhouYXBvbGxvLmNvbnRyb2wu",
            "SW5wdXREZWJ1ZxI4ChBzaW1wbGVfbXBjX2RlYnVnGAQgASgLMh4uYXBvbGxv",
            "LmNvbnRyb2wuU2ltcGxlTVBDRGVidWcqOgoKVHVyblNpZ25hbBINCglUVVJO",
            "X05PTkUQABINCglUVVJOX0xFRlQQARIOCgpUVVJOX1JJR0hUEAJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Canbus.ChassisReflection.Descriptor, global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.VehicleSignalReflection.Descriptor, global::Apollo.Control.PadMsgReflection.Descriptor, global::Apollo.Common.DriveStateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Control.TurnSignal), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.LatencyStats), global::Apollo.Control.LatencyStats.Parser, new[]{ "TotalTimeMs", "ControllerTimeMs", "TotalTimeExceeded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.ControlCommand), global::Apollo.Control.ControlCommand.Parser, new[]{ "Header", "Throttle", "Brake", "SteeringRate", "SteeringTarget", "ParkingBrake", "Speed", "Acceleration", "ResetModel", "EngineOnOff", "TrajectoryFraction", "DrivingMode", "GearLocation", "Debug", "Signal", "LatencyStats", "PadMsg", "EngageAdvice", "IsInSafeMode", "LeftTurn", "RightTurn", "HighBeam", "LowBeam", "Horn", "Turnsignal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.SimpleLongitudinalDebug), global::Apollo.Control.SimpleLongitudinalDebug.Parser, new[]{ "StationReference", "StationError", "StationErrorLimited", "PreviewStationError", "SpeedReference", "SpeedError", "SpeedControllerInputLimited", "PreviewSpeedReference", "PreviewSpeedError", "PreviewAccelerationReference", "AccelerationCmdCloseloop", "AccelerationCmd", "AccelerationLookup", "SpeedLookup", "CalibrationValue", "ThrottleCmd", "BrakeCmd", "IsFullStop", "SlopeOffsetCompensation", "CurrentStation", "PathRemain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.SimpleLateralDebug), global::Apollo.Control.SimpleLateralDebug.Parser, new[]{ "LateralError", "RefHeading", "Heading", "HeadingError", "HeadingErrorRate", "LateralErrorRate", "Curvature", "SteerAngle", "SteerAngleFeedforward", "SteerAngleLateralContribution", "SteerAngleLateralRateContribution", "SteerAngleHeadingContribution", "SteerAngleHeadingRateContribution", "SteerAngleFeedback", "SteeringPosition", "RefSpeed", "SteerAngleLimited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.SimpleMPCDebug), global::Apollo.Control.SimpleMPCDebug.Parser, new[]{ "LateralError", "RefHeading", "Heading", "HeadingError", "HeadingErrorRate", "LateralErrorRate", "Curvature", "SteerAngle", "SteerAngleFeedforward", "SteerAngleLateralContribution", "SteerAngleLateralRateContribution", "SteerAngleHeadingContribution", "SteerAngleHeadingRateContribution", "SteerAngleFeedback", "SteeringPosition", "RefSpeed", "SteerAngleLimited", "StationReference", "StationError", "SpeedReference", "SpeedError", "AccelerationReference", "IsFullStop", "StationFeedback", "SpeedFeedback", "AccelerationCmdCloseloop", "AccelerationCmd", "AccelerationLookup", "SpeedLookup", "CalibrationValue", "MatrixQUpdated", "MatrixRUpdated" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.InputDebug), global::Apollo.Control.InputDebug.Parser, new[]{ "LocalizationHeader", "CanbusHeader", "TrajectoryHeader" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.Debug), global::Apollo.Control.Debug.Parser, new[]{ "SimpleLonDebug", "SimpleLatDebug", "InputDebug", "SimpleMpcDebug" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TurnSignal {
    [pbr::OriginalName("TURN_NONE")] TurnNone = 0,
    [pbr::OriginalName("TURN_LEFT")] TurnLeft = 1,
    [pbr::OriginalName("TURN_RIGHT")] TurnRight = 2,
  }

  #endregion

  #region Messages
  public sealed partial class LatencyStats : pb::IMessage<LatencyStats> {
    private static readonly pb::MessageParser<LatencyStats> _parser = new pb::MessageParser<LatencyStats>(() => new LatencyStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatencyStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.ControlCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatencyStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatencyStats(LatencyStats other) : this() {
      totalTimeMs_ = other.totalTimeMs_;
      controllerTimeMs_ = other.controllerTimeMs_.Clone();
      totalTimeExceeded_ = other.totalTimeExceeded_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatencyStats Clone() {
      return new LatencyStats(this);
    }

    /// <summary>Field number for the "total_time_ms" field.</summary>
    public const int TotalTimeMsFieldNumber = 1;
    private double totalTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalTimeMs {
      get { return totalTimeMs_; }
      set {
        totalTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "controller_time_ms" field.</summary>
    public const int ControllerTimeMsFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_controllerTimeMs_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> controllerTimeMs_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ControllerTimeMs {
      get { return controllerTimeMs_; }
    }

    /// <summary>Field number for the "total_time_exceeded" field.</summary>
    public const int TotalTimeExceededFieldNumber = 3;
    private bool totalTimeExceeded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TotalTimeExceeded {
      get { return totalTimeExceeded_; }
      set {
        totalTimeExceeded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatencyStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatencyStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalTimeMs != other.TotalTimeMs) return false;
      if(!controllerTimeMs_.Equals(other.controllerTimeMs_)) return false;
      if (TotalTimeExceeded != other.TotalTimeExceeded) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalTimeMs != 0D) hash ^= TotalTimeMs.GetHashCode();
      hash ^= controllerTimeMs_.GetHashCode();
      if (TotalTimeExceeded != false) hash ^= TotalTimeExceeded.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalTimeMs != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TotalTimeMs);
      }
      controllerTimeMs_.WriteTo(output, _repeated_controllerTimeMs_codec);
      if (TotalTimeExceeded != false) {
        output.WriteRawTag(24);
        output.WriteBool(TotalTimeExceeded);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalTimeMs != 0D) {
        size += 1 + 8;
      }
      size += controllerTimeMs_.CalculateSize(_repeated_controllerTimeMs_codec);
      if (TotalTimeExceeded != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatencyStats other) {
      if (other == null) {
        return;
      }
      if (other.TotalTimeMs != 0D) {
        TotalTimeMs = other.TotalTimeMs;
      }
      controllerTimeMs_.Add(other.controllerTimeMs_);
      if (other.TotalTimeExceeded != false) {
        TotalTimeExceeded = other.TotalTimeExceeded;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TotalTimeMs = input.ReadDouble();
            break;
          }
          case 18:
          case 17: {
            controllerTimeMs_.AddEntriesFrom(input, _repeated_controllerTimeMs_codec);
            break;
          }
          case 24: {
            TotalTimeExceeded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// next id : 27
  /// </summary>
  public sealed partial class ControlCommand : pb::IMessage<ControlCommand> {
    private static readonly pb::MessageParser<ControlCommand> _parser = new pb::MessageParser<ControlCommand>(() => new ControlCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.ControlCmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCommand(ControlCommand other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      throttle_ = other.throttle_;
      brake_ = other.brake_;
      steeringRate_ = other.steeringRate_;
      steeringTarget_ = other.steeringTarget_;
      parkingBrake_ = other.parkingBrake_;
      speed_ = other.speed_;
      acceleration_ = other.acceleration_;
      resetModel_ = other.resetModel_;
      engineOnOff_ = other.engineOnOff_;
      trajectoryFraction_ = other.trajectoryFraction_;
      drivingMode_ = other.drivingMode_;
      gearLocation_ = other.gearLocation_;
      Debug = other.debug_ != null ? other.Debug.Clone() : null;
      Signal = other.signal_ != null ? other.Signal.Clone() : null;
      LatencyStats = other.latencyStats_ != null ? other.LatencyStats.Clone() : null;
      PadMsg = other.padMsg_ != null ? other.PadMsg.Clone() : null;
      EngageAdvice = other.engageAdvice_ != null ? other.EngageAdvice.Clone() : null;
      isInSafeMode_ = other.isInSafeMode_;
      leftTurn_ = other.leftTurn_;
      rightTurn_ = other.rightTurn_;
      highBeam_ = other.highBeam_;
      lowBeam_ = other.lowBeam_;
      horn_ = other.horn_;
      turnsignal_ = other.turnsignal_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlCommand Clone() {
      return new ControlCommand(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "throttle" field.</summary>
    public const int ThrottleFieldNumber = 3;
    private double throttle_;
    /// <summary>
    /// target throttle in percentage 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Throttle {
      get { return throttle_; }
      set {
        throttle_ = value;
      }
    }

    /// <summary>Field number for the "brake" field.</summary>
    public const int BrakeFieldNumber = 4;
    private double brake_;
    /// <summary>
    /// target brake in percentage 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Brake {
      get { return brake_; }
      set {
        brake_ = value;
      }
    }

    /// <summary>Field number for the "steering_rate" field.</summary>
    public const int SteeringRateFieldNumber = 6;
    private double steeringRate_;
    /// <summary>
    /// target non-directional steering rate, in percentage of full scale per
    /// second 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringRate {
      get { return steeringRate_; }
      set {
        steeringRate_ = value;
      }
    }

    /// <summary>Field number for the "steering_target" field.</summary>
    public const int SteeringTargetFieldNumber = 7;
    private double steeringTarget_;
    /// <summary>
    /// target steering angle, in percentage of full scale 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringTarget {
      get { return steeringTarget_; }
      set {
        steeringTarget_ = value;
      }
    }

    /// <summary>Field number for the "parking_brake" field.</summary>
    public const int ParkingBrakeFieldNumber = 8;
    private bool parkingBrake_;
    /// <summary>
    /// parking brake engage. true: engaged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ParkingBrake {
      get { return parkingBrake_; }
      set {
        parkingBrake_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 9;
    private double speed_;
    /// <summary>
    /// target speed, in m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 10;
    private double acceleration_;
    /// <summary>
    /// target acceleration in m`s^-2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "reset_model" field.</summary>
    public const int ResetModelFieldNumber = 16;
    private bool resetModel_;
    /// <summary>
    /// model reset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResetModel {
      get { return resetModel_; }
      set {
        resetModel_ = value;
      }
    }

    /// <summary>Field number for the "engine_on_off" field.</summary>
    public const int EngineOnOffFieldNumber = 17;
    private bool engineOnOff_;
    /// <summary>
    /// engine on/off, true: engine on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EngineOnOff {
      get { return engineOnOff_; }
      set {
        engineOnOff_ = value;
      }
    }

    /// <summary>Field number for the "trajectory_fraction" field.</summary>
    public const int TrajectoryFractionFieldNumber = 18;
    private double trajectoryFraction_;
    /// <summary>
    /// completion percentage of trajectory planned in last cycle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrajectoryFraction {
      get { return trajectoryFraction_; }
      set {
        trajectoryFraction_ = value;
      }
    }

    /// <summary>Field number for the "driving_mode" field.</summary>
    public const int DrivingModeFieldNumber = 19;
    private global::Apollo.Canbus.Chassis.Types.DrivingMode drivingMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.DrivingMode DrivingMode {
      get { return drivingMode_; }
      set {
        drivingMode_ = value;
      }
    }

    /// <summary>Field number for the "gear_location" field.</summary>
    public const int GearLocationFieldNumber = 20;
    private global::Apollo.Canbus.Chassis.Types.GearPosition gearLocation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.GearPosition GearLocation {
      get { return gearLocation_; }
      set {
        gearLocation_ = value;
      }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 22;
    private global::Apollo.Control.Debug debug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.Debug Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    /// <summary>Field number for the "signal" field.</summary>
    public const int SignalFieldNumber = 23;
    private global::Apollo.Common.VehicleSignal signal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleSignal Signal {
      get { return signal_; }
      set {
        signal_ = value;
      }
    }

    /// <summary>Field number for the "latency_stats" field.</summary>
    public const int LatencyStatsFieldNumber = 24;
    private global::Apollo.Control.LatencyStats latencyStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.LatencyStats LatencyStats {
      get { return latencyStats_; }
      set {
        latencyStats_ = value;
      }
    }

    /// <summary>Field number for the "pad_msg" field.</summary>
    public const int PadMsgFieldNumber = 25;
    private global::Apollo.Control.PadMessage padMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.PadMessage PadMsg {
      get { return padMsg_; }
      set {
        padMsg_ = value;
      }
    }

    /// <summary>Field number for the "engage_advice" field.</summary>
    public const int EngageAdviceFieldNumber = 26;
    private global::Apollo.Common.EngageAdvice engageAdvice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.EngageAdvice EngageAdvice {
      get { return engageAdvice_; }
      set {
        engageAdvice_ = value;
      }
    }

    /// <summary>Field number for the "is_in_safe_mode" field.</summary>
    public const int IsInSafeModeFieldNumber = 27;
    private bool isInSafeMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInSafeMode {
      get { return isInSafeMode_; }
      set {
        isInSafeMode_ = value;
      }
    }

    /// <summary>Field number for the "left_turn" field.</summary>
    public const int LeftTurnFieldNumber = 13;
    private bool leftTurn_;
    /// <summary>
    /// deprecated fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftTurn {
      get { return leftTurn_; }
      set {
        leftTurn_ = value;
      }
    }

    /// <summary>Field number for the "right_turn" field.</summary>
    public const int RightTurnFieldNumber = 14;
    private bool rightTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RightTurn {
      get { return rightTurn_; }
      set {
        rightTurn_ = value;
      }
    }

    /// <summary>Field number for the "high_beam" field.</summary>
    public const int HighBeamFieldNumber = 11;
    private bool highBeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HighBeam {
      get { return highBeam_; }
      set {
        highBeam_ = value;
      }
    }

    /// <summary>Field number for the "low_beam" field.</summary>
    public const int LowBeamFieldNumber = 12;
    private bool lowBeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowBeam {
      get { return lowBeam_; }
      set {
        lowBeam_ = value;
      }
    }

    /// <summary>Field number for the "horn" field.</summary>
    public const int HornFieldNumber = 15;
    private bool horn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Horn {
      get { return horn_; }
      set {
        horn_ = value;
      }
    }

    /// <summary>Field number for the "turnsignal" field.</summary>
    public const int TurnsignalFieldNumber = 21;
    private global::Apollo.Control.TurnSignal turnsignal_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.TurnSignal Turnsignal {
      get { return turnsignal_; }
      set {
        turnsignal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Throttle != other.Throttle) return false;
      if (Brake != other.Brake) return false;
      if (SteeringRate != other.SteeringRate) return false;
      if (SteeringTarget != other.SteeringTarget) return false;
      if (ParkingBrake != other.ParkingBrake) return false;
      if (Speed != other.Speed) return false;
      if (Acceleration != other.Acceleration) return false;
      if (ResetModel != other.ResetModel) return false;
      if (EngineOnOff != other.EngineOnOff) return false;
      if (TrajectoryFraction != other.TrajectoryFraction) return false;
      if (DrivingMode != other.DrivingMode) return false;
      if (GearLocation != other.GearLocation) return false;
      if (!object.Equals(Debug, other.Debug)) return false;
      if (!object.Equals(Signal, other.Signal)) return false;
      if (!object.Equals(LatencyStats, other.LatencyStats)) return false;
      if (!object.Equals(PadMsg, other.PadMsg)) return false;
      if (!object.Equals(EngageAdvice, other.EngageAdvice)) return false;
      if (IsInSafeMode != other.IsInSafeMode) return false;
      if (LeftTurn != other.LeftTurn) return false;
      if (RightTurn != other.RightTurn) return false;
      if (HighBeam != other.HighBeam) return false;
      if (LowBeam != other.LowBeam) return false;
      if (Horn != other.Horn) return false;
      if (Turnsignal != other.Turnsignal) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Throttle != 0D) hash ^= Throttle.GetHashCode();
      if (Brake != 0D) hash ^= Brake.GetHashCode();
      if (SteeringRate != 0D) hash ^= SteeringRate.GetHashCode();
      if (SteeringTarget != 0D) hash ^= SteeringTarget.GetHashCode();
      if (ParkingBrake != false) hash ^= ParkingBrake.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (Acceleration != 0D) hash ^= Acceleration.GetHashCode();
      if (ResetModel != false) hash ^= ResetModel.GetHashCode();
      if (EngineOnOff != false) hash ^= EngineOnOff.GetHashCode();
      if (TrajectoryFraction != 0D) hash ^= TrajectoryFraction.GetHashCode();
      if (DrivingMode != 0) hash ^= DrivingMode.GetHashCode();
      if (GearLocation != 0) hash ^= GearLocation.GetHashCode();
      if (debug_ != null) hash ^= Debug.GetHashCode();
      if (signal_ != null) hash ^= Signal.GetHashCode();
      if (latencyStats_ != null) hash ^= LatencyStats.GetHashCode();
      if (padMsg_ != null) hash ^= PadMsg.GetHashCode();
      if (engageAdvice_ != null) hash ^= EngageAdvice.GetHashCode();
      if (IsInSafeMode != false) hash ^= IsInSafeMode.GetHashCode();
      if (LeftTurn != false) hash ^= LeftTurn.GetHashCode();
      if (RightTurn != false) hash ^= RightTurn.GetHashCode();
      if (HighBeam != false) hash ^= HighBeam.GetHashCode();
      if (LowBeam != false) hash ^= LowBeam.GetHashCode();
      if (Horn != false) hash ^= Horn.GetHashCode();
      if (Turnsignal != 0) hash ^= Turnsignal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Throttle != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Throttle);
      }
      if (Brake != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Brake);
      }
      if (SteeringRate != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SteeringRate);
      }
      if (SteeringTarget != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(SteeringTarget);
      }
      if (ParkingBrake != false) {
        output.WriteRawTag(64);
        output.WriteBool(ParkingBrake);
      }
      if (Speed != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Speed);
      }
      if (Acceleration != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Acceleration);
      }
      if (HighBeam != false) {
        output.WriteRawTag(88);
        output.WriteBool(HighBeam);
      }
      if (LowBeam != false) {
        output.WriteRawTag(96);
        output.WriteBool(LowBeam);
      }
      if (LeftTurn != false) {
        output.WriteRawTag(104);
        output.WriteBool(LeftTurn);
      }
      if (RightTurn != false) {
        output.WriteRawTag(112);
        output.WriteBool(RightTurn);
      }
      if (Horn != false) {
        output.WriteRawTag(120);
        output.WriteBool(Horn);
      }
      if (ResetModel != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(ResetModel);
      }
      if (EngineOnOff != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(EngineOnOff);
      }
      if (TrajectoryFraction != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(TrajectoryFraction);
      }
      if (DrivingMode != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) DrivingMode);
      }
      if (GearLocation != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) GearLocation);
      }
      if (Turnsignal != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Turnsignal);
      }
      if (debug_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Debug);
      }
      if (signal_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Signal);
      }
      if (latencyStats_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(LatencyStats);
      }
      if (padMsg_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PadMsg);
      }
      if (engageAdvice_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(EngageAdvice);
      }
      if (IsInSafeMode != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsInSafeMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Throttle != 0D) {
        size += 1 + 8;
      }
      if (Brake != 0D) {
        size += 1 + 8;
      }
      if (SteeringRate != 0D) {
        size += 1 + 8;
      }
      if (SteeringTarget != 0D) {
        size += 1 + 8;
      }
      if (ParkingBrake != false) {
        size += 1 + 1;
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (Acceleration != 0D) {
        size += 1 + 8;
      }
      if (ResetModel != false) {
        size += 2 + 1;
      }
      if (EngineOnOff != false) {
        size += 2 + 1;
      }
      if (TrajectoryFraction != 0D) {
        size += 2 + 8;
      }
      if (DrivingMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingMode);
      }
      if (GearLocation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GearLocation);
      }
      if (debug_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Debug);
      }
      if (signal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Signal);
      }
      if (latencyStats_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LatencyStats);
      }
      if (padMsg_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PadMsg);
      }
      if (engageAdvice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EngageAdvice);
      }
      if (IsInSafeMode != false) {
        size += 2 + 1;
      }
      if (LeftTurn != false) {
        size += 1 + 1;
      }
      if (RightTurn != false) {
        size += 1 + 1;
      }
      if (HighBeam != false) {
        size += 1 + 1;
      }
      if (LowBeam != false) {
        size += 1 + 1;
      }
      if (Horn != false) {
        size += 1 + 1;
      }
      if (Turnsignal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Turnsignal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlCommand other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Throttle != 0D) {
        Throttle = other.Throttle;
      }
      if (other.Brake != 0D) {
        Brake = other.Brake;
      }
      if (other.SteeringRate != 0D) {
        SteeringRate = other.SteeringRate;
      }
      if (other.SteeringTarget != 0D) {
        SteeringTarget = other.SteeringTarget;
      }
      if (other.ParkingBrake != false) {
        ParkingBrake = other.ParkingBrake;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.Acceleration != 0D) {
        Acceleration = other.Acceleration;
      }
      if (other.ResetModel != false) {
        ResetModel = other.ResetModel;
      }
      if (other.EngineOnOff != false) {
        EngineOnOff = other.EngineOnOff;
      }
      if (other.TrajectoryFraction != 0D) {
        TrajectoryFraction = other.TrajectoryFraction;
      }
      if (other.DrivingMode != 0) {
        DrivingMode = other.DrivingMode;
      }
      if (other.GearLocation != 0) {
        GearLocation = other.GearLocation;
      }
      if (other.debug_ != null) {
        if (debug_ == null) {
          debug_ = new global::Apollo.Control.Debug();
        }
        Debug.MergeFrom(other.Debug);
      }
      if (other.signal_ != null) {
        if (signal_ == null) {
          signal_ = new global::Apollo.Common.VehicleSignal();
        }
        Signal.MergeFrom(other.Signal);
      }
      if (other.latencyStats_ != null) {
        if (latencyStats_ == null) {
          latencyStats_ = new global::Apollo.Control.LatencyStats();
        }
        LatencyStats.MergeFrom(other.LatencyStats);
      }
      if (other.padMsg_ != null) {
        if (padMsg_ == null) {
          padMsg_ = new global::Apollo.Control.PadMessage();
        }
        PadMsg.MergeFrom(other.PadMsg);
      }
      if (other.engageAdvice_ != null) {
        if (engageAdvice_ == null) {
          engageAdvice_ = new global::Apollo.Common.EngageAdvice();
        }
        EngageAdvice.MergeFrom(other.EngageAdvice);
      }
      if (other.IsInSafeMode != false) {
        IsInSafeMode = other.IsInSafeMode;
      }
      if (other.LeftTurn != false) {
        LeftTurn = other.LeftTurn;
      }
      if (other.RightTurn != false) {
        RightTurn = other.RightTurn;
      }
      if (other.HighBeam != false) {
        HighBeam = other.HighBeam;
      }
      if (other.LowBeam != false) {
        LowBeam = other.LowBeam;
      }
      if (other.Horn != false) {
        Horn = other.Horn;
      }
      if (other.Turnsignal != 0) {
        Turnsignal = other.Turnsignal;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 25: {
            Throttle = input.ReadDouble();
            break;
          }
          case 33: {
            Brake = input.ReadDouble();
            break;
          }
          case 49: {
            SteeringRate = input.ReadDouble();
            break;
          }
          case 57: {
            SteeringTarget = input.ReadDouble();
            break;
          }
          case 64: {
            ParkingBrake = input.ReadBool();
            break;
          }
          case 73: {
            Speed = input.ReadDouble();
            break;
          }
          case 81: {
            Acceleration = input.ReadDouble();
            break;
          }
          case 88: {
            HighBeam = input.ReadBool();
            break;
          }
          case 96: {
            LowBeam = input.ReadBool();
            break;
          }
          case 104: {
            LeftTurn = input.ReadBool();
            break;
          }
          case 112: {
            RightTurn = input.ReadBool();
            break;
          }
          case 120: {
            Horn = input.ReadBool();
            break;
          }
          case 128: {
            ResetModel = input.ReadBool();
            break;
          }
          case 136: {
            EngineOnOff = input.ReadBool();
            break;
          }
          case 145: {
            TrajectoryFraction = input.ReadDouble();
            break;
          }
          case 152: {
            drivingMode_ = (global::Apollo.Canbus.Chassis.Types.DrivingMode) input.ReadEnum();
            break;
          }
          case 160: {
            gearLocation_ = (global::Apollo.Canbus.Chassis.Types.GearPosition) input.ReadEnum();
            break;
          }
          case 168: {
            turnsignal_ = (global::Apollo.Control.TurnSignal) input.ReadEnum();
            break;
          }
          case 178: {
            if (debug_ == null) {
              debug_ = new global::Apollo.Control.Debug();
            }
            input.ReadMessage(debug_);
            break;
          }
          case 186: {
            if (signal_ == null) {
              signal_ = new global::Apollo.Common.VehicleSignal();
            }
            input.ReadMessage(signal_);
            break;
          }
          case 194: {
            if (latencyStats_ == null) {
              latencyStats_ = new global::Apollo.Control.LatencyStats();
            }
            input.ReadMessage(latencyStats_);
            break;
          }
          case 202: {
            if (padMsg_ == null) {
              padMsg_ = new global::Apollo.Control.PadMessage();
            }
            input.ReadMessage(padMsg_);
            break;
          }
          case 210: {
            if (engageAdvice_ == null) {
              engageAdvice_ = new global::Apollo.Common.EngageAdvice();
            }
            input.ReadMessage(engageAdvice_);
            break;
          }
          case 216: {
            IsInSafeMode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleLongitudinalDebug : pb::IMessage<SimpleLongitudinalDebug> {
    private static readonly pb::MessageParser<SimpleLongitudinalDebug> _parser = new pb::MessageParser<SimpleLongitudinalDebug>(() => new SimpleLongitudinalDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleLongitudinalDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.ControlCmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongitudinalDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongitudinalDebug(SimpleLongitudinalDebug other) : this() {
      stationReference_ = other.stationReference_;
      stationError_ = other.stationError_;
      stationErrorLimited_ = other.stationErrorLimited_;
      previewStationError_ = other.previewStationError_;
      speedReference_ = other.speedReference_;
      speedError_ = other.speedError_;
      speedControllerInputLimited_ = other.speedControllerInputLimited_;
      previewSpeedReference_ = other.previewSpeedReference_;
      previewSpeedError_ = other.previewSpeedError_;
      previewAccelerationReference_ = other.previewAccelerationReference_;
      accelerationCmdCloseloop_ = other.accelerationCmdCloseloop_;
      accelerationCmd_ = other.accelerationCmd_;
      accelerationLookup_ = other.accelerationLookup_;
      speedLookup_ = other.speedLookup_;
      calibrationValue_ = other.calibrationValue_;
      throttleCmd_ = other.throttleCmd_;
      brakeCmd_ = other.brakeCmd_;
      isFullStop_ = other.isFullStop_;
      slopeOffsetCompensation_ = other.slopeOffsetCompensation_;
      currentStation_ = other.currentStation_;
      pathRemain_ = other.pathRemain_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongitudinalDebug Clone() {
      return new SimpleLongitudinalDebug(this);
    }

    /// <summary>Field number for the "station_reference" field.</summary>
    public const int StationReferenceFieldNumber = 1;
    private double stationReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationReference {
      get { return stationReference_; }
      set {
        stationReference_ = value;
      }
    }

    /// <summary>Field number for the "station_error" field.</summary>
    public const int StationErrorFieldNumber = 2;
    private double stationError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationError {
      get { return stationError_; }
      set {
        stationError_ = value;
      }
    }

    /// <summary>Field number for the "station_error_limited" field.</summary>
    public const int StationErrorLimitedFieldNumber = 3;
    private double stationErrorLimited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationErrorLimited {
      get { return stationErrorLimited_; }
      set {
        stationErrorLimited_ = value;
      }
    }

    /// <summary>Field number for the "preview_station_error" field.</summary>
    public const int PreviewStationErrorFieldNumber = 4;
    private double previewStationError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreviewStationError {
      get { return previewStationError_; }
      set {
        previewStationError_ = value;
      }
    }

    /// <summary>Field number for the "speed_reference" field.</summary>
    public const int SpeedReferenceFieldNumber = 5;
    private double speedReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedReference {
      get { return speedReference_; }
      set {
        speedReference_ = value;
      }
    }

    /// <summary>Field number for the "speed_error" field.</summary>
    public const int SpeedErrorFieldNumber = 6;
    private double speedError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedError {
      get { return speedError_; }
      set {
        speedError_ = value;
      }
    }

    /// <summary>Field number for the "speed_controller_input_limited" field.</summary>
    public const int SpeedControllerInputLimitedFieldNumber = 7;
    private double speedControllerInputLimited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedControllerInputLimited {
      get { return speedControllerInputLimited_; }
      set {
        speedControllerInputLimited_ = value;
      }
    }

    /// <summary>Field number for the "preview_speed_reference" field.</summary>
    public const int PreviewSpeedReferenceFieldNumber = 8;
    private double previewSpeedReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreviewSpeedReference {
      get { return previewSpeedReference_; }
      set {
        previewSpeedReference_ = value;
      }
    }

    /// <summary>Field number for the "preview_speed_error" field.</summary>
    public const int PreviewSpeedErrorFieldNumber = 9;
    private double previewSpeedError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreviewSpeedError {
      get { return previewSpeedError_; }
      set {
        previewSpeedError_ = value;
      }
    }

    /// <summary>Field number for the "preview_acceleration_reference" field.</summary>
    public const int PreviewAccelerationReferenceFieldNumber = 10;
    private double previewAccelerationReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreviewAccelerationReference {
      get { return previewAccelerationReference_; }
      set {
        previewAccelerationReference_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_cmd_closeloop" field.</summary>
    public const int AccelerationCmdCloseloopFieldNumber = 11;
    private double accelerationCmdCloseloop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationCmdCloseloop {
      get { return accelerationCmdCloseloop_; }
      set {
        accelerationCmdCloseloop_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_cmd" field.</summary>
    public const int AccelerationCmdFieldNumber = 12;
    private double accelerationCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationCmd {
      get { return accelerationCmd_; }
      set {
        accelerationCmd_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_lookup" field.</summary>
    public const int AccelerationLookupFieldNumber = 13;
    private double accelerationLookup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationLookup {
      get { return accelerationLookup_; }
      set {
        accelerationLookup_ = value;
      }
    }

    /// <summary>Field number for the "speed_lookup" field.</summary>
    public const int SpeedLookupFieldNumber = 14;
    private double speedLookup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLookup {
      get { return speedLookup_; }
      set {
        speedLookup_ = value;
      }
    }

    /// <summary>Field number for the "calibration_value" field.</summary>
    public const int CalibrationValueFieldNumber = 15;
    private double calibrationValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CalibrationValue {
      get { return calibrationValue_; }
      set {
        calibrationValue_ = value;
      }
    }

    /// <summary>Field number for the "throttle_cmd" field.</summary>
    public const int ThrottleCmdFieldNumber = 16;
    private double throttleCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThrottleCmd {
      get { return throttleCmd_; }
      set {
        throttleCmd_ = value;
      }
    }

    /// <summary>Field number for the "brake_cmd" field.</summary>
    public const int BrakeCmdFieldNumber = 17;
    private double brakeCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeCmd {
      get { return brakeCmd_; }
      set {
        brakeCmd_ = value;
      }
    }

    /// <summary>Field number for the "is_full_stop" field.</summary>
    public const int IsFullStopFieldNumber = 18;
    private bool isFullStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFullStop {
      get { return isFullStop_; }
      set {
        isFullStop_ = value;
      }
    }

    /// <summary>Field number for the "slope_offset_compensation" field.</summary>
    public const int SlopeOffsetCompensationFieldNumber = 19;
    private double slopeOffsetCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SlopeOffsetCompensation {
      get { return slopeOffsetCompensation_; }
      set {
        slopeOffsetCompensation_ = value;
      }
    }

    /// <summary>Field number for the "current_station" field.</summary>
    public const int CurrentStationFieldNumber = 20;
    private double currentStation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentStation {
      get { return currentStation_; }
      set {
        currentStation_ = value;
      }
    }

    /// <summary>Field number for the "path_remain" field.</summary>
    public const int PathRemainFieldNumber = 21;
    private double pathRemain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathRemain {
      get { return pathRemain_; }
      set {
        pathRemain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleLongitudinalDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleLongitudinalDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationReference != other.StationReference) return false;
      if (StationError != other.StationError) return false;
      if (StationErrorLimited != other.StationErrorLimited) return false;
      if (PreviewStationError != other.PreviewStationError) return false;
      if (SpeedReference != other.SpeedReference) return false;
      if (SpeedError != other.SpeedError) return false;
      if (SpeedControllerInputLimited != other.SpeedControllerInputLimited) return false;
      if (PreviewSpeedReference != other.PreviewSpeedReference) return false;
      if (PreviewSpeedError != other.PreviewSpeedError) return false;
      if (PreviewAccelerationReference != other.PreviewAccelerationReference) return false;
      if (AccelerationCmdCloseloop != other.AccelerationCmdCloseloop) return false;
      if (AccelerationCmd != other.AccelerationCmd) return false;
      if (AccelerationLookup != other.AccelerationLookup) return false;
      if (SpeedLookup != other.SpeedLookup) return false;
      if (CalibrationValue != other.CalibrationValue) return false;
      if (ThrottleCmd != other.ThrottleCmd) return false;
      if (BrakeCmd != other.BrakeCmd) return false;
      if (IsFullStop != other.IsFullStop) return false;
      if (SlopeOffsetCompensation != other.SlopeOffsetCompensation) return false;
      if (CurrentStation != other.CurrentStation) return false;
      if (PathRemain != other.PathRemain) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationReference != 0D) hash ^= StationReference.GetHashCode();
      if (StationError != 0D) hash ^= StationError.GetHashCode();
      if (StationErrorLimited != 0D) hash ^= StationErrorLimited.GetHashCode();
      if (PreviewStationError != 0D) hash ^= PreviewStationError.GetHashCode();
      if (SpeedReference != 0D) hash ^= SpeedReference.GetHashCode();
      if (SpeedError != 0D) hash ^= SpeedError.GetHashCode();
      if (SpeedControllerInputLimited != 0D) hash ^= SpeedControllerInputLimited.GetHashCode();
      if (PreviewSpeedReference != 0D) hash ^= PreviewSpeedReference.GetHashCode();
      if (PreviewSpeedError != 0D) hash ^= PreviewSpeedError.GetHashCode();
      if (PreviewAccelerationReference != 0D) hash ^= PreviewAccelerationReference.GetHashCode();
      if (AccelerationCmdCloseloop != 0D) hash ^= AccelerationCmdCloseloop.GetHashCode();
      if (AccelerationCmd != 0D) hash ^= AccelerationCmd.GetHashCode();
      if (AccelerationLookup != 0D) hash ^= AccelerationLookup.GetHashCode();
      if (SpeedLookup != 0D) hash ^= SpeedLookup.GetHashCode();
      if (CalibrationValue != 0D) hash ^= CalibrationValue.GetHashCode();
      if (ThrottleCmd != 0D) hash ^= ThrottleCmd.GetHashCode();
      if (BrakeCmd != 0D) hash ^= BrakeCmd.GetHashCode();
      if (IsFullStop != false) hash ^= IsFullStop.GetHashCode();
      if (SlopeOffsetCompensation != 0D) hash ^= SlopeOffsetCompensation.GetHashCode();
      if (CurrentStation != 0D) hash ^= CurrentStation.GetHashCode();
      if (PathRemain != 0D) hash ^= PathRemain.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationReference != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(StationReference);
      }
      if (StationError != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StationError);
      }
      if (StationErrorLimited != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(StationErrorLimited);
      }
      if (PreviewStationError != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PreviewStationError);
      }
      if (SpeedReference != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SpeedReference);
      }
      if (SpeedError != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SpeedError);
      }
      if (SpeedControllerInputLimited != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(SpeedControllerInputLimited);
      }
      if (PreviewSpeedReference != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PreviewSpeedReference);
      }
      if (PreviewSpeedError != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PreviewSpeedError);
      }
      if (PreviewAccelerationReference != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(PreviewAccelerationReference);
      }
      if (AccelerationCmdCloseloop != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AccelerationCmdCloseloop);
      }
      if (AccelerationCmd != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AccelerationCmd);
      }
      if (AccelerationLookup != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(AccelerationLookup);
      }
      if (SpeedLookup != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(SpeedLookup);
      }
      if (CalibrationValue != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(CalibrationValue);
      }
      if (ThrottleCmd != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(ThrottleCmd);
      }
      if (BrakeCmd != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(BrakeCmd);
      }
      if (IsFullStop != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsFullStop);
      }
      if (SlopeOffsetCompensation != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(SlopeOffsetCompensation);
      }
      if (CurrentStation != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(CurrentStation);
      }
      if (PathRemain != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(PathRemain);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationReference != 0D) {
        size += 1 + 8;
      }
      if (StationError != 0D) {
        size += 1 + 8;
      }
      if (StationErrorLimited != 0D) {
        size += 1 + 8;
      }
      if (PreviewStationError != 0D) {
        size += 1 + 8;
      }
      if (SpeedReference != 0D) {
        size += 1 + 8;
      }
      if (SpeedError != 0D) {
        size += 1 + 8;
      }
      if (SpeedControllerInputLimited != 0D) {
        size += 1 + 8;
      }
      if (PreviewSpeedReference != 0D) {
        size += 1 + 8;
      }
      if (PreviewSpeedError != 0D) {
        size += 1 + 8;
      }
      if (PreviewAccelerationReference != 0D) {
        size += 1 + 8;
      }
      if (AccelerationCmdCloseloop != 0D) {
        size += 1 + 8;
      }
      if (AccelerationCmd != 0D) {
        size += 1 + 8;
      }
      if (AccelerationLookup != 0D) {
        size += 1 + 8;
      }
      if (SpeedLookup != 0D) {
        size += 1 + 8;
      }
      if (CalibrationValue != 0D) {
        size += 1 + 8;
      }
      if (ThrottleCmd != 0D) {
        size += 2 + 8;
      }
      if (BrakeCmd != 0D) {
        size += 2 + 8;
      }
      if (IsFullStop != false) {
        size += 2 + 1;
      }
      if (SlopeOffsetCompensation != 0D) {
        size += 2 + 8;
      }
      if (CurrentStation != 0D) {
        size += 2 + 8;
      }
      if (PathRemain != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleLongitudinalDebug other) {
      if (other == null) {
        return;
      }
      if (other.StationReference != 0D) {
        StationReference = other.StationReference;
      }
      if (other.StationError != 0D) {
        StationError = other.StationError;
      }
      if (other.StationErrorLimited != 0D) {
        StationErrorLimited = other.StationErrorLimited;
      }
      if (other.PreviewStationError != 0D) {
        PreviewStationError = other.PreviewStationError;
      }
      if (other.SpeedReference != 0D) {
        SpeedReference = other.SpeedReference;
      }
      if (other.SpeedError != 0D) {
        SpeedError = other.SpeedError;
      }
      if (other.SpeedControllerInputLimited != 0D) {
        SpeedControllerInputLimited = other.SpeedControllerInputLimited;
      }
      if (other.PreviewSpeedReference != 0D) {
        PreviewSpeedReference = other.PreviewSpeedReference;
      }
      if (other.PreviewSpeedError != 0D) {
        PreviewSpeedError = other.PreviewSpeedError;
      }
      if (other.PreviewAccelerationReference != 0D) {
        PreviewAccelerationReference = other.PreviewAccelerationReference;
      }
      if (other.AccelerationCmdCloseloop != 0D) {
        AccelerationCmdCloseloop = other.AccelerationCmdCloseloop;
      }
      if (other.AccelerationCmd != 0D) {
        AccelerationCmd = other.AccelerationCmd;
      }
      if (other.AccelerationLookup != 0D) {
        AccelerationLookup = other.AccelerationLookup;
      }
      if (other.SpeedLookup != 0D) {
        SpeedLookup = other.SpeedLookup;
      }
      if (other.CalibrationValue != 0D) {
        CalibrationValue = other.CalibrationValue;
      }
      if (other.ThrottleCmd != 0D) {
        ThrottleCmd = other.ThrottleCmd;
      }
      if (other.BrakeCmd != 0D) {
        BrakeCmd = other.BrakeCmd;
      }
      if (other.IsFullStop != false) {
        IsFullStop = other.IsFullStop;
      }
      if (other.SlopeOffsetCompensation != 0D) {
        SlopeOffsetCompensation = other.SlopeOffsetCompensation;
      }
      if (other.CurrentStation != 0D) {
        CurrentStation = other.CurrentStation;
      }
      if (other.PathRemain != 0D) {
        PathRemain = other.PathRemain;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            StationReference = input.ReadDouble();
            break;
          }
          case 17: {
            StationError = input.ReadDouble();
            break;
          }
          case 25: {
            StationErrorLimited = input.ReadDouble();
            break;
          }
          case 33: {
            PreviewStationError = input.ReadDouble();
            break;
          }
          case 41: {
            SpeedReference = input.ReadDouble();
            break;
          }
          case 49: {
            SpeedError = input.ReadDouble();
            break;
          }
          case 57: {
            SpeedControllerInputLimited = input.ReadDouble();
            break;
          }
          case 65: {
            PreviewSpeedReference = input.ReadDouble();
            break;
          }
          case 73: {
            PreviewSpeedError = input.ReadDouble();
            break;
          }
          case 81: {
            PreviewAccelerationReference = input.ReadDouble();
            break;
          }
          case 89: {
            AccelerationCmdCloseloop = input.ReadDouble();
            break;
          }
          case 97: {
            AccelerationCmd = input.ReadDouble();
            break;
          }
          case 105: {
            AccelerationLookup = input.ReadDouble();
            break;
          }
          case 113: {
            SpeedLookup = input.ReadDouble();
            break;
          }
          case 121: {
            CalibrationValue = input.ReadDouble();
            break;
          }
          case 129: {
            ThrottleCmd = input.ReadDouble();
            break;
          }
          case 137: {
            BrakeCmd = input.ReadDouble();
            break;
          }
          case 144: {
            IsFullStop = input.ReadBool();
            break;
          }
          case 153: {
            SlopeOffsetCompensation = input.ReadDouble();
            break;
          }
          case 161: {
            CurrentStation = input.ReadDouble();
            break;
          }
          case 169: {
            PathRemain = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleLateralDebug : pb::IMessage<SimpleLateralDebug> {
    private static readonly pb::MessageParser<SimpleLateralDebug> _parser = new pb::MessageParser<SimpleLateralDebug>(() => new SimpleLateralDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleLateralDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.ControlCmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLateralDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLateralDebug(SimpleLateralDebug other) : this() {
      lateralError_ = other.lateralError_;
      refHeading_ = other.refHeading_;
      heading_ = other.heading_;
      headingError_ = other.headingError_;
      headingErrorRate_ = other.headingErrorRate_;
      lateralErrorRate_ = other.lateralErrorRate_;
      curvature_ = other.curvature_;
      steerAngle_ = other.steerAngle_;
      steerAngleFeedforward_ = other.steerAngleFeedforward_;
      steerAngleLateralContribution_ = other.steerAngleLateralContribution_;
      steerAngleLateralRateContribution_ = other.steerAngleLateralRateContribution_;
      steerAngleHeadingContribution_ = other.steerAngleHeadingContribution_;
      steerAngleHeadingRateContribution_ = other.steerAngleHeadingRateContribution_;
      steerAngleFeedback_ = other.steerAngleFeedback_;
      steeringPosition_ = other.steeringPosition_;
      refSpeed_ = other.refSpeed_;
      steerAngleLimited_ = other.steerAngleLimited_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLateralDebug Clone() {
      return new SimpleLateralDebug(this);
    }

    /// <summary>Field number for the "lateral_error" field.</summary>
    public const int LateralErrorFieldNumber = 1;
    private double lateralError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralError {
      get { return lateralError_; }
      set {
        lateralError_ = value;
      }
    }

    /// <summary>Field number for the "ref_heading" field.</summary>
    public const int RefHeadingFieldNumber = 2;
    private double refHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefHeading {
      get { return refHeading_; }
      set {
        refHeading_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 3;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "heading_error" field.</summary>
    public const int HeadingErrorFieldNumber = 4;
    private double headingError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingError {
      get { return headingError_; }
      set {
        headingError_ = value;
      }
    }

    /// <summary>Field number for the "heading_error_rate" field.</summary>
    public const int HeadingErrorRateFieldNumber = 5;
    private double headingErrorRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingErrorRate {
      get { return headingErrorRate_; }
      set {
        headingErrorRate_ = value;
      }
    }

    /// <summary>Field number for the "lateral_error_rate" field.</summary>
    public const int LateralErrorRateFieldNumber = 6;
    private double lateralErrorRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralErrorRate {
      get { return lateralErrorRate_; }
      set {
        lateralErrorRate_ = value;
      }
    }

    /// <summary>Field number for the "curvature" field.</summary>
    public const int CurvatureFieldNumber = 7;
    private double curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Curvature {
      get { return curvature_; }
      set {
        curvature_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle" field.</summary>
    public const int SteerAngleFieldNumber = 8;
    private double steerAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngle {
      get { return steerAngle_; }
      set {
        steerAngle_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_feedforward" field.</summary>
    public const int SteerAngleFeedforwardFieldNumber = 9;
    private double steerAngleFeedforward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleFeedforward {
      get { return steerAngleFeedforward_; }
      set {
        steerAngleFeedforward_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_lateral_contribution" field.</summary>
    public const int SteerAngleLateralContributionFieldNumber = 10;
    private double steerAngleLateralContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleLateralContribution {
      get { return steerAngleLateralContribution_; }
      set {
        steerAngleLateralContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_lateral_rate_contribution" field.</summary>
    public const int SteerAngleLateralRateContributionFieldNumber = 11;
    private double steerAngleLateralRateContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleLateralRateContribution {
      get { return steerAngleLateralRateContribution_; }
      set {
        steerAngleLateralRateContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_heading_contribution" field.</summary>
    public const int SteerAngleHeadingContributionFieldNumber = 12;
    private double steerAngleHeadingContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleHeadingContribution {
      get { return steerAngleHeadingContribution_; }
      set {
        steerAngleHeadingContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_heading_rate_contribution" field.</summary>
    public const int SteerAngleHeadingRateContributionFieldNumber = 13;
    private double steerAngleHeadingRateContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleHeadingRateContribution {
      get { return steerAngleHeadingRateContribution_; }
      set {
        steerAngleHeadingRateContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_feedback" field.</summary>
    public const int SteerAngleFeedbackFieldNumber = 14;
    private double steerAngleFeedback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleFeedback {
      get { return steerAngleFeedback_; }
      set {
        steerAngleFeedback_ = value;
      }
    }

    /// <summary>Field number for the "steering_position" field.</summary>
    public const int SteeringPositionFieldNumber = 15;
    private double steeringPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringPosition {
      get { return steeringPosition_; }
      set {
        steeringPosition_ = value;
      }
    }

    /// <summary>Field number for the "ref_speed" field.</summary>
    public const int RefSpeedFieldNumber = 16;
    private double refSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefSpeed {
      get { return refSpeed_; }
      set {
        refSpeed_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_limited" field.</summary>
    public const int SteerAngleLimitedFieldNumber = 17;
    private double steerAngleLimited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleLimited {
      get { return steerAngleLimited_; }
      set {
        steerAngleLimited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleLateralDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleLateralDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LateralError != other.LateralError) return false;
      if (RefHeading != other.RefHeading) return false;
      if (Heading != other.Heading) return false;
      if (HeadingError != other.HeadingError) return false;
      if (HeadingErrorRate != other.HeadingErrorRate) return false;
      if (LateralErrorRate != other.LateralErrorRate) return false;
      if (Curvature != other.Curvature) return false;
      if (SteerAngle != other.SteerAngle) return false;
      if (SteerAngleFeedforward != other.SteerAngleFeedforward) return false;
      if (SteerAngleLateralContribution != other.SteerAngleLateralContribution) return false;
      if (SteerAngleLateralRateContribution != other.SteerAngleLateralRateContribution) return false;
      if (SteerAngleHeadingContribution != other.SteerAngleHeadingContribution) return false;
      if (SteerAngleHeadingRateContribution != other.SteerAngleHeadingRateContribution) return false;
      if (SteerAngleFeedback != other.SteerAngleFeedback) return false;
      if (SteeringPosition != other.SteeringPosition) return false;
      if (RefSpeed != other.RefSpeed) return false;
      if (SteerAngleLimited != other.SteerAngleLimited) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LateralError != 0D) hash ^= LateralError.GetHashCode();
      if (RefHeading != 0D) hash ^= RefHeading.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (HeadingError != 0D) hash ^= HeadingError.GetHashCode();
      if (HeadingErrorRate != 0D) hash ^= HeadingErrorRate.GetHashCode();
      if (LateralErrorRate != 0D) hash ^= LateralErrorRate.GetHashCode();
      if (Curvature != 0D) hash ^= Curvature.GetHashCode();
      if (SteerAngle != 0D) hash ^= SteerAngle.GetHashCode();
      if (SteerAngleFeedforward != 0D) hash ^= SteerAngleFeedforward.GetHashCode();
      if (SteerAngleLateralContribution != 0D) hash ^= SteerAngleLateralContribution.GetHashCode();
      if (SteerAngleLateralRateContribution != 0D) hash ^= SteerAngleLateralRateContribution.GetHashCode();
      if (SteerAngleHeadingContribution != 0D) hash ^= SteerAngleHeadingContribution.GetHashCode();
      if (SteerAngleHeadingRateContribution != 0D) hash ^= SteerAngleHeadingRateContribution.GetHashCode();
      if (SteerAngleFeedback != 0D) hash ^= SteerAngleFeedback.GetHashCode();
      if (SteeringPosition != 0D) hash ^= SteeringPosition.GetHashCode();
      if (RefSpeed != 0D) hash ^= RefSpeed.GetHashCode();
      if (SteerAngleLimited != 0D) hash ^= SteerAngleLimited.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LateralError != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LateralError);
      }
      if (RefHeading != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RefHeading);
      }
      if (Heading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Heading);
      }
      if (HeadingError != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(HeadingError);
      }
      if (HeadingErrorRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(HeadingErrorRate);
      }
      if (LateralErrorRate != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LateralErrorRate);
      }
      if (Curvature != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Curvature);
      }
      if (SteerAngle != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SteerAngle);
      }
      if (SteerAngleFeedforward != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SteerAngleFeedforward);
      }
      if (SteerAngleLateralContribution != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(SteerAngleLateralContribution);
      }
      if (SteerAngleLateralRateContribution != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(SteerAngleLateralRateContribution);
      }
      if (SteerAngleHeadingContribution != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(SteerAngleHeadingContribution);
      }
      if (SteerAngleHeadingRateContribution != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(SteerAngleHeadingRateContribution);
      }
      if (SteerAngleFeedback != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(SteerAngleFeedback);
      }
      if (SteeringPosition != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(SteeringPosition);
      }
      if (RefSpeed != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(RefSpeed);
      }
      if (SteerAngleLimited != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(SteerAngleLimited);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LateralError != 0D) {
        size += 1 + 8;
      }
      if (RefHeading != 0D) {
        size += 1 + 8;
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (HeadingError != 0D) {
        size += 1 + 8;
      }
      if (HeadingErrorRate != 0D) {
        size += 1 + 8;
      }
      if (LateralErrorRate != 0D) {
        size += 1 + 8;
      }
      if (Curvature != 0D) {
        size += 1 + 8;
      }
      if (SteerAngle != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleFeedforward != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleLateralContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleLateralRateContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleHeadingContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleHeadingRateContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleFeedback != 0D) {
        size += 1 + 8;
      }
      if (SteeringPosition != 0D) {
        size += 1 + 8;
      }
      if (RefSpeed != 0D) {
        size += 2 + 8;
      }
      if (SteerAngleLimited != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleLateralDebug other) {
      if (other == null) {
        return;
      }
      if (other.LateralError != 0D) {
        LateralError = other.LateralError;
      }
      if (other.RefHeading != 0D) {
        RefHeading = other.RefHeading;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.HeadingError != 0D) {
        HeadingError = other.HeadingError;
      }
      if (other.HeadingErrorRate != 0D) {
        HeadingErrorRate = other.HeadingErrorRate;
      }
      if (other.LateralErrorRate != 0D) {
        LateralErrorRate = other.LateralErrorRate;
      }
      if (other.Curvature != 0D) {
        Curvature = other.Curvature;
      }
      if (other.SteerAngle != 0D) {
        SteerAngle = other.SteerAngle;
      }
      if (other.SteerAngleFeedforward != 0D) {
        SteerAngleFeedforward = other.SteerAngleFeedforward;
      }
      if (other.SteerAngleLateralContribution != 0D) {
        SteerAngleLateralContribution = other.SteerAngleLateralContribution;
      }
      if (other.SteerAngleLateralRateContribution != 0D) {
        SteerAngleLateralRateContribution = other.SteerAngleLateralRateContribution;
      }
      if (other.SteerAngleHeadingContribution != 0D) {
        SteerAngleHeadingContribution = other.SteerAngleHeadingContribution;
      }
      if (other.SteerAngleHeadingRateContribution != 0D) {
        SteerAngleHeadingRateContribution = other.SteerAngleHeadingRateContribution;
      }
      if (other.SteerAngleFeedback != 0D) {
        SteerAngleFeedback = other.SteerAngleFeedback;
      }
      if (other.SteeringPosition != 0D) {
        SteeringPosition = other.SteeringPosition;
      }
      if (other.RefSpeed != 0D) {
        RefSpeed = other.RefSpeed;
      }
      if (other.SteerAngleLimited != 0D) {
        SteerAngleLimited = other.SteerAngleLimited;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LateralError = input.ReadDouble();
            break;
          }
          case 17: {
            RefHeading = input.ReadDouble();
            break;
          }
          case 25: {
            Heading = input.ReadDouble();
            break;
          }
          case 33: {
            HeadingError = input.ReadDouble();
            break;
          }
          case 41: {
            HeadingErrorRate = input.ReadDouble();
            break;
          }
          case 49: {
            LateralErrorRate = input.ReadDouble();
            break;
          }
          case 57: {
            Curvature = input.ReadDouble();
            break;
          }
          case 65: {
            SteerAngle = input.ReadDouble();
            break;
          }
          case 73: {
            SteerAngleFeedforward = input.ReadDouble();
            break;
          }
          case 81: {
            SteerAngleLateralContribution = input.ReadDouble();
            break;
          }
          case 89: {
            SteerAngleLateralRateContribution = input.ReadDouble();
            break;
          }
          case 97: {
            SteerAngleHeadingContribution = input.ReadDouble();
            break;
          }
          case 105: {
            SteerAngleHeadingRateContribution = input.ReadDouble();
            break;
          }
          case 113: {
            SteerAngleFeedback = input.ReadDouble();
            break;
          }
          case 121: {
            SteeringPosition = input.ReadDouble();
            break;
          }
          case 129: {
            RefSpeed = input.ReadDouble();
            break;
          }
          case 137: {
            SteerAngleLimited = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleMPCDebug : pb::IMessage<SimpleMPCDebug> {
    private static readonly pb::MessageParser<SimpleMPCDebug> _parser = new pb::MessageParser<SimpleMPCDebug>(() => new SimpleMPCDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleMPCDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.ControlCmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMPCDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMPCDebug(SimpleMPCDebug other) : this() {
      lateralError_ = other.lateralError_;
      refHeading_ = other.refHeading_;
      heading_ = other.heading_;
      headingError_ = other.headingError_;
      headingErrorRate_ = other.headingErrorRate_;
      lateralErrorRate_ = other.lateralErrorRate_;
      curvature_ = other.curvature_;
      steerAngle_ = other.steerAngle_;
      steerAngleFeedforward_ = other.steerAngleFeedforward_;
      steerAngleLateralContribution_ = other.steerAngleLateralContribution_;
      steerAngleLateralRateContribution_ = other.steerAngleLateralRateContribution_;
      steerAngleHeadingContribution_ = other.steerAngleHeadingContribution_;
      steerAngleHeadingRateContribution_ = other.steerAngleHeadingRateContribution_;
      steerAngleFeedback_ = other.steerAngleFeedback_;
      steeringPosition_ = other.steeringPosition_;
      refSpeed_ = other.refSpeed_;
      steerAngleLimited_ = other.steerAngleLimited_;
      stationReference_ = other.stationReference_;
      stationError_ = other.stationError_;
      speedReference_ = other.speedReference_;
      speedError_ = other.speedError_;
      accelerationReference_ = other.accelerationReference_;
      isFullStop_ = other.isFullStop_;
      stationFeedback_ = other.stationFeedback_;
      speedFeedback_ = other.speedFeedback_;
      accelerationCmdCloseloop_ = other.accelerationCmdCloseloop_;
      accelerationCmd_ = other.accelerationCmd_;
      accelerationLookup_ = other.accelerationLookup_;
      speedLookup_ = other.speedLookup_;
      calibrationValue_ = other.calibrationValue_;
      matrixQUpdated_ = other.matrixQUpdated_.Clone();
      matrixRUpdated_ = other.matrixRUpdated_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMPCDebug Clone() {
      return new SimpleMPCDebug(this);
    }

    /// <summary>Field number for the "lateral_error" field.</summary>
    public const int LateralErrorFieldNumber = 1;
    private double lateralError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralError {
      get { return lateralError_; }
      set {
        lateralError_ = value;
      }
    }

    /// <summary>Field number for the "ref_heading" field.</summary>
    public const int RefHeadingFieldNumber = 2;
    private double refHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefHeading {
      get { return refHeading_; }
      set {
        refHeading_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 3;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "heading_error" field.</summary>
    public const int HeadingErrorFieldNumber = 4;
    private double headingError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingError {
      get { return headingError_; }
      set {
        headingError_ = value;
      }
    }

    /// <summary>Field number for the "heading_error_rate" field.</summary>
    public const int HeadingErrorRateFieldNumber = 5;
    private double headingErrorRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingErrorRate {
      get { return headingErrorRate_; }
      set {
        headingErrorRate_ = value;
      }
    }

    /// <summary>Field number for the "lateral_error_rate" field.</summary>
    public const int LateralErrorRateFieldNumber = 6;
    private double lateralErrorRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralErrorRate {
      get { return lateralErrorRate_; }
      set {
        lateralErrorRate_ = value;
      }
    }

    /// <summary>Field number for the "curvature" field.</summary>
    public const int CurvatureFieldNumber = 7;
    private double curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Curvature {
      get { return curvature_; }
      set {
        curvature_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle" field.</summary>
    public const int SteerAngleFieldNumber = 8;
    private double steerAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngle {
      get { return steerAngle_; }
      set {
        steerAngle_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_feedforward" field.</summary>
    public const int SteerAngleFeedforwardFieldNumber = 9;
    private double steerAngleFeedforward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleFeedforward {
      get { return steerAngleFeedforward_; }
      set {
        steerAngleFeedforward_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_lateral_contribution" field.</summary>
    public const int SteerAngleLateralContributionFieldNumber = 10;
    private double steerAngleLateralContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleLateralContribution {
      get { return steerAngleLateralContribution_; }
      set {
        steerAngleLateralContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_lateral_rate_contribution" field.</summary>
    public const int SteerAngleLateralRateContributionFieldNumber = 11;
    private double steerAngleLateralRateContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleLateralRateContribution {
      get { return steerAngleLateralRateContribution_; }
      set {
        steerAngleLateralRateContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_heading_contribution" field.</summary>
    public const int SteerAngleHeadingContributionFieldNumber = 12;
    private double steerAngleHeadingContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleHeadingContribution {
      get { return steerAngleHeadingContribution_; }
      set {
        steerAngleHeadingContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_heading_rate_contribution" field.</summary>
    public const int SteerAngleHeadingRateContributionFieldNumber = 13;
    private double steerAngleHeadingRateContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleHeadingRateContribution {
      get { return steerAngleHeadingRateContribution_; }
      set {
        steerAngleHeadingRateContribution_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_feedback" field.</summary>
    public const int SteerAngleFeedbackFieldNumber = 14;
    private double steerAngleFeedback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleFeedback {
      get { return steerAngleFeedback_; }
      set {
        steerAngleFeedback_ = value;
      }
    }

    /// <summary>Field number for the "steering_position" field.</summary>
    public const int SteeringPositionFieldNumber = 15;
    private double steeringPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringPosition {
      get { return steeringPosition_; }
      set {
        steeringPosition_ = value;
      }
    }

    /// <summary>Field number for the "ref_speed" field.</summary>
    public const int RefSpeedFieldNumber = 16;
    private double refSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefSpeed {
      get { return refSpeed_; }
      set {
        refSpeed_ = value;
      }
    }

    /// <summary>Field number for the "steer_angle_limited" field.</summary>
    public const int SteerAngleLimitedFieldNumber = 17;
    private double steerAngleLimited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteerAngleLimited {
      get { return steerAngleLimited_; }
      set {
        steerAngleLimited_ = value;
      }
    }

    /// <summary>Field number for the "station_reference" field.</summary>
    public const int StationReferenceFieldNumber = 18;
    private double stationReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationReference {
      get { return stationReference_; }
      set {
        stationReference_ = value;
      }
    }

    /// <summary>Field number for the "station_error" field.</summary>
    public const int StationErrorFieldNumber = 19;
    private double stationError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationError {
      get { return stationError_; }
      set {
        stationError_ = value;
      }
    }

    /// <summary>Field number for the "speed_reference" field.</summary>
    public const int SpeedReferenceFieldNumber = 20;
    private double speedReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedReference {
      get { return speedReference_; }
      set {
        speedReference_ = value;
      }
    }

    /// <summary>Field number for the "speed_error" field.</summary>
    public const int SpeedErrorFieldNumber = 21;
    private double speedError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedError {
      get { return speedError_; }
      set {
        speedError_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_reference" field.</summary>
    public const int AccelerationReferenceFieldNumber = 22;
    private double accelerationReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationReference {
      get { return accelerationReference_; }
      set {
        accelerationReference_ = value;
      }
    }

    /// <summary>Field number for the "is_full_stop" field.</summary>
    public const int IsFullStopFieldNumber = 23;
    private bool isFullStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFullStop {
      get { return isFullStop_; }
      set {
        isFullStop_ = value;
      }
    }

    /// <summary>Field number for the "station_feedback" field.</summary>
    public const int StationFeedbackFieldNumber = 24;
    private double stationFeedback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationFeedback {
      get { return stationFeedback_; }
      set {
        stationFeedback_ = value;
      }
    }

    /// <summary>Field number for the "speed_feedback" field.</summary>
    public const int SpeedFeedbackFieldNumber = 25;
    private double speedFeedback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedFeedback {
      get { return speedFeedback_; }
      set {
        speedFeedback_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_cmd_closeloop" field.</summary>
    public const int AccelerationCmdCloseloopFieldNumber = 26;
    private double accelerationCmdCloseloop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationCmdCloseloop {
      get { return accelerationCmdCloseloop_; }
      set {
        accelerationCmdCloseloop_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_cmd" field.</summary>
    public const int AccelerationCmdFieldNumber = 27;
    private double accelerationCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationCmd {
      get { return accelerationCmd_; }
      set {
        accelerationCmd_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_lookup" field.</summary>
    public const int AccelerationLookupFieldNumber = 28;
    private double accelerationLookup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationLookup {
      get { return accelerationLookup_; }
      set {
        accelerationLookup_ = value;
      }
    }

    /// <summary>Field number for the "speed_lookup" field.</summary>
    public const int SpeedLookupFieldNumber = 29;
    private double speedLookup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLookup {
      get { return speedLookup_; }
      set {
        speedLookup_ = value;
      }
    }

    /// <summary>Field number for the "calibration_value" field.</summary>
    public const int CalibrationValueFieldNumber = 30;
    private double calibrationValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CalibrationValue {
      get { return calibrationValue_; }
      set {
        calibrationValue_ = value;
      }
    }

    /// <summary>Field number for the "matrix_q_updated" field.</summary>
    public const int MatrixQUpdatedFieldNumber = 31;
    private static readonly pb::FieldCodec<double> _repeated_matrixQUpdated_codec
        = pb::FieldCodec.ForDouble(250);
    private readonly pbc::RepeatedField<double> matrixQUpdated_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// matrix_q_updated_ size = 6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> MatrixQUpdated {
      get { return matrixQUpdated_; }
    }

    /// <summary>Field number for the "matrix_r_updated" field.</summary>
    public const int MatrixRUpdatedFieldNumber = 32;
    private static readonly pb::FieldCodec<double> _repeated_matrixRUpdated_codec
        = pb::FieldCodec.ForDouble(258);
    private readonly pbc::RepeatedField<double> matrixRUpdated_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// matrix_r_updated_ size = 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> MatrixRUpdated {
      get { return matrixRUpdated_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleMPCDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleMPCDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LateralError != other.LateralError) return false;
      if (RefHeading != other.RefHeading) return false;
      if (Heading != other.Heading) return false;
      if (HeadingError != other.HeadingError) return false;
      if (HeadingErrorRate != other.HeadingErrorRate) return false;
      if (LateralErrorRate != other.LateralErrorRate) return false;
      if (Curvature != other.Curvature) return false;
      if (SteerAngle != other.SteerAngle) return false;
      if (SteerAngleFeedforward != other.SteerAngleFeedforward) return false;
      if (SteerAngleLateralContribution != other.SteerAngleLateralContribution) return false;
      if (SteerAngleLateralRateContribution != other.SteerAngleLateralRateContribution) return false;
      if (SteerAngleHeadingContribution != other.SteerAngleHeadingContribution) return false;
      if (SteerAngleHeadingRateContribution != other.SteerAngleHeadingRateContribution) return false;
      if (SteerAngleFeedback != other.SteerAngleFeedback) return false;
      if (SteeringPosition != other.SteeringPosition) return false;
      if (RefSpeed != other.RefSpeed) return false;
      if (SteerAngleLimited != other.SteerAngleLimited) return false;
      if (StationReference != other.StationReference) return false;
      if (StationError != other.StationError) return false;
      if (SpeedReference != other.SpeedReference) return false;
      if (SpeedError != other.SpeedError) return false;
      if (AccelerationReference != other.AccelerationReference) return false;
      if (IsFullStop != other.IsFullStop) return false;
      if (StationFeedback != other.StationFeedback) return false;
      if (SpeedFeedback != other.SpeedFeedback) return false;
      if (AccelerationCmdCloseloop != other.AccelerationCmdCloseloop) return false;
      if (AccelerationCmd != other.AccelerationCmd) return false;
      if (AccelerationLookup != other.AccelerationLookup) return false;
      if (SpeedLookup != other.SpeedLookup) return false;
      if (CalibrationValue != other.CalibrationValue) return false;
      if(!matrixQUpdated_.Equals(other.matrixQUpdated_)) return false;
      if(!matrixRUpdated_.Equals(other.matrixRUpdated_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LateralError != 0D) hash ^= LateralError.GetHashCode();
      if (RefHeading != 0D) hash ^= RefHeading.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (HeadingError != 0D) hash ^= HeadingError.GetHashCode();
      if (HeadingErrorRate != 0D) hash ^= HeadingErrorRate.GetHashCode();
      if (LateralErrorRate != 0D) hash ^= LateralErrorRate.GetHashCode();
      if (Curvature != 0D) hash ^= Curvature.GetHashCode();
      if (SteerAngle != 0D) hash ^= SteerAngle.GetHashCode();
      if (SteerAngleFeedforward != 0D) hash ^= SteerAngleFeedforward.GetHashCode();
      if (SteerAngleLateralContribution != 0D) hash ^= SteerAngleLateralContribution.GetHashCode();
      if (SteerAngleLateralRateContribution != 0D) hash ^= SteerAngleLateralRateContribution.GetHashCode();
      if (SteerAngleHeadingContribution != 0D) hash ^= SteerAngleHeadingContribution.GetHashCode();
      if (SteerAngleHeadingRateContribution != 0D) hash ^= SteerAngleHeadingRateContribution.GetHashCode();
      if (SteerAngleFeedback != 0D) hash ^= SteerAngleFeedback.GetHashCode();
      if (SteeringPosition != 0D) hash ^= SteeringPosition.GetHashCode();
      if (RefSpeed != 0D) hash ^= RefSpeed.GetHashCode();
      if (SteerAngleLimited != 0D) hash ^= SteerAngleLimited.GetHashCode();
      if (StationReference != 0D) hash ^= StationReference.GetHashCode();
      if (StationError != 0D) hash ^= StationError.GetHashCode();
      if (SpeedReference != 0D) hash ^= SpeedReference.GetHashCode();
      if (SpeedError != 0D) hash ^= SpeedError.GetHashCode();
      if (AccelerationReference != 0D) hash ^= AccelerationReference.GetHashCode();
      if (IsFullStop != false) hash ^= IsFullStop.GetHashCode();
      if (StationFeedback != 0D) hash ^= StationFeedback.GetHashCode();
      if (SpeedFeedback != 0D) hash ^= SpeedFeedback.GetHashCode();
      if (AccelerationCmdCloseloop != 0D) hash ^= AccelerationCmdCloseloop.GetHashCode();
      if (AccelerationCmd != 0D) hash ^= AccelerationCmd.GetHashCode();
      if (AccelerationLookup != 0D) hash ^= AccelerationLookup.GetHashCode();
      if (SpeedLookup != 0D) hash ^= SpeedLookup.GetHashCode();
      if (CalibrationValue != 0D) hash ^= CalibrationValue.GetHashCode();
      hash ^= matrixQUpdated_.GetHashCode();
      hash ^= matrixRUpdated_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LateralError != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LateralError);
      }
      if (RefHeading != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RefHeading);
      }
      if (Heading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Heading);
      }
      if (HeadingError != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(HeadingError);
      }
      if (HeadingErrorRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(HeadingErrorRate);
      }
      if (LateralErrorRate != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LateralErrorRate);
      }
      if (Curvature != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Curvature);
      }
      if (SteerAngle != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SteerAngle);
      }
      if (SteerAngleFeedforward != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SteerAngleFeedforward);
      }
      if (SteerAngleLateralContribution != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(SteerAngleLateralContribution);
      }
      if (SteerAngleLateralRateContribution != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(SteerAngleLateralRateContribution);
      }
      if (SteerAngleHeadingContribution != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(SteerAngleHeadingContribution);
      }
      if (SteerAngleHeadingRateContribution != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(SteerAngleHeadingRateContribution);
      }
      if (SteerAngleFeedback != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(SteerAngleFeedback);
      }
      if (SteeringPosition != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(SteeringPosition);
      }
      if (RefSpeed != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(RefSpeed);
      }
      if (SteerAngleLimited != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(SteerAngleLimited);
      }
      if (StationReference != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(StationReference);
      }
      if (StationError != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(StationError);
      }
      if (SpeedReference != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(SpeedReference);
      }
      if (SpeedError != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(SpeedError);
      }
      if (AccelerationReference != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(AccelerationReference);
      }
      if (IsFullStop != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsFullStop);
      }
      if (StationFeedback != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(StationFeedback);
      }
      if (SpeedFeedback != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(SpeedFeedback);
      }
      if (AccelerationCmdCloseloop != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(AccelerationCmdCloseloop);
      }
      if (AccelerationCmd != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(AccelerationCmd);
      }
      if (AccelerationLookup != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(AccelerationLookup);
      }
      if (SpeedLookup != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(SpeedLookup);
      }
      if (CalibrationValue != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(CalibrationValue);
      }
      matrixQUpdated_.WriteTo(output, _repeated_matrixQUpdated_codec);
      matrixRUpdated_.WriteTo(output, _repeated_matrixRUpdated_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LateralError != 0D) {
        size += 1 + 8;
      }
      if (RefHeading != 0D) {
        size += 1 + 8;
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (HeadingError != 0D) {
        size += 1 + 8;
      }
      if (HeadingErrorRate != 0D) {
        size += 1 + 8;
      }
      if (LateralErrorRate != 0D) {
        size += 1 + 8;
      }
      if (Curvature != 0D) {
        size += 1 + 8;
      }
      if (SteerAngle != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleFeedforward != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleLateralContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleLateralRateContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleHeadingContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleHeadingRateContribution != 0D) {
        size += 1 + 8;
      }
      if (SteerAngleFeedback != 0D) {
        size += 1 + 8;
      }
      if (SteeringPosition != 0D) {
        size += 1 + 8;
      }
      if (RefSpeed != 0D) {
        size += 2 + 8;
      }
      if (SteerAngleLimited != 0D) {
        size += 2 + 8;
      }
      if (StationReference != 0D) {
        size += 2 + 8;
      }
      if (StationError != 0D) {
        size += 2 + 8;
      }
      if (SpeedReference != 0D) {
        size += 2 + 8;
      }
      if (SpeedError != 0D) {
        size += 2 + 8;
      }
      if (AccelerationReference != 0D) {
        size += 2 + 8;
      }
      if (IsFullStop != false) {
        size += 2 + 1;
      }
      if (StationFeedback != 0D) {
        size += 2 + 8;
      }
      if (SpeedFeedback != 0D) {
        size += 2 + 8;
      }
      if (AccelerationCmdCloseloop != 0D) {
        size += 2 + 8;
      }
      if (AccelerationCmd != 0D) {
        size += 2 + 8;
      }
      if (AccelerationLookup != 0D) {
        size += 2 + 8;
      }
      if (SpeedLookup != 0D) {
        size += 2 + 8;
      }
      if (CalibrationValue != 0D) {
        size += 2 + 8;
      }
      size += matrixQUpdated_.CalculateSize(_repeated_matrixQUpdated_codec);
      size += matrixRUpdated_.CalculateSize(_repeated_matrixRUpdated_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleMPCDebug other) {
      if (other == null) {
        return;
      }
      if (other.LateralError != 0D) {
        LateralError = other.LateralError;
      }
      if (other.RefHeading != 0D) {
        RefHeading = other.RefHeading;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.HeadingError != 0D) {
        HeadingError = other.HeadingError;
      }
      if (other.HeadingErrorRate != 0D) {
        HeadingErrorRate = other.HeadingErrorRate;
      }
      if (other.LateralErrorRate != 0D) {
        LateralErrorRate = other.LateralErrorRate;
      }
      if (other.Curvature != 0D) {
        Curvature = other.Curvature;
      }
      if (other.SteerAngle != 0D) {
        SteerAngle = other.SteerAngle;
      }
      if (other.SteerAngleFeedforward != 0D) {
        SteerAngleFeedforward = other.SteerAngleFeedforward;
      }
      if (other.SteerAngleLateralContribution != 0D) {
        SteerAngleLateralContribution = other.SteerAngleLateralContribution;
      }
      if (other.SteerAngleLateralRateContribution != 0D) {
        SteerAngleLateralRateContribution = other.SteerAngleLateralRateContribution;
      }
      if (other.SteerAngleHeadingContribution != 0D) {
        SteerAngleHeadingContribution = other.SteerAngleHeadingContribution;
      }
      if (other.SteerAngleHeadingRateContribution != 0D) {
        SteerAngleHeadingRateContribution = other.SteerAngleHeadingRateContribution;
      }
      if (other.SteerAngleFeedback != 0D) {
        SteerAngleFeedback = other.SteerAngleFeedback;
      }
      if (other.SteeringPosition != 0D) {
        SteeringPosition = other.SteeringPosition;
      }
      if (other.RefSpeed != 0D) {
        RefSpeed = other.RefSpeed;
      }
      if (other.SteerAngleLimited != 0D) {
        SteerAngleLimited = other.SteerAngleLimited;
      }
      if (other.StationReference != 0D) {
        StationReference = other.StationReference;
      }
      if (other.StationError != 0D) {
        StationError = other.StationError;
      }
      if (other.SpeedReference != 0D) {
        SpeedReference = other.SpeedReference;
      }
      if (other.SpeedError != 0D) {
        SpeedError = other.SpeedError;
      }
      if (other.AccelerationReference != 0D) {
        AccelerationReference = other.AccelerationReference;
      }
      if (other.IsFullStop != false) {
        IsFullStop = other.IsFullStop;
      }
      if (other.StationFeedback != 0D) {
        StationFeedback = other.StationFeedback;
      }
      if (other.SpeedFeedback != 0D) {
        SpeedFeedback = other.SpeedFeedback;
      }
      if (other.AccelerationCmdCloseloop != 0D) {
        AccelerationCmdCloseloop = other.AccelerationCmdCloseloop;
      }
      if (other.AccelerationCmd != 0D) {
        AccelerationCmd = other.AccelerationCmd;
      }
      if (other.AccelerationLookup != 0D) {
        AccelerationLookup = other.AccelerationLookup;
      }
      if (other.SpeedLookup != 0D) {
        SpeedLookup = other.SpeedLookup;
      }
      if (other.CalibrationValue != 0D) {
        CalibrationValue = other.CalibrationValue;
      }
      matrixQUpdated_.Add(other.matrixQUpdated_);
      matrixRUpdated_.Add(other.matrixRUpdated_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LateralError = input.ReadDouble();
            break;
          }
          case 17: {
            RefHeading = input.ReadDouble();
            break;
          }
          case 25: {
            Heading = input.ReadDouble();
            break;
          }
          case 33: {
            HeadingError = input.ReadDouble();
            break;
          }
          case 41: {
            HeadingErrorRate = input.ReadDouble();
            break;
          }
          case 49: {
            LateralErrorRate = input.ReadDouble();
            break;
          }
          case 57: {
            Curvature = input.ReadDouble();
            break;
          }
          case 65: {
            SteerAngle = input.ReadDouble();
            break;
          }
          case 73: {
            SteerAngleFeedforward = input.ReadDouble();
            break;
          }
          case 81: {
            SteerAngleLateralContribution = input.ReadDouble();
            break;
          }
          case 89: {
            SteerAngleLateralRateContribution = input.ReadDouble();
            break;
          }
          case 97: {
            SteerAngleHeadingContribution = input.ReadDouble();
            break;
          }
          case 105: {
            SteerAngleHeadingRateContribution = input.ReadDouble();
            break;
          }
          case 113: {
            SteerAngleFeedback = input.ReadDouble();
            break;
          }
          case 121: {
            SteeringPosition = input.ReadDouble();
            break;
          }
          case 129: {
            RefSpeed = input.ReadDouble();
            break;
          }
          case 137: {
            SteerAngleLimited = input.ReadDouble();
            break;
          }
          case 145: {
            StationReference = input.ReadDouble();
            break;
          }
          case 153: {
            StationError = input.ReadDouble();
            break;
          }
          case 161: {
            SpeedReference = input.ReadDouble();
            break;
          }
          case 169: {
            SpeedError = input.ReadDouble();
            break;
          }
          case 177: {
            AccelerationReference = input.ReadDouble();
            break;
          }
          case 184: {
            IsFullStop = input.ReadBool();
            break;
          }
          case 193: {
            StationFeedback = input.ReadDouble();
            break;
          }
          case 201: {
            SpeedFeedback = input.ReadDouble();
            break;
          }
          case 209: {
            AccelerationCmdCloseloop = input.ReadDouble();
            break;
          }
          case 217: {
            AccelerationCmd = input.ReadDouble();
            break;
          }
          case 225: {
            AccelerationLookup = input.ReadDouble();
            break;
          }
          case 233: {
            SpeedLookup = input.ReadDouble();
            break;
          }
          case 241: {
            CalibrationValue = input.ReadDouble();
            break;
          }
          case 250:
          case 249: {
            matrixQUpdated_.AddEntriesFrom(input, _repeated_matrixQUpdated_codec);
            break;
          }
          case 258:
          case 257: {
            matrixRUpdated_.AddEntriesFrom(input, _repeated_matrixRUpdated_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputDebug : pb::IMessage<InputDebug> {
    private static readonly pb::MessageParser<InputDebug> _parser = new pb::MessageParser<InputDebug>(() => new InputDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.ControlCmdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputDebug(InputDebug other) : this() {
      LocalizationHeader = other.localizationHeader_ != null ? other.LocalizationHeader.Clone() : null;
      CanbusHeader = other.canbusHeader_ != null ? other.CanbusHeader.Clone() : null;
      TrajectoryHeader = other.trajectoryHeader_ != null ? other.TrajectoryHeader.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputDebug Clone() {
      return new InputDebug(this);
    }

    /// <summary>Field number for the "localization_header" field.</summary>
    public const int LocalizationHeaderFieldNumber = 1;
    private global::Apollo.Common.Header localizationHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header LocalizationHeader {
      get { return localizationHeader_; }
      set {
        localizationHeader_ = value;
      }
    }

    /// <summary>Field number for the "canbus_header" field.</summary>
    public const int CanbusHeaderFieldNumber = 2;
    private global::Apollo.Common.Header canbusHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header CanbusHeader {
      get { return canbusHeader_; }
      set {
        canbusHeader_ = value;
      }
    }

    /// <summary>Field number for the "trajectory_header" field.</summary>
    public const int TrajectoryHeaderFieldNumber = 3;
    private global::Apollo.Common.Header trajectoryHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header TrajectoryHeader {
      get { return trajectoryHeader_; }
      set {
        trajectoryHeader_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LocalizationHeader, other.LocalizationHeader)) return false;
      if (!object.Equals(CanbusHeader, other.CanbusHeader)) return false;
      if (!object.Equals(TrajectoryHeader, other.TrajectoryHeader)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (localizationHeader_ != null) hash ^= LocalizationHeader.GetHashCode();
      if (canbusHeader_ != null) hash ^= CanbusHeader.GetHashCode();
      if (trajectoryHeader_ != null) hash ^= TrajectoryHeader.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (localizationHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LocalizationHeader);
      }
      if (canbusHeader_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CanbusHeader);
      }
      if (trajectoryHeader_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrajectoryHeader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (localizationHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizationHeader);
      }
      if (canbusHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CanbusHeader);
      }
      if (trajectoryHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrajectoryHeader);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputDebug other) {
      if (other == null) {
        return;
      }
      if (other.localizationHeader_ != null) {
        if (localizationHeader_ == null) {
          localizationHeader_ = new global::Apollo.Common.Header();
        }
        LocalizationHeader.MergeFrom(other.LocalizationHeader);
      }
      if (other.canbusHeader_ != null) {
        if (canbusHeader_ == null) {
          canbusHeader_ = new global::Apollo.Common.Header();
        }
        CanbusHeader.MergeFrom(other.CanbusHeader);
      }
      if (other.trajectoryHeader_ != null) {
        if (trajectoryHeader_ == null) {
          trajectoryHeader_ = new global::Apollo.Common.Header();
        }
        TrajectoryHeader.MergeFrom(other.TrajectoryHeader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (localizationHeader_ == null) {
              localizationHeader_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(localizationHeader_);
            break;
          }
          case 18: {
            if (canbusHeader_ == null) {
              canbusHeader_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(canbusHeader_);
            break;
          }
          case 26: {
            if (trajectoryHeader_ == null) {
              trajectoryHeader_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(trajectoryHeader_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Debug : pb::IMessage<Debug> {
    private static readonly pb::MessageParser<Debug> _parser = new pb::MessageParser<Debug>(() => new Debug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Debug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.ControlCmdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debug(Debug other) : this() {
      SimpleLonDebug = other.simpleLonDebug_ != null ? other.SimpleLonDebug.Clone() : null;
      SimpleLatDebug = other.simpleLatDebug_ != null ? other.SimpleLatDebug.Clone() : null;
      InputDebug = other.inputDebug_ != null ? other.InputDebug.Clone() : null;
      SimpleMpcDebug = other.simpleMpcDebug_ != null ? other.SimpleMpcDebug.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debug Clone() {
      return new Debug(this);
    }

    /// <summary>Field number for the "simple_lon_debug" field.</summary>
    public const int SimpleLonDebugFieldNumber = 1;
    private global::Apollo.Control.SimpleLongitudinalDebug simpleLonDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.SimpleLongitudinalDebug SimpleLonDebug {
      get { return simpleLonDebug_; }
      set {
        simpleLonDebug_ = value;
      }
    }

    /// <summary>Field number for the "simple_lat_debug" field.</summary>
    public const int SimpleLatDebugFieldNumber = 2;
    private global::Apollo.Control.SimpleLateralDebug simpleLatDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.SimpleLateralDebug SimpleLatDebug {
      get { return simpleLatDebug_; }
      set {
        simpleLatDebug_ = value;
      }
    }

    /// <summary>Field number for the "input_debug" field.</summary>
    public const int InputDebugFieldNumber = 3;
    private global::Apollo.Control.InputDebug inputDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.InputDebug InputDebug {
      get { return inputDebug_; }
      set {
        inputDebug_ = value;
      }
    }

    /// <summary>Field number for the "simple_mpc_debug" field.</summary>
    public const int SimpleMpcDebugFieldNumber = 4;
    private global::Apollo.Control.SimpleMPCDebug simpleMpcDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.SimpleMPCDebug SimpleMpcDebug {
      get { return simpleMpcDebug_; }
      set {
        simpleMpcDebug_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Debug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Debug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SimpleLonDebug, other.SimpleLonDebug)) return false;
      if (!object.Equals(SimpleLatDebug, other.SimpleLatDebug)) return false;
      if (!object.Equals(InputDebug, other.InputDebug)) return false;
      if (!object.Equals(SimpleMpcDebug, other.SimpleMpcDebug)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (simpleLonDebug_ != null) hash ^= SimpleLonDebug.GetHashCode();
      if (simpleLatDebug_ != null) hash ^= SimpleLatDebug.GetHashCode();
      if (inputDebug_ != null) hash ^= InputDebug.GetHashCode();
      if (simpleMpcDebug_ != null) hash ^= SimpleMpcDebug.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (simpleLonDebug_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SimpleLonDebug);
      }
      if (simpleLatDebug_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SimpleLatDebug);
      }
      if (inputDebug_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InputDebug);
      }
      if (simpleMpcDebug_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SimpleMpcDebug);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (simpleLonDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleLonDebug);
      }
      if (simpleLatDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleLatDebug);
      }
      if (inputDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputDebug);
      }
      if (simpleMpcDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleMpcDebug);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Debug other) {
      if (other == null) {
        return;
      }
      if (other.simpleLonDebug_ != null) {
        if (simpleLonDebug_ == null) {
          simpleLonDebug_ = new global::Apollo.Control.SimpleLongitudinalDebug();
        }
        SimpleLonDebug.MergeFrom(other.SimpleLonDebug);
      }
      if (other.simpleLatDebug_ != null) {
        if (simpleLatDebug_ == null) {
          simpleLatDebug_ = new global::Apollo.Control.SimpleLateralDebug();
        }
        SimpleLatDebug.MergeFrom(other.SimpleLatDebug);
      }
      if (other.inputDebug_ != null) {
        if (inputDebug_ == null) {
          inputDebug_ = new global::Apollo.Control.InputDebug();
        }
        InputDebug.MergeFrom(other.InputDebug);
      }
      if (other.simpleMpcDebug_ != null) {
        if (simpleMpcDebug_ == null) {
          simpleMpcDebug_ = new global::Apollo.Control.SimpleMPCDebug();
        }
        SimpleMpcDebug.MergeFrom(other.SimpleMpcDebug);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (simpleLonDebug_ == null) {
              simpleLonDebug_ = new global::Apollo.Control.SimpleLongitudinalDebug();
            }
            input.ReadMessage(simpleLonDebug_);
            break;
          }
          case 18: {
            if (simpleLatDebug_ == null) {
              simpleLatDebug_ = new global::Apollo.Control.SimpleLateralDebug();
            }
            input.ReadMessage(simpleLatDebug_);
            break;
          }
          case 26: {
            if (inputDebug_ == null) {
              inputDebug_ = new global::Apollo.Control.InputDebug();
            }
            input.ReadMessage(inputDebug_);
            break;
          }
          case 34: {
            if (simpleMpcDebug_ == null) {
              simpleMpcDebug_ = new global::Apollo.Control.SimpleMPCDebug();
            }
            input.ReadMessage(simpleMpcDebug_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
