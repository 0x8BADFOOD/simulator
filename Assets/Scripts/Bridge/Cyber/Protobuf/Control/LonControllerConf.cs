// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/lon_controller_conf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Control {

  /// <summary>Holder for reflection information generated from modules/control/proto/lon_controller_conf.proto</summary>
  public static partial class LonControllerConfReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/control/proto/lon_controller_conf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LonControllerConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb2R1bGVzL2NvbnRyb2wvcHJvdG8vbG9uX2NvbnRyb2xsZXJfY29uZi5w",
            "cm90bxIOYXBvbGxvLmNvbnRyb2waLW1vZHVsZXMvY29udHJvbC9wcm90by9j",
            "YWxpYnJhdGlvbl90YWJsZS5wcm90bxokbW9kdWxlcy9jb250cm9sL3Byb3Rv",
            "L3BpZF9jb25mLnByb3RvIiEKCkZpbHRlckNvbmYSEwoLY3V0b2ZmX2ZyZXEY",
            "ASABKAUiiAUKEUxvbkNvbnRyb2xsZXJDb25mEgoKAnRzGAEgASgBEhYKDmJy",
            "YWtlX2RlYWR6b25lGAIgASgBEhkKEXRocm90dGxlX2RlYWR6b25lGAMgASgB",
            "EiQKHHNwZWVkX2NvbnRyb2xsZXJfaW5wdXRfbGltaXQYBCABKAESGwoTc3Rh",
            "dGlvbl9lcnJvcl9saW1pdBgFIAEoARIWCg5wcmV2aWV3X3dpbmRvdxgGIAEo",
            "ARIfChdzdGFuZHN0aWxsX2FjY2VsZXJhdGlvbhgHIAEoARIxChBzdGF0aW9u",
            "X3BpZF9jb25mGAggASgLMhcuYXBvbGxvLmNvbnRyb2wuUGlkQ29uZhIzChJs",
            "b3dfc3BlZWRfcGlkX2NvbmYYCSABKAsyFy5hcG9sbG8uY29udHJvbC5QaWRD",
            "b25mEjQKE2hpZ2hfc3BlZWRfcGlkX2NvbmYYCiABKAsyFy5hcG9sbG8uY29u",
            "dHJvbC5QaWRDb25mEhQKDHN3aXRjaF9zcGVlZBgLIAEoARI5ChhyZXZlcnNl",
            "X3N0YXRpb25fcGlkX2NvbmYYDCABKAsyFy5hcG9sbG8uY29udHJvbC5QaWRD",
            "b25mEjcKFnJldmVyc2Vfc3BlZWRfcGlkX2NvbmYYDSABKAsyFy5hcG9sbG8u",
            "Y29udHJvbC5QaWRDb25mEjsKF3BpdGNoX2FuZ2xlX2ZpbHRlcl9jb25mGA4g",
            "ASgLMhouYXBvbGxvLmNvbnRyb2wuRmlsdGVyQ29uZhJTChFjYWxpYnJhdGlv",
            "bl90YWJsZRgPIAEoCzI4LmFwb2xsby5jb250cm9sLmNhbGlicmF0aW9udGFi",
            "bGUuQ29udHJvbENhbGlicmF0aW9uVGFibGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Control.Calibrationtable.CalibrationTableReflection.Descriptor, global::Apollo.Control.PidConfReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.FilterConf), global::Apollo.Control.FilterConf.Parser, new[]{ "CutoffFreq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.LonControllerConf), global::Apollo.Control.LonControllerConf.Parser, new[]{ "Ts", "BrakeDeadzone", "ThrottleDeadzone", "SpeedControllerInputLimit", "StationErrorLimit", "PreviewWindow", "StandstillAcceleration", "StationPidConf", "LowSpeedPidConf", "HighSpeedPidConf", "SwitchSpeed", "ReverseStationPidConf", "ReverseSpeedPidConf", "PitchAngleFilterConf", "CalibrationTable" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FilterConf : pb::IMessage<FilterConf> {
    private static readonly pb::MessageParser<FilterConf> _parser = new pb::MessageParser<FilterConf>(() => new FilterConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.LonControllerConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterConf(FilterConf other) : this() {
      cutoffFreq_ = other.cutoffFreq_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterConf Clone() {
      return new FilterConf(this);
    }

    /// <summary>Field number for the "cutoff_freq" field.</summary>
    public const int CutoffFreqFieldNumber = 1;
    private int cutoffFreq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CutoffFreq {
      get { return cutoffFreq_; }
      set {
        cutoffFreq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CutoffFreq != other.CutoffFreq) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CutoffFreq != 0) hash ^= CutoffFreq.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CutoffFreq != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffFreq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CutoffFreq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffFreq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterConf other) {
      if (other == null) {
        return;
      }
      if (other.CutoffFreq != 0) {
        CutoffFreq = other.CutoffFreq;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CutoffFreq = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// controller param
  /// </summary>
  public sealed partial class LonControllerConf : pb::IMessage<LonControllerConf> {
    private static readonly pb::MessageParser<LonControllerConf> _parser = new pb::MessageParser<LonControllerConf>(() => new LonControllerConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LonControllerConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.LonControllerConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LonControllerConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LonControllerConf(LonControllerConf other) : this() {
      ts_ = other.ts_;
      brakeDeadzone_ = other.brakeDeadzone_;
      throttleDeadzone_ = other.throttleDeadzone_;
      speedControllerInputLimit_ = other.speedControllerInputLimit_;
      stationErrorLimit_ = other.stationErrorLimit_;
      previewWindow_ = other.previewWindow_;
      standstillAcceleration_ = other.standstillAcceleration_;
      StationPidConf = other.stationPidConf_ != null ? other.StationPidConf.Clone() : null;
      LowSpeedPidConf = other.lowSpeedPidConf_ != null ? other.LowSpeedPidConf.Clone() : null;
      HighSpeedPidConf = other.highSpeedPidConf_ != null ? other.HighSpeedPidConf.Clone() : null;
      switchSpeed_ = other.switchSpeed_;
      ReverseStationPidConf = other.reverseStationPidConf_ != null ? other.ReverseStationPidConf.Clone() : null;
      ReverseSpeedPidConf = other.reverseSpeedPidConf_ != null ? other.ReverseSpeedPidConf.Clone() : null;
      PitchAngleFilterConf = other.pitchAngleFilterConf_ != null ? other.PitchAngleFilterConf.Clone() : null;
      CalibrationTable = other.calibrationTable_ != null ? other.CalibrationTable.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LonControllerConf Clone() {
      return new LonControllerConf(this);
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 1;
    private double ts_;
    /// <summary>
    /// longitudinal controller sampling time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "brake_deadzone" field.</summary>
    public const int BrakeDeadzoneFieldNumber = 2;
    private double brakeDeadzone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeDeadzone {
      get { return brakeDeadzone_; }
      set {
        brakeDeadzone_ = value;
      }
    }

    /// <summary>Field number for the "throttle_deadzone" field.</summary>
    public const int ThrottleDeadzoneFieldNumber = 3;
    private double throttleDeadzone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThrottleDeadzone {
      get { return throttleDeadzone_; }
      set {
        throttleDeadzone_ = value;
      }
    }

    /// <summary>Field number for the "speed_controller_input_limit" field.</summary>
    public const int SpeedControllerInputLimitFieldNumber = 4;
    private double speedControllerInputLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedControllerInputLimit {
      get { return speedControllerInputLimit_; }
      set {
        speedControllerInputLimit_ = value;
      }
    }

    /// <summary>Field number for the "station_error_limit" field.</summary>
    public const int StationErrorLimitFieldNumber = 5;
    private double stationErrorLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationErrorLimit {
      get { return stationErrorLimit_; }
      set {
        stationErrorLimit_ = value;
      }
    }

    /// <summary>Field number for the "preview_window" field.</summary>
    public const int PreviewWindowFieldNumber = 6;
    private double previewWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreviewWindow {
      get { return previewWindow_; }
      set {
        previewWindow_ = value;
      }
    }

    /// <summary>Field number for the "standstill_acceleration" field.</summary>
    public const int StandstillAccelerationFieldNumber = 7;
    private double standstillAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StandstillAcceleration {
      get { return standstillAcceleration_; }
      set {
        standstillAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "station_pid_conf" field.</summary>
    public const int StationPidConfFieldNumber = 8;
    private global::Apollo.Control.PidConf stationPidConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.PidConf StationPidConf {
      get { return stationPidConf_; }
      set {
        stationPidConf_ = value;
      }
    }

    /// <summary>Field number for the "low_speed_pid_conf" field.</summary>
    public const int LowSpeedPidConfFieldNumber = 9;
    private global::Apollo.Control.PidConf lowSpeedPidConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.PidConf LowSpeedPidConf {
      get { return lowSpeedPidConf_; }
      set {
        lowSpeedPidConf_ = value;
      }
    }

    /// <summary>Field number for the "high_speed_pid_conf" field.</summary>
    public const int HighSpeedPidConfFieldNumber = 10;
    private global::Apollo.Control.PidConf highSpeedPidConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.PidConf HighSpeedPidConf {
      get { return highSpeedPidConf_; }
      set {
        highSpeedPidConf_ = value;
      }
    }

    /// <summary>Field number for the "switch_speed" field.</summary>
    public const int SwitchSpeedFieldNumber = 11;
    private double switchSpeed_;
    /// <summary>
    /// low/high speed controller switch speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SwitchSpeed {
      get { return switchSpeed_; }
      set {
        switchSpeed_ = value;
      }
    }

    /// <summary>Field number for the "reverse_station_pid_conf" field.</summary>
    public const int ReverseStationPidConfFieldNumber = 12;
    private global::Apollo.Control.PidConf reverseStationPidConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.PidConf ReverseStationPidConf {
      get { return reverseStationPidConf_; }
      set {
        reverseStationPidConf_ = value;
      }
    }

    /// <summary>Field number for the "reverse_speed_pid_conf" field.</summary>
    public const int ReverseSpeedPidConfFieldNumber = 13;
    private global::Apollo.Control.PidConf reverseSpeedPidConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.PidConf ReverseSpeedPidConf {
      get { return reverseSpeedPidConf_; }
      set {
        reverseSpeedPidConf_ = value;
      }
    }

    /// <summary>Field number for the "pitch_angle_filter_conf" field.</summary>
    public const int PitchAngleFilterConfFieldNumber = 14;
    private global::Apollo.Control.FilterConf pitchAngleFilterConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.FilterConf PitchAngleFilterConf {
      get { return pitchAngleFilterConf_; }
      set {
        pitchAngleFilterConf_ = value;
      }
    }

    /// <summary>Field number for the "calibration_table" field.</summary>
    public const int CalibrationTableFieldNumber = 15;
    private global::Apollo.Control.Calibrationtable.ControlCalibrationTable calibrationTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.Calibrationtable.ControlCalibrationTable CalibrationTable {
      get { return calibrationTable_; }
      set {
        calibrationTable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LonControllerConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LonControllerConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ts != other.Ts) return false;
      if (BrakeDeadzone != other.BrakeDeadzone) return false;
      if (ThrottleDeadzone != other.ThrottleDeadzone) return false;
      if (SpeedControllerInputLimit != other.SpeedControllerInputLimit) return false;
      if (StationErrorLimit != other.StationErrorLimit) return false;
      if (PreviewWindow != other.PreviewWindow) return false;
      if (StandstillAcceleration != other.StandstillAcceleration) return false;
      if (!object.Equals(StationPidConf, other.StationPidConf)) return false;
      if (!object.Equals(LowSpeedPidConf, other.LowSpeedPidConf)) return false;
      if (!object.Equals(HighSpeedPidConf, other.HighSpeedPidConf)) return false;
      if (SwitchSpeed != other.SwitchSpeed) return false;
      if (!object.Equals(ReverseStationPidConf, other.ReverseStationPidConf)) return false;
      if (!object.Equals(ReverseSpeedPidConf, other.ReverseSpeedPidConf)) return false;
      if (!object.Equals(PitchAngleFilterConf, other.PitchAngleFilterConf)) return false;
      if (!object.Equals(CalibrationTable, other.CalibrationTable)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ts != 0D) hash ^= Ts.GetHashCode();
      if (BrakeDeadzone != 0D) hash ^= BrakeDeadzone.GetHashCode();
      if (ThrottleDeadzone != 0D) hash ^= ThrottleDeadzone.GetHashCode();
      if (SpeedControllerInputLimit != 0D) hash ^= SpeedControllerInputLimit.GetHashCode();
      if (StationErrorLimit != 0D) hash ^= StationErrorLimit.GetHashCode();
      if (PreviewWindow != 0D) hash ^= PreviewWindow.GetHashCode();
      if (StandstillAcceleration != 0D) hash ^= StandstillAcceleration.GetHashCode();
      if (stationPidConf_ != null) hash ^= StationPidConf.GetHashCode();
      if (lowSpeedPidConf_ != null) hash ^= LowSpeedPidConf.GetHashCode();
      if (highSpeedPidConf_ != null) hash ^= HighSpeedPidConf.GetHashCode();
      if (SwitchSpeed != 0D) hash ^= SwitchSpeed.GetHashCode();
      if (reverseStationPidConf_ != null) hash ^= ReverseStationPidConf.GetHashCode();
      if (reverseSpeedPidConf_ != null) hash ^= ReverseSpeedPidConf.GetHashCode();
      if (pitchAngleFilterConf_ != null) hash ^= PitchAngleFilterConf.GetHashCode();
      if (calibrationTable_ != null) hash ^= CalibrationTable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ts != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Ts);
      }
      if (BrakeDeadzone != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BrakeDeadzone);
      }
      if (ThrottleDeadzone != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ThrottleDeadzone);
      }
      if (SpeedControllerInputLimit != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SpeedControllerInputLimit);
      }
      if (StationErrorLimit != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(StationErrorLimit);
      }
      if (PreviewWindow != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PreviewWindow);
      }
      if (StandstillAcceleration != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(StandstillAcceleration);
      }
      if (stationPidConf_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StationPidConf);
      }
      if (lowSpeedPidConf_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LowSpeedPidConf);
      }
      if (highSpeedPidConf_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(HighSpeedPidConf);
      }
      if (SwitchSpeed != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(SwitchSpeed);
      }
      if (reverseStationPidConf_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ReverseStationPidConf);
      }
      if (reverseSpeedPidConf_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ReverseSpeedPidConf);
      }
      if (pitchAngleFilterConf_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PitchAngleFilterConf);
      }
      if (calibrationTable_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(CalibrationTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ts != 0D) {
        size += 1 + 8;
      }
      if (BrakeDeadzone != 0D) {
        size += 1 + 8;
      }
      if (ThrottleDeadzone != 0D) {
        size += 1 + 8;
      }
      if (SpeedControllerInputLimit != 0D) {
        size += 1 + 8;
      }
      if (StationErrorLimit != 0D) {
        size += 1 + 8;
      }
      if (PreviewWindow != 0D) {
        size += 1 + 8;
      }
      if (StandstillAcceleration != 0D) {
        size += 1 + 8;
      }
      if (stationPidConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StationPidConf);
      }
      if (lowSpeedPidConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowSpeedPidConf);
      }
      if (highSpeedPidConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HighSpeedPidConf);
      }
      if (SwitchSpeed != 0D) {
        size += 1 + 8;
      }
      if (reverseStationPidConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReverseStationPidConf);
      }
      if (reverseSpeedPidConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReverseSpeedPidConf);
      }
      if (pitchAngleFilterConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PitchAngleFilterConf);
      }
      if (calibrationTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CalibrationTable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LonControllerConf other) {
      if (other == null) {
        return;
      }
      if (other.Ts != 0D) {
        Ts = other.Ts;
      }
      if (other.BrakeDeadzone != 0D) {
        BrakeDeadzone = other.BrakeDeadzone;
      }
      if (other.ThrottleDeadzone != 0D) {
        ThrottleDeadzone = other.ThrottleDeadzone;
      }
      if (other.SpeedControllerInputLimit != 0D) {
        SpeedControllerInputLimit = other.SpeedControllerInputLimit;
      }
      if (other.StationErrorLimit != 0D) {
        StationErrorLimit = other.StationErrorLimit;
      }
      if (other.PreviewWindow != 0D) {
        PreviewWindow = other.PreviewWindow;
      }
      if (other.StandstillAcceleration != 0D) {
        StandstillAcceleration = other.StandstillAcceleration;
      }
      if (other.stationPidConf_ != null) {
        if (stationPidConf_ == null) {
          stationPidConf_ = new global::Apollo.Control.PidConf();
        }
        StationPidConf.MergeFrom(other.StationPidConf);
      }
      if (other.lowSpeedPidConf_ != null) {
        if (lowSpeedPidConf_ == null) {
          lowSpeedPidConf_ = new global::Apollo.Control.PidConf();
        }
        LowSpeedPidConf.MergeFrom(other.LowSpeedPidConf);
      }
      if (other.highSpeedPidConf_ != null) {
        if (highSpeedPidConf_ == null) {
          highSpeedPidConf_ = new global::Apollo.Control.PidConf();
        }
        HighSpeedPidConf.MergeFrom(other.HighSpeedPidConf);
      }
      if (other.SwitchSpeed != 0D) {
        SwitchSpeed = other.SwitchSpeed;
      }
      if (other.reverseStationPidConf_ != null) {
        if (reverseStationPidConf_ == null) {
          reverseStationPidConf_ = new global::Apollo.Control.PidConf();
        }
        ReverseStationPidConf.MergeFrom(other.ReverseStationPidConf);
      }
      if (other.reverseSpeedPidConf_ != null) {
        if (reverseSpeedPidConf_ == null) {
          reverseSpeedPidConf_ = new global::Apollo.Control.PidConf();
        }
        ReverseSpeedPidConf.MergeFrom(other.ReverseSpeedPidConf);
      }
      if (other.pitchAngleFilterConf_ != null) {
        if (pitchAngleFilterConf_ == null) {
          pitchAngleFilterConf_ = new global::Apollo.Control.FilterConf();
        }
        PitchAngleFilterConf.MergeFrom(other.PitchAngleFilterConf);
      }
      if (other.calibrationTable_ != null) {
        if (calibrationTable_ == null) {
          calibrationTable_ = new global::Apollo.Control.Calibrationtable.ControlCalibrationTable();
        }
        CalibrationTable.MergeFrom(other.CalibrationTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Ts = input.ReadDouble();
            break;
          }
          case 17: {
            BrakeDeadzone = input.ReadDouble();
            break;
          }
          case 25: {
            ThrottleDeadzone = input.ReadDouble();
            break;
          }
          case 33: {
            SpeedControllerInputLimit = input.ReadDouble();
            break;
          }
          case 41: {
            StationErrorLimit = input.ReadDouble();
            break;
          }
          case 49: {
            PreviewWindow = input.ReadDouble();
            break;
          }
          case 57: {
            StandstillAcceleration = input.ReadDouble();
            break;
          }
          case 66: {
            if (stationPidConf_ == null) {
              stationPidConf_ = new global::Apollo.Control.PidConf();
            }
            input.ReadMessage(stationPidConf_);
            break;
          }
          case 74: {
            if (lowSpeedPidConf_ == null) {
              lowSpeedPidConf_ = new global::Apollo.Control.PidConf();
            }
            input.ReadMessage(lowSpeedPidConf_);
            break;
          }
          case 82: {
            if (highSpeedPidConf_ == null) {
              highSpeedPidConf_ = new global::Apollo.Control.PidConf();
            }
            input.ReadMessage(highSpeedPidConf_);
            break;
          }
          case 89: {
            SwitchSpeed = input.ReadDouble();
            break;
          }
          case 98: {
            if (reverseStationPidConf_ == null) {
              reverseStationPidConf_ = new global::Apollo.Control.PidConf();
            }
            input.ReadMessage(reverseStationPidConf_);
            break;
          }
          case 106: {
            if (reverseSpeedPidConf_ == null) {
              reverseSpeedPidConf_ = new global::Apollo.Control.PidConf();
            }
            input.ReadMessage(reverseSpeedPidConf_);
            break;
          }
          case 114: {
            if (pitchAngleFilterConf_ == null) {
              pitchAngleFilterConf_ = new global::Apollo.Control.FilterConf();
            }
            input.ReadMessage(pitchAngleFilterConf_);
            break;
          }
          case 122: {
            if (calibrationTable_ == null) {
              calibrationTable_ = new global::Apollo.Control.Calibrationtable.ControlCalibrationTable();
            }
            input.ReadMessage(calibrationTable_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
