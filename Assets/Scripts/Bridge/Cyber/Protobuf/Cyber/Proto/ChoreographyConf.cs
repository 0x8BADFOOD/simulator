// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/choreography_conf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Cyber.Proto {

  /// <summary>Holder for reflection information generated from cyber/proto/choreography_conf.proto</summary>
  public static partial class ChoreographyConfReflection {

    #region Descriptor
    /// <summary>File descriptor for cyber/proto/choreography_conf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChoreographyConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNjeWJlci9wcm90by9jaG9yZW9ncmFwaHlfY29uZi5wcm90bxISYXBvbGxv",
            "LmN5YmVyLnByb3RvIkkKC0lubmVyVGhyZWFkEgwKBG5hbWUYASABKAkSDgoG",
            "Y3B1c2V0GAIgASgJEg4KBnBvbGljeRgDIAEoCRIMCgRwcmlvGAQgASgNIkEK",
            "EENob3Jlb2dyYXBoeVRhc2sSDAoEbmFtZRgBIAEoCRIRCglwcm9jZXNzb3IY",
            "AiABKAUSDAoEcHJpbxgDIAEoDSKpAwoQQ2hvcmVvZ3JhcGh5Q29uZhIiChpj",
            "aG9yZW9ncmFwaHlfcHJvY2Vzc29yX251bRgBIAEoDRIdChVjaG9yZW9ncmFw",
            "aHlfYWZmaW5pdHkYAiABKAkSJQodY2hvcmVvZ3JhcGh5X3Byb2Nlc3Nvcl9w",
            "b2xpY3kYAyABKAkSIwobY2hvcmVvZ3JhcGh5X3Byb2Nlc3Nvcl9wcmlvGAQg",
            "ASgFEhsKE2Nob3Jlb2dyYXBoeV9jcHVzZXQYBSABKAkSGgoScG9vbF9wcm9j",
            "ZXNzb3JfbnVtGAYgASgNEhUKDXBvb2xfYWZmaW5pdHkYByABKAkSHQoVcG9v",
            "bF9wcm9jZXNzb3JfcG9saWN5GAggASgJEhsKE3Bvb2xfcHJvY2Vzc29yX3By",
            "aW8YCSABKAUSEwoLcG9vbF9jcHVzZXQYCiABKAkSMwoFdGFza3MYCyADKAsy",
            "JC5hcG9sbG8uY3liZXIucHJvdG8uQ2hvcmVvZ3JhcGh5VGFzaxIwCgd0aHJl",
            "YWRzGAwgAygLMh8uYXBvbGxvLmN5YmVyLnByb3RvLklubmVyVGhyZWFkYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.InnerThread), global::Apollo.Cyber.Proto.InnerThread.Parser, new[]{ "Name", "Cpuset", "Policy", "Prio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ChoreographyTask), global::Apollo.Cyber.Proto.ChoreographyTask.Parser, new[]{ "Name", "Processor", "Prio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ChoreographyConf), global::Apollo.Cyber.Proto.ChoreographyConf.Parser, new[]{ "ChoreographyProcessorNum", "ChoreographyAffinity", "ChoreographyProcessorPolicy", "ChoreographyProcessorPrio", "ChoreographyCpuset", "PoolProcessorNum", "PoolAffinity", "PoolProcessorPolicy", "PoolProcessorPrio", "PoolCpuset", "Tasks", "Threads" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InnerThread : pb::IMessage<InnerThread> {
    private static readonly pb::MessageParser<InnerThread> _parser = new pb::MessageParser<InnerThread>(() => new InnerThread());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InnerThread> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.ChoreographyConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerThread() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerThread(InnerThread other) : this() {
      name_ = other.name_;
      cpuset_ = other.cpuset_;
      policy_ = other.policy_;
      prio_ = other.prio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerThread Clone() {
      return new InnerThread(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpuset" field.</summary>
    public const int CpusetFieldNumber = 2;
    private string cpuset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cpuset {
      get { return cpuset_; }
      set {
        cpuset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "policy" field.</summary>
    public const int PolicyFieldNumber = 3;
    private string policy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Policy {
      get { return policy_; }
      set {
        policy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prio" field.</summary>
    public const int PrioFieldNumber = 4;
    private uint prio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prio {
      get { return prio_; }
      set {
        prio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InnerThread);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InnerThread other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Cpuset != other.Cpuset) return false;
      if (Policy != other.Policy) return false;
      if (Prio != other.Prio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Cpuset.Length != 0) hash ^= Cpuset.GetHashCode();
      if (Policy.Length != 0) hash ^= Policy.GetHashCode();
      if (Prio != 0) hash ^= Prio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Cpuset.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cpuset);
      }
      if (Policy.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Policy);
      }
      if (Prio != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Prio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Cpuset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpuset);
      }
      if (Policy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Policy);
      }
      if (Prio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prio);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InnerThread other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Cpuset.Length != 0) {
        Cpuset = other.Cpuset;
      }
      if (other.Policy.Length != 0) {
        Policy = other.Policy;
      }
      if (other.Prio != 0) {
        Prio = other.Prio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Cpuset = input.ReadString();
            break;
          }
          case 26: {
            Policy = input.ReadString();
            break;
          }
          case 32: {
            Prio = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChoreographyTask : pb::IMessage<ChoreographyTask> {
    private static readonly pb::MessageParser<ChoreographyTask> _parser = new pb::MessageParser<ChoreographyTask>(() => new ChoreographyTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChoreographyTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.ChoreographyConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoreographyTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoreographyTask(ChoreographyTask other) : this() {
      name_ = other.name_;
      processor_ = other.processor_;
      prio_ = other.prio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoreographyTask Clone() {
      return new ChoreographyTask(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processor" field.</summary>
    public const int ProcessorFieldNumber = 2;
    private int processor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Processor {
      get { return processor_; }
      set {
        processor_ = value;
      }
    }

    /// <summary>Field number for the "prio" field.</summary>
    public const int PrioFieldNumber = 3;
    private uint prio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prio {
      get { return prio_; }
      set {
        prio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChoreographyTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChoreographyTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Processor != other.Processor) return false;
      if (Prio != other.Prio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Processor != 0) hash ^= Processor.GetHashCode();
      if (Prio != 0) hash ^= Prio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Processor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Processor);
      }
      if (Prio != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Prio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Processor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Processor);
      }
      if (Prio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prio);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChoreographyTask other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Processor != 0) {
        Processor = other.Processor;
      }
      if (other.Prio != 0) {
        Prio = other.Prio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Processor = input.ReadInt32();
            break;
          }
          case 24: {
            Prio = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChoreographyConf : pb::IMessage<ChoreographyConf> {
    private static readonly pb::MessageParser<ChoreographyConf> _parser = new pb::MessageParser<ChoreographyConf>(() => new ChoreographyConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChoreographyConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.ChoreographyConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoreographyConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoreographyConf(ChoreographyConf other) : this() {
      choreographyProcessorNum_ = other.choreographyProcessorNum_;
      choreographyAffinity_ = other.choreographyAffinity_;
      choreographyProcessorPolicy_ = other.choreographyProcessorPolicy_;
      choreographyProcessorPrio_ = other.choreographyProcessorPrio_;
      choreographyCpuset_ = other.choreographyCpuset_;
      poolProcessorNum_ = other.poolProcessorNum_;
      poolAffinity_ = other.poolAffinity_;
      poolProcessorPolicy_ = other.poolProcessorPolicy_;
      poolProcessorPrio_ = other.poolProcessorPrio_;
      poolCpuset_ = other.poolCpuset_;
      tasks_ = other.tasks_.Clone();
      threads_ = other.threads_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoreographyConf Clone() {
      return new ChoreographyConf(this);
    }

    /// <summary>Field number for the "choreography_processor_num" field.</summary>
    public const int ChoreographyProcessorNumFieldNumber = 1;
    private uint choreographyProcessorNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChoreographyProcessorNum {
      get { return choreographyProcessorNum_; }
      set {
        choreographyProcessorNum_ = value;
      }
    }

    /// <summary>Field number for the "choreography_affinity" field.</summary>
    public const int ChoreographyAffinityFieldNumber = 2;
    private string choreographyAffinity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChoreographyAffinity {
      get { return choreographyAffinity_; }
      set {
        choreographyAffinity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choreography_processor_policy" field.</summary>
    public const int ChoreographyProcessorPolicyFieldNumber = 3;
    private string choreographyProcessorPolicy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChoreographyProcessorPolicy {
      get { return choreographyProcessorPolicy_; }
      set {
        choreographyProcessorPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choreography_processor_prio" field.</summary>
    public const int ChoreographyProcessorPrioFieldNumber = 4;
    private int choreographyProcessorPrio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChoreographyProcessorPrio {
      get { return choreographyProcessorPrio_; }
      set {
        choreographyProcessorPrio_ = value;
      }
    }

    /// <summary>Field number for the "choreography_cpuset" field.</summary>
    public const int ChoreographyCpusetFieldNumber = 5;
    private string choreographyCpuset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChoreographyCpuset {
      get { return choreographyCpuset_; }
      set {
        choreographyCpuset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_processor_num" field.</summary>
    public const int PoolProcessorNumFieldNumber = 6;
    private uint poolProcessorNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PoolProcessorNum {
      get { return poolProcessorNum_; }
      set {
        poolProcessorNum_ = value;
      }
    }

    /// <summary>Field number for the "pool_affinity" field.</summary>
    public const int PoolAffinityFieldNumber = 7;
    private string poolAffinity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoolAffinity {
      get { return poolAffinity_; }
      set {
        poolAffinity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_processor_policy" field.</summary>
    public const int PoolProcessorPolicyFieldNumber = 8;
    private string poolProcessorPolicy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoolProcessorPolicy {
      get { return poolProcessorPolicy_; }
      set {
        poolProcessorPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_processor_prio" field.</summary>
    public const int PoolProcessorPrioFieldNumber = 9;
    private int poolProcessorPrio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoolProcessorPrio {
      get { return poolProcessorPrio_; }
      set {
        poolProcessorPrio_ = value;
      }
    }

    /// <summary>Field number for the "pool_cpuset" field.</summary>
    public const int PoolCpusetFieldNumber = 10;
    private string poolCpuset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoolCpuset {
      get { return poolCpuset_; }
      set {
        poolCpuset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Apollo.Cyber.Proto.ChoreographyTask> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(90, global::Apollo.Cyber.Proto.ChoreographyTask.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Cyber.Proto.ChoreographyTask> tasks_ = new pbc::RepeatedField<global::Apollo.Cyber.Proto.ChoreographyTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Cyber.Proto.ChoreographyTask> Tasks {
      get { return tasks_; }
    }

    /// <summary>Field number for the "threads" field.</summary>
    public const int ThreadsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Apollo.Cyber.Proto.InnerThread> _repeated_threads_codec
        = pb::FieldCodec.ForMessage(98, global::Apollo.Cyber.Proto.InnerThread.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Cyber.Proto.InnerThread> threads_ = new pbc::RepeatedField<global::Apollo.Cyber.Proto.InnerThread>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Cyber.Proto.InnerThread> Threads {
      get { return threads_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChoreographyConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChoreographyConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChoreographyProcessorNum != other.ChoreographyProcessorNum) return false;
      if (ChoreographyAffinity != other.ChoreographyAffinity) return false;
      if (ChoreographyProcessorPolicy != other.ChoreographyProcessorPolicy) return false;
      if (ChoreographyProcessorPrio != other.ChoreographyProcessorPrio) return false;
      if (ChoreographyCpuset != other.ChoreographyCpuset) return false;
      if (PoolProcessorNum != other.PoolProcessorNum) return false;
      if (PoolAffinity != other.PoolAffinity) return false;
      if (PoolProcessorPolicy != other.PoolProcessorPolicy) return false;
      if (PoolProcessorPrio != other.PoolProcessorPrio) return false;
      if (PoolCpuset != other.PoolCpuset) return false;
      if(!tasks_.Equals(other.tasks_)) return false;
      if(!threads_.Equals(other.threads_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChoreographyProcessorNum != 0) hash ^= ChoreographyProcessorNum.GetHashCode();
      if (ChoreographyAffinity.Length != 0) hash ^= ChoreographyAffinity.GetHashCode();
      if (ChoreographyProcessorPolicy.Length != 0) hash ^= ChoreographyProcessorPolicy.GetHashCode();
      if (ChoreographyProcessorPrio != 0) hash ^= ChoreographyProcessorPrio.GetHashCode();
      if (ChoreographyCpuset.Length != 0) hash ^= ChoreographyCpuset.GetHashCode();
      if (PoolProcessorNum != 0) hash ^= PoolProcessorNum.GetHashCode();
      if (PoolAffinity.Length != 0) hash ^= PoolAffinity.GetHashCode();
      if (PoolProcessorPolicy.Length != 0) hash ^= PoolProcessorPolicy.GetHashCode();
      if (PoolProcessorPrio != 0) hash ^= PoolProcessorPrio.GetHashCode();
      if (PoolCpuset.Length != 0) hash ^= PoolCpuset.GetHashCode();
      hash ^= tasks_.GetHashCode();
      hash ^= threads_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChoreographyProcessorNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChoreographyProcessorNum);
      }
      if (ChoreographyAffinity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChoreographyAffinity);
      }
      if (ChoreographyProcessorPolicy.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChoreographyProcessorPolicy);
      }
      if (ChoreographyProcessorPrio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChoreographyProcessorPrio);
      }
      if (ChoreographyCpuset.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChoreographyCpuset);
      }
      if (PoolProcessorNum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PoolProcessorNum);
      }
      if (PoolAffinity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PoolAffinity);
      }
      if (PoolProcessorPolicy.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PoolProcessorPolicy);
      }
      if (PoolProcessorPrio != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PoolProcessorPrio);
      }
      if (PoolCpuset.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PoolCpuset);
      }
      tasks_.WriteTo(output, _repeated_tasks_codec);
      threads_.WriteTo(output, _repeated_threads_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChoreographyProcessorNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChoreographyProcessorNum);
      }
      if (ChoreographyAffinity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChoreographyAffinity);
      }
      if (ChoreographyProcessorPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChoreographyProcessorPolicy);
      }
      if (ChoreographyProcessorPrio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChoreographyProcessorPrio);
      }
      if (ChoreographyCpuset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChoreographyCpuset);
      }
      if (PoolProcessorNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PoolProcessorNum);
      }
      if (PoolAffinity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoolAffinity);
      }
      if (PoolProcessorPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoolProcessorPolicy);
      }
      if (PoolProcessorPrio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolProcessorPrio);
      }
      if (PoolCpuset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoolCpuset);
      }
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      size += threads_.CalculateSize(_repeated_threads_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChoreographyConf other) {
      if (other == null) {
        return;
      }
      if (other.ChoreographyProcessorNum != 0) {
        ChoreographyProcessorNum = other.ChoreographyProcessorNum;
      }
      if (other.ChoreographyAffinity.Length != 0) {
        ChoreographyAffinity = other.ChoreographyAffinity;
      }
      if (other.ChoreographyProcessorPolicy.Length != 0) {
        ChoreographyProcessorPolicy = other.ChoreographyProcessorPolicy;
      }
      if (other.ChoreographyProcessorPrio != 0) {
        ChoreographyProcessorPrio = other.ChoreographyProcessorPrio;
      }
      if (other.ChoreographyCpuset.Length != 0) {
        ChoreographyCpuset = other.ChoreographyCpuset;
      }
      if (other.PoolProcessorNum != 0) {
        PoolProcessorNum = other.PoolProcessorNum;
      }
      if (other.PoolAffinity.Length != 0) {
        PoolAffinity = other.PoolAffinity;
      }
      if (other.PoolProcessorPolicy.Length != 0) {
        PoolProcessorPolicy = other.PoolProcessorPolicy;
      }
      if (other.PoolProcessorPrio != 0) {
        PoolProcessorPrio = other.PoolProcessorPrio;
      }
      if (other.PoolCpuset.Length != 0) {
        PoolCpuset = other.PoolCpuset;
      }
      tasks_.Add(other.tasks_);
      threads_.Add(other.threads_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChoreographyProcessorNum = input.ReadUInt32();
            break;
          }
          case 18: {
            ChoreographyAffinity = input.ReadString();
            break;
          }
          case 26: {
            ChoreographyProcessorPolicy = input.ReadString();
            break;
          }
          case 32: {
            ChoreographyProcessorPrio = input.ReadInt32();
            break;
          }
          case 42: {
            ChoreographyCpuset = input.ReadString();
            break;
          }
          case 48: {
            PoolProcessorNum = input.ReadUInt32();
            break;
          }
          case 58: {
            PoolAffinity = input.ReadString();
            break;
          }
          case 66: {
            PoolProcessorPolicy = input.ReadString();
            break;
          }
          case 72: {
            PoolProcessorPrio = input.ReadInt32();
            break;
          }
          case 82: {
            PoolCpuset = input.ReadString();
            break;
          }
          case 90: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
          case 98: {
            threads_.AddEntriesFrom(input, _repeated_threads_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
