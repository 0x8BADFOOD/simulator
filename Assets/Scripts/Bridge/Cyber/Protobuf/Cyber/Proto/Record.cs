// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/record.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Cyber.Proto {

  /// <summary>Holder for reflection information generated from cyber/proto/record.proto</summary>
  public static partial class RecordReflection {

    #region Descriptor
    /// <summary>File descriptor for cyber/proto/record.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RecordReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhjeWJlci9wcm90by9yZWNvcmQucHJvdG8SEmFwb2xsby5jeWJlci5wcm90",
            "byKWAgoLU2luZ2xlSW5kZXgSLQoEdHlwZRgBIAEoDjIfLmFwb2xsby5jeWJl",
            "ci5wcm90by5TZWN0aW9uVHlwZRIQCghwb3NpdGlvbhgCIAEoBBI5Cg1jaGFu",
            "bmVsX2NhY2hlGGUgASgLMiAuYXBvbGxvLmN5YmVyLnByb3RvLkNoYW5uZWxD",
            "YWNoZUgAEkIKEmNodW5rX2hlYWRlcl9jYWNoZRhmIAEoCzIkLmFwb2xsby5j",
            "eWJlci5wcm90by5DaHVua0hlYWRlckNhY2hlSAASPgoQY2h1bmtfYm9keV9j",
            "YWNoZRhnIAEoCzIiLmFwb2xsby5jeWJlci5wcm90by5DaHVua0JvZHlDYWNo",
            "ZUgAQgcKBWNhY2hlImIKEENodW5rSGVhZGVyQ2FjaGUSFgoObWVzc2FnZV9u",
            "dW1iZXIYASABKAQSEgoKYmVnaW5fdGltZRgCIAEoBBIQCghlbmRfdGltZRgD",
            "IAEoBBIQCghyYXdfc2l6ZRgEIAEoBCIoCg5DaHVua0JvZHlDYWNoZRIWCg5t",
            "ZXNzYWdlX251bWJlchgBIAEoBCJeCgxDaGFubmVsQ2FjaGUSFgoObWVzc2Fn",
            "ZV9udW1iZXIYASABKAQSDAoEbmFtZRgCIAEoCRIUCgxtZXNzYWdlX3R5cGUY",
            "AyABKAkSEgoKcHJvdG9fZGVzYxgEIAEoDCJECg1TaW5nbGVNZXNzYWdlEhQK",
            "DGNoYW5uZWxfbmFtZRgBIAEoCRIMCgR0aW1lGAIgASgEEg8KB2NvbnRlbnQY",
            "AyABKAwi9QIKBkhlYWRlchIVCg1tYWpvcl92ZXJzaW9uGAEgASgNEhUKDW1p",
            "bm9yX3ZlcnNpb24YAiABKA0SMgoIY29tcHJlc3MYAyABKA4yIC5hcG9sbG8u",
            "Y3liZXIucHJvdG8uQ29tcHJlc3NUeXBlEhYKDmNodW5rX2ludGVydmFsGAQg",
            "ASgEEhgKEHNlZ21lbnRfaW50ZXJ2YWwYBSABKAQSFgoOaW5kZXhfcG9zaXRp",
            "b24YBiABKAQSFAoMY2h1bmtfbnVtYmVyGAcgASgEEhYKDmNoYW5uZWxfbnVt",
            "YmVyGAggASgEEhIKCmJlZ2luX3RpbWUYCSABKAQSEAoIZW5kX3RpbWUYCiAB",
            "KAQSFgoObWVzc2FnZV9udW1iZXIYCyABKAQSDAoEc2l6ZRgMIAEoBBITCgtp",
            "c19jb21wbGV0ZRgNIAEoCBIWCg5jaHVua19yYXdfc2l6ZRgOIAEoBBIYChBz",
            "ZWdtZW50X3Jhd19zaXplGA8gASgEIkEKB0NoYW5uZWwSDAoEbmFtZRgBIAEo",
            "CRIUCgxtZXNzYWdlX3R5cGUYAiABKAkSEgoKcHJvdG9fZGVzYxgDIAEoDCJd",
            "CgtDaHVua0hlYWRlchISCgpiZWdpbl90aW1lGAEgASgEEhAKCGVuZF90aW1l",
            "GAIgASgEEhYKDm1lc3NhZ2VfbnVtYmVyGAMgASgEEhAKCHJhd19zaXplGAQg",
            "ASgEIkAKCUNodW5rQm9keRIzCghtZXNzYWdlcxgBIAMoCzIhLmFwb2xsby5j",
            "eWJlci5wcm90by5TaW5nbGVNZXNzYWdlIjkKBUluZGV4EjAKB2luZGV4ZXMY",
            "ASADKAsyHy5hcG9sbG8uY3liZXIucHJvdG8uU2luZ2xlSW5kZXgqewoLU2Vj",
            "dGlvblR5cGUSEgoOU0VDVElPTl9IRUFERVIQABIYChRTRUNUSU9OX0NIVU5L",
            "X0hFQURFUhABEhYKElNFQ1RJT05fQ0hVTktfQk9EWRACEhEKDVNFQ1RJT05f",
            "SU5ERVgQAxITCg9TRUNUSU9OX0NIQU5ORUwQBCpFCgxDb21wcmVzc1R5cGUS",
            "EQoNQ09NUFJFU1NfTk9ORRAAEhAKDENPTVBSRVNTX0JaMhABEhAKDENPTVBS",
            "RVNTX0xaNBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Cyber.Proto.SectionType), typeof(global::Apollo.Cyber.Proto.CompressType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.SingleIndex), global::Apollo.Cyber.Proto.SingleIndex.Parser, new[]{ "Type", "Position", "ChannelCache", "ChunkHeaderCache", "ChunkBodyCache" }, new[]{ "Cache" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ChunkHeaderCache), global::Apollo.Cyber.Proto.ChunkHeaderCache.Parser, new[]{ "MessageNumber", "BeginTime", "EndTime", "RawSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ChunkBodyCache), global::Apollo.Cyber.Proto.ChunkBodyCache.Parser, new[]{ "MessageNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ChannelCache), global::Apollo.Cyber.Proto.ChannelCache.Parser, new[]{ "MessageNumber", "Name", "MessageType", "ProtoDesc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.SingleMessage), global::Apollo.Cyber.Proto.SingleMessage.Parser, new[]{ "ChannelName", "Time", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.Header), global::Apollo.Cyber.Proto.Header.Parser, new[]{ "MajorVersion", "MinorVersion", "Compress", "ChunkInterval", "SegmentInterval", "IndexPosition", "ChunkNumber", "ChannelNumber", "BeginTime", "EndTime", "MessageNumber", "Size", "IsComplete", "ChunkRawSize", "SegmentRawSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.Channel), global::Apollo.Cyber.Proto.Channel.Parser, new[]{ "Name", "MessageType", "ProtoDesc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ChunkHeader), global::Apollo.Cyber.Proto.ChunkHeader.Parser, new[]{ "BeginTime", "EndTime", "MessageNumber", "RawSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ChunkBody), global::Apollo.Cyber.Proto.ChunkBody.Parser, new[]{ "Messages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.Index), global::Apollo.Cyber.Proto.Index.Parser, new[]{ "Indexes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SectionType {
    [pbr::OriginalName("SECTION_HEADER")] SectionHeader = 0,
    [pbr::OriginalName("SECTION_CHUNK_HEADER")] SectionChunkHeader = 1,
    [pbr::OriginalName("SECTION_CHUNK_BODY")] SectionChunkBody = 2,
    [pbr::OriginalName("SECTION_INDEX")] SectionIndex = 3,
    [pbr::OriginalName("SECTION_CHANNEL")] SectionChannel = 4,
  }

  public enum CompressType {
    [pbr::OriginalName("COMPRESS_NONE")] CompressNone = 0,
    [pbr::OriginalName("COMPRESS_BZ2")] CompressBz2 = 1,
    [pbr::OriginalName("COMPRESS_LZ4")] CompressLz4 = 2,
  }

  #endregion

  #region Messages
  public sealed partial class SingleIndex : pb::IMessage<SingleIndex> {
    private static readonly pb::MessageParser<SingleIndex> _parser = new pb::MessageParser<SingleIndex>(() => new SingleIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleIndex(SingleIndex other) : this() {
      type_ = other.type_;
      position_ = other.position_;
      switch (other.CacheCase) {
        case CacheOneofCase.ChannelCache:
          ChannelCache = other.ChannelCache.Clone();
          break;
        case CacheOneofCase.ChunkHeaderCache:
          ChunkHeaderCache = other.ChunkHeaderCache.Clone();
          break;
        case CacheOneofCase.ChunkBodyCache:
          ChunkBodyCache = other.ChunkBodyCache.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleIndex Clone() {
      return new SingleIndex(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apollo.Cyber.Proto.SectionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.SectionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private ulong position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "channel_cache" field.</summary>
    public const int ChannelCacheFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.ChannelCache ChannelCache {
      get { return cacheCase_ == CacheOneofCase.ChannelCache ? (global::Apollo.Cyber.Proto.ChannelCache) cache_ : null; }
      set {
        cache_ = value;
        cacheCase_ = value == null ? CacheOneofCase.None : CacheOneofCase.ChannelCache;
      }
    }

    /// <summary>Field number for the "chunk_header_cache" field.</summary>
    public const int ChunkHeaderCacheFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.ChunkHeaderCache ChunkHeaderCache {
      get { return cacheCase_ == CacheOneofCase.ChunkHeaderCache ? (global::Apollo.Cyber.Proto.ChunkHeaderCache) cache_ : null; }
      set {
        cache_ = value;
        cacheCase_ = value == null ? CacheOneofCase.None : CacheOneofCase.ChunkHeaderCache;
      }
    }

    /// <summary>Field number for the "chunk_body_cache" field.</summary>
    public const int ChunkBodyCacheFieldNumber = 103;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.ChunkBodyCache ChunkBodyCache {
      get { return cacheCase_ == CacheOneofCase.ChunkBodyCache ? (global::Apollo.Cyber.Proto.ChunkBodyCache) cache_ : null; }
      set {
        cache_ = value;
        cacheCase_ = value == null ? CacheOneofCase.None : CacheOneofCase.ChunkBodyCache;
      }
    }

    private object cache_;
    /// <summary>Enum of possible cases for the "cache" oneof.</summary>
    public enum CacheOneofCase {
      None = 0,
      ChannelCache = 101,
      ChunkHeaderCache = 102,
      ChunkBodyCache = 103,
    }
    private CacheOneofCase cacheCase_ = CacheOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheOneofCase CacheCase {
      get { return cacheCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCache() {
      cacheCase_ = CacheOneofCase.None;
      cache_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(ChannelCache, other.ChannelCache)) return false;
      if (!object.Equals(ChunkHeaderCache, other.ChunkHeaderCache)) return false;
      if (!object.Equals(ChunkBodyCache, other.ChunkBodyCache)) return false;
      if (CacheCase != other.CacheCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Position != 0UL) hash ^= Position.GetHashCode();
      if (cacheCase_ == CacheOneofCase.ChannelCache) hash ^= ChannelCache.GetHashCode();
      if (cacheCase_ == CacheOneofCase.ChunkHeaderCache) hash ^= ChunkHeaderCache.GetHashCode();
      if (cacheCase_ == CacheOneofCase.ChunkBodyCache) hash ^= ChunkBodyCache.GetHashCode();
      hash ^= (int) cacheCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Position != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Position);
      }
      if (cacheCase_ == CacheOneofCase.ChannelCache) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(ChannelCache);
      }
      if (cacheCase_ == CacheOneofCase.ChunkHeaderCache) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(ChunkHeaderCache);
      }
      if (cacheCase_ == CacheOneofCase.ChunkBodyCache) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(ChunkBodyCache);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Position != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Position);
      }
      if (cacheCase_ == CacheOneofCase.ChannelCache) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChannelCache);
      }
      if (cacheCase_ == CacheOneofCase.ChunkHeaderCache) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChunkHeaderCache);
      }
      if (cacheCase_ == CacheOneofCase.ChunkBodyCache) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChunkBodyCache);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleIndex other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Position != 0UL) {
        Position = other.Position;
      }
      switch (other.CacheCase) {
        case CacheOneofCase.ChannelCache:
          ChannelCache = other.ChannelCache;
          break;
        case CacheOneofCase.ChunkHeaderCache:
          ChunkHeaderCache = other.ChunkHeaderCache;
          break;
        case CacheOneofCase.ChunkBodyCache:
          ChunkBodyCache = other.ChunkBodyCache;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apollo.Cyber.Proto.SectionType) input.ReadEnum();
            break;
          }
          case 16: {
            Position = input.ReadUInt64();
            break;
          }
          case 810: {
            global::Apollo.Cyber.Proto.ChannelCache subBuilder = new global::Apollo.Cyber.Proto.ChannelCache();
            if (cacheCase_ == CacheOneofCase.ChannelCache) {
              subBuilder.MergeFrom(ChannelCache);
            }
            input.ReadMessage(subBuilder);
            ChannelCache = subBuilder;
            break;
          }
          case 818: {
            global::Apollo.Cyber.Proto.ChunkHeaderCache subBuilder = new global::Apollo.Cyber.Proto.ChunkHeaderCache();
            if (cacheCase_ == CacheOneofCase.ChunkHeaderCache) {
              subBuilder.MergeFrom(ChunkHeaderCache);
            }
            input.ReadMessage(subBuilder);
            ChunkHeaderCache = subBuilder;
            break;
          }
          case 826: {
            global::Apollo.Cyber.Proto.ChunkBodyCache subBuilder = new global::Apollo.Cyber.Proto.ChunkBodyCache();
            if (cacheCase_ == CacheOneofCase.ChunkBodyCache) {
              subBuilder.MergeFrom(ChunkBodyCache);
            }
            input.ReadMessage(subBuilder);
            ChunkBodyCache = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChunkHeaderCache : pb::IMessage<ChunkHeaderCache> {
    private static readonly pb::MessageParser<ChunkHeaderCache> _parser = new pb::MessageParser<ChunkHeaderCache>(() => new ChunkHeaderCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkHeaderCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkHeaderCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkHeaderCache(ChunkHeaderCache other) : this() {
      messageNumber_ = other.messageNumber_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      rawSize_ = other.rawSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkHeaderCache Clone() {
      return new ChunkHeaderCache(this);
    }

    /// <summary>Field number for the "message_number" field.</summary>
    public const int MessageNumberFieldNumber = 1;
    private ulong messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 2;
    private ulong beginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private ulong endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "raw_size" field.</summary>
    public const int RawSizeFieldNumber = 4;
    private ulong rawSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RawSize {
      get { return rawSize_; }
      set {
        rawSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkHeaderCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkHeaderCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageNumber != other.MessageNumber) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (RawSize != other.RawSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageNumber != 0UL) hash ^= MessageNumber.GetHashCode();
      if (BeginTime != 0UL) hash ^= BeginTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (RawSize != 0UL) hash ^= RawSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageNumber != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MessageNumber);
      }
      if (BeginTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BeginTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EndTime);
      }
      if (RawSize != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RawSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MessageNumber);
      }
      if (BeginTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (RawSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RawSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkHeaderCache other) {
      if (other == null) {
        return;
      }
      if (other.MessageNumber != 0UL) {
        MessageNumber = other.MessageNumber;
      }
      if (other.BeginTime != 0UL) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.RawSize != 0UL) {
        RawSize = other.RawSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageNumber = input.ReadUInt64();
            break;
          }
          case 16: {
            BeginTime = input.ReadUInt64();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 32: {
            RawSize = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChunkBodyCache : pb::IMessage<ChunkBodyCache> {
    private static readonly pb::MessageParser<ChunkBodyCache> _parser = new pb::MessageParser<ChunkBodyCache>(() => new ChunkBodyCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkBodyCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBodyCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBodyCache(ChunkBodyCache other) : this() {
      messageNumber_ = other.messageNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBodyCache Clone() {
      return new ChunkBodyCache(this);
    }

    /// <summary>Field number for the "message_number" field.</summary>
    public const int MessageNumberFieldNumber = 1;
    private ulong messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkBodyCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkBodyCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageNumber != other.MessageNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageNumber != 0UL) hash ^= MessageNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageNumber != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MessageNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MessageNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkBodyCache other) {
      if (other == null) {
        return;
      }
      if (other.MessageNumber != 0UL) {
        MessageNumber = other.MessageNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageNumber = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelCache : pb::IMessage<ChannelCache> {
    private static readonly pb::MessageParser<ChannelCache> _parser = new pb::MessageParser<ChannelCache>(() => new ChannelCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCache(ChannelCache other) : this() {
      messageNumber_ = other.messageNumber_;
      name_ = other.name_;
      messageType_ = other.messageType_;
      protoDesc_ = other.protoDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCache Clone() {
      return new ChannelCache(this);
    }

    /// <summary>Field number for the "message_number" field.</summary>
    public const int MessageNumberFieldNumber = 1;
    private ulong messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 3;
    private string messageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_desc" field.</summary>
    public const int ProtoDescFieldNumber = 4;
    private pb::ByteString protoDesc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProtoDesc {
      get { return protoDesc_; }
      set {
        protoDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageNumber != other.MessageNumber) return false;
      if (Name != other.Name) return false;
      if (MessageType != other.MessageType) return false;
      if (ProtoDesc != other.ProtoDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageNumber != 0UL) hash ^= MessageNumber.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (ProtoDesc.Length != 0) hash ^= ProtoDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageNumber != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MessageNumber);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MessageType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MessageType);
      }
      if (ProtoDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ProtoDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MessageNumber);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (ProtoDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProtoDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelCache other) {
      if (other == null) {
        return;
      }
      if (other.MessageNumber != 0UL) {
        MessageNumber = other.MessageNumber;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.ProtoDesc.Length != 0) {
        ProtoDesc = other.ProtoDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageNumber = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MessageType = input.ReadString();
            break;
          }
          case 34: {
            ProtoDesc = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleMessage : pb::IMessage<SingleMessage> {
    private static readonly pb::MessageParser<SingleMessage> _parser = new pb::MessageParser<SingleMessage>(() => new SingleMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleMessage(SingleMessage other) : this() {
      channelName_ = other.channelName_;
      time_ = other.time_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleMessage Clone() {
      return new SingleMessage(this);
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 1;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelName != other.ChannelName) return false;
      if (Time != other.Time) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelName);
      }
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleMessage other) {
      if (other == null) {
        return;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChannelName = input.ReadString();
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
          case 26: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      majorVersion_ = other.majorVersion_;
      minorVersion_ = other.minorVersion_;
      compress_ = other.compress_;
      chunkInterval_ = other.chunkInterval_;
      segmentInterval_ = other.segmentInterval_;
      indexPosition_ = other.indexPosition_;
      chunkNumber_ = other.chunkNumber_;
      channelNumber_ = other.channelNumber_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      messageNumber_ = other.messageNumber_;
      size_ = other.size_;
      isComplete_ = other.isComplete_;
      chunkRawSize_ = other.chunkRawSize_;
      segmentRawSize_ = other.segmentRawSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "major_version" field.</summary>
    public const int MajorVersionFieldNumber = 1;
    private uint majorVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MajorVersion {
      get { return majorVersion_; }
      set {
        majorVersion_ = value;
      }
    }

    /// <summary>Field number for the "minor_version" field.</summary>
    public const int MinorVersionFieldNumber = 2;
    private uint minorVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinorVersion {
      get { return minorVersion_; }
      set {
        minorVersion_ = value;
      }
    }

    /// <summary>Field number for the "compress" field.</summary>
    public const int CompressFieldNumber = 3;
    private global::Apollo.Cyber.Proto.CompressType compress_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.CompressType Compress {
      get { return compress_; }
      set {
        compress_ = value;
      }
    }

    /// <summary>Field number for the "chunk_interval" field.</summary>
    public const int ChunkIntervalFieldNumber = 4;
    private ulong chunkInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChunkInterval {
      get { return chunkInterval_; }
      set {
        chunkInterval_ = value;
      }
    }

    /// <summary>Field number for the "segment_interval" field.</summary>
    public const int SegmentIntervalFieldNumber = 5;
    private ulong segmentInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SegmentInterval {
      get { return segmentInterval_; }
      set {
        segmentInterval_ = value;
      }
    }

    /// <summary>Field number for the "index_position" field.</summary>
    public const int IndexPositionFieldNumber = 6;
    private ulong indexPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IndexPosition {
      get { return indexPosition_; }
      set {
        indexPosition_ = value;
      }
    }

    /// <summary>Field number for the "chunk_number" field.</summary>
    public const int ChunkNumberFieldNumber = 7;
    private ulong chunkNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChunkNumber {
      get { return chunkNumber_; }
      set {
        chunkNumber_ = value;
      }
    }

    /// <summary>Field number for the "channel_number" field.</summary>
    public const int ChannelNumberFieldNumber = 8;
    private ulong channelNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelNumber {
      get { return channelNumber_; }
      set {
        channelNumber_ = value;
      }
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 9;
    private ulong beginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 10;
    private ulong endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "message_number" field.</summary>
    public const int MessageNumberFieldNumber = 11;
    private ulong messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 12;
    private ulong size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "is_complete" field.</summary>
    public const int IsCompleteFieldNumber = 13;
    private bool isComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    /// <summary>Field number for the "chunk_raw_size" field.</summary>
    public const int ChunkRawSizeFieldNumber = 14;
    private ulong chunkRawSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChunkRawSize {
      get { return chunkRawSize_; }
      set {
        chunkRawSize_ = value;
      }
    }

    /// <summary>Field number for the "segment_raw_size" field.</summary>
    public const int SegmentRawSizeFieldNumber = 15;
    private ulong segmentRawSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SegmentRawSize {
      get { return segmentRawSize_; }
      set {
        segmentRawSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MajorVersion != other.MajorVersion) return false;
      if (MinorVersion != other.MinorVersion) return false;
      if (Compress != other.Compress) return false;
      if (ChunkInterval != other.ChunkInterval) return false;
      if (SegmentInterval != other.SegmentInterval) return false;
      if (IndexPosition != other.IndexPosition) return false;
      if (ChunkNumber != other.ChunkNumber) return false;
      if (ChannelNumber != other.ChannelNumber) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (MessageNumber != other.MessageNumber) return false;
      if (Size != other.Size) return false;
      if (IsComplete != other.IsComplete) return false;
      if (ChunkRawSize != other.ChunkRawSize) return false;
      if (SegmentRawSize != other.SegmentRawSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MajorVersion != 0) hash ^= MajorVersion.GetHashCode();
      if (MinorVersion != 0) hash ^= MinorVersion.GetHashCode();
      if (Compress != 0) hash ^= Compress.GetHashCode();
      if (ChunkInterval != 0UL) hash ^= ChunkInterval.GetHashCode();
      if (SegmentInterval != 0UL) hash ^= SegmentInterval.GetHashCode();
      if (IndexPosition != 0UL) hash ^= IndexPosition.GetHashCode();
      if (ChunkNumber != 0UL) hash ^= ChunkNumber.GetHashCode();
      if (ChannelNumber != 0UL) hash ^= ChannelNumber.GetHashCode();
      if (BeginTime != 0UL) hash ^= BeginTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (MessageNumber != 0UL) hash ^= MessageNumber.GetHashCode();
      if (Size != 0UL) hash ^= Size.GetHashCode();
      if (IsComplete != false) hash ^= IsComplete.GetHashCode();
      if (ChunkRawSize != 0UL) hash ^= ChunkRawSize.GetHashCode();
      if (SegmentRawSize != 0UL) hash ^= SegmentRawSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MajorVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MajorVersion);
      }
      if (MinorVersion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MinorVersion);
      }
      if (Compress != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Compress);
      }
      if (ChunkInterval != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChunkInterval);
      }
      if (SegmentInterval != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SegmentInterval);
      }
      if (IndexPosition != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(IndexPosition);
      }
      if (ChunkNumber != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ChunkNumber);
      }
      if (ChannelNumber != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ChannelNumber);
      }
      if (BeginTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(BeginTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(EndTime);
      }
      if (MessageNumber != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(MessageNumber);
      }
      if (Size != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Size);
      }
      if (IsComplete != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsComplete);
      }
      if (ChunkRawSize != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ChunkRawSize);
      }
      if (SegmentRawSize != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(SegmentRawSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MajorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorVersion);
      }
      if (MinorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorVersion);
      }
      if (Compress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compress);
      }
      if (ChunkInterval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChunkInterval);
      }
      if (SegmentInterval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SegmentInterval);
      }
      if (IndexPosition != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IndexPosition);
      }
      if (ChunkNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChunkNumber);
      }
      if (ChannelNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelNumber);
      }
      if (BeginTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (MessageNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MessageNumber);
      }
      if (Size != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
      }
      if (IsComplete != false) {
        size += 1 + 1;
      }
      if (ChunkRawSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChunkRawSize);
      }
      if (SegmentRawSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SegmentRawSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.MajorVersion != 0) {
        MajorVersion = other.MajorVersion;
      }
      if (other.MinorVersion != 0) {
        MinorVersion = other.MinorVersion;
      }
      if (other.Compress != 0) {
        Compress = other.Compress;
      }
      if (other.ChunkInterval != 0UL) {
        ChunkInterval = other.ChunkInterval;
      }
      if (other.SegmentInterval != 0UL) {
        SegmentInterval = other.SegmentInterval;
      }
      if (other.IndexPosition != 0UL) {
        IndexPosition = other.IndexPosition;
      }
      if (other.ChunkNumber != 0UL) {
        ChunkNumber = other.ChunkNumber;
      }
      if (other.ChannelNumber != 0UL) {
        ChannelNumber = other.ChannelNumber;
      }
      if (other.BeginTime != 0UL) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.MessageNumber != 0UL) {
        MessageNumber = other.MessageNumber;
      }
      if (other.Size != 0UL) {
        Size = other.Size;
      }
      if (other.IsComplete != false) {
        IsComplete = other.IsComplete;
      }
      if (other.ChunkRawSize != 0UL) {
        ChunkRawSize = other.ChunkRawSize;
      }
      if (other.SegmentRawSize != 0UL) {
        SegmentRawSize = other.SegmentRawSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MajorVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            MinorVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            compress_ = (global::Apollo.Cyber.Proto.CompressType) input.ReadEnum();
            break;
          }
          case 32: {
            ChunkInterval = input.ReadUInt64();
            break;
          }
          case 40: {
            SegmentInterval = input.ReadUInt64();
            break;
          }
          case 48: {
            IndexPosition = input.ReadUInt64();
            break;
          }
          case 56: {
            ChunkNumber = input.ReadUInt64();
            break;
          }
          case 64: {
            ChannelNumber = input.ReadUInt64();
            break;
          }
          case 72: {
            BeginTime = input.ReadUInt64();
            break;
          }
          case 80: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 88: {
            MessageNumber = input.ReadUInt64();
            break;
          }
          case 96: {
            Size = input.ReadUInt64();
            break;
          }
          case 104: {
            IsComplete = input.ReadBool();
            break;
          }
          case 112: {
            ChunkRawSize = input.ReadUInt64();
            break;
          }
          case 120: {
            SegmentRawSize = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Channel : pb::IMessage<Channel> {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel(Channel other) : this() {
      name_ = other.name_;
      messageType_ = other.messageType_;
      protoDesc_ = other.protoDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 2;
    private string messageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_desc" field.</summary>
    public const int ProtoDescFieldNumber = 3;
    private pb::ByteString protoDesc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProtoDesc {
      get { return protoDesc_; }
      set {
        protoDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (MessageType != other.MessageType) return false;
      if (ProtoDesc != other.ProtoDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (ProtoDesc.Length != 0) hash ^= ProtoDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (MessageType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageType);
      }
      if (ProtoDesc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ProtoDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (ProtoDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProtoDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.ProtoDesc.Length != 0) {
        ProtoDesc = other.ProtoDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            MessageType = input.ReadString();
            break;
          }
          case 26: {
            ProtoDesc = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChunkHeader : pb::IMessage<ChunkHeader> {
    private static readonly pb::MessageParser<ChunkHeader> _parser = new pb::MessageParser<ChunkHeader>(() => new ChunkHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkHeader(ChunkHeader other) : this() {
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      messageNumber_ = other.messageNumber_;
      rawSize_ = other.rawSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkHeader Clone() {
      return new ChunkHeader(this);
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 1;
    private ulong beginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private ulong endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "message_number" field.</summary>
    public const int MessageNumberFieldNumber = 3;
    private ulong messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "raw_size" field.</summary>
    public const int RawSizeFieldNumber = 4;
    private ulong rawSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RawSize {
      get { return rawSize_; }
      set {
        rawSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (MessageNumber != other.MessageNumber) return false;
      if (RawSize != other.RawSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BeginTime != 0UL) hash ^= BeginTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (MessageNumber != 0UL) hash ^= MessageNumber.GetHashCode();
      if (RawSize != 0UL) hash ^= RawSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeginTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EndTime);
      }
      if (MessageNumber != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MessageNumber);
      }
      if (RawSize != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RawSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BeginTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (MessageNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MessageNumber);
      }
      if (RawSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RawSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkHeader other) {
      if (other == null) {
        return;
      }
      if (other.BeginTime != 0UL) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.MessageNumber != 0UL) {
        MessageNumber = other.MessageNumber;
      }
      if (other.RawSize != 0UL) {
        RawSize = other.RawSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeginTime = input.ReadUInt64();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 24: {
            MessageNumber = input.ReadUInt64();
            break;
          }
          case 32: {
            RawSize = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChunkBody : pb::IMessage<ChunkBody> {
    private static readonly pb::MessageParser<ChunkBody> _parser = new pb::MessageParser<ChunkBody>(() => new ChunkBody());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBody(ChunkBody other) : this() {
      messages_ = other.messages_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkBody Clone() {
      return new ChunkBody(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Cyber.Proto.SingleMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Cyber.Proto.SingleMessage.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Cyber.Proto.SingleMessage> messages_ = new pbc::RepeatedField<global::Apollo.Cyber.Proto.SingleMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Cyber.Proto.SingleMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkBody other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Index : pb::IMessage<Index> {
    private static readonly pb::MessageParser<Index> _parser = new pb::MessageParser<Index>(() => new Index());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Index> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RecordReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index(Index other) : this() {
      indexes_ = other.indexes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index Clone() {
      return new Index(this);
    }

    /// <summary>Field number for the "indexes" field.</summary>
    public const int IndexesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Cyber.Proto.SingleIndex> _repeated_indexes_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Cyber.Proto.SingleIndex.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Cyber.Proto.SingleIndex> indexes_ = new pbc::RepeatedField<global::Apollo.Cyber.Proto.SingleIndex>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Cyber.Proto.SingleIndex> Indexes {
      get { return indexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Index);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Index other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!indexes_.Equals(other.indexes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= indexes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      indexes_.WriteTo(output, _repeated_indexes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += indexes_.CalculateSize(_repeated_indexes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Index other) {
      if (other == null) {
        return;
      }
      indexes_.Add(other.indexes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            indexes_.AddEntriesFrom(input, _repeated_indexes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
