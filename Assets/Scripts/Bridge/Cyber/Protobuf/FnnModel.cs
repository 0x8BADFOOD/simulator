// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/prediction/mlp_train/proto/fnn_model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from modules/tools/prediction/mlp_train/proto/fnn_model.proto</summary>
public static partial class FnnModelReflection {

  #region Descriptor
  /// <summary>File descriptor for modules/tools/prediction/mlp_train/proto/fnn_model.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FnnModelReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cjhtb2R1bGVzL3Rvb2xzL3ByZWRpY3Rpb24vbWxwX3RyYWluL3Byb3RvL2Zu",
          "bl9tb2RlbC5wcm90byIZCgZWZWN0b3ISDwoHY29sdW1ucxgBIAMoASIfCgZN",
          "YXRyaXgSFQoEcm93cxgBIAMoCzIHLlZlY3RvciLyAQoFTGF5ZXISFwoPbGF5",
          "ZXJfaW5wdXRfZGltGAEgASgFEhgKEGxheWVyX291dHB1dF9kaW0YAiABKAUS",
          "IwoSbGF5ZXJfaW5wdXRfd2VpZ2h0GAMgASgLMgcuTWF0cml4EhsKCmxheWVy",
          "X2JpYXMYBCABKAsyBy5WZWN0b3ISNAoVbGF5ZXJfYWN0aXZhdGlvbl9mdW5j",
          "GAUgASgOMhUuTGF5ZXIuQWN0aXZhdGlvbkZ1bmMiPgoOQWN0aXZhdGlvbkZ1",
          "bmMSCAoEUkVMVRAAEggKBFRBTkgQARILCgdTSUdNT0lEEAISCwoHU09GVE1B",
          "WBADIpgBCghGbm5Nb2RlbBIRCglkaW1faW5wdXQYASABKAUSHQoMc2FtcGxl",
          "c19tZWFuGAIgASgLMgcuVmVjdG9yEhwKC3NhbXBsZXNfc3RkGAMgASgLMgcu",
          "VmVjdG9yEhEKCW51bV9sYXllchgEIAEoBRIVCgVsYXllchgFIAMoCzIGLkxh",
          "eWVyEhIKCmRpbV9vdXRwdXQYBiABKAViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector), global::Vector.Parser, new[]{ "Columns" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Matrix), global::Matrix.Parser, new[]{ "Rows" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Layer), global::Layer.Parser, new[]{ "LayerInputDim", "LayerOutputDim", "LayerInputWeight", "LayerBias", "LayerActivationFunc" }, null, new[]{ typeof(global::Layer.Types.ActivationFunc) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FnnModel), global::FnnModel.Parser, new[]{ "DimInput", "SamplesMean", "SamplesStd", "NumLayer", "Layer", "DimOutput" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Vector : pb::IMessage<Vector> {
  private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FnnModelReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector(Vector other) : this() {
    columns_ = other.columns_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector Clone() {
    return new Vector(this);
  }

  /// <summary>Field number for the "columns" field.</summary>
  public const int ColumnsFieldNumber = 1;
  private static readonly pb::FieldCodec<double> _repeated_columns_codec
      = pb::FieldCodec.ForDouble(10);
  private readonly pbc::RepeatedField<double> columns_ = new pbc::RepeatedField<double>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> Columns {
    get { return columns_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!columns_.Equals(other.columns_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= columns_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    columns_.WriteTo(output, _repeated_columns_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += columns_.CalculateSize(_repeated_columns_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector other) {
    if (other == null) {
      return;
    }
    columns_.Add(other.columns_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 9: {
          columns_.AddEntriesFrom(input, _repeated_columns_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Matrix : pb::IMessage<Matrix> {
  private static readonly pb::MessageParser<Matrix> _parser = new pb::MessageParser<Matrix>(() => new Matrix());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Matrix> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FnnModelReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Matrix() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Matrix(Matrix other) : this() {
    rows_ = other.rows_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Matrix Clone() {
    return new Matrix(this);
  }

  /// <summary>Field number for the "rows" field.</summary>
  public const int RowsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Vector> _repeated_rows_codec
      = pb::FieldCodec.ForMessage(10, global::Vector.Parser);
  private readonly pbc::RepeatedField<global::Vector> rows_ = new pbc::RepeatedField<global::Vector>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Vector> Rows {
    get { return rows_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Matrix);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Matrix other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rows_.Equals(other.rows_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rows_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rows_.WriteTo(output, _repeated_rows_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rows_.CalculateSize(_repeated_rows_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Matrix other) {
    if (other == null) {
      return;
    }
    rows_.Add(other.rows_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rows_.AddEntriesFrom(input, _repeated_rows_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Layer : pb::IMessage<Layer> {
  private static readonly pb::MessageParser<Layer> _parser = new pb::MessageParser<Layer>(() => new Layer());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Layer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FnnModelReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Layer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Layer(Layer other) : this() {
    layerInputDim_ = other.layerInputDim_;
    layerOutputDim_ = other.layerOutputDim_;
    LayerInputWeight = other.layerInputWeight_ != null ? other.LayerInputWeight.Clone() : null;
    LayerBias = other.layerBias_ != null ? other.LayerBias.Clone() : null;
    layerActivationFunc_ = other.layerActivationFunc_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Layer Clone() {
    return new Layer(this);
  }

  /// <summary>Field number for the "layer_input_dim" field.</summary>
  public const int LayerInputDimFieldNumber = 1;
  private int layerInputDim_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LayerInputDim {
    get { return layerInputDim_; }
    set {
      layerInputDim_ = value;
    }
  }

  /// <summary>Field number for the "layer_output_dim" field.</summary>
  public const int LayerOutputDimFieldNumber = 2;
  private int layerOutputDim_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LayerOutputDim {
    get { return layerOutputDim_; }
    set {
      layerOutputDim_ = value;
    }
  }

  /// <summary>Field number for the "layer_input_weight" field.</summary>
  public const int LayerInputWeightFieldNumber = 3;
  private global::Matrix layerInputWeight_;
  /// <summary>
  /// weight matrix of |input_dim| x |output_dim|
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Matrix LayerInputWeight {
    get { return layerInputWeight_; }
    set {
      layerInputWeight_ = value;
    }
  }

  /// <summary>Field number for the "layer_bias" field.</summary>
  public const int LayerBiasFieldNumber = 4;
  private global::Vector layerBias_;
  /// <summary>
  /// vector of bias, size of |output_dim|
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector LayerBias {
    get { return layerBias_; }
    set {
      layerBias_ = value;
    }
  }

  /// <summary>Field number for the "layer_activation_func" field.</summary>
  public const int LayerActivationFuncFieldNumber = 5;
  private global::Layer.Types.ActivationFunc layerActivationFunc_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Layer.Types.ActivationFunc LayerActivationFunc {
    get { return layerActivationFunc_; }
    set {
      layerActivationFunc_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Layer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Layer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LayerInputDim != other.LayerInputDim) return false;
    if (LayerOutputDim != other.LayerOutputDim) return false;
    if (!object.Equals(LayerInputWeight, other.LayerInputWeight)) return false;
    if (!object.Equals(LayerBias, other.LayerBias)) return false;
    if (LayerActivationFunc != other.LayerActivationFunc) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LayerInputDim != 0) hash ^= LayerInputDim.GetHashCode();
    if (LayerOutputDim != 0) hash ^= LayerOutputDim.GetHashCode();
    if (layerInputWeight_ != null) hash ^= LayerInputWeight.GetHashCode();
    if (layerBias_ != null) hash ^= LayerBias.GetHashCode();
    if (LayerActivationFunc != 0) hash ^= LayerActivationFunc.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LayerInputDim != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LayerInputDim);
    }
    if (LayerOutputDim != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LayerOutputDim);
    }
    if (layerInputWeight_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LayerInputWeight);
    }
    if (layerBias_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LayerBias);
    }
    if (LayerActivationFunc != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) LayerActivationFunc);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LayerInputDim != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerInputDim);
    }
    if (LayerOutputDim != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerOutputDim);
    }
    if (layerInputWeight_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LayerInputWeight);
    }
    if (layerBias_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LayerBias);
    }
    if (LayerActivationFunc != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LayerActivationFunc);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Layer other) {
    if (other == null) {
      return;
    }
    if (other.LayerInputDim != 0) {
      LayerInputDim = other.LayerInputDim;
    }
    if (other.LayerOutputDim != 0) {
      LayerOutputDim = other.LayerOutputDim;
    }
    if (other.layerInputWeight_ != null) {
      if (layerInputWeight_ == null) {
        layerInputWeight_ = new global::Matrix();
      }
      LayerInputWeight.MergeFrom(other.LayerInputWeight);
    }
    if (other.layerBias_ != null) {
      if (layerBias_ == null) {
        layerBias_ = new global::Vector();
      }
      LayerBias.MergeFrom(other.LayerBias);
    }
    if (other.LayerActivationFunc != 0) {
      LayerActivationFunc = other.LayerActivationFunc;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LayerInputDim = input.ReadInt32();
          break;
        }
        case 16: {
          LayerOutputDim = input.ReadInt32();
          break;
        }
        case 26: {
          if (layerInputWeight_ == null) {
            layerInputWeight_ = new global::Matrix();
          }
          input.ReadMessage(layerInputWeight_);
          break;
        }
        case 34: {
          if (layerBias_ == null) {
            layerBias_ = new global::Vector();
          }
          input.ReadMessage(layerBias_);
          break;
        }
        case 40: {
          layerActivationFunc_ = (global::Layer.Types.ActivationFunc) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Layer message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ActivationFunc {
      [pbr::OriginalName("RELU")] Relu = 0,
      [pbr::OriginalName("TANH")] Tanh = 1,
      [pbr::OriginalName("SIGMOID")] Sigmoid = 2,
      [pbr::OriginalName("SOFTMAX")] Softmax = 3,
    }

  }
  #endregion

}

public sealed partial class FnnModel : pb::IMessage<FnnModel> {
  private static readonly pb::MessageParser<FnnModel> _parser = new pb::MessageParser<FnnModel>(() => new FnnModel());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FnnModel> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FnnModelReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FnnModel() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FnnModel(FnnModel other) : this() {
    dimInput_ = other.dimInput_;
    SamplesMean = other.samplesMean_ != null ? other.SamplesMean.Clone() : null;
    SamplesStd = other.samplesStd_ != null ? other.SamplesStd.Clone() : null;
    numLayer_ = other.numLayer_;
    layer_ = other.layer_.Clone();
    dimOutput_ = other.dimOutput_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FnnModel Clone() {
    return new FnnModel(this);
  }

  /// <summary>Field number for the "dim_input" field.</summary>
  public const int DimInputFieldNumber = 1;
  private int dimInput_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DimInput {
    get { return dimInput_; }
    set {
      dimInput_ = value;
    }
  }

  /// <summary>Field number for the "samples_mean" field.</summary>
  public const int SamplesMeanFieldNumber = 2;
  private global::Vector samplesMean_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector SamplesMean {
    get { return samplesMean_; }
    set {
      samplesMean_ = value;
    }
  }

  /// <summary>Field number for the "samples_std" field.</summary>
  public const int SamplesStdFieldNumber = 3;
  private global::Vector samplesStd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector SamplesStd {
    get { return samplesStd_; }
    set {
      samplesStd_ = value;
    }
  }

  /// <summary>Field number for the "num_layer" field.</summary>
  public const int NumLayerFieldNumber = 4;
  private int numLayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumLayer {
    get { return numLayer_; }
    set {
      numLayer_ = value;
    }
  }

  /// <summary>Field number for the "layer" field.</summary>
  public const int LayerFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Layer> _repeated_layer_codec
      = pb::FieldCodec.ForMessage(42, global::Layer.Parser);
  private readonly pbc::RepeatedField<global::Layer> layer_ = new pbc::RepeatedField<global::Layer>();
  /// <summary>
  /// num_layer must equal to first layer layer_input_dim
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Layer> Layer {
    get { return layer_; }
  }

  /// <summary>Field number for the "dim_output" field.</summary>
  public const int DimOutputFieldNumber = 6;
  private int dimOutput_;
  /// <summary>
  /// dim_ouput must equal to last layer layer_output_dim
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DimOutput {
    get { return dimOutput_; }
    set {
      dimOutput_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FnnModel);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FnnModel other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DimInput != other.DimInput) return false;
    if (!object.Equals(SamplesMean, other.SamplesMean)) return false;
    if (!object.Equals(SamplesStd, other.SamplesStd)) return false;
    if (NumLayer != other.NumLayer) return false;
    if(!layer_.Equals(other.layer_)) return false;
    if (DimOutput != other.DimOutput) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DimInput != 0) hash ^= DimInput.GetHashCode();
    if (samplesMean_ != null) hash ^= SamplesMean.GetHashCode();
    if (samplesStd_ != null) hash ^= SamplesStd.GetHashCode();
    if (NumLayer != 0) hash ^= NumLayer.GetHashCode();
    hash ^= layer_.GetHashCode();
    if (DimOutput != 0) hash ^= DimOutput.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DimInput != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DimInput);
    }
    if (samplesMean_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SamplesMean);
    }
    if (samplesStd_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SamplesStd);
    }
    if (NumLayer != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NumLayer);
    }
    layer_.WriteTo(output, _repeated_layer_codec);
    if (DimOutput != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(DimOutput);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DimInput != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DimInput);
    }
    if (samplesMean_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SamplesMean);
    }
    if (samplesStd_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SamplesStd);
    }
    if (NumLayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumLayer);
    }
    size += layer_.CalculateSize(_repeated_layer_codec);
    if (DimOutput != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DimOutput);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FnnModel other) {
    if (other == null) {
      return;
    }
    if (other.DimInput != 0) {
      DimInput = other.DimInput;
    }
    if (other.samplesMean_ != null) {
      if (samplesMean_ == null) {
        samplesMean_ = new global::Vector();
      }
      SamplesMean.MergeFrom(other.SamplesMean);
    }
    if (other.samplesStd_ != null) {
      if (samplesStd_ == null) {
        samplesStd_ = new global::Vector();
      }
      SamplesStd.MergeFrom(other.SamplesStd);
    }
    if (other.NumLayer != 0) {
      NumLayer = other.NumLayer;
    }
    layer_.Add(other.layer_);
    if (other.DimOutput != 0) {
      DimOutput = other.DimOutput;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DimInput = input.ReadInt32();
          break;
        }
        case 18: {
          if (samplesMean_ == null) {
            samplesMean_ = new global::Vector();
          }
          input.ReadMessage(samplesMean_);
          break;
        }
        case 26: {
          if (samplesStd_ == null) {
            samplesStd_ = new global::Vector();
          }
          input.ReadMessage(samplesStd_);
          break;
        }
        case 32: {
          NumLayer = input.ReadInt32();
          break;
        }
        case 42: {
          layer_.AddEntriesFrom(input, _repeated_layer_codec);
          break;
        }
        case 48: {
          DimOutput = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
