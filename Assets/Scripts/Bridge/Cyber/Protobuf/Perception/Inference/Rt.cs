// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/rt.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Inference {

  /// <summary>Holder for reflection information generated from modules/perception/proto/rt.proto</summary>
  public static partial class RtReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/rt.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RtReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vcnQucHJvdG8SG2Fwb2xsby5w",
            "ZXJjZXB0aW9uLmluZmVyZW5jZSIYCglCbG9iU2hhcGUSCwoDZGltGAEgAygD",
            "IsYBCglCbG9iUHJvdG8SNQoFc2hhcGUYByABKAsyJi5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuQmxvYlNoYXBlEgwKBGRhdGEYBSADKAISDAoEZGlm",
            "ZhgGIAMoAhITCgtkb3VibGVfZGF0YRgIIAMoARITCgtkb3VibGVfZGlmZhgJ",
            "IAMoARILCgNudW0YASABKAUSEAoIY2hhbm5lbHMYAiABKAUSDgoGaGVpZ2h0",
            "GAMgASgFEg0KBXdpZHRoGAQgASgFIkgKD0Jsb2JQcm90b1ZlY3RvchI1CgVi",
            "bG9icxgBIAMoCzImLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5CbG9i",
            "UHJvdG8iegoFRGF0dW0SEAoIY2hhbm5lbHMYASABKAUSDgoGaGVpZ2h0GAIg",
            "ASgFEg0KBXdpZHRoGAMgASgFEgwKBGRhdGEYBCABKAwSDQoFbGFiZWwYBSAB",
            "KAUSEgoKZmxvYXRfZGF0YRgGIAMoAhIPCgdlbmNvZGVkGAcgASgIIkEKDExh",
            "YmVsTWFwSXRlbRIMCgRuYW1lGAEgASgJEg0KBWxhYmVsGAIgASgFEhQKDGRp",
            "c3BsYXlfbmFtZRgDIAEoCSJDCghMYWJlbE1hcBI3CgRpdGVtGAEgAygLMiku",
            "YXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkxhYmVsTWFwSXRlbSJjCgdT",
            "YW1wbGVyEhEKCW1pbl9zY2FsZRgBIAEoAhIRCgltYXhfc2NhbGUYAiABKAIS",
            "GAoQbWluX2FzcGVjdF9yYXRpbxgDIAEoAhIYChBtYXhfYXNwZWN0X3JhdGlv",
            "GAQgASgCItYBChBTYW1wbGVDb25zdHJhaW50EhsKE21pbl9qYWNjYXJkX292",
            "ZXJsYXAYASABKAISGwoTbWF4X2phY2NhcmRfb3ZlcmxhcBgCIAEoAhIbChNt",
            "aW5fc2FtcGxlX2NvdmVyYWdlGAMgASgCEhsKE21heF9zYW1wbGVfY292ZXJh",
            "Z2UYBCABKAISGwoTbWluX29iamVjdF9jb3ZlcmFnZRgFIAEoAhIbChNtYXhf",
            "b2JqZWN0X2NvdmVyYWdlGAYgASgCEhQKDGJhbGFuY2VfdHlwZRgHIAMoBSLT",
            "AQoMQmF0Y2hTYW1wbGVyEhoKEnVzZV9vcmlnaW5hbF9pbWFnZRgBIAEoCBI1",
            "CgdzYW1wbGVyGAIgASgLMiQuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNl",
            "LlNhbXBsZXISSAoRc2FtcGxlX2NvbnN0cmFpbnQYAyABKAsyLS5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuU2FtcGxlQ29uc3RyYWludBISCgptYXhf",
            "c2FtcGxlGAQgASgNEhIKCm1heF90cmlhbHMYBSABKA0imAEKDkVtaXRDb25z",
            "dHJhaW50EkcKCWVtaXRfdHlwZRgBIAEoDjI0LmFwb2xsby5wZXJjZXB0aW9u",
            "LmluZmVyZW5jZS5FbWl0Q29uc3RyYWludC5FbWl0VHlwZRIUCgxlbWl0X292",
            "ZXJsYXAYAiABKAIiJwoIRW1pdFR5cGUSCgoGQ0VOVEVSEAASDwoLTUlOX09W",
            "RVJMQVAQASKHAQoOTm9ybWFsaXplZEJCb3gSDAoEeG1pbhgBIAEoAhIMCgR5",
            "bWluGAIgASgCEgwKBHhtYXgYAyABKAISDAoEeW1heBgEIAEoAhINCgVsYWJl",
            "bBgFIAEoBRIRCglkaWZmaWN1bHQYBiABKAgSDQoFc2NvcmUYByABKAISDAoE",
            "c2l6ZRgIIAEoAiJZCgZCQm94M0QSCQoBaBgBIAEoAhIJCgF3GAIgASgCEgkK",
            "AWwYAyABKAISCQoBeBgEIAEoAhIJCgF5GAUgASgCEgkKAXoYBiABKAISDQoF",
            "YWxwaGEYByABKAIikgIKCkFubm90YXRpb24SEwoLaW5zdGFuY2VfaWQYASAB",
            "KAUSOQoEYmJveBgCIAEoCzIrLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5Ob3JtYWxpemVkQkJveBIzCgZiYm94M2QYAyABKAsyIy5hcG9sbG8ucGVy",
            "Y2VwdGlvbi5pbmZlcmVuY2UuQkJveDNEEj8KCmZyb250X2Jib3gYBCABKAsy",
            "Ky5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTm9ybWFsaXplZEJCb3gS",
            "PgoJcmVhcl9iYm94GAUgASgLMisuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLk5vcm1hbGl6ZWRCQm94ImMKD0Fubm90YXRpb25Hcm91cBITCgtncm91",
            "cF9sYWJlbBgBIAEoBRI7Cgphbm5vdGF0aW9uGAIgAygLMicuYXBvbGxvLnBl",
            "cmNlcHRpb24uaW5mZXJlbmNlLkFubm90YXRpb24iiwIKDkFubm90YXRlZERh",
            "dHVtEjEKBWRhdHVtGAEgASgLMiIuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLkRhdHVtEkgKBHR5cGUYAiABKA4yOi5hcG9sbG8ucGVyY2VwdGlvbi5p",
            "bmZlcmVuY2UuQW5ub3RhdGVkRGF0dW0uQW5ub3RhdGlvblR5cGUSRgoQYW5u",
            "b3RhdGlvbl9ncm91cBgDIAMoCzIsLmFwb2xsby5wZXJjZXB0aW9uLmluZmVy",
            "ZW5jZS5Bbm5vdGF0aW9uR3JvdXAiNAoOQW5ub3RhdGlvblR5cGUSCAoEQkJP",
            "WBAAEgoKBkJCT1gzRBABEgwKCEJCT1gzREZSEAIi+wEKD0ZpbGxlclBhcmFt",
            "ZXRlchIMCgR0eXBlGAEgASgJEg0KBXZhbHVlGAIgASgCEgsKA21pbhgDIAEo",
            "AhILCgNtYXgYBCABKAISDAoEbWVhbhgFIAEoAhILCgNzdGQYBiABKAISDgoG",
            "c3BhcnNlGAcgASgFElAKDXZhcmlhbmNlX25vcm0YCCABKA4yOS5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuRmlsbGVyUGFyYW1ldGVyLlZhcmlhbmNl",
            "Tm9ybSI0CgxWYXJpYW5jZU5vcm0SCgoGRkFOX0lOEAASCwoHRkFOX09VVBAB",
            "EgsKB0FWRVJBR0UQAiLYAgoMTmV0UGFyYW1ldGVyEgwKBG5hbWUYASABKAkS",
            "DQoFaW5wdXQYAyADKAkSOwoLaW5wdXRfc2hhcGUYCCADKAsyJi5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuQmxvYlNoYXBlEhEKCWlucHV0X2RpbRgE",
            "IAMoBRIWCg5mb3JjZV9iYWNrd2FyZBgFIAEoCBI0CgVzdGF0ZRgGIAEoCzIl",
            "LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5OZXRTdGF0ZRISCgpkZWJ1",
            "Z19pbmZvGAcgASgIEjoKBWxheWVyGGQgAygLMisuYXBvbGxvLnBlcmNlcHRp",
            "b24uaW5mZXJlbmNlLkxheWVyUGFyYW1ldGVyEj0KBmxheWVycxgCIAMoCzIt",
            "LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5WMUxheWVyUGFyYW1ldGVy",
            "IsULCg9Tb2x2ZXJQYXJhbWV0ZXISCwoDbmV0GBggASgJEjwKCW5ldF9wYXJh",
            "bRgZIAEoCzIpLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5OZXRQYXJh",
            "bWV0ZXISEQoJdHJhaW5fbmV0GAEgASgJEhAKCHRlc3RfbmV0GAIgAygJEkIK",
            "D3RyYWluX25ldF9wYXJhbRgVIAEoCzIpLmFwb2xsby5wZXJjZXB0aW9uLmlu",
            "ZmVyZW5jZS5OZXRQYXJhbWV0ZXISQQoOdGVzdF9uZXRfcGFyYW0YFiADKAsy",
            "KS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTmV0UGFyYW1ldGVyEjoK",
            "C3RyYWluX3N0YXRlGBogASgLMiUuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLk5ldFN0YXRlEjkKCnRlc3Rfc3RhdGUYGyADKAsyJS5hcG9sbG8ucGVy",
            "Y2VwdGlvbi5pbmZlcmVuY2UuTmV0U3RhdGUSEQoJZXZhbF90eXBlGCkgASgJ",
            "EhIKCmFwX3ZlcnNpb24YKiABKAkSHQoVc2hvd19wZXJfY2xhc3NfcmVzdWx0",
            "GCwgASgIEhEKCXRlc3RfaXRlchgDIAMoBRIVCg10ZXN0X2ludGVydmFsGAQg",
            "ASgFEhkKEXRlc3RfY29tcHV0ZV9sb3NzGBMgASgIEhsKE3Rlc3RfaW5pdGlh",
            "bGl6YXRpb24YICABKAgSDwoHYmFzZV9schgFIAEoAhIPCgdkaXNwbGF5GAYg",
            "ASgFEhQKDGF2ZXJhZ2VfbG9zcxghIAEoBRIQCghtYXhfaXRlchgHIAEoBRIR",
            "CglpdGVyX3NpemUYJCABKAUSEQoJbHJfcG9saWN5GAggASgJEg0KBWdhbW1h",
            "GAkgASgCEg0KBXBvd2VyGAogASgCEhAKCG1vbWVudHVtGAsgASgCEhQKDHdl",
            "aWdodF9kZWNheRgMIAEoAhIbChNyZWd1bGFyaXphdGlvbl90eXBlGB0gASgJ",
            "EhAKCHN0ZXBzaXplGA0gASgFEhEKCXN0ZXB2YWx1ZRgiIAMoBRIXCg9wbGF0",
            "ZWF1X3dpbnNpemUYKyADKAUSFgoOY2xpcF9ncmFkaWVudHMYIyABKAISEAoI",
            "c25hcHNob3QYDiABKAUSFwoPc25hcHNob3RfcHJlZml4GA8gASgJEhUKDXNu",
            "YXBzaG90X2RpZmYYECABKAgSVAoPc25hcHNob3RfZm9ybWF0GCUgASgOMjsu",
            "YXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlNvbHZlclBhcmFtZXRlci5T",
            "bmFwc2hvdEZvcm1hdBJMCgtzb2x2ZXJfbW9kZRgRIAEoDjI3LmFwb2xsby5w",
            "ZXJjZXB0aW9uLmluZmVyZW5jZS5Tb2x2ZXJQYXJhbWV0ZXIuU29sdmVyTW9k",
            "ZRIRCglkZXZpY2VfaWQYEiABKAUSEwoLcmFuZG9tX3NlZWQYFCABKAMSDAoE",
            "dHlwZRgoIAEoCRINCgVkZWx0YRgfIAEoAhIRCgltb21lbnR1bTIYJyABKAIS",
            "EQoJcm1zX2RlY2F5GCYgASgCEhIKCmRlYnVnX2luZm8YFyABKAgSHAoUc25h",
            "cHNob3RfYWZ0ZXJfdHJhaW4YHCABKAgSTAoLc29sdmVyX3R5cGUYHiABKA4y",
            "Ny5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuU29sdmVyUGFyYW1ldGVy",
            "LlNvbHZlclR5cGUiKwoOU25hcHNob3RGb3JtYXQSCAoESERGNRAAEg8KC0JJ",
            "TkFSWVBST1RPEAEiHgoKU29sdmVyTW9kZRIHCgNDUFUQABIHCgNHUFUQASJV",
            "CgpTb2x2ZXJUeXBlEgcKA1NHRBAAEgwKCE5FU1RFUk9WEAESCwoHQURBR1JB",
            "RBACEgsKB1JNU1BST1AQAxIMCghBREFERUxUQRAEEggKBEFEQU0QBSKuAQoL",
            "U29sdmVyU3RhdGUSDAoEaXRlchgBIAEoBRITCgtsZWFybmVkX25ldBgCIAEo",
            "CRI3CgdoaXN0b3J5GAMgAygLMiYuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLkJsb2JQcm90bxIUCgxjdXJyZW50X3N0ZXAYBCABKAUSFAoMbWluaW11",
            "bV9sb3NzGAUgASgCEhcKD2l0ZXJfbGFzdF9ldmVudBgGIAEoBSJbCghOZXRT",
            "dGF0ZRIxCgVwaGFzZRgBIAEoDjIiLmFwb2xsby5wZXJjZXB0aW9uLmluZmVy",
            "ZW5jZS5QaGFzZRINCgVsZXZlbBgCIAEoBRINCgVzdGFnZRgDIAMoCSKJAQoM",
            "TmV0U3RhdGVSdWxlEjEKBXBoYXNlGAEgASgOMiIuYXBvbGxvLnBlcmNlcHRp",
            "b24uaW5mZXJlbmNlLlBoYXNlEhEKCW1pbl9sZXZlbBgCIAEoBRIRCgltYXhf",
            "bGV2ZWwYAyABKAUSDQoFc3RhZ2UYBCADKAkSEQoJbm90X3N0YWdlGAUgAygJ",
            "IrMBCglQYXJhbVNwZWMSDAoEbmFtZRgBIAEoCRJHCgpzaGFyZV9tb2RlGAIg",
            "ASgOMjMuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlBhcmFtU3BlYy5E",
            "aW1DaGVja01vZGUSDwoHbHJfbXVsdBgDIAEoAhISCgpkZWNheV9tdWx0GAQg",
            "ASgCIioKDERpbUNoZWNrTW9kZRIKCgZTVFJJQ1QQABIOCgpQRVJNSVNTSVZF",
            "EAEi2ygKDkxheWVyUGFyYW1ldGVyEgwKBG5hbWUYASABKAkSDAoEdHlwZRgC",
            "IAEoCRIOCgZib3R0b20YAyADKAkSCwoDdG9wGAQgAygJEjEKBXBoYXNlGAog",
            "ASgOMiIuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlBoYXNlEhMKC2xv",
            "c3Nfd2VpZ2h0GAUgAygCEjUKBXBhcmFtGAYgAygLMiYuYXBvbGxvLnBlcmNl",
            "cHRpb24uaW5mZXJlbmNlLlBhcmFtU3BlYxI1CgVibG9icxgHIAMoCzImLmFw",
            "b2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5CbG9iUHJvdG8SFgoOcHJvcGFn",
            "YXRlX2Rvd24YCyADKAgSOgoHaW5jbHVkZRgIIAMoCzIpLmFwb2xsby5wZXJj",
            "ZXB0aW9uLmluZmVyZW5jZS5OZXRTdGF0ZVJ1bGUSOgoHZXhjbHVkZRgJIAMo",
            "CzIpLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5OZXRTdGF0ZVJ1bGUS",
            "TQoPdHJhbnNmb3JtX3BhcmFtGGQgASgLMjQuYXBvbGxvLnBlcmNlcHRpb24u",
            "aW5mZXJlbmNlLlRyYW5zZm9ybWF0aW9uUGFyYW1ldGVyEj4KCmxvc3NfcGFy",
            "YW0YZSABKAsyKi5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTG9zc1Bh",
            "cmFtZXRlchJGCg5hY2N1cmFjeV9wYXJhbRhmIAEoCzIuLmFwb2xsby5wZXJj",
            "ZXB0aW9uLmluZmVyZW5jZS5BY2N1cmFjeVBhcmFtZXRlchJSChRhbm5vdGF0",
            "ZWRfZGF0YV9wYXJhbRjIASABKAsyMy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZl",
            "cmVuY2UuQW5ub3RhdGVkRGF0YVBhcmFtZXRlchJCCgxhcmdtYXhfcGFyYW0Y",
            "ZyABKAsyLC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuQXJnTWF4UGFy",
            "YW1ldGVyEkoKEGJhdGNoX25vcm1fcGFyYW0YiwEgASgLMi8uYXBvbGxvLnBl",
            "cmNlcHRpb24uaW5mZXJlbmNlLkJhdGNoTm9ybVBhcmFtZXRlchI/CgpiaWFz",
            "X3BhcmFtGI0BIAEoCzIqLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5C",
            "aWFzUGFyYW1ldGVyEkIKDGNvbmNhdF9wYXJhbRhoIAEoCzIsLmFwb2xsby5w",
            "ZXJjZXB0aW9uLmluZmVyZW5jZS5Db25jYXRQYXJhbWV0ZXISVQoWY29udHJh",
            "c3RpdmVfbG9zc19wYXJhbRhpIAEoCzI1LmFwb2xsby5wZXJjZXB0aW9uLmlu",
            "ZmVyZW5jZS5Db250cmFzdGl2ZUxvc3NQYXJhbWV0ZXISTAoRY29udm9sdXRp",
            "b25fcGFyYW0YaiABKAsyMS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2Uu",
            "Q29udm9sdXRpb25QYXJhbWV0ZXISPwoKY3JvcF9wYXJhbRiQASABKAsyKi5h",
            "cG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuQ3JvcFBhcmFtZXRlchI+Cgpk",
            "YXRhX3BhcmFtGGsgASgLMiouYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNl",
            "LkRhdGFQYXJhbWV0ZXISWgoYZGV0ZWN0aW9uX2V2YWx1YXRlX3BhcmFtGM0B",
            "IAEoCzI3LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5EZXRlY3Rpb25F",
            "dmFsdWF0ZVBhcmFtZXRlchJWChZkZXRlY3Rpb25fb3V0cHV0X3BhcmFtGMwB",
            "IAEoCzI1LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5EZXRlY3Rpb25P",
            "dXRwdXRQYXJhbWV0ZXISRAoNZHJvcG91dF9wYXJhbRhsIAEoCzItLmFwb2xs",
            "by5wZXJjZXB0aW9uLmluZmVyZW5jZS5Ecm9wb3V0UGFyYW1ldGVyEkkKEGR1",
            "bW15X2RhdGFfcGFyYW0YbSABKAsyLy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZl",
            "cmVuY2UuRHVtbXlEYXRhUGFyYW1ldGVyEkQKDWVsdHdpc2VfcGFyYW0YbiAB",
            "KAsyLS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuRWx0d2lzZVBhcmFt",
            "ZXRlchI9CgllbHVfcGFyYW0YjAEgASgLMikuYXBvbGxvLnBlcmNlcHRpb24u",
            "aW5mZXJlbmNlLkVMVVBhcmFtZXRlchJBCgtlbWJlZF9wYXJhbRiJASABKAsy",
            "Ky5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuRW1iZWRQYXJhbWV0ZXIS",
            "PAoJZXhwX3BhcmFtGG8gASgLMikuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLkV4cFBhcmFtZXRlchJFCg1mbGF0dGVuX3BhcmFtGIcBIAEoCzItLmFw",
            "b2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5GbGF0dGVuUGFyYW1ldGVyEkcK",
            "D2hkZjVfZGF0YV9wYXJhbRhwIAEoCzIuLmFwb2xsby5wZXJjZXB0aW9uLmlu",
            "ZmVyZW5jZS5IREY1RGF0YVBhcmFtZXRlchJLChFoZGY1X291dHB1dF9wYXJh",
            "bRhxIAEoCzIwLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5IREY1T3V0",
            "cHV0UGFyYW1ldGVyEkkKEGhpbmdlX2xvc3NfcGFyYW0YciABKAsyLy5hcG9s",
            "bG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuSGluZ2VMb3NzUGFyYW1ldGVyEkkK",
            "EGltYWdlX2RhdGFfcGFyYW0YcyABKAsyLy5hcG9sbG8ucGVyY2VwdGlvbi5p",
            "bmZlcmVuY2UuSW1hZ2VEYXRhUGFyYW1ldGVyEkoKD3lvbG9fZGF0YV9wYXJh",
            "bRjnmGggAygLMi8uYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkltYWdl",
            "RGF0YVBhcmFtZXRlchIZCg9kYXRhX3Byb2JfcGFyYW0Y6JhoIAMoAhJPChNp",
            "bmZvZ2Fpbl9sb3NzX3BhcmFtGHQgASgLMjIuYXBvbGxvLnBlcmNlcHRpb24u",
            "aW5mZXJlbmNlLkluZm9nYWluTG9zc1BhcmFtZXRlchJPChNpbm5lcl9wcm9k",
            "dWN0X3BhcmFtGHUgASgLMjIuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNl",
            "LklubmVyUHJvZHVjdFBhcmFtZXRlchJBCgtpbnB1dF9wYXJhbRiPASABKAsy",
            "Ky5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuSW5wdXRQYXJhbWV0ZXIS",
            "PQoJbG9nX3BhcmFtGIYBIAEoCzIpLmFwb2xsby5wZXJjZXB0aW9uLmluZmVy",
            "ZW5jZS5Mb2dQYXJhbWV0ZXISPAoJbHJuX3BhcmFtGHYgASgLMikuYXBvbGxv",
            "LnBlcmNlcHRpb24uaW5mZXJlbmNlLkxSTlBhcmFtZXRlchJLChFtZW1vcnlf",
            "ZGF0YV9wYXJhbRh3IAEoCzIwLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5NZW1vcnlEYXRhUGFyYW1ldGVyElAKE211bHRpYm94X2xvc3NfcGFyYW0Y",
            "yQEgASgLMjIuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLk11bHRpQm94",
            "TG9zc1BhcmFtZXRlchJDCgxyZWdpb25fcGFyYW0YrAIgASgLMiwuYXBvbGxv",
            "LnBlcmNlcHRpb24uaW5mZXJlbmNlLlJlZ2lvblBhcmFtZXRlchJQChNyZWdp",
            "b25fb3V0cHV0X3BhcmFtGLYCIAEoCzIyLmFwb2xsby5wZXJjZXB0aW9uLmlu",
            "ZmVyZW5jZS5SZWdpb25PdXRwdXRQYXJhbWV0ZXISVAoVcmVnaW9uX3Byb3Bv",
            "c2FsX3BhcmFtGMACIAEoCzI0LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5SZWdpb25Qcm9wb3NhbFBhcmFtZXRlchJNChF5b2xvX3RhcmdldF9wYXJh",
            "bRiBwAwgASgLMjAuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLllvbG9U",
            "YXJnZXRQYXJhbWV0ZXISTwoSeW9sb19hbmNob3JzX3BhcmFtGILADCABKAsy",
            "MS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuWW9sb0FuY2hvcnNQYXJh",
            "bWV0ZXISSQoPeW9sb19sb3NzX3BhcmFtGIPADCABKAsyLi5hcG9sbG8ucGVy",
            "Y2VwdGlvbi5pbmZlcmVuY2UuWW9sb0xvc3NQYXJhbWV0ZXISSQoPeW9sb19k",
            "dW1wX3BhcmFtGITADCABKAsyLi5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuWW9sb0R1bXBQYXJhbWV0ZXISRQoNcGFkZGluZ19wYXJhbRjpByABKAsy",
            "LS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuUGFkZGluZ1BhcmFtZXRl",
            "chJBCgtyZW9yZ19wYXJhbRitAiABKAsyKy5hcG9sbG8ucGVyY2VwdGlvbi5p",
            "bmZlcmVuY2UuUmVvcmdQYXJhbWV0ZXISPAoJbXZuX3BhcmFtGHggASgLMiku",
            "YXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLk1WTlBhcmFtZXRlchJECgpu",
            "b3JtX3BhcmFtGM4BIAEoCzIvLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5Ob3JtYWxpemVQYXJhbWV0ZXISSQoPcGFyYW1ldGVyX3BhcmFtGJEBIAEo",
            "CzIvLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5QYXJhbWV0ZXJQYXJh",
            "bWV0ZXISRQoNcGVybXV0ZV9wYXJhbRjKASABKAsyLS5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuUGVybXV0ZVBhcmFtZXRlchJECg1wb29saW5nX3Bh",
            "cmFtGHkgASgLMi0uYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlBvb2xp",
            "bmdQYXJhbWV0ZXISQAoLcG93ZXJfcGFyYW0YeiABKAsyKy5hcG9sbG8ucGVy",
            "Y2VwdGlvbi5pbmZlcmVuY2UuUG93ZXJQYXJhbWV0ZXISQQoLcHJlbHVfcGFy",
            "YW0YgwEgASgLMisuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlBSZUxV",
            "UGFyYW1ldGVyEkgKD3ByaW9yX2JveF9wYXJhbRjLASABKAsyLi5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuUHJpb3JCb3hQYXJhbWV0ZXISQwoMcHl0",
            "aG9uX3BhcmFtGIIBIAEoCzIsLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5QeXRob25QYXJhbWV0ZXISSQoPcmVjdXJyZW50X3BhcmFtGJIBIAEoCzIv",
            "LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5SZWN1cnJlbnRQYXJhbWV0",
            "ZXISSQoPcmVkdWN0aW9uX3BhcmFtGIgBIAEoCzIvLmFwb2xsby5wZXJjZXB0",
            "aW9uLmluZmVyZW5jZS5SZWR1Y3Rpb25QYXJhbWV0ZXISPgoKcmVsdV9wYXJh",
            "bRh7IAEoCzIqLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5SZUxVUGFy",
            "YW1ldGVyEkUKDXJlc2hhcGVfcGFyYW0YhQEgASgLMi0uYXBvbGxvLnBlcmNl",
            "cHRpb24uaW5mZXJlbmNlLlJlc2hhcGVQYXJhbWV0ZXISTgoRcm9pX3Bvb2xp",
            "bmdfcGFyYW0Y18f4AyABKAsyMC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuUk9JUG9vbGluZ1BhcmFtZXRlchJBCgtzY2FsZV9wYXJhbRiOASABKAsy",
            "Ky5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuU2NhbGVQYXJhbWV0ZXIS",
            "RAoNc2lnbW9pZF9wYXJhbRh8IAEoCzItLmFwb2xsby5wZXJjZXB0aW9uLmlu",
            "ZmVyZW5jZS5TaWdtb2lkUGFyYW1ldGVyEkQKDXNvZnRtYXhfcGFyYW0YfSAB",
            "KAsyLS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuU29mdG1heFBhcmFt",
            "ZXRlchI9CglzcHBfcGFyYW0YhAEgASgLMikuYXBvbGxvLnBlcmNlcHRpb24u",
            "aW5mZXJlbmNlLlNQUFBhcmFtZXRlchJACgtzbGljZV9wYXJhbRh+IAEoCzIr",
            "LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5TbGljZVBhcmFtZXRlchI+",
            "Cgp0YW5oX3BhcmFtGH8gASgLMiouYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLlRhbkhQYXJhbWV0ZXISSQoPdGhyZXNob2xkX3BhcmFtGIABIAEoCzIv",
            "LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5UaHJlc2hvbGRQYXJhbWV0",
            "ZXISPwoKdGlsZV9wYXJhbRiKASABKAsyKi5hcG9sbG8ucGVyY2VwdGlvbi5p",
            "bmZlcmVuY2UuVGlsZVBhcmFtZXRlchJKChB2aWRlb19kYXRhX3BhcmFtGM8B",
            "IAEoCzIvLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5WaWRlb0RhdGFQ",
            "YXJhbWV0ZXISTAoRd2luZG93X2RhdGFfcGFyYW0YgQEgASgLMjAuYXBvbGxv",
            "LnBlcmNlcHRpb24uaW5mZXJlbmNlLldpbmRvd0RhdGFQYXJhbWV0ZXIipwQK",
            "F1RyYW5zZm9ybWF0aW9uUGFyYW1ldGVyEg0KBXNjYWxlGAEgASgCEg4KBm1p",
            "cnJvchgCIAEoCBIRCgljcm9wX3NpemUYAyABKA0SDgoGY3JvcF9oGAsgASgN",
            "Eg4KBmNyb3BfdxgMIAEoDRIRCgltZWFuX2ZpbGUYBCABKAkSEgoKbWVhbl92",
            "YWx1ZRgFIAMoAhITCgtmb3JjZV9jb2xvchgGIAEoCBISCgpmb3JjZV9ncmF5",
            "GAcgASgIEkIKDHJlc2l6ZV9wYXJhbRgIIAEoCzIsLmFwb2xsby5wZXJjZXB0",
            "aW9uLmluZmVyZW5jZS5SZXNpemVQYXJhbWV0ZXISQAoLbm9pc2VfcGFyYW0Y",
            "CSABKAsyKy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTm9pc2VQYXJh",
            "bWV0ZXISRwoNZGlzdG9ydF9wYXJhbRgNIAEoCzIwLmFwb2xsby5wZXJjZXB0",
            "aW9uLmluZmVyZW5jZS5EaXN0b3J0aW9uUGFyYW1ldGVyEkUKDGV4cGFuZF9w",
            "YXJhbRgOIAEoCzIvLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5FeHBh",
            "bnNpb25QYXJhbWV0ZXISDgoGaml0dGVyGA8gASgCEkQKD2VtaXRfY29uc3Ry",
            "YWludBgKIAEoCzIrLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5FbWl0",
            "Q29uc3RyYWludCL1BAoPUmVzaXplUGFyYW1ldGVyEgwKBHByb2IYASABKAIS",
            "TQoLcmVzaXplX21vZGUYAiABKA4yOC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZl",
            "cmVuY2UuUmVzaXplUGFyYW1ldGVyLlJlc2l6ZV9tb2RlEg4KBmhlaWdodBgD",
            "IAEoDRINCgV3aWR0aBgEIAEoDRIUCgxoZWlnaHRfc2NhbGUYCCABKA0SEwoL",
            "d2lkdGhfc2NhbGUYCSABKA0SRwoIcGFkX21vZGUYBSABKA4yNS5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuUmVzaXplUGFyYW1ldGVyLlBhZF9tb2Rl",
            "EhEKCXBhZF92YWx1ZRgGIAMoAhJNCgtpbnRlcnBfbW9kZRgHIAMoDjI4LmFw",
            "b2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5SZXNpemVQYXJhbWV0ZXIuSW50",
            "ZXJwX21vZGUiXgoLUmVzaXplX21vZGUSFQoRUkVTSVpFX01PREVfRFVNTVkQ",
            "ABIICgRXQVJQEAESEgoORklUX1NNQUxMX1NJWkUQAhIaChZGSVRfTEFSR0Vf",
            "U0laRV9BTkRfUEFEEAMiTgoIUGFkX21vZGUSEgoOUEFEX01PREVfRFVNTVkQ",
            "ABIMCghDT05TVEFOVBABEgwKCE1JUlJPUkVEEAISEgoOUkVQRUFUX05FQVJF",
            "U1QQAyJgCgtJbnRlcnBfbW9kZRIVChFJTlRFUlBfTU9ERV9EVU1NWRAAEgoK",
            "BkxJTkVBUhABEggKBEFSRUEQAhILCgdORUFSRVNUEAMSCQoFQ1VCSUMQBBIM",
            "CghMQU5DWk9TNBAFIjYKE1NhbHRQZXBwZXJQYXJhbWV0ZXISEAoIZnJhY3Rp",
            "b24YASABKAISDQoFdmFsdWUYAiADKAIitwIKDk5vaXNlUGFyYW1ldGVyEgwK",
            "BHByb2IYASABKAISDwoHaGlzdF9lcRgCIAEoCBIPCgdpbnZlcnNlGAMgASgI",
            "EhIKCmRlY29sb3JpemUYBCABKAgSEgoKZ2F1c3NfYmx1chgFIAEoCBIMCgRq",
            "cGVnGAYgASgCEhEKCXBvc3Rlcml6ZRgHIAEoCBINCgVlcm9kZRgIIAEoCBIS",
            "CgpzYWx0cGVwcGVyGAkgASgIEkoKEHNhbHRwZXBwZXJfcGFyYW0YCiABKAsy",
            "MC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuU2FsdFBlcHBlclBhcmFt",
            "ZXRlchINCgVjbGFoZRgLIAEoCBIWCg5jb252ZXJ0X3RvX2hzdhgMIAEoCBIW",
            "Cg5jb252ZXJ0X3RvX2xhYhgNIAEoCCKcAgoTRGlzdG9ydGlvblBhcmFtZXRl",
            "chIXCg9icmlnaHRuZXNzX3Byb2IYASABKAISGAoQYnJpZ2h0bmVzc19kZWx0",
            "YRgCIAEoAhIVCg1jb250cmFzdF9wcm9iGAMgASgCEhYKDmNvbnRyYXN0X2xv",
            "d2VyGAQgASgCEhYKDmNvbnRyYXN0X3VwcGVyGAUgASgCEhAKCGh1ZV9wcm9i",
            "GAYgASgCEhEKCWh1ZV9kZWx0YRgHIAEoAhIXCg9zYXR1cmF0aW9uX3Byb2IY",
            "CCABKAISGAoQc2F0dXJhdGlvbl9sb3dlchgJIAEoAhIYChBzYXR1cmF0aW9u",
            "X3VwcGVyGAogASgCEhkKEXJhbmRvbV9vcmRlcl9wcm9iGAsgASgCIjwKEkV4",
            "cGFuc2lvblBhcmFtZXRlchIMCgRwcm9iGAEgASgCEhgKEG1heF9leHBhbmRf",
            "cmF0aW8YAiABKAIi0QEKDUxvc3NQYXJhbWV0ZXISFAoMaWdub3JlX2xhYmVs",
            "GAEgASgFElMKDW5vcm1hbGl6YXRpb24YAyABKA4yPC5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuTG9zc1BhcmFtZXRlci5Ob3JtYWxpemF0aW9uTW9k",
            "ZRIRCglub3JtYWxpemUYAiABKAgiQgoRTm9ybWFsaXphdGlvbk1vZGUSCAoE",
            "RlVMTBAAEgkKBVZBTElEEAESDgoKQkFUQ0hfU0laRRACEggKBE5PTkUQAyJG",
            "ChFBY2N1cmFjeVBhcmFtZXRlchINCgV0b3BfaxgBIAEoDRIMCgRheGlzGAIg",
            "ASgFEhQKDGlnbm9yZV9sYWJlbBgDIAEoBSLWAQoWQW5ub3RhdGVkRGF0YVBh",
            "cmFtZXRlchJACg1iYXRjaF9zYW1wbGVyGAEgAygLMikuYXBvbGxvLnBlcmNl",
            "cHRpb24uaW5mZXJlbmNlLkJhdGNoU2FtcGxlchIWCg5sYWJlbF9tYXBfZmls",
            "ZRgCIAEoCRJNCglhbm5vX3R5cGUYAyABKA4yOi5hcG9sbG8ucGVyY2VwdGlv",
            "bi5pbmZlcmVuY2UuQW5ub3RhdGVkRGF0dW0uQW5ub3RhdGlvblR5cGUSEwoL",
            "bnVtX2NsYXNzZXMYCiABKAUiQwoPQXJnTWF4UGFyYW1ldGVyEhMKC291dF9t",
            "YXhfdmFsGAEgASgIEg0KBXRvcF9rGAIgASgNEgwKBGF4aXMYAyABKAUiMwoP",
            "Q29uY2F0UGFyYW1ldGVyEgwKBGF4aXMYAiABKAUSEgoKY29uY2F0X2RpbRgB",
            "IAEoDSJcChJCYXRjaE5vcm1QYXJhbWV0ZXISGAoQdXNlX2dsb2JhbF9zdGF0",
            "cxgBIAEoCBIfChdtb3ZpbmdfYXZlcmFnZV9mcmFjdGlvbhgCIAEoAhILCgNl",
            "cHMYAyABKAIibQoNQmlhc1BhcmFtZXRlchIMCgRheGlzGAEgASgFEhAKCG51",
            "bV9heGVzGAIgASgFEjwKBmZpbGxlchgDIAEoCzIsLmFwb2xsby5wZXJjZXB0",
            "aW9uLmluZmVyZW5jZS5GaWxsZXJQYXJhbWV0ZXIiQgoYQ29udHJhc3RpdmVM",
            "b3NzUGFyYW1ldGVyEg4KBm1hcmdpbhgBIAEoAhIWCg5sZWdhY3lfdmVyc2lv",
            "bhgCIAEoCCKcBAoUQ29udm9sdXRpb25QYXJhbWV0ZXISEgoKbnVtX291dHB1",
            "dBgBIAEoDRIRCgliaWFzX3Rlcm0YAiABKAgSCwoDcGFkGAMgAygNEhMKC2tl",
            "cm5lbF9zaXplGAQgAygNEg4KBnN0cmlkZRgGIAMoDRIQCghkaWxhdGlvbhgS",
            "IAMoDRINCgVwYWRfaBgJIAEoDRINCgVwYWRfdxgKIAEoDRIQCghrZXJuZWxf",
            "aBgLIAEoDRIQCghrZXJuZWxfdxgMIAEoDRIQCghzdHJpZGVfaBgNIAEoDRIQ",
            "CghzdHJpZGVfdxgOIAEoDRINCgVncm91cBgFIAEoDRJDCg13ZWlnaHRfZmls",
            "bGVyGAcgASgLMiwuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkZpbGxl",
            "clBhcmFtZXRlchJBCgtiaWFzX2ZpbGxlchgIIAEoCzIsLmFwb2xsby5wZXJj",
            "ZXB0aW9uLmluZmVyZW5jZS5GaWxsZXJQYXJhbWV0ZXISSAoGZW5naW5lGA8g",
            "ASgOMjguYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkNvbnZvbHV0aW9u",
            "UGFyYW1ldGVyLkVuZ2luZRIMCgRheGlzGBAgASgFEhcKD2ZvcmNlX25kX2lt",
            "MmNvbBgRIAEoCCIrCgZFbmdpbmUSCwoHREVGQVVMVBAAEgkKBUNBRkZFEAES",
            "CQoFQ1VETk4QAiItCg1Dcm9wUGFyYW1ldGVyEgwKBGF4aXMYASABKAUSDgoG",
            "b2Zmc2V0GAIgAygNIpcCCg1EYXRhUGFyYW1ldGVyEg4KBnNvdXJjZRgBIAEo",
            "CRISCgpiYXRjaF9zaXplGAQgASgNEhEKCXJhbmRfc2tpcBgHIAEoDRI+Cgdi",
            "YWNrZW5kGAggASgOMi0uYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkRh",
            "dGFQYXJhbWV0ZXIuREISDQoFc2NhbGUYAiABKAISEQoJbWVhbl9maWxlGAMg",
            "ASgJEhEKCWNyb3Bfc2l6ZRgFIAEoDRIOCgZtaXJyb3IYBiABKAgSGwoTZm9y",
            "Y2VfZW5jb2RlZF9jb2xvchgJIAEoCBIQCghwcmVmZXRjaBgKIAEoDSIbCgJE",
            "QhILCgdMRVZFTERCEAASCAoETE1EQhABIuQBChpEZXRlY3Rpb25FdmFsdWF0",
            "ZVBhcmFtZXRlchITCgtudW1fY2xhc3NlcxgBIAEoDRIbChNiYWNrZ3JvdW5k",
            "X2xhYmVsX2lkGAIgASgNEhkKEW92ZXJsYXBfdGhyZXNob2xkGAMgASgCEh0K",
            "FWV2YWx1YXRlX2RpZmZpY3VsdF9ndBgEIAEoCBIWCg5uYW1lX3NpemVfZmls",
            "ZRgFIAEoCRJCCgxyZXNpemVfcGFyYW0YBiABKAsyLC5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuUmVzaXplUGFyYW1ldGVyIlMKHk5vbk1heGltdW1T",
            "dXBwcmVzc2lvblBhcmFtZXRlchIVCg1ubXNfdGhyZXNob2xkGAEgASgCEg0K",
            "BXRvcF9rGAIgASgFEgsKA2V0YRgDIAEoAiLuAQoTU2F2ZU91dHB1dFBhcmFt",
            "ZXRlchIYChBvdXRwdXRfZGlyZWN0b3J5GAEgASgJEhoKEm91dHB1dF9uYW1l",
            "X3ByZWZpeBgCIAEoCRIVCg1vdXRwdXRfZm9ybWF0GAMgASgJEhYKDmxhYmVs",
            "X21hcF9maWxlGAQgASgJEhYKDm5hbWVfc2l6ZV9maWxlGAUgASgJEhYKDm51",
            "bV90ZXN0X2ltYWdlGAYgASgNEkIKDHJlc2l6ZV9wYXJhbRgHIAEoCzIsLmFw",
            "b2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5SZXNpemVQYXJhbWV0ZXIi5gMK",
            "GERldGVjdGlvbk91dHB1dFBhcmFtZXRlchITCgtudW1fY2xhc3NlcxgBIAEo",
            "DRIWCg5zaGFyZV9sb2NhdGlvbhgCIAEoCBIbChNiYWNrZ3JvdW5kX2xhYmVs",
            "X2lkGAMgASgFEk4KCW5tc19wYXJhbRgEIAEoCzI7LmFwb2xsby5wZXJjZXB0",
            "aW9uLmluZmVyZW5jZS5Ob25NYXhpbXVtU3VwcHJlc3Npb25QYXJhbWV0ZXIS",
            "SwoRc2F2ZV9vdXRwdXRfcGFyYW0YBSABKAsyMC5hcG9sbG8ucGVyY2VwdGlv",
            "bi5pbmZlcmVuY2UuU2F2ZU91dHB1dFBhcmFtZXRlchJKCgljb2RlX3R5cGUY",
            "BiABKA4yNy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuUHJpb3JCb3hQ",
            "YXJhbWV0ZXIuQ29kZVR5cGUSIgoadmFyaWFuY2VfZW5jb2RlZF9pbl90YXJn",
            "ZXQYCCABKAgSEgoKa2VlcF90b3BfaxgHIAEoBRIcChRjb25maWRlbmNlX3Ro",
            "cmVzaG9sZBgJIAEoAhIRCgl2aXN1YWxpemUYCiABKAgSGwoTdmlzdWFsaXpl",
            "X3RocmVzaG9sZBgLIAEoAhIRCglzYXZlX2ZpbGUYDCABKAkingIKFVJlZ2lv",
            "bk91dHB1dFBhcmFtZXRlchITCgtudW1fY2xhc3NlcxgBIAEoDRJOCglubXNf",
            "cGFyYW0YAiABKAsyOy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTm9u",
            "TWF4aW11bVN1cHByZXNzaW9uUGFyYW1ldGVyEhIKCmtlZXBfdG9wX2sYAyAB",
            "KAUSHAoUY29uZmlkZW5jZV90aHJlc2hvbGQYBCABKAISOQoJYW5jaG9yYm94",
            "GAUgAygLMiYuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkFuY2hvckJv",
            "eBIQCghubXNfdHlwZRgGIAEoBRIRCglubXNfc2lnbWEYByABKAISDgoGaXNf",
            "cnBuGAggASgIIikKEERyb3BvdXRQYXJhbWV0ZXISFQoNZHJvcG91dF9yYXRp",
            "bxgBIAEoAiLMAQoSRHVtbXlEYXRhUGFyYW1ldGVyEkEKC2RhdGFfZmlsbGVy",
            "GAEgAygLMiwuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkZpbGxlclBh",
            "cmFtZXRlchI1CgVzaGFwZRgGIAMoCzImLmFwb2xsby5wZXJjZXB0aW9uLmlu",
            "ZmVyZW5jZS5CbG9iU2hhcGUSCwoDbnVtGAIgAygNEhAKCGNoYW5uZWxzGAMg",
            "AygNEg4KBmhlaWdodBgEIAMoDRINCgV3aWR0aBgFIAMoDSKwAQoQRWx0d2lz",
            "ZVBhcmFtZXRlchJKCglvcGVyYXRpb24YASABKA4yNy5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuRWx0d2lzZVBhcmFtZXRlci5FbHR3aXNlT3ASDQoF",
            "Y29lZmYYAiADKAISGAoQc3RhYmxlX3Byb2RfZ3JhZBgDIAEoCCInCglFbHR3",
            "aXNlT3ASCAoEUFJPRBAAEgcKA1NVTRABEgcKA01BWBACIh0KDEVMVVBhcmFt",
            "ZXRlchINCgVhbHBoYRgBIAEoAiLSAQoORW1iZWRQYXJhbWV0ZXISEgoKbnVt",
            "X291dHB1dBgBIAEoDRIRCglpbnB1dF9kaW0YAiABKA0SEQoJYmlhc190ZXJt",
            "GAMgASgIEkMKDXdlaWdodF9maWxsZXIYBCABKAsyLC5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuRmlsbGVyUGFyYW1ldGVyEkEKC2JpYXNfZmlsbGVy",
            "GAUgASgLMiwuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkZpbGxlclBh",
            "cmFtZXRlciI6CgxFeHBQYXJhbWV0ZXISDAoEYmFzZRgBIAEoAhINCgVzY2Fs",
            "ZRgCIAEoAhINCgVzaGlmdBgDIAEoAiIyChBGbGF0dGVuUGFyYW1ldGVyEgwK",
            "BGF4aXMYASABKAUSEAoIZW5kX2F4aXMYAiABKAUiSAoRSERGNURhdGFQYXJh",
            "bWV0ZXISDgoGc291cmNlGAEgASgJEhIKCmJhdGNoX3NpemUYAiABKA0SDwoH",
            "c2h1ZmZsZRgDIAEoCCIoChNIREY1T3V0cHV0UGFyYW1ldGVyEhEKCWZpbGVf",
            "bmFtZRgBIAEoCSKAAQoSSGluZ2VMb3NzUGFyYW1ldGVyEkIKBG5vcm0YASAB",
            "KA4yNC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuSGluZ2VMb3NzUGFy",
            "YW1ldGVyLk5vcm0iJgoETm9ybRIOCgpOT1JNX0RVTU1ZEAASBgoCTDEQARIG",
            "CgJMMhACIjUKDFJlcGVhdGVkTGlzdBIRCglsaXN0X3BhdGgYASABKAkSEgoK",
            "bnVtX3JlcGVhdBgCIAEoDSKeAgoQRGF0YXNldFBhcmFtZXRlchIOCgZzb3Vy",
            "Y2UYASABKAkSEwoLcm9vdF9mb2xkZXIYAiABKAkSDgoGd2VpZ2h0GAMgASgC",
            "EkcKBHR5cGUYBCABKA4yOS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2Uu",
            "RGF0YXNldFBhcmFtZXRlci5EYXRhc2V0VHlwZRIPCgdzaHVmZmxlGAUgASgI",
            "EkAKDXJlcGVhdGVkX2xpc3QYBiADKAsyKS5hcG9sbG8ucGVyY2VwdGlvbi5p",
            "bmZlcmVuY2UuUmVwZWF0ZWRMaXN0IjkKC0RhdGFzZXRUeXBlEhUKEURBVEFT",
            "RVRUWVBFX0RVTU1ZEAASCAoETElTVBABEgkKBUJMT0NLEAIiwwIKEkltYWdl",
            "RGF0YVBhcmFtZXRlchIOCgZzb3VyY2UYASABKAkSEgoKYmF0Y2hfc2l6ZRgE",
            "IAEoDRIRCglyYW5kX3NraXAYByABKA0SDwoHc2h1ZmZsZRgIIAEoCBISCgpu",
            "ZXdfaGVpZ2h0GAkgASgNEhEKCW5ld193aWR0aBgKIAEoDRIQCghpc19jb2xv",
            "chgLIAEoCBINCgVzY2FsZRgCIAEoAhIRCgltZWFuX2ZpbGUYAyABKAkSEQoJ",
            "Y3JvcF9zaXplGAUgASgNEg4KBm1pcnJvchgGIAEoCBITCgtyb290X2ZvbGRl",
            "chgMIAEoCRIQCghwcmVmZXRjaBgUIAEoDRJACglpbWFnZV9zZXQYZCADKAsy",
            "LS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuRGF0YXNldFBhcmFtZXRl",
            "ciInChVJbmZvZ2Fpbkxvc3NQYXJhbWV0ZXISDgoGc291cmNlGAEgASgJIucB",
            "ChVJbm5lclByb2R1Y3RQYXJhbWV0ZXISEgoKbnVtX291dHB1dBgBIAEoDRIR",
            "CgliaWFzX3Rlcm0YAiABKAgSQwoNd2VpZ2h0X2ZpbGxlchgDIAEoCzIsLmFw",
            "b2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5GaWxsZXJQYXJhbWV0ZXISQQoL",
            "Ymlhc19maWxsZXIYBCABKAsyLC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuRmlsbGVyUGFyYW1ldGVyEgwKBGF4aXMYBSABKAUSEQoJdHJhbnNwb3Nl",
            "GAYgASgIIkcKDklucHV0UGFyYW1ldGVyEjUKBXNoYXBlGAEgAygLMiYuYXBv",
            "bGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkJsb2JTaGFwZSI6CgxMb2dQYXJh",
            "bWV0ZXISDAoEYmFzZRgBIAEoAhINCgVzY2FsZRgCIAEoAhINCgVzaGlmdBgD",
            "IAEoAiK7AgoMTFJOUGFyYW1ldGVyEhIKCmxvY2FsX3NpemUYASABKA0SDQoF",
            "YWxwaGEYAiABKAISDAoEYmV0YRgDIAEoAhJJCgtub3JtX3JlZ2lvbhgEIAEo",
            "DjI0LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5MUk5QYXJhbWV0ZXIu",
            "Tm9ybVJlZ2lvbhIJCgFrGAUgASgCEkAKBmVuZ2luZRgGIAEoDjIwLmFwb2xs",
            "by5wZXJjZXB0aW9uLmluZmVyZW5jZS5MUk5QYXJhbWV0ZXIuRW5naW5lIjUK",
            "Ck5vcm1SZWdpb24SEwoPQUNST1NTX0NIQU5ORUxTEAASEgoOV0lUSElOX0NI",
            "QU5ORUwQASIrCgZFbmdpbmUSCwoHREVGQVVMVBAAEgkKBUNBRkZFEAESCQoF",
            "Q1VETk4QAiJaChNNZW1vcnlEYXRhUGFyYW1ldGVyEhIKCmJhdGNoX3NpemUY",
            "ASABKA0SEAoIY2hhbm5lbHMYAiABKA0SDgoGaGVpZ2h0GAMgASgNEg0KBXdp",
            "ZHRoGAQgASgNIuYIChVNdWx0aUJveExvc3NQYXJhbWV0ZXISVQoNbG9jX2xv",
            "c3NfdHlwZRgBIAEoDjI+LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5N",
            "dWx0aUJveExvc3NQYXJhbWV0ZXIuTG9jTG9zc1R5cGUSVwoOY29uZl9sb3Nz",
            "X3R5cGUYAiABKA4yPy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTXVs",
            "dGlCb3hMb3NzUGFyYW1ldGVyLkNvbmZMb3NzVHlwZRISCgpsb2Nfd2VpZ2h0",
            "GAMgASgCEhMKC251bV9jbGFzc2VzGAQgASgNEhYKDnNoYXJlX2xvY2F0aW9u",
            "GAUgASgIElAKCm1hdGNoX3R5cGUYBiABKA4yPC5hcG9sbG8ucGVyY2VwdGlv",
            "bi5pbmZlcmVuY2UuTXVsdGlCb3hMb3NzUGFyYW1ldGVyLk1hdGNoVHlwZRIZ",
            "ChFvdmVybGFwX3RocmVzaG9sZBgHIAEoAhIeChZ1c2VfcHJpb3JfZm9yX21h",
            "dGNoaW5nGAggASgIEhsKE2JhY2tncm91bmRfbGFiZWxfaWQYCSABKA0SGAoQ",
            "dXNlX2RpZmZpY3VsdF9ndBgKIAEoCBIVCg1kb19uZWdfbWluaW5nGAsgASgI",
            "EhUKDW5lZ19wb3NfcmF0aW8YDCABKAISEwoLbmVnX292ZXJsYXAYDSABKAIS",
            "SgoJY29kZV90eXBlGA4gASgOMjcuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLlByaW9yQm94UGFyYW1ldGVyLkNvZGVUeXBlEiEKGWVuY29kZV92YXJp",
            "YW5jZV9pbl90YXJnZXQYECABKAgSHgoWbWFwX29iamVjdF90b19hZ25vc3Rp",
            "YxgRIAEoCBIiChppZ25vcmVfY3Jvc3NfYm91bmRhcnlfYmJveBgSIAEoCBIR",
            "CglicF9pbnNpZGUYEyABKAgSUgoLbWluaW5nX3R5cGUYFCABKA4yPS5hcG9s",
            "bG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTXVsdGlCb3hMb3NzUGFyYW1ldGVy",
            "Lk1pbmluZ1R5cGUSTgoJbm1zX3BhcmFtGBUgASgLMjsuYXBvbGxvLnBlcmNl",
            "cHRpb24uaW5mZXJlbmNlLk5vbk1heGltdW1TdXBwcmVzc2lvblBhcmFtZXRl",
            "chITCgtzYW1wbGVfc2l6ZRgWIAEoBRIZChF1c2VfcHJpb3JfZm9yX25tcxgX",
            "IAEoCCIkCgtMb2NMb3NzVHlwZRIGCgJMMhAAEg0KCVNNT09USF9MMRABIikK",
            "DENvbmZMb3NzVHlwZRILCgdTT0ZUTUFYEAASDAoITE9HSVNUSUMQASIuCglN",
            "YXRjaFR5cGUSDQoJQklQQVJUSVRFEAASEgoOUEVSX1BSRURJQ1RJT04QASI6",
            "CgpNaW5pbmdUeXBlEggKBE5PTkUQABIQCgxNQVhfTkVHQVRJVkUQARIQCgxI",
            "QVJEX0VYQU1QTEUQAiJQCgxNVk5QYXJhbWV0ZXISGgoSbm9ybWFsaXplX3Zh",
            "cmlhbmNlGAEgASgIEhcKD2Fjcm9zc19jaGFubmVscxgCIAEoCBILCgNlcHMY",
            "AyABKAIilQEKEk5vcm1hbGl6ZVBhcmFtZXRlchIWCg5hY3Jvc3Nfc3BhdGlh",
            "bBgBIAEoCBJCCgxzY2FsZV9maWxsZXIYAiABKAsyLC5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuRmlsbGVyUGFyYW1ldGVyEhYKDmNoYW5uZWxfc2hh",
            "cmVkGAMgASgIEgsKA2VwcxgEIAEoAiJLChJQYXJhbWV0ZXJQYXJhbWV0ZXIS",
            "NQoFc2hhcGUYASABKAsyJi5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2Uu",
            "QmxvYlNoYXBlIiEKEFBlcm11dGVQYXJhbWV0ZXISDQoFb3JkZXIYASADKA0i",
            "0gMKEFBvb2xpbmdQYXJhbWV0ZXISRgoEcG9vbBgBIAEoDjI4LmFwb2xsby5w",
            "ZXJjZXB0aW9uLmluZmVyZW5jZS5Qb29saW5nUGFyYW1ldGVyLlBvb2xNZXRo",
            "b2QSCwoDcGFkGAQgASgNEg0KBXBhZF9oGAkgASgNEg0KBXBhZF93GAogASgN",
            "EhMKC2tlcm5lbF9zaXplGAIgASgNEhAKCGtlcm5lbF9oGAUgASgNEhAKCGtl",
            "cm5lbF93GAYgASgNEg4KBnN0cmlkZRgDIAEoDRIQCghzdHJpZGVfaBgHIAEo",
            "DRIQCghzdHJpZGVfdxgIIAEoDRJECgZlbmdpbmUYCyABKA4yNC5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuUG9vbGluZ1BhcmFtZXRlci5FbmdpbmUS",
            "FgoOZ2xvYmFsX3Bvb2xpbmcYDCABKAgSIwobY21wX291dF9zaGFwZV9mbG9v",
            "cl9hc19jb252GA0gASgIIi4KClBvb2xNZXRob2QSBwoDTUFYEAASBwoDQVZF",
            "EAESDgoKU1RPQ0hBU1RJQxACIisKBkVuZ2luZRILCgdERUZBVUxUEAASCQoF",
            "Q0FGRkUQARIJCgVDVUROThACIj0KDlBvd2VyUGFyYW1ldGVyEg0KBXBvd2Vy",
            "GAEgASgCEg0KBXNjYWxlGAIgASgCEg0KBXNoaWZ0GAMgASgCIrcCChFQcmlv",
            "ckJveFBhcmFtZXRlchIQCghtaW5fc2l6ZRgBIAMoAhIQCghtYXhfc2l6ZRgC",
            "IAMoAhIUCgxhc3BlY3RfcmF0aW8YAyADKAISDAoEZmxpcBgEIAEoCBIMCgRj",
            "bGlwGAUgASgIEhAKCHZhcmlhbmNlGAYgAygCEhAKCGltZ19zaXplGAcgASgN",
            "Eg0KBWltZ19oGAggASgNEg0KBWltZ193GAkgASgNEgwKBHN0ZXAYCiABKAIS",
            "DgoGc3RlcF9oGAsgASgCEg4KBnN0ZXBfdxgMIAEoAhIOCgZvZmZzZXQYDSAB",
            "KAIiTAoIQ29kZVR5cGUSEgoOQ09ERVRZUEVfRFVNTVkQABIKCgZDT1JORVIQ",
            "ARIPCgtDRU5URVJfU0laRRACEg8KC0NPUk5FUl9TSVpFEAMiXgoPUHl0aG9u",
            "UGFyYW1ldGVyEg4KBm1vZHVsZRgBIAEoCRINCgVsYXllchgCIAEoCRIRCglw",
            "YXJhbV9zdHIYAyABKAkSGQoRc2hhcmVfaW5fcGFyYWxsZWwYBCABKAgi2wEK",
            "ElJlY3VycmVudFBhcmFtZXRlchISCgpudW1fb3V0cHV0GAEgASgNEkMKDXdl",
            "aWdodF9maWxsZXIYAiABKAsyLC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuRmlsbGVyUGFyYW1ldGVyEkEKC2JpYXNfZmlsbGVyGAMgASgLMiwuYXBv",
            "bGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkZpbGxlclBhcmFtZXRlchISCgpk",
            "ZWJ1Z19pbmZvGAQgASgIEhUKDWV4cG9zZV9oaWRkZW4YBSABKAgizwEKElJl",
            "ZHVjdGlvblBhcmFtZXRlchJOCglvcGVyYXRpb24YASABKA4yOy5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuUmVkdWN0aW9uUGFyYW1ldGVyLlJlZHVj",
            "dGlvbk9wEgwKBGF4aXMYAiABKAUSDQoFY29lZmYYAyABKAIiTAoLUmVkdWN0",
            "aW9uT3ASFQoRUkVEVUNUSU9OT1BfRFVNTVkQABIHCgNTVU0QARIICgRBU1VN",
            "EAISCQoFU1VNU1EQAxIICgRNRUFOEAQilwEKDVJlTFVQYXJhbWV0ZXISFgoO",
            "bmVnYXRpdmVfc2xvcGUYASABKAISQQoGZW5naW5lGAIgASgOMjEuYXBvbGxv",
            "LnBlcmNlcHRpb24uaW5mZXJlbmNlLlJlTFVQYXJhbWV0ZXIuRW5naW5lIisK",
            "BkVuZ2luZRILCgdERUZBVUxUEAASCQoFQ0FGRkUQARIJCgVDVUROThACImkK",
            "EFJlc2hhcGVQYXJhbWV0ZXISNQoFc2hhcGUYASABKAsyJi5hcG9sbG8ucGVy",
            "Y2VwdGlvbi5pbmZlcmVuY2UuQmxvYlNoYXBlEgwKBGF4aXMYAiABKAUSEAoI",
            "bnVtX2F4ZXMYAyABKAUiYwoTUk9JUG9vbGluZ1BhcmFtZXRlchIQCghwb29s",
            "ZWRfaBgBIAEoDRIQCghwb29sZWRfdxgCIAEoDRIVCg1zcGF0aWFsX3NjYWxl",
            "GAMgASgCEhEKCXVzZV9mbG9vchgKIAEoCCLEAQoOU2NhbGVQYXJhbWV0ZXIS",
            "DAoEYXhpcxgBIAEoBRIQCghudW1fYXhlcxgCIAEoBRI8CgZmaWxsZXIYAyAB",
            "KAsyLC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuRmlsbGVyUGFyYW1l",
            "dGVyEhEKCWJpYXNfdGVybRgEIAEoCBJBCgtiaWFzX2ZpbGxlchgFIAEoCzIs",
            "LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5GaWxsZXJQYXJhbWV0ZXIi",
            "hQEKEFNpZ21vaWRQYXJhbWV0ZXISRAoGZW5naW5lGAEgASgOMjQuYXBvbGxv",
            "LnBlcmNlcHRpb24uaW5mZXJlbmNlLlNpZ21vaWRQYXJhbWV0ZXIuRW5naW5l",
            "IisKBkVuZ2luZRILCgdERUZBVUxUEAASCQoFQ0FGRkUQARIJCgVDVUROThAC",
            "IkYKDlNsaWNlUGFyYW1ldGVyEgwKBGF4aXMYAyABKAUSEwoLc2xpY2VfcG9p",
            "bnQYAiADKA0SEQoJc2xpY2VfZGltGAEgASgNIpMBChBTb2Z0bWF4UGFyYW1l",
            "dGVyEkQKBmVuZ2luZRgBIAEoDjI0LmFwb2xsby5wZXJjZXB0aW9uLmluZmVy",
            "ZW5jZS5Tb2Z0bWF4UGFyYW1ldGVyLkVuZ2luZRIMCgRheGlzGAIgASgFIisK",
            "BkVuZ2luZRILCgdERUZBVUxUEAASCQoFQ0FGRkUQARIJCgVDVUROThACIn8K",
            "DVRhbkhQYXJhbWV0ZXISQQoGZW5naW5lGAEgASgOMjEuYXBvbGxvLnBlcmNl",
            "cHRpb24uaW5mZXJlbmNlLlRhbkhQYXJhbWV0ZXIuRW5naW5lIisKBkVuZ2lu",
            "ZRILCgdERUZBVUxUEAASCQoFQ0FGRkUQARIJCgVDVUROThACIiwKDVRpbGVQ",
            "YXJhbWV0ZXISDAoEYXhpcxgBIAEoBRINCgV0aWxlcxgCIAEoBSInChJUaHJl",
            "c2hvbGRQYXJhbWV0ZXISEQoJdGhyZXNob2xkGAEgASgCIsMBChJWaWRlb0Rh",
            "dGFQYXJhbWV0ZXISTQoKdmlkZW9fdHlwZRgBIAEoDjI5LmFwb2xsby5wZXJj",
            "ZXB0aW9uLmluZmVyZW5jZS5WaWRlb0RhdGFQYXJhbWV0ZXIuVmlkZW9UeXBl",
            "EhEKCWRldmljZV9pZBgCIAEoBRISCgp2aWRlb19maWxlGAMgASgJEhMKC3Nr",
            "aXBfZnJhbWVzGAQgASgNIiIKCVZpZGVvVHlwZRIKCgZXRUJDQU0QABIJCgVW",
            "SURFTxABIpICChNXaW5kb3dEYXRhUGFyYW1ldGVyEg4KBnNvdXJjZRgBIAEo",
            "CRINCgVzY2FsZRgCIAEoAhIRCgltZWFuX2ZpbGUYAyABKAkSEgoKYmF0Y2hf",
            "c2l6ZRgEIAEoDRIRCgljcm9wX3NpemUYBSABKA0SDgoGbWlycm9yGAYgASgI",
            "EhQKDGZnX3RocmVzaG9sZBgHIAEoAhIUCgxiZ190aHJlc2hvbGQYCCABKAIS",
            "EwoLZmdfZnJhY3Rpb24YCSABKAISEwoLY29udGV4dF9wYWQYCiABKA0SEQoJ",
            "Y3JvcF9tb2RlGAsgASgJEhQKDGNhY2hlX2ltYWdlcxgMIAEoCBITCgtyb290",
            "X2ZvbGRlchgNIAEoCSKJAgoMU1BQUGFyYW1ldGVyEhYKDnB5cmFtaWRfaGVp",
            "Z2h0GAEgASgNEkIKBHBvb2wYAiABKA4yNC5hcG9sbG8ucGVyY2VwdGlvbi5p",
            "bmZlcmVuY2UuU1BQUGFyYW1ldGVyLlBvb2xNZXRob2QSQAoGZW5naW5lGAYg",
            "ASgOMjAuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlNQUFBhcmFtZXRl",
            "ci5FbmdpbmUiLgoKUG9vbE1ldGhvZBIHCgNNQVgQABIHCgNBVkUQARIOCgpT",
            "VE9DSEFTVElDEAIiKwoGRW5naW5lEgsKB0RFRkFVTFQQABIJCgVDQUZGRRAB",
            "EgkKBUNVRE5OEAIi+BkKEFYxTGF5ZXJQYXJhbWV0ZXISDgoGYm90dG9tGAIg",
            "AygJEgsKA3RvcBgDIAMoCRIMCgRuYW1lGAQgASgJEjoKB2luY2x1ZGUYICAD",
            "KAsyKS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuTmV0U3RhdGVSdWxl",
            "EjoKB2V4Y2x1ZGUYISADKAsyKS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuTmV0U3RhdGVSdWxlEkUKBHR5cGUYBSABKA4yNy5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5pbmZlcmVuY2UuVjFMYXllclBhcmFtZXRlci5MYXllclR5cGUSNQoF",
            "YmxvYnMYBiADKAsyJi5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuQmxv",
            "YlByb3RvEg4KBXBhcmFtGOkHIAMoCRJUCg9ibG9iX3NoYXJlX21vZGUY6gcg",
            "AygOMjouYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlYxTGF5ZXJQYXJh",
            "bWV0ZXIuRGltQ2hlY2tNb2RlEhAKCGJsb2JzX2xyGAcgAygCEhQKDHdlaWdo",
            "dF9kZWNheRgIIAMoAhITCgtsb3NzX3dlaWdodBgjIAMoAhJGCg5hY2N1cmFj",
            "eV9wYXJhbRgbIAEoCzIuLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5B",
            "Y2N1cmFjeVBhcmFtZXRlchJCCgxhcmdtYXhfcGFyYW0YFyABKAsyLC5hcG9s",
            "bG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuQXJnTWF4UGFyYW1ldGVyEkIKDGNv",
            "bmNhdF9wYXJhbRgJIAEoCzIsLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5Db25jYXRQYXJhbWV0ZXISVQoWY29udHJhc3RpdmVfbG9zc19wYXJhbRgo",
            "IAEoCzI1LmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5Db250cmFzdGl2",
            "ZUxvc3NQYXJhbWV0ZXISTAoRY29udm9sdXRpb25fcGFyYW0YCiABKAsyMS5h",
            "cG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuQ29udm9sdXRpb25QYXJhbWV0",
            "ZXISPgoKZGF0YV9wYXJhbRgLIAEoCzIqLmFwb2xsby5wZXJjZXB0aW9uLmlu",
            "ZmVyZW5jZS5EYXRhUGFyYW1ldGVyEkQKDWRyb3BvdXRfcGFyYW0YDCABKAsy",
            "LS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuRHJvcG91dFBhcmFtZXRl",
            "chJJChBkdW1teV9kYXRhX3BhcmFtGBogASgLMi8uYXBvbGxvLnBlcmNlcHRp",
            "b24uaW5mZXJlbmNlLkR1bW15RGF0YVBhcmFtZXRlchJECg1lbHR3aXNlX3Bh",
            "cmFtGBggASgLMi0uYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkVsdHdp",
            "c2VQYXJhbWV0ZXISPAoJZXhwX3BhcmFtGCkgASgLMikuYXBvbGxvLnBlcmNl",
            "cHRpb24uaW5mZXJlbmNlLkV4cFBhcmFtZXRlchJHCg9oZGY1X2RhdGFfcGFy",
            "YW0YDSABKAsyLi5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuSERGNURh",
            "dGFQYXJhbWV0ZXISSwoRaGRmNV9vdXRwdXRfcGFyYW0YDiABKAsyMC5hcG9s",
            "bG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuSERGNU91dHB1dFBhcmFtZXRlchJJ",
            "ChBoaW5nZV9sb3NzX3BhcmFtGB0gASgLMi8uYXBvbGxvLnBlcmNlcHRpb24u",
            "aW5mZXJlbmNlLkhpbmdlTG9zc1BhcmFtZXRlchJJChBpbWFnZV9kYXRhX3Bh",
            "cmFtGA8gASgLMi8uYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkltYWdl",
            "RGF0YVBhcmFtZXRlchJPChNpbmZvZ2Fpbl9sb3NzX3BhcmFtGBAgASgLMjIu",
            "YXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkluZm9nYWluTG9zc1BhcmFt",
            "ZXRlchJPChNpbm5lcl9wcm9kdWN0X3BhcmFtGBEgASgLMjIuYXBvbGxvLnBl",
            "cmNlcHRpb24uaW5mZXJlbmNlLklubmVyUHJvZHVjdFBhcmFtZXRlchI8Cgls",
            "cm5fcGFyYW0YEiABKAsyKS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2Uu",
            "TFJOUGFyYW1ldGVyEksKEW1lbW9yeV9kYXRhX3BhcmFtGBYgASgLMjAuYXBv",
            "bGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLk1lbW9yeURhdGFQYXJhbWV0ZXIS",
            "PAoJbXZuX3BhcmFtGCIgASgLMikuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJl",
            "bmNlLk1WTlBhcmFtZXRlchJECg1wb29saW5nX3BhcmFtGBMgASgLMi0uYXBv",
            "bGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlBvb2xpbmdQYXJhbWV0ZXISQAoL",
            "cG93ZXJfcGFyYW0YFSABKAsyKy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuUG93ZXJQYXJhbWV0ZXISPgoKcmVsdV9wYXJhbRgeIAEoCzIqLmFwb2xs",
            "by5wZXJjZXB0aW9uLmluZmVyZW5jZS5SZUxVUGFyYW1ldGVyEkQKDXNpZ21v",
            "aWRfcGFyYW0YJiABKAsyLS5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2Uu",
            "U2lnbW9pZFBhcmFtZXRlchJECg1zb2Z0bWF4X3BhcmFtGCcgASgLMi0uYXBv",
            "bGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLlNvZnRtYXhQYXJhbWV0ZXISQAoL",
            "c2xpY2VfcGFyYW0YHyABKAsyKy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuU2xpY2VQYXJhbWV0ZXISPgoKdGFuaF9wYXJhbRglIAEoCzIqLmFwb2xs",
            "by5wZXJjZXB0aW9uLmluZmVyZW5jZS5UYW5IUGFyYW1ldGVyEkgKD3RocmVz",
            "aG9sZF9wYXJhbRgZIAEoCzIvLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5UaHJlc2hvbGRQYXJhbWV0ZXISSwoRd2luZG93X2RhdGFfcGFyYW0YFCAB",
            "KAsyMC5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVuY2UuV2luZG93RGF0YVBh",
            "cmFtZXRlchJNCg90cmFuc2Zvcm1fcGFyYW0YJCABKAsyNC5hcG9sbG8ucGVy",
            "Y2VwdGlvbi5pbmZlcmVuY2UuVHJhbnNmb3JtYXRpb25QYXJhbWV0ZXISPgoK",
            "bG9zc19wYXJhbRgqIAEoCzIqLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5j",
            "ZS5Mb3NzUGFyYW1ldGVyEjwKBWxheWVyGAEgASgLMi0uYXBvbGxvLnBlcmNl",
            "cHRpb24uaW5mZXJlbmNlLlYwTGF5ZXJQYXJhbWV0ZXIi2AQKCUxheWVyVHlw",
            "ZRIICgROT05FEAASCgoGQUJTVkFMECMSDAoIQUNDVVJBQ1kQARIKCgZBUkdN",
            "QVgQHhIICgRCTkxMEAISCgoGQ09OQ0FUEAMSFAoQQ09OVFJBU1RJVkVfTE9T",
            "UxAlEg8KC0NPTlZPTFVUSU9OEAQSCAoEREFUQRAFEhEKDURFQ09OVk9MVVRJ",
            "T04QJxILCgdEUk9QT1VUEAYSDgoKRFVNTVlfREFUQRAgEhIKDkVVQ0xJREVB",
            "Tl9MT1NTEAcSCwoHRUxUV0lTRRAZEgcKA0VYUBAmEgsKB0ZMQVRURU4QCBIN",
            "CglIREY1X0RBVEEQCRIPCgtIREY1X09VVFBVVBAKEg4KCkhJTkdFX0xPU1MQ",
            "HBIKCgZJTTJDT0wQCxIOCgpJTUFHRV9EQVRBEAwSEQoNSU5GT0dBSU5fTE9T",
            "UxANEhEKDUlOTkVSX1BST0RVQ1QQDhIHCgNMUk4QDxIPCgtNRU1PUllfREFU",
            "QRAdEh0KGU1VTFRJTk9NSUFMX0xPR0lTVElDX0xPU1MQEBIHCgNNVk4QIhIL",
            "CgdQT09MSU5HEBESCQoFUE9XRVIQGhIICgRSRUxVEBISCwoHU0lHTU9JRBAT",
            "Eh4KGlNJR01PSURfQ1JPU1NfRU5UUk9QWV9MT1NTEBsSCwoHU0lMRU5DRRAk",
            "EgsKB1NPRlRNQVgQFBIQCgxTT0ZUTUFYX0xPU1MQFRIJCgVTUExJVBAWEgkK",
            "BVNMSUNFECESCAoEVEFOSBAXEg8KC1dJTkRPV19EQVRBEBgSDQoJVEhSRVNI",
            "T0xEEB8iKgoMRGltQ2hlY2tNb2RlEgoKBlNUUklDVBAAEg4KClBFUk1JU1NJ",
            "VkUQASKECAoQVjBMYXllclBhcmFtZXRlchIMCgRuYW1lGAEgASgJEgwKBHR5",
            "cGUYAiABKAkSEgoKbnVtX291dHB1dBgDIAEoDRIQCghiaWFzdGVybRgEIAEo",
            "CBJDCg13ZWlnaHRfZmlsbGVyGAUgASgLMiwuYXBvbGxvLnBlcmNlcHRpb24u",
            "aW5mZXJlbmNlLkZpbGxlclBhcmFtZXRlchJBCgtiaWFzX2ZpbGxlchgGIAEo",
            "CzIsLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5GaWxsZXJQYXJhbWV0",
            "ZXISCwoDcGFkGAcgASgNEhIKCmtlcm5lbHNpemUYCCABKA0SDQoFZ3JvdXAY",
            "CSABKA0SDgoGc3RyaWRlGAogASgNEkYKBHBvb2wYCyABKA4yOC5hcG9sbG8u",
            "cGVyY2VwdGlvbi5pbmZlcmVuY2UuVjBMYXllclBhcmFtZXRlci5Qb29sTWV0",
            "aG9kEhUKDWRyb3BvdXRfcmF0aW8YDCABKAISEgoKbG9jYWxfc2l6ZRgNIAEo",
            "DRINCgVhbHBoYRgOIAEoAhIMCgRiZXRhGA8gASgCEgkKAWsYFiABKAISDgoG",
            "c291cmNlGBAgASgJEg0KBXNjYWxlGBEgASgCEhAKCG1lYW5maWxlGBIgASgJ",
            "EhEKCWJhdGNoc2l6ZRgTIAEoDRIQCghjcm9wc2l6ZRgUIAEoDRIOCgZtaXJy",
            "b3IYFSABKAgSNQoFYmxvYnMYMiADKAsyJi5hcG9sbG8ucGVyY2VwdGlvbi5p",
            "bmZlcmVuY2UuQmxvYlByb3RvEhAKCGJsb2JzX2xyGDMgAygCEhQKDHdlaWdo",
            "dF9kZWNheRg0IAMoAhIRCglyYW5kX3NraXAYNSABKA0SGAoQZGV0X2ZnX3Ro",
            "cmVzaG9sZBg2IAEoAhIYChBkZXRfYmdfdGhyZXNob2xkGDcgASgCEhcKD2Rl",
            "dF9mZ19mcmFjdGlvbhg4IAEoAhIXCg9kZXRfY29udGV4dF9wYWQYOiABKA0S",
            "FQoNZGV0X2Nyb3BfbW9kZRg7IAEoCRIPCgduZXdfbnVtGDwgASgFEhQKDG5l",
            "d19jaGFubmVscxg9IAEoBRISCgpuZXdfaGVpZ2h0GD4gASgFEhEKCW5ld193",
            "aWR0aBg/IAEoBRIWCg5zaHVmZmxlX2ltYWdlcxhAIAEoCBISCgpjb25jYXRf",
            "ZGltGEEgASgNEkwKEWhkZjVfb3V0cHV0X3BhcmFtGOkHIAEoCzIwLmFwb2xs",
            "by5wZXJjZXB0aW9uLmluZmVyZW5jZS5IREY1T3V0cHV0UGFyYW1ldGVyIi4K",
            "ClBvb2xNZXRob2QSBwoDTUFYEAASBwoDQVZFEAESDgoKU1RPQ0hBU1RJQxAC",
            "ImYKDlBSZUxVUGFyYW1ldGVyEjwKBmZpbGxlchgBIAEoCzIsLmFwb2xsby5w",
            "ZXJjZXB0aW9uLmluZmVyZW5jZS5GaWxsZXJQYXJhbWV0ZXISFgoOY2hhbm5l",
            "bF9zaGFyZWQYAiABKAgiWwoQUGFkZGluZ1BhcmFtZXRlchINCgVwYWRfdBgB",
            "IAEoDRINCgVwYWRfYhgCIAEoDRINCgVwYWRfbBgDIAEoDRINCgVwYWRfchgE",
            "IAEoDRILCgN2YWwYBSABKAIiqQEKEVlvbG9Mb3NzUGFyYW1ldGVyElEKDXJl",
            "Z19sb3NzX3R5cGUYASABKA4yOi5hcG9sbG8ucGVyY2VwdGlvbi5pbmZlcmVu",
            "Y2UuWW9sb0xvc3NQYXJhbWV0ZXIuUmVnTG9zc1R5cGUSEwoLdGFyZ2V0X2F4",
            "aXMYAiABKAUiLAoLUmVnTG9zc1R5cGUSBgoCTDIQABIGCgJMMRABEg0KCVNN",
            "T09USF9MMRACIiUKEVlvbG9EdW1wUGFyYW1ldGVyEhAKCGR1bXBfZGlyGAEg",
            "ASgJIkoKFFlvbG9BbmNob3JzUGFyYW1ldGVyEhQKDGFuY2hvcnNfZmlsZRgB",
            "IAEoCRINCgVyZWZfdxgCIAEoBRINCgVyZWZfaBgDIAEoBSJyChNEaW1lbnNp",
            "b25TdGF0aXN0aWNzEg4KBm1lYW5faBgBIAEoAhIOCgZtZWFuX3cYAiABKAIS",
            "DgoGbWVhbl9sGAMgASgCEg0KBXN0ZF9oGAQgASgCEg0KBXN0ZF93GAUgASgC",
            "Eg0KBXN0ZF9sGAYgASgCIrQCChNZb2xvVGFyZ2V0UGFyYW1ldGVyEhYKDm5l",
            "Z19yb2lzX3JhdGlvGAEgASgCEhUKDWlnbl90aHJlc2hvbGQYAiABKAISFQoN",
            "bmVnX3RocmVzaG9sZBgDIAEoAhISCgptaW5faGVpZ2h0GAQgASgCEhIKCmJp",
            "YXNfbWF0Y2gYBSABKAgSDwoHcmVzY29yZRgGIAEoCBIPCgdvcmlfY3ljGAcg",
            "ASgFEhIKCm9ial93ZWlnaHQYCCABKAISFAoMbm9vYmpfd2VpZ2h0GAkgASgC",
            "EhMKC251bV9jbGFzc2VzGAogASgFEk4KFGRpbWVuc2lvbl9zdGF0aXN0aWNz",
            "GAsgAygLMjAuYXBvbGxvLnBlcmNlcHRpb24uaW5mZXJlbmNlLkRpbWVuc2lv",
            "blN0YXRpc3RpY3MigAQKF1JlZ2lvblByb3Bvc2FsUGFyYW1ldGVyEjkKCWFu",
            "Y2hvcmJveBgBIAMoCzImLmFwb2xsby5wZXJjZXB0aW9uLmluZmVyZW5jZS5B",
            "bmNob3JCb3gSEgoKdGhyZXNob2xkcxgCIAMoAhIZChFvcmllbnRhdGlvbl9z",
            "Y2FsZRgOIAEoAhIUCgxvYmplY3Rfc2NhbGUYAyABKA0SFgoObm9vYmplY3Rf",
            "c2NhbGUYBCABKA0SEwoLY2xhc3Nfc2NhbGUYBSABKA0SEwoLY29vcmRfc2Nh",
            "bGUYBiABKA0SDgoGaml0dGVyGAcgASgCEgwKBGJpYXMYCCABKAISDwoHcmVz",
            "Y29yZRgJIAEoCBITCgtudW1fY2xhc3NlcxgKIAEoDRISCgpiaWFzX21hdGNo",
            "GAsgASgIEhEKCXRocmVzaG9sZBgMIAEoAhITCgt0cmlja3lfaXRlchgNIAEo",
            "DRJOCglubXNfcGFyYW0YDyABKAsyOy5hcG9sbG8ucGVyY2VwdGlvbi5pbmZl",
            "cmVuY2UuTm9uTWF4aW11bVN1cHByZXNzaW9uUGFyYW1ldGVyEhIKCmtlZXBf",
            "dG9wX2sYECABKAUSFQoNcG9zX3RocmVzaG9sZBgRIAEoAhIVCg1uZWdfdGhy",
            "ZXNob2xkGBIgASgCEhEKCW5lZ19yYXRpbxgTIAEoBSLQBAoPUmVnaW9uUGFy",
            "YW1ldGVyEjkKCWFuY2hvcmJveBgBIAMoCzImLmFwb2xsby5wZXJjZXB0aW9u",
            "LmluZmVyZW5jZS5BbmNob3JCb3gSEgoKdGhyZXNob2xkcxgCIAMoAhIZChFv",
            "cmllbnRhdGlvbl9zY2FsZRgOIAEoAhIXCg9kaW1lbnNpb25fc2NhbGUYDyAB",
            "KAISEwoLZnJvbnRfc2NhbGUYEyABKAISEgoKcmVhcl9zY2FsZRgUIAEoAhIU",
            "CgxvYmplY3Rfc2NhbGUYAyABKA0SFgoObm9vYmplY3Rfc2NhbGUYBCABKA0S",
            "EwoLY2xhc3Nfc2NhbGUYBSABKAISEwoLY29vcmRfc2NhbGUYBiABKA0SDgoG",
            "aml0dGVyGAcgASgCEgwKBGJpYXMYCCABKAISDwoHcmVzY29yZRgJIAEoCBIT",
            "CgtudW1fY2xhc3NlcxgKIAEoDRISCgpiaWFzX21hdGNoGAsgASgIEhEKCXRo",
            "cmVzaG9sZBgMIAEoAhITCgt0cmlja3lfaXRlchgNIAEoDRITCgt1c2VfbDFf",
            "bG9zcxgQIAEoCBIZChF1c2VfdHdpY2Vfc29mdG1heBgRIAEoCBIcChRpc19h",
            "bmNob3Jfbm9ybWFsaXplZBgSIAEoCBISCgpvcmlfZW5hYmxlGBUgAygIEhIK",
            "CmFuY2hvcmZpbGUYFiABKAkSFwoPdXNlX3NpZGVfYm94X3YyGBcgASgIEhcK",
            "D3VzZV9zaWRlX2JveF92MxgYIAEoCBIRCglvcmlfY3ljbGUYGSABKAUiIQoJ",
            "QW5jaG9yQm94EgkKAXcYASABKAISCQoBaBgCIAEoAiIgCg5SZW9yZ1BhcmFt",
            "ZXRlchIOCgZzdHJpZGUYASABKA0qHAoFUGhhc2USCQoFVFJBSU4QABIICgRU",
            "RVNUEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Perception.Inference.Phase), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.BlobShape), global::Apollo.Perception.Inference.BlobShape.Parser, new[]{ "Dim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.BlobProto), global::Apollo.Perception.Inference.BlobProto.Parser, new[]{ "Shape", "Data", "Diff", "DoubleData", "DoubleDiff", "Num", "Channels", "Height", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.BlobProtoVector), global::Apollo.Perception.Inference.BlobProtoVector.Parser, new[]{ "Blobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.Datum), global::Apollo.Perception.Inference.Datum.Parser, new[]{ "Channels", "Height", "Width", "Data", "Label", "FloatData", "Encoded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.LabelMapItem), global::Apollo.Perception.Inference.LabelMapItem.Parser, new[]{ "Name", "Label", "DisplayName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.LabelMap), global::Apollo.Perception.Inference.LabelMap.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.Sampler), global::Apollo.Perception.Inference.Sampler.Parser, new[]{ "MinScale", "MaxScale", "MinAspectRatio", "MaxAspectRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SampleConstraint), global::Apollo.Perception.Inference.SampleConstraint.Parser, new[]{ "MinJaccardOverlap", "MaxJaccardOverlap", "MinSampleCoverage", "MaxSampleCoverage", "MinObjectCoverage", "MaxObjectCoverage", "BalanceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.BatchSampler), global::Apollo.Perception.Inference.BatchSampler.Parser, new[]{ "UseOriginalImage", "Sampler", "SampleConstraint", "MaxSample", "MaxTrials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.EmitConstraint), global::Apollo.Perception.Inference.EmitConstraint.Parser, new[]{ "EmitType", "EmitOverlap" }, null, new[]{ typeof(global::Apollo.Perception.Inference.EmitConstraint.Types.EmitType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.NormalizedBBox), global::Apollo.Perception.Inference.NormalizedBBox.Parser, new[]{ "Xmin", "Ymin", "Xmax", "Ymax", "Label", "Difficult", "Score", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.BBox3D), global::Apollo.Perception.Inference.BBox3D.Parser, new[]{ "H", "W", "L", "X", "Y", "Z", "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.Annotation), global::Apollo.Perception.Inference.Annotation.Parser, new[]{ "InstanceId", "Bbox", "Bbox3D", "FrontBbox", "RearBbox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.AnnotationGroup), global::Apollo.Perception.Inference.AnnotationGroup.Parser, new[]{ "GroupLabel", "Annotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.AnnotatedDatum), global::Apollo.Perception.Inference.AnnotatedDatum.Parser, new[]{ "Datum", "Type", "AnnotationGroup" }, null, new[]{ typeof(global::Apollo.Perception.Inference.AnnotatedDatum.Types.AnnotationType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.FillerParameter), global::Apollo.Perception.Inference.FillerParameter.Parser, new[]{ "Type", "Value", "Min", "Max", "Mean", "Std", "Sparse", "VarianceNorm" }, null, new[]{ typeof(global::Apollo.Perception.Inference.FillerParameter.Types.VarianceNorm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.NetParameter), global::Apollo.Perception.Inference.NetParameter.Parser, new[]{ "Name", "Input", "InputShape", "InputDim", "ForceBackward", "State", "DebugInfo", "Layer", "Layers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SolverParameter), global::Apollo.Perception.Inference.SolverParameter.Parser, new[]{ "Net", "NetParam", "TrainNet", "TestNet", "TrainNetParam", "TestNetParam", "TrainState", "TestState", "EvalType", "ApVersion", "ShowPerClassResult", "TestIter", "TestInterval", "TestComputeLoss", "TestInitialization", "BaseLr", "Display", "AverageLoss", "MaxIter", "IterSize", "LrPolicy", "Gamma", "Power", "Momentum", "WeightDecay", "RegularizationType", "Stepsize", "Stepvalue", "PlateauWinsize", "ClipGradients", "Snapshot", "SnapshotPrefix", "SnapshotDiff", "SnapshotFormat", "SolverMode", "DeviceId", "RandomSeed", "Type", "Delta", "Momentum2", "RmsDecay", "DebugInfo", "SnapshotAfterTrain", "SolverType" }, null, new[]{ typeof(global::Apollo.Perception.Inference.SolverParameter.Types.SnapshotFormat), typeof(global::Apollo.Perception.Inference.SolverParameter.Types.SolverMode), typeof(global::Apollo.Perception.Inference.SolverParameter.Types.SolverType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SolverState), global::Apollo.Perception.Inference.SolverState.Parser, new[]{ "Iter", "LearnedNet", "History", "CurrentStep", "MinimumLoss", "IterLastEvent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.NetState), global::Apollo.Perception.Inference.NetState.Parser, new[]{ "Phase", "Level", "Stage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.NetStateRule), global::Apollo.Perception.Inference.NetStateRule.Parser, new[]{ "Phase", "MinLevel", "MaxLevel", "Stage", "NotStage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ParamSpec), global::Apollo.Perception.Inference.ParamSpec.Parser, new[]{ "Name", "ShareMode", "LrMult", "DecayMult" }, null, new[]{ typeof(global::Apollo.Perception.Inference.ParamSpec.Types.DimCheckMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.LayerParameter), global::Apollo.Perception.Inference.LayerParameter.Parser, new[]{ "Name", "Type", "Bottom", "Top", "Phase", "LossWeight", "Param", "Blobs", "PropagateDown", "Include", "Exclude", "TransformParam", "LossParam", "AccuracyParam", "AnnotatedDataParam", "ArgmaxParam", "BatchNormParam", "BiasParam", "ConcatParam", "ContrastiveLossParam", "ConvolutionParam", "CropParam", "DataParam", "DetectionEvaluateParam", "DetectionOutputParam", "DropoutParam", "DummyDataParam", "EltwiseParam", "EluParam", "EmbedParam", "ExpParam", "FlattenParam", "Hdf5DataParam", "Hdf5OutputParam", "HingeLossParam", "ImageDataParam", "YoloDataParam", "DataProbParam", "InfogainLossParam", "InnerProductParam", "InputParam", "LogParam", "LrnParam", "MemoryDataParam", "MultiboxLossParam", "RegionParam", "RegionOutputParam", "RegionProposalParam", "YoloTargetParam", "YoloAnchorsParam", "YoloLossParam", "YoloDumpParam", "PaddingParam", "ReorgParam", "MvnParam", "NormParam", "ParameterParam", "PermuteParam", "PoolingParam", "PowerParam", "PreluParam", "PriorBoxParam", "PythonParam", "RecurrentParam", "ReductionParam", "ReluParam", "ReshapeParam", "RoiPoolingParam", "ScaleParam", "SigmoidParam", "SoftmaxParam", "SppParam", "SliceParam", "TanhParam", "ThresholdParam", "TileParam", "VideoDataParam", "WindowDataParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.TransformationParameter), global::Apollo.Perception.Inference.TransformationParameter.Parser, new[]{ "Scale", "Mirror", "CropSize", "CropH", "CropW", "MeanFile", "MeanValue", "ForceColor", "ForceGray", "ResizeParam", "NoiseParam", "DistortParam", "ExpandParam", "Jitter", "EmitConstraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ResizeParameter), global::Apollo.Perception.Inference.ResizeParameter.Parser, new[]{ "Prob", "ResizeMode", "Height", "Width", "HeightScale", "WidthScale", "PadMode", "PadValue", "InterpMode" }, null, new[]{ typeof(global::Apollo.Perception.Inference.ResizeParameter.Types.Resize_mode), typeof(global::Apollo.Perception.Inference.ResizeParameter.Types.Pad_mode), typeof(global::Apollo.Perception.Inference.ResizeParameter.Types.Interp_mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SaltPepperParameter), global::Apollo.Perception.Inference.SaltPepperParameter.Parser, new[]{ "Fraction", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.NoiseParameter), global::Apollo.Perception.Inference.NoiseParameter.Parser, new[]{ "Prob", "HistEq", "Inverse", "Decolorize", "GaussBlur", "Jpeg", "Posterize", "Erode", "Saltpepper", "SaltpepperParam", "Clahe", "ConvertToHsv", "ConvertToLab" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DistortionParameter), global::Apollo.Perception.Inference.DistortionParameter.Parser, new[]{ "BrightnessProb", "BrightnessDelta", "ContrastProb", "ContrastLower", "ContrastUpper", "HueProb", "HueDelta", "SaturationProb", "SaturationLower", "SaturationUpper", "RandomOrderProb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ExpansionParameter), global::Apollo.Perception.Inference.ExpansionParameter.Parser, new[]{ "Prob", "MaxExpandRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.LossParameter), global::Apollo.Perception.Inference.LossParameter.Parser, new[]{ "IgnoreLabel", "Normalization", "Normalize" }, null, new[]{ typeof(global::Apollo.Perception.Inference.LossParameter.Types.NormalizationMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.AccuracyParameter), global::Apollo.Perception.Inference.AccuracyParameter.Parser, new[]{ "TopK", "Axis", "IgnoreLabel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.AnnotatedDataParameter), global::Apollo.Perception.Inference.AnnotatedDataParameter.Parser, new[]{ "BatchSampler", "LabelMapFile", "AnnoType", "NumClasses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ArgMaxParameter), global::Apollo.Perception.Inference.ArgMaxParameter.Parser, new[]{ "OutMaxVal", "TopK", "Axis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ConcatParameter), global::Apollo.Perception.Inference.ConcatParameter.Parser, new[]{ "Axis", "ConcatDim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.BatchNormParameter), global::Apollo.Perception.Inference.BatchNormParameter.Parser, new[]{ "UseGlobalStats", "MovingAverageFraction", "Eps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.BiasParameter), global::Apollo.Perception.Inference.BiasParameter.Parser, new[]{ "Axis", "NumAxes", "Filler" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ContrastiveLossParameter), global::Apollo.Perception.Inference.ContrastiveLossParameter.Parser, new[]{ "Margin", "LegacyVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ConvolutionParameter), global::Apollo.Perception.Inference.ConvolutionParameter.Parser, new[]{ "NumOutput", "BiasTerm", "Pad", "KernelSize", "Stride", "Dilation", "PadH", "PadW", "KernelH", "KernelW", "StrideH", "StrideW", "Group", "WeightFiller", "BiasFiller", "Engine", "Axis", "ForceNdIm2Col" }, null, new[]{ typeof(global::Apollo.Perception.Inference.ConvolutionParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.CropParameter), global::Apollo.Perception.Inference.CropParameter.Parser, new[]{ "Axis", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DataParameter), global::Apollo.Perception.Inference.DataParameter.Parser, new[]{ "Source", "BatchSize", "RandSkip", "Backend", "Scale", "MeanFile", "CropSize", "Mirror", "ForceEncodedColor", "Prefetch" }, null, new[]{ typeof(global::Apollo.Perception.Inference.DataParameter.Types.DB) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DetectionEvaluateParameter), global::Apollo.Perception.Inference.DetectionEvaluateParameter.Parser, new[]{ "NumClasses", "BackgroundLabelId", "OverlapThreshold", "EvaluateDifficultGt", "NameSizeFile", "ResizeParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.NonMaximumSuppressionParameter), global::Apollo.Perception.Inference.NonMaximumSuppressionParameter.Parser, new[]{ "NmsThreshold", "TopK", "Eta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SaveOutputParameter), global::Apollo.Perception.Inference.SaveOutputParameter.Parser, new[]{ "OutputDirectory", "OutputNamePrefix", "OutputFormat", "LabelMapFile", "NameSizeFile", "NumTestImage", "ResizeParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DetectionOutputParameter), global::Apollo.Perception.Inference.DetectionOutputParameter.Parser, new[]{ "NumClasses", "ShareLocation", "BackgroundLabelId", "NmsParam", "SaveOutputParam", "CodeType", "VarianceEncodedInTarget", "KeepTopK", "ConfidenceThreshold", "Visualize", "VisualizeThreshold", "SaveFile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.RegionOutputParameter), global::Apollo.Perception.Inference.RegionOutputParameter.Parser, new[]{ "NumClasses", "NmsParam", "KeepTopK", "ConfidenceThreshold", "Anchorbox", "NmsType", "NmsSigma", "IsRpn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DropoutParameter), global::Apollo.Perception.Inference.DropoutParameter.Parser, new[]{ "DropoutRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DummyDataParameter), global::Apollo.Perception.Inference.DummyDataParameter.Parser, new[]{ "DataFiller", "Shape", "Num", "Channels", "Height", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.EltwiseParameter), global::Apollo.Perception.Inference.EltwiseParameter.Parser, new[]{ "Operation", "Coeff", "StableProdGrad" }, null, new[]{ typeof(global::Apollo.Perception.Inference.EltwiseParameter.Types.EltwiseOp) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ELUParameter), global::Apollo.Perception.Inference.ELUParameter.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.EmbedParameter), global::Apollo.Perception.Inference.EmbedParameter.Parser, new[]{ "NumOutput", "InputDim", "BiasTerm", "WeightFiller", "BiasFiller" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ExpParameter), global::Apollo.Perception.Inference.ExpParameter.Parser, new[]{ "Base", "Scale", "Shift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.FlattenParameter), global::Apollo.Perception.Inference.FlattenParameter.Parser, new[]{ "Axis", "EndAxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.HDF5DataParameter), global::Apollo.Perception.Inference.HDF5DataParameter.Parser, new[]{ "Source", "BatchSize", "Shuffle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.HDF5OutputParameter), global::Apollo.Perception.Inference.HDF5OutputParameter.Parser, new[]{ "FileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.HingeLossParameter), global::Apollo.Perception.Inference.HingeLossParameter.Parser, new[]{ "Norm" }, null, new[]{ typeof(global::Apollo.Perception.Inference.HingeLossParameter.Types.Norm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.RepeatedList), global::Apollo.Perception.Inference.RepeatedList.Parser, new[]{ "ListPath", "NumRepeat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DatasetParameter), global::Apollo.Perception.Inference.DatasetParameter.Parser, new[]{ "Source", "RootFolder", "Weight", "Type", "Shuffle", "RepeatedList" }, null, new[]{ typeof(global::Apollo.Perception.Inference.DatasetParameter.Types.DatasetType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ImageDataParameter), global::Apollo.Perception.Inference.ImageDataParameter.Parser, new[]{ "Source", "BatchSize", "RandSkip", "Shuffle", "NewHeight", "NewWidth", "IsColor", "Scale", "MeanFile", "CropSize", "Mirror", "RootFolder", "Prefetch", "ImageSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.InfogainLossParameter), global::Apollo.Perception.Inference.InfogainLossParameter.Parser, new[]{ "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.InnerProductParameter), global::Apollo.Perception.Inference.InnerProductParameter.Parser, new[]{ "NumOutput", "BiasTerm", "WeightFiller", "BiasFiller", "Axis", "Transpose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.InputParameter), global::Apollo.Perception.Inference.InputParameter.Parser, new[]{ "Shape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.LogParameter), global::Apollo.Perception.Inference.LogParameter.Parser, new[]{ "Base", "Scale", "Shift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.LRNParameter), global::Apollo.Perception.Inference.LRNParameter.Parser, new[]{ "LocalSize", "Alpha", "Beta", "NormRegion", "K", "Engine" }, null, new[]{ typeof(global::Apollo.Perception.Inference.LRNParameter.Types.NormRegion), typeof(global::Apollo.Perception.Inference.LRNParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.MemoryDataParameter), global::Apollo.Perception.Inference.MemoryDataParameter.Parser, new[]{ "BatchSize", "Channels", "Height", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.MultiBoxLossParameter), global::Apollo.Perception.Inference.MultiBoxLossParameter.Parser, new[]{ "LocLossType", "ConfLossType", "LocWeight", "NumClasses", "ShareLocation", "MatchType", "OverlapThreshold", "UsePriorForMatching", "BackgroundLabelId", "UseDifficultGt", "DoNegMining", "NegPosRatio", "NegOverlap", "CodeType", "EncodeVarianceInTarget", "MapObjectToAgnostic", "IgnoreCrossBoundaryBbox", "BpInside", "MiningType", "NmsParam", "SampleSize", "UsePriorForNms" }, null, new[]{ typeof(global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.LocLossType), typeof(global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.ConfLossType), typeof(global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MatchType), typeof(global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MiningType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.MVNParameter), global::Apollo.Perception.Inference.MVNParameter.Parser, new[]{ "NormalizeVariance", "AcrossChannels", "Eps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.NormalizeParameter), global::Apollo.Perception.Inference.NormalizeParameter.Parser, new[]{ "AcrossSpatial", "ScaleFiller", "ChannelShared", "Eps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ParameterParameter), global::Apollo.Perception.Inference.ParameterParameter.Parser, new[]{ "Shape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.PermuteParameter), global::Apollo.Perception.Inference.PermuteParameter.Parser, new[]{ "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.PoolingParameter), global::Apollo.Perception.Inference.PoolingParameter.Parser, new[]{ "Pool", "Pad", "PadH", "PadW", "KernelSize", "KernelH", "KernelW", "Stride", "StrideH", "StrideW", "Engine", "GlobalPooling", "CmpOutShapeFloorAsConv" }, null, new[]{ typeof(global::Apollo.Perception.Inference.PoolingParameter.Types.PoolMethod), typeof(global::Apollo.Perception.Inference.PoolingParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.PowerParameter), global::Apollo.Perception.Inference.PowerParameter.Parser, new[]{ "Power", "Scale", "Shift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.PriorBoxParameter), global::Apollo.Perception.Inference.PriorBoxParameter.Parser, new[]{ "MinSize", "MaxSize", "AspectRatio", "Flip", "Clip", "Variance", "ImgSize", "ImgH", "ImgW", "Step", "StepH", "StepW", "Offset" }, null, new[]{ typeof(global::Apollo.Perception.Inference.PriorBoxParameter.Types.CodeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.PythonParameter), global::Apollo.Perception.Inference.PythonParameter.Parser, new[]{ "Module", "Layer", "ParamStr", "ShareInParallel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.RecurrentParameter), global::Apollo.Perception.Inference.RecurrentParameter.Parser, new[]{ "NumOutput", "WeightFiller", "BiasFiller", "DebugInfo", "ExposeHidden" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ReductionParameter), global::Apollo.Perception.Inference.ReductionParameter.Parser, new[]{ "Operation", "Axis", "Coeff" }, null, new[]{ typeof(global::Apollo.Perception.Inference.ReductionParameter.Types.ReductionOp) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ReLUParameter), global::Apollo.Perception.Inference.ReLUParameter.Parser, new[]{ "NegativeSlope", "Engine" }, null, new[]{ typeof(global::Apollo.Perception.Inference.ReLUParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ReshapeParameter), global::Apollo.Perception.Inference.ReshapeParameter.Parser, new[]{ "Shape", "Axis", "NumAxes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ROIPoolingParameter), global::Apollo.Perception.Inference.ROIPoolingParameter.Parser, new[]{ "PooledH", "PooledW", "SpatialScale", "UseFloor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ScaleParameter), global::Apollo.Perception.Inference.ScaleParameter.Parser, new[]{ "Axis", "NumAxes", "Filler", "BiasTerm", "BiasFiller" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SigmoidParameter), global::Apollo.Perception.Inference.SigmoidParameter.Parser, new[]{ "Engine" }, null, new[]{ typeof(global::Apollo.Perception.Inference.SigmoidParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SliceParameter), global::Apollo.Perception.Inference.SliceParameter.Parser, new[]{ "Axis", "SlicePoint", "SliceDim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SoftmaxParameter), global::Apollo.Perception.Inference.SoftmaxParameter.Parser, new[]{ "Engine", "Axis" }, null, new[]{ typeof(global::Apollo.Perception.Inference.SoftmaxParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.TanHParameter), global::Apollo.Perception.Inference.TanHParameter.Parser, new[]{ "Engine" }, null, new[]{ typeof(global::Apollo.Perception.Inference.TanHParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.TileParameter), global::Apollo.Perception.Inference.TileParameter.Parser, new[]{ "Axis", "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ThresholdParameter), global::Apollo.Perception.Inference.ThresholdParameter.Parser, new[]{ "Threshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.VideoDataParameter), global::Apollo.Perception.Inference.VideoDataParameter.Parser, new[]{ "VideoType", "DeviceId", "VideoFile", "SkipFrames" }, null, new[]{ typeof(global::Apollo.Perception.Inference.VideoDataParameter.Types.VideoType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.WindowDataParameter), global::Apollo.Perception.Inference.WindowDataParameter.Parser, new[]{ "Source", "Scale", "MeanFile", "BatchSize", "CropSize", "Mirror", "FgThreshold", "BgThreshold", "FgFraction", "ContextPad", "CropMode", "CacheImages", "RootFolder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.SPPParameter), global::Apollo.Perception.Inference.SPPParameter.Parser, new[]{ "PyramidHeight", "Pool", "Engine" }, null, new[]{ typeof(global::Apollo.Perception.Inference.SPPParameter.Types.PoolMethod), typeof(global::Apollo.Perception.Inference.SPPParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.V1LayerParameter), global::Apollo.Perception.Inference.V1LayerParameter.Parser, new[]{ "Bottom", "Top", "Name", "Include", "Exclude", "Type", "Blobs", "Param", "BlobShareMode", "BlobsLr", "WeightDecay", "LossWeight", "AccuracyParam", "ArgmaxParam", "ConcatParam", "ContrastiveLossParam", "ConvolutionParam", "DataParam", "DropoutParam", "DummyDataParam", "EltwiseParam", "ExpParam", "Hdf5DataParam", "Hdf5OutputParam", "HingeLossParam", "ImageDataParam", "InfogainLossParam", "InnerProductParam", "LrnParam", "MemoryDataParam", "MvnParam", "PoolingParam", "PowerParam", "ReluParam", "SigmoidParam", "SoftmaxParam", "SliceParam", "TanhParam", "ThresholdParam", "WindowDataParam", "TransformParam", "LossParam", "Layer" }, null, new[]{ typeof(global::Apollo.Perception.Inference.V1LayerParameter.Types.LayerType), typeof(global::Apollo.Perception.Inference.V1LayerParameter.Types.DimCheckMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.V0LayerParameter), global::Apollo.Perception.Inference.V0LayerParameter.Parser, new[]{ "Name", "Type", "NumOutput", "Biasterm", "WeightFiller", "BiasFiller", "Pad", "Kernelsize", "Group", "Stride", "Pool", "DropoutRatio", "LocalSize", "Alpha", "Beta", "K", "Source", "Scale", "Meanfile", "Batchsize", "Cropsize", "Mirror", "Blobs", "BlobsLr", "WeightDecay", "RandSkip", "DetFgThreshold", "DetBgThreshold", "DetFgFraction", "DetContextPad", "DetCropMode", "NewNum", "NewChannels", "NewHeight", "NewWidth", "ShuffleImages", "ConcatDim", "Hdf5OutputParam" }, null, new[]{ typeof(global::Apollo.Perception.Inference.V0LayerParameter.Types.PoolMethod) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.PReLUParameter), global::Apollo.Perception.Inference.PReLUParameter.Parser, new[]{ "Filler", "ChannelShared" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.PaddingParameter), global::Apollo.Perception.Inference.PaddingParameter.Parser, new[]{ "PadT", "PadB", "PadL", "PadR", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.YoloLossParameter), global::Apollo.Perception.Inference.YoloLossParameter.Parser, new[]{ "RegLossType", "TargetAxis" }, null, new[]{ typeof(global::Apollo.Perception.Inference.YoloLossParameter.Types.RegLossType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.YoloDumpParameter), global::Apollo.Perception.Inference.YoloDumpParameter.Parser, new[]{ "DumpDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.YoloAnchorsParameter), global::Apollo.Perception.Inference.YoloAnchorsParameter.Parser, new[]{ "AnchorsFile", "RefW", "RefH" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.DimensionStatistics), global::Apollo.Perception.Inference.DimensionStatistics.Parser, new[]{ "MeanH", "MeanW", "MeanL", "StdH", "StdW", "StdL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.YoloTargetParameter), global::Apollo.Perception.Inference.YoloTargetParameter.Parser, new[]{ "NegRoisRatio", "IgnThreshold", "NegThreshold", "MinHeight", "BiasMatch", "Rescore", "OriCyc", "ObjWeight", "NoobjWeight", "NumClasses", "DimensionStatistics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.RegionProposalParameter), global::Apollo.Perception.Inference.RegionProposalParameter.Parser, new[]{ "Anchorbox", "Thresholds", "OrientationScale", "ObjectScale", "NoobjectScale", "ClassScale", "CoordScale", "Jitter", "Bias", "Rescore", "NumClasses", "BiasMatch", "Threshold", "TrickyIter", "NmsParam", "KeepTopK", "PosThreshold", "NegThreshold", "NegRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.RegionParameter), global::Apollo.Perception.Inference.RegionParameter.Parser, new[]{ "Anchorbox", "Thresholds", "OrientationScale", "DimensionScale", "FrontScale", "RearScale", "ObjectScale", "NoobjectScale", "ClassScale", "CoordScale", "Jitter", "Bias", "Rescore", "NumClasses", "BiasMatch", "Threshold", "TrickyIter", "UseL1Loss", "UseTwiceSoftmax", "IsAnchorNormalized", "OriEnable", "Anchorfile", "UseSideBoxV2", "UseSideBoxV3", "OriCycle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.AnchorBox), global::Apollo.Perception.Inference.AnchorBox.Parser, new[]{ "W", "H" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Inference.ReorgParameter), global::Apollo.Perception.Inference.ReorgParameter.Parser, new[]{ "Stride" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Phase {
    [pbr::OriginalName("TRAIN")] Train = 0,
    [pbr::OriginalName("TEST")] Test = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Specifies the shape (dimensions) of a Blob.
  /// </summary>
  public sealed partial class BlobShape : pb::IMessage<BlobShape> {
    private static readonly pb::MessageParser<BlobShape> _parser = new pb::MessageParser<BlobShape>(() => new BlobShape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlobShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobShape(BlobShape other) : this() {
      dim_ = other.dim_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobShape Clone() {
      return new BlobShape(this);
    }

    /// <summary>Field number for the "dim" field.</summary>
    public const int DimFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_dim_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> dim_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Dim {
      get { return dim_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlobShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlobShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dim_.Equals(other.dim_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dim_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dim_.WriteTo(output, _repeated_dim_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dim_.CalculateSize(_repeated_dim_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlobShape other) {
      if (other == null) {
        return;
      }
      dim_.Add(other.dim_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            dim_.AddEntriesFrom(input, _repeated_dim_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlobProto : pb::IMessage<BlobProto> {
    private static readonly pb::MessageParser<BlobProto> _parser = new pb::MessageParser<BlobProto>(() => new BlobProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlobProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProto(BlobProto other) : this() {
      Shape = other.shape_ != null ? other.Shape.Clone() : null;
      data_ = other.data_.Clone();
      diff_ = other.diff_.Clone();
      doubleData_ = other.doubleData_.Clone();
      doubleDiff_ = other.doubleDiff_.Clone();
      num_ = other.num_;
      channels_ = other.channels_;
      height_ = other.height_;
      width_ = other.width_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProto Clone() {
      return new BlobProto(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 7;
    private global::Apollo.Perception.Inference.BlobShape shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.BlobShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_data_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> data_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_diff_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> diff_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Diff {
      get { return diff_; }
    }

    /// <summary>Field number for the "double_data" field.</summary>
    public const int DoubleDataFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_doubleData_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> doubleData_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> DoubleData {
      get { return doubleData_; }
    }

    /// <summary>Field number for the "double_diff" field.</summary>
    public const int DoubleDiffFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_doubleDiff_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> doubleDiff_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> DoubleDiff {
      get { return doubleDiff_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    /// <summary>
    /// 4D dimensions -- deprecated.  Use "shape" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 2;
    private int channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlobProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlobProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      if(!data_.Equals(other.data_)) return false;
      if(!diff_.Equals(other.diff_)) return false;
      if(!doubleData_.Equals(other.doubleData_)) return false;
      if(!doubleDiff_.Equals(other.doubleDiff_)) return false;
      if (Num != other.Num) return false;
      if (Channels != other.Channels) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      hash ^= data_.GetHashCode();
      hash ^= diff_.GetHashCode();
      hash ^= doubleData_.GetHashCode();
      hash ^= doubleDiff_.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Channels != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Channels);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      data_.WriteTo(output, _repeated_data_codec);
      diff_.WriteTo(output, _repeated_diff_codec);
      if (shape_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Shape);
      }
      doubleData_.WriteTo(output, _repeated_doubleData_codec);
      doubleDiff_.WriteTo(output, _repeated_doubleDiff_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      size += diff_.CalculateSize(_repeated_diff_codec);
      size += doubleData_.CalculateSize(_repeated_doubleData_codec);
      size += doubleDiff_.CalculateSize(_repeated_doubleDiff_codec);
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channels);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlobProto other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          shape_ = new global::Apollo.Perception.Inference.BlobShape();
        }
        Shape.MergeFrom(other.Shape);
      }
      data_.Add(other.data_);
      diff_.Add(other.diff_);
      doubleData_.Add(other.doubleData_);
      doubleDiff_.Add(other.doubleDiff_);
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Channels = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 42:
          case 45: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 50:
          case 53: {
            diff_.AddEntriesFrom(input, _repeated_diff_codec);
            break;
          }
          case 58: {
            if (shape_ == null) {
              shape_ = new global::Apollo.Perception.Inference.BlobShape();
            }
            input.ReadMessage(shape_);
            break;
          }
          case 66:
          case 65: {
            doubleData_.AddEntriesFrom(input, _repeated_doubleData_codec);
            break;
          }
          case 74:
          case 73: {
            doubleDiff_.AddEntriesFrom(input, _repeated_doubleDiff_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The BlobProtoVector is simply a way to pass multiple blobproto instances
  /// around.
  /// </summary>
  public sealed partial class BlobProtoVector : pb::IMessage<BlobProtoVector> {
    private static readonly pb::MessageParser<BlobProtoVector> _parser = new pb::MessageParser<BlobProtoVector>(() => new BlobProtoVector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlobProtoVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProtoVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProtoVector(BlobProtoVector other) : this() {
      blobs_ = other.blobs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProtoVector Clone() {
      return new BlobProtoVector(this);
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Inference.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> blobs_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> Blobs {
      get { return blobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlobProtoVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlobProtoVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blobs_.Equals(other.blobs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blobs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blobs_.WriteTo(output, _repeated_blobs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlobProtoVector other) {
      if (other == null) {
        return;
      }
      blobs_.Add(other.blobs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Datum : pb::IMessage<Datum> {
    private static readonly pb::MessageParser<Datum> _parser = new pb::MessageParser<Datum>(() => new Datum());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Datum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Datum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Datum(Datum other) : this() {
      channels_ = other.channels_;
      height_ = other.height_;
      width_ = other.width_;
      data_ = other.data_;
      label_ = other.label_;
      floatData_ = other.floatData_.Clone();
      encoded_ = other.encoded_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Datum Clone() {
      return new Datum(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private int channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// the actual image data, in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private int label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "float_data" field.</summary>
    public const int FloatDataFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_floatData_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> floatData_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Optionally, the datum could also hold float data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FloatData {
      get { return floatData_; }
    }

    /// <summary>Field number for the "encoded" field.</summary>
    public const int EncodedFieldNumber = 7;
    private bool encoded_;
    /// <summary>
    /// If true data contains an encoded image that need to be decoded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Encoded {
      get { return encoded_; }
      set {
        encoded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Datum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Datum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channels != other.Channels) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (Data != other.Data) return false;
      if (Label != other.Label) return false;
      if(!floatData_.Equals(other.floatData_)) return false;
      if (Encoded != other.Encoded) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      hash ^= floatData_.GetHashCode();
      if (Encoded != false) hash ^= Encoded.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channels != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channels);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Label != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Label);
      }
      floatData_.WriteTo(output, _repeated_floatData_codec);
      if (Encoded != false) {
        output.WriteRawTag(56);
        output.WriteBool(Encoded);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channels);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      size += floatData_.CalculateSize(_repeated_floatData_codec);
      if (Encoded != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Datum other) {
      if (other == null) {
        return;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      floatData_.Add(other.floatData_);
      if (other.Encoded != false) {
        Encoded = other.Encoded;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Channels = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 40: {
            Label = input.ReadInt32();
            break;
          }
          case 50:
          case 53: {
            floatData_.AddEntriesFrom(input, _repeated_floatData_codec);
            break;
          }
          case 56: {
            Encoded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The label (display) name and label id.
  /// </summary>
  public sealed partial class LabelMapItem : pb::IMessage<LabelMapItem> {
    private static readonly pb::MessageParser<LabelMapItem> _parser = new pb::MessageParser<LabelMapItem>(() => new LabelMapItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelMapItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMapItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMapItem(LabelMapItem other) : this() {
      name_ = other.name_;
      label_ = other.label_;
      displayName_ = other.displayName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMapItem Clone() {
      return new LabelMapItem(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Both name and label are .
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private int label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    /// <summary>
    /// display_name is optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelMapItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelMapItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Label != other.Label) return false;
      if (DisplayName != other.DisplayName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Label != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Label);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelMapItem other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Label = input.ReadInt32();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabelMap : pb::IMessage<LabelMap> {
    private static readonly pb::MessageParser<LabelMap> _parser = new pb::MessageParser<LabelMap>(() => new LabelMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMap(LabelMap other) : this() {
      item_ = other.item_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMap Clone() {
      return new LabelMap(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.LabelMapItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Inference.LabelMapItem.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.LabelMapItem> item_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.LabelMapItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.LabelMapItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelMap other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sample a bbox in the normalized space  with provided constraints.
  /// </summary>
  public sealed partial class Sampler : pb::IMessage<Sampler> {
    private static readonly pb::MessageParser<Sampler> _parser = new pb::MessageParser<Sampler>(() => new Sampler());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sampler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler(Sampler other) : this() {
      minScale_ = other.minScale_;
      maxScale_ = other.maxScale_;
      minAspectRatio_ = other.minAspectRatio_;
      maxAspectRatio_ = other.maxAspectRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler Clone() {
      return new Sampler(this);
    }

    /// <summary>Field number for the "min_scale" field.</summary>
    public const int MinScaleFieldNumber = 1;
    private float minScale_;
    /// <summary>
    /// Minimum scale of the sampled bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinScale {
      get { return minScale_; }
      set {
        minScale_ = value;
      }
    }

    /// <summary>Field number for the "max_scale" field.</summary>
    public const int MaxScaleFieldNumber = 2;
    private float maxScale_;
    /// <summary>
    /// Maximum scale of the sampled bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxScale {
      get { return maxScale_; }
      set {
        maxScale_ = value;
      }
    }

    /// <summary>Field number for the "min_aspect_ratio" field.</summary>
    public const int MinAspectRatioFieldNumber = 3;
    private float minAspectRatio_;
    /// <summary>
    /// Minimum aspect ratio of the sampled bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinAspectRatio {
      get { return minAspectRatio_; }
      set {
        minAspectRatio_ = value;
      }
    }

    /// <summary>Field number for the "max_aspect_ratio" field.</summary>
    public const int MaxAspectRatioFieldNumber = 4;
    private float maxAspectRatio_;
    /// <summary>
    /// Maximum aspect ratio of the sampled bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxAspectRatio {
      get { return maxAspectRatio_; }
      set {
        maxAspectRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sampler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sampler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinScale != other.MinScale) return false;
      if (MaxScale != other.MaxScale) return false;
      if (MinAspectRatio != other.MinAspectRatio) return false;
      if (MaxAspectRatio != other.MaxAspectRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinScale != 0F) hash ^= MinScale.GetHashCode();
      if (MaxScale != 0F) hash ^= MaxScale.GetHashCode();
      if (MinAspectRatio != 0F) hash ^= MinAspectRatio.GetHashCode();
      if (MaxAspectRatio != 0F) hash ^= MaxAspectRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinScale != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MinScale);
      }
      if (MaxScale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxScale);
      }
      if (MinAspectRatio != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MinAspectRatio);
      }
      if (MaxAspectRatio != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxAspectRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinScale != 0F) {
        size += 1 + 4;
      }
      if (MaxScale != 0F) {
        size += 1 + 4;
      }
      if (MinAspectRatio != 0F) {
        size += 1 + 4;
      }
      if (MaxAspectRatio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sampler other) {
      if (other == null) {
        return;
      }
      if (other.MinScale != 0F) {
        MinScale = other.MinScale;
      }
      if (other.MaxScale != 0F) {
        MaxScale = other.MaxScale;
      }
      if (other.MinAspectRatio != 0F) {
        MinAspectRatio = other.MinAspectRatio;
      }
      if (other.MaxAspectRatio != 0F) {
        MaxAspectRatio = other.MaxAspectRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MinScale = input.ReadFloat();
            break;
          }
          case 21: {
            MaxScale = input.ReadFloat();
            break;
          }
          case 29: {
            MinAspectRatio = input.ReadFloat();
            break;
          }
          case 37: {
            MaxAspectRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Constraints for selecting sampled bbox.
  /// </summary>
  public sealed partial class SampleConstraint : pb::IMessage<SampleConstraint> {
    private static readonly pb::MessageParser<SampleConstraint> _parser = new pb::MessageParser<SampleConstraint>(() => new SampleConstraint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SampleConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleConstraint(SampleConstraint other) : this() {
      minJaccardOverlap_ = other.minJaccardOverlap_;
      maxJaccardOverlap_ = other.maxJaccardOverlap_;
      minSampleCoverage_ = other.minSampleCoverage_;
      maxSampleCoverage_ = other.maxSampleCoverage_;
      minObjectCoverage_ = other.minObjectCoverage_;
      maxObjectCoverage_ = other.maxObjectCoverage_;
      balanceType_ = other.balanceType_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleConstraint Clone() {
      return new SampleConstraint(this);
    }

    /// <summary>Field number for the "min_jaccard_overlap" field.</summary>
    public const int MinJaccardOverlapFieldNumber = 1;
    private float minJaccardOverlap_;
    /// <summary>
    /// Minimum Jaccard overlap between sampled bbox and all bboxes in
    /// AnnotationGroup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinJaccardOverlap {
      get { return minJaccardOverlap_; }
      set {
        minJaccardOverlap_ = value;
      }
    }

    /// <summary>Field number for the "max_jaccard_overlap" field.</summary>
    public const int MaxJaccardOverlapFieldNumber = 2;
    private float maxJaccardOverlap_;
    /// <summary>
    /// Maximum Jaccard overlap between sampled bbox and all bboxes in
    /// AnnotationGroup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxJaccardOverlap {
      get { return maxJaccardOverlap_; }
      set {
        maxJaccardOverlap_ = value;
      }
    }

    /// <summary>Field number for the "min_sample_coverage" field.</summary>
    public const int MinSampleCoverageFieldNumber = 3;
    private float minSampleCoverage_;
    /// <summary>
    /// Minimum coverage of sampled bbox by all bboxes in AnnotationGroup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinSampleCoverage {
      get { return minSampleCoverage_; }
      set {
        minSampleCoverage_ = value;
      }
    }

    /// <summary>Field number for the "max_sample_coverage" field.</summary>
    public const int MaxSampleCoverageFieldNumber = 4;
    private float maxSampleCoverage_;
    /// <summary>
    /// Maximum coverage of sampled bbox by all bboxes in AnnotationGroup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSampleCoverage {
      get { return maxSampleCoverage_; }
      set {
        maxSampleCoverage_ = value;
      }
    }

    /// <summary>Field number for the "min_object_coverage" field.</summary>
    public const int MinObjectCoverageFieldNumber = 5;
    private float minObjectCoverage_;
    /// <summary>
    /// Minimum coverage of all bboxes in AnnotationGroup by sampled bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinObjectCoverage {
      get { return minObjectCoverage_; }
      set {
        minObjectCoverage_ = value;
      }
    }

    /// <summary>Field number for the "max_object_coverage" field.</summary>
    public const int MaxObjectCoverageFieldNumber = 6;
    private float maxObjectCoverage_;
    /// <summary>
    /// Maximum coverage of all bboxes in AnnotationGroup by sampled bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxObjectCoverage {
      get { return maxObjectCoverage_; }
      set {
        maxObjectCoverage_ = value;
      }
    }

    /// <summary>Field number for the "balance_type" field.</summary>
    public const int BalanceTypeFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_balanceType_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> balanceType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BalanceType {
      get { return balanceType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SampleConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SampleConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinJaccardOverlap != other.MinJaccardOverlap) return false;
      if (MaxJaccardOverlap != other.MaxJaccardOverlap) return false;
      if (MinSampleCoverage != other.MinSampleCoverage) return false;
      if (MaxSampleCoverage != other.MaxSampleCoverage) return false;
      if (MinObjectCoverage != other.MinObjectCoverage) return false;
      if (MaxObjectCoverage != other.MaxObjectCoverage) return false;
      if(!balanceType_.Equals(other.balanceType_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinJaccardOverlap != 0F) hash ^= MinJaccardOverlap.GetHashCode();
      if (MaxJaccardOverlap != 0F) hash ^= MaxJaccardOverlap.GetHashCode();
      if (MinSampleCoverage != 0F) hash ^= MinSampleCoverage.GetHashCode();
      if (MaxSampleCoverage != 0F) hash ^= MaxSampleCoverage.GetHashCode();
      if (MinObjectCoverage != 0F) hash ^= MinObjectCoverage.GetHashCode();
      if (MaxObjectCoverage != 0F) hash ^= MaxObjectCoverage.GetHashCode();
      hash ^= balanceType_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinJaccardOverlap != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MinJaccardOverlap);
      }
      if (MaxJaccardOverlap != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxJaccardOverlap);
      }
      if (MinSampleCoverage != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MinSampleCoverage);
      }
      if (MaxSampleCoverage != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxSampleCoverage);
      }
      if (MinObjectCoverage != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MinObjectCoverage);
      }
      if (MaxObjectCoverage != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MaxObjectCoverage);
      }
      balanceType_.WriteTo(output, _repeated_balanceType_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinJaccardOverlap != 0F) {
        size += 1 + 4;
      }
      if (MaxJaccardOverlap != 0F) {
        size += 1 + 4;
      }
      if (MinSampleCoverage != 0F) {
        size += 1 + 4;
      }
      if (MaxSampleCoverage != 0F) {
        size += 1 + 4;
      }
      if (MinObjectCoverage != 0F) {
        size += 1 + 4;
      }
      if (MaxObjectCoverage != 0F) {
        size += 1 + 4;
      }
      size += balanceType_.CalculateSize(_repeated_balanceType_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SampleConstraint other) {
      if (other == null) {
        return;
      }
      if (other.MinJaccardOverlap != 0F) {
        MinJaccardOverlap = other.MinJaccardOverlap;
      }
      if (other.MaxJaccardOverlap != 0F) {
        MaxJaccardOverlap = other.MaxJaccardOverlap;
      }
      if (other.MinSampleCoverage != 0F) {
        MinSampleCoverage = other.MinSampleCoverage;
      }
      if (other.MaxSampleCoverage != 0F) {
        MaxSampleCoverage = other.MaxSampleCoverage;
      }
      if (other.MinObjectCoverage != 0F) {
        MinObjectCoverage = other.MinObjectCoverage;
      }
      if (other.MaxObjectCoverage != 0F) {
        MaxObjectCoverage = other.MaxObjectCoverage;
      }
      balanceType_.Add(other.balanceType_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MinJaccardOverlap = input.ReadFloat();
            break;
          }
          case 21: {
            MaxJaccardOverlap = input.ReadFloat();
            break;
          }
          case 29: {
            MinSampleCoverage = input.ReadFloat();
            break;
          }
          case 37: {
            MaxSampleCoverage = input.ReadFloat();
            break;
          }
          case 45: {
            MinObjectCoverage = input.ReadFloat();
            break;
          }
          case 53: {
            MaxObjectCoverage = input.ReadFloat();
            break;
          }
          case 58:
          case 56: {
            balanceType_.AddEntriesFrom(input, _repeated_balanceType_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sample a batch of bboxes with provided constraints.
  /// </summary>
  public sealed partial class BatchSampler : pb::IMessage<BatchSampler> {
    private static readonly pb::MessageParser<BatchSampler> _parser = new pb::MessageParser<BatchSampler>(() => new BatchSampler());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchSampler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSampler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSampler(BatchSampler other) : this() {
      useOriginalImage_ = other.useOriginalImage_;
      Sampler = other.sampler_ != null ? other.Sampler.Clone() : null;
      SampleConstraint = other.sampleConstraint_ != null ? other.SampleConstraint.Clone() : null;
      maxSample_ = other.maxSample_;
      maxTrials_ = other.maxTrials_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchSampler Clone() {
      return new BatchSampler(this);
    }

    /// <summary>Field number for the "use_original_image" field.</summary>
    public const int UseOriginalImageFieldNumber = 1;
    private bool useOriginalImage_;
    /// <summary>
    /// Use original image as the source for sampling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseOriginalImage {
      get { return useOriginalImage_; }
      set {
        useOriginalImage_ = value;
      }
    }

    /// <summary>Field number for the "sampler" field.</summary>
    public const int SamplerFieldNumber = 2;
    private global::Apollo.Perception.Inference.Sampler sampler_;
    /// <summary>
    /// Constraints for sampling bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.Sampler Sampler {
      get { return sampler_; }
      set {
        sampler_ = value;
      }
    }

    /// <summary>Field number for the "sample_constraint" field.</summary>
    public const int SampleConstraintFieldNumber = 3;
    private global::Apollo.Perception.Inference.SampleConstraint sampleConstraint_;
    /// <summary>
    /// Constraints for determining if a sampled bbox is positive or negative.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SampleConstraint SampleConstraint {
      get { return sampleConstraint_; }
      set {
        sampleConstraint_ = value;
      }
    }

    /// <summary>Field number for the "max_sample" field.</summary>
    public const int MaxSampleFieldNumber = 4;
    private uint maxSample_;
    /// <summary>
    /// If provided, break when found certain number of samples satisfing the
    /// sample_constraint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSample {
      get { return maxSample_; }
      set {
        maxSample_ = value;
      }
    }

    /// <summary>Field number for the "max_trials" field.</summary>
    public const int MaxTrialsFieldNumber = 5;
    private uint maxTrials_;
    /// <summary>
    /// Maximum number of trials for sampling to avoid infinite loop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTrials {
      get { return maxTrials_; }
      set {
        maxTrials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchSampler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchSampler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseOriginalImage != other.UseOriginalImage) return false;
      if (!object.Equals(Sampler, other.Sampler)) return false;
      if (!object.Equals(SampleConstraint, other.SampleConstraint)) return false;
      if (MaxSample != other.MaxSample) return false;
      if (MaxTrials != other.MaxTrials) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseOriginalImage != false) hash ^= UseOriginalImage.GetHashCode();
      if (sampler_ != null) hash ^= Sampler.GetHashCode();
      if (sampleConstraint_ != null) hash ^= SampleConstraint.GetHashCode();
      if (MaxSample != 0) hash ^= MaxSample.GetHashCode();
      if (MaxTrials != 0) hash ^= MaxTrials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseOriginalImage != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseOriginalImage);
      }
      if (sampler_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sampler);
      }
      if (sampleConstraint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SampleConstraint);
      }
      if (MaxSample != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxSample);
      }
      if (MaxTrials != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxTrials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseOriginalImage != false) {
        size += 1 + 1;
      }
      if (sampler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sampler);
      }
      if (sampleConstraint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SampleConstraint);
      }
      if (MaxSample != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSample);
      }
      if (MaxTrials != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTrials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchSampler other) {
      if (other == null) {
        return;
      }
      if (other.UseOriginalImage != false) {
        UseOriginalImage = other.UseOriginalImage;
      }
      if (other.sampler_ != null) {
        if (sampler_ == null) {
          sampler_ = new global::Apollo.Perception.Inference.Sampler();
        }
        Sampler.MergeFrom(other.Sampler);
      }
      if (other.sampleConstraint_ != null) {
        if (sampleConstraint_ == null) {
          sampleConstraint_ = new global::Apollo.Perception.Inference.SampleConstraint();
        }
        SampleConstraint.MergeFrom(other.SampleConstraint);
      }
      if (other.MaxSample != 0) {
        MaxSample = other.MaxSample;
      }
      if (other.MaxTrials != 0) {
        MaxTrials = other.MaxTrials;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseOriginalImage = input.ReadBool();
            break;
          }
          case 18: {
            if (sampler_ == null) {
              sampler_ = new global::Apollo.Perception.Inference.Sampler();
            }
            input.ReadMessage(sampler_);
            break;
          }
          case 26: {
            if (sampleConstraint_ == null) {
              sampleConstraint_ = new global::Apollo.Perception.Inference.SampleConstraint();
            }
            input.ReadMessage(sampleConstraint_);
            break;
          }
          case 32: {
            MaxSample = input.ReadUInt32();
            break;
          }
          case 40: {
            MaxTrials = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Condition for emitting annotations.
  /// </summary>
  public sealed partial class EmitConstraint : pb::IMessage<EmitConstraint> {
    private static readonly pb::MessageParser<EmitConstraint> _parser = new pb::MessageParser<EmitConstraint>(() => new EmitConstraint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmitConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitConstraint(EmitConstraint other) : this() {
      emitType_ = other.emitType_;
      emitOverlap_ = other.emitOverlap_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitConstraint Clone() {
      return new EmitConstraint(this);
    }

    /// <summary>Field number for the "emit_type" field.</summary>
    public const int EmitTypeFieldNumber = 1;
    private global::Apollo.Perception.Inference.EmitConstraint.Types.EmitType emitType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.EmitConstraint.Types.EmitType EmitType {
      get { return emitType_; }
      set {
        emitType_ = value;
      }
    }

    /// <summary>Field number for the "emit_overlap" field.</summary>
    public const int EmitOverlapFieldNumber = 2;
    private float emitOverlap_;
    /// <summary>
    /// If emit_type is MIN_OVERLAP, provide the emit_overlap.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EmitOverlap {
      get { return emitOverlap_; }
      set {
        emitOverlap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmitConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmitConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmitType != other.EmitType) return false;
      if (EmitOverlap != other.EmitOverlap) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmitType != 0) hash ^= EmitType.GetHashCode();
      if (EmitOverlap != 0F) hash ^= EmitOverlap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmitType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EmitType);
      }
      if (EmitOverlap != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(EmitOverlap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EmitType);
      }
      if (EmitOverlap != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmitConstraint other) {
      if (other == null) {
        return;
      }
      if (other.EmitType != 0) {
        EmitType = other.EmitType;
      }
      if (other.EmitOverlap != 0F) {
        EmitOverlap = other.EmitOverlap;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            emitType_ = (global::Apollo.Perception.Inference.EmitConstraint.Types.EmitType) input.ReadEnum();
            break;
          }
          case 21: {
            EmitOverlap = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EmitConstraint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EmitType {
        [pbr::OriginalName("CENTER")] Center = 0,
        [pbr::OriginalName("MIN_OVERLAP")] MinOverlap = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// The normalized bounding box  w.r.t. the input image size.
  /// </summary>
  public sealed partial class NormalizedBBox : pb::IMessage<NormalizedBBox> {
    private static readonly pb::MessageParser<NormalizedBBox> _parser = new pb::MessageParser<NormalizedBBox>(() => new NormalizedBBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NormalizedBBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizedBBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizedBBox(NormalizedBBox other) : this() {
      xmin_ = other.xmin_;
      ymin_ = other.ymin_;
      xmax_ = other.xmax_;
      ymax_ = other.ymax_;
      label_ = other.label_;
      difficult_ = other.difficult_;
      score_ = other.score_;
      size_ = other.size_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizedBBox Clone() {
      return new NormalizedBBox(this);
    }

    /// <summary>Field number for the "xmin" field.</summary>
    public const int XminFieldNumber = 1;
    private float xmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xmin {
      get { return xmin_; }
      set {
        xmin_ = value;
      }
    }

    /// <summary>Field number for the "ymin" field.</summary>
    public const int YminFieldNumber = 2;
    private float ymin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ymin {
      get { return ymin_; }
      set {
        ymin_ = value;
      }
    }

    /// <summary>Field number for the "xmax" field.</summary>
    public const int XmaxFieldNumber = 3;
    private float xmax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xmax {
      get { return xmax_; }
      set {
        xmax_ = value;
      }
    }

    /// <summary>Field number for the "ymax" field.</summary>
    public const int YmaxFieldNumber = 4;
    private float ymax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ymax {
      get { return ymax_; }
      set {
        ymax_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private int label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "difficult" field.</summary>
    public const int DifficultFieldNumber = 6;
    private bool difficult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Difficult {
      get { return difficult_; }
      set {
        difficult_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 7;
    private float score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 8;
    private float size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NormalizedBBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NormalizedBBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Xmin != other.Xmin) return false;
      if (Ymin != other.Ymin) return false;
      if (Xmax != other.Xmax) return false;
      if (Ymax != other.Ymax) return false;
      if (Label != other.Label) return false;
      if (Difficult != other.Difficult) return false;
      if (Score != other.Score) return false;
      if (Size != other.Size) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Xmin != 0F) hash ^= Xmin.GetHashCode();
      if (Ymin != 0F) hash ^= Ymin.GetHashCode();
      if (Xmax != 0F) hash ^= Xmax.GetHashCode();
      if (Ymax != 0F) hash ^= Ymax.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (Difficult != false) hash ^= Difficult.GetHashCode();
      if (Score != 0F) hash ^= Score.GetHashCode();
      if (Size != 0F) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Xmin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Xmin);
      }
      if (Ymin != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Ymin);
      }
      if (Xmax != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Xmax);
      }
      if (Ymax != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Ymax);
      }
      if (Label != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Label);
      }
      if (Difficult != false) {
        output.WriteRawTag(48);
        output.WriteBool(Difficult);
      }
      if (Score != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Score);
      }
      if (Size != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Xmin != 0F) {
        size += 1 + 4;
      }
      if (Ymin != 0F) {
        size += 1 + 4;
      }
      if (Xmax != 0F) {
        size += 1 + 4;
      }
      if (Ymax != 0F) {
        size += 1 + 4;
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (Difficult != false) {
        size += 1 + 1;
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (Size != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NormalizedBBox other) {
      if (other == null) {
        return;
      }
      if (other.Xmin != 0F) {
        Xmin = other.Xmin;
      }
      if (other.Ymin != 0F) {
        Ymin = other.Ymin;
      }
      if (other.Xmax != 0F) {
        Xmax = other.Xmax;
      }
      if (other.Ymax != 0F) {
        Ymax = other.Ymax;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.Difficult != false) {
        Difficult = other.Difficult;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.Size != 0F) {
        Size = other.Size;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Xmin = input.ReadFloat();
            break;
          }
          case 21: {
            Ymin = input.ReadFloat();
            break;
          }
          case 29: {
            Xmax = input.ReadFloat();
            break;
          }
          case 37: {
            Ymax = input.ReadFloat();
            break;
          }
          case 40: {
            Label = input.ReadInt32();
            break;
          }
          case 48: {
            Difficult = input.ReadBool();
            break;
          }
          case 61: {
            Score = input.ReadFloat();
            break;
          }
          case 69: {
            Size = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The normalized bounding box  w.r.t. the input image size.
  /// </summary>
  public sealed partial class BBox3D : pb::IMessage<BBox3D> {
    private static readonly pb::MessageParser<BBox3D> _parser = new pb::MessageParser<BBox3D>(() => new BBox3D());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BBox3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBox3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBox3D(BBox3D other) : this() {
      h_ = other.h_;
      w_ = other.w_;
      l_ = other.l_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      alpha_ = other.alpha_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBox3D Clone() {
      return new BBox3D(this);
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 1;
    private float h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 2;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 3;
    private float l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 6;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 7;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BBox3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BBox3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (H != other.H) return false;
      if (W != other.W) return false;
      if (L != other.L) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Alpha != other.Alpha) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (H != 0F) hash ^= H.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      if (L != 0F) hash ^= L.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Alpha != 0F) hash ^= Alpha.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (H != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(H);
      }
      if (W != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(W);
      }
      if (L != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(L);
      }
      if (X != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Z);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Alpha);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (H != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (L != 0F) {
        size += 1 + 4;
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BBox3D other) {
      if (other == null) {
        return;
      }
      if (other.H != 0F) {
        H = other.H;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      if (other.L != 0F) {
        L = other.L;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            H = input.ReadFloat();
            break;
          }
          case 21: {
            W = input.ReadFloat();
            break;
          }
          case 29: {
            L = input.ReadFloat();
            break;
          }
          case 37: {
            X = input.ReadFloat();
            break;
          }
          case 45: {
            Y = input.ReadFloat();
            break;
          }
          case 53: {
            Z = input.ReadFloat();
            break;
          }
          case 61: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Annotation for each object instance.
  /// </summary>
  public sealed partial class Annotation : pb::IMessage<Annotation> {
    private static readonly pb::MessageParser<Annotation> _parser = new pb::MessageParser<Annotation>(() => new Annotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Annotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation(Annotation other) : this() {
      instanceId_ = other.instanceId_;
      Bbox = other.bbox_ != null ? other.Bbox.Clone() : null;
      Bbox3D = other.bbox3D_ != null ? other.Bbox3D.Clone() : null;
      FrontBbox = other.frontBbox_ != null ? other.FrontBbox.Clone() : null;
      RearBbox = other.rearBbox_ != null ? other.RearBbox.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation Clone() {
      return new Annotation(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 2;
    private global::Apollo.Perception.Inference.NormalizedBBox bbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NormalizedBBox Bbox {
      get { return bbox_; }
      set {
        bbox_ = value;
      }
    }

    /// <summary>Field number for the "bbox3d" field.</summary>
    public const int Bbox3DFieldNumber = 3;
    private global::Apollo.Perception.Inference.BBox3D bbox3D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.BBox3D Bbox3D {
      get { return bbox3D_; }
      set {
        bbox3D_ = value;
      }
    }

    /// <summary>Field number for the "front_bbox" field.</summary>
    public const int FrontBboxFieldNumber = 4;
    private global::Apollo.Perception.Inference.NormalizedBBox frontBbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NormalizedBBox FrontBbox {
      get { return frontBbox_; }
      set {
        frontBbox_ = value;
      }
    }

    /// <summary>Field number for the "rear_bbox" field.</summary>
    public const int RearBboxFieldNumber = 5;
    private global::Apollo.Perception.Inference.NormalizedBBox rearBbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NormalizedBBox RearBbox {
      get { return rearBbox_; }
      set {
        rearBbox_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Annotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Annotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (!object.Equals(Bbox3D, other.Bbox3D)) return false;
      if (!object.Equals(FrontBbox, other.FrontBbox)) return false;
      if (!object.Equals(RearBbox, other.RearBbox)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (bbox_ != null) hash ^= Bbox.GetHashCode();
      if (bbox3D_ != null) hash ^= Bbox3D.GetHashCode();
      if (frontBbox_ != null) hash ^= FrontBbox.GetHashCode();
      if (rearBbox_ != null) hash ^= RearBbox.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (bbox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbox);
      }
      if (bbox3D_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bbox3D);
      }
      if (frontBbox_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FrontBbox);
      }
      if (rearBbox_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RearBbox);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (bbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (bbox3D_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox3D);
      }
      if (frontBbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrontBbox);
      }
      if (rearBbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RearBbox);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Annotation other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.bbox_ != null) {
        if (bbox_ == null) {
          bbox_ = new global::Apollo.Perception.Inference.NormalizedBBox();
        }
        Bbox.MergeFrom(other.Bbox);
      }
      if (other.bbox3D_ != null) {
        if (bbox3D_ == null) {
          bbox3D_ = new global::Apollo.Perception.Inference.BBox3D();
        }
        Bbox3D.MergeFrom(other.Bbox3D);
      }
      if (other.frontBbox_ != null) {
        if (frontBbox_ == null) {
          frontBbox_ = new global::Apollo.Perception.Inference.NormalizedBBox();
        }
        FrontBbox.MergeFrom(other.FrontBbox);
      }
      if (other.rearBbox_ != null) {
        if (rearBbox_ == null) {
          rearBbox_ = new global::Apollo.Perception.Inference.NormalizedBBox();
        }
        RearBbox.MergeFrom(other.RearBbox);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 18: {
            if (bbox_ == null) {
              bbox_ = new global::Apollo.Perception.Inference.NormalizedBBox();
            }
            input.ReadMessage(bbox_);
            break;
          }
          case 26: {
            if (bbox3D_ == null) {
              bbox3D_ = new global::Apollo.Perception.Inference.BBox3D();
            }
            input.ReadMessage(bbox3D_);
            break;
          }
          case 34: {
            if (frontBbox_ == null) {
              frontBbox_ = new global::Apollo.Perception.Inference.NormalizedBBox();
            }
            input.ReadMessage(frontBbox_);
            break;
          }
          case 42: {
            if (rearBbox_ == null) {
              rearBbox_ = new global::Apollo.Perception.Inference.NormalizedBBox();
            }
            input.ReadMessage(rearBbox_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Group of annotations for a particular label.
  /// </summary>
  public sealed partial class AnnotationGroup : pb::IMessage<AnnotationGroup> {
    private static readonly pb::MessageParser<AnnotationGroup> _parser = new pb::MessageParser<AnnotationGroup>(() => new AnnotationGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotationGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationGroup(AnnotationGroup other) : this() {
      groupLabel_ = other.groupLabel_;
      annotation_ = other.annotation_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationGroup Clone() {
      return new AnnotationGroup(this);
    }

    /// <summary>Field number for the "group_label" field.</summary>
    public const int GroupLabelFieldNumber = 1;
    private int groupLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupLabel {
      get { return groupLabel_; }
      set {
        groupLabel_ = value;
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.Annotation> _repeated_annotation_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Perception.Inference.Annotation.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.Annotation> annotation_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.Annotation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.Annotation> Annotation {
      get { return annotation_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotationGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotationGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupLabel != other.GroupLabel) return false;
      if(!annotation_.Equals(other.annotation_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupLabel != 0) hash ^= GroupLabel.GetHashCode();
      hash ^= annotation_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupLabel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GroupLabel);
      }
      annotation_.WriteTo(output, _repeated_annotation_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupLabel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupLabel);
      }
      size += annotation_.CalculateSize(_repeated_annotation_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotationGroup other) {
      if (other == null) {
        return;
      }
      if (other.GroupLabel != 0) {
        GroupLabel = other.GroupLabel;
      }
      annotation_.Add(other.annotation_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupLabel = input.ReadInt32();
            break;
          }
          case 18: {
            annotation_.AddEntriesFrom(input, _repeated_annotation_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An extension of Datum which contains "rich" annotations.
  /// </summary>
  public sealed partial class AnnotatedDatum : pb::IMessage<AnnotatedDatum> {
    private static readonly pb::MessageParser<AnnotatedDatum> _parser = new pb::MessageParser<AnnotatedDatum>(() => new AnnotatedDatum());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotatedDatum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedDatum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedDatum(AnnotatedDatum other) : this() {
      Datum = other.datum_ != null ? other.Datum.Clone() : null;
      type_ = other.type_;
      annotationGroup_ = other.annotationGroup_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedDatum Clone() {
      return new AnnotatedDatum(this);
    }

    /// <summary>Field number for the "datum" field.</summary>
    public const int DatumFieldNumber = 1;
    private global::Apollo.Perception.Inference.Datum datum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.Datum Datum {
      get { return datum_; }
      set {
        datum_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Apollo.Perception.Inference.AnnotatedDatum.Types.AnnotationType type_ = 0;
    /// <summary>
    /// If there are "rich" annotations, specify the type of annotation.
    /// Currently it only supports bounding box.
    /// If there are no "rich" annotations, use label in datum instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.AnnotatedDatum.Types.AnnotationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "annotation_group" field.</summary>
    public const int AnnotationGroupFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.AnnotationGroup> _repeated_annotationGroup_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Perception.Inference.AnnotationGroup.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.AnnotationGroup> annotationGroup_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.AnnotationGroup>();
    /// <summary>
    /// Each group contains annotation for a particular class.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.AnnotationGroup> AnnotationGroup {
      get { return annotationGroup_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotatedDatum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotatedDatum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Datum, other.Datum)) return false;
      if (Type != other.Type) return false;
      if(!annotationGroup_.Equals(other.annotationGroup_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (datum_ != null) hash ^= Datum.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= annotationGroup_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (datum_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Datum);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      annotationGroup_.WriteTo(output, _repeated_annotationGroup_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (datum_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datum);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += annotationGroup_.CalculateSize(_repeated_annotationGroup_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotatedDatum other) {
      if (other == null) {
        return;
      }
      if (other.datum_ != null) {
        if (datum_ == null) {
          datum_ = new global::Apollo.Perception.Inference.Datum();
        }
        Datum.MergeFrom(other.Datum);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      annotationGroup_.Add(other.annotationGroup_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (datum_ == null) {
              datum_ = new global::Apollo.Perception.Inference.Datum();
            }
            input.ReadMessage(datum_);
            break;
          }
          case 16: {
            type_ = (global::Apollo.Perception.Inference.AnnotatedDatum.Types.AnnotationType) input.ReadEnum();
            break;
          }
          case 26: {
            annotationGroup_.AddEntriesFrom(input, _repeated_annotationGroup_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnnotatedDatum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AnnotationType {
        /// <summary>
        /// normal 2D bbox
        /// </summary>
        [pbr::OriginalName("BBOX")] Bbox = 0,
        /// <summary>
        /// BBOX with 3D info
        /// </summary>
        [pbr::OriginalName("BBOX3D")] Bbox3D = 1,
        /// <summary>
        /// BBOX3D with front &amp; rear 2D bbox
        /// </summary>
        [pbr::OriginalName("BBOX3DFR")] Bbox3Dfr = 2,
      }

    }
    #endregion

  }

  public sealed partial class FillerParameter : pb::IMessage<FillerParameter> {
    private static readonly pb::MessageParser<FillerParameter> _parser = new pb::MessageParser<FillerParameter>(() => new FillerParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FillerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillerParameter(FillerParameter other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      min_ = other.min_;
      max_ = other.max_;
      mean_ = other.mean_;
      std_ = other.std_;
      sparse_ = other.sparse_;
      varianceNorm_ = other.varianceNorm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillerParameter Clone() {
      return new FillerParameter(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// The filler type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    /// <summary>
    /// the value in constant filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 3;
    private float min_;
    /// <summary>
    /// the min value in uniform filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 4;
    private float max_;
    /// <summary>
    /// the max value in uniform filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 5;
    private float mean_;
    /// <summary>
    /// the mean value in Gaussian filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mean {
      get { return mean_; }
      set {
        mean_ = value;
      }
    }

    /// <summary>Field number for the "std" field.</summary>
    public const int StdFieldNumber = 6;
    private float std_;
    /// <summary>
    /// the std value in Gaussian filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Std {
      get { return std_; }
      set {
        std_ = value;
      }
    }

    /// <summary>Field number for the "sparse" field.</summary>
    public const int SparseFieldNumber = 7;
    private int sparse_;
    /// <summary>
    /// The expected number of non-zero output weights for a given input in
    /// Gaussian filler -- the default -1 means don't perform sparsification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sparse {
      get { return sparse_; }
      set {
        sparse_ = value;
      }
    }

    /// <summary>Field number for the "variance_norm" field.</summary>
    public const int VarianceNormFieldNumber = 8;
    private global::Apollo.Perception.Inference.FillerParameter.Types.VarianceNorm varianceNorm_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter.Types.VarianceNorm VarianceNorm {
      get { return varianceNorm_; }
      set {
        varianceNorm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FillerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FillerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (Mean != other.Mean) return false;
      if (Std != other.Std) return false;
      if (Sparse != other.Sparse) return false;
      if (VarianceNorm != other.VarianceNorm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      if (Min != 0F) hash ^= Min.GetHashCode();
      if (Max != 0F) hash ^= Max.GetHashCode();
      if (Mean != 0F) hash ^= Mean.GetHashCode();
      if (Std != 0F) hash ^= Std.GetHashCode();
      if (Sparse != 0) hash ^= Sparse.GetHashCode();
      if (VarianceNorm != 0) hash ^= VarianceNorm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (Min != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Max);
      }
      if (Mean != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Mean);
      }
      if (Std != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Std);
      }
      if (Sparse != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Sparse);
      }
      if (VarianceNorm != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) VarianceNorm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (Min != 0F) {
        size += 1 + 4;
      }
      if (Max != 0F) {
        size += 1 + 4;
      }
      if (Mean != 0F) {
        size += 1 + 4;
      }
      if (Std != 0F) {
        size += 1 + 4;
      }
      if (Sparse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sparse);
      }
      if (VarianceNorm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarianceNorm);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FillerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      if (other.Mean != 0F) {
        Mean = other.Mean;
      }
      if (other.Std != 0F) {
        Std = other.Std;
      }
      if (other.Sparse != 0) {
        Sparse = other.Sparse;
      }
      if (other.VarianceNorm != 0) {
        VarianceNorm = other.VarianceNorm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 29: {
            Min = input.ReadFloat();
            break;
          }
          case 37: {
            Max = input.ReadFloat();
            break;
          }
          case 45: {
            Mean = input.ReadFloat();
            break;
          }
          case 53: {
            Std = input.ReadFloat();
            break;
          }
          case 56: {
            Sparse = input.ReadInt32();
            break;
          }
          case 64: {
            varianceNorm_ = (global::Apollo.Perception.Inference.FillerParameter.Types.VarianceNorm) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FillerParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Normalize the filler variance by fan_in, fan_out, or their average.
      /// Applies to 'xavier' and 'msra' fillers.
      /// </summary>
      public enum VarianceNorm {
        [pbr::OriginalName("FAN_IN")] FanIn = 0,
        [pbr::OriginalName("FAN_OUT")] FanOut = 1,
        [pbr::OriginalName("AVERAGE")] Average = 2,
      }

    }
    #endregion

  }

  public sealed partial class NetParameter : pb::IMessage<NetParameter> {
    private static readonly pb::MessageParser<NetParameter> _parser = new pb::MessageParser<NetParameter>(() => new NetParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetParameter(NetParameter other) : this() {
      name_ = other.name_;
      input_ = other.input_.Clone();
      inputShape_ = other.inputShape_.Clone();
      inputDim_ = other.inputDim_.Clone();
      forceBackward_ = other.forceBackward_;
      State = other.state_ != null ? other.State.Clone() : null;
      debugInfo_ = other.debugInfo_;
      layer_ = other.layer_.Clone();
      layers_ = other.layers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetParameter Clone() {
      return new NetParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// consider giving the network a name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_input_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> input_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// DEPRECATED. See InputParameter. The input blobs to the network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Input {
      get { return input_; }
    }

    /// <summary>Field number for the "input_shape" field.</summary>
    public const int InputShapeFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobShape> _repeated_inputShape_codec
        = pb::FieldCodec.ForMessage(66, global::Apollo.Perception.Inference.BlobShape.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape> inputShape_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape>();
    /// <summary>
    /// DEPRECATED. See InputParameter. The shape of the input blobs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape> InputShape {
      get { return inputShape_; }
    }

    /// <summary>Field number for the "input_dim" field.</summary>
    public const int InputDimFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_inputDim_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> inputDim_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 4D input dimensions -- deprecated.  Use "input_shape" instead.
    /// If specified, for each input blob there should be four
    /// values specifying the num, channels, height and width of the input blob.
    /// Thus, there should be a total of (4 * #input) numbers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InputDim {
      get { return inputDim_; }
    }

    /// <summary>Field number for the "force_backward" field.</summary>
    public const int ForceBackwardFieldNumber = 5;
    private bool forceBackward_;
    /// <summary>
    /// Whether the network will force every layer to carry out backward operation.
    /// If set False, then whether to carry out backward is determined
    /// automatically according to the net structure and learning rates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceBackward {
      get { return forceBackward_; }
      set {
        forceBackward_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Apollo.Perception.Inference.NetState state_;
    /// <summary>
    /// The current "state" of the network, including the phase, level, and stage.
    /// Some layers may be included/excluded depending on this state and the states
    /// specified in the layers' include and exclude fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NetState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "debug_info" field.</summary>
    public const int DebugInfoFieldNumber = 7;
    private bool debugInfo_;
    /// <summary>
    /// Print debugging information about results while running Net::Forward,
    /// Net::Backward, and Net::Update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = value;
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.LayerParameter> _repeated_layer_codec
        = pb::FieldCodec.ForMessage(802, global::Apollo.Perception.Inference.LayerParameter.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.LayerParameter> layer_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.LayerParameter>();
    /// <summary>
    /// The layers that make up the net.  Each of their configurations, including
    /// connectivity and behavior, is specified as a LayerParameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.LayerParameter> Layer {
      get { return layer_; }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.V1LayerParameter> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Perception.Inference.V1LayerParameter.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.V1LayerParameter> layers_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.V1LayerParameter>();
    /// <summary>
    /// DEPRECATED: use 'layer' instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.V1LayerParameter> Layers {
      get { return layers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!input_.Equals(other.input_)) return false;
      if(!inputShape_.Equals(other.inputShape_)) return false;
      if(!inputDim_.Equals(other.inputDim_)) return false;
      if (ForceBackward != other.ForceBackward) return false;
      if (!object.Equals(State, other.State)) return false;
      if (DebugInfo != other.DebugInfo) return false;
      if(!layer_.Equals(other.layer_)) return false;
      if(!layers_.Equals(other.layers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= input_.GetHashCode();
      hash ^= inputShape_.GetHashCode();
      hash ^= inputDim_.GetHashCode();
      if (ForceBackward != false) hash ^= ForceBackward.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (DebugInfo != false) hash ^= DebugInfo.GetHashCode();
      hash ^= layer_.GetHashCode();
      hash ^= layers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      layers_.WriteTo(output, _repeated_layers_codec);
      input_.WriteTo(output, _repeated_input_codec);
      inputDim_.WriteTo(output, _repeated_inputDim_codec);
      if (ForceBackward != false) {
        output.WriteRawTag(40);
        output.WriteBool(ForceBackward);
      }
      if (state_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(State);
      }
      if (DebugInfo != false) {
        output.WriteRawTag(56);
        output.WriteBool(DebugInfo);
      }
      inputShape_.WriteTo(output, _repeated_inputShape_codec);
      layer_.WriteTo(output, _repeated_layer_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += input_.CalculateSize(_repeated_input_codec);
      size += inputShape_.CalculateSize(_repeated_inputShape_codec);
      size += inputDim_.CalculateSize(_repeated_inputDim_codec);
      if (ForceBackward != false) {
        size += 1 + 1;
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (DebugInfo != false) {
        size += 1 + 1;
      }
      size += layer_.CalculateSize(_repeated_layer_codec);
      size += layers_.CalculateSize(_repeated_layers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetParameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      input_.Add(other.input_);
      inputShape_.Add(other.inputShape_);
      inputDim_.Add(other.inputDim_);
      if (other.ForceBackward != false) {
        ForceBackward = other.ForceBackward;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Apollo.Perception.Inference.NetState();
        }
        State.MergeFrom(other.State);
      }
      if (other.DebugInfo != false) {
        DebugInfo = other.DebugInfo;
      }
      layer_.Add(other.layer_);
      layers_.Add(other.layers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 26: {
            input_.AddEntriesFrom(input, _repeated_input_codec);
            break;
          }
          case 34:
          case 32: {
            inputDim_.AddEntriesFrom(input, _repeated_inputDim_codec);
            break;
          }
          case 40: {
            ForceBackward = input.ReadBool();
            break;
          }
          case 50: {
            if (state_ == null) {
              state_ = new global::Apollo.Perception.Inference.NetState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 56: {
            DebugInfo = input.ReadBool();
            break;
          }
          case 66: {
            inputShape_.AddEntriesFrom(input, _repeated_inputShape_codec);
            break;
          }
          case 802: {
            layer_.AddEntriesFrom(input, _repeated_layer_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NOTE
  /// Update the next available ID when you add a new SolverParameter field.
  ///
  /// SolverParameter next available ID: 44 (last added: plateau_winsize)
  /// </summary>
  public sealed partial class SolverParameter : pb::IMessage<SolverParameter> {
    private static readonly pb::MessageParser<SolverParameter> _parser = new pb::MessageParser<SolverParameter>(() => new SolverParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolverParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverParameter(SolverParameter other) : this() {
      net_ = other.net_;
      NetParam = other.netParam_ != null ? other.NetParam.Clone() : null;
      trainNet_ = other.trainNet_;
      testNet_ = other.testNet_.Clone();
      TrainNetParam = other.trainNetParam_ != null ? other.TrainNetParam.Clone() : null;
      testNetParam_ = other.testNetParam_.Clone();
      TrainState = other.trainState_ != null ? other.TrainState.Clone() : null;
      testState_ = other.testState_.Clone();
      evalType_ = other.evalType_;
      apVersion_ = other.apVersion_;
      showPerClassResult_ = other.showPerClassResult_;
      testIter_ = other.testIter_.Clone();
      testInterval_ = other.testInterval_;
      testComputeLoss_ = other.testComputeLoss_;
      testInitialization_ = other.testInitialization_;
      baseLr_ = other.baseLr_;
      display_ = other.display_;
      averageLoss_ = other.averageLoss_;
      maxIter_ = other.maxIter_;
      iterSize_ = other.iterSize_;
      lrPolicy_ = other.lrPolicy_;
      gamma_ = other.gamma_;
      power_ = other.power_;
      momentum_ = other.momentum_;
      weightDecay_ = other.weightDecay_;
      regularizationType_ = other.regularizationType_;
      stepsize_ = other.stepsize_;
      stepvalue_ = other.stepvalue_.Clone();
      plateauWinsize_ = other.plateauWinsize_.Clone();
      clipGradients_ = other.clipGradients_;
      snapshot_ = other.snapshot_;
      snapshotPrefix_ = other.snapshotPrefix_;
      snapshotDiff_ = other.snapshotDiff_;
      snapshotFormat_ = other.snapshotFormat_;
      solverMode_ = other.solverMode_;
      deviceId_ = other.deviceId_;
      randomSeed_ = other.randomSeed_;
      type_ = other.type_;
      delta_ = other.delta_;
      momentum2_ = other.momentum2_;
      rmsDecay_ = other.rmsDecay_;
      debugInfo_ = other.debugInfo_;
      snapshotAfterTrain_ = other.snapshotAfterTrain_;
      solverType_ = other.solverType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverParameter Clone() {
      return new SolverParameter(this);
    }

    /// <summary>Field number for the "net" field.</summary>
    public const int NetFieldNumber = 24;
    private string net_ = "";
    /// <summary>
    /// Proto filename for the train net, possibly combined with one or more
    /// test nets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Net {
      get { return net_; }
      set {
        net_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "net_param" field.</summary>
    public const int NetParamFieldNumber = 25;
    private global::Apollo.Perception.Inference.NetParameter netParam_;
    /// <summary>
    /// Inline train net param, possibly combined with one or more test nets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NetParameter NetParam {
      get { return netParam_; }
      set {
        netParam_ = value;
      }
    }

    /// <summary>Field number for the "train_net" field.</summary>
    public const int TrainNetFieldNumber = 1;
    private string trainNet_ = "";
    /// <summary>
    /// Proto filename for the train net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrainNet {
      get { return trainNet_; }
      set {
        trainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_net" field.</summary>
    public const int TestNetFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_testNet_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> testNet_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Proto filenames for the test nets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TestNet {
      get { return testNet_; }
    }

    /// <summary>Field number for the "train_net_param" field.</summary>
    public const int TrainNetParamFieldNumber = 21;
    private global::Apollo.Perception.Inference.NetParameter trainNetParam_;
    /// <summary>
    /// Inline train net params.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NetParameter TrainNetParam {
      get { return trainNetParam_; }
      set {
        trainNetParam_ = value;
      }
    }

    /// <summary>Field number for the "test_net_param" field.</summary>
    public const int TestNetParamFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.NetParameter> _repeated_testNetParam_codec
        = pb::FieldCodec.ForMessage(178, global::Apollo.Perception.Inference.NetParameter.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.NetParameter> testNetParam_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.NetParameter>();
    /// <summary>
    /// Inline test net params.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.NetParameter> TestNetParam {
      get { return testNetParam_; }
    }

    /// <summary>Field number for the "train_state" field.</summary>
    public const int TrainStateFieldNumber = 26;
    private global::Apollo.Perception.Inference.NetState trainState_;
    /// <summary>
    /// The states for the train/test nets. Must be unspecified or
    /// specified once per net.
    ///
    /// By default, all states will have solver = true;
    /// train_state will have phase = TRAIN,
    /// and all test_state's will have phase = TEST.
    /// Other defaults are set according to the NetState defaults.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NetState TrainState {
      get { return trainState_; }
      set {
        trainState_ = value;
      }
    }

    /// <summary>Field number for the "test_state" field.</summary>
    public const int TestStateFieldNumber = 27;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.NetState> _repeated_testState_codec
        = pb::FieldCodec.ForMessage(218, global::Apollo.Perception.Inference.NetState.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.NetState> testState_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.NetState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.NetState> TestState {
      get { return testState_; }
    }

    /// <summary>Field number for the "eval_type" field.</summary>
    public const int EvalTypeFieldNumber = 41;
    private string evalType_ = "";
    /// <summary>
    /// Evaluation type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EvalType {
      get { return evalType_; }
      set {
        evalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ap_version" field.</summary>
    public const int ApVersionFieldNumber = 42;
    private string apVersion_ = "";
    /// <summary>
    /// ap_version: different ways of computing Average Precision.
    ///    Check https://sanchom.wordpress.com/tag/average-precision/ for details.
    ///    11point: the 11-point interpolated average precision. Used in VOC2007.
    ///    MaxIntegral: maximally interpolated AP. Used in VOC2012/ILSVRC.
    ///    Integral: the natural integral of the precision-recall curve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApVersion {
      get { return apVersion_; }
      set {
        apVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "show_per_class_result" field.</summary>
    public const int ShowPerClassResultFieldNumber = 44;
    private bool showPerClassResult_;
    /// <summary>
    /// If true, display per class result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowPerClassResult {
      get { return showPerClassResult_; }
      set {
        showPerClassResult_ = value;
      }
    }

    /// <summary>Field number for the "test_iter" field.</summary>
    public const int TestIterFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_testIter_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> testIter_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The number of iterations for each test net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TestIter {
      get { return testIter_; }
    }

    /// <summary>Field number for the "test_interval" field.</summary>
    public const int TestIntervalFieldNumber = 4;
    private int testInterval_;
    /// <summary>
    /// The number of iterations between two testing phases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestInterval {
      get { return testInterval_; }
      set {
        testInterval_ = value;
      }
    }

    /// <summary>Field number for the "test_compute_loss" field.</summary>
    public const int TestComputeLossFieldNumber = 19;
    private bool testComputeLoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestComputeLoss {
      get { return testComputeLoss_; }
      set {
        testComputeLoss_ = value;
      }
    }

    /// <summary>Field number for the "test_initialization" field.</summary>
    public const int TestInitializationFieldNumber = 32;
    private bool testInitialization_;
    /// <summary>
    /// If true, run an initial test pass before the first iteration,
    /// ensuring memory availability and printing the starting value of the loss.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestInitialization {
      get { return testInitialization_; }
      set {
        testInitialization_ = value;
      }
    }

    /// <summary>Field number for the "base_lr" field.</summary>
    public const int BaseLrFieldNumber = 5;
    private float baseLr_;
    /// <summary>
    /// The base learning rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseLr {
      get { return baseLr_; }
      set {
        baseLr_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 6;
    private int display_;
    /// <summary>
    /// the number of iterations between displaying info. If display = 0, no info
    /// will be displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "average_loss" field.</summary>
    public const int AverageLossFieldNumber = 33;
    private int averageLoss_;
    /// <summary>
    /// Display the loss averaged over the last average_loss iterations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AverageLoss {
      get { return averageLoss_; }
      set {
        averageLoss_ = value;
      }
    }

    /// <summary>Field number for the "max_iter" field.</summary>
    public const int MaxIterFieldNumber = 7;
    private int maxIter_;
    /// <summary>
    /// the maximum number of iterations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxIter {
      get { return maxIter_; }
      set {
        maxIter_ = value;
      }
    }

    /// <summary>Field number for the "iter_size" field.</summary>
    public const int IterSizeFieldNumber = 36;
    private int iterSize_;
    /// <summary>
    /// accumulate gradients over `iter_size` x `batch_size` instances
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IterSize {
      get { return iterSize_; }
      set {
        iterSize_ = value;
      }
    }

    /// <summary>Field number for the "lr_policy" field.</summary>
    public const int LrPolicyFieldNumber = 8;
    private string lrPolicy_ = "";
    /// <summary>
    /// The learning rate decay policy. The currently implemented learning rate
    /// policies are as follows:
    ///    - fixed: always return base_lr.
    ///    - step: return base_lr * gamma ^ (floor(iter / step))
    ///    - exp: return base_lr * gamma ^ iter
    ///    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
    ///    - multistep: similar to step but it allows non uniform steps defined by
    ///      stepvalue
    ///    - poly: the effective learning rate follows a polynomial decay, to be
    ///      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
    ///    - sigmoid: the effective learning rate follows a sigmod decay
    ///      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
    ///    - plateau: decreases lr
    ///              if the minimum loss isn't updated for 'plateau_winsize' iters
    ///
    /// where base_lr, max_iter, gamma, step, stepvalue and power are defined
    /// in the solver parameter protocol buffer, and iter is the current iteration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LrPolicy {
      get { return lrPolicy_; }
      set {
        lrPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 9;
    private float gamma_;
    /// <summary>
    /// The parameter to compute the learning rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 10;
    private float power_;
    /// <summary>
    /// The parameter to compute the learning rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "momentum" field.</summary>
    public const int MomentumFieldNumber = 11;
    private float momentum_;
    /// <summary>
    /// The momentum value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Momentum {
      get { return momentum_; }
      set {
        momentum_ = value;
      }
    }

    /// <summary>Field number for the "weight_decay" field.</summary>
    public const int WeightDecayFieldNumber = 12;
    private float weightDecay_;
    /// <summary>
    /// The weight decay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeightDecay {
      get { return weightDecay_; }
      set {
        weightDecay_ = value;
      }
    }

    /// <summary>Field number for the "regularization_type" field.</summary>
    public const int RegularizationTypeFieldNumber = 29;
    private string regularizationType_ = "";
    /// <summary>
    /// regularization types supported: L1 and L2
    /// controlled by weight_decay
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegularizationType {
      get { return regularizationType_; }
      set {
        regularizationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stepsize" field.</summary>
    public const int StepsizeFieldNumber = 13;
    private int stepsize_;
    /// <summary>
    /// the stepsize for learning rate policy "step"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stepsize {
      get { return stepsize_; }
      set {
        stepsize_ = value;
      }
    }

    /// <summary>Field number for the "stepvalue" field.</summary>
    public const int StepvalueFieldNumber = 34;
    private static readonly pb::FieldCodec<int> _repeated_stepvalue_codec
        = pb::FieldCodec.ForInt32(274);
    private readonly pbc::RepeatedField<int> stepvalue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// the stepsize for learning rate policy "multistep"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Stepvalue {
      get { return stepvalue_; }
    }

    /// <summary>Field number for the "plateau_winsize" field.</summary>
    public const int PlateauWinsizeFieldNumber = 43;
    private static readonly pb::FieldCodec<int> _repeated_plateauWinsize_codec
        = pb::FieldCodec.ForInt32(346);
    private readonly pbc::RepeatedField<int> plateauWinsize_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// the stepsize for learning rate policy "plateau"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlateauWinsize {
      get { return plateauWinsize_; }
    }

    /// <summary>Field number for the "clip_gradients" field.</summary>
    public const int ClipGradientsFieldNumber = 35;
    private float clipGradients_;
    /// <summary>
    /// Set clip_gradients to >= 0 to clip parameter gradients to that L2 norm,
    /// whenever their actual L2 norm is larger.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ClipGradients {
      get { return clipGradients_; }
      set {
        clipGradients_ = value;
      }
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 14;
    private int snapshot_;
    /// <summary>
    /// The snapshot interval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    /// <summary>Field number for the "snapshot_prefix" field.</summary>
    public const int SnapshotPrefixFieldNumber = 15;
    private string snapshotPrefix_ = "";
    /// <summary>
    /// The prefix for the snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SnapshotPrefix {
      get { return snapshotPrefix_; }
      set {
        snapshotPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "snapshot_diff" field.</summary>
    public const int SnapshotDiffFieldNumber = 16;
    private bool snapshotDiff_;
    /// <summary>
    /// whether to snapshot diff in the results or not. Snapshotting diff will help
    /// debugging but the final protocol buffer size will be much larger.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SnapshotDiff {
      get { return snapshotDiff_; }
      set {
        snapshotDiff_ = value;
      }
    }

    /// <summary>Field number for the "snapshot_format" field.</summary>
    public const int SnapshotFormatFieldNumber = 37;
    private global::Apollo.Perception.Inference.SolverParameter.Types.SnapshotFormat snapshotFormat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SolverParameter.Types.SnapshotFormat SnapshotFormat {
      get { return snapshotFormat_; }
      set {
        snapshotFormat_ = value;
      }
    }

    /// <summary>Field number for the "solver_mode" field.</summary>
    public const int SolverModeFieldNumber = 17;
    private global::Apollo.Perception.Inference.SolverParameter.Types.SolverMode solverMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SolverParameter.Types.SolverMode SolverMode {
      get { return solverMode_; }
      set {
        solverMode_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 18;
    private int deviceId_;
    /// <summary>
    /// the device_id will that be used in GPU mode. Use device_id = 0 in default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "random_seed" field.</summary>
    public const int RandomSeedFieldNumber = 20;
    private long randomSeed_;
    /// <summary>
    /// If non-negative, the seed with which the Solver will initialize the Caffe
    /// random number generator -- useful for reproducible results. Otherwise,
    /// (and by default) initialize using a seed derived from the system clock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 40;
    private string type_ = "";
    /// <summary>
    /// type of the solver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 31;
    private float delta_;
    /// <summary>
    /// numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "momentum2" field.</summary>
    public const int Momentum2FieldNumber = 39;
    private float momentum2_;
    /// <summary>
    /// parameters for the Adam solver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Momentum2 {
      get { return momentum2_; }
      set {
        momentum2_ = value;
      }
    }

    /// <summary>Field number for the "rms_decay" field.</summary>
    public const int RmsDecayFieldNumber = 38;
    private float rmsDecay_;
    /// <summary>
    /// RMSProp decay value
    /// MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RmsDecay {
      get { return rmsDecay_; }
      set {
        rmsDecay_ = value;
      }
    }

    /// <summary>Field number for the "debug_info" field.</summary>
    public const int DebugInfoFieldNumber = 23;
    private bool debugInfo_;
    /// <summary>
    /// If true, print information about the state of the net that may help with
    /// debugging learning problems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = value;
      }
    }

    /// <summary>Field number for the "snapshot_after_train" field.</summary>
    public const int SnapshotAfterTrainFieldNumber = 28;
    private bool snapshotAfterTrain_;
    /// <summary>
    /// If false, don't save a snapshot after training finishes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SnapshotAfterTrain {
      get { return snapshotAfterTrain_; }
      set {
        snapshotAfterTrain_ = value;
      }
    }

    /// <summary>Field number for the "solver_type" field.</summary>
    public const int SolverTypeFieldNumber = 30;
    private global::Apollo.Perception.Inference.SolverParameter.Types.SolverType solverType_ = 0;
    /// <summary>
    /// DEPRECATED: use type instead of solver_type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SolverParameter.Types.SolverType SolverType {
      get { return solverType_; }
      set {
        solverType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolverParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolverParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Net != other.Net) return false;
      if (!object.Equals(NetParam, other.NetParam)) return false;
      if (TrainNet != other.TrainNet) return false;
      if(!testNet_.Equals(other.testNet_)) return false;
      if (!object.Equals(TrainNetParam, other.TrainNetParam)) return false;
      if(!testNetParam_.Equals(other.testNetParam_)) return false;
      if (!object.Equals(TrainState, other.TrainState)) return false;
      if(!testState_.Equals(other.testState_)) return false;
      if (EvalType != other.EvalType) return false;
      if (ApVersion != other.ApVersion) return false;
      if (ShowPerClassResult != other.ShowPerClassResult) return false;
      if(!testIter_.Equals(other.testIter_)) return false;
      if (TestInterval != other.TestInterval) return false;
      if (TestComputeLoss != other.TestComputeLoss) return false;
      if (TestInitialization != other.TestInitialization) return false;
      if (BaseLr != other.BaseLr) return false;
      if (Display != other.Display) return false;
      if (AverageLoss != other.AverageLoss) return false;
      if (MaxIter != other.MaxIter) return false;
      if (IterSize != other.IterSize) return false;
      if (LrPolicy != other.LrPolicy) return false;
      if (Gamma != other.Gamma) return false;
      if (Power != other.Power) return false;
      if (Momentum != other.Momentum) return false;
      if (WeightDecay != other.WeightDecay) return false;
      if (RegularizationType != other.RegularizationType) return false;
      if (Stepsize != other.Stepsize) return false;
      if(!stepvalue_.Equals(other.stepvalue_)) return false;
      if(!plateauWinsize_.Equals(other.plateauWinsize_)) return false;
      if (ClipGradients != other.ClipGradients) return false;
      if (Snapshot != other.Snapshot) return false;
      if (SnapshotPrefix != other.SnapshotPrefix) return false;
      if (SnapshotDiff != other.SnapshotDiff) return false;
      if (SnapshotFormat != other.SnapshotFormat) return false;
      if (SolverMode != other.SolverMode) return false;
      if (DeviceId != other.DeviceId) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (Type != other.Type) return false;
      if (Delta != other.Delta) return false;
      if (Momentum2 != other.Momentum2) return false;
      if (RmsDecay != other.RmsDecay) return false;
      if (DebugInfo != other.DebugInfo) return false;
      if (SnapshotAfterTrain != other.SnapshotAfterTrain) return false;
      if (SolverType != other.SolverType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Net.Length != 0) hash ^= Net.GetHashCode();
      if (netParam_ != null) hash ^= NetParam.GetHashCode();
      if (TrainNet.Length != 0) hash ^= TrainNet.GetHashCode();
      hash ^= testNet_.GetHashCode();
      if (trainNetParam_ != null) hash ^= TrainNetParam.GetHashCode();
      hash ^= testNetParam_.GetHashCode();
      if (trainState_ != null) hash ^= TrainState.GetHashCode();
      hash ^= testState_.GetHashCode();
      if (EvalType.Length != 0) hash ^= EvalType.GetHashCode();
      if (ApVersion.Length != 0) hash ^= ApVersion.GetHashCode();
      if (ShowPerClassResult != false) hash ^= ShowPerClassResult.GetHashCode();
      hash ^= testIter_.GetHashCode();
      if (TestInterval != 0) hash ^= TestInterval.GetHashCode();
      if (TestComputeLoss != false) hash ^= TestComputeLoss.GetHashCode();
      if (TestInitialization != false) hash ^= TestInitialization.GetHashCode();
      if (BaseLr != 0F) hash ^= BaseLr.GetHashCode();
      if (Display != 0) hash ^= Display.GetHashCode();
      if (AverageLoss != 0) hash ^= AverageLoss.GetHashCode();
      if (MaxIter != 0) hash ^= MaxIter.GetHashCode();
      if (IterSize != 0) hash ^= IterSize.GetHashCode();
      if (LrPolicy.Length != 0) hash ^= LrPolicy.GetHashCode();
      if (Gamma != 0F) hash ^= Gamma.GetHashCode();
      if (Power != 0F) hash ^= Power.GetHashCode();
      if (Momentum != 0F) hash ^= Momentum.GetHashCode();
      if (WeightDecay != 0F) hash ^= WeightDecay.GetHashCode();
      if (RegularizationType.Length != 0) hash ^= RegularizationType.GetHashCode();
      if (Stepsize != 0) hash ^= Stepsize.GetHashCode();
      hash ^= stepvalue_.GetHashCode();
      hash ^= plateauWinsize_.GetHashCode();
      if (ClipGradients != 0F) hash ^= ClipGradients.GetHashCode();
      if (Snapshot != 0) hash ^= Snapshot.GetHashCode();
      if (SnapshotPrefix.Length != 0) hash ^= SnapshotPrefix.GetHashCode();
      if (SnapshotDiff != false) hash ^= SnapshotDiff.GetHashCode();
      if (SnapshotFormat != 0) hash ^= SnapshotFormat.GetHashCode();
      if (SolverMode != 0) hash ^= SolverMode.GetHashCode();
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Delta != 0F) hash ^= Delta.GetHashCode();
      if (Momentum2 != 0F) hash ^= Momentum2.GetHashCode();
      if (RmsDecay != 0F) hash ^= RmsDecay.GetHashCode();
      if (DebugInfo != false) hash ^= DebugInfo.GetHashCode();
      if (SnapshotAfterTrain != false) hash ^= SnapshotAfterTrain.GetHashCode();
      if (SolverType != 0) hash ^= SolverType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrainNet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TrainNet);
      }
      testNet_.WriteTo(output, _repeated_testNet_codec);
      testIter_.WriteTo(output, _repeated_testIter_codec);
      if (TestInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TestInterval);
      }
      if (BaseLr != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BaseLr);
      }
      if (Display != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Display);
      }
      if (MaxIter != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxIter);
      }
      if (LrPolicy.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LrPolicy);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Gamma);
      }
      if (Power != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Power);
      }
      if (Momentum != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Momentum);
      }
      if (WeightDecay != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(WeightDecay);
      }
      if (Stepsize != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Stepsize);
      }
      if (Snapshot != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Snapshot);
      }
      if (SnapshotPrefix.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SnapshotPrefix);
      }
      if (SnapshotDiff != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(SnapshotDiff);
      }
      if (SolverMode != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) SolverMode);
      }
      if (DeviceId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DeviceId);
      }
      if (TestComputeLoss != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(TestComputeLoss);
      }
      if (RandomSeed != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(RandomSeed);
      }
      if (trainNetParam_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TrainNetParam);
      }
      testNetParam_.WriteTo(output, _repeated_testNetParam_codec);
      if (DebugInfo != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DebugInfo);
      }
      if (Net.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Net);
      }
      if (netParam_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(NetParam);
      }
      if (trainState_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(TrainState);
      }
      testState_.WriteTo(output, _repeated_testState_codec);
      if (SnapshotAfterTrain != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SnapshotAfterTrain);
      }
      if (RegularizationType.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(RegularizationType);
      }
      if (SolverType != 0) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) SolverType);
      }
      if (Delta != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(Delta);
      }
      if (TestInitialization != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(TestInitialization);
      }
      if (AverageLoss != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(AverageLoss);
      }
      stepvalue_.WriteTo(output, _repeated_stepvalue_codec);
      if (ClipGradients != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(ClipGradients);
      }
      if (IterSize != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(IterSize);
      }
      if (SnapshotFormat != 0) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) SnapshotFormat);
      }
      if (RmsDecay != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(RmsDecay);
      }
      if (Momentum2 != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(Momentum2);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Type);
      }
      if (EvalType.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(EvalType);
      }
      if (ApVersion.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(ApVersion);
      }
      plateauWinsize_.WriteTo(output, _repeated_plateauWinsize_codec);
      if (ShowPerClassResult != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(ShowPerClassResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Net.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Net);
      }
      if (netParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NetParam);
      }
      if (TrainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrainNet);
      }
      size += testNet_.CalculateSize(_repeated_testNet_codec);
      if (trainNetParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrainNetParam);
      }
      size += testNetParam_.CalculateSize(_repeated_testNetParam_codec);
      if (trainState_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrainState);
      }
      size += testState_.CalculateSize(_repeated_testState_codec);
      if (EvalType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EvalType);
      }
      if (ApVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApVersion);
      }
      if (ShowPerClassResult != false) {
        size += 2 + 1;
      }
      size += testIter_.CalculateSize(_repeated_testIter_codec);
      if (TestInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInterval);
      }
      if (TestComputeLoss != false) {
        size += 2 + 1;
      }
      if (TestInitialization != false) {
        size += 2 + 1;
      }
      if (BaseLr != 0F) {
        size += 1 + 4;
      }
      if (Display != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Display);
      }
      if (AverageLoss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AverageLoss);
      }
      if (MaxIter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIter);
      }
      if (IterSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IterSize);
      }
      if (LrPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LrPolicy);
      }
      if (Gamma != 0F) {
        size += 1 + 4;
      }
      if (Power != 0F) {
        size += 1 + 4;
      }
      if (Momentum != 0F) {
        size += 1 + 4;
      }
      if (WeightDecay != 0F) {
        size += 1 + 4;
      }
      if (RegularizationType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RegularizationType);
      }
      if (Stepsize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stepsize);
      }
      size += stepvalue_.CalculateSize(_repeated_stepvalue_codec);
      size += plateauWinsize_.CalculateSize(_repeated_plateauWinsize_codec);
      if (ClipGradients != 0F) {
        size += 2 + 4;
      }
      if (Snapshot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Snapshot);
      }
      if (SnapshotPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SnapshotPrefix);
      }
      if (SnapshotDiff != false) {
        size += 2 + 1;
      }
      if (SnapshotFormat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SnapshotFormat);
      }
      if (SolverMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SolverMode);
      }
      if (DeviceId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (RandomSeed != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (Type.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Delta != 0F) {
        size += 2 + 4;
      }
      if (Momentum2 != 0F) {
        size += 2 + 4;
      }
      if (RmsDecay != 0F) {
        size += 2 + 4;
      }
      if (DebugInfo != false) {
        size += 2 + 1;
      }
      if (SnapshotAfterTrain != false) {
        size += 2 + 1;
      }
      if (SolverType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SolverType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolverParameter other) {
      if (other == null) {
        return;
      }
      if (other.Net.Length != 0) {
        Net = other.Net;
      }
      if (other.netParam_ != null) {
        if (netParam_ == null) {
          netParam_ = new global::Apollo.Perception.Inference.NetParameter();
        }
        NetParam.MergeFrom(other.NetParam);
      }
      if (other.TrainNet.Length != 0) {
        TrainNet = other.TrainNet;
      }
      testNet_.Add(other.testNet_);
      if (other.trainNetParam_ != null) {
        if (trainNetParam_ == null) {
          trainNetParam_ = new global::Apollo.Perception.Inference.NetParameter();
        }
        TrainNetParam.MergeFrom(other.TrainNetParam);
      }
      testNetParam_.Add(other.testNetParam_);
      if (other.trainState_ != null) {
        if (trainState_ == null) {
          trainState_ = new global::Apollo.Perception.Inference.NetState();
        }
        TrainState.MergeFrom(other.TrainState);
      }
      testState_.Add(other.testState_);
      if (other.EvalType.Length != 0) {
        EvalType = other.EvalType;
      }
      if (other.ApVersion.Length != 0) {
        ApVersion = other.ApVersion;
      }
      if (other.ShowPerClassResult != false) {
        ShowPerClassResult = other.ShowPerClassResult;
      }
      testIter_.Add(other.testIter_);
      if (other.TestInterval != 0) {
        TestInterval = other.TestInterval;
      }
      if (other.TestComputeLoss != false) {
        TestComputeLoss = other.TestComputeLoss;
      }
      if (other.TestInitialization != false) {
        TestInitialization = other.TestInitialization;
      }
      if (other.BaseLr != 0F) {
        BaseLr = other.BaseLr;
      }
      if (other.Display != 0) {
        Display = other.Display;
      }
      if (other.AverageLoss != 0) {
        AverageLoss = other.AverageLoss;
      }
      if (other.MaxIter != 0) {
        MaxIter = other.MaxIter;
      }
      if (other.IterSize != 0) {
        IterSize = other.IterSize;
      }
      if (other.LrPolicy.Length != 0) {
        LrPolicy = other.LrPolicy;
      }
      if (other.Gamma != 0F) {
        Gamma = other.Gamma;
      }
      if (other.Power != 0F) {
        Power = other.Power;
      }
      if (other.Momentum != 0F) {
        Momentum = other.Momentum;
      }
      if (other.WeightDecay != 0F) {
        WeightDecay = other.WeightDecay;
      }
      if (other.RegularizationType.Length != 0) {
        RegularizationType = other.RegularizationType;
      }
      if (other.Stepsize != 0) {
        Stepsize = other.Stepsize;
      }
      stepvalue_.Add(other.stepvalue_);
      plateauWinsize_.Add(other.plateauWinsize_);
      if (other.ClipGradients != 0F) {
        ClipGradients = other.ClipGradients;
      }
      if (other.Snapshot != 0) {
        Snapshot = other.Snapshot;
      }
      if (other.SnapshotPrefix.Length != 0) {
        SnapshotPrefix = other.SnapshotPrefix;
      }
      if (other.SnapshotDiff != false) {
        SnapshotDiff = other.SnapshotDiff;
      }
      if (other.SnapshotFormat != 0) {
        SnapshotFormat = other.SnapshotFormat;
      }
      if (other.SolverMode != 0) {
        SolverMode = other.SolverMode;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Delta != 0F) {
        Delta = other.Delta;
      }
      if (other.Momentum2 != 0F) {
        Momentum2 = other.Momentum2;
      }
      if (other.RmsDecay != 0F) {
        RmsDecay = other.RmsDecay;
      }
      if (other.DebugInfo != false) {
        DebugInfo = other.DebugInfo;
      }
      if (other.SnapshotAfterTrain != false) {
        SnapshotAfterTrain = other.SnapshotAfterTrain;
      }
      if (other.SolverType != 0) {
        SolverType = other.SolverType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TrainNet = input.ReadString();
            break;
          }
          case 18: {
            testNet_.AddEntriesFrom(input, _repeated_testNet_codec);
            break;
          }
          case 26:
          case 24: {
            testIter_.AddEntriesFrom(input, _repeated_testIter_codec);
            break;
          }
          case 32: {
            TestInterval = input.ReadInt32();
            break;
          }
          case 45: {
            BaseLr = input.ReadFloat();
            break;
          }
          case 48: {
            Display = input.ReadInt32();
            break;
          }
          case 56: {
            MaxIter = input.ReadInt32();
            break;
          }
          case 66: {
            LrPolicy = input.ReadString();
            break;
          }
          case 77: {
            Gamma = input.ReadFloat();
            break;
          }
          case 85: {
            Power = input.ReadFloat();
            break;
          }
          case 93: {
            Momentum = input.ReadFloat();
            break;
          }
          case 101: {
            WeightDecay = input.ReadFloat();
            break;
          }
          case 104: {
            Stepsize = input.ReadInt32();
            break;
          }
          case 112: {
            Snapshot = input.ReadInt32();
            break;
          }
          case 122: {
            SnapshotPrefix = input.ReadString();
            break;
          }
          case 128: {
            SnapshotDiff = input.ReadBool();
            break;
          }
          case 136: {
            solverMode_ = (global::Apollo.Perception.Inference.SolverParameter.Types.SolverMode) input.ReadEnum();
            break;
          }
          case 144: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 152: {
            TestComputeLoss = input.ReadBool();
            break;
          }
          case 160: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 170: {
            if (trainNetParam_ == null) {
              trainNetParam_ = new global::Apollo.Perception.Inference.NetParameter();
            }
            input.ReadMessage(trainNetParam_);
            break;
          }
          case 178: {
            testNetParam_.AddEntriesFrom(input, _repeated_testNetParam_codec);
            break;
          }
          case 184: {
            DebugInfo = input.ReadBool();
            break;
          }
          case 194: {
            Net = input.ReadString();
            break;
          }
          case 202: {
            if (netParam_ == null) {
              netParam_ = new global::Apollo.Perception.Inference.NetParameter();
            }
            input.ReadMessage(netParam_);
            break;
          }
          case 210: {
            if (trainState_ == null) {
              trainState_ = new global::Apollo.Perception.Inference.NetState();
            }
            input.ReadMessage(trainState_);
            break;
          }
          case 218: {
            testState_.AddEntriesFrom(input, _repeated_testState_codec);
            break;
          }
          case 224: {
            SnapshotAfterTrain = input.ReadBool();
            break;
          }
          case 234: {
            RegularizationType = input.ReadString();
            break;
          }
          case 240: {
            solverType_ = (global::Apollo.Perception.Inference.SolverParameter.Types.SolverType) input.ReadEnum();
            break;
          }
          case 253: {
            Delta = input.ReadFloat();
            break;
          }
          case 256: {
            TestInitialization = input.ReadBool();
            break;
          }
          case 264: {
            AverageLoss = input.ReadInt32();
            break;
          }
          case 274:
          case 272: {
            stepvalue_.AddEntriesFrom(input, _repeated_stepvalue_codec);
            break;
          }
          case 285: {
            ClipGradients = input.ReadFloat();
            break;
          }
          case 288: {
            IterSize = input.ReadInt32();
            break;
          }
          case 296: {
            snapshotFormat_ = (global::Apollo.Perception.Inference.SolverParameter.Types.SnapshotFormat) input.ReadEnum();
            break;
          }
          case 309: {
            RmsDecay = input.ReadFloat();
            break;
          }
          case 317: {
            Momentum2 = input.ReadFloat();
            break;
          }
          case 322: {
            Type = input.ReadString();
            break;
          }
          case 330: {
            EvalType = input.ReadString();
            break;
          }
          case 338: {
            ApVersion = input.ReadString();
            break;
          }
          case 346:
          case 344: {
            plateauWinsize_.AddEntriesFrom(input, _repeated_plateauWinsize_codec);
            break;
          }
          case 352: {
            ShowPerClassResult = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SolverParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SnapshotFormat {
        [pbr::OriginalName("HDF5")] Hdf5 = 0,
        [pbr::OriginalName("BINARYPROTO")] Binaryproto = 1,
      }

      /// <summary>
      /// the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
      /// </summary>
      public enum SolverMode {
        [pbr::OriginalName("CPU")] Cpu = 0,
        [pbr::OriginalName("GPU")] Gpu = 1,
      }

      /// <summary>
      /// DEPRECATED: old solver enum types, use string instead
      /// </summary>
      public enum SolverType {
        [pbr::OriginalName("SGD")] Sgd = 0,
        [pbr::OriginalName("NESTEROV")] Nesterov = 1,
        [pbr::OriginalName("ADAGRAD")] Adagrad = 2,
        [pbr::OriginalName("RMSPROP")] Rmsprop = 3,
        [pbr::OriginalName("ADADELTA")] Adadelta = 4,
        [pbr::OriginalName("ADAM")] Adam = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// A message that stores the solver snapshots
  /// </summary>
  public sealed partial class SolverState : pb::IMessage<SolverState> {
    private static readonly pb::MessageParser<SolverState> _parser = new pb::MessageParser<SolverState>(() => new SolverState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolverState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverState(SolverState other) : this() {
      iter_ = other.iter_;
      learnedNet_ = other.learnedNet_;
      history_ = other.history_.Clone();
      currentStep_ = other.currentStep_;
      minimumLoss_ = other.minimumLoss_;
      iterLastEvent_ = other.iterLastEvent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverState Clone() {
      return new SolverState(this);
    }

    /// <summary>Field number for the "iter" field.</summary>
    public const int IterFieldNumber = 1;
    private int iter_;
    /// <summary>
    /// The current iteration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iter {
      get { return iter_; }
      set {
        iter_ = value;
      }
    }

    /// <summary>Field number for the "learned_net" field.</summary>
    public const int LearnedNetFieldNumber = 2;
    private string learnedNet_ = "";
    /// <summary>
    /// The file that stores the learned net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LearnedNet {
      get { return learnedNet_; }
      set {
        learnedNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobProto> _repeated_history_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Perception.Inference.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> history_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto>();
    /// <summary>
    /// The history for sgd solvers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> History {
      get { return history_; }
    }

    /// <summary>Field number for the "current_step" field.</summary>
    public const int CurrentStepFieldNumber = 4;
    private int currentStep_;
    /// <summary>
    /// The current step for learning rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentStep {
      get { return currentStep_; }
      set {
        currentStep_ = value;
      }
    }

    /// <summary>Field number for the "minimum_loss" field.</summary>
    public const int MinimumLossFieldNumber = 5;
    private float minimumLoss_;
    /// <summary>
    /// Historical minimum loss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinimumLoss {
      get { return minimumLoss_; }
      set {
        minimumLoss_ = value;
      }
    }

    /// <summary>Field number for the "iter_last_event" field.</summary>
    public const int IterLastEventFieldNumber = 6;
    private int iterLastEvent_;
    /// <summary>
    /// The iteration when last lr-update or min_loss-update happend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IterLastEvent {
      get { return iterLastEvent_; }
      set {
        iterLastEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolverState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolverState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Iter != other.Iter) return false;
      if (LearnedNet != other.LearnedNet) return false;
      if(!history_.Equals(other.history_)) return false;
      if (CurrentStep != other.CurrentStep) return false;
      if (MinimumLoss != other.MinimumLoss) return false;
      if (IterLastEvent != other.IterLastEvent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Iter != 0) hash ^= Iter.GetHashCode();
      if (LearnedNet.Length != 0) hash ^= LearnedNet.GetHashCode();
      hash ^= history_.GetHashCode();
      if (CurrentStep != 0) hash ^= CurrentStep.GetHashCode();
      if (MinimumLoss != 0F) hash ^= MinimumLoss.GetHashCode();
      if (IterLastEvent != 0) hash ^= IterLastEvent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Iter);
      }
      if (LearnedNet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LearnedNet);
      }
      history_.WriteTo(output, _repeated_history_codec);
      if (CurrentStep != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentStep);
      }
      if (MinimumLoss != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MinimumLoss);
      }
      if (IterLastEvent != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IterLastEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iter);
      }
      if (LearnedNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LearnedNet);
      }
      size += history_.CalculateSize(_repeated_history_codec);
      if (CurrentStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentStep);
      }
      if (MinimumLoss != 0F) {
        size += 1 + 4;
      }
      if (IterLastEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IterLastEvent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolverState other) {
      if (other == null) {
        return;
      }
      if (other.Iter != 0) {
        Iter = other.Iter;
      }
      if (other.LearnedNet.Length != 0) {
        LearnedNet = other.LearnedNet;
      }
      history_.Add(other.history_);
      if (other.CurrentStep != 0) {
        CurrentStep = other.CurrentStep;
      }
      if (other.MinimumLoss != 0F) {
        MinimumLoss = other.MinimumLoss;
      }
      if (other.IterLastEvent != 0) {
        IterLastEvent = other.IterLastEvent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Iter = input.ReadInt32();
            break;
          }
          case 18: {
            LearnedNet = input.ReadString();
            break;
          }
          case 26: {
            history_.AddEntriesFrom(input, _repeated_history_codec);
            break;
          }
          case 32: {
            CurrentStep = input.ReadInt32();
            break;
          }
          case 45: {
            MinimumLoss = input.ReadFloat();
            break;
          }
          case 48: {
            IterLastEvent = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetState : pb::IMessage<NetState> {
    private static readonly pb::MessageParser<NetState> _parser = new pb::MessageParser<NetState>(() => new NetState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetState(NetState other) : this() {
      phase_ = other.phase_;
      level_ = other.level_;
      stage_ = other.stage_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetState Clone() {
      return new NetState(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private global::Apollo.Perception.Inference.Phase phase_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.Phase Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_stage_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> stage_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Stage {
      get { return stage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (Level != other.Level) return false;
      if(!stage_.Equals(other.stage_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= stage_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      stage_.WriteTo(output, _repeated_stage_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += stage_.CalculateSize(_repeated_stage_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetState other) {
      if (other == null) {
        return;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      stage_.Add(other.stage_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            phase_ = (global::Apollo.Perception.Inference.Phase) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 26: {
            stage_.AddEntriesFrom(input, _repeated_stage_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetStateRule : pb::IMessage<NetStateRule> {
    private static readonly pb::MessageParser<NetStateRule> _parser = new pb::MessageParser<NetStateRule>(() => new NetStateRule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetStateRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetStateRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetStateRule(NetStateRule other) : this() {
      phase_ = other.phase_;
      minLevel_ = other.minLevel_;
      maxLevel_ = other.maxLevel_;
      stage_ = other.stage_.Clone();
      notStage_ = other.notStage_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetStateRule Clone() {
      return new NetStateRule(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private global::Apollo.Perception.Inference.Phase phase_ = 0;
    /// <summary>
    /// Set phase to require the NetState have a particular phase (TRAIN or TEST)
    /// to meet this rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.Phase Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "min_level" field.</summary>
    public const int MinLevelFieldNumber = 2;
    private int minLevel_;
    /// <summary>
    /// Set the minimum and/or maximum levels in which the layer should be used.
    /// Leave undefined to meet the rule regardless of level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 3;
    private int maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_stage_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> stage_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Customizable sets of stages to include or exclude.
    /// The net must have ALL of the specified stages and NONE of the specified
    /// "not_stage"s to meet the rule.
    /// (Use multiple NetStateRules to specify conjunctions of stages.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Stage {
      get { return stage_; }
    }

    /// <summary>Field number for the "not_stage" field.</summary>
    public const int NotStageFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_notStage_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> notStage_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NotStage {
      get { return notStage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetStateRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetStateRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (MinLevel != other.MinLevel) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if(!stage_.Equals(other.stage_)) return false;
      if(!notStage_.Equals(other.notStage_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (MinLevel != 0) hash ^= MinLevel.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      hash ^= stage_.GetHashCode();
      hash ^= notStage_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxLevel);
      }
      stage_.WriteTo(output, _repeated_stage_codec);
      notStage_.WriteTo(output, _repeated_notStage_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinLevel);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      size += stage_.CalculateSize(_repeated_stage_codec);
      size += notStage_.CalculateSize(_repeated_notStage_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetStateRule other) {
      if (other == null) {
        return;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.MinLevel != 0) {
        MinLevel = other.MinLevel;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      stage_.Add(other.stage_);
      notStage_.Add(other.notStage_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            phase_ = (global::Apollo.Perception.Inference.Phase) input.ReadEnum();
            break;
          }
          case 16: {
            MinLevel = input.ReadInt32();
            break;
          }
          case 24: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 34: {
            stage_.AddEntriesFrom(input, _repeated_stage_codec);
            break;
          }
          case 42: {
            notStage_.AddEntriesFrom(input, _repeated_notStage_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies training parameters (multipliers on global learning constants,
  /// and the name and other settings used for weight sharing).
  /// </summary>
  public sealed partial class ParamSpec : pb::IMessage<ParamSpec> {
    private static readonly pb::MessageParser<ParamSpec> _parser = new pb::MessageParser<ParamSpec>(() => new ParamSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec(ParamSpec other) : this() {
      name_ = other.name_;
      shareMode_ = other.shareMode_;
      lrMult_ = other.lrMult_;
      decayMult_ = other.decayMult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec Clone() {
      return new ParamSpec(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The names of the parameter blobs -- useful for sharing parameters among
    /// layers, but never  otherwise.  To share a parameter between two
    /// layers, give it a (non-empty) name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "share_mode" field.</summary>
    public const int ShareModeFieldNumber = 2;
    private global::Apollo.Perception.Inference.ParamSpec.Types.DimCheckMode shareMode_ = 0;
    /// <summary>
    /// Whether to require shared weights to have the same shape, or just the same
    /// count -- defaults to STRICT if unspecified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ParamSpec.Types.DimCheckMode ShareMode {
      get { return shareMode_; }
      set {
        shareMode_ = value;
      }
    }

    /// <summary>Field number for the "lr_mult" field.</summary>
    public const int LrMultFieldNumber = 3;
    private float lrMult_;
    /// <summary>
    /// The multiplier on the global learning rate for this parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LrMult {
      get { return lrMult_; }
      set {
        lrMult_ = value;
      }
    }

    /// <summary>Field number for the "decay_mult" field.</summary>
    public const int DecayMultFieldNumber = 4;
    private float decayMult_;
    /// <summary>
    /// The multiplier on the global weight decay for this parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecayMult {
      get { return decayMult_; }
      set {
        decayMult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShareMode != other.ShareMode) return false;
      if (LrMult != other.LrMult) return false;
      if (DecayMult != other.DecayMult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShareMode != 0) hash ^= ShareMode.GetHashCode();
      if (LrMult != 0F) hash ^= LrMult.GetHashCode();
      if (DecayMult != 0F) hash ^= DecayMult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShareMode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ShareMode);
      }
      if (LrMult != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LrMult);
      }
      if (DecayMult != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DecayMult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShareMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShareMode);
      }
      if (LrMult != 0F) {
        size += 1 + 4;
      }
      if (DecayMult != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamSpec other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShareMode != 0) {
        ShareMode = other.ShareMode;
      }
      if (other.LrMult != 0F) {
        LrMult = other.LrMult;
      }
      if (other.DecayMult != 0F) {
        DecayMult = other.DecayMult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            shareMode_ = (global::Apollo.Perception.Inference.ParamSpec.Types.DimCheckMode) input.ReadEnum();
            break;
          }
          case 29: {
            LrMult = input.ReadFloat();
            break;
          }
          case 37: {
            DecayMult = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ParamSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DimCheckMode {
        /// <summary>
        /// STRICT (default) requires that num, channels, height, width each match.
        /// </summary>
        [pbr::OriginalName("STRICT")] Strict = 0,
        /// <summary>
        /// PERMISSIVE requires only the count (num*channels*height*width) to match.
        /// </summary>
        [pbr::OriginalName("PERMISSIVE")] Permissive = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// NOTE
  /// Update the next available ID when you add a new LayerParameter field.
  ///
  /// LayerParameter next available layer-specific ID: 147 (last added: recurrent_param)
  /// </summary>
  public sealed partial class LayerParameter : pb::IMessage<LayerParameter> {
    private static readonly pb::MessageParser<LayerParameter> _parser = new pb::MessageParser<LayerParameter>(() => new LayerParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerParameter(LayerParameter other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      bottom_ = other.bottom_.Clone();
      top_ = other.top_.Clone();
      phase_ = other.phase_;
      lossWeight_ = other.lossWeight_.Clone();
      param_ = other.param_.Clone();
      blobs_ = other.blobs_.Clone();
      propagateDown_ = other.propagateDown_.Clone();
      include_ = other.include_.Clone();
      exclude_ = other.exclude_.Clone();
      TransformParam = other.transformParam_ != null ? other.TransformParam.Clone() : null;
      LossParam = other.lossParam_ != null ? other.LossParam.Clone() : null;
      AccuracyParam = other.accuracyParam_ != null ? other.AccuracyParam.Clone() : null;
      AnnotatedDataParam = other.annotatedDataParam_ != null ? other.AnnotatedDataParam.Clone() : null;
      ArgmaxParam = other.argmaxParam_ != null ? other.ArgmaxParam.Clone() : null;
      BatchNormParam = other.batchNormParam_ != null ? other.BatchNormParam.Clone() : null;
      BiasParam = other.biasParam_ != null ? other.BiasParam.Clone() : null;
      ConcatParam = other.concatParam_ != null ? other.ConcatParam.Clone() : null;
      ContrastiveLossParam = other.contrastiveLossParam_ != null ? other.ContrastiveLossParam.Clone() : null;
      ConvolutionParam = other.convolutionParam_ != null ? other.ConvolutionParam.Clone() : null;
      CropParam = other.cropParam_ != null ? other.CropParam.Clone() : null;
      DataParam = other.dataParam_ != null ? other.DataParam.Clone() : null;
      DetectionEvaluateParam = other.detectionEvaluateParam_ != null ? other.DetectionEvaluateParam.Clone() : null;
      DetectionOutputParam = other.detectionOutputParam_ != null ? other.DetectionOutputParam.Clone() : null;
      DropoutParam = other.dropoutParam_ != null ? other.DropoutParam.Clone() : null;
      DummyDataParam = other.dummyDataParam_ != null ? other.DummyDataParam.Clone() : null;
      EltwiseParam = other.eltwiseParam_ != null ? other.EltwiseParam.Clone() : null;
      EluParam = other.eluParam_ != null ? other.EluParam.Clone() : null;
      EmbedParam = other.embedParam_ != null ? other.EmbedParam.Clone() : null;
      ExpParam = other.expParam_ != null ? other.ExpParam.Clone() : null;
      FlattenParam = other.flattenParam_ != null ? other.FlattenParam.Clone() : null;
      Hdf5DataParam = other.hdf5DataParam_ != null ? other.Hdf5DataParam.Clone() : null;
      Hdf5OutputParam = other.hdf5OutputParam_ != null ? other.Hdf5OutputParam.Clone() : null;
      HingeLossParam = other.hingeLossParam_ != null ? other.HingeLossParam.Clone() : null;
      ImageDataParam = other.imageDataParam_ != null ? other.ImageDataParam.Clone() : null;
      yoloDataParam_ = other.yoloDataParam_.Clone();
      dataProbParam_ = other.dataProbParam_.Clone();
      InfogainLossParam = other.infogainLossParam_ != null ? other.InfogainLossParam.Clone() : null;
      InnerProductParam = other.innerProductParam_ != null ? other.InnerProductParam.Clone() : null;
      InputParam = other.inputParam_ != null ? other.InputParam.Clone() : null;
      LogParam = other.logParam_ != null ? other.LogParam.Clone() : null;
      LrnParam = other.lrnParam_ != null ? other.LrnParam.Clone() : null;
      MemoryDataParam = other.memoryDataParam_ != null ? other.MemoryDataParam.Clone() : null;
      MultiboxLossParam = other.multiboxLossParam_ != null ? other.MultiboxLossParam.Clone() : null;
      RegionParam = other.regionParam_ != null ? other.RegionParam.Clone() : null;
      RegionOutputParam = other.regionOutputParam_ != null ? other.RegionOutputParam.Clone() : null;
      RegionProposalParam = other.regionProposalParam_ != null ? other.RegionProposalParam.Clone() : null;
      YoloTargetParam = other.yoloTargetParam_ != null ? other.YoloTargetParam.Clone() : null;
      YoloAnchorsParam = other.yoloAnchorsParam_ != null ? other.YoloAnchorsParam.Clone() : null;
      YoloLossParam = other.yoloLossParam_ != null ? other.YoloLossParam.Clone() : null;
      YoloDumpParam = other.yoloDumpParam_ != null ? other.YoloDumpParam.Clone() : null;
      PaddingParam = other.paddingParam_ != null ? other.PaddingParam.Clone() : null;
      ReorgParam = other.reorgParam_ != null ? other.ReorgParam.Clone() : null;
      MvnParam = other.mvnParam_ != null ? other.MvnParam.Clone() : null;
      NormParam = other.normParam_ != null ? other.NormParam.Clone() : null;
      ParameterParam = other.parameterParam_ != null ? other.ParameterParam.Clone() : null;
      PermuteParam = other.permuteParam_ != null ? other.PermuteParam.Clone() : null;
      PoolingParam = other.poolingParam_ != null ? other.PoolingParam.Clone() : null;
      PowerParam = other.powerParam_ != null ? other.PowerParam.Clone() : null;
      PreluParam = other.preluParam_ != null ? other.PreluParam.Clone() : null;
      PriorBoxParam = other.priorBoxParam_ != null ? other.PriorBoxParam.Clone() : null;
      PythonParam = other.pythonParam_ != null ? other.PythonParam.Clone() : null;
      RecurrentParam = other.recurrentParam_ != null ? other.RecurrentParam.Clone() : null;
      ReductionParam = other.reductionParam_ != null ? other.ReductionParam.Clone() : null;
      ReluParam = other.reluParam_ != null ? other.ReluParam.Clone() : null;
      ReshapeParam = other.reshapeParam_ != null ? other.ReshapeParam.Clone() : null;
      RoiPoolingParam = other.roiPoolingParam_ != null ? other.RoiPoolingParam.Clone() : null;
      ScaleParam = other.scaleParam_ != null ? other.ScaleParam.Clone() : null;
      SigmoidParam = other.sigmoidParam_ != null ? other.SigmoidParam.Clone() : null;
      SoftmaxParam = other.softmaxParam_ != null ? other.SoftmaxParam.Clone() : null;
      SppParam = other.sppParam_ != null ? other.SppParam.Clone() : null;
      SliceParam = other.sliceParam_ != null ? other.SliceParam.Clone() : null;
      TanhParam = other.tanhParam_ != null ? other.TanhParam.Clone() : null;
      ThresholdParam = other.thresholdParam_ != null ? other.ThresholdParam.Clone() : null;
      TileParam = other.tileParam_ != null ? other.TileParam.Clone() : null;
      VideoDataParam = other.videoDataParam_ != null ? other.VideoDataParam.Clone() : null;
      WindowDataParam = other.windowDataParam_ != null ? other.WindowDataParam.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerParameter Clone() {
      return new LayerParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the layer name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// the layer type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_bottom_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> bottom_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the name of each bottom blob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Bottom {
      get { return bottom_; }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_top_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> top_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the name of each top blob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Top {
      get { return top_; }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 10;
    private global::Apollo.Perception.Inference.Phase phase_ = 0;
    /// <summary>
    /// The train / test phase for computation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.Phase Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "loss_weight" field.</summary>
    public const int LossWeightFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_lossWeight_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> lossWeight_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// The amount of weight to assign each top blob in the objective.
    /// Each layer assigns a default value, usually of either 0 or 1,
    /// to each top blob.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LossWeight {
      get { return lossWeight_; }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.ParamSpec> _repeated_param_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Perception.Inference.ParamSpec.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.ParamSpec> param_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.ParamSpec>();
    /// <summary>
    /// Specifies training parameters (multipliers on global learning constants,
    /// and the name and other settings used for weight sharing).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.ParamSpec> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(58, global::Apollo.Perception.Inference.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> blobs_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto>();
    /// <summary>
    /// The blobs containing the numeric parameters of the layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> Blobs {
      get { return blobs_; }
    }

    /// <summary>Field number for the "propagate_down" field.</summary>
    public const int PropagateDownFieldNumber = 11;
    private static readonly pb::FieldCodec<bool> _repeated_propagateDown_codec
        = pb::FieldCodec.ForBool(90);
    private readonly pbc::RepeatedField<bool> propagateDown_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// Specifies whether to backpropagate to each bottom. If unspecified,
    /// Caffe will automatically infer whether each input needs backpropagation
    /// to compute parameter gradients. If set to true for some inputs,
    /// backpropagation to those inputs is forced; if set false for some inputs,
    /// backpropagation to those inputs is skipped.
    ///
    /// The size must be either 0 or equal to the number of bottoms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> PropagateDown {
      get { return propagateDown_; }
    }

    /// <summary>Field number for the "include" field.</summary>
    public const int IncludeFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.NetStateRule> _repeated_include_codec
        = pb::FieldCodec.ForMessage(66, global::Apollo.Perception.Inference.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> include_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule>();
    /// <summary>
    /// Rules controlling whether and when a layer is included in the network,
    /// based on the current NetState.  You may specify a non-zero number of rules
    /// to include OR exclude, but not both.  If no include or exclude rules are
    /// specified, the layer is always included.  If the current NetState meets
    /// ANY (i.e., one or more) of the specified rules, the layer is
    /// included/excluded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> Include {
      get { return include_; }
    }

    /// <summary>Field number for the "exclude" field.</summary>
    public const int ExcludeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.NetStateRule> _repeated_exclude_codec
        = pb::FieldCodec.ForMessage(74, global::Apollo.Perception.Inference.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> exclude_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> Exclude {
      get { return exclude_; }
    }

    /// <summary>Field number for the "transform_param" field.</summary>
    public const int TransformParamFieldNumber = 100;
    private global::Apollo.Perception.Inference.TransformationParameter transformParam_;
    /// <summary>
    /// Parameters for data pre-processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.TransformationParameter TransformParam {
      get { return transformParam_; }
      set {
        transformParam_ = value;
      }
    }

    /// <summary>Field number for the "loss_param" field.</summary>
    public const int LossParamFieldNumber = 101;
    private global::Apollo.Perception.Inference.LossParameter lossParam_;
    /// <summary>
    /// Parameters shared by loss layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LossParameter LossParam {
      get { return lossParam_; }
      set {
        lossParam_ = value;
      }
    }

    /// <summary>Field number for the "accuracy_param" field.</summary>
    public const int AccuracyParamFieldNumber = 102;
    private global::Apollo.Perception.Inference.AccuracyParameter accuracyParam_;
    /// <summary>
    /// Layer type-specific parameters.
    ///
    /// Note: certain layers may have more than one computational engine
    /// for their implementation. These layers include an Engine type and
    /// engine parameter for selecting the implementation.
    /// The default for the engine is set by the ENGINE switch at compile-time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.AccuracyParameter AccuracyParam {
      get { return accuracyParam_; }
      set {
        accuracyParam_ = value;
      }
    }

    /// <summary>Field number for the "annotated_data_param" field.</summary>
    public const int AnnotatedDataParamFieldNumber = 200;
    private global::Apollo.Perception.Inference.AnnotatedDataParameter annotatedDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.AnnotatedDataParameter AnnotatedDataParam {
      get { return annotatedDataParam_; }
      set {
        annotatedDataParam_ = value;
      }
    }

    /// <summary>Field number for the "argmax_param" field.</summary>
    public const int ArgmaxParamFieldNumber = 103;
    private global::Apollo.Perception.Inference.ArgMaxParameter argmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ArgMaxParameter ArgmaxParam {
      get { return argmaxParam_; }
      set {
        argmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "batch_norm_param" field.</summary>
    public const int BatchNormParamFieldNumber = 139;
    private global::Apollo.Perception.Inference.BatchNormParameter batchNormParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.BatchNormParameter BatchNormParam {
      get { return batchNormParam_; }
      set {
        batchNormParam_ = value;
      }
    }

    /// <summary>Field number for the "bias_param" field.</summary>
    public const int BiasParamFieldNumber = 141;
    private global::Apollo.Perception.Inference.BiasParameter biasParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.BiasParameter BiasParam {
      get { return biasParam_; }
      set {
        biasParam_ = value;
      }
    }

    /// <summary>Field number for the "concat_param" field.</summary>
    public const int ConcatParamFieldNumber = 104;
    private global::Apollo.Perception.Inference.ConcatParameter concatParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ConcatParameter ConcatParam {
      get { return concatParam_; }
      set {
        concatParam_ = value;
      }
    }

    /// <summary>Field number for the "contrastive_loss_param" field.</summary>
    public const int ContrastiveLossParamFieldNumber = 105;
    private global::Apollo.Perception.Inference.ContrastiveLossParameter contrastiveLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ContrastiveLossParameter ContrastiveLossParam {
      get { return contrastiveLossParam_; }
      set {
        contrastiveLossParam_ = value;
      }
    }

    /// <summary>Field number for the "convolution_param" field.</summary>
    public const int ConvolutionParamFieldNumber = 106;
    private global::Apollo.Perception.Inference.ConvolutionParameter convolutionParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ConvolutionParameter ConvolutionParam {
      get { return convolutionParam_; }
      set {
        convolutionParam_ = value;
      }
    }

    /// <summary>Field number for the "crop_param" field.</summary>
    public const int CropParamFieldNumber = 144;
    private global::Apollo.Perception.Inference.CropParameter cropParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.CropParameter CropParam {
      get { return cropParam_; }
      set {
        cropParam_ = value;
      }
    }

    /// <summary>Field number for the "data_param" field.</summary>
    public const int DataParamFieldNumber = 107;
    private global::Apollo.Perception.Inference.DataParameter dataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DataParameter DataParam {
      get { return dataParam_; }
      set {
        dataParam_ = value;
      }
    }

    /// <summary>Field number for the "detection_evaluate_param" field.</summary>
    public const int DetectionEvaluateParamFieldNumber = 205;
    private global::Apollo.Perception.Inference.DetectionEvaluateParameter detectionEvaluateParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DetectionEvaluateParameter DetectionEvaluateParam {
      get { return detectionEvaluateParam_; }
      set {
        detectionEvaluateParam_ = value;
      }
    }

    /// <summary>Field number for the "detection_output_param" field.</summary>
    public const int DetectionOutputParamFieldNumber = 204;
    private global::Apollo.Perception.Inference.DetectionOutputParameter detectionOutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DetectionOutputParameter DetectionOutputParam {
      get { return detectionOutputParam_; }
      set {
        detectionOutputParam_ = value;
      }
    }

    /// <summary>Field number for the "dropout_param" field.</summary>
    public const int DropoutParamFieldNumber = 108;
    private global::Apollo.Perception.Inference.DropoutParameter dropoutParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DropoutParameter DropoutParam {
      get { return dropoutParam_; }
      set {
        dropoutParam_ = value;
      }
    }

    /// <summary>Field number for the "dummy_data_param" field.</summary>
    public const int DummyDataParamFieldNumber = 109;
    private global::Apollo.Perception.Inference.DummyDataParameter dummyDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DummyDataParameter DummyDataParam {
      get { return dummyDataParam_; }
      set {
        dummyDataParam_ = value;
      }
    }

    /// <summary>Field number for the "eltwise_param" field.</summary>
    public const int EltwiseParamFieldNumber = 110;
    private global::Apollo.Perception.Inference.EltwiseParameter eltwiseParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.EltwiseParameter EltwiseParam {
      get { return eltwiseParam_; }
      set {
        eltwiseParam_ = value;
      }
    }

    /// <summary>Field number for the "elu_param" field.</summary>
    public const int EluParamFieldNumber = 140;
    private global::Apollo.Perception.Inference.ELUParameter eluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ELUParameter EluParam {
      get { return eluParam_; }
      set {
        eluParam_ = value;
      }
    }

    /// <summary>Field number for the "embed_param" field.</summary>
    public const int EmbedParamFieldNumber = 137;
    private global::Apollo.Perception.Inference.EmbedParameter embedParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.EmbedParameter EmbedParam {
      get { return embedParam_; }
      set {
        embedParam_ = value;
      }
    }

    /// <summary>Field number for the "exp_param" field.</summary>
    public const int ExpParamFieldNumber = 111;
    private global::Apollo.Perception.Inference.ExpParameter expParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ExpParameter ExpParam {
      get { return expParam_; }
      set {
        expParam_ = value;
      }
    }

    /// <summary>Field number for the "flatten_param" field.</summary>
    public const int FlattenParamFieldNumber = 135;
    private global::Apollo.Perception.Inference.FlattenParameter flattenParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FlattenParameter FlattenParam {
      get { return flattenParam_; }
      set {
        flattenParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_data_param" field.</summary>
    public const int Hdf5DataParamFieldNumber = 112;
    private global::Apollo.Perception.Inference.HDF5DataParameter hdf5DataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HDF5DataParameter Hdf5DataParam {
      get { return hdf5DataParam_; }
      set {
        hdf5DataParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_output_param" field.</summary>
    public const int Hdf5OutputParamFieldNumber = 113;
    private global::Apollo.Perception.Inference.HDF5OutputParameter hdf5OutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HDF5OutputParameter Hdf5OutputParam {
      get { return hdf5OutputParam_; }
      set {
        hdf5OutputParam_ = value;
      }
    }

    /// <summary>Field number for the "hinge_loss_param" field.</summary>
    public const int HingeLossParamFieldNumber = 114;
    private global::Apollo.Perception.Inference.HingeLossParameter hingeLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HingeLossParameter HingeLossParam {
      get { return hingeLossParam_; }
      set {
        hingeLossParam_ = value;
      }
    }

    /// <summary>Field number for the "image_data_param" field.</summary>
    public const int ImageDataParamFieldNumber = 115;
    private global::Apollo.Perception.Inference.ImageDataParameter imageDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ImageDataParameter ImageDataParam {
      get { return imageDataParam_; }
      set {
        imageDataParam_ = value;
      }
    }

    /// <summary>Field number for the "yolo_data_param" field.</summary>
    public const int YoloDataParamFieldNumber = 1707111;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.ImageDataParameter> _repeated_yoloDataParam_codec
        = pb::FieldCodec.ForMessage(13656890, global::Apollo.Perception.Inference.ImageDataParameter.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.ImageDataParameter> yoloDataParam_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.ImageDataParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.ImageDataParameter> YoloDataParam {
      get { return yoloDataParam_; }
    }

    /// <summary>Field number for the "data_prob_param" field.</summary>
    public const int DataProbParamFieldNumber = 1707112;
    private static readonly pb::FieldCodec<float> _repeated_dataProbParam_codec
        = pb::FieldCodec.ForFloat(13656898);
    private readonly pbc::RepeatedField<float> dataProbParam_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DataProbParam {
      get { return dataProbParam_; }
    }

    /// <summary>Field number for the "infogain_loss_param" field.</summary>
    public const int InfogainLossParamFieldNumber = 116;
    private global::Apollo.Perception.Inference.InfogainLossParameter infogainLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.InfogainLossParameter InfogainLossParam {
      get { return infogainLossParam_; }
      set {
        infogainLossParam_ = value;
      }
    }

    /// <summary>Field number for the "inner_product_param" field.</summary>
    public const int InnerProductParamFieldNumber = 117;
    private global::Apollo.Perception.Inference.InnerProductParameter innerProductParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.InnerProductParameter InnerProductParam {
      get { return innerProductParam_; }
      set {
        innerProductParam_ = value;
      }
    }

    /// <summary>Field number for the "input_param" field.</summary>
    public const int InputParamFieldNumber = 143;
    private global::Apollo.Perception.Inference.InputParameter inputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.InputParameter InputParam {
      get { return inputParam_; }
      set {
        inputParam_ = value;
      }
    }

    /// <summary>Field number for the "log_param" field.</summary>
    public const int LogParamFieldNumber = 134;
    private global::Apollo.Perception.Inference.LogParameter logParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LogParameter LogParam {
      get { return logParam_; }
      set {
        logParam_ = value;
      }
    }

    /// <summary>Field number for the "lrn_param" field.</summary>
    public const int LrnParamFieldNumber = 118;
    private global::Apollo.Perception.Inference.LRNParameter lrnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LRNParameter LrnParam {
      get { return lrnParam_; }
      set {
        lrnParam_ = value;
      }
    }

    /// <summary>Field number for the "memory_data_param" field.</summary>
    public const int MemoryDataParamFieldNumber = 119;
    private global::Apollo.Perception.Inference.MemoryDataParameter memoryDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MemoryDataParameter MemoryDataParam {
      get { return memoryDataParam_; }
      set {
        memoryDataParam_ = value;
      }
    }

    /// <summary>Field number for the "multibox_loss_param" field.</summary>
    public const int MultiboxLossParamFieldNumber = 201;
    private global::Apollo.Perception.Inference.MultiBoxLossParameter multiboxLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MultiBoxLossParameter MultiboxLossParam {
      get { return multiboxLossParam_; }
      set {
        multiboxLossParam_ = value;
      }
    }

    /// <summary>Field number for the "region_param" field.</summary>
    public const int RegionParamFieldNumber = 300;
    private global::Apollo.Perception.Inference.RegionParameter regionParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.RegionParameter RegionParam {
      get { return regionParam_; }
      set {
        regionParam_ = value;
      }
    }

    /// <summary>Field number for the "region_output_param" field.</summary>
    public const int RegionOutputParamFieldNumber = 310;
    private global::Apollo.Perception.Inference.RegionOutputParameter regionOutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.RegionOutputParameter RegionOutputParam {
      get { return regionOutputParam_; }
      set {
        regionOutputParam_ = value;
      }
    }

    /// <summary>Field number for the "region_proposal_param" field.</summary>
    public const int RegionProposalParamFieldNumber = 320;
    private global::Apollo.Perception.Inference.RegionProposalParameter regionProposalParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.RegionProposalParameter RegionProposalParam {
      get { return regionProposalParam_; }
      set {
        regionProposalParam_ = value;
      }
    }

    /// <summary>Field number for the "yolo_target_param" field.</summary>
    public const int YoloTargetParamFieldNumber = 204801;
    private global::Apollo.Perception.Inference.YoloTargetParameter yoloTargetParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.YoloTargetParameter YoloTargetParam {
      get { return yoloTargetParam_; }
      set {
        yoloTargetParam_ = value;
      }
    }

    /// <summary>Field number for the "yolo_anchors_param" field.</summary>
    public const int YoloAnchorsParamFieldNumber = 204802;
    private global::Apollo.Perception.Inference.YoloAnchorsParameter yoloAnchorsParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.YoloAnchorsParameter YoloAnchorsParam {
      get { return yoloAnchorsParam_; }
      set {
        yoloAnchorsParam_ = value;
      }
    }

    /// <summary>Field number for the "yolo_loss_param" field.</summary>
    public const int YoloLossParamFieldNumber = 204803;
    private global::Apollo.Perception.Inference.YoloLossParameter yoloLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.YoloLossParameter YoloLossParam {
      get { return yoloLossParam_; }
      set {
        yoloLossParam_ = value;
      }
    }

    /// <summary>Field number for the "yolo_dump_param" field.</summary>
    public const int YoloDumpParamFieldNumber = 204804;
    private global::Apollo.Perception.Inference.YoloDumpParameter yoloDumpParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.YoloDumpParameter YoloDumpParam {
      get { return yoloDumpParam_; }
      set {
        yoloDumpParam_ = value;
      }
    }

    /// <summary>Field number for the "padding_param" field.</summary>
    public const int PaddingParamFieldNumber = 1001;
    private global::Apollo.Perception.Inference.PaddingParameter paddingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PaddingParameter PaddingParam {
      get { return paddingParam_; }
      set {
        paddingParam_ = value;
      }
    }

    /// <summary>Field number for the "reorg_param" field.</summary>
    public const int ReorgParamFieldNumber = 301;
    private global::Apollo.Perception.Inference.ReorgParameter reorgParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ReorgParameter ReorgParam {
      get { return reorgParam_; }
      set {
        reorgParam_ = value;
      }
    }

    /// <summary>Field number for the "mvn_param" field.</summary>
    public const int MvnParamFieldNumber = 120;
    private global::Apollo.Perception.Inference.MVNParameter mvnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MVNParameter MvnParam {
      get { return mvnParam_; }
      set {
        mvnParam_ = value;
      }
    }

    /// <summary>Field number for the "norm_param" field.</summary>
    public const int NormParamFieldNumber = 206;
    private global::Apollo.Perception.Inference.NormalizeParameter normParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NormalizeParameter NormParam {
      get { return normParam_; }
      set {
        normParam_ = value;
      }
    }

    /// <summary>Field number for the "parameter_param" field.</summary>
    public const int ParameterParamFieldNumber = 145;
    private global::Apollo.Perception.Inference.ParameterParameter parameterParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ParameterParameter ParameterParam {
      get { return parameterParam_; }
      set {
        parameterParam_ = value;
      }
    }

    /// <summary>Field number for the "permute_param" field.</summary>
    public const int PermuteParamFieldNumber = 202;
    private global::Apollo.Perception.Inference.PermuteParameter permuteParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PermuteParameter PermuteParam {
      get { return permuteParam_; }
      set {
        permuteParam_ = value;
      }
    }

    /// <summary>Field number for the "pooling_param" field.</summary>
    public const int PoolingParamFieldNumber = 121;
    private global::Apollo.Perception.Inference.PoolingParameter poolingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PoolingParameter PoolingParam {
      get { return poolingParam_; }
      set {
        poolingParam_ = value;
      }
    }

    /// <summary>Field number for the "power_param" field.</summary>
    public const int PowerParamFieldNumber = 122;
    private global::Apollo.Perception.Inference.PowerParameter powerParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PowerParameter PowerParam {
      get { return powerParam_; }
      set {
        powerParam_ = value;
      }
    }

    /// <summary>Field number for the "prelu_param" field.</summary>
    public const int PreluParamFieldNumber = 131;
    private global::Apollo.Perception.Inference.PReLUParameter preluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PReLUParameter PreluParam {
      get { return preluParam_; }
      set {
        preluParam_ = value;
      }
    }

    /// <summary>Field number for the "prior_box_param" field.</summary>
    public const int PriorBoxParamFieldNumber = 203;
    private global::Apollo.Perception.Inference.PriorBoxParameter priorBoxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PriorBoxParameter PriorBoxParam {
      get { return priorBoxParam_; }
      set {
        priorBoxParam_ = value;
      }
    }

    /// <summary>Field number for the "python_param" field.</summary>
    public const int PythonParamFieldNumber = 130;
    private global::Apollo.Perception.Inference.PythonParameter pythonParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PythonParameter PythonParam {
      get { return pythonParam_; }
      set {
        pythonParam_ = value;
      }
    }

    /// <summary>Field number for the "recurrent_param" field.</summary>
    public const int RecurrentParamFieldNumber = 146;
    private global::Apollo.Perception.Inference.RecurrentParameter recurrentParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.RecurrentParameter RecurrentParam {
      get { return recurrentParam_; }
      set {
        recurrentParam_ = value;
      }
    }

    /// <summary>Field number for the "reduction_param" field.</summary>
    public const int ReductionParamFieldNumber = 136;
    private global::Apollo.Perception.Inference.ReductionParameter reductionParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ReductionParameter ReductionParam {
      get { return reductionParam_; }
      set {
        reductionParam_ = value;
      }
    }

    /// <summary>Field number for the "relu_param" field.</summary>
    public const int ReluParamFieldNumber = 123;
    private global::Apollo.Perception.Inference.ReLUParameter reluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ReLUParameter ReluParam {
      get { return reluParam_; }
      set {
        reluParam_ = value;
      }
    }

    /// <summary>Field number for the "reshape_param" field.</summary>
    public const int ReshapeParamFieldNumber = 133;
    private global::Apollo.Perception.Inference.ReshapeParameter reshapeParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ReshapeParameter ReshapeParam {
      get { return reshapeParam_; }
      set {
        reshapeParam_ = value;
      }
    }

    /// <summary>Field number for the "roi_pooling_param" field.</summary>
    public const int RoiPoolingParamFieldNumber = 8266711;
    private global::Apollo.Perception.Inference.ROIPoolingParameter roiPoolingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ROIPoolingParameter RoiPoolingParam {
      get { return roiPoolingParam_; }
      set {
        roiPoolingParam_ = value;
      }
    }

    /// <summary>Field number for the "scale_param" field.</summary>
    public const int ScaleParamFieldNumber = 142;
    private global::Apollo.Perception.Inference.ScaleParameter scaleParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ScaleParameter ScaleParam {
      get { return scaleParam_; }
      set {
        scaleParam_ = value;
      }
    }

    /// <summary>Field number for the "sigmoid_param" field.</summary>
    public const int SigmoidParamFieldNumber = 124;
    private global::Apollo.Perception.Inference.SigmoidParameter sigmoidParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SigmoidParameter SigmoidParam {
      get { return sigmoidParam_; }
      set {
        sigmoidParam_ = value;
      }
    }

    /// <summary>Field number for the "softmax_param" field.</summary>
    public const int SoftmaxParamFieldNumber = 125;
    private global::Apollo.Perception.Inference.SoftmaxParameter softmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SoftmaxParameter SoftmaxParam {
      get { return softmaxParam_; }
      set {
        softmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "spp_param" field.</summary>
    public const int SppParamFieldNumber = 132;
    private global::Apollo.Perception.Inference.SPPParameter sppParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SPPParameter SppParam {
      get { return sppParam_; }
      set {
        sppParam_ = value;
      }
    }

    /// <summary>Field number for the "slice_param" field.</summary>
    public const int SliceParamFieldNumber = 126;
    private global::Apollo.Perception.Inference.SliceParameter sliceParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SliceParameter SliceParam {
      get { return sliceParam_; }
      set {
        sliceParam_ = value;
      }
    }

    /// <summary>Field number for the "tanh_param" field.</summary>
    public const int TanhParamFieldNumber = 127;
    private global::Apollo.Perception.Inference.TanHParameter tanhParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.TanHParameter TanhParam {
      get { return tanhParam_; }
      set {
        tanhParam_ = value;
      }
    }

    /// <summary>Field number for the "threshold_param" field.</summary>
    public const int ThresholdParamFieldNumber = 128;
    private global::Apollo.Perception.Inference.ThresholdParameter thresholdParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ThresholdParameter ThresholdParam {
      get { return thresholdParam_; }
      set {
        thresholdParam_ = value;
      }
    }

    /// <summary>Field number for the "tile_param" field.</summary>
    public const int TileParamFieldNumber = 138;
    private global::Apollo.Perception.Inference.TileParameter tileParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.TileParameter TileParam {
      get { return tileParam_; }
      set {
        tileParam_ = value;
      }
    }

    /// <summary>Field number for the "video_data_param" field.</summary>
    public const int VideoDataParamFieldNumber = 207;
    private global::Apollo.Perception.Inference.VideoDataParameter videoDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.VideoDataParameter VideoDataParam {
      get { return videoDataParam_; }
      set {
        videoDataParam_ = value;
      }
    }

    /// <summary>Field number for the "window_data_param" field.</summary>
    public const int WindowDataParamFieldNumber = 129;
    private global::Apollo.Perception.Inference.WindowDataParameter windowDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.WindowDataParameter WindowDataParam {
      get { return windowDataParam_; }
      set {
        windowDataParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if(!bottom_.Equals(other.bottom_)) return false;
      if(!top_.Equals(other.top_)) return false;
      if (Phase != other.Phase) return false;
      if(!lossWeight_.Equals(other.lossWeight_)) return false;
      if(!param_.Equals(other.param_)) return false;
      if(!blobs_.Equals(other.blobs_)) return false;
      if(!propagateDown_.Equals(other.propagateDown_)) return false;
      if(!include_.Equals(other.include_)) return false;
      if(!exclude_.Equals(other.exclude_)) return false;
      if (!object.Equals(TransformParam, other.TransformParam)) return false;
      if (!object.Equals(LossParam, other.LossParam)) return false;
      if (!object.Equals(AccuracyParam, other.AccuracyParam)) return false;
      if (!object.Equals(AnnotatedDataParam, other.AnnotatedDataParam)) return false;
      if (!object.Equals(ArgmaxParam, other.ArgmaxParam)) return false;
      if (!object.Equals(BatchNormParam, other.BatchNormParam)) return false;
      if (!object.Equals(BiasParam, other.BiasParam)) return false;
      if (!object.Equals(ConcatParam, other.ConcatParam)) return false;
      if (!object.Equals(ContrastiveLossParam, other.ContrastiveLossParam)) return false;
      if (!object.Equals(ConvolutionParam, other.ConvolutionParam)) return false;
      if (!object.Equals(CropParam, other.CropParam)) return false;
      if (!object.Equals(DataParam, other.DataParam)) return false;
      if (!object.Equals(DetectionEvaluateParam, other.DetectionEvaluateParam)) return false;
      if (!object.Equals(DetectionOutputParam, other.DetectionOutputParam)) return false;
      if (!object.Equals(DropoutParam, other.DropoutParam)) return false;
      if (!object.Equals(DummyDataParam, other.DummyDataParam)) return false;
      if (!object.Equals(EltwiseParam, other.EltwiseParam)) return false;
      if (!object.Equals(EluParam, other.EluParam)) return false;
      if (!object.Equals(EmbedParam, other.EmbedParam)) return false;
      if (!object.Equals(ExpParam, other.ExpParam)) return false;
      if (!object.Equals(FlattenParam, other.FlattenParam)) return false;
      if (!object.Equals(Hdf5DataParam, other.Hdf5DataParam)) return false;
      if (!object.Equals(Hdf5OutputParam, other.Hdf5OutputParam)) return false;
      if (!object.Equals(HingeLossParam, other.HingeLossParam)) return false;
      if (!object.Equals(ImageDataParam, other.ImageDataParam)) return false;
      if(!yoloDataParam_.Equals(other.yoloDataParam_)) return false;
      if(!dataProbParam_.Equals(other.dataProbParam_)) return false;
      if (!object.Equals(InfogainLossParam, other.InfogainLossParam)) return false;
      if (!object.Equals(InnerProductParam, other.InnerProductParam)) return false;
      if (!object.Equals(InputParam, other.InputParam)) return false;
      if (!object.Equals(LogParam, other.LogParam)) return false;
      if (!object.Equals(LrnParam, other.LrnParam)) return false;
      if (!object.Equals(MemoryDataParam, other.MemoryDataParam)) return false;
      if (!object.Equals(MultiboxLossParam, other.MultiboxLossParam)) return false;
      if (!object.Equals(RegionParam, other.RegionParam)) return false;
      if (!object.Equals(RegionOutputParam, other.RegionOutputParam)) return false;
      if (!object.Equals(RegionProposalParam, other.RegionProposalParam)) return false;
      if (!object.Equals(YoloTargetParam, other.YoloTargetParam)) return false;
      if (!object.Equals(YoloAnchorsParam, other.YoloAnchorsParam)) return false;
      if (!object.Equals(YoloLossParam, other.YoloLossParam)) return false;
      if (!object.Equals(YoloDumpParam, other.YoloDumpParam)) return false;
      if (!object.Equals(PaddingParam, other.PaddingParam)) return false;
      if (!object.Equals(ReorgParam, other.ReorgParam)) return false;
      if (!object.Equals(MvnParam, other.MvnParam)) return false;
      if (!object.Equals(NormParam, other.NormParam)) return false;
      if (!object.Equals(ParameterParam, other.ParameterParam)) return false;
      if (!object.Equals(PermuteParam, other.PermuteParam)) return false;
      if (!object.Equals(PoolingParam, other.PoolingParam)) return false;
      if (!object.Equals(PowerParam, other.PowerParam)) return false;
      if (!object.Equals(PreluParam, other.PreluParam)) return false;
      if (!object.Equals(PriorBoxParam, other.PriorBoxParam)) return false;
      if (!object.Equals(PythonParam, other.PythonParam)) return false;
      if (!object.Equals(RecurrentParam, other.RecurrentParam)) return false;
      if (!object.Equals(ReductionParam, other.ReductionParam)) return false;
      if (!object.Equals(ReluParam, other.ReluParam)) return false;
      if (!object.Equals(ReshapeParam, other.ReshapeParam)) return false;
      if (!object.Equals(RoiPoolingParam, other.RoiPoolingParam)) return false;
      if (!object.Equals(ScaleParam, other.ScaleParam)) return false;
      if (!object.Equals(SigmoidParam, other.SigmoidParam)) return false;
      if (!object.Equals(SoftmaxParam, other.SoftmaxParam)) return false;
      if (!object.Equals(SppParam, other.SppParam)) return false;
      if (!object.Equals(SliceParam, other.SliceParam)) return false;
      if (!object.Equals(TanhParam, other.TanhParam)) return false;
      if (!object.Equals(ThresholdParam, other.ThresholdParam)) return false;
      if (!object.Equals(TileParam, other.TileParam)) return false;
      if (!object.Equals(VideoDataParam, other.VideoDataParam)) return false;
      if (!object.Equals(WindowDataParam, other.WindowDataParam)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= bottom_.GetHashCode();
      hash ^= top_.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      hash ^= lossWeight_.GetHashCode();
      hash ^= param_.GetHashCode();
      hash ^= blobs_.GetHashCode();
      hash ^= propagateDown_.GetHashCode();
      hash ^= include_.GetHashCode();
      hash ^= exclude_.GetHashCode();
      if (transformParam_ != null) hash ^= TransformParam.GetHashCode();
      if (lossParam_ != null) hash ^= LossParam.GetHashCode();
      if (accuracyParam_ != null) hash ^= AccuracyParam.GetHashCode();
      if (annotatedDataParam_ != null) hash ^= AnnotatedDataParam.GetHashCode();
      if (argmaxParam_ != null) hash ^= ArgmaxParam.GetHashCode();
      if (batchNormParam_ != null) hash ^= BatchNormParam.GetHashCode();
      if (biasParam_ != null) hash ^= BiasParam.GetHashCode();
      if (concatParam_ != null) hash ^= ConcatParam.GetHashCode();
      if (contrastiveLossParam_ != null) hash ^= ContrastiveLossParam.GetHashCode();
      if (convolutionParam_ != null) hash ^= ConvolutionParam.GetHashCode();
      if (cropParam_ != null) hash ^= CropParam.GetHashCode();
      if (dataParam_ != null) hash ^= DataParam.GetHashCode();
      if (detectionEvaluateParam_ != null) hash ^= DetectionEvaluateParam.GetHashCode();
      if (detectionOutputParam_ != null) hash ^= DetectionOutputParam.GetHashCode();
      if (dropoutParam_ != null) hash ^= DropoutParam.GetHashCode();
      if (dummyDataParam_ != null) hash ^= DummyDataParam.GetHashCode();
      if (eltwiseParam_ != null) hash ^= EltwiseParam.GetHashCode();
      if (eluParam_ != null) hash ^= EluParam.GetHashCode();
      if (embedParam_ != null) hash ^= EmbedParam.GetHashCode();
      if (expParam_ != null) hash ^= ExpParam.GetHashCode();
      if (flattenParam_ != null) hash ^= FlattenParam.GetHashCode();
      if (hdf5DataParam_ != null) hash ^= Hdf5DataParam.GetHashCode();
      if (hdf5OutputParam_ != null) hash ^= Hdf5OutputParam.GetHashCode();
      if (hingeLossParam_ != null) hash ^= HingeLossParam.GetHashCode();
      if (imageDataParam_ != null) hash ^= ImageDataParam.GetHashCode();
      hash ^= yoloDataParam_.GetHashCode();
      hash ^= dataProbParam_.GetHashCode();
      if (infogainLossParam_ != null) hash ^= InfogainLossParam.GetHashCode();
      if (innerProductParam_ != null) hash ^= InnerProductParam.GetHashCode();
      if (inputParam_ != null) hash ^= InputParam.GetHashCode();
      if (logParam_ != null) hash ^= LogParam.GetHashCode();
      if (lrnParam_ != null) hash ^= LrnParam.GetHashCode();
      if (memoryDataParam_ != null) hash ^= MemoryDataParam.GetHashCode();
      if (multiboxLossParam_ != null) hash ^= MultiboxLossParam.GetHashCode();
      if (regionParam_ != null) hash ^= RegionParam.GetHashCode();
      if (regionOutputParam_ != null) hash ^= RegionOutputParam.GetHashCode();
      if (regionProposalParam_ != null) hash ^= RegionProposalParam.GetHashCode();
      if (yoloTargetParam_ != null) hash ^= YoloTargetParam.GetHashCode();
      if (yoloAnchorsParam_ != null) hash ^= YoloAnchorsParam.GetHashCode();
      if (yoloLossParam_ != null) hash ^= YoloLossParam.GetHashCode();
      if (yoloDumpParam_ != null) hash ^= YoloDumpParam.GetHashCode();
      if (paddingParam_ != null) hash ^= PaddingParam.GetHashCode();
      if (reorgParam_ != null) hash ^= ReorgParam.GetHashCode();
      if (mvnParam_ != null) hash ^= MvnParam.GetHashCode();
      if (normParam_ != null) hash ^= NormParam.GetHashCode();
      if (parameterParam_ != null) hash ^= ParameterParam.GetHashCode();
      if (permuteParam_ != null) hash ^= PermuteParam.GetHashCode();
      if (poolingParam_ != null) hash ^= PoolingParam.GetHashCode();
      if (powerParam_ != null) hash ^= PowerParam.GetHashCode();
      if (preluParam_ != null) hash ^= PreluParam.GetHashCode();
      if (priorBoxParam_ != null) hash ^= PriorBoxParam.GetHashCode();
      if (pythonParam_ != null) hash ^= PythonParam.GetHashCode();
      if (recurrentParam_ != null) hash ^= RecurrentParam.GetHashCode();
      if (reductionParam_ != null) hash ^= ReductionParam.GetHashCode();
      if (reluParam_ != null) hash ^= ReluParam.GetHashCode();
      if (reshapeParam_ != null) hash ^= ReshapeParam.GetHashCode();
      if (roiPoolingParam_ != null) hash ^= RoiPoolingParam.GetHashCode();
      if (scaleParam_ != null) hash ^= ScaleParam.GetHashCode();
      if (sigmoidParam_ != null) hash ^= SigmoidParam.GetHashCode();
      if (softmaxParam_ != null) hash ^= SoftmaxParam.GetHashCode();
      if (sppParam_ != null) hash ^= SppParam.GetHashCode();
      if (sliceParam_ != null) hash ^= SliceParam.GetHashCode();
      if (tanhParam_ != null) hash ^= TanhParam.GetHashCode();
      if (thresholdParam_ != null) hash ^= ThresholdParam.GetHashCode();
      if (tileParam_ != null) hash ^= TileParam.GetHashCode();
      if (videoDataParam_ != null) hash ^= VideoDataParam.GetHashCode();
      if (windowDataParam_ != null) hash ^= WindowDataParam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      bottom_.WriteTo(output, _repeated_bottom_codec);
      top_.WriteTo(output, _repeated_top_codec);
      lossWeight_.WriteTo(output, _repeated_lossWeight_codec);
      param_.WriteTo(output, _repeated_param_codec);
      blobs_.WriteTo(output, _repeated_blobs_codec);
      include_.WriteTo(output, _repeated_include_codec);
      exclude_.WriteTo(output, _repeated_exclude_codec);
      if (Phase != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Phase);
      }
      propagateDown_.WriteTo(output, _repeated_propagateDown_codec);
      if (transformParam_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(TransformParam);
      }
      if (lossParam_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(LossParam);
      }
      if (accuracyParam_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(AccuracyParam);
      }
      if (argmaxParam_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(ArgmaxParam);
      }
      if (concatParam_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(ConcatParam);
      }
      if (contrastiveLossParam_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(ContrastiveLossParam);
      }
      if (convolutionParam_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(ConvolutionParam);
      }
      if (dataParam_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(DataParam);
      }
      if (dropoutParam_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(DropoutParam);
      }
      if (dummyDataParam_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(DummyDataParam);
      }
      if (eltwiseParam_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(EltwiseParam);
      }
      if (expParam_ != null) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(ExpParam);
      }
      if (hdf5DataParam_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(Hdf5OutputParam);
      }
      if (hingeLossParam_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(HingeLossParam);
      }
      if (imageDataParam_ != null) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(ImageDataParam);
      }
      if (infogainLossParam_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(InnerProductParam);
      }
      if (lrnParam_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(LrnParam);
      }
      if (memoryDataParam_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(MemoryDataParam);
      }
      if (mvnParam_ != null) {
        output.WriteRawTag(194, 7);
        output.WriteMessage(MvnParam);
      }
      if (poolingParam_ != null) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(PoolingParam);
      }
      if (powerParam_ != null) {
        output.WriteRawTag(210, 7);
        output.WriteMessage(PowerParam);
      }
      if (reluParam_ != null) {
        output.WriteRawTag(218, 7);
        output.WriteMessage(ReluParam);
      }
      if (sigmoidParam_ != null) {
        output.WriteRawTag(226, 7);
        output.WriteMessage(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(SoftmaxParam);
      }
      if (sliceParam_ != null) {
        output.WriteRawTag(242, 7);
        output.WriteMessage(SliceParam);
      }
      if (tanhParam_ != null) {
        output.WriteRawTag(250, 7);
        output.WriteMessage(TanhParam);
      }
      if (thresholdParam_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(ThresholdParam);
      }
      if (windowDataParam_ != null) {
        output.WriteRawTag(138, 8);
        output.WriteMessage(WindowDataParam);
      }
      if (pythonParam_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(PythonParam);
      }
      if (preluParam_ != null) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(PreluParam);
      }
      if (sppParam_ != null) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(SppParam);
      }
      if (reshapeParam_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(ReshapeParam);
      }
      if (logParam_ != null) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(LogParam);
      }
      if (flattenParam_ != null) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(FlattenParam);
      }
      if (reductionParam_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(ReductionParam);
      }
      if (embedParam_ != null) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(EmbedParam);
      }
      if (tileParam_ != null) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(TileParam);
      }
      if (batchNormParam_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(BatchNormParam);
      }
      if (eluParam_ != null) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(EluParam);
      }
      if (biasParam_ != null) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(BiasParam);
      }
      if (scaleParam_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(ScaleParam);
      }
      if (inputParam_ != null) {
        output.WriteRawTag(250, 8);
        output.WriteMessage(InputParam);
      }
      if (cropParam_ != null) {
        output.WriteRawTag(130, 9);
        output.WriteMessage(CropParam);
      }
      if (parameterParam_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(ParameterParam);
      }
      if (recurrentParam_ != null) {
        output.WriteRawTag(146, 9);
        output.WriteMessage(RecurrentParam);
      }
      if (annotatedDataParam_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(AnnotatedDataParam);
      }
      if (multiboxLossParam_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(MultiboxLossParam);
      }
      if (permuteParam_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(PermuteParam);
      }
      if (priorBoxParam_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(PriorBoxParam);
      }
      if (detectionOutputParam_ != null) {
        output.WriteRawTag(226, 12);
        output.WriteMessage(DetectionOutputParam);
      }
      if (detectionEvaluateParam_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(DetectionEvaluateParam);
      }
      if (normParam_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(NormParam);
      }
      if (videoDataParam_ != null) {
        output.WriteRawTag(250, 12);
        output.WriteMessage(VideoDataParam);
      }
      if (regionParam_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(RegionParam);
      }
      if (reorgParam_ != null) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(ReorgParam);
      }
      if (regionOutputParam_ != null) {
        output.WriteRawTag(178, 19);
        output.WriteMessage(RegionOutputParam);
      }
      if (regionProposalParam_ != null) {
        output.WriteRawTag(130, 20);
        output.WriteMessage(RegionProposalParam);
      }
      if (paddingParam_ != null) {
        output.WriteRawTag(202, 62);
        output.WriteMessage(PaddingParam);
      }
      if (yoloTargetParam_ != null) {
        output.WriteRawTag(138, 128, 100);
        output.WriteMessage(YoloTargetParam);
      }
      if (yoloAnchorsParam_ != null) {
        output.WriteRawTag(146, 128, 100);
        output.WriteMessage(YoloAnchorsParam);
      }
      if (yoloLossParam_ != null) {
        output.WriteRawTag(154, 128, 100);
        output.WriteMessage(YoloLossParam);
      }
      if (yoloDumpParam_ != null) {
        output.WriteRawTag(162, 128, 100);
        output.WriteMessage(YoloDumpParam);
      }
      yoloDataParam_.WriteTo(output, _repeated_yoloDataParam_codec);
      dataProbParam_.WriteTo(output, _repeated_dataProbParam_codec);
      if (roiPoolingParam_ != null) {
        output.WriteRawTag(186, 189, 196, 31);
        output.WriteMessage(RoiPoolingParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += bottom_.CalculateSize(_repeated_bottom_codec);
      size += top_.CalculateSize(_repeated_top_codec);
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      size += lossWeight_.CalculateSize(_repeated_lossWeight_codec);
      size += param_.CalculateSize(_repeated_param_codec);
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      size += propagateDown_.CalculateSize(_repeated_propagateDown_codec);
      size += include_.CalculateSize(_repeated_include_codec);
      size += exclude_.CalculateSize(_repeated_exclude_codec);
      if (transformParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformParam);
      }
      if (lossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LossParam);
      }
      if (accuracyParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccuracyParam);
      }
      if (annotatedDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnnotatedDataParam);
      }
      if (argmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArgmaxParam);
      }
      if (batchNormParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BatchNormParam);
      }
      if (biasParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BiasParam);
      }
      if (concatParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConcatParam);
      }
      if (contrastiveLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContrastiveLossParam);
      }
      if (convolutionParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConvolutionParam);
      }
      if (cropParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CropParam);
      }
      if (dataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DataParam);
      }
      if (detectionEvaluateParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DetectionEvaluateParam);
      }
      if (detectionOutputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DetectionOutputParam);
      }
      if (dropoutParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropoutParam);
      }
      if (dummyDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DummyDataParam);
      }
      if (eltwiseParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EltwiseParam);
      }
      if (eluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EluParam);
      }
      if (embedParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EmbedParam);
      }
      if (expParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpParam);
      }
      if (flattenParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FlattenParam);
      }
      if (hdf5DataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hdf5OutputParam);
      }
      if (hingeLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HingeLossParam);
      }
      if (imageDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImageDataParam);
      }
      size += yoloDataParam_.CalculateSize(_repeated_yoloDataParam_codec);
      size += dataProbParam_.CalculateSize(_repeated_dataProbParam_codec);
      if (infogainLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InnerProductParam);
      }
      if (inputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputParam);
      }
      if (logParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogParam);
      }
      if (lrnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LrnParam);
      }
      if (memoryDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MemoryDataParam);
      }
      if (multiboxLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MultiboxLossParam);
      }
      if (regionParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegionParam);
      }
      if (regionOutputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegionOutputParam);
      }
      if (regionProposalParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegionProposalParam);
      }
      if (yoloTargetParam_ != null) {
        size += 3 + pb::CodedOutputStream.ComputeMessageSize(YoloTargetParam);
      }
      if (yoloAnchorsParam_ != null) {
        size += 3 + pb::CodedOutputStream.ComputeMessageSize(YoloAnchorsParam);
      }
      if (yoloLossParam_ != null) {
        size += 3 + pb::CodedOutputStream.ComputeMessageSize(YoloLossParam);
      }
      if (yoloDumpParam_ != null) {
        size += 3 + pb::CodedOutputStream.ComputeMessageSize(YoloDumpParam);
      }
      if (paddingParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PaddingParam);
      }
      if (reorgParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReorgParam);
      }
      if (mvnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MvnParam);
      }
      if (normParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NormParam);
      }
      if (parameterParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParameterParam);
      }
      if (permuteParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PermuteParam);
      }
      if (poolingParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PoolingParam);
      }
      if (powerParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerParam);
      }
      if (preluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PreluParam);
      }
      if (priorBoxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PriorBoxParam);
      }
      if (pythonParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PythonParam);
      }
      if (recurrentParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RecurrentParam);
      }
      if (reductionParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReductionParam);
      }
      if (reluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReluParam);
      }
      if (reshapeParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReshapeParam);
      }
      if (roiPoolingParam_ != null) {
        size += 4 + pb::CodedOutputStream.ComputeMessageSize(RoiPoolingParam);
      }
      if (scaleParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleParam);
      }
      if (sigmoidParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SoftmaxParam);
      }
      if (sppParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SppParam);
      }
      if (sliceParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SliceParam);
      }
      if (tanhParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TanhParam);
      }
      if (thresholdParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ThresholdParam);
      }
      if (tileParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TileParam);
      }
      if (videoDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VideoDataParam);
      }
      if (windowDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WindowDataParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      bottom_.Add(other.bottom_);
      top_.Add(other.top_);
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      lossWeight_.Add(other.lossWeight_);
      param_.Add(other.param_);
      blobs_.Add(other.blobs_);
      propagateDown_.Add(other.propagateDown_);
      include_.Add(other.include_);
      exclude_.Add(other.exclude_);
      if (other.transformParam_ != null) {
        if (transformParam_ == null) {
          transformParam_ = new global::Apollo.Perception.Inference.TransformationParameter();
        }
        TransformParam.MergeFrom(other.TransformParam);
      }
      if (other.lossParam_ != null) {
        if (lossParam_ == null) {
          lossParam_ = new global::Apollo.Perception.Inference.LossParameter();
        }
        LossParam.MergeFrom(other.LossParam);
      }
      if (other.accuracyParam_ != null) {
        if (accuracyParam_ == null) {
          accuracyParam_ = new global::Apollo.Perception.Inference.AccuracyParameter();
        }
        AccuracyParam.MergeFrom(other.AccuracyParam);
      }
      if (other.annotatedDataParam_ != null) {
        if (annotatedDataParam_ == null) {
          annotatedDataParam_ = new global::Apollo.Perception.Inference.AnnotatedDataParameter();
        }
        AnnotatedDataParam.MergeFrom(other.AnnotatedDataParam);
      }
      if (other.argmaxParam_ != null) {
        if (argmaxParam_ == null) {
          argmaxParam_ = new global::Apollo.Perception.Inference.ArgMaxParameter();
        }
        ArgmaxParam.MergeFrom(other.ArgmaxParam);
      }
      if (other.batchNormParam_ != null) {
        if (batchNormParam_ == null) {
          batchNormParam_ = new global::Apollo.Perception.Inference.BatchNormParameter();
        }
        BatchNormParam.MergeFrom(other.BatchNormParam);
      }
      if (other.biasParam_ != null) {
        if (biasParam_ == null) {
          biasParam_ = new global::Apollo.Perception.Inference.BiasParameter();
        }
        BiasParam.MergeFrom(other.BiasParam);
      }
      if (other.concatParam_ != null) {
        if (concatParam_ == null) {
          concatParam_ = new global::Apollo.Perception.Inference.ConcatParameter();
        }
        ConcatParam.MergeFrom(other.ConcatParam);
      }
      if (other.contrastiveLossParam_ != null) {
        if (contrastiveLossParam_ == null) {
          contrastiveLossParam_ = new global::Apollo.Perception.Inference.ContrastiveLossParameter();
        }
        ContrastiveLossParam.MergeFrom(other.ContrastiveLossParam);
      }
      if (other.convolutionParam_ != null) {
        if (convolutionParam_ == null) {
          convolutionParam_ = new global::Apollo.Perception.Inference.ConvolutionParameter();
        }
        ConvolutionParam.MergeFrom(other.ConvolutionParam);
      }
      if (other.cropParam_ != null) {
        if (cropParam_ == null) {
          cropParam_ = new global::Apollo.Perception.Inference.CropParameter();
        }
        CropParam.MergeFrom(other.CropParam);
      }
      if (other.dataParam_ != null) {
        if (dataParam_ == null) {
          dataParam_ = new global::Apollo.Perception.Inference.DataParameter();
        }
        DataParam.MergeFrom(other.DataParam);
      }
      if (other.detectionEvaluateParam_ != null) {
        if (detectionEvaluateParam_ == null) {
          detectionEvaluateParam_ = new global::Apollo.Perception.Inference.DetectionEvaluateParameter();
        }
        DetectionEvaluateParam.MergeFrom(other.DetectionEvaluateParam);
      }
      if (other.detectionOutputParam_ != null) {
        if (detectionOutputParam_ == null) {
          detectionOutputParam_ = new global::Apollo.Perception.Inference.DetectionOutputParameter();
        }
        DetectionOutputParam.MergeFrom(other.DetectionOutputParam);
      }
      if (other.dropoutParam_ != null) {
        if (dropoutParam_ == null) {
          dropoutParam_ = new global::Apollo.Perception.Inference.DropoutParameter();
        }
        DropoutParam.MergeFrom(other.DropoutParam);
      }
      if (other.dummyDataParam_ != null) {
        if (dummyDataParam_ == null) {
          dummyDataParam_ = new global::Apollo.Perception.Inference.DummyDataParameter();
        }
        DummyDataParam.MergeFrom(other.DummyDataParam);
      }
      if (other.eltwiseParam_ != null) {
        if (eltwiseParam_ == null) {
          eltwiseParam_ = new global::Apollo.Perception.Inference.EltwiseParameter();
        }
        EltwiseParam.MergeFrom(other.EltwiseParam);
      }
      if (other.eluParam_ != null) {
        if (eluParam_ == null) {
          eluParam_ = new global::Apollo.Perception.Inference.ELUParameter();
        }
        EluParam.MergeFrom(other.EluParam);
      }
      if (other.embedParam_ != null) {
        if (embedParam_ == null) {
          embedParam_ = new global::Apollo.Perception.Inference.EmbedParameter();
        }
        EmbedParam.MergeFrom(other.EmbedParam);
      }
      if (other.expParam_ != null) {
        if (expParam_ == null) {
          expParam_ = new global::Apollo.Perception.Inference.ExpParameter();
        }
        ExpParam.MergeFrom(other.ExpParam);
      }
      if (other.flattenParam_ != null) {
        if (flattenParam_ == null) {
          flattenParam_ = new global::Apollo.Perception.Inference.FlattenParameter();
        }
        FlattenParam.MergeFrom(other.FlattenParam);
      }
      if (other.hdf5DataParam_ != null) {
        if (hdf5DataParam_ == null) {
          hdf5DataParam_ = new global::Apollo.Perception.Inference.HDF5DataParameter();
        }
        Hdf5DataParam.MergeFrom(other.Hdf5DataParam);
      }
      if (other.hdf5OutputParam_ != null) {
        if (hdf5OutputParam_ == null) {
          hdf5OutputParam_ = new global::Apollo.Perception.Inference.HDF5OutputParameter();
        }
        Hdf5OutputParam.MergeFrom(other.Hdf5OutputParam);
      }
      if (other.hingeLossParam_ != null) {
        if (hingeLossParam_ == null) {
          hingeLossParam_ = new global::Apollo.Perception.Inference.HingeLossParameter();
        }
        HingeLossParam.MergeFrom(other.HingeLossParam);
      }
      if (other.imageDataParam_ != null) {
        if (imageDataParam_ == null) {
          imageDataParam_ = new global::Apollo.Perception.Inference.ImageDataParameter();
        }
        ImageDataParam.MergeFrom(other.ImageDataParam);
      }
      yoloDataParam_.Add(other.yoloDataParam_);
      dataProbParam_.Add(other.dataProbParam_);
      if (other.infogainLossParam_ != null) {
        if (infogainLossParam_ == null) {
          infogainLossParam_ = new global::Apollo.Perception.Inference.InfogainLossParameter();
        }
        InfogainLossParam.MergeFrom(other.InfogainLossParam);
      }
      if (other.innerProductParam_ != null) {
        if (innerProductParam_ == null) {
          innerProductParam_ = new global::Apollo.Perception.Inference.InnerProductParameter();
        }
        InnerProductParam.MergeFrom(other.InnerProductParam);
      }
      if (other.inputParam_ != null) {
        if (inputParam_ == null) {
          inputParam_ = new global::Apollo.Perception.Inference.InputParameter();
        }
        InputParam.MergeFrom(other.InputParam);
      }
      if (other.logParam_ != null) {
        if (logParam_ == null) {
          logParam_ = new global::Apollo.Perception.Inference.LogParameter();
        }
        LogParam.MergeFrom(other.LogParam);
      }
      if (other.lrnParam_ != null) {
        if (lrnParam_ == null) {
          lrnParam_ = new global::Apollo.Perception.Inference.LRNParameter();
        }
        LrnParam.MergeFrom(other.LrnParam);
      }
      if (other.memoryDataParam_ != null) {
        if (memoryDataParam_ == null) {
          memoryDataParam_ = new global::Apollo.Perception.Inference.MemoryDataParameter();
        }
        MemoryDataParam.MergeFrom(other.MemoryDataParam);
      }
      if (other.multiboxLossParam_ != null) {
        if (multiboxLossParam_ == null) {
          multiboxLossParam_ = new global::Apollo.Perception.Inference.MultiBoxLossParameter();
        }
        MultiboxLossParam.MergeFrom(other.MultiboxLossParam);
      }
      if (other.regionParam_ != null) {
        if (regionParam_ == null) {
          regionParam_ = new global::Apollo.Perception.Inference.RegionParameter();
        }
        RegionParam.MergeFrom(other.RegionParam);
      }
      if (other.regionOutputParam_ != null) {
        if (regionOutputParam_ == null) {
          regionOutputParam_ = new global::Apollo.Perception.Inference.RegionOutputParameter();
        }
        RegionOutputParam.MergeFrom(other.RegionOutputParam);
      }
      if (other.regionProposalParam_ != null) {
        if (regionProposalParam_ == null) {
          regionProposalParam_ = new global::Apollo.Perception.Inference.RegionProposalParameter();
        }
        RegionProposalParam.MergeFrom(other.RegionProposalParam);
      }
      if (other.yoloTargetParam_ != null) {
        if (yoloTargetParam_ == null) {
          yoloTargetParam_ = new global::Apollo.Perception.Inference.YoloTargetParameter();
        }
        YoloTargetParam.MergeFrom(other.YoloTargetParam);
      }
      if (other.yoloAnchorsParam_ != null) {
        if (yoloAnchorsParam_ == null) {
          yoloAnchorsParam_ = new global::Apollo.Perception.Inference.YoloAnchorsParameter();
        }
        YoloAnchorsParam.MergeFrom(other.YoloAnchorsParam);
      }
      if (other.yoloLossParam_ != null) {
        if (yoloLossParam_ == null) {
          yoloLossParam_ = new global::Apollo.Perception.Inference.YoloLossParameter();
        }
        YoloLossParam.MergeFrom(other.YoloLossParam);
      }
      if (other.yoloDumpParam_ != null) {
        if (yoloDumpParam_ == null) {
          yoloDumpParam_ = new global::Apollo.Perception.Inference.YoloDumpParameter();
        }
        YoloDumpParam.MergeFrom(other.YoloDumpParam);
      }
      if (other.paddingParam_ != null) {
        if (paddingParam_ == null) {
          paddingParam_ = new global::Apollo.Perception.Inference.PaddingParameter();
        }
        PaddingParam.MergeFrom(other.PaddingParam);
      }
      if (other.reorgParam_ != null) {
        if (reorgParam_ == null) {
          reorgParam_ = new global::Apollo.Perception.Inference.ReorgParameter();
        }
        ReorgParam.MergeFrom(other.ReorgParam);
      }
      if (other.mvnParam_ != null) {
        if (mvnParam_ == null) {
          mvnParam_ = new global::Apollo.Perception.Inference.MVNParameter();
        }
        MvnParam.MergeFrom(other.MvnParam);
      }
      if (other.normParam_ != null) {
        if (normParam_ == null) {
          normParam_ = new global::Apollo.Perception.Inference.NormalizeParameter();
        }
        NormParam.MergeFrom(other.NormParam);
      }
      if (other.parameterParam_ != null) {
        if (parameterParam_ == null) {
          parameterParam_ = new global::Apollo.Perception.Inference.ParameterParameter();
        }
        ParameterParam.MergeFrom(other.ParameterParam);
      }
      if (other.permuteParam_ != null) {
        if (permuteParam_ == null) {
          permuteParam_ = new global::Apollo.Perception.Inference.PermuteParameter();
        }
        PermuteParam.MergeFrom(other.PermuteParam);
      }
      if (other.poolingParam_ != null) {
        if (poolingParam_ == null) {
          poolingParam_ = new global::Apollo.Perception.Inference.PoolingParameter();
        }
        PoolingParam.MergeFrom(other.PoolingParam);
      }
      if (other.powerParam_ != null) {
        if (powerParam_ == null) {
          powerParam_ = new global::Apollo.Perception.Inference.PowerParameter();
        }
        PowerParam.MergeFrom(other.PowerParam);
      }
      if (other.preluParam_ != null) {
        if (preluParam_ == null) {
          preluParam_ = new global::Apollo.Perception.Inference.PReLUParameter();
        }
        PreluParam.MergeFrom(other.PreluParam);
      }
      if (other.priorBoxParam_ != null) {
        if (priorBoxParam_ == null) {
          priorBoxParam_ = new global::Apollo.Perception.Inference.PriorBoxParameter();
        }
        PriorBoxParam.MergeFrom(other.PriorBoxParam);
      }
      if (other.pythonParam_ != null) {
        if (pythonParam_ == null) {
          pythonParam_ = new global::Apollo.Perception.Inference.PythonParameter();
        }
        PythonParam.MergeFrom(other.PythonParam);
      }
      if (other.recurrentParam_ != null) {
        if (recurrentParam_ == null) {
          recurrentParam_ = new global::Apollo.Perception.Inference.RecurrentParameter();
        }
        RecurrentParam.MergeFrom(other.RecurrentParam);
      }
      if (other.reductionParam_ != null) {
        if (reductionParam_ == null) {
          reductionParam_ = new global::Apollo.Perception.Inference.ReductionParameter();
        }
        ReductionParam.MergeFrom(other.ReductionParam);
      }
      if (other.reluParam_ != null) {
        if (reluParam_ == null) {
          reluParam_ = new global::Apollo.Perception.Inference.ReLUParameter();
        }
        ReluParam.MergeFrom(other.ReluParam);
      }
      if (other.reshapeParam_ != null) {
        if (reshapeParam_ == null) {
          reshapeParam_ = new global::Apollo.Perception.Inference.ReshapeParameter();
        }
        ReshapeParam.MergeFrom(other.ReshapeParam);
      }
      if (other.roiPoolingParam_ != null) {
        if (roiPoolingParam_ == null) {
          roiPoolingParam_ = new global::Apollo.Perception.Inference.ROIPoolingParameter();
        }
        RoiPoolingParam.MergeFrom(other.RoiPoolingParam);
      }
      if (other.scaleParam_ != null) {
        if (scaleParam_ == null) {
          scaleParam_ = new global::Apollo.Perception.Inference.ScaleParameter();
        }
        ScaleParam.MergeFrom(other.ScaleParam);
      }
      if (other.sigmoidParam_ != null) {
        if (sigmoidParam_ == null) {
          sigmoidParam_ = new global::Apollo.Perception.Inference.SigmoidParameter();
        }
        SigmoidParam.MergeFrom(other.SigmoidParam);
      }
      if (other.softmaxParam_ != null) {
        if (softmaxParam_ == null) {
          softmaxParam_ = new global::Apollo.Perception.Inference.SoftmaxParameter();
        }
        SoftmaxParam.MergeFrom(other.SoftmaxParam);
      }
      if (other.sppParam_ != null) {
        if (sppParam_ == null) {
          sppParam_ = new global::Apollo.Perception.Inference.SPPParameter();
        }
        SppParam.MergeFrom(other.SppParam);
      }
      if (other.sliceParam_ != null) {
        if (sliceParam_ == null) {
          sliceParam_ = new global::Apollo.Perception.Inference.SliceParameter();
        }
        SliceParam.MergeFrom(other.SliceParam);
      }
      if (other.tanhParam_ != null) {
        if (tanhParam_ == null) {
          tanhParam_ = new global::Apollo.Perception.Inference.TanHParameter();
        }
        TanhParam.MergeFrom(other.TanhParam);
      }
      if (other.thresholdParam_ != null) {
        if (thresholdParam_ == null) {
          thresholdParam_ = new global::Apollo.Perception.Inference.ThresholdParameter();
        }
        ThresholdParam.MergeFrom(other.ThresholdParam);
      }
      if (other.tileParam_ != null) {
        if (tileParam_ == null) {
          tileParam_ = new global::Apollo.Perception.Inference.TileParameter();
        }
        TileParam.MergeFrom(other.TileParam);
      }
      if (other.videoDataParam_ != null) {
        if (videoDataParam_ == null) {
          videoDataParam_ = new global::Apollo.Perception.Inference.VideoDataParameter();
        }
        VideoDataParam.MergeFrom(other.VideoDataParam);
      }
      if (other.windowDataParam_ != null) {
        if (windowDataParam_ == null) {
          windowDataParam_ = new global::Apollo.Perception.Inference.WindowDataParameter();
        }
        WindowDataParam.MergeFrom(other.WindowDataParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            bottom_.AddEntriesFrom(input, _repeated_bottom_codec);
            break;
          }
          case 34: {
            top_.AddEntriesFrom(input, _repeated_top_codec);
            break;
          }
          case 42:
          case 45: {
            lossWeight_.AddEntriesFrom(input, _repeated_lossWeight_codec);
            break;
          }
          case 50: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 58: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
          case 66: {
            include_.AddEntriesFrom(input, _repeated_include_codec);
            break;
          }
          case 74: {
            exclude_.AddEntriesFrom(input, _repeated_exclude_codec);
            break;
          }
          case 80: {
            phase_ = (global::Apollo.Perception.Inference.Phase) input.ReadEnum();
            break;
          }
          case 90:
          case 88: {
            propagateDown_.AddEntriesFrom(input, _repeated_propagateDown_codec);
            break;
          }
          case 802: {
            if (transformParam_ == null) {
              transformParam_ = new global::Apollo.Perception.Inference.TransformationParameter();
            }
            input.ReadMessage(transformParam_);
            break;
          }
          case 810: {
            if (lossParam_ == null) {
              lossParam_ = new global::Apollo.Perception.Inference.LossParameter();
            }
            input.ReadMessage(lossParam_);
            break;
          }
          case 818: {
            if (accuracyParam_ == null) {
              accuracyParam_ = new global::Apollo.Perception.Inference.AccuracyParameter();
            }
            input.ReadMessage(accuracyParam_);
            break;
          }
          case 826: {
            if (argmaxParam_ == null) {
              argmaxParam_ = new global::Apollo.Perception.Inference.ArgMaxParameter();
            }
            input.ReadMessage(argmaxParam_);
            break;
          }
          case 834: {
            if (concatParam_ == null) {
              concatParam_ = new global::Apollo.Perception.Inference.ConcatParameter();
            }
            input.ReadMessage(concatParam_);
            break;
          }
          case 842: {
            if (contrastiveLossParam_ == null) {
              contrastiveLossParam_ = new global::Apollo.Perception.Inference.ContrastiveLossParameter();
            }
            input.ReadMessage(contrastiveLossParam_);
            break;
          }
          case 850: {
            if (convolutionParam_ == null) {
              convolutionParam_ = new global::Apollo.Perception.Inference.ConvolutionParameter();
            }
            input.ReadMessage(convolutionParam_);
            break;
          }
          case 858: {
            if (dataParam_ == null) {
              dataParam_ = new global::Apollo.Perception.Inference.DataParameter();
            }
            input.ReadMessage(dataParam_);
            break;
          }
          case 866: {
            if (dropoutParam_ == null) {
              dropoutParam_ = new global::Apollo.Perception.Inference.DropoutParameter();
            }
            input.ReadMessage(dropoutParam_);
            break;
          }
          case 874: {
            if (dummyDataParam_ == null) {
              dummyDataParam_ = new global::Apollo.Perception.Inference.DummyDataParameter();
            }
            input.ReadMessage(dummyDataParam_);
            break;
          }
          case 882: {
            if (eltwiseParam_ == null) {
              eltwiseParam_ = new global::Apollo.Perception.Inference.EltwiseParameter();
            }
            input.ReadMessage(eltwiseParam_);
            break;
          }
          case 890: {
            if (expParam_ == null) {
              expParam_ = new global::Apollo.Perception.Inference.ExpParameter();
            }
            input.ReadMessage(expParam_);
            break;
          }
          case 898: {
            if (hdf5DataParam_ == null) {
              hdf5DataParam_ = new global::Apollo.Perception.Inference.HDF5DataParameter();
            }
            input.ReadMessage(hdf5DataParam_);
            break;
          }
          case 906: {
            if (hdf5OutputParam_ == null) {
              hdf5OutputParam_ = new global::Apollo.Perception.Inference.HDF5OutputParameter();
            }
            input.ReadMessage(hdf5OutputParam_);
            break;
          }
          case 914: {
            if (hingeLossParam_ == null) {
              hingeLossParam_ = new global::Apollo.Perception.Inference.HingeLossParameter();
            }
            input.ReadMessage(hingeLossParam_);
            break;
          }
          case 922: {
            if (imageDataParam_ == null) {
              imageDataParam_ = new global::Apollo.Perception.Inference.ImageDataParameter();
            }
            input.ReadMessage(imageDataParam_);
            break;
          }
          case 930: {
            if (infogainLossParam_ == null) {
              infogainLossParam_ = new global::Apollo.Perception.Inference.InfogainLossParameter();
            }
            input.ReadMessage(infogainLossParam_);
            break;
          }
          case 938: {
            if (innerProductParam_ == null) {
              innerProductParam_ = new global::Apollo.Perception.Inference.InnerProductParameter();
            }
            input.ReadMessage(innerProductParam_);
            break;
          }
          case 946: {
            if (lrnParam_ == null) {
              lrnParam_ = new global::Apollo.Perception.Inference.LRNParameter();
            }
            input.ReadMessage(lrnParam_);
            break;
          }
          case 954: {
            if (memoryDataParam_ == null) {
              memoryDataParam_ = new global::Apollo.Perception.Inference.MemoryDataParameter();
            }
            input.ReadMessage(memoryDataParam_);
            break;
          }
          case 962: {
            if (mvnParam_ == null) {
              mvnParam_ = new global::Apollo.Perception.Inference.MVNParameter();
            }
            input.ReadMessage(mvnParam_);
            break;
          }
          case 970: {
            if (poolingParam_ == null) {
              poolingParam_ = new global::Apollo.Perception.Inference.PoolingParameter();
            }
            input.ReadMessage(poolingParam_);
            break;
          }
          case 978: {
            if (powerParam_ == null) {
              powerParam_ = new global::Apollo.Perception.Inference.PowerParameter();
            }
            input.ReadMessage(powerParam_);
            break;
          }
          case 986: {
            if (reluParam_ == null) {
              reluParam_ = new global::Apollo.Perception.Inference.ReLUParameter();
            }
            input.ReadMessage(reluParam_);
            break;
          }
          case 994: {
            if (sigmoidParam_ == null) {
              sigmoidParam_ = new global::Apollo.Perception.Inference.SigmoidParameter();
            }
            input.ReadMessage(sigmoidParam_);
            break;
          }
          case 1002: {
            if (softmaxParam_ == null) {
              softmaxParam_ = new global::Apollo.Perception.Inference.SoftmaxParameter();
            }
            input.ReadMessage(softmaxParam_);
            break;
          }
          case 1010: {
            if (sliceParam_ == null) {
              sliceParam_ = new global::Apollo.Perception.Inference.SliceParameter();
            }
            input.ReadMessage(sliceParam_);
            break;
          }
          case 1018: {
            if (tanhParam_ == null) {
              tanhParam_ = new global::Apollo.Perception.Inference.TanHParameter();
            }
            input.ReadMessage(tanhParam_);
            break;
          }
          case 1026: {
            if (thresholdParam_ == null) {
              thresholdParam_ = new global::Apollo.Perception.Inference.ThresholdParameter();
            }
            input.ReadMessage(thresholdParam_);
            break;
          }
          case 1034: {
            if (windowDataParam_ == null) {
              windowDataParam_ = new global::Apollo.Perception.Inference.WindowDataParameter();
            }
            input.ReadMessage(windowDataParam_);
            break;
          }
          case 1042: {
            if (pythonParam_ == null) {
              pythonParam_ = new global::Apollo.Perception.Inference.PythonParameter();
            }
            input.ReadMessage(pythonParam_);
            break;
          }
          case 1050: {
            if (preluParam_ == null) {
              preluParam_ = new global::Apollo.Perception.Inference.PReLUParameter();
            }
            input.ReadMessage(preluParam_);
            break;
          }
          case 1058: {
            if (sppParam_ == null) {
              sppParam_ = new global::Apollo.Perception.Inference.SPPParameter();
            }
            input.ReadMessage(sppParam_);
            break;
          }
          case 1066: {
            if (reshapeParam_ == null) {
              reshapeParam_ = new global::Apollo.Perception.Inference.ReshapeParameter();
            }
            input.ReadMessage(reshapeParam_);
            break;
          }
          case 1074: {
            if (logParam_ == null) {
              logParam_ = new global::Apollo.Perception.Inference.LogParameter();
            }
            input.ReadMessage(logParam_);
            break;
          }
          case 1082: {
            if (flattenParam_ == null) {
              flattenParam_ = new global::Apollo.Perception.Inference.FlattenParameter();
            }
            input.ReadMessage(flattenParam_);
            break;
          }
          case 1090: {
            if (reductionParam_ == null) {
              reductionParam_ = new global::Apollo.Perception.Inference.ReductionParameter();
            }
            input.ReadMessage(reductionParam_);
            break;
          }
          case 1098: {
            if (embedParam_ == null) {
              embedParam_ = new global::Apollo.Perception.Inference.EmbedParameter();
            }
            input.ReadMessage(embedParam_);
            break;
          }
          case 1106: {
            if (tileParam_ == null) {
              tileParam_ = new global::Apollo.Perception.Inference.TileParameter();
            }
            input.ReadMessage(tileParam_);
            break;
          }
          case 1114: {
            if (batchNormParam_ == null) {
              batchNormParam_ = new global::Apollo.Perception.Inference.BatchNormParameter();
            }
            input.ReadMessage(batchNormParam_);
            break;
          }
          case 1122: {
            if (eluParam_ == null) {
              eluParam_ = new global::Apollo.Perception.Inference.ELUParameter();
            }
            input.ReadMessage(eluParam_);
            break;
          }
          case 1130: {
            if (biasParam_ == null) {
              biasParam_ = new global::Apollo.Perception.Inference.BiasParameter();
            }
            input.ReadMessage(biasParam_);
            break;
          }
          case 1138: {
            if (scaleParam_ == null) {
              scaleParam_ = new global::Apollo.Perception.Inference.ScaleParameter();
            }
            input.ReadMessage(scaleParam_);
            break;
          }
          case 1146: {
            if (inputParam_ == null) {
              inputParam_ = new global::Apollo.Perception.Inference.InputParameter();
            }
            input.ReadMessage(inputParam_);
            break;
          }
          case 1154: {
            if (cropParam_ == null) {
              cropParam_ = new global::Apollo.Perception.Inference.CropParameter();
            }
            input.ReadMessage(cropParam_);
            break;
          }
          case 1162: {
            if (parameterParam_ == null) {
              parameterParam_ = new global::Apollo.Perception.Inference.ParameterParameter();
            }
            input.ReadMessage(parameterParam_);
            break;
          }
          case 1170: {
            if (recurrentParam_ == null) {
              recurrentParam_ = new global::Apollo.Perception.Inference.RecurrentParameter();
            }
            input.ReadMessage(recurrentParam_);
            break;
          }
          case 1602: {
            if (annotatedDataParam_ == null) {
              annotatedDataParam_ = new global::Apollo.Perception.Inference.AnnotatedDataParameter();
            }
            input.ReadMessage(annotatedDataParam_);
            break;
          }
          case 1610: {
            if (multiboxLossParam_ == null) {
              multiboxLossParam_ = new global::Apollo.Perception.Inference.MultiBoxLossParameter();
            }
            input.ReadMessage(multiboxLossParam_);
            break;
          }
          case 1618: {
            if (permuteParam_ == null) {
              permuteParam_ = new global::Apollo.Perception.Inference.PermuteParameter();
            }
            input.ReadMessage(permuteParam_);
            break;
          }
          case 1626: {
            if (priorBoxParam_ == null) {
              priorBoxParam_ = new global::Apollo.Perception.Inference.PriorBoxParameter();
            }
            input.ReadMessage(priorBoxParam_);
            break;
          }
          case 1634: {
            if (detectionOutputParam_ == null) {
              detectionOutputParam_ = new global::Apollo.Perception.Inference.DetectionOutputParameter();
            }
            input.ReadMessage(detectionOutputParam_);
            break;
          }
          case 1642: {
            if (detectionEvaluateParam_ == null) {
              detectionEvaluateParam_ = new global::Apollo.Perception.Inference.DetectionEvaluateParameter();
            }
            input.ReadMessage(detectionEvaluateParam_);
            break;
          }
          case 1650: {
            if (normParam_ == null) {
              normParam_ = new global::Apollo.Perception.Inference.NormalizeParameter();
            }
            input.ReadMessage(normParam_);
            break;
          }
          case 1658: {
            if (videoDataParam_ == null) {
              videoDataParam_ = new global::Apollo.Perception.Inference.VideoDataParameter();
            }
            input.ReadMessage(videoDataParam_);
            break;
          }
          case 2402: {
            if (regionParam_ == null) {
              regionParam_ = new global::Apollo.Perception.Inference.RegionParameter();
            }
            input.ReadMessage(regionParam_);
            break;
          }
          case 2410: {
            if (reorgParam_ == null) {
              reorgParam_ = new global::Apollo.Perception.Inference.ReorgParameter();
            }
            input.ReadMessage(reorgParam_);
            break;
          }
          case 2482: {
            if (regionOutputParam_ == null) {
              regionOutputParam_ = new global::Apollo.Perception.Inference.RegionOutputParameter();
            }
            input.ReadMessage(regionOutputParam_);
            break;
          }
          case 2562: {
            if (regionProposalParam_ == null) {
              regionProposalParam_ = new global::Apollo.Perception.Inference.RegionProposalParameter();
            }
            input.ReadMessage(regionProposalParam_);
            break;
          }
          case 8010: {
            if (paddingParam_ == null) {
              paddingParam_ = new global::Apollo.Perception.Inference.PaddingParameter();
            }
            input.ReadMessage(paddingParam_);
            break;
          }
          case 1638410: {
            if (yoloTargetParam_ == null) {
              yoloTargetParam_ = new global::Apollo.Perception.Inference.YoloTargetParameter();
            }
            input.ReadMessage(yoloTargetParam_);
            break;
          }
          case 1638418: {
            if (yoloAnchorsParam_ == null) {
              yoloAnchorsParam_ = new global::Apollo.Perception.Inference.YoloAnchorsParameter();
            }
            input.ReadMessage(yoloAnchorsParam_);
            break;
          }
          case 1638426: {
            if (yoloLossParam_ == null) {
              yoloLossParam_ = new global::Apollo.Perception.Inference.YoloLossParameter();
            }
            input.ReadMessage(yoloLossParam_);
            break;
          }
          case 1638434: {
            if (yoloDumpParam_ == null) {
              yoloDumpParam_ = new global::Apollo.Perception.Inference.YoloDumpParameter();
            }
            input.ReadMessage(yoloDumpParam_);
            break;
          }
          case 13656890: {
            yoloDataParam_.AddEntriesFrom(input, _repeated_yoloDataParam_codec);
            break;
          }
          case 13656898:
          case 13656901: {
            dataProbParam_.AddEntriesFrom(input, _repeated_dataProbParam_codec);
            break;
          }
          case 66133690: {
            if (roiPoolingParam_ == null) {
              roiPoolingParam_ = new global::Apollo.Perception.Inference.ROIPoolingParameter();
            }
            input.ReadMessage(roiPoolingParam_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used to apply transformation
  /// to the data layer's data
  /// </summary>
  public sealed partial class TransformationParameter : pb::IMessage<TransformationParameter> {
    private static readonly pb::MessageParser<TransformationParameter> _parser = new pb::MessageParser<TransformationParameter>(() => new TransformationParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformationParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationParameter(TransformationParameter other) : this() {
      scale_ = other.scale_;
      mirror_ = other.mirror_;
      cropSize_ = other.cropSize_;
      cropH_ = other.cropH_;
      cropW_ = other.cropW_;
      meanFile_ = other.meanFile_;
      meanValue_ = other.meanValue_.Clone();
      forceColor_ = other.forceColor_;
      forceGray_ = other.forceGray_;
      ResizeParam = other.resizeParam_ != null ? other.ResizeParam.Clone() : null;
      NoiseParam = other.noiseParam_ != null ? other.NoiseParam.Clone() : null;
      DistortParam = other.distortParam_ != null ? other.DistortParam.Clone() : null;
      ExpandParam = other.expandParam_ != null ? other.ExpandParam.Clone() : null;
      jitter_ = other.jitter_;
      EmitConstraint = other.emitConstraint_ != null ? other.EmitConstraint.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationParameter Clone() {
      return new TransformationParameter(this);
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 1;
    private float scale_;
    /// <summary>
    /// For data pre-processing, we can do simple scaling and subtracting the
    /// data mean, if provided. Note that the mean subtraction is always carried
    /// out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 2;
    private bool mirror_;
    /// <summary>
    /// Specify if we want to randomly mirror data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 3;
    private uint cropSize_;
    /// <summary>
    /// Specify if we would like to randomly crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "crop_h" field.</summary>
    public const int CropHFieldNumber = 11;
    private uint cropH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropH {
      get { return cropH_; }
      set {
        cropH_ = value;
      }
    }

    /// <summary>Field number for the "crop_w" field.</summary>
    public const int CropWFieldNumber = 12;
    private uint cropW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropW {
      get { return cropW_; }
      set {
        cropW_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 4;
    private string meanFile_ = "";
    /// <summary>
    /// mean_file and mean_value cannot be specified at the same time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mean_value" field.</summary>
    public const int MeanValueFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_meanValue_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> meanValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// if specified can be repeated once (would substract it from all the channels)
    /// or can be repeated the same number of times as channels
    /// (would subtract them from the corresponding channel)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MeanValue {
      get { return meanValue_; }
    }

    /// <summary>Field number for the "force_color" field.</summary>
    public const int ForceColorFieldNumber = 6;
    private bool forceColor_;
    /// <summary>
    /// Force the decoded image to have 3 color channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceColor {
      get { return forceColor_; }
      set {
        forceColor_ = value;
      }
    }

    /// <summary>Field number for the "force_gray" field.</summary>
    public const int ForceGrayFieldNumber = 7;
    private bool forceGray_;
    /// <summary>
    /// Force the decoded image to have 1 color channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceGray {
      get { return forceGray_; }
      set {
        forceGray_ = value;
      }
    }

    /// <summary>Field number for the "resize_param" field.</summary>
    public const int ResizeParamFieldNumber = 8;
    private global::Apollo.Perception.Inference.ResizeParameter resizeParam_;
    /// <summary>
    /// Resize policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ResizeParameter ResizeParam {
      get { return resizeParam_; }
      set {
        resizeParam_ = value;
      }
    }

    /// <summary>Field number for the "noise_param" field.</summary>
    public const int NoiseParamFieldNumber = 9;
    private global::Apollo.Perception.Inference.NoiseParameter noiseParam_;
    /// <summary>
    /// Noise policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NoiseParameter NoiseParam {
      get { return noiseParam_; }
      set {
        noiseParam_ = value;
      }
    }

    /// <summary>Field number for the "distort_param" field.</summary>
    public const int DistortParamFieldNumber = 13;
    private global::Apollo.Perception.Inference.DistortionParameter distortParam_;
    /// <summary>
    /// Distortion policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DistortionParameter DistortParam {
      get { return distortParam_; }
      set {
        distortParam_ = value;
      }
    }

    /// <summary>Field number for the "expand_param" field.</summary>
    public const int ExpandParamFieldNumber = 14;
    private global::Apollo.Perception.Inference.ExpansionParameter expandParam_;
    /// <summary>
    /// Expand policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ExpansionParameter ExpandParam {
      get { return expandParam_; }
      set {
        expandParam_ = value;
      }
    }

    /// <summary>Field number for the "jitter" field.</summary>
    public const int JitterFieldNumber = 15;
    private float jitter_;
    /// <summary>
    /// Crop policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Jitter {
      get { return jitter_; }
      set {
        jitter_ = value;
      }
    }

    /// <summary>Field number for the "emit_constraint" field.</summary>
    public const int EmitConstraintFieldNumber = 10;
    private global::Apollo.Perception.Inference.EmitConstraint emitConstraint_;
    /// <summary>
    /// Constraint for emitting the annotation after transformation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.EmitConstraint EmitConstraint {
      get { return emitConstraint_; }
      set {
        emitConstraint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformationParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformationParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Scale != other.Scale) return false;
      if (Mirror != other.Mirror) return false;
      if (CropSize != other.CropSize) return false;
      if (CropH != other.CropH) return false;
      if (CropW != other.CropW) return false;
      if (MeanFile != other.MeanFile) return false;
      if(!meanValue_.Equals(other.meanValue_)) return false;
      if (ForceColor != other.ForceColor) return false;
      if (ForceGray != other.ForceGray) return false;
      if (!object.Equals(ResizeParam, other.ResizeParam)) return false;
      if (!object.Equals(NoiseParam, other.NoiseParam)) return false;
      if (!object.Equals(DistortParam, other.DistortParam)) return false;
      if (!object.Equals(ExpandParam, other.ExpandParam)) return false;
      if (Jitter != other.Jitter) return false;
      if (!object.Equals(EmitConstraint, other.EmitConstraint)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (CropH != 0) hash ^= CropH.GetHashCode();
      if (CropW != 0) hash ^= CropW.GetHashCode();
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      hash ^= meanValue_.GetHashCode();
      if (ForceColor != false) hash ^= ForceColor.GetHashCode();
      if (ForceGray != false) hash ^= ForceGray.GetHashCode();
      if (resizeParam_ != null) hash ^= ResizeParam.GetHashCode();
      if (noiseParam_ != null) hash ^= NoiseParam.GetHashCode();
      if (distortParam_ != null) hash ^= DistortParam.GetHashCode();
      if (expandParam_ != null) hash ^= ExpandParam.GetHashCode();
      if (Jitter != 0F) hash ^= Jitter.GetHashCode();
      if (emitConstraint_ != null) hash ^= EmitConstraint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Scale != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Scale);
      }
      if (Mirror != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mirror);
      }
      if (CropSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CropSize);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MeanFile);
      }
      meanValue_.WriteTo(output, _repeated_meanValue_codec);
      if (ForceColor != false) {
        output.WriteRawTag(48);
        output.WriteBool(ForceColor);
      }
      if (ForceGray != false) {
        output.WriteRawTag(56);
        output.WriteBool(ForceGray);
      }
      if (resizeParam_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ResizeParam);
      }
      if (noiseParam_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(NoiseParam);
      }
      if (emitConstraint_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EmitConstraint);
      }
      if (CropH != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CropH);
      }
      if (CropW != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CropW);
      }
      if (distortParam_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DistortParam);
      }
      if (expandParam_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpandParam);
      }
      if (Jitter != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Jitter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (CropH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropH);
      }
      if (CropW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropW);
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      size += meanValue_.CalculateSize(_repeated_meanValue_codec);
      if (ForceColor != false) {
        size += 1 + 1;
      }
      if (ForceGray != false) {
        size += 1 + 1;
      }
      if (resizeParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResizeParam);
      }
      if (noiseParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NoiseParam);
      }
      if (distortParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistortParam);
      }
      if (expandParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpandParam);
      }
      if (Jitter != 0F) {
        size += 1 + 4;
      }
      if (emitConstraint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmitConstraint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformationParameter other) {
      if (other == null) {
        return;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.CropH != 0) {
        CropH = other.CropH;
      }
      if (other.CropW != 0) {
        CropW = other.CropW;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      meanValue_.Add(other.meanValue_);
      if (other.ForceColor != false) {
        ForceColor = other.ForceColor;
      }
      if (other.ForceGray != false) {
        ForceGray = other.ForceGray;
      }
      if (other.resizeParam_ != null) {
        if (resizeParam_ == null) {
          resizeParam_ = new global::Apollo.Perception.Inference.ResizeParameter();
        }
        ResizeParam.MergeFrom(other.ResizeParam);
      }
      if (other.noiseParam_ != null) {
        if (noiseParam_ == null) {
          noiseParam_ = new global::Apollo.Perception.Inference.NoiseParameter();
        }
        NoiseParam.MergeFrom(other.NoiseParam);
      }
      if (other.distortParam_ != null) {
        if (distortParam_ == null) {
          distortParam_ = new global::Apollo.Perception.Inference.DistortionParameter();
        }
        DistortParam.MergeFrom(other.DistortParam);
      }
      if (other.expandParam_ != null) {
        if (expandParam_ == null) {
          expandParam_ = new global::Apollo.Perception.Inference.ExpansionParameter();
        }
        ExpandParam.MergeFrom(other.ExpandParam);
      }
      if (other.Jitter != 0F) {
        Jitter = other.Jitter;
      }
      if (other.emitConstraint_ != null) {
        if (emitConstraint_ == null) {
          emitConstraint_ = new global::Apollo.Perception.Inference.EmitConstraint();
        }
        EmitConstraint.MergeFrom(other.EmitConstraint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Scale = input.ReadFloat();
            break;
          }
          case 16: {
            Mirror = input.ReadBool();
            break;
          }
          case 24: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 34: {
            MeanFile = input.ReadString();
            break;
          }
          case 42:
          case 45: {
            meanValue_.AddEntriesFrom(input, _repeated_meanValue_codec);
            break;
          }
          case 48: {
            ForceColor = input.ReadBool();
            break;
          }
          case 56: {
            ForceGray = input.ReadBool();
            break;
          }
          case 66: {
            if (resizeParam_ == null) {
              resizeParam_ = new global::Apollo.Perception.Inference.ResizeParameter();
            }
            input.ReadMessage(resizeParam_);
            break;
          }
          case 74: {
            if (noiseParam_ == null) {
              noiseParam_ = new global::Apollo.Perception.Inference.NoiseParameter();
            }
            input.ReadMessage(noiseParam_);
            break;
          }
          case 82: {
            if (emitConstraint_ == null) {
              emitConstraint_ = new global::Apollo.Perception.Inference.EmitConstraint();
            }
            input.ReadMessage(emitConstraint_);
            break;
          }
          case 88: {
            CropH = input.ReadUInt32();
            break;
          }
          case 96: {
            CropW = input.ReadUInt32();
            break;
          }
          case 106: {
            if (distortParam_ == null) {
              distortParam_ = new global::Apollo.Perception.Inference.DistortionParameter();
            }
            input.ReadMessage(distortParam_);
            break;
          }
          case 114: {
            if (expandParam_ == null) {
              expandParam_ = new global::Apollo.Perception.Inference.ExpansionParameter();
            }
            input.ReadMessage(expandParam_);
            break;
          }
          case 125: {
            Jitter = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by data transformer for resize policy
  /// </summary>
  public sealed partial class ResizeParameter : pb::IMessage<ResizeParameter> {
    private static readonly pb::MessageParser<ResizeParameter> _parser = new pb::MessageParser<ResizeParameter>(() => new ResizeParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResizeParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResizeParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResizeParameter(ResizeParameter other) : this() {
      prob_ = other.prob_;
      resizeMode_ = other.resizeMode_;
      height_ = other.height_;
      width_ = other.width_;
      heightScale_ = other.heightScale_;
      widthScale_ = other.widthScale_;
      padMode_ = other.padMode_;
      padValue_ = other.padValue_.Clone();
      interpMode_ = other.interpMode_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResizeParameter Clone() {
      return new ResizeParameter(this);
    }

    /// <summary>Field number for the "prob" field.</summary>
    public const int ProbFieldNumber = 1;
    private float prob_;
    /// <summary>
    ///Probability of using this resize policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Prob {
      get { return prob_; }
      set {
        prob_ = value;
      }
    }

    /// <summary>Field number for the "resize_mode" field.</summary>
    public const int ResizeModeFieldNumber = 2;
    private global::Apollo.Perception.Inference.ResizeParameter.Types.Resize_mode resizeMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ResizeParameter.Types.Resize_mode ResizeMode {
      get { return resizeMode_; }
      set {
        resizeMode_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height_scale" field.</summary>
    public const int HeightScaleFieldNumber = 8;
    private uint heightScale_;
    /// <summary>
    /// A parameter used to update bbox in FIT_SMALL_SIZE mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeightScale {
      get { return heightScale_; }
      set {
        heightScale_ = value;
      }
    }

    /// <summary>Field number for the "width_scale" field.</summary>
    public const int WidthScaleFieldNumber = 9;
    private uint widthScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WidthScale {
      get { return widthScale_; }
      set {
        widthScale_ = value;
      }
    }

    /// <summary>Field number for the "pad_mode" field.</summary>
    public const int PadModeFieldNumber = 5;
    private global::Apollo.Perception.Inference.ResizeParameter.Types.Pad_mode padMode_ = 0;
    /// <summary>
    /// Padding mode for BE_SMALL_SIZE_AND_PAD mode and object centering
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ResizeParameter.Types.Pad_mode PadMode {
      get { return padMode_; }
      set {
        padMode_ = value;
      }
    }

    /// <summary>Field number for the "pad_value" field.</summary>
    public const int PadValueFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_padValue_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> padValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// if specified can be repeated once (would fill all the channels)
    /// or can be repeated the same number of times as channels
    /// (would use it them to the corresponding channel)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PadValue {
      get { return padValue_; }
    }

    /// <summary>Field number for the "interp_mode" field.</summary>
    public const int InterpModeFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.ResizeParameter.Types.Interp_mode> _repeated_interpMode_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Apollo.Perception.Inference.ResizeParameter.Types.Interp_mode) x);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.ResizeParameter.Types.Interp_mode> interpMode_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.ResizeParameter.Types.Interp_mode>();
    /// <summary>
    ///interpolation for for resizing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.ResizeParameter.Types.Interp_mode> InterpMode {
      get { return interpMode_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResizeParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResizeParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Prob != other.Prob) return false;
      if (ResizeMode != other.ResizeMode) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (HeightScale != other.HeightScale) return false;
      if (WidthScale != other.WidthScale) return false;
      if (PadMode != other.PadMode) return false;
      if(!padValue_.Equals(other.padValue_)) return false;
      if(!interpMode_.Equals(other.interpMode_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Prob != 0F) hash ^= Prob.GetHashCode();
      if (ResizeMode != 0) hash ^= ResizeMode.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (HeightScale != 0) hash ^= HeightScale.GetHashCode();
      if (WidthScale != 0) hash ^= WidthScale.GetHashCode();
      if (PadMode != 0) hash ^= PadMode.GetHashCode();
      hash ^= padValue_.GetHashCode();
      hash ^= interpMode_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Prob != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Prob);
      }
      if (ResizeMode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResizeMode);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Width);
      }
      if (PadMode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PadMode);
      }
      padValue_.WriteTo(output, _repeated_padValue_codec);
      interpMode_.WriteTo(output, _repeated_interpMode_codec);
      if (HeightScale != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HeightScale);
      }
      if (WidthScale != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(WidthScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Prob != 0F) {
        size += 1 + 4;
      }
      if (ResizeMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResizeMode);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (HeightScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeightScale);
      }
      if (WidthScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WidthScale);
      }
      if (PadMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PadMode);
      }
      size += padValue_.CalculateSize(_repeated_padValue_codec);
      size += interpMode_.CalculateSize(_repeated_interpMode_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResizeParameter other) {
      if (other == null) {
        return;
      }
      if (other.Prob != 0F) {
        Prob = other.Prob;
      }
      if (other.ResizeMode != 0) {
        ResizeMode = other.ResizeMode;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.HeightScale != 0) {
        HeightScale = other.HeightScale;
      }
      if (other.WidthScale != 0) {
        WidthScale = other.WidthScale;
      }
      if (other.PadMode != 0) {
        PadMode = other.PadMode;
      }
      padValue_.Add(other.padValue_);
      interpMode_.Add(other.interpMode_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Prob = input.ReadFloat();
            break;
          }
          case 16: {
            resizeMode_ = (global::Apollo.Perception.Inference.ResizeParameter.Types.Resize_mode) input.ReadEnum();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 32: {
            Width = input.ReadUInt32();
            break;
          }
          case 40: {
            padMode_ = (global::Apollo.Perception.Inference.ResizeParameter.Types.Pad_mode) input.ReadEnum();
            break;
          }
          case 50:
          case 53: {
            padValue_.AddEntriesFrom(input, _repeated_padValue_codec);
            break;
          }
          case 58:
          case 56: {
            interpMode_.AddEntriesFrom(input, _repeated_interpMode_codec);
            break;
          }
          case 64: {
            HeightScale = input.ReadUInt32();
            break;
          }
          case 72: {
            WidthScale = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ResizeParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Resize_mode {
        [pbr::OriginalName("RESIZE_MODE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("WARP")] Warp = 1,
        [pbr::OriginalName("FIT_SMALL_SIZE")] FitSmallSize = 2,
        [pbr::OriginalName("FIT_LARGE_SIZE_AND_PAD")] FitLargeSizeAndPad = 3,
      }

      public enum Pad_mode {
        [pbr::OriginalName("PAD_MODE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("CONSTANT")] Constant = 1,
        [pbr::OriginalName("MIRRORED")] Mirrored = 2,
        [pbr::OriginalName("REPEAT_NEAREST")] RepeatNearest = 3,
      }

      public enum Interp_mode {
        [pbr::OriginalName("INTERP_MODE_DUMMY")] Dummy = 0,
        /// <summary>
        ///Same as in OpenCV
        /// </summary>
        [pbr::OriginalName("LINEAR")] Linear = 1,
        [pbr::OriginalName("AREA")] Area = 2,
        [pbr::OriginalName("NEAREST")] Nearest = 3,
        [pbr::OriginalName("CUBIC")] Cubic = 4,
        [pbr::OriginalName("LANCZOS4")] Lanczos4 = 5,
      }

    }
    #endregion

  }

  public sealed partial class SaltPepperParameter : pb::IMessage<SaltPepperParameter> {
    private static readonly pb::MessageParser<SaltPepperParameter> _parser = new pb::MessageParser<SaltPepperParameter>(() => new SaltPepperParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaltPepperParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaltPepperParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaltPepperParameter(SaltPepperParameter other) : this() {
      fraction_ = other.fraction_;
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaltPepperParameter Clone() {
      return new SaltPepperParameter(this);
    }

    /// <summary>Field number for the "fraction" field.</summary>
    public const int FractionFieldNumber = 1;
    private float fraction_;
    /// <summary>
    ///Percentage of pixels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fraction {
      get { return fraction_; }
      set {
        fraction_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_value_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> value_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaltPepperParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaltPepperParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fraction != other.Fraction) return false;
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fraction != 0F) hash ^= Fraction.GetHashCode();
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fraction != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Fraction);
      }
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fraction != 0F) {
        size += 1 + 4;
      }
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaltPepperParameter other) {
      if (other == null) {
        return;
      }
      if (other.Fraction != 0F) {
        Fraction = other.Fraction;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Fraction = input.ReadFloat();
            break;
          }
          case 18:
          case 21: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by data transformer for transformation
  /// policy
  /// </summary>
  public sealed partial class NoiseParameter : pb::IMessage<NoiseParameter> {
    private static readonly pb::MessageParser<NoiseParameter> _parser = new pb::MessageParser<NoiseParameter>(() => new NoiseParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoiseParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoiseParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoiseParameter(NoiseParameter other) : this() {
      prob_ = other.prob_;
      histEq_ = other.histEq_;
      inverse_ = other.inverse_;
      decolorize_ = other.decolorize_;
      gaussBlur_ = other.gaussBlur_;
      jpeg_ = other.jpeg_;
      posterize_ = other.posterize_;
      erode_ = other.erode_;
      saltpepper_ = other.saltpepper_;
      SaltpepperParam = other.saltpepperParam_ != null ? other.SaltpepperParam.Clone() : null;
      clahe_ = other.clahe_;
      convertToHsv_ = other.convertToHsv_;
      convertToLab_ = other.convertToLab_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoiseParameter Clone() {
      return new NoiseParameter(this);
    }

    /// <summary>Field number for the "prob" field.</summary>
    public const int ProbFieldNumber = 1;
    private float prob_;
    /// <summary>
    ///Probability of using this resize policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Prob {
      get { return prob_; }
      set {
        prob_ = value;
      }
    }

    /// <summary>Field number for the "hist_eq" field.</summary>
    public const int HistEqFieldNumber = 2;
    private bool histEq_;
    /// <summary>
    /// Histogram equalized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HistEq {
      get { return histEq_; }
      set {
        histEq_ = value;
      }
    }

    /// <summary>Field number for the "inverse" field.</summary>
    public const int InverseFieldNumber = 3;
    private bool inverse_;
    /// <summary>
    /// Color inversion
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inverse {
      get { return inverse_; }
      set {
        inverse_ = value;
      }
    }

    /// <summary>Field number for the "decolorize" field.</summary>
    public const int DecolorizeFieldNumber = 4;
    private bool decolorize_;
    /// <summary>
    /// Grayscale
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Decolorize {
      get { return decolorize_; }
      set {
        decolorize_ = value;
      }
    }

    /// <summary>Field number for the "gauss_blur" field.</summary>
    public const int GaussBlurFieldNumber = 5;
    private bool gaussBlur_;
    /// <summary>
    /// Gaussian blur
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GaussBlur {
      get { return gaussBlur_; }
      set {
        gaussBlur_ = value;
      }
    }

    /// <summary>Field number for the "jpeg" field.</summary>
    public const int JpegFieldNumber = 6;
    private float jpeg_;
    /// <summary>
    /// JPEG compression quality (-1 = no compression)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Jpeg {
      get { return jpeg_; }
      set {
        jpeg_ = value;
      }
    }

    /// <summary>Field number for the "posterize" field.</summary>
    public const int PosterizeFieldNumber = 7;
    private bool posterize_;
    /// <summary>
    /// Posterization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Posterize {
      get { return posterize_; }
      set {
        posterize_ = value;
      }
    }

    /// <summary>Field number for the "erode" field.</summary>
    public const int ErodeFieldNumber = 8;
    private bool erode_;
    /// <summary>
    /// Erosion
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Erode {
      get { return erode_; }
      set {
        erode_ = value;
      }
    }

    /// <summary>Field number for the "saltpepper" field.</summary>
    public const int SaltpepperFieldNumber = 9;
    private bool saltpepper_;
    /// <summary>
    /// Salt-and-pepper noise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Saltpepper {
      get { return saltpepper_; }
      set {
        saltpepper_ = value;
      }
    }

    /// <summary>Field number for the "saltpepper_param" field.</summary>
    public const int SaltpepperParamFieldNumber = 10;
    private global::Apollo.Perception.Inference.SaltPepperParameter saltpepperParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SaltPepperParameter SaltpepperParam {
      get { return saltpepperParam_; }
      set {
        saltpepperParam_ = value;
      }
    }

    /// <summary>Field number for the "clahe" field.</summary>
    public const int ClaheFieldNumber = 11;
    private bool clahe_;
    /// <summary>
    /// Local histogram equalization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clahe {
      get { return clahe_; }
      set {
        clahe_ = value;
      }
    }

    /// <summary>Field number for the "convert_to_hsv" field.</summary>
    public const int ConvertToHsvFieldNumber = 12;
    private bool convertToHsv_;
    /// <summary>
    /// Color space conversion
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConvertToHsv {
      get { return convertToHsv_; }
      set {
        convertToHsv_ = value;
      }
    }

    /// <summary>Field number for the "convert_to_lab" field.</summary>
    public const int ConvertToLabFieldNumber = 13;
    private bool convertToLab_;
    /// <summary>
    /// Color space conversion
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConvertToLab {
      get { return convertToLab_; }
      set {
        convertToLab_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoiseParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoiseParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Prob != other.Prob) return false;
      if (HistEq != other.HistEq) return false;
      if (Inverse != other.Inverse) return false;
      if (Decolorize != other.Decolorize) return false;
      if (GaussBlur != other.GaussBlur) return false;
      if (Jpeg != other.Jpeg) return false;
      if (Posterize != other.Posterize) return false;
      if (Erode != other.Erode) return false;
      if (Saltpepper != other.Saltpepper) return false;
      if (!object.Equals(SaltpepperParam, other.SaltpepperParam)) return false;
      if (Clahe != other.Clahe) return false;
      if (ConvertToHsv != other.ConvertToHsv) return false;
      if (ConvertToLab != other.ConvertToLab) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Prob != 0F) hash ^= Prob.GetHashCode();
      if (HistEq != false) hash ^= HistEq.GetHashCode();
      if (Inverse != false) hash ^= Inverse.GetHashCode();
      if (Decolorize != false) hash ^= Decolorize.GetHashCode();
      if (GaussBlur != false) hash ^= GaussBlur.GetHashCode();
      if (Jpeg != 0F) hash ^= Jpeg.GetHashCode();
      if (Posterize != false) hash ^= Posterize.GetHashCode();
      if (Erode != false) hash ^= Erode.GetHashCode();
      if (Saltpepper != false) hash ^= Saltpepper.GetHashCode();
      if (saltpepperParam_ != null) hash ^= SaltpepperParam.GetHashCode();
      if (Clahe != false) hash ^= Clahe.GetHashCode();
      if (ConvertToHsv != false) hash ^= ConvertToHsv.GetHashCode();
      if (ConvertToLab != false) hash ^= ConvertToLab.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Prob != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Prob);
      }
      if (HistEq != false) {
        output.WriteRawTag(16);
        output.WriteBool(HistEq);
      }
      if (Inverse != false) {
        output.WriteRawTag(24);
        output.WriteBool(Inverse);
      }
      if (Decolorize != false) {
        output.WriteRawTag(32);
        output.WriteBool(Decolorize);
      }
      if (GaussBlur != false) {
        output.WriteRawTag(40);
        output.WriteBool(GaussBlur);
      }
      if (Jpeg != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Jpeg);
      }
      if (Posterize != false) {
        output.WriteRawTag(56);
        output.WriteBool(Posterize);
      }
      if (Erode != false) {
        output.WriteRawTag(64);
        output.WriteBool(Erode);
      }
      if (Saltpepper != false) {
        output.WriteRawTag(72);
        output.WriteBool(Saltpepper);
      }
      if (saltpepperParam_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SaltpepperParam);
      }
      if (Clahe != false) {
        output.WriteRawTag(88);
        output.WriteBool(Clahe);
      }
      if (ConvertToHsv != false) {
        output.WriteRawTag(96);
        output.WriteBool(ConvertToHsv);
      }
      if (ConvertToLab != false) {
        output.WriteRawTag(104);
        output.WriteBool(ConvertToLab);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Prob != 0F) {
        size += 1 + 4;
      }
      if (HistEq != false) {
        size += 1 + 1;
      }
      if (Inverse != false) {
        size += 1 + 1;
      }
      if (Decolorize != false) {
        size += 1 + 1;
      }
      if (GaussBlur != false) {
        size += 1 + 1;
      }
      if (Jpeg != 0F) {
        size += 1 + 4;
      }
      if (Posterize != false) {
        size += 1 + 1;
      }
      if (Erode != false) {
        size += 1 + 1;
      }
      if (Saltpepper != false) {
        size += 1 + 1;
      }
      if (saltpepperParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaltpepperParam);
      }
      if (Clahe != false) {
        size += 1 + 1;
      }
      if (ConvertToHsv != false) {
        size += 1 + 1;
      }
      if (ConvertToLab != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoiseParameter other) {
      if (other == null) {
        return;
      }
      if (other.Prob != 0F) {
        Prob = other.Prob;
      }
      if (other.HistEq != false) {
        HistEq = other.HistEq;
      }
      if (other.Inverse != false) {
        Inverse = other.Inverse;
      }
      if (other.Decolorize != false) {
        Decolorize = other.Decolorize;
      }
      if (other.GaussBlur != false) {
        GaussBlur = other.GaussBlur;
      }
      if (other.Jpeg != 0F) {
        Jpeg = other.Jpeg;
      }
      if (other.Posterize != false) {
        Posterize = other.Posterize;
      }
      if (other.Erode != false) {
        Erode = other.Erode;
      }
      if (other.Saltpepper != false) {
        Saltpepper = other.Saltpepper;
      }
      if (other.saltpepperParam_ != null) {
        if (saltpepperParam_ == null) {
          saltpepperParam_ = new global::Apollo.Perception.Inference.SaltPepperParameter();
        }
        SaltpepperParam.MergeFrom(other.SaltpepperParam);
      }
      if (other.Clahe != false) {
        Clahe = other.Clahe;
      }
      if (other.ConvertToHsv != false) {
        ConvertToHsv = other.ConvertToHsv;
      }
      if (other.ConvertToLab != false) {
        ConvertToLab = other.ConvertToLab;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Prob = input.ReadFloat();
            break;
          }
          case 16: {
            HistEq = input.ReadBool();
            break;
          }
          case 24: {
            Inverse = input.ReadBool();
            break;
          }
          case 32: {
            Decolorize = input.ReadBool();
            break;
          }
          case 40: {
            GaussBlur = input.ReadBool();
            break;
          }
          case 53: {
            Jpeg = input.ReadFloat();
            break;
          }
          case 56: {
            Posterize = input.ReadBool();
            break;
          }
          case 64: {
            Erode = input.ReadBool();
            break;
          }
          case 72: {
            Saltpepper = input.ReadBool();
            break;
          }
          case 82: {
            if (saltpepperParam_ == null) {
              saltpepperParam_ = new global::Apollo.Perception.Inference.SaltPepperParameter();
            }
            input.ReadMessage(saltpepperParam_);
            break;
          }
          case 88: {
            Clahe = input.ReadBool();
            break;
          }
          case 96: {
            ConvertToHsv = input.ReadBool();
            break;
          }
          case 104: {
            ConvertToLab = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by data transformer for distortion policy
  /// </summary>
  public sealed partial class DistortionParameter : pb::IMessage<DistortionParameter> {
    private static readonly pb::MessageParser<DistortionParameter> _parser = new pb::MessageParser<DistortionParameter>(() => new DistortionParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistortionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistortionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistortionParameter(DistortionParameter other) : this() {
      brightnessProb_ = other.brightnessProb_;
      brightnessDelta_ = other.brightnessDelta_;
      contrastProb_ = other.contrastProb_;
      contrastLower_ = other.contrastLower_;
      contrastUpper_ = other.contrastUpper_;
      hueProb_ = other.hueProb_;
      hueDelta_ = other.hueDelta_;
      saturationProb_ = other.saturationProb_;
      saturationLower_ = other.saturationLower_;
      saturationUpper_ = other.saturationUpper_;
      randomOrderProb_ = other.randomOrderProb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistortionParameter Clone() {
      return new DistortionParameter(this);
    }

    /// <summary>Field number for the "brightness_prob" field.</summary>
    public const int BrightnessProbFieldNumber = 1;
    private float brightnessProb_;
    /// <summary>
    /// The probability of adjusting brightness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrightnessProb {
      get { return brightnessProb_; }
      set {
        brightnessProb_ = value;
      }
    }

    /// <summary>Field number for the "brightness_delta" field.</summary>
    public const int BrightnessDeltaFieldNumber = 2;
    private float brightnessDelta_;
    /// <summary>
    /// Amount to add to the pixel values within .
    /// The possible value is within . Recommend 32.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrightnessDelta {
      get { return brightnessDelta_; }
      set {
        brightnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "contrast_prob" field.</summary>
    public const int ContrastProbFieldNumber = 3;
    private float contrastProb_;
    /// <summary>
    /// The probability of adjusting contrast.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ContrastProb {
      get { return contrastProb_; }
      set {
        contrastProb_ = value;
      }
    }

    /// <summary>Field number for the "contrast_lower" field.</summary>
    public const int ContrastLowerFieldNumber = 4;
    private float contrastLower_;
    /// <summary>
    /// Lower bound for random contrast factor. Recommend 0.5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ContrastLower {
      get { return contrastLower_; }
      set {
        contrastLower_ = value;
      }
    }

    /// <summary>Field number for the "contrast_upper" field.</summary>
    public const int ContrastUpperFieldNumber = 5;
    private float contrastUpper_;
    /// <summary>
    /// Upper bound for random contrast factor. Recommend 1.5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ContrastUpper {
      get { return contrastUpper_; }
      set {
        contrastUpper_ = value;
      }
    }

    /// <summary>Field number for the "hue_prob" field.</summary>
    public const int HueProbFieldNumber = 6;
    private float hueProb_;
    /// <summary>
    /// The probability of adjusting hue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HueProb {
      get { return hueProb_; }
      set {
        hueProb_ = value;
      }
    }

    /// <summary>Field number for the "hue_delta" field.</summary>
    public const int HueDeltaFieldNumber = 7;
    private float hueDelta_;
    /// <summary>
    /// Amount to add to the hue channel within .
    /// The possible value is within . Recommend 36.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HueDelta {
      get { return hueDelta_; }
      set {
        hueDelta_ = value;
      }
    }

    /// <summary>Field number for the "saturation_prob" field.</summary>
    public const int SaturationProbFieldNumber = 8;
    private float saturationProb_;
    /// <summary>
    /// The probability of adjusting saturation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SaturationProb {
      get { return saturationProb_; }
      set {
        saturationProb_ = value;
      }
    }

    /// <summary>Field number for the "saturation_lower" field.</summary>
    public const int SaturationLowerFieldNumber = 9;
    private float saturationLower_;
    /// <summary>
    /// Lower bound for the random saturation factor. Recommend 0.5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SaturationLower {
      get { return saturationLower_; }
      set {
        saturationLower_ = value;
      }
    }

    /// <summary>Field number for the "saturation_upper" field.</summary>
    public const int SaturationUpperFieldNumber = 10;
    private float saturationUpper_;
    /// <summary>
    /// Upper bound for the random saturation factor. Recommend 1.5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SaturationUpper {
      get { return saturationUpper_; }
      set {
        saturationUpper_ = value;
      }
    }

    /// <summary>Field number for the "random_order_prob" field.</summary>
    public const int RandomOrderProbFieldNumber = 11;
    private float randomOrderProb_;
    /// <summary>
    /// The probability of randomly order the image channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RandomOrderProb {
      get { return randomOrderProb_; }
      set {
        randomOrderProb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistortionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistortionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrightnessProb != other.BrightnessProb) return false;
      if (BrightnessDelta != other.BrightnessDelta) return false;
      if (ContrastProb != other.ContrastProb) return false;
      if (ContrastLower != other.ContrastLower) return false;
      if (ContrastUpper != other.ContrastUpper) return false;
      if (HueProb != other.HueProb) return false;
      if (HueDelta != other.HueDelta) return false;
      if (SaturationProb != other.SaturationProb) return false;
      if (SaturationLower != other.SaturationLower) return false;
      if (SaturationUpper != other.SaturationUpper) return false;
      if (RandomOrderProb != other.RandomOrderProb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrightnessProb != 0F) hash ^= BrightnessProb.GetHashCode();
      if (BrightnessDelta != 0F) hash ^= BrightnessDelta.GetHashCode();
      if (ContrastProb != 0F) hash ^= ContrastProb.GetHashCode();
      if (ContrastLower != 0F) hash ^= ContrastLower.GetHashCode();
      if (ContrastUpper != 0F) hash ^= ContrastUpper.GetHashCode();
      if (HueProb != 0F) hash ^= HueProb.GetHashCode();
      if (HueDelta != 0F) hash ^= HueDelta.GetHashCode();
      if (SaturationProb != 0F) hash ^= SaturationProb.GetHashCode();
      if (SaturationLower != 0F) hash ^= SaturationLower.GetHashCode();
      if (SaturationUpper != 0F) hash ^= SaturationUpper.GetHashCode();
      if (RandomOrderProb != 0F) hash ^= RandomOrderProb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrightnessProb != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(BrightnessProb);
      }
      if (BrightnessDelta != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BrightnessDelta);
      }
      if (ContrastProb != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ContrastProb);
      }
      if (ContrastLower != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ContrastLower);
      }
      if (ContrastUpper != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ContrastUpper);
      }
      if (HueProb != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(HueProb);
      }
      if (HueDelta != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(HueDelta);
      }
      if (SaturationProb != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(SaturationProb);
      }
      if (SaturationLower != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(SaturationLower);
      }
      if (SaturationUpper != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(SaturationUpper);
      }
      if (RandomOrderProb != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(RandomOrderProb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrightnessProb != 0F) {
        size += 1 + 4;
      }
      if (BrightnessDelta != 0F) {
        size += 1 + 4;
      }
      if (ContrastProb != 0F) {
        size += 1 + 4;
      }
      if (ContrastLower != 0F) {
        size += 1 + 4;
      }
      if (ContrastUpper != 0F) {
        size += 1 + 4;
      }
      if (HueProb != 0F) {
        size += 1 + 4;
      }
      if (HueDelta != 0F) {
        size += 1 + 4;
      }
      if (SaturationProb != 0F) {
        size += 1 + 4;
      }
      if (SaturationLower != 0F) {
        size += 1 + 4;
      }
      if (SaturationUpper != 0F) {
        size += 1 + 4;
      }
      if (RandomOrderProb != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistortionParameter other) {
      if (other == null) {
        return;
      }
      if (other.BrightnessProb != 0F) {
        BrightnessProb = other.BrightnessProb;
      }
      if (other.BrightnessDelta != 0F) {
        BrightnessDelta = other.BrightnessDelta;
      }
      if (other.ContrastProb != 0F) {
        ContrastProb = other.ContrastProb;
      }
      if (other.ContrastLower != 0F) {
        ContrastLower = other.ContrastLower;
      }
      if (other.ContrastUpper != 0F) {
        ContrastUpper = other.ContrastUpper;
      }
      if (other.HueProb != 0F) {
        HueProb = other.HueProb;
      }
      if (other.HueDelta != 0F) {
        HueDelta = other.HueDelta;
      }
      if (other.SaturationProb != 0F) {
        SaturationProb = other.SaturationProb;
      }
      if (other.SaturationLower != 0F) {
        SaturationLower = other.SaturationLower;
      }
      if (other.SaturationUpper != 0F) {
        SaturationUpper = other.SaturationUpper;
      }
      if (other.RandomOrderProb != 0F) {
        RandomOrderProb = other.RandomOrderProb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            BrightnessProb = input.ReadFloat();
            break;
          }
          case 21: {
            BrightnessDelta = input.ReadFloat();
            break;
          }
          case 29: {
            ContrastProb = input.ReadFloat();
            break;
          }
          case 37: {
            ContrastLower = input.ReadFloat();
            break;
          }
          case 45: {
            ContrastUpper = input.ReadFloat();
            break;
          }
          case 53: {
            HueProb = input.ReadFloat();
            break;
          }
          case 61: {
            HueDelta = input.ReadFloat();
            break;
          }
          case 69: {
            SaturationProb = input.ReadFloat();
            break;
          }
          case 77: {
            SaturationLower = input.ReadFloat();
            break;
          }
          case 85: {
            SaturationUpper = input.ReadFloat();
            break;
          }
          case 93: {
            RandomOrderProb = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by data transformer for expansion policy
  /// </summary>
  public sealed partial class ExpansionParameter : pb::IMessage<ExpansionParameter> {
    private static readonly pb::MessageParser<ExpansionParameter> _parser = new pb::MessageParser<ExpansionParameter>(() => new ExpansionParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpansionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpansionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpansionParameter(ExpansionParameter other) : this() {
      prob_ = other.prob_;
      maxExpandRatio_ = other.maxExpandRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpansionParameter Clone() {
      return new ExpansionParameter(this);
    }

    /// <summary>Field number for the "prob" field.</summary>
    public const int ProbFieldNumber = 1;
    private float prob_;
    /// <summary>
    ///Probability of using this expansion policy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Prob {
      get { return prob_; }
      set {
        prob_ = value;
      }
    }

    /// <summary>Field number for the "max_expand_ratio" field.</summary>
    public const int MaxExpandRatioFieldNumber = 2;
    private float maxExpandRatio_;
    /// <summary>
    /// The ratio to expand the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxExpandRatio {
      get { return maxExpandRatio_; }
      set {
        maxExpandRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpansionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpansionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Prob != other.Prob) return false;
      if (MaxExpandRatio != other.MaxExpandRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Prob != 0F) hash ^= Prob.GetHashCode();
      if (MaxExpandRatio != 0F) hash ^= MaxExpandRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Prob != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Prob);
      }
      if (MaxExpandRatio != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxExpandRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Prob != 0F) {
        size += 1 + 4;
      }
      if (MaxExpandRatio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpansionParameter other) {
      if (other == null) {
        return;
      }
      if (other.Prob != 0F) {
        Prob = other.Prob;
      }
      if (other.MaxExpandRatio != 0F) {
        MaxExpandRatio = other.MaxExpandRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Prob = input.ReadFloat();
            break;
          }
          case 21: {
            MaxExpandRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters shared by loss layers
  /// </summary>
  public sealed partial class LossParameter : pb::IMessage<LossParameter> {
    private static readonly pb::MessageParser<LossParameter> _parser = new pb::MessageParser<LossParameter>(() => new LossParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossParameter(LossParameter other) : this() {
      ignoreLabel_ = other.ignoreLabel_;
      normalization_ = other.normalization_;
      normalize_ = other.normalize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossParameter Clone() {
      return new LossParameter(this);
    }

    /// <summary>Field number for the "ignore_label" field.</summary>
    public const int IgnoreLabelFieldNumber = 1;
    private int ignoreLabel_;
    /// <summary>
    /// If specified, ignore instances with the given label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IgnoreLabel {
      get { return ignoreLabel_; }
      set {
        ignoreLabel_ = value;
      }
    }

    /// <summary>Field number for the "normalization" field.</summary>
    public const int NormalizationFieldNumber = 3;
    private global::Apollo.Perception.Inference.LossParameter.Types.NormalizationMode normalization_ = 0;
    /// <summary>
    /// For historical reasons, the default normalization for
    /// SigmoidCrossEntropyLoss is BATCH_SIZE and *not* VALID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LossParameter.Types.NormalizationMode Normalization {
      get { return normalization_; }
      set {
        normalization_ = value;
      }
    }

    /// <summary>Field number for the "normalize" field.</summary>
    public const int NormalizeFieldNumber = 2;
    private bool normalize_;
    /// <summary>
    /// Deprecated.  Ignored if normalization is specified.  If normalization
    /// is not specified, then setting this to false will be equivalent to
    /// normalization = BATCH_SIZE to be consistent with previous behavior.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Normalize {
      get { return normalize_; }
      set {
        normalize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreLabel != other.IgnoreLabel) return false;
      if (Normalization != other.Normalization) return false;
      if (Normalize != other.Normalize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreLabel != 0) hash ^= IgnoreLabel.GetHashCode();
      if (Normalization != 0) hash ^= Normalization.GetHashCode();
      if (Normalize != false) hash ^= Normalize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreLabel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IgnoreLabel);
      }
      if (Normalize != false) {
        output.WriteRawTag(16);
        output.WriteBool(Normalize);
      }
      if (Normalization != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Normalization);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreLabel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IgnoreLabel);
      }
      if (Normalization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Normalization);
      }
      if (Normalize != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LossParameter other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreLabel != 0) {
        IgnoreLabel = other.IgnoreLabel;
      }
      if (other.Normalization != 0) {
        Normalization = other.Normalization;
      }
      if (other.Normalize != false) {
        Normalize = other.Normalize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgnoreLabel = input.ReadInt32();
            break;
          }
          case 16: {
            Normalize = input.ReadBool();
            break;
          }
          case 24: {
            normalization_ = (global::Apollo.Perception.Inference.LossParameter.Types.NormalizationMode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LossParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// How to normalize the loss for loss layers that aggregate across batches,
      /// spatial dimensions, or other dimensions.  Currently only implemented in
      /// SoftmaxWithLoss and SigmoidCrossEntropyLoss layers.
      /// </summary>
      public enum NormalizationMode {
        /// <summary>
        /// Divide by the number of examples in the batch times spatial dimensions.
        /// Outputs that receive the ignore label will NOT be ignored in computing
        /// the normalization factor.
        /// </summary>
        [pbr::OriginalName("FULL")] Full = 0,
        /// <summary>
        /// Divide by the total number of output locations that do not take the
        /// ignore_label.  If ignore_label is not set, this behaves like FULL.
        /// </summary>
        [pbr::OriginalName("VALID")] Valid = 1,
        /// <summary>
        /// Divide by the batch size.
        /// </summary>
        [pbr::OriginalName("BATCH_SIZE")] BatchSize = 2,
        /// <summary>
        /// Do not normalize the loss.
        /// </summary>
        [pbr::OriginalName("NONE")] None = 3,
      }

    }
    #endregion

  }

  public sealed partial class AccuracyParameter : pb::IMessage<AccuracyParameter> {
    private static readonly pb::MessageParser<AccuracyParameter> _parser = new pb::MessageParser<AccuracyParameter>(() => new AccuracyParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccuracyParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccuracyParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccuracyParameter(AccuracyParameter other) : this() {
      topK_ = other.topK_;
      axis_ = other.axis_;
      ignoreLabel_ = other.ignoreLabel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccuracyParameter Clone() {
      return new AccuracyParameter(this);
    }

    /// <summary>Field number for the "top_k" field.</summary>
    public const int TopKFieldNumber = 1;
    private uint topK_;
    /// <summary>
    /// When computing accuracy, count as correct by comparing the true label to
    /// the top k scoring classes.  By default, only compare to the top scoring
    /// class (i.e. argmax).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopK {
      get { return topK_; }
      set {
        topK_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The "label" axis of the prediction blob, whose argmax corresponds to the
    /// predicted label -- may be negative to index from the end (e.g., -1 for the
    /// last axis).  For example, if axis == 1 and the predictions are
    /// (N x C x H x W), the label blob is expected to contain N*H*W ground truth
    /// labels with integer values in {0, 1, ..., C-1}.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "ignore_label" field.</summary>
    public const int IgnoreLabelFieldNumber = 3;
    private int ignoreLabel_;
    /// <summary>
    /// If specified, ignore instances with the given label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IgnoreLabel {
      get { return ignoreLabel_; }
      set {
        ignoreLabel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccuracyParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccuracyParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TopK != other.TopK) return false;
      if (Axis != other.Axis) return false;
      if (IgnoreLabel != other.IgnoreLabel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TopK != 0) hash ^= TopK.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (IgnoreLabel != 0) hash ^= IgnoreLabel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopK != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TopK);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (IgnoreLabel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IgnoreLabel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopK);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (IgnoreLabel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IgnoreLabel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccuracyParameter other) {
      if (other == null) {
        return;
      }
      if (other.TopK != 0) {
        TopK = other.TopK;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.IgnoreLabel != 0) {
        IgnoreLabel = other.IgnoreLabel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopK = input.ReadUInt32();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
          case 24: {
            IgnoreLabel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnnotatedDataParameter : pb::IMessage<AnnotatedDataParameter> {
    private static readonly pb::MessageParser<AnnotatedDataParameter> _parser = new pb::MessageParser<AnnotatedDataParameter>(() => new AnnotatedDataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotatedDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedDataParameter(AnnotatedDataParameter other) : this() {
      batchSampler_ = other.batchSampler_.Clone();
      labelMapFile_ = other.labelMapFile_;
      annoType_ = other.annoType_;
      numClasses_ = other.numClasses_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedDataParameter Clone() {
      return new AnnotatedDataParameter(this);
    }

    /// <summary>Field number for the "batch_sampler" field.</summary>
    public const int BatchSamplerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BatchSampler> _repeated_batchSampler_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Inference.BatchSampler.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BatchSampler> batchSampler_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BatchSampler>();
    /// <summary>
    /// Define the sampler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BatchSampler> BatchSampler {
      get { return batchSampler_; }
    }

    /// <summary>Field number for the "label_map_file" field.</summary>
    public const int LabelMapFileFieldNumber = 2;
    private string labelMapFile_ = "";
    /// <summary>
    /// Store label name and label id in LabelMap format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelMapFile {
      get { return labelMapFile_; }
      set {
        labelMapFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anno_type" field.</summary>
    public const int AnnoTypeFieldNumber = 3;
    private global::Apollo.Perception.Inference.AnnotatedDatum.Types.AnnotationType annoType_ = 0;
    /// <summary>
    /// If provided, it will replace the AnnotationType stored in each
    /// AnnotatedDatum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.AnnotatedDatum.Types.AnnotationType AnnoType {
      get { return annoType_; }
      set {
        annoType_ = value;
      }
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 10;
    private int numClasses_;
    /// <summary>
    /// Number of classes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotatedDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotatedDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!batchSampler_.Equals(other.batchSampler_)) return false;
      if (LabelMapFile != other.LabelMapFile) return false;
      if (AnnoType != other.AnnoType) return false;
      if (NumClasses != other.NumClasses) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= batchSampler_.GetHashCode();
      if (LabelMapFile.Length != 0) hash ^= LabelMapFile.GetHashCode();
      if (AnnoType != 0) hash ^= AnnoType.GetHashCode();
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      batchSampler_.WriteTo(output, _repeated_batchSampler_codec);
      if (LabelMapFile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LabelMapFile);
      }
      if (AnnoType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AnnoType);
      }
      if (NumClasses != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NumClasses);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += batchSampler_.CalculateSize(_repeated_batchSampler_codec);
      if (LabelMapFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelMapFile);
      }
      if (AnnoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnnoType);
      }
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumClasses);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotatedDataParameter other) {
      if (other == null) {
        return;
      }
      batchSampler_.Add(other.batchSampler_);
      if (other.LabelMapFile.Length != 0) {
        LabelMapFile = other.LabelMapFile;
      }
      if (other.AnnoType != 0) {
        AnnoType = other.AnnoType;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            batchSampler_.AddEntriesFrom(input, _repeated_batchSampler_codec);
            break;
          }
          case 18: {
            LabelMapFile = input.ReadString();
            break;
          }
          case 24: {
            annoType_ = (global::Apollo.Perception.Inference.AnnotatedDatum.Types.AnnotationType) input.ReadEnum();
            break;
          }
          case 80: {
            NumClasses = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArgMaxParameter : pb::IMessage<ArgMaxParameter> {
    private static readonly pb::MessageParser<ArgMaxParameter> _parser = new pb::MessageParser<ArgMaxParameter>(() => new ArgMaxParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArgMaxParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxParameter(ArgMaxParameter other) : this() {
      outMaxVal_ = other.outMaxVal_;
      topK_ = other.topK_;
      axis_ = other.axis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxParameter Clone() {
      return new ArgMaxParameter(this);
    }

    /// <summary>Field number for the "out_max_val" field.</summary>
    public const int OutMaxValFieldNumber = 1;
    private bool outMaxVal_;
    /// <summary>
    /// If true produce pairs (argmax, maxval)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutMaxVal {
      get { return outMaxVal_; }
      set {
        outMaxVal_ = value;
      }
    }

    /// <summary>Field number for the "top_k" field.</summary>
    public const int TopKFieldNumber = 2;
    private uint topK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopK {
      get { return topK_; }
      set {
        topK_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 3;
    private int axis_;
    /// <summary>
    /// The axis along which to maximise -- may be negative to index from the
    /// end (e.g., -1 for the last axis).
    /// By default ArgMaxLayer maximizes over the flattened trailing dimensions
    /// for each index of the first / num dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArgMaxParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArgMaxParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutMaxVal != other.OutMaxVal) return false;
      if (TopK != other.TopK) return false;
      if (Axis != other.Axis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutMaxVal != false) hash ^= OutMaxVal.GetHashCode();
      if (TopK != 0) hash ^= TopK.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutMaxVal != false) {
        output.WriteRawTag(8);
        output.WriteBool(OutMaxVal);
      }
      if (TopK != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TopK);
      }
      if (Axis != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Axis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutMaxVal != false) {
        size += 1 + 1;
      }
      if (TopK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopK);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArgMaxParameter other) {
      if (other == null) {
        return;
      }
      if (other.OutMaxVal != false) {
        OutMaxVal = other.OutMaxVal;
      }
      if (other.TopK != 0) {
        TopK = other.TopK;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OutMaxVal = input.ReadBool();
            break;
          }
          case 16: {
            TopK = input.ReadUInt32();
            break;
          }
          case 24: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConcatParameter : pb::IMessage<ConcatParameter> {
    private static readonly pb::MessageParser<ConcatParameter> _parser = new pb::MessageParser<ConcatParameter>(() => new ConcatParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConcatParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatParameter(ConcatParameter other) : this() {
      axis_ = other.axis_;
      concatDim_ = other.concatDim_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatParameter Clone() {
      return new ConcatParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The axis along which to concatenate -- may be negative to index from the
    /// end (e.g., -1 for the last axis).  Other axes must have the
    /// same dimension for all the bottom blobs.
    /// By default, ConcatLayer concatenates blobs along the "channels" axis (1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "concat_dim" field.</summary>
    public const int ConcatDimFieldNumber = 1;
    private uint concatDim_;
    /// <summary>
    /// DEPRECATED: alias for "axis" -- does not support negative indexing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConcatDim {
      get { return concatDim_; }
      set {
        concatDim_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConcatParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConcatParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (ConcatDim != other.ConcatDim) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (ConcatDim != 0) hash ^= ConcatDim.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConcatDim != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConcatDim);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (ConcatDim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConcatDim);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConcatParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.ConcatDim != 0) {
        ConcatDim = other.ConcatDim;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConcatDim = input.ReadUInt32();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchNormParameter : pb::IMessage<BatchNormParameter> {
    private static readonly pb::MessageParser<BatchNormParameter> _parser = new pb::MessageParser<BatchNormParameter>(() => new BatchNormParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchNormParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchNormParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchNormParameter(BatchNormParameter other) : this() {
      useGlobalStats_ = other.useGlobalStats_;
      movingAverageFraction_ = other.movingAverageFraction_;
      eps_ = other.eps_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchNormParameter Clone() {
      return new BatchNormParameter(this);
    }

    /// <summary>Field number for the "use_global_stats" field.</summary>
    public const int UseGlobalStatsFieldNumber = 1;
    private bool useGlobalStats_;
    /// <summary>
    /// If false, accumulate global mean/variance values via a moving average. If
    /// true, use those accumulated values instead of computing mean/variance
    /// across the batch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGlobalStats {
      get { return useGlobalStats_; }
      set {
        useGlobalStats_ = value;
      }
    }

    /// <summary>Field number for the "moving_average_fraction" field.</summary>
    public const int MovingAverageFractionFieldNumber = 2;
    private float movingAverageFraction_;
    /// <summary>
    /// How much does the moving average decay each iteration?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MovingAverageFraction {
      get { return movingAverageFraction_; }
      set {
        movingAverageFraction_ = value;
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 3;
    private float eps_;
    /// <summary>
    /// Small value to add to the variance estimate so that we don't divide by
    /// zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Eps {
      get { return eps_; }
      set {
        eps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchNormParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchNormParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseGlobalStats != other.UseGlobalStats) return false;
      if (MovingAverageFraction != other.MovingAverageFraction) return false;
      if (Eps != other.Eps) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseGlobalStats != false) hash ^= UseGlobalStats.GetHashCode();
      if (MovingAverageFraction != 0F) hash ^= MovingAverageFraction.GetHashCode();
      if (Eps != 0F) hash ^= Eps.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseGlobalStats != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseGlobalStats);
      }
      if (MovingAverageFraction != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MovingAverageFraction);
      }
      if (Eps != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Eps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseGlobalStats != false) {
        size += 1 + 1;
      }
      if (MovingAverageFraction != 0F) {
        size += 1 + 4;
      }
      if (Eps != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchNormParameter other) {
      if (other == null) {
        return;
      }
      if (other.UseGlobalStats != false) {
        UseGlobalStats = other.UseGlobalStats;
      }
      if (other.MovingAverageFraction != 0F) {
        MovingAverageFraction = other.MovingAverageFraction;
      }
      if (other.Eps != 0F) {
        Eps = other.Eps;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseGlobalStats = input.ReadBool();
            break;
          }
          case 21: {
            MovingAverageFraction = input.ReadFloat();
            break;
          }
          case 29: {
            Eps = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BiasParameter : pb::IMessage<BiasParameter> {
    private static readonly pb::MessageParser<BiasParameter> _parser = new pb::MessageParser<BiasParameter>(() => new BiasParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiasParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasParameter(BiasParameter other) : this() {
      axis_ = other.axis_;
      numAxes_ = other.numAxes_;
      Filler = other.filler_ != null ? other.Filler.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasParameter Clone() {
      return new BiasParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The first axis of bottom (the first input Blob) along which to apply
    /// bottom (the second input Blob).  May be negative to index from the end
    /// (e.g., -1 for the last axis).
    ///
    /// For example, if bottom is 4D with shape 100x3x40x60, the output
    /// top will have the same shape, and bottom may have any of the
    /// following shapes (for the given value of axis):
    ///    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
    ///    (axis == 1 == -3)          3;     3x40;     3x40x60
    ///    (axis == 2 == -2)                   40;       40x60
    ///    (axis == 3 == -1)                                60
    /// Furthermore, bottom may have the empty shape (regardless of the value of
    /// "axis") -- a scalar bias.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "num_axes" field.</summary>
    public const int NumAxesFieldNumber = 2;
    private int numAxes_;
    /// <summary>
    /// (num_axes is ignored unless just one bottom is given and the bias is
    /// a learned parameter of the layer.  Otherwise, num_axes is determined by the
    /// number of axes by the second bottom.)
    /// The number of axes of the input (bottom) covered by the bias
    /// parameter, or -1 to cover all axes of bottom starting from `axis`.
    /// Set num_axes := 0, to add a zero-axis Blob: a scalar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAxes {
      get { return numAxes_; }
      set {
        numAxes_ = value;
      }
    }

    /// <summary>Field number for the "filler" field.</summary>
    public const int FillerFieldNumber = 3;
    private global::Apollo.Perception.Inference.FillerParameter filler_;
    /// <summary>
    /// (filler is ignored unless just one bottom is given and the bias is
    /// a learned parameter of the layer.)
    /// The initialization for the learned bias parameter.
    /// Default is the zero (0) initialization, resulting in the BiasLayer
    /// initially performing the identity operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter Filler {
      get { return filler_; }
      set {
        filler_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiasParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiasParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (NumAxes != other.NumAxes) return false;
      if (!object.Equals(Filler, other.Filler)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (NumAxes != 0) hash ^= NumAxes.GetHashCode();
      if (filler_ != null) hash ^= Filler.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (NumAxes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumAxes);
      }
      if (filler_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Filler);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (NumAxes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumAxes);
      }
      if (filler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filler);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiasParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.NumAxes != 0) {
        NumAxes = other.NumAxes;
      }
      if (other.filler_ != null) {
        if (filler_ == null) {
          filler_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        Filler.MergeFrom(other.Filler);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            NumAxes = input.ReadInt32();
            break;
          }
          case 26: {
            if (filler_ == null) {
              filler_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(filler_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContrastiveLossParameter : pb::IMessage<ContrastiveLossParameter> {
    private static readonly pb::MessageParser<ContrastiveLossParameter> _parser = new pb::MessageParser<ContrastiveLossParameter>(() => new ContrastiveLossParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContrastiveLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContrastiveLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContrastiveLossParameter(ContrastiveLossParameter other) : this() {
      margin_ = other.margin_;
      legacyVersion_ = other.legacyVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContrastiveLossParameter Clone() {
      return new ContrastiveLossParameter(this);
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 1;
    private float margin_;
    /// <summary>
    /// margin for dissimilar pair
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "legacy_version" field.</summary>
    public const int LegacyVersionFieldNumber = 2;
    private bool legacyVersion_;
    /// <summary>
    /// The first implementation of this cost did not exactly match the cost of
    /// Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
    /// legacy_version = false (the default) uses (margin - d)^2 as proposed in the
    /// Hadsell paper. New models should probably use this version.
    /// legacy_version = true uses (margin - d^2). This is kept to support /
    /// reproduce existing models and results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LegacyVersion {
      get { return legacyVersion_; }
      set {
        legacyVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContrastiveLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContrastiveLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Margin != other.Margin) return false;
      if (LegacyVersion != other.LegacyVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Margin != 0F) hash ^= Margin.GetHashCode();
      if (LegacyVersion != false) hash ^= LegacyVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Margin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Margin);
      }
      if (LegacyVersion != false) {
        output.WriteRawTag(16);
        output.WriteBool(LegacyVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Margin != 0F) {
        size += 1 + 4;
      }
      if (LegacyVersion != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContrastiveLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.Margin != 0F) {
        Margin = other.Margin;
      }
      if (other.LegacyVersion != false) {
        LegacyVersion = other.LegacyVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Margin = input.ReadFloat();
            break;
          }
          case 16: {
            LegacyVersion = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvolutionParameter : pb::IMessage<ConvolutionParameter> {
    private static readonly pb::MessageParser<ConvolutionParameter> _parser = new pb::MessageParser<ConvolutionParameter>(() => new ConvolutionParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvolutionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionParameter(ConvolutionParameter other) : this() {
      numOutput_ = other.numOutput_;
      biasTerm_ = other.biasTerm_;
      pad_ = other.pad_.Clone();
      kernelSize_ = other.kernelSize_.Clone();
      stride_ = other.stride_.Clone();
      dilation_ = other.dilation_.Clone();
      padH_ = other.padH_;
      padW_ = other.padW_;
      kernelH_ = other.kernelH_;
      kernelW_ = other.kernelW_;
      strideH_ = other.strideH_;
      strideW_ = other.strideW_;
      group_ = other.group_;
      WeightFiller = other.weightFiller_ != null ? other.WeightFiller.Clone() : null;
      BiasFiller = other.biasFiller_ != null ? other.BiasFiller.Clone() : null;
      engine_ = other.engine_;
      axis_ = other.axis_;
      forceNdIm2Col_ = other.forceNdIm2Col_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionParameter Clone() {
      return new ConvolutionParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The number of outputs for the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 2;
    private bool biasTerm_;
    /// <summary>
    /// whether to have bias terms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_pad_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> pad_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Pad, kernel size, and stride are all given as a single value for equal
    /// dimensions in all spatial dimensions, or once per spatial dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pad {
      get { return pad_; }
    }

    /// <summary>Field number for the "kernel_size" field.</summary>
    public const int KernelSizeFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_kernelSize_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> kernelSize_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// The kernel size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> KernelSize {
      get { return kernelSize_; }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_stride_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> stride_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// The stride; defaults to 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Stride {
      get { return stride_; }
    }

    /// <summary>Field number for the "dilation" field.</summary>
    public const int DilationFieldNumber = 18;
    private static readonly pb::FieldCodec<uint> _repeated_dilation_codec
        = pb::FieldCodec.ForUInt32(146);
    private readonly pbc::RepeatedField<uint> dilation_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Factor used to dilate the kernel, (implicitly) zero-filling the resulting
    /// holes. (Kernel dilation is sometimes referred to by its use in the
    /// algorithme à trous from Holschneider et al. 1987.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Dilation {
      get { return dilation_; }
    }

    /// <summary>Field number for the "pad_h" field.</summary>
    public const int PadHFieldNumber = 9;
    private uint padH_;
    /// <summary>
    /// For 2D convolution only, the *_h and *_w versions may also be used to
    /// specify both spatial dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadH {
      get { return padH_; }
      set {
        padH_ = value;
      }
    }

    /// <summary>Field number for the "pad_w" field.</summary>
    public const int PadWFieldNumber = 10;
    private uint padW_;
    /// <summary>
    /// The padding width (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadW {
      get { return padW_; }
      set {
        padW_ = value;
      }
    }

    /// <summary>Field number for the "kernel_h" field.</summary>
    public const int KernelHFieldNumber = 11;
    private uint kernelH_;
    /// <summary>
    /// The kernel height (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelH {
      get { return kernelH_; }
      set {
        kernelH_ = value;
      }
    }

    /// <summary>Field number for the "kernel_w" field.</summary>
    public const int KernelWFieldNumber = 12;
    private uint kernelW_;
    /// <summary>
    /// The kernel width (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelW {
      get { return kernelW_; }
      set {
        kernelW_ = value;
      }
    }

    /// <summary>Field number for the "stride_h" field.</summary>
    public const int StrideHFieldNumber = 13;
    private uint strideH_;
    /// <summary>
    /// The stride height (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideH {
      get { return strideH_; }
      set {
        strideH_ = value;
      }
    }

    /// <summary>Field number for the "stride_w" field.</summary>
    public const int StrideWFieldNumber = 14;
    private uint strideW_;
    /// <summary>
    /// The stride width (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideW {
      get { return strideW_; }
      set {
        strideW_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 5;
    private uint group_;
    /// <summary>
    /// The group size for group conv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 7;
    private global::Apollo.Perception.Inference.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 8;
    private global::Apollo.Perception.Inference.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 15;
    private global::Apollo.Perception.Inference.ConvolutionParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ConvolutionParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 16;
    private int axis_;
    /// <summary>
    /// The axis to interpret as "channels" when performing convolution.
    /// Preceding dimensions are treated as independent inputs;
    /// succeeding dimensions are treated as "spatial".
    /// With (N, C, H, W) inputs, and axis == 1 (the default), we perform
    /// N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
    /// groups g>1) filters across the spatial axes (H, W) of the input.
    /// With (N, C, D, H, W) inputs, and axis == 1, we perform
    /// N independent 3D convolutions, sliding (C/g)-channels
    /// filters across the spatial axes (D, H, W) of the input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "force_nd_im2col" field.</summary>
    public const int ForceNdIm2ColFieldNumber = 17;
    private bool forceNdIm2Col_;
    /// <summary>
    /// Whether to force use of the general ND convolution, even if a specific
    /// implementation for blobs of the appropriate number of spatial dimensions
    /// is available. (Currently, there is only a 2D-specific convolution
    /// implementation; for input blobs with num_axes != 2, this option is
    /// ignored and the ND implementation will be used.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceNdIm2Col {
      get { return forceNdIm2Col_; }
      set {
        forceNdIm2Col_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvolutionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvolutionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if(!pad_.Equals(other.pad_)) return false;
      if(!kernelSize_.Equals(other.kernelSize_)) return false;
      if(!stride_.Equals(other.stride_)) return false;
      if(!dilation_.Equals(other.dilation_)) return false;
      if (PadH != other.PadH) return false;
      if (PadW != other.PadW) return false;
      if (KernelH != other.KernelH) return false;
      if (KernelW != other.KernelW) return false;
      if (StrideH != other.StrideH) return false;
      if (StrideW != other.StrideW) return false;
      if (Group != other.Group) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (Engine != other.Engine) return false;
      if (Axis != other.Axis) return false;
      if (ForceNdIm2Col != other.ForceNdIm2Col) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      hash ^= pad_.GetHashCode();
      hash ^= kernelSize_.GetHashCode();
      hash ^= stride_.GetHashCode();
      hash ^= dilation_.GetHashCode();
      if (PadH != 0) hash ^= PadH.GetHashCode();
      if (PadW != 0) hash ^= PadW.GetHashCode();
      if (KernelH != 0) hash ^= KernelH.GetHashCode();
      if (KernelW != 0) hash ^= KernelW.GetHashCode();
      if (StrideH != 0) hash ^= StrideH.GetHashCode();
      if (StrideW != 0) hash ^= StrideW.GetHashCode();
      if (Group != 0) hash ^= Group.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (ForceNdIm2Col != false) hash ^= ForceNdIm2Col.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(16);
        output.WriteBool(BiasTerm);
      }
      pad_.WriteTo(output, _repeated_pad_codec);
      kernelSize_.WriteTo(output, _repeated_kernelSize_codec);
      if (Group != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Group);
      }
      stride_.WriteTo(output, _repeated_stride_codec);
      if (weightFiller_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BiasFiller);
      }
      if (PadH != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PadH);
      }
      if (PadW != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(PadW);
      }
      if (KernelH != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(KernelH);
      }
      if (KernelW != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(KernelW);
      }
      if (StrideH != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(StrideH);
      }
      if (StrideW != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(StrideW);
      }
      if (Engine != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Engine);
      }
      if (Axis != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Axis);
      }
      if (ForceNdIm2Col != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ForceNdIm2Col);
      }
      dilation_.WriteTo(output, _repeated_dilation_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      size += pad_.CalculateSize(_repeated_pad_codec);
      size += kernelSize_.CalculateSize(_repeated_kernelSize_codec);
      size += stride_.CalculateSize(_repeated_stride_codec);
      size += dilation_.CalculateSize(_repeated_dilation_codec);
      if (PadH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadH);
      }
      if (PadW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadW);
      }
      if (KernelH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelH);
      }
      if (KernelW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelW);
      }
      if (StrideH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideH);
      }
      if (StrideW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideW);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Group);
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (Axis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (ForceNdIm2Col != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvolutionParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      pad_.Add(other.pad_);
      kernelSize_.Add(other.kernelSize_);
      stride_.Add(other.stride_);
      dilation_.Add(other.dilation_);
      if (other.PadH != 0) {
        PadH = other.PadH;
      }
      if (other.PadW != 0) {
        PadW = other.PadW;
      }
      if (other.KernelH != 0) {
        KernelH = other.KernelH;
      }
      if (other.KernelW != 0) {
        KernelW = other.KernelW;
      }
      if (other.StrideH != 0) {
        StrideH = other.StrideH;
      }
      if (other.StrideW != 0) {
        StrideW = other.StrideW;
      }
      if (other.Group != 0) {
        Group = other.Group;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.ForceNdIm2Col != false) {
        ForceNdIm2Col = other.ForceNdIm2Col;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 16: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            pad_.AddEntriesFrom(input, _repeated_pad_codec);
            break;
          }
          case 34:
          case 32: {
            kernelSize_.AddEntriesFrom(input, _repeated_kernelSize_codec);
            break;
          }
          case 40: {
            Group = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            stride_.AddEntriesFrom(input, _repeated_stride_codec);
            break;
          }
          case 58: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 66: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 72: {
            PadH = input.ReadUInt32();
            break;
          }
          case 80: {
            PadW = input.ReadUInt32();
            break;
          }
          case 88: {
            KernelH = input.ReadUInt32();
            break;
          }
          case 96: {
            KernelW = input.ReadUInt32();
            break;
          }
          case 104: {
            StrideH = input.ReadUInt32();
            break;
          }
          case 112: {
            StrideW = input.ReadUInt32();
            break;
          }
          case 120: {
            engine_ = (global::Apollo.Perception.Inference.ConvolutionParameter.Types.Engine) input.ReadEnum();
            break;
          }
          case 128: {
            Axis = input.ReadInt32();
            break;
          }
          case 136: {
            ForceNdIm2Col = input.ReadBool();
            break;
          }
          case 146:
          case 144: {
            dilation_.AddEntriesFrom(input, _repeated_dilation_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConvolutionParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class CropParameter : pb::IMessage<CropParameter> {
    private static readonly pb::MessageParser<CropParameter> _parser = new pb::MessageParser<CropParameter>(() => new CropParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CropParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropParameter(CropParameter other) : this() {
      axis_ = other.axis_;
      offset_ = other.offset_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropParameter Clone() {
      return new CropParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// To crop, elements of the first bottom are selected to fit the dimensions
    /// of the second, reference bottom. The crop is configured by
    /// - the crop `axis` to pick the dimensions for cropping
    /// - the crop `offset` to set the shift for all/each dimension
    /// to align the cropped bottom with the reference bottom.
    /// All dimensions up to but excluding `axis` are preserved, while
    /// the dimensions including and trailing `axis` are cropped.
    /// If only one `offset` is set, then all dimensions are offset by this amount.
    /// Otherwise, the number of offsets must equal the number of cropped axes to
    /// shift the crop in each dimension accordingly.
    /// Note: standard dimensions are N,C,H,W so the default is a spatial crop,
    /// and `axis` may be negative to index from the end (e.g., -1 for the last
    /// axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_offset_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> offset_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Offset {
      get { return offset_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CropParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CropParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if(!offset_.Equals(other.offset_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      hash ^= offset_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      offset_.WriteTo(output, _repeated_offset_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      size += offset_.CalculateSize(_repeated_offset_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CropParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      offset_.Add(other.offset_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataParameter : pb::IMessage<DataParameter> {
    private static readonly pb::MessageParser<DataParameter> _parser = new pb::MessageParser<DataParameter>(() => new DataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataParameter(DataParameter other) : this() {
      source_ = other.source_;
      batchSize_ = other.batchSize_;
      randSkip_ = other.randSkip_;
      backend_ = other.backend_;
      scale_ = other.scale_;
      meanFile_ = other.meanFile_;
      cropSize_ = other.cropSize_;
      mirror_ = other.mirror_;
      forceEncodedColor_ = other.forceEncodedColor_;
      prefetch_ = other.prefetch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataParameter Clone() {
      return new DataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 4;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "rand_skip" field.</summary>
    public const int RandSkipFieldNumber = 7;
    private uint randSkip_;
    /// <summary>
    /// The rand_skip variable is for the data layer to skip a few data points
    /// to avoid all asynchronous sgd clients to start at the same point. The skip
    /// point would be set as rand_skip * rand(0,1). Note that rand_skip should not
    /// be larger than the number of keys in the database.
    /// DEPRECATED. Each solver accesses a different subset of the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandSkip {
      get { return randSkip_; }
      set {
        randSkip_ = value;
      }
    }

    /// <summary>Field number for the "backend" field.</summary>
    public const int BackendFieldNumber = 8;
    private global::Apollo.Perception.Inference.DataParameter.Types.DB backend_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DataParameter.Types.DB Backend {
      get { return backend_; }
      set {
        backend_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. For data pre-processing, we can do
    /// simple scaling and subtracting the data mean, if provided. Note that the
    /// mean subtraction is always carried out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 3;
    private string meanFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 5;
    private uint cropSize_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we would like to randomly
    /// crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 6;
    private bool mirror_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
    /// data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "force_encoded_color" field.</summary>
    public const int ForceEncodedColorFieldNumber = 9;
    private bool forceEncodedColor_;
    /// <summary>
    /// Force the encoded image to have 3 color channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceEncodedColor {
      get { return forceEncodedColor_; }
      set {
        forceEncodedColor_ = value;
      }
    }

    /// <summary>Field number for the "prefetch" field.</summary>
    public const int PrefetchFieldNumber = 10;
    private uint prefetch_;
    /// <summary>
    /// Prefetch queue (Number of batches to prefetch to host memory, increase if
    /// data access bandwidth varies).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prefetch {
      get { return prefetch_; }
      set {
        prefetch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (BatchSize != other.BatchSize) return false;
      if (RandSkip != other.RandSkip) return false;
      if (Backend != other.Backend) return false;
      if (Scale != other.Scale) return false;
      if (MeanFile != other.MeanFile) return false;
      if (CropSize != other.CropSize) return false;
      if (Mirror != other.Mirror) return false;
      if (ForceEncodedColor != other.ForceEncodedColor) return false;
      if (Prefetch != other.Prefetch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (RandSkip != 0) hash ^= RandSkip.GetHashCode();
      if (Backend != 0) hash ^= Backend.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (ForceEncodedColor != false) hash ^= ForceEncodedColor.GetHashCode();
      if (Prefetch != 0) hash ^= Prefetch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeanFile);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BatchSize);
      }
      if (CropSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CropSize);
      }
      if (Mirror != false) {
        output.WriteRawTag(48);
        output.WriteBool(Mirror);
      }
      if (RandSkip != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RandSkip);
      }
      if (Backend != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Backend);
      }
      if (ForceEncodedColor != false) {
        output.WriteRawTag(72);
        output.WriteBool(ForceEncodedColor);
      }
      if (Prefetch != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Prefetch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (RandSkip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandSkip);
      }
      if (Backend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Backend);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (ForceEncodedColor != false) {
        size += 1 + 1;
      }
      if (Prefetch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prefetch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.RandSkip != 0) {
        RandSkip = other.RandSkip;
      }
      if (other.Backend != 0) {
        Backend = other.Backend;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.ForceEncodedColor != false) {
        ForceEncodedColor = other.ForceEncodedColor;
      }
      if (other.Prefetch != 0) {
        Prefetch = other.Prefetch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            MeanFile = input.ReadString();
            break;
          }
          case 32: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 40: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 48: {
            Mirror = input.ReadBool();
            break;
          }
          case 56: {
            RandSkip = input.ReadUInt32();
            break;
          }
          case 64: {
            backend_ = (global::Apollo.Perception.Inference.DataParameter.Types.DB) input.ReadEnum();
            break;
          }
          case 72: {
            ForceEncodedColor = input.ReadBool();
            break;
          }
          case 80: {
            Prefetch = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DB {
        [pbr::OriginalName("LEVELDB")] Leveldb = 0,
        [pbr::OriginalName("LMDB")] Lmdb = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that store parameters used by DetectionEvaluateLayer
  /// </summary>
  public sealed partial class DetectionEvaluateParameter : pb::IMessage<DetectionEvaluateParameter> {
    private static readonly pb::MessageParser<DetectionEvaluateParameter> _parser = new pb::MessageParser<DetectionEvaluateParameter>(() => new DetectionEvaluateParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetectionEvaluateParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionEvaluateParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionEvaluateParameter(DetectionEvaluateParameter other) : this() {
      numClasses_ = other.numClasses_;
      backgroundLabelId_ = other.backgroundLabelId_;
      overlapThreshold_ = other.overlapThreshold_;
      evaluateDifficultGt_ = other.evaluateDifficultGt_;
      nameSizeFile_ = other.nameSizeFile_;
      ResizeParam = other.resizeParam_ != null ? other.ResizeParam.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionEvaluateParameter Clone() {
      return new DetectionEvaluateParameter(this);
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 1;
    private uint numClasses_;
    /// <summary>
    /// Number of classes that are actually predicted. Required!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "background_label_id" field.</summary>
    public const int BackgroundLabelIdFieldNumber = 2;
    private uint backgroundLabelId_;
    /// <summary>
    /// Label id for background class. Needed for sanity check so that
    /// background class is neither in the ground truth nor the detections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BackgroundLabelId {
      get { return backgroundLabelId_; }
      set {
        backgroundLabelId_ = value;
      }
    }

    /// <summary>Field number for the "overlap_threshold" field.</summary>
    public const int OverlapThresholdFieldNumber = 3;
    private float overlapThreshold_;
    /// <summary>
    /// Threshold for deciding true/false positive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OverlapThreshold {
      get { return overlapThreshold_; }
      set {
        overlapThreshold_ = value;
      }
    }

    /// <summary>Field number for the "evaluate_difficult_gt" field.</summary>
    public const int EvaluateDifficultGtFieldNumber = 4;
    private bool evaluateDifficultGt_;
    /// <summary>
    /// If true, also consider difficult ground truth for evaluation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EvaluateDifficultGt {
      get { return evaluateDifficultGt_; }
      set {
        evaluateDifficultGt_ = value;
      }
    }

    /// <summary>Field number for the "name_size_file" field.</summary>
    public const int NameSizeFileFieldNumber = 5;
    private string nameSizeFile_ = "";
    /// <summary>
    /// A file which contains a list of names and sizes with same order
    /// of the input DB. The file is in the following format:
    ///    name height width
    ///    ...
    /// If provided, we will scale the prediction and ground truth NormalizedBBox
    /// for evaluation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameSizeFile {
      get { return nameSizeFile_; }
      set {
        nameSizeFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resize_param" field.</summary>
    public const int ResizeParamFieldNumber = 6;
    private global::Apollo.Perception.Inference.ResizeParameter resizeParam_;
    /// <summary>
    /// The resize parameter used in converting NormalizedBBox to original image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ResizeParameter ResizeParam {
      get { return resizeParam_; }
      set {
        resizeParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetectionEvaluateParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetectionEvaluateParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumClasses != other.NumClasses) return false;
      if (BackgroundLabelId != other.BackgroundLabelId) return false;
      if (OverlapThreshold != other.OverlapThreshold) return false;
      if (EvaluateDifficultGt != other.EvaluateDifficultGt) return false;
      if (NameSizeFile != other.NameSizeFile) return false;
      if (!object.Equals(ResizeParam, other.ResizeParam)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      if (BackgroundLabelId != 0) hash ^= BackgroundLabelId.GetHashCode();
      if (OverlapThreshold != 0F) hash ^= OverlapThreshold.GetHashCode();
      if (EvaluateDifficultGt != false) hash ^= EvaluateDifficultGt.GetHashCode();
      if (NameSizeFile.Length != 0) hash ^= NameSizeFile.GetHashCode();
      if (resizeParam_ != null) hash ^= ResizeParam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumClasses != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumClasses);
      }
      if (BackgroundLabelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BackgroundLabelId);
      }
      if (OverlapThreshold != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(OverlapThreshold);
      }
      if (EvaluateDifficultGt != false) {
        output.WriteRawTag(32);
        output.WriteBool(EvaluateDifficultGt);
      }
      if (NameSizeFile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NameSizeFile);
      }
      if (resizeParam_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ResizeParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumClasses);
      }
      if (BackgroundLabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BackgroundLabelId);
      }
      if (OverlapThreshold != 0F) {
        size += 1 + 4;
      }
      if (EvaluateDifficultGt != false) {
        size += 1 + 1;
      }
      if (NameSizeFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameSizeFile);
      }
      if (resizeParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResizeParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetectionEvaluateParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      if (other.BackgroundLabelId != 0) {
        BackgroundLabelId = other.BackgroundLabelId;
      }
      if (other.OverlapThreshold != 0F) {
        OverlapThreshold = other.OverlapThreshold;
      }
      if (other.EvaluateDifficultGt != false) {
        EvaluateDifficultGt = other.EvaluateDifficultGt;
      }
      if (other.NameSizeFile.Length != 0) {
        NameSizeFile = other.NameSizeFile;
      }
      if (other.resizeParam_ != null) {
        if (resizeParam_ == null) {
          resizeParam_ = new global::Apollo.Perception.Inference.ResizeParameter();
        }
        ResizeParam.MergeFrom(other.ResizeParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumClasses = input.ReadUInt32();
            break;
          }
          case 16: {
            BackgroundLabelId = input.ReadUInt32();
            break;
          }
          case 29: {
            OverlapThreshold = input.ReadFloat();
            break;
          }
          case 32: {
            EvaluateDifficultGt = input.ReadBool();
            break;
          }
          case 42: {
            NameSizeFile = input.ReadString();
            break;
          }
          case 50: {
            if (resizeParam_ == null) {
              resizeParam_ = new global::Apollo.Perception.Inference.ResizeParameter();
            }
            input.ReadMessage(resizeParam_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NonMaximumSuppressionParameter : pb::IMessage<NonMaximumSuppressionParameter> {
    private static readonly pb::MessageParser<NonMaximumSuppressionParameter> _parser = new pb::MessageParser<NonMaximumSuppressionParameter>(() => new NonMaximumSuppressionParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NonMaximumSuppressionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonMaximumSuppressionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonMaximumSuppressionParameter(NonMaximumSuppressionParameter other) : this() {
      nmsThreshold_ = other.nmsThreshold_;
      topK_ = other.topK_;
      eta_ = other.eta_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonMaximumSuppressionParameter Clone() {
      return new NonMaximumSuppressionParameter(this);
    }

    /// <summary>Field number for the "nms_threshold" field.</summary>
    public const int NmsThresholdFieldNumber = 1;
    private float nmsThreshold_;
    /// <summary>
    /// Threshold to be used in nms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NmsThreshold {
      get { return nmsThreshold_; }
      set {
        nmsThreshold_ = value;
      }
    }

    /// <summary>Field number for the "top_k" field.</summary>
    public const int TopKFieldNumber = 2;
    private int topK_;
    /// <summary>
    /// Maximum number of results to be kept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopK {
      get { return topK_; }
      set {
        topK_ = value;
      }
    }

    /// <summary>Field number for the "eta" field.</summary>
    public const int EtaFieldNumber = 3;
    private float eta_;
    /// <summary>
    /// Parameter for adaptive nms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Eta {
      get { return eta_; }
      set {
        eta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NonMaximumSuppressionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NonMaximumSuppressionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NmsThreshold != other.NmsThreshold) return false;
      if (TopK != other.TopK) return false;
      if (Eta != other.Eta) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NmsThreshold != 0F) hash ^= NmsThreshold.GetHashCode();
      if (TopK != 0) hash ^= TopK.GetHashCode();
      if (Eta != 0F) hash ^= Eta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NmsThreshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(NmsThreshold);
      }
      if (TopK != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TopK);
      }
      if (Eta != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Eta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NmsThreshold != 0F) {
        size += 1 + 4;
      }
      if (TopK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopK);
      }
      if (Eta != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NonMaximumSuppressionParameter other) {
      if (other == null) {
        return;
      }
      if (other.NmsThreshold != 0F) {
        NmsThreshold = other.NmsThreshold;
      }
      if (other.TopK != 0) {
        TopK = other.TopK;
      }
      if (other.Eta != 0F) {
        Eta = other.Eta;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            NmsThreshold = input.ReadFloat();
            break;
          }
          case 16: {
            TopK = input.ReadInt32();
            break;
          }
          case 29: {
            Eta = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveOutputParameter : pb::IMessage<SaveOutputParameter> {
    private static readonly pb::MessageParser<SaveOutputParameter> _parser = new pb::MessageParser<SaveOutputParameter>(() => new SaveOutputParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveOutputParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveOutputParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveOutputParameter(SaveOutputParameter other) : this() {
      outputDirectory_ = other.outputDirectory_;
      outputNamePrefix_ = other.outputNamePrefix_;
      outputFormat_ = other.outputFormat_;
      labelMapFile_ = other.labelMapFile_;
      nameSizeFile_ = other.nameSizeFile_;
      numTestImage_ = other.numTestImage_;
      ResizeParam = other.resizeParam_ != null ? other.ResizeParam.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveOutputParameter Clone() {
      return new SaveOutputParameter(this);
    }

    /// <summary>Field number for the "output_directory" field.</summary>
    public const int OutputDirectoryFieldNumber = 1;
    private string outputDirectory_ = "";
    /// <summary>
    /// Output directory. If not empty, we will save the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputDirectory {
      get { return outputDirectory_; }
      set {
        outputDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_name_prefix" field.</summary>
    public const int OutputNamePrefixFieldNumber = 2;
    private string outputNamePrefix_ = "";
    /// <summary>
    /// Output name prefix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputNamePrefix {
      get { return outputNamePrefix_; }
      set {
        outputNamePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_format" field.</summary>
    public const int OutputFormatFieldNumber = 3;
    private string outputFormat_ = "";
    /// <summary>
    /// Output format.
    ///    VOC - PASCAL VOC output format.
    ///    COCO - MS COCO output format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputFormat {
      get { return outputFormat_; }
      set {
        outputFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label_map_file" field.</summary>
    public const int LabelMapFileFieldNumber = 4;
    private string labelMapFile_ = "";
    /// <summary>
    /// If you want to output results, must also provide the following two files.
    /// Otherwise, we will ignore saving results.
    /// label map file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelMapFile {
      get { return labelMapFile_; }
      set {
        labelMapFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_size_file" field.</summary>
    public const int NameSizeFileFieldNumber = 5;
    private string nameSizeFile_ = "";
    /// <summary>
    /// A file which contains a list of names and sizes with same order
    /// of the input DB. The file is in the following format:
    ///    name height width
    ///    ...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameSizeFile {
      get { return nameSizeFile_; }
      set {
        nameSizeFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_test_image" field.</summary>
    public const int NumTestImageFieldNumber = 6;
    private uint numTestImage_;
    /// <summary>
    /// Number of test images. It can be less than the lines specified in
    /// name_size_file. For example, when we only want to evaluate on part
    /// of the test images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTestImage {
      get { return numTestImage_; }
      set {
        numTestImage_ = value;
      }
    }

    /// <summary>Field number for the "resize_param" field.</summary>
    public const int ResizeParamFieldNumber = 7;
    private global::Apollo.Perception.Inference.ResizeParameter resizeParam_;
    /// <summary>
    /// The resize parameter used in saving the data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ResizeParameter ResizeParam {
      get { return resizeParam_; }
      set {
        resizeParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveOutputParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveOutputParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputDirectory != other.OutputDirectory) return false;
      if (OutputNamePrefix != other.OutputNamePrefix) return false;
      if (OutputFormat != other.OutputFormat) return false;
      if (LabelMapFile != other.LabelMapFile) return false;
      if (NameSizeFile != other.NameSizeFile) return false;
      if (NumTestImage != other.NumTestImage) return false;
      if (!object.Equals(ResizeParam, other.ResizeParam)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputDirectory.Length != 0) hash ^= OutputDirectory.GetHashCode();
      if (OutputNamePrefix.Length != 0) hash ^= OutputNamePrefix.GetHashCode();
      if (OutputFormat.Length != 0) hash ^= OutputFormat.GetHashCode();
      if (LabelMapFile.Length != 0) hash ^= LabelMapFile.GetHashCode();
      if (NameSizeFile.Length != 0) hash ^= NameSizeFile.GetHashCode();
      if (NumTestImage != 0) hash ^= NumTestImage.GetHashCode();
      if (resizeParam_ != null) hash ^= ResizeParam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputDirectory.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OutputDirectory);
      }
      if (OutputNamePrefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OutputNamePrefix);
      }
      if (OutputFormat.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OutputFormat);
      }
      if (LabelMapFile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LabelMapFile);
      }
      if (NameSizeFile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NameSizeFile);
      }
      if (NumTestImage != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumTestImage);
      }
      if (resizeParam_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ResizeParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputDirectory);
      }
      if (OutputNamePrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputNamePrefix);
      }
      if (OutputFormat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputFormat);
      }
      if (LabelMapFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelMapFile);
      }
      if (NameSizeFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameSizeFile);
      }
      if (NumTestImage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTestImage);
      }
      if (resizeParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResizeParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveOutputParameter other) {
      if (other == null) {
        return;
      }
      if (other.OutputDirectory.Length != 0) {
        OutputDirectory = other.OutputDirectory;
      }
      if (other.OutputNamePrefix.Length != 0) {
        OutputNamePrefix = other.OutputNamePrefix;
      }
      if (other.OutputFormat.Length != 0) {
        OutputFormat = other.OutputFormat;
      }
      if (other.LabelMapFile.Length != 0) {
        LabelMapFile = other.LabelMapFile;
      }
      if (other.NameSizeFile.Length != 0) {
        NameSizeFile = other.NameSizeFile;
      }
      if (other.NumTestImage != 0) {
        NumTestImage = other.NumTestImage;
      }
      if (other.resizeParam_ != null) {
        if (resizeParam_ == null) {
          resizeParam_ = new global::Apollo.Perception.Inference.ResizeParameter();
        }
        ResizeParam.MergeFrom(other.ResizeParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OutputDirectory = input.ReadString();
            break;
          }
          case 18: {
            OutputNamePrefix = input.ReadString();
            break;
          }
          case 26: {
            OutputFormat = input.ReadString();
            break;
          }
          case 34: {
            LabelMapFile = input.ReadString();
            break;
          }
          case 42: {
            NameSizeFile = input.ReadString();
            break;
          }
          case 48: {
            NumTestImage = input.ReadUInt32();
            break;
          }
          case 58: {
            if (resizeParam_ == null) {
              resizeParam_ = new global::Apollo.Perception.Inference.ResizeParameter();
            }
            input.ReadMessage(resizeParam_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that store parameters used by DetectionOutputLayer
  /// </summary>
  public sealed partial class DetectionOutputParameter : pb::IMessage<DetectionOutputParameter> {
    private static readonly pb::MessageParser<DetectionOutputParameter> _parser = new pb::MessageParser<DetectionOutputParameter>(() => new DetectionOutputParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetectionOutputParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionOutputParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionOutputParameter(DetectionOutputParameter other) : this() {
      numClasses_ = other.numClasses_;
      shareLocation_ = other.shareLocation_;
      backgroundLabelId_ = other.backgroundLabelId_;
      NmsParam = other.nmsParam_ != null ? other.NmsParam.Clone() : null;
      SaveOutputParam = other.saveOutputParam_ != null ? other.SaveOutputParam.Clone() : null;
      codeType_ = other.codeType_;
      varianceEncodedInTarget_ = other.varianceEncodedInTarget_;
      keepTopK_ = other.keepTopK_;
      confidenceThreshold_ = other.confidenceThreshold_;
      visualize_ = other.visualize_;
      visualizeThreshold_ = other.visualizeThreshold_;
      saveFile_ = other.saveFile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionOutputParameter Clone() {
      return new DetectionOutputParameter(this);
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 1;
    private uint numClasses_;
    /// <summary>
    /// Number of classes to be predicted. Required!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "share_location" field.</summary>
    public const int ShareLocationFieldNumber = 2;
    private bool shareLocation_;
    /// <summary>
    /// If true, bounding box are shared among different classes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShareLocation {
      get { return shareLocation_; }
      set {
        shareLocation_ = value;
      }
    }

    /// <summary>Field number for the "background_label_id" field.</summary>
    public const int BackgroundLabelIdFieldNumber = 3;
    private int backgroundLabelId_;
    /// <summary>
    /// Background label id. If there is no background class,
    /// set it as -1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BackgroundLabelId {
      get { return backgroundLabelId_; }
      set {
        backgroundLabelId_ = value;
      }
    }

    /// <summary>Field number for the "nms_param" field.</summary>
    public const int NmsParamFieldNumber = 4;
    private global::Apollo.Perception.Inference.NonMaximumSuppressionParameter nmsParam_;
    /// <summary>
    /// Parameters used for non maximum suppression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NonMaximumSuppressionParameter NmsParam {
      get { return nmsParam_; }
      set {
        nmsParam_ = value;
      }
    }

    /// <summary>Field number for the "save_output_param" field.</summary>
    public const int SaveOutputParamFieldNumber = 5;
    private global::Apollo.Perception.Inference.SaveOutputParameter saveOutputParam_;
    /// <summary>
    /// Parameters used for saving detection results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SaveOutputParameter SaveOutputParam {
      get { return saveOutputParam_; }
      set {
        saveOutputParam_ = value;
      }
    }

    /// <summary>Field number for the "code_type" field.</summary>
    public const int CodeTypeFieldNumber = 6;
    private global::Apollo.Perception.Inference.PriorBoxParameter.Types.CodeType codeType_ = 0;
    /// <summary>
    /// Type of coding method for bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PriorBoxParameter.Types.CodeType CodeType {
      get { return codeType_; }
      set {
        codeType_ = value;
      }
    }

    /// <summary>Field number for the "variance_encoded_in_target" field.</summary>
    public const int VarianceEncodedInTargetFieldNumber = 8;
    private bool varianceEncodedInTarget_;
    /// <summary>
    /// If true, variance is encoded in target; otherwise we need to adjust the
    /// predicted offset accordingly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VarianceEncodedInTarget {
      get { return varianceEncodedInTarget_; }
      set {
        varianceEncodedInTarget_ = value;
      }
    }

    /// <summary>Field number for the "keep_top_k" field.</summary>
    public const int KeepTopKFieldNumber = 7;
    private int keepTopK_;
    /// <summary>
    /// Number of total bboxes to be kept per image after nms step.
    /// -1 means keeping all bboxes after nms step.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepTopK {
      get { return keepTopK_; }
      set {
        keepTopK_ = value;
      }
    }

    /// <summary>Field number for the "confidence_threshold" field.</summary>
    public const int ConfidenceThresholdFieldNumber = 9;
    private float confidenceThreshold_;
    /// <summary>
    /// Only consider detections whose confidences are larger than a threshold.
    /// If not provided, consider all boxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConfidenceThreshold {
      get { return confidenceThreshold_; }
      set {
        confidenceThreshold_ = value;
      }
    }

    /// <summary>Field number for the "visualize" field.</summary>
    public const int VisualizeFieldNumber = 10;
    private bool visualize_;
    /// <summary>
    /// If true, visualize the detection results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visualize {
      get { return visualize_; }
      set {
        visualize_ = value;
      }
    }

    /// <summary>Field number for the "visualize_threshold" field.</summary>
    public const int VisualizeThresholdFieldNumber = 11;
    private float visualizeThreshold_;
    /// <summary>
    /// The threshold used to visualize the detection results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisualizeThreshold {
      get { return visualizeThreshold_; }
      set {
        visualizeThreshold_ = value;
      }
    }

    /// <summary>Field number for the "save_file" field.</summary>
    public const int SaveFileFieldNumber = 12;
    private string saveFile_ = "";
    /// <summary>
    /// If provided, save outputs to video file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaveFile {
      get { return saveFile_; }
      set {
        saveFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetectionOutputParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetectionOutputParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumClasses != other.NumClasses) return false;
      if (ShareLocation != other.ShareLocation) return false;
      if (BackgroundLabelId != other.BackgroundLabelId) return false;
      if (!object.Equals(NmsParam, other.NmsParam)) return false;
      if (!object.Equals(SaveOutputParam, other.SaveOutputParam)) return false;
      if (CodeType != other.CodeType) return false;
      if (VarianceEncodedInTarget != other.VarianceEncodedInTarget) return false;
      if (KeepTopK != other.KeepTopK) return false;
      if (ConfidenceThreshold != other.ConfidenceThreshold) return false;
      if (Visualize != other.Visualize) return false;
      if (VisualizeThreshold != other.VisualizeThreshold) return false;
      if (SaveFile != other.SaveFile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      if (ShareLocation != false) hash ^= ShareLocation.GetHashCode();
      if (BackgroundLabelId != 0) hash ^= BackgroundLabelId.GetHashCode();
      if (nmsParam_ != null) hash ^= NmsParam.GetHashCode();
      if (saveOutputParam_ != null) hash ^= SaveOutputParam.GetHashCode();
      if (CodeType != 0) hash ^= CodeType.GetHashCode();
      if (VarianceEncodedInTarget != false) hash ^= VarianceEncodedInTarget.GetHashCode();
      if (KeepTopK != 0) hash ^= KeepTopK.GetHashCode();
      if (ConfidenceThreshold != 0F) hash ^= ConfidenceThreshold.GetHashCode();
      if (Visualize != false) hash ^= Visualize.GetHashCode();
      if (VisualizeThreshold != 0F) hash ^= VisualizeThreshold.GetHashCode();
      if (SaveFile.Length != 0) hash ^= SaveFile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumClasses != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumClasses);
      }
      if (ShareLocation != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShareLocation);
      }
      if (BackgroundLabelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BackgroundLabelId);
      }
      if (nmsParam_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NmsParam);
      }
      if (saveOutputParam_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SaveOutputParam);
      }
      if (CodeType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CodeType);
      }
      if (KeepTopK != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KeepTopK);
      }
      if (VarianceEncodedInTarget != false) {
        output.WriteRawTag(64);
        output.WriteBool(VarianceEncodedInTarget);
      }
      if (ConfidenceThreshold != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ConfidenceThreshold);
      }
      if (Visualize != false) {
        output.WriteRawTag(80);
        output.WriteBool(Visualize);
      }
      if (VisualizeThreshold != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(VisualizeThreshold);
      }
      if (SaveFile.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SaveFile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumClasses);
      }
      if (ShareLocation != false) {
        size += 1 + 1;
      }
      if (BackgroundLabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackgroundLabelId);
      }
      if (nmsParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NmsParam);
      }
      if (saveOutputParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaveOutputParam);
      }
      if (CodeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CodeType);
      }
      if (VarianceEncodedInTarget != false) {
        size += 1 + 1;
      }
      if (KeepTopK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepTopK);
      }
      if (ConfidenceThreshold != 0F) {
        size += 1 + 4;
      }
      if (Visualize != false) {
        size += 1 + 1;
      }
      if (VisualizeThreshold != 0F) {
        size += 1 + 4;
      }
      if (SaveFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaveFile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetectionOutputParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      if (other.ShareLocation != false) {
        ShareLocation = other.ShareLocation;
      }
      if (other.BackgroundLabelId != 0) {
        BackgroundLabelId = other.BackgroundLabelId;
      }
      if (other.nmsParam_ != null) {
        if (nmsParam_ == null) {
          nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
        }
        NmsParam.MergeFrom(other.NmsParam);
      }
      if (other.saveOutputParam_ != null) {
        if (saveOutputParam_ == null) {
          saveOutputParam_ = new global::Apollo.Perception.Inference.SaveOutputParameter();
        }
        SaveOutputParam.MergeFrom(other.SaveOutputParam);
      }
      if (other.CodeType != 0) {
        CodeType = other.CodeType;
      }
      if (other.VarianceEncodedInTarget != false) {
        VarianceEncodedInTarget = other.VarianceEncodedInTarget;
      }
      if (other.KeepTopK != 0) {
        KeepTopK = other.KeepTopK;
      }
      if (other.ConfidenceThreshold != 0F) {
        ConfidenceThreshold = other.ConfidenceThreshold;
      }
      if (other.Visualize != false) {
        Visualize = other.Visualize;
      }
      if (other.VisualizeThreshold != 0F) {
        VisualizeThreshold = other.VisualizeThreshold;
      }
      if (other.SaveFile.Length != 0) {
        SaveFile = other.SaveFile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumClasses = input.ReadUInt32();
            break;
          }
          case 16: {
            ShareLocation = input.ReadBool();
            break;
          }
          case 24: {
            BackgroundLabelId = input.ReadInt32();
            break;
          }
          case 34: {
            if (nmsParam_ == null) {
              nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
            }
            input.ReadMessage(nmsParam_);
            break;
          }
          case 42: {
            if (saveOutputParam_ == null) {
              saveOutputParam_ = new global::Apollo.Perception.Inference.SaveOutputParameter();
            }
            input.ReadMessage(saveOutputParam_);
            break;
          }
          case 48: {
            codeType_ = (global::Apollo.Perception.Inference.PriorBoxParameter.Types.CodeType) input.ReadEnum();
            break;
          }
          case 56: {
            KeepTopK = input.ReadInt32();
            break;
          }
          case 64: {
            VarianceEncodedInTarget = input.ReadBool();
            break;
          }
          case 77: {
            ConfidenceThreshold = input.ReadFloat();
            break;
          }
          case 80: {
            Visualize = input.ReadBool();
            break;
          }
          case 93: {
            VisualizeThreshold = input.ReadFloat();
            break;
          }
          case 98: {
            SaveFile = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that store parameters used by DetectionOutputLayer
  /// </summary>
  public sealed partial class RegionOutputParameter : pb::IMessage<RegionOutputParameter> {
    private static readonly pb::MessageParser<RegionOutputParameter> _parser = new pb::MessageParser<RegionOutputParameter>(() => new RegionOutputParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionOutputParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionOutputParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionOutputParameter(RegionOutputParameter other) : this() {
      numClasses_ = other.numClasses_;
      NmsParam = other.nmsParam_ != null ? other.NmsParam.Clone() : null;
      keepTopK_ = other.keepTopK_;
      confidenceThreshold_ = other.confidenceThreshold_;
      anchorbox_ = other.anchorbox_.Clone();
      nmsType_ = other.nmsType_;
      nmsSigma_ = other.nmsSigma_;
      isRpn_ = other.isRpn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionOutputParameter Clone() {
      return new RegionOutputParameter(this);
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 1;
    private uint numClasses_;
    /// <summary>
    /// Number of classes to be predicted. Required!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "nms_param" field.</summary>
    public const int NmsParamFieldNumber = 2;
    private global::Apollo.Perception.Inference.NonMaximumSuppressionParameter nmsParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NonMaximumSuppressionParameter NmsParam {
      get { return nmsParam_; }
      set {
        nmsParam_ = value;
      }
    }

    /// <summary>Field number for the "keep_top_k" field.</summary>
    public const int KeepTopKFieldNumber = 3;
    private int keepTopK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepTopK {
      get { return keepTopK_; }
      set {
        keepTopK_ = value;
      }
    }

    /// <summary>Field number for the "confidence_threshold" field.</summary>
    public const int ConfidenceThresholdFieldNumber = 4;
    private float confidenceThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConfidenceThreshold {
      get { return confidenceThreshold_; }
      set {
        confidenceThreshold_ = value;
      }
    }

    /// <summary>Field number for the "anchorbox" field.</summary>
    public const int AnchorboxFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.AnchorBox> _repeated_anchorbox_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Perception.Inference.AnchorBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox> anchorbox_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox> Anchorbox {
      get { return anchorbox_; }
    }

    /// <summary>Field number for the "nms_type" field.</summary>
    public const int NmsTypeFieldNumber = 6;
    private int nmsType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NmsType {
      get { return nmsType_; }
      set {
        nmsType_ = value;
      }
    }

    /// <summary>Field number for the "nms_sigma" field.</summary>
    public const int NmsSigmaFieldNumber = 7;
    private float nmsSigma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NmsSigma {
      get { return nmsSigma_; }
      set {
        nmsSigma_ = value;
      }
    }

    /// <summary>Field number for the "is_rpn" field.</summary>
    public const int IsRpnFieldNumber = 8;
    private bool isRpn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRpn {
      get { return isRpn_; }
      set {
        isRpn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionOutputParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionOutputParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumClasses != other.NumClasses) return false;
      if (!object.Equals(NmsParam, other.NmsParam)) return false;
      if (KeepTopK != other.KeepTopK) return false;
      if (ConfidenceThreshold != other.ConfidenceThreshold) return false;
      if(!anchorbox_.Equals(other.anchorbox_)) return false;
      if (NmsType != other.NmsType) return false;
      if (NmsSigma != other.NmsSigma) return false;
      if (IsRpn != other.IsRpn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      if (nmsParam_ != null) hash ^= NmsParam.GetHashCode();
      if (KeepTopK != 0) hash ^= KeepTopK.GetHashCode();
      if (ConfidenceThreshold != 0F) hash ^= ConfidenceThreshold.GetHashCode();
      hash ^= anchorbox_.GetHashCode();
      if (NmsType != 0) hash ^= NmsType.GetHashCode();
      if (NmsSigma != 0F) hash ^= NmsSigma.GetHashCode();
      if (IsRpn != false) hash ^= IsRpn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumClasses != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumClasses);
      }
      if (nmsParam_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NmsParam);
      }
      if (KeepTopK != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(KeepTopK);
      }
      if (ConfidenceThreshold != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ConfidenceThreshold);
      }
      anchorbox_.WriteTo(output, _repeated_anchorbox_codec);
      if (NmsType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NmsType);
      }
      if (NmsSigma != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(NmsSigma);
      }
      if (IsRpn != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRpn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumClasses);
      }
      if (nmsParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NmsParam);
      }
      if (KeepTopK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepTopK);
      }
      if (ConfidenceThreshold != 0F) {
        size += 1 + 4;
      }
      size += anchorbox_.CalculateSize(_repeated_anchorbox_codec);
      if (NmsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NmsType);
      }
      if (NmsSigma != 0F) {
        size += 1 + 4;
      }
      if (IsRpn != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionOutputParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      if (other.nmsParam_ != null) {
        if (nmsParam_ == null) {
          nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
        }
        NmsParam.MergeFrom(other.NmsParam);
      }
      if (other.KeepTopK != 0) {
        KeepTopK = other.KeepTopK;
      }
      if (other.ConfidenceThreshold != 0F) {
        ConfidenceThreshold = other.ConfidenceThreshold;
      }
      anchorbox_.Add(other.anchorbox_);
      if (other.NmsType != 0) {
        NmsType = other.NmsType;
      }
      if (other.NmsSigma != 0F) {
        NmsSigma = other.NmsSigma;
      }
      if (other.IsRpn != false) {
        IsRpn = other.IsRpn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumClasses = input.ReadUInt32();
            break;
          }
          case 18: {
            if (nmsParam_ == null) {
              nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
            }
            input.ReadMessage(nmsParam_);
            break;
          }
          case 24: {
            KeepTopK = input.ReadInt32();
            break;
          }
          case 37: {
            ConfidenceThreshold = input.ReadFloat();
            break;
          }
          case 42: {
            anchorbox_.AddEntriesFrom(input, _repeated_anchorbox_codec);
            break;
          }
          case 48: {
            NmsType = input.ReadInt32();
            break;
          }
          case 61: {
            NmsSigma = input.ReadFloat();
            break;
          }
          case 64: {
            IsRpn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DropoutParameter : pb::IMessage<DropoutParameter> {
    private static readonly pb::MessageParser<DropoutParameter> _parser = new pb::MessageParser<DropoutParameter>(() => new DropoutParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropoutParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropoutParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropoutParameter(DropoutParameter other) : this() {
      dropoutRatio_ = other.dropoutRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropoutParameter Clone() {
      return new DropoutParameter(this);
    }

    /// <summary>Field number for the "dropout_ratio" field.</summary>
    public const int DropoutRatioFieldNumber = 1;
    private float dropoutRatio_;
    /// <summary>
    /// dropout ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DropoutRatio {
      get { return dropoutRatio_; }
      set {
        dropoutRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropoutParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropoutParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DropoutRatio != other.DropoutRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DropoutRatio != 0F) hash ^= DropoutRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DropoutRatio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DropoutRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DropoutRatio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropoutParameter other) {
      if (other == null) {
        return;
      }
      if (other.DropoutRatio != 0F) {
        DropoutRatio = other.DropoutRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            DropoutRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DummyDataLayer fills any number of arbitrarily shaped blobs with random
  /// (or constant) data generated by "Fillers" (see "message FillerParameter").
  /// </summary>
  public sealed partial class DummyDataParameter : pb::IMessage<DummyDataParameter> {
    private static readonly pb::MessageParser<DummyDataParameter> _parser = new pb::MessageParser<DummyDataParameter>(() => new DummyDataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DummyDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyDataParameter(DummyDataParameter other) : this() {
      dataFiller_ = other.dataFiller_.Clone();
      shape_ = other.shape_.Clone();
      num_ = other.num_.Clone();
      channels_ = other.channels_.Clone();
      height_ = other.height_.Clone();
      width_ = other.width_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyDataParameter Clone() {
      return new DummyDataParameter(this);
    }

    /// <summary>Field number for the "data_filler" field.</summary>
    public const int DataFillerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.FillerParameter> _repeated_dataFiller_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Inference.FillerParameter.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.FillerParameter> dataFiller_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.FillerParameter>();
    /// <summary>
    /// This layer produces N >= 1 top blobs.  DummyDataParameter must specify 1 or N
    /// shape fields, and 0, 1 or N data_fillers.
    ///
    /// If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
    /// If 1 data_filler is specified, it is applied to all top blobs.  If N are
    /// specified, the ith is applied to the ith top blob.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.FillerParameter> DataFiller {
      get { return dataFiller_; }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobShape> _repeated_shape_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Perception.Inference.BlobShape.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape> shape_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_num_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> num_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 4D dimensions -- deprecated.  Use "shape" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Num {
      get { return num_; }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_channels_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> channels_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_height_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> height_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Height {
      get { return height_; }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_width_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> width_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Width {
      get { return width_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DummyDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DummyDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataFiller_.Equals(other.dataFiller_)) return false;
      if(!shape_.Equals(other.shape_)) return false;
      if(!num_.Equals(other.num_)) return false;
      if(!channels_.Equals(other.channels_)) return false;
      if(!height_.Equals(other.height_)) return false;
      if(!width_.Equals(other.width_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataFiller_.GetHashCode();
      hash ^= shape_.GetHashCode();
      hash ^= num_.GetHashCode();
      hash ^= channels_.GetHashCode();
      hash ^= height_.GetHashCode();
      hash ^= width_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataFiller_.WriteTo(output, _repeated_dataFiller_codec);
      num_.WriteTo(output, _repeated_num_codec);
      channels_.WriteTo(output, _repeated_channels_codec);
      height_.WriteTo(output, _repeated_height_codec);
      width_.WriteTo(output, _repeated_width_codec);
      shape_.WriteTo(output, _repeated_shape_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataFiller_.CalculateSize(_repeated_dataFiller_codec);
      size += shape_.CalculateSize(_repeated_shape_codec);
      size += num_.CalculateSize(_repeated_num_codec);
      size += channels_.CalculateSize(_repeated_channels_codec);
      size += height_.CalculateSize(_repeated_height_codec);
      size += width_.CalculateSize(_repeated_width_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DummyDataParameter other) {
      if (other == null) {
        return;
      }
      dataFiller_.Add(other.dataFiller_);
      shape_.Add(other.shape_);
      num_.Add(other.num_);
      channels_.Add(other.channels_);
      height_.Add(other.height_);
      width_.Add(other.width_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dataFiller_.AddEntriesFrom(input, _repeated_dataFiller_codec);
            break;
          }
          case 18:
          case 16: {
            num_.AddEntriesFrom(input, _repeated_num_codec);
            break;
          }
          case 26:
          case 24: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 34:
          case 32: {
            height_.AddEntriesFrom(input, _repeated_height_codec);
            break;
          }
          case 42:
          case 40: {
            width_.AddEntriesFrom(input, _repeated_width_codec);
            break;
          }
          case 50: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EltwiseParameter : pb::IMessage<EltwiseParameter> {
    private static readonly pb::MessageParser<EltwiseParameter> _parser = new pb::MessageParser<EltwiseParameter>(() => new EltwiseParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EltwiseParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EltwiseParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EltwiseParameter(EltwiseParameter other) : this() {
      operation_ = other.operation_;
      coeff_ = other.coeff_.Clone();
      stableProdGrad_ = other.stableProdGrad_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EltwiseParameter Clone() {
      return new EltwiseParameter(this);
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 1;
    private global::Apollo.Perception.Inference.EltwiseParameter.Types.EltwiseOp operation_ = 0;
    /// <summary>
    /// element-wise operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.EltwiseParameter.Types.EltwiseOp Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "coeff" field.</summary>
    public const int CoeffFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_coeff_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> coeff_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// blob-wise coefficient for SUM operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coeff {
      get { return coeff_; }
    }

    /// <summary>Field number for the "stable_prod_grad" field.</summary>
    public const int StableProdGradFieldNumber = 3;
    private bool stableProdGrad_;
    /// <summary>
    /// Whether to use an asymptotically slower (for >2 inputs) but stabler method
    /// of computing the gradient for the PROD operation. (No effect for SUM op.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StableProdGrad {
      get { return stableProdGrad_; }
      set {
        stableProdGrad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EltwiseParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EltwiseParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operation != other.Operation) return false;
      if(!coeff_.Equals(other.coeff_)) return false;
      if (StableProdGrad != other.StableProdGrad) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operation != 0) hash ^= Operation.GetHashCode();
      hash ^= coeff_.GetHashCode();
      if (StableProdGrad != false) hash ^= StableProdGrad.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operation != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operation);
      }
      coeff_.WriteTo(output, _repeated_coeff_codec);
      if (StableProdGrad != false) {
        output.WriteRawTag(24);
        output.WriteBool(StableProdGrad);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
      }
      size += coeff_.CalculateSize(_repeated_coeff_codec);
      if (StableProdGrad != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EltwiseParameter other) {
      if (other == null) {
        return;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      coeff_.Add(other.coeff_);
      if (other.StableProdGrad != false) {
        StableProdGrad = other.StableProdGrad;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operation_ = (global::Apollo.Perception.Inference.EltwiseParameter.Types.EltwiseOp) input.ReadEnum();
            break;
          }
          case 18:
          case 21: {
            coeff_.AddEntriesFrom(input, _repeated_coeff_codec);
            break;
          }
          case 24: {
            StableProdGrad = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EltwiseParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EltwiseOp {
        [pbr::OriginalName("PROD")] Prod = 0,
        [pbr::OriginalName("SUM")] Sum = 1,
        [pbr::OriginalName("MAX")] Max = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that stores parameters used by ELULayer
  /// </summary>
  public sealed partial class ELUParameter : pb::IMessage<ELUParameter> {
    private static readonly pb::MessageParser<ELUParameter> _parser = new pb::MessageParser<ELUParameter>(() => new ELUParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ELUParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELUParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELUParameter(ELUParameter other) : this() {
      alpha_ = other.alpha_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELUParameter Clone() {
      return new ELUParameter(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    /// <summary>
    /// Described in:
    /// Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
    /// Deep Network Learning by Exponential Linear Units (ELUs). arXiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ELUParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ELUParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Alpha != other.Alpha) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= Alpha.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ELUParameter other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by EmbedLayer
  /// </summary>
  public sealed partial class EmbedParameter : pb::IMessage<EmbedParameter> {
    private static readonly pb::MessageParser<EmbedParameter> _parser = new pb::MessageParser<EmbedParameter>(() => new EmbedParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmbedParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbedParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbedParameter(EmbedParameter other) : this() {
      numOutput_ = other.numOutput_;
      inputDim_ = other.inputDim_;
      biasTerm_ = other.biasTerm_;
      WeightFiller = other.weightFiller_ != null ? other.WeightFiller.Clone() : null;
      BiasFiller = other.biasFiller_ != null ? other.BiasFiller.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbedParameter Clone() {
      return new EmbedParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The number of outputs for the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "input_dim" field.</summary>
    public const int InputDimFieldNumber = 2;
    private uint inputDim_;
    /// <summary>
    /// The input is given as integers to be interpreted as one-hot
    /// vector indices with dimension num_input.  Hence num_input should be
    /// 1 greater than the maximum possible input value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InputDim {
      get { return inputDim_; }
      set {
        inputDim_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 3;
    private bool biasTerm_;
    /// <summary>
    /// Whether to use a bias term
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 4;
    private global::Apollo.Perception.Inference.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 5;
    private global::Apollo.Perception.Inference.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmbedParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmbedParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (InputDim != other.InputDim) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (InputDim != 0) hash ^= InputDim.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (InputDim != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InputDim);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(24);
        output.WriteBool(BiasTerm);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BiasFiller);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (InputDim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputDim);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmbedParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.InputDim != 0) {
        InputDim = other.InputDim;
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 16: {
            InputDim = input.ReadUInt32();
            break;
          }
          case 24: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 34: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 42: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by ExpLayer
  /// </summary>
  public sealed partial class ExpParameter : pb::IMessage<ExpParameter> {
    private static readonly pb::MessageParser<ExpParameter> _parser = new pb::MessageParser<ExpParameter>(() => new ExpParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpParameter(ExpParameter other) : this() {
      base_ = other.base_;
      scale_ = other.scale_;
      shift_ = other.shift_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpParameter Clone() {
      return new ExpParameter(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private float base_;
    /// <summary>
    /// ExpLayer computes outputs y = base ^ (shift + scale * x), for base > 0.
    /// Or if base is set to the default (-1), base is set to e,
    /// so y = exp(shift + scale * x).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shift" field.</summary>
    public const int ShiftFieldNumber = 3;
    private float shift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shift {
      get { return shift_; }
      set {
        shift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Base != other.Base) return false;
      if (Scale != other.Scale) return false;
      if (Shift != other.Shift) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Base != 0F) hash ^= Base.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Shift != 0F) hash ^= Shift.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Base != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Base);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Shift != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Shift);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Shift != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpParameter other) {
      if (other == null) {
        return;
      }
      if (other.Base != 0F) {
        Base = other.Base;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Shift != 0F) {
        Shift = other.Shift;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Base = input.ReadFloat();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Shift = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Message that stores parameters used by FlattenLayer
  /// </summary>
  public sealed partial class FlattenParameter : pb::IMessage<FlattenParameter> {
    private static readonly pb::MessageParser<FlattenParameter> _parser = new pb::MessageParser<FlattenParameter>(() => new FlattenParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlattenParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenParameter(FlattenParameter other) : this() {
      axis_ = other.axis_;
      endAxis_ = other.endAxis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenParameter Clone() {
      return new FlattenParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The first axis to flatten: all preceding axes are retained in the output.
    /// May be negative to index from the end (e.g., -1 for the last axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "end_axis" field.</summary>
    public const int EndAxisFieldNumber = 2;
    private int endAxis_;
    /// <summary>
    /// The last axis to flatten: all following axes are retained in the output.
    /// May be negative to index from the end (e.g., the default -1 for the last
    /// axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndAxis {
      get { return endAxis_; }
      set {
        endAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlattenParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlattenParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (EndAxis != other.EndAxis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (EndAxis != 0) hash ^= EndAxis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (EndAxis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndAxis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (EndAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndAxis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlattenParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.EndAxis != 0) {
        EndAxis = other.EndAxis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            EndAxis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by HDF5DataLayer
  /// </summary>
  public sealed partial class HDF5DataParameter : pb::IMessage<HDF5DataParameter> {
    private static readonly pb::MessageParser<HDF5DataParameter> _parser = new pb::MessageParser<HDF5DataParameter>(() => new HDF5DataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HDF5DataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5DataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5DataParameter(HDF5DataParameter other) : this() {
      source_ = other.source_;
      batchSize_ = other.batchSize_;
      shuffle_ = other.shuffle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5DataParameter Clone() {
      return new HDF5DataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 2;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "shuffle" field.</summary>
    public const int ShuffleFieldNumber = 3;
    private bool shuffle_;
    /// <summary>
    /// Specify whether to shuffle the data.
    /// If shuffle == true, the ordering of the HDF5 files is shuffled,
    /// and the ordering of data within any given HDF5 file is shuffled,
    /// but data between different files are not interleaved; all of a file's
    /// data are output (in a random order) before moving onto another file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shuffle {
      get { return shuffle_; }
      set {
        shuffle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HDF5DataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HDF5DataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (BatchSize != other.BatchSize) return false;
      if (Shuffle != other.Shuffle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (Shuffle != false) hash ^= Shuffle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BatchSize);
      }
      if (Shuffle != false) {
        output.WriteRawTag(24);
        output.WriteBool(Shuffle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (Shuffle != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HDF5DataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.Shuffle != false) {
        Shuffle = other.Shuffle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 16: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 24: {
            Shuffle = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HDF5OutputParameter : pb::IMessage<HDF5OutputParameter> {
    private static readonly pb::MessageParser<HDF5OutputParameter> _parser = new pb::MessageParser<HDF5OutputParameter>(() => new HDF5OutputParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HDF5OutputParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5OutputParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5OutputParameter(HDF5OutputParameter other) : this() {
      fileName_ = other.fileName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5OutputParameter Clone() {
      return new HDF5OutputParameter(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HDF5OutputParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HDF5OutputParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HDF5OutputParameter other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HingeLossParameter : pb::IMessage<HingeLossParameter> {
    private static readonly pb::MessageParser<HingeLossParameter> _parser = new pb::MessageParser<HingeLossParameter>(() => new HingeLossParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HingeLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeLossParameter(HingeLossParameter other) : this() {
      norm_ = other.norm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeLossParameter Clone() {
      return new HingeLossParameter(this);
    }

    /// <summary>Field number for the "norm" field.</summary>
    public const int NormFieldNumber = 1;
    private global::Apollo.Perception.Inference.HingeLossParameter.Types.Norm norm_ = 0;
    /// <summary>
    /// Specify the Norm to use L1 or L2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HingeLossParameter.Types.Norm Norm {
      get { return norm_; }
      set {
        norm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HingeLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HingeLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Norm != other.Norm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Norm != 0) hash ^= Norm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Norm != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Norm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Norm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Norm);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HingeLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.Norm != 0) {
        Norm = other.Norm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            norm_ = (global::Apollo.Perception.Inference.HingeLossParameter.Types.Norm) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HingeLossParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Norm {
        [pbr::OriginalName("NORM_DUMMY")] Dummy = 0,
        [pbr::OriginalName("L1")] L1 = 1,
        [pbr::OriginalName("L2")] L2 = 2,
      }

    }
    #endregion

  }

  public sealed partial class RepeatedList : pb::IMessage<RepeatedList> {
    private static readonly pb::MessageParser<RepeatedList> _parser = new pb::MessageParser<RepeatedList>(() => new RepeatedList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepeatedList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedList(RepeatedList other) : this() {
      listPath_ = other.listPath_;
      numRepeat_ = other.numRepeat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedList Clone() {
      return new RepeatedList(this);
    }

    /// <summary>Field number for the "list_path" field.</summary>
    public const int ListPathFieldNumber = 1;
    private string listPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListPath {
      get { return listPath_; }
      set {
        listPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_repeat" field.</summary>
    public const int NumRepeatFieldNumber = 2;
    private uint numRepeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumRepeat {
      get { return numRepeat_; }
      set {
        numRepeat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepeatedList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepeatedList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListPath != other.ListPath) return false;
      if (NumRepeat != other.NumRepeat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListPath.Length != 0) hash ^= ListPath.GetHashCode();
      if (NumRepeat != 0) hash ^= NumRepeat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ListPath);
      }
      if (NumRepeat != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumRepeat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListPath);
      }
      if (NumRepeat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumRepeat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepeatedList other) {
      if (other == null) {
        return;
      }
      if (other.ListPath.Length != 0) {
        ListPath = other.ListPath;
      }
      if (other.NumRepeat != 0) {
        NumRepeat = other.NumRepeat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ListPath = input.ReadString();
            break;
          }
          case 16: {
            NumRepeat = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatasetParameter : pb::IMessage<DatasetParameter> {
    private static readonly pb::MessageParser<DatasetParameter> _parser = new pb::MessageParser<DatasetParameter>(() => new DatasetParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetParameter(DatasetParameter other) : this() {
      source_ = other.source_;
      rootFolder_ = other.rootFolder_;
      weight_ = other.weight_;
      type_ = other.type_;
      shuffle_ = other.shuffle_;
      repeatedList_ = other.repeatedList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetParameter Clone() {
      return new DatasetParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "root_folder" field.</summary>
    public const int RootFolderFieldNumber = 2;
    private string rootFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootFolder {
      get { return rootFolder_; }
      set {
        rootFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private float weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Apollo.Perception.Inference.DatasetParameter.Types.DatasetType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DatasetParameter.Types.DatasetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "shuffle" field.</summary>
    public const int ShuffleFieldNumber = 5;
    private bool shuffle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shuffle {
      get { return shuffle_; }
      set {
        shuffle_ = value;
      }
    }

    /// <summary>Field number for the "repeated_list" field.</summary>
    public const int RepeatedListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.RepeatedList> _repeated_repeatedList_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Perception.Inference.RepeatedList.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.RepeatedList> repeatedList_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.RepeatedList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.RepeatedList> RepeatedList {
      get { return repeatedList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (RootFolder != other.RootFolder) return false;
      if (Weight != other.Weight) return false;
      if (Type != other.Type) return false;
      if (Shuffle != other.Shuffle) return false;
      if(!repeatedList_.Equals(other.repeatedList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (RootFolder.Length != 0) hash ^= RootFolder.GetHashCode();
      if (Weight != 0F) hash ^= Weight.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Shuffle != false) hash ^= Shuffle.GetHashCode();
      hash ^= repeatedList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (RootFolder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RootFolder);
      }
      if (Weight != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Weight);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Shuffle != false) {
        output.WriteRawTag(40);
        output.WriteBool(Shuffle);
      }
      repeatedList_.WriteTo(output, _repeated_repeatedList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (RootFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootFolder);
      }
      if (Weight != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Shuffle != false) {
        size += 1 + 1;
      }
      size += repeatedList_.CalculateSize(_repeated_repeatedList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.RootFolder.Length != 0) {
        RootFolder = other.RootFolder;
      }
      if (other.Weight != 0F) {
        Weight = other.Weight;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Shuffle != false) {
        Shuffle = other.Shuffle;
      }
      repeatedList_.Add(other.repeatedList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 18: {
            RootFolder = input.ReadString();
            break;
          }
          case 29: {
            Weight = input.ReadFloat();
            break;
          }
          case 32: {
            type_ = (global::Apollo.Perception.Inference.DatasetParameter.Types.DatasetType) input.ReadEnum();
            break;
          }
          case 40: {
            Shuffle = input.ReadBool();
            break;
          }
          case 50: {
            repeatedList_.AddEntriesFrom(input, _repeated_repeatedList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatasetParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// type of dataset
      /// </summary>
      public enum DatasetType {
        [pbr::OriginalName("DATASETTYPE_DUMMY")] Dummy = 0,
        /// <summary>
        /// list of paired image and label paths
        /// </summary>
        [pbr::OriginalName("LIST")] List = 1,
        /// <summary>
        /// list of paired image and label block paths
        /// </summary>
        [pbr::OriginalName("BLOCK")] Block = 2,
      }

    }
    #endregion

  }

  public sealed partial class ImageDataParameter : pb::IMessage<ImageDataParameter> {
    private static readonly pb::MessageParser<ImageDataParameter> _parser = new pb::MessageParser<ImageDataParameter>(() => new ImageDataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageDataParameter(ImageDataParameter other) : this() {
      source_ = other.source_;
      batchSize_ = other.batchSize_;
      randSkip_ = other.randSkip_;
      shuffle_ = other.shuffle_;
      newHeight_ = other.newHeight_;
      newWidth_ = other.newWidth_;
      isColor_ = other.isColor_;
      scale_ = other.scale_;
      meanFile_ = other.meanFile_;
      cropSize_ = other.cropSize_;
      mirror_ = other.mirror_;
      rootFolder_ = other.rootFolder_;
      prefetch_ = other.prefetch_;
      imageSet_ = other.imageSet_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageDataParameter Clone() {
      return new ImageDataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 4;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "rand_skip" field.</summary>
    public const int RandSkipFieldNumber = 7;
    private uint randSkip_;
    /// <summary>
    /// The rand_skip variable is for the data layer to skip a few data points
    /// to avoid all asynchronous sgd clients to start at the same point. The skip
    /// point would be set as rand_skip * rand(0,1). Note that rand_skip should not
    /// be larger than the number of keys in the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandSkip {
      get { return randSkip_; }
      set {
        randSkip_ = value;
      }
    }

    /// <summary>Field number for the "shuffle" field.</summary>
    public const int ShuffleFieldNumber = 8;
    private bool shuffle_;
    /// <summary>
    /// Whether or not ImageLayer should shuffle the list of files at every epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shuffle {
      get { return shuffle_; }
      set {
        shuffle_ = value;
      }
    }

    /// <summary>Field number for the "new_height" field.</summary>
    public const int NewHeightFieldNumber = 9;
    private uint newHeight_;
    /// <summary>
    /// It will also resize images if new_height or new_width are not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewHeight {
      get { return newHeight_; }
      set {
        newHeight_ = value;
      }
    }

    /// <summary>Field number for the "new_width" field.</summary>
    public const int NewWidthFieldNumber = 10;
    private uint newWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewWidth {
      get { return newWidth_; }
      set {
        newWidth_ = value;
      }
    }

    /// <summary>Field number for the "is_color" field.</summary>
    public const int IsColorFieldNumber = 11;
    private bool isColor_;
    /// <summary>
    /// Specify if the images are color or gray
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColor {
      get { return isColor_; }
      set {
        isColor_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. For data pre-processing, we can do
    /// simple scaling and subtracting the data mean, if provided. Note that the
    /// mean subtraction is always carried out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 3;
    private string meanFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 5;
    private uint cropSize_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we would like to randomly
    /// crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 6;
    private bool mirror_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
    /// data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "root_folder" field.</summary>
    public const int RootFolderFieldNumber = 12;
    private string rootFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootFolder {
      get { return rootFolder_; }
      set {
        rootFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefetch" field.</summary>
    public const int PrefetchFieldNumber = 20;
    private uint prefetch_;
    /// <summary>
    /// Prefetch queue (Number of batches to prefetch to host memory, increase if
    /// data access bandwidth varies).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prefetch {
      get { return prefetch_; }
      set {
        prefetch_ = value;
      }
    }

    /// <summary>Field number for the "image_set" field.</summary>
    public const int ImageSetFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.DatasetParameter> _repeated_imageSet_codec
        = pb::FieldCodec.ForMessage(802, global::Apollo.Perception.Inference.DatasetParameter.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.DatasetParameter> imageSet_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.DatasetParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.DatasetParameter> ImageSet {
      get { return imageSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (BatchSize != other.BatchSize) return false;
      if (RandSkip != other.RandSkip) return false;
      if (Shuffle != other.Shuffle) return false;
      if (NewHeight != other.NewHeight) return false;
      if (NewWidth != other.NewWidth) return false;
      if (IsColor != other.IsColor) return false;
      if (Scale != other.Scale) return false;
      if (MeanFile != other.MeanFile) return false;
      if (CropSize != other.CropSize) return false;
      if (Mirror != other.Mirror) return false;
      if (RootFolder != other.RootFolder) return false;
      if (Prefetch != other.Prefetch) return false;
      if(!imageSet_.Equals(other.imageSet_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (RandSkip != 0) hash ^= RandSkip.GetHashCode();
      if (Shuffle != false) hash ^= Shuffle.GetHashCode();
      if (NewHeight != 0) hash ^= NewHeight.GetHashCode();
      if (NewWidth != 0) hash ^= NewWidth.GetHashCode();
      if (IsColor != false) hash ^= IsColor.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (RootFolder.Length != 0) hash ^= RootFolder.GetHashCode();
      if (Prefetch != 0) hash ^= Prefetch.GetHashCode();
      hash ^= imageSet_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeanFile);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BatchSize);
      }
      if (CropSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CropSize);
      }
      if (Mirror != false) {
        output.WriteRawTag(48);
        output.WriteBool(Mirror);
      }
      if (RandSkip != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RandSkip);
      }
      if (Shuffle != false) {
        output.WriteRawTag(64);
        output.WriteBool(Shuffle);
      }
      if (NewHeight != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NewHeight);
      }
      if (NewWidth != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NewWidth);
      }
      if (IsColor != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsColor);
      }
      if (RootFolder.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RootFolder);
      }
      if (Prefetch != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Prefetch);
      }
      imageSet_.WriteTo(output, _repeated_imageSet_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (RandSkip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandSkip);
      }
      if (Shuffle != false) {
        size += 1 + 1;
      }
      if (NewHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewHeight);
      }
      if (NewWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewWidth);
      }
      if (IsColor != false) {
        size += 1 + 1;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (RootFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootFolder);
      }
      if (Prefetch != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Prefetch);
      }
      size += imageSet_.CalculateSize(_repeated_imageSet_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageDataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.RandSkip != 0) {
        RandSkip = other.RandSkip;
      }
      if (other.Shuffle != false) {
        Shuffle = other.Shuffle;
      }
      if (other.NewHeight != 0) {
        NewHeight = other.NewHeight;
      }
      if (other.NewWidth != 0) {
        NewWidth = other.NewWidth;
      }
      if (other.IsColor != false) {
        IsColor = other.IsColor;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.RootFolder.Length != 0) {
        RootFolder = other.RootFolder;
      }
      if (other.Prefetch != 0) {
        Prefetch = other.Prefetch;
      }
      imageSet_.Add(other.imageSet_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            MeanFile = input.ReadString();
            break;
          }
          case 32: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 40: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 48: {
            Mirror = input.ReadBool();
            break;
          }
          case 56: {
            RandSkip = input.ReadUInt32();
            break;
          }
          case 64: {
            Shuffle = input.ReadBool();
            break;
          }
          case 72: {
            NewHeight = input.ReadUInt32();
            break;
          }
          case 80: {
            NewWidth = input.ReadUInt32();
            break;
          }
          case 88: {
            IsColor = input.ReadBool();
            break;
          }
          case 98: {
            RootFolder = input.ReadString();
            break;
          }
          case 160: {
            Prefetch = input.ReadUInt32();
            break;
          }
          case 802: {
            imageSet_.AddEntriesFrom(input, _repeated_imageSet_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InfogainLossParameter : pb::IMessage<InfogainLossParameter> {
    private static readonly pb::MessageParser<InfogainLossParameter> _parser = new pb::MessageParser<InfogainLossParameter>(() => new InfogainLossParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfogainLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfogainLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfogainLossParameter(InfogainLossParameter other) : this() {
      source_ = other.source_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfogainLossParameter Clone() {
      return new InfogainLossParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the infogain matrix source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfogainLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfogainLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfogainLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InnerProductParameter : pb::IMessage<InnerProductParameter> {
    private static readonly pb::MessageParser<InnerProductParameter> _parser = new pb::MessageParser<InnerProductParameter>(() => new InnerProductParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InnerProductParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductParameter(InnerProductParameter other) : this() {
      numOutput_ = other.numOutput_;
      biasTerm_ = other.biasTerm_;
      WeightFiller = other.weightFiller_ != null ? other.WeightFiller.Clone() : null;
      BiasFiller = other.biasFiller_ != null ? other.BiasFiller.Clone() : null;
      axis_ = other.axis_;
      transpose_ = other.transpose_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductParameter Clone() {
      return new InnerProductParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The number of outputs for the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 2;
    private bool biasTerm_;
    /// <summary>
    /// whether to have bias terms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 3;
    private global::Apollo.Perception.Inference.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 4;
    private global::Apollo.Perception.Inference.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 5;
    private int axis_;
    /// <summary>
    /// The first axis to be lumped into a single inner product computation;
    /// all preceding axes are retained in the output.
    /// May be negative to index from the end (e.g., -1 for the last axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "transpose" field.</summary>
    public const int TransposeFieldNumber = 6;
    private bool transpose_;
    /// <summary>
    /// Specify whether to transpose the weight matrix or not.
    /// If transpose == true, any operations will be performed on the transpose
    /// of the weight matrix. The weight matrix itself is not going to be transposed
    /// but rather the transfer flag of operations will be toggled accordingly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Transpose {
      get { return transpose_; }
      set {
        transpose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InnerProductParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InnerProductParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (Axis != other.Axis) return false;
      if (Transpose != other.Transpose) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (Transpose != false) hash ^= Transpose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(16);
        output.WriteBool(BiasTerm);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BiasFiller);
      }
      if (Axis != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Axis);
      }
      if (Transpose != false) {
        output.WriteRawTag(48);
        output.WriteBool(Transpose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (Transpose != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InnerProductParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.Transpose != false) {
        Transpose = other.Transpose;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 16: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 26: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 34: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 40: {
            Axis = input.ReadInt32();
            break;
          }
          case 48: {
            Transpose = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputParameter : pb::IMessage<InputParameter> {
    private static readonly pb::MessageParser<InputParameter> _parser = new pb::MessageParser<InputParameter>(() => new InputParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputParameter(InputParameter other) : this() {
      shape_ = other.shape_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputParameter Clone() {
      return new InputParameter(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobShape> _repeated_shape_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Inference.BlobShape.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape> shape_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape>();
    /// <summary>
    /// This layer produces N >= 1 top blob(s) to be assigned manually.
    /// Define N shapes to set a shape for each top.
    /// Define 1 shape to set the same shape for every top.
    /// Define no shape to defer to reshaping manually.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobShape> Shape {
      get { return shape_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shape_.Equals(other.shape_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shape_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shape_.WriteTo(output, _repeated_shape_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shape_.CalculateSize(_repeated_shape_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputParameter other) {
      if (other == null) {
        return;
      }
      shape_.Add(other.shape_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by LogLayer
  /// </summary>
  public sealed partial class LogParameter : pb::IMessage<LogParameter> {
    private static readonly pb::MessageParser<LogParameter> _parser = new pb::MessageParser<LogParameter>(() => new LogParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParameter(LogParameter other) : this() {
      base_ = other.base_;
      scale_ = other.scale_;
      shift_ = other.shift_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParameter Clone() {
      return new LogParameter(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private float base_;
    /// <summary>
    /// LogLayer computes outputs y = log_base(shift + scale * x), for base > 0.
    /// Or if base is set to the default (-1), base is set to e,
    /// so y = ln(shift + scale * x) = log_e(shift + scale * x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shift" field.</summary>
    public const int ShiftFieldNumber = 3;
    private float shift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shift {
      get { return shift_; }
      set {
        shift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Base != other.Base) return false;
      if (Scale != other.Scale) return false;
      if (Shift != other.Shift) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Base != 0F) hash ^= Base.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Shift != 0F) hash ^= Shift.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Base != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Base);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Shift != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Shift);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Shift != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogParameter other) {
      if (other == null) {
        return;
      }
      if (other.Base != 0F) {
        Base = other.Base;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Shift != 0F) {
        Shift = other.Shift;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Base = input.ReadFloat();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Shift = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by LRNLayer
  /// </summary>
  public sealed partial class LRNParameter : pb::IMessage<LRNParameter> {
    private static readonly pb::MessageParser<LRNParameter> _parser = new pb::MessageParser<LRNParameter>(() => new LRNParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LRNParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNParameter(LRNParameter other) : this() {
      localSize_ = other.localSize_;
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      normRegion_ = other.normRegion_;
      k_ = other.k_;
      engine_ = other.engine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNParameter Clone() {
      return new LRNParameter(this);
    }

    /// <summary>Field number for the "local_size" field.</summary>
    public const int LocalSizeFieldNumber = 1;
    private uint localSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalSize {
      get { return localSize_; }
      set {
        localSize_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 2;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 3;
    private float beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "norm_region" field.</summary>
    public const int NormRegionFieldNumber = 4;
    private global::Apollo.Perception.Inference.LRNParameter.Types.NormRegion normRegion_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LRNParameter.Types.NormRegion NormRegion {
      get { return normRegion_; }
      set {
        normRegion_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 5;
    private float k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 6;
    private global::Apollo.Perception.Inference.LRNParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LRNParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LRNParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LRNParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalSize != other.LocalSize) return false;
      if (Alpha != other.Alpha) return false;
      if (Beta != other.Beta) return false;
      if (NormRegion != other.NormRegion) return false;
      if (K != other.K) return false;
      if (Engine != other.Engine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalSize != 0) hash ^= LocalSize.GetHashCode();
      if (Alpha != 0F) hash ^= Alpha.GetHashCode();
      if (Beta != 0F) hash ^= Beta.GetHashCode();
      if (NormRegion != 0) hash ^= NormRegion.GetHashCode();
      if (K != 0F) hash ^= K.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LocalSize);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Beta);
      }
      if (NormRegion != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) NormRegion);
      }
      if (K != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(K);
      }
      if (Engine != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Engine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalSize);
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (NormRegion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NormRegion);
      }
      if (K != 0F) {
        size += 1 + 4;
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LRNParameter other) {
      if (other == null) {
        return;
      }
      if (other.LocalSize != 0) {
        LocalSize = other.LocalSize;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.NormRegion != 0) {
        NormRegion = other.NormRegion;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LocalSize = input.ReadUInt32();
            break;
          }
          case 21: {
            Alpha = input.ReadFloat();
            break;
          }
          case 29: {
            Beta = input.ReadFloat();
            break;
          }
          case 32: {
            normRegion_ = (global::Apollo.Perception.Inference.LRNParameter.Types.NormRegion) input.ReadEnum();
            break;
          }
          case 45: {
            K = input.ReadFloat();
            break;
          }
          case 48: {
            engine_ = (global::Apollo.Perception.Inference.LRNParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LRNParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NormRegion {
        [pbr::OriginalName("ACROSS_CHANNELS")] AcrossChannels = 0,
        [pbr::OriginalName("WITHIN_CHANNEL")] WithinChannel = 1,
      }

      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class MemoryDataParameter : pb::IMessage<MemoryDataParameter> {
    private static readonly pb::MessageParser<MemoryDataParameter> _parser = new pb::MessageParser<MemoryDataParameter>(() => new MemoryDataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemoryDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDataParameter(MemoryDataParameter other) : this() {
      batchSize_ = other.batchSize_;
      channels_ = other.channels_;
      height_ = other.height_;
      width_ = other.width_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDataParameter Clone() {
      return new MemoryDataParameter(this);
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 1;
    private uint batchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 2;
    private uint channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemoryDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemoryDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchSize != other.BatchSize) return false;
      if (Channels != other.Channels) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatchSize);
      }
      if (Channels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Channels);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Width);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channels);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemoryDataParameter other) {
      if (other == null) {
        return;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 16: {
            Channels = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 32: {
            Width = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that store parameters used by MultiBoxLossLayer
  /// </summary>
  public sealed partial class MultiBoxLossParameter : pb::IMessage<MultiBoxLossParameter> {
    private static readonly pb::MessageParser<MultiBoxLossParameter> _parser = new pb::MessageParser<MultiBoxLossParameter>(() => new MultiBoxLossParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiBoxLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiBoxLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiBoxLossParameter(MultiBoxLossParameter other) : this() {
      locLossType_ = other.locLossType_;
      confLossType_ = other.confLossType_;
      locWeight_ = other.locWeight_;
      numClasses_ = other.numClasses_;
      shareLocation_ = other.shareLocation_;
      matchType_ = other.matchType_;
      overlapThreshold_ = other.overlapThreshold_;
      usePriorForMatching_ = other.usePriorForMatching_;
      backgroundLabelId_ = other.backgroundLabelId_;
      useDifficultGt_ = other.useDifficultGt_;
      doNegMining_ = other.doNegMining_;
      negPosRatio_ = other.negPosRatio_;
      negOverlap_ = other.negOverlap_;
      codeType_ = other.codeType_;
      encodeVarianceInTarget_ = other.encodeVarianceInTarget_;
      mapObjectToAgnostic_ = other.mapObjectToAgnostic_;
      ignoreCrossBoundaryBbox_ = other.ignoreCrossBoundaryBbox_;
      bpInside_ = other.bpInside_;
      miningType_ = other.miningType_;
      NmsParam = other.nmsParam_ != null ? other.NmsParam.Clone() : null;
      sampleSize_ = other.sampleSize_;
      usePriorForNms_ = other.usePriorForNms_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiBoxLossParameter Clone() {
      return new MultiBoxLossParameter(this);
    }

    /// <summary>Field number for the "loc_loss_type" field.</summary>
    public const int LocLossTypeFieldNumber = 1;
    private global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.LocLossType locLossType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.LocLossType LocLossType {
      get { return locLossType_; }
      set {
        locLossType_ = value;
      }
    }

    /// <summary>Field number for the "conf_loss_type" field.</summary>
    public const int ConfLossTypeFieldNumber = 2;
    private global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.ConfLossType confLossType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.ConfLossType ConfLossType {
      get { return confLossType_; }
      set {
        confLossType_ = value;
      }
    }

    /// <summary>Field number for the "loc_weight" field.</summary>
    public const int LocWeightFieldNumber = 3;
    private float locWeight_;
    /// <summary>
    /// Weight for localization loss.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocWeight {
      get { return locWeight_; }
      set {
        locWeight_ = value;
      }
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 4;
    private uint numClasses_;
    /// <summary>
    /// Number of classes to be predicted. Required!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "share_location" field.</summary>
    public const int ShareLocationFieldNumber = 5;
    private bool shareLocation_;
    /// <summary>
    /// If true, bounding box are shared among different classes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShareLocation {
      get { return shareLocation_; }
      set {
        shareLocation_ = value;
      }
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 6;
    private global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MatchType matchType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "overlap_threshold" field.</summary>
    public const int OverlapThresholdFieldNumber = 7;
    private float overlapThreshold_;
    /// <summary>
    /// If match_type is PER_PREDICTION, use overlap_threshold to
    /// determine the extra matching bboxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OverlapThreshold {
      get { return overlapThreshold_; }
      set {
        overlapThreshold_ = value;
      }
    }

    /// <summary>Field number for the "use_prior_for_matching" field.</summary>
    public const int UsePriorForMatchingFieldNumber = 8;
    private bool usePriorForMatching_;
    /// <summary>
    /// Use prior for matching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePriorForMatching {
      get { return usePriorForMatching_; }
      set {
        usePriorForMatching_ = value;
      }
    }

    /// <summary>Field number for the "background_label_id" field.</summary>
    public const int BackgroundLabelIdFieldNumber = 9;
    private uint backgroundLabelId_;
    /// <summary>
    /// Background label id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BackgroundLabelId {
      get { return backgroundLabelId_; }
      set {
        backgroundLabelId_ = value;
      }
    }

    /// <summary>Field number for the "use_difficult_gt" field.</summary>
    public const int UseDifficultGtFieldNumber = 10;
    private bool useDifficultGt_;
    /// <summary>
    /// If true, also consider difficult ground truth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseDifficultGt {
      get { return useDifficultGt_; }
      set {
        useDifficultGt_ = value;
      }
    }

    /// <summary>Field number for the "do_neg_mining" field.</summary>
    public const int DoNegMiningFieldNumber = 11;
    private bool doNegMining_;
    /// <summary>
    /// If true, perform negative mining.
    /// DEPRECATED: use mining_type instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoNegMining {
      get { return doNegMining_; }
      set {
        doNegMining_ = value;
      }
    }

    /// <summary>Field number for the "neg_pos_ratio" field.</summary>
    public const int NegPosRatioFieldNumber = 12;
    private float negPosRatio_;
    /// <summary>
    /// The negative/positive ratio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegPosRatio {
      get { return negPosRatio_; }
      set {
        negPosRatio_ = value;
      }
    }

    /// <summary>Field number for the "neg_overlap" field.</summary>
    public const int NegOverlapFieldNumber = 13;
    private float negOverlap_;
    /// <summary>
    /// The negative overlap upperbound for the unmatched predictions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegOverlap {
      get { return negOverlap_; }
      set {
        negOverlap_ = value;
      }
    }

    /// <summary>Field number for the "code_type" field.</summary>
    public const int CodeTypeFieldNumber = 14;
    private global::Apollo.Perception.Inference.PriorBoxParameter.Types.CodeType codeType_ = 0;
    /// <summary>
    /// Type of coding method for bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PriorBoxParameter.Types.CodeType CodeType {
      get { return codeType_; }
      set {
        codeType_ = value;
      }
    }

    /// <summary>Field number for the "encode_variance_in_target" field.</summary>
    public const int EncodeVarianceInTargetFieldNumber = 16;
    private bool encodeVarianceInTarget_;
    /// <summary>
    /// If true, encode the variance of prior box in the loc loss target instead of
    /// in bbox.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EncodeVarianceInTarget {
      get { return encodeVarianceInTarget_; }
      set {
        encodeVarianceInTarget_ = value;
      }
    }

    /// <summary>Field number for the "map_object_to_agnostic" field.</summary>
    public const int MapObjectToAgnosticFieldNumber = 17;
    private bool mapObjectToAgnostic_;
    /// <summary>
    /// If true, map all object classes to agnostic class. It is useful for learning
    /// objectness detector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MapObjectToAgnostic {
      get { return mapObjectToAgnostic_; }
      set {
        mapObjectToAgnostic_ = value;
      }
    }

    /// <summary>Field number for the "ignore_cross_boundary_bbox" field.</summary>
    public const int IgnoreCrossBoundaryBboxFieldNumber = 18;
    private bool ignoreCrossBoundaryBbox_;
    /// <summary>
    /// If true, ignore cross boundary bbox during matching.
    /// Cross boundary bbox is a bbox who is outside of the image region.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreCrossBoundaryBbox {
      get { return ignoreCrossBoundaryBbox_; }
      set {
        ignoreCrossBoundaryBbox_ = value;
      }
    }

    /// <summary>Field number for the "bp_inside" field.</summary>
    public const int BpInsideFieldNumber = 19;
    private bool bpInside_;
    /// <summary>
    /// If true, only backpropagate on corners which are inside of the image
    /// region when encode_type is CORNER or CORNER_SIZE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BpInside {
      get { return bpInside_; }
      set {
        bpInside_ = value;
      }
    }

    /// <summary>Field number for the "mining_type" field.</summary>
    public const int MiningTypeFieldNumber = 20;
    private global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MiningType miningType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MiningType MiningType {
      get { return miningType_; }
      set {
        miningType_ = value;
      }
    }

    /// <summary>Field number for the "nms_param" field.</summary>
    public const int NmsParamFieldNumber = 21;
    private global::Apollo.Perception.Inference.NonMaximumSuppressionParameter nmsParam_;
    /// <summary>
    /// Parameters used for non maximum suppression durig hard example mining.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NonMaximumSuppressionParameter NmsParam {
      get { return nmsParam_; }
      set {
        nmsParam_ = value;
      }
    }

    /// <summary>Field number for the "sample_size" field.</summary>
    public const int SampleSizeFieldNumber = 22;
    private int sampleSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SampleSize {
      get { return sampleSize_; }
      set {
        sampleSize_ = value;
      }
    }

    /// <summary>Field number for the "use_prior_for_nms" field.</summary>
    public const int UsePriorForNmsFieldNumber = 23;
    private bool usePriorForNms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePriorForNms {
      get { return usePriorForNms_; }
      set {
        usePriorForNms_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiBoxLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiBoxLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocLossType != other.LocLossType) return false;
      if (ConfLossType != other.ConfLossType) return false;
      if (LocWeight != other.LocWeight) return false;
      if (NumClasses != other.NumClasses) return false;
      if (ShareLocation != other.ShareLocation) return false;
      if (MatchType != other.MatchType) return false;
      if (OverlapThreshold != other.OverlapThreshold) return false;
      if (UsePriorForMatching != other.UsePriorForMatching) return false;
      if (BackgroundLabelId != other.BackgroundLabelId) return false;
      if (UseDifficultGt != other.UseDifficultGt) return false;
      if (DoNegMining != other.DoNegMining) return false;
      if (NegPosRatio != other.NegPosRatio) return false;
      if (NegOverlap != other.NegOverlap) return false;
      if (CodeType != other.CodeType) return false;
      if (EncodeVarianceInTarget != other.EncodeVarianceInTarget) return false;
      if (MapObjectToAgnostic != other.MapObjectToAgnostic) return false;
      if (IgnoreCrossBoundaryBbox != other.IgnoreCrossBoundaryBbox) return false;
      if (BpInside != other.BpInside) return false;
      if (MiningType != other.MiningType) return false;
      if (!object.Equals(NmsParam, other.NmsParam)) return false;
      if (SampleSize != other.SampleSize) return false;
      if (UsePriorForNms != other.UsePriorForNms) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocLossType != 0) hash ^= LocLossType.GetHashCode();
      if (ConfLossType != 0) hash ^= ConfLossType.GetHashCode();
      if (LocWeight != 0F) hash ^= LocWeight.GetHashCode();
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      if (ShareLocation != false) hash ^= ShareLocation.GetHashCode();
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (OverlapThreshold != 0F) hash ^= OverlapThreshold.GetHashCode();
      if (UsePriorForMatching != false) hash ^= UsePriorForMatching.GetHashCode();
      if (BackgroundLabelId != 0) hash ^= BackgroundLabelId.GetHashCode();
      if (UseDifficultGt != false) hash ^= UseDifficultGt.GetHashCode();
      if (DoNegMining != false) hash ^= DoNegMining.GetHashCode();
      if (NegPosRatio != 0F) hash ^= NegPosRatio.GetHashCode();
      if (NegOverlap != 0F) hash ^= NegOverlap.GetHashCode();
      if (CodeType != 0) hash ^= CodeType.GetHashCode();
      if (EncodeVarianceInTarget != false) hash ^= EncodeVarianceInTarget.GetHashCode();
      if (MapObjectToAgnostic != false) hash ^= MapObjectToAgnostic.GetHashCode();
      if (IgnoreCrossBoundaryBbox != false) hash ^= IgnoreCrossBoundaryBbox.GetHashCode();
      if (BpInside != false) hash ^= BpInside.GetHashCode();
      if (MiningType != 0) hash ^= MiningType.GetHashCode();
      if (nmsParam_ != null) hash ^= NmsParam.GetHashCode();
      if (SampleSize != 0) hash ^= SampleSize.GetHashCode();
      if (UsePriorForNms != false) hash ^= UsePriorForNms.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocLossType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LocLossType);
      }
      if (ConfLossType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ConfLossType);
      }
      if (LocWeight != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LocWeight);
      }
      if (NumClasses != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumClasses);
      }
      if (ShareLocation != false) {
        output.WriteRawTag(40);
        output.WriteBool(ShareLocation);
      }
      if (MatchType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MatchType);
      }
      if (OverlapThreshold != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(OverlapThreshold);
      }
      if (UsePriorForMatching != false) {
        output.WriteRawTag(64);
        output.WriteBool(UsePriorForMatching);
      }
      if (BackgroundLabelId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(BackgroundLabelId);
      }
      if (UseDifficultGt != false) {
        output.WriteRawTag(80);
        output.WriteBool(UseDifficultGt);
      }
      if (DoNegMining != false) {
        output.WriteRawTag(88);
        output.WriteBool(DoNegMining);
      }
      if (NegPosRatio != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(NegPosRatio);
      }
      if (NegOverlap != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(NegOverlap);
      }
      if (CodeType != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) CodeType);
      }
      if (EncodeVarianceInTarget != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(EncodeVarianceInTarget);
      }
      if (MapObjectToAgnostic != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MapObjectToAgnostic);
      }
      if (IgnoreCrossBoundaryBbox != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IgnoreCrossBoundaryBbox);
      }
      if (BpInside != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(BpInside);
      }
      if (MiningType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) MiningType);
      }
      if (nmsParam_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(NmsParam);
      }
      if (SampleSize != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SampleSize);
      }
      if (UsePriorForNms != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(UsePriorForNms);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocLossType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LocLossType);
      }
      if (ConfLossType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConfLossType);
      }
      if (LocWeight != 0F) {
        size += 1 + 4;
      }
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumClasses);
      }
      if (ShareLocation != false) {
        size += 1 + 1;
      }
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (OverlapThreshold != 0F) {
        size += 1 + 4;
      }
      if (UsePriorForMatching != false) {
        size += 1 + 1;
      }
      if (BackgroundLabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BackgroundLabelId);
      }
      if (UseDifficultGt != false) {
        size += 1 + 1;
      }
      if (DoNegMining != false) {
        size += 1 + 1;
      }
      if (NegPosRatio != 0F) {
        size += 1 + 4;
      }
      if (NegOverlap != 0F) {
        size += 1 + 4;
      }
      if (CodeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CodeType);
      }
      if (EncodeVarianceInTarget != false) {
        size += 2 + 1;
      }
      if (MapObjectToAgnostic != false) {
        size += 2 + 1;
      }
      if (IgnoreCrossBoundaryBbox != false) {
        size += 2 + 1;
      }
      if (BpInside != false) {
        size += 2 + 1;
      }
      if (MiningType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MiningType);
      }
      if (nmsParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NmsParam);
      }
      if (SampleSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SampleSize);
      }
      if (UsePriorForNms != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiBoxLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.LocLossType != 0) {
        LocLossType = other.LocLossType;
      }
      if (other.ConfLossType != 0) {
        ConfLossType = other.ConfLossType;
      }
      if (other.LocWeight != 0F) {
        LocWeight = other.LocWeight;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      if (other.ShareLocation != false) {
        ShareLocation = other.ShareLocation;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.OverlapThreshold != 0F) {
        OverlapThreshold = other.OverlapThreshold;
      }
      if (other.UsePriorForMatching != false) {
        UsePriorForMatching = other.UsePriorForMatching;
      }
      if (other.BackgroundLabelId != 0) {
        BackgroundLabelId = other.BackgroundLabelId;
      }
      if (other.UseDifficultGt != false) {
        UseDifficultGt = other.UseDifficultGt;
      }
      if (other.DoNegMining != false) {
        DoNegMining = other.DoNegMining;
      }
      if (other.NegPosRatio != 0F) {
        NegPosRatio = other.NegPosRatio;
      }
      if (other.NegOverlap != 0F) {
        NegOverlap = other.NegOverlap;
      }
      if (other.CodeType != 0) {
        CodeType = other.CodeType;
      }
      if (other.EncodeVarianceInTarget != false) {
        EncodeVarianceInTarget = other.EncodeVarianceInTarget;
      }
      if (other.MapObjectToAgnostic != false) {
        MapObjectToAgnostic = other.MapObjectToAgnostic;
      }
      if (other.IgnoreCrossBoundaryBbox != false) {
        IgnoreCrossBoundaryBbox = other.IgnoreCrossBoundaryBbox;
      }
      if (other.BpInside != false) {
        BpInside = other.BpInside;
      }
      if (other.MiningType != 0) {
        MiningType = other.MiningType;
      }
      if (other.nmsParam_ != null) {
        if (nmsParam_ == null) {
          nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
        }
        NmsParam.MergeFrom(other.NmsParam);
      }
      if (other.SampleSize != 0) {
        SampleSize = other.SampleSize;
      }
      if (other.UsePriorForNms != false) {
        UsePriorForNms = other.UsePriorForNms;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            locLossType_ = (global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.LocLossType) input.ReadEnum();
            break;
          }
          case 16: {
            confLossType_ = (global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.ConfLossType) input.ReadEnum();
            break;
          }
          case 29: {
            LocWeight = input.ReadFloat();
            break;
          }
          case 32: {
            NumClasses = input.ReadUInt32();
            break;
          }
          case 40: {
            ShareLocation = input.ReadBool();
            break;
          }
          case 48: {
            matchType_ = (global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MatchType) input.ReadEnum();
            break;
          }
          case 61: {
            OverlapThreshold = input.ReadFloat();
            break;
          }
          case 64: {
            UsePriorForMatching = input.ReadBool();
            break;
          }
          case 72: {
            BackgroundLabelId = input.ReadUInt32();
            break;
          }
          case 80: {
            UseDifficultGt = input.ReadBool();
            break;
          }
          case 88: {
            DoNegMining = input.ReadBool();
            break;
          }
          case 101: {
            NegPosRatio = input.ReadFloat();
            break;
          }
          case 109: {
            NegOverlap = input.ReadFloat();
            break;
          }
          case 112: {
            codeType_ = (global::Apollo.Perception.Inference.PriorBoxParameter.Types.CodeType) input.ReadEnum();
            break;
          }
          case 128: {
            EncodeVarianceInTarget = input.ReadBool();
            break;
          }
          case 136: {
            MapObjectToAgnostic = input.ReadBool();
            break;
          }
          case 144: {
            IgnoreCrossBoundaryBbox = input.ReadBool();
            break;
          }
          case 152: {
            BpInside = input.ReadBool();
            break;
          }
          case 160: {
            miningType_ = (global::Apollo.Perception.Inference.MultiBoxLossParameter.Types.MiningType) input.ReadEnum();
            break;
          }
          case 170: {
            if (nmsParam_ == null) {
              nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
            }
            input.ReadMessage(nmsParam_);
            break;
          }
          case 176: {
            SampleSize = input.ReadInt32();
            break;
          }
          case 184: {
            UsePriorForNms = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MultiBoxLossParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Localization loss type.
      /// </summary>
      public enum LocLossType {
        [pbr::OriginalName("L2")] L2 = 0,
        [pbr::OriginalName("SMOOTH_L1")] SmoothL1 = 1,
      }

      /// <summary>
      /// Confidence loss type.
      /// </summary>
      public enum ConfLossType {
        [pbr::OriginalName("SOFTMAX")] Softmax = 0,
        [pbr::OriginalName("LOGISTIC")] Logistic = 1,
      }

      /// <summary>
      /// Matching method during training.
      /// </summary>
      public enum MatchType {
        [pbr::OriginalName("BIPARTITE")] Bipartite = 0,
        [pbr::OriginalName("PER_PREDICTION")] PerPrediction = 1,
      }

      /// <summary>
      /// Mining type during training.
      ///   NONE : use all negatives.
      ///   MAX_NEGATIVE : select negatives based on the score.
      ///   HARD_EXAMPLE : select hard examples based on "Training Region-based Object Detectors with Online Hard Example Mining", Shrivastava et.al.
      /// </summary>
      public enum MiningType {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("MAX_NEGATIVE")] MaxNegative = 1,
        [pbr::OriginalName("HARD_EXAMPLE")] HardExample = 2,
      }

    }
    #endregion

  }

  public sealed partial class MVNParameter : pb::IMessage<MVNParameter> {
    private static readonly pb::MessageParser<MVNParameter> _parser = new pb::MessageParser<MVNParameter>(() => new MVNParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MVNParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MVNParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MVNParameter(MVNParameter other) : this() {
      normalizeVariance_ = other.normalizeVariance_;
      acrossChannels_ = other.acrossChannels_;
      eps_ = other.eps_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MVNParameter Clone() {
      return new MVNParameter(this);
    }

    /// <summary>Field number for the "normalize_variance" field.</summary>
    public const int NormalizeVarianceFieldNumber = 1;
    private bool normalizeVariance_;
    /// <summary>
    /// This parameter can be set to false to normalize mean only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NormalizeVariance {
      get { return normalizeVariance_; }
      set {
        normalizeVariance_ = value;
      }
    }

    /// <summary>Field number for the "across_channels" field.</summary>
    public const int AcrossChannelsFieldNumber = 2;
    private bool acrossChannels_;
    /// <summary>
    /// This parameter can be set to true to perform DNN-like MVN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AcrossChannels {
      get { return acrossChannels_; }
      set {
        acrossChannels_ = value;
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 3;
    private float eps_;
    /// <summary>
    /// Epsilon for not dividing by zero while normalizing variance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Eps {
      get { return eps_; }
      set {
        eps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MVNParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MVNParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NormalizeVariance != other.NormalizeVariance) return false;
      if (AcrossChannels != other.AcrossChannels) return false;
      if (Eps != other.Eps) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NormalizeVariance != false) hash ^= NormalizeVariance.GetHashCode();
      if (AcrossChannels != false) hash ^= AcrossChannels.GetHashCode();
      if (Eps != 0F) hash ^= Eps.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NormalizeVariance != false) {
        output.WriteRawTag(8);
        output.WriteBool(NormalizeVariance);
      }
      if (AcrossChannels != false) {
        output.WriteRawTag(16);
        output.WriteBool(AcrossChannels);
      }
      if (Eps != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Eps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NormalizeVariance != false) {
        size += 1 + 1;
      }
      if (AcrossChannels != false) {
        size += 1 + 1;
      }
      if (Eps != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MVNParameter other) {
      if (other == null) {
        return;
      }
      if (other.NormalizeVariance != false) {
        NormalizeVariance = other.NormalizeVariance;
      }
      if (other.AcrossChannels != false) {
        AcrossChannels = other.AcrossChannels;
      }
      if (other.Eps != 0F) {
        Eps = other.Eps;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NormalizeVariance = input.ReadBool();
            break;
          }
          case 16: {
            AcrossChannels = input.ReadBool();
            break;
          }
          case 29: {
            Eps = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by NormalizeLayer
  /// </summary>
  public sealed partial class NormalizeParameter : pb::IMessage<NormalizeParameter> {
    private static readonly pb::MessageParser<NormalizeParameter> _parser = new pb::MessageParser<NormalizeParameter>(() => new NormalizeParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NormalizeParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizeParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizeParameter(NormalizeParameter other) : this() {
      acrossSpatial_ = other.acrossSpatial_;
      ScaleFiller = other.scaleFiller_ != null ? other.ScaleFiller.Clone() : null;
      channelShared_ = other.channelShared_;
      eps_ = other.eps_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizeParameter Clone() {
      return new NormalizeParameter(this);
    }

    /// <summary>Field number for the "across_spatial" field.</summary>
    public const int AcrossSpatialFieldNumber = 1;
    private bool acrossSpatial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AcrossSpatial {
      get { return acrossSpatial_; }
      set {
        acrossSpatial_ = value;
      }
    }

    /// <summary>Field number for the "scale_filler" field.</summary>
    public const int ScaleFillerFieldNumber = 2;
    private global::Apollo.Perception.Inference.FillerParameter scaleFiller_;
    /// <summary>
    /// Initial value of scale. Default is 1.0 for all
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter ScaleFiller {
      get { return scaleFiller_; }
      set {
        scaleFiller_ = value;
      }
    }

    /// <summary>Field number for the "channel_shared" field.</summary>
    public const int ChannelSharedFieldNumber = 3;
    private bool channelShared_;
    /// <summary>
    /// Whether or not scale parameters are shared across channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChannelShared {
      get { return channelShared_; }
      set {
        channelShared_ = value;
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 4;
    private float eps_;
    /// <summary>
    /// Epsilon for not dividing by zero while normalizing variance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Eps {
      get { return eps_; }
      set {
        eps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NormalizeParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NormalizeParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AcrossSpatial != other.AcrossSpatial) return false;
      if (!object.Equals(ScaleFiller, other.ScaleFiller)) return false;
      if (ChannelShared != other.ChannelShared) return false;
      if (Eps != other.Eps) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AcrossSpatial != false) hash ^= AcrossSpatial.GetHashCode();
      if (scaleFiller_ != null) hash ^= ScaleFiller.GetHashCode();
      if (ChannelShared != false) hash ^= ChannelShared.GetHashCode();
      if (Eps != 0F) hash ^= Eps.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AcrossSpatial != false) {
        output.WriteRawTag(8);
        output.WriteBool(AcrossSpatial);
      }
      if (scaleFiller_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ScaleFiller);
      }
      if (ChannelShared != false) {
        output.WriteRawTag(24);
        output.WriteBool(ChannelShared);
      }
      if (Eps != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Eps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AcrossSpatial != false) {
        size += 1 + 1;
      }
      if (scaleFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScaleFiller);
      }
      if (ChannelShared != false) {
        size += 1 + 1;
      }
      if (Eps != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NormalizeParameter other) {
      if (other == null) {
        return;
      }
      if (other.AcrossSpatial != false) {
        AcrossSpatial = other.AcrossSpatial;
      }
      if (other.scaleFiller_ != null) {
        if (scaleFiller_ == null) {
          scaleFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        ScaleFiller.MergeFrom(other.ScaleFiller);
      }
      if (other.ChannelShared != false) {
        ChannelShared = other.ChannelShared;
      }
      if (other.Eps != 0F) {
        Eps = other.Eps;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AcrossSpatial = input.ReadBool();
            break;
          }
          case 18: {
            if (scaleFiller_ == null) {
              scaleFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(scaleFiller_);
            break;
          }
          case 24: {
            ChannelShared = input.ReadBool();
            break;
          }
          case 37: {
            Eps = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParameterParameter : pb::IMessage<ParameterParameter> {
    private static readonly pb::MessageParser<ParameterParameter> _parser = new pb::MessageParser<ParameterParameter>(() => new ParameterParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterParameter(ParameterParameter other) : this() {
      Shape = other.shape_ != null ? other.Shape.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterParameter Clone() {
      return new ParameterParameter(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::Apollo.Perception.Inference.BlobShape shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.BlobShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shape_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shape);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterParameter other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          shape_ = new global::Apollo.Perception.Inference.BlobShape();
        }
        Shape.MergeFrom(other.Shape);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (shape_ == null) {
              shape_ = new global::Apollo.Perception.Inference.BlobShape();
            }
            input.ReadMessage(shape_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PermuteParameter : pb::IMessage<PermuteParameter> {
    private static readonly pb::MessageParser<PermuteParameter> _parser = new pb::MessageParser<PermuteParameter>(() => new PermuteParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PermuteParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PermuteParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PermuteParameter(PermuteParameter other) : this() {
      order_ = other.order_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PermuteParameter Clone() {
      return new PermuteParameter(this);
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_order_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> order_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// The new orders of the axes of data. Notice it should be with
    /// in the same range as the input data, and it starts from 0.
    /// Do not provide repeated order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Order {
      get { return order_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PermuteParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PermuteParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!order_.Equals(other.order_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= order_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      order_.WriteTo(output, _repeated_order_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += order_.CalculateSize(_repeated_order_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PermuteParameter other) {
      if (other == null) {
        return;
      }
      order_.Add(other.order_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolingParameter : pb::IMessage<PoolingParameter> {
    private static readonly pb::MessageParser<PoolingParameter> _parser = new pb::MessageParser<PoolingParameter>(() => new PoolingParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolingParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingParameter(PoolingParameter other) : this() {
      pool_ = other.pool_;
      pad_ = other.pad_;
      padH_ = other.padH_;
      padW_ = other.padW_;
      kernelSize_ = other.kernelSize_;
      kernelH_ = other.kernelH_;
      kernelW_ = other.kernelW_;
      stride_ = other.stride_;
      strideH_ = other.strideH_;
      strideW_ = other.strideW_;
      engine_ = other.engine_;
      globalPooling_ = other.globalPooling_;
      cmpOutShapeFloorAsConv_ = other.cmpOutShapeFloorAsConv_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingParameter Clone() {
      return new PoolingParameter(this);
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 1;
    private global::Apollo.Perception.Inference.PoolingParameter.Types.PoolMethod pool_ = 0;
    /// <summary>
    /// The pooling method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PoolingParameter.Types.PoolMethod Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 4;
    private uint pad_;
    /// <summary>
    /// Pad, kernel size, and stride are all given as a single value for equal
    /// dimensions in height and width or as Y, X pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pad {
      get { return pad_; }
      set {
        pad_ = value;
      }
    }

    /// <summary>Field number for the "pad_h" field.</summary>
    public const int PadHFieldNumber = 9;
    private uint padH_;
    /// <summary>
    /// The padding height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadH {
      get { return padH_; }
      set {
        padH_ = value;
      }
    }

    /// <summary>Field number for the "pad_w" field.</summary>
    public const int PadWFieldNumber = 10;
    private uint padW_;
    /// <summary>
    /// The padding width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadW {
      get { return padW_; }
      set {
        padW_ = value;
      }
    }

    /// <summary>Field number for the "kernel_size" field.</summary>
    public const int KernelSizeFieldNumber = 2;
    private uint kernelSize_;
    /// <summary>
    /// The kernel size (square)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelSize {
      get { return kernelSize_; }
      set {
        kernelSize_ = value;
      }
    }

    /// <summary>Field number for the "kernel_h" field.</summary>
    public const int KernelHFieldNumber = 5;
    private uint kernelH_;
    /// <summary>
    /// The kernel height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelH {
      get { return kernelH_; }
      set {
        kernelH_ = value;
      }
    }

    /// <summary>Field number for the "kernel_w" field.</summary>
    public const int KernelWFieldNumber = 6;
    private uint kernelW_;
    /// <summary>
    /// The kernel width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelW {
      get { return kernelW_; }
      set {
        kernelW_ = value;
      }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 3;
    private uint stride_;
    /// <summary>
    /// The stride (equal in Y, X)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stride {
      get { return stride_; }
      set {
        stride_ = value;
      }
    }

    /// <summary>Field number for the "stride_h" field.</summary>
    public const int StrideHFieldNumber = 7;
    private uint strideH_;
    /// <summary>
    /// The stride height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideH {
      get { return strideH_; }
      set {
        strideH_ = value;
      }
    }

    /// <summary>Field number for the "stride_w" field.</summary>
    public const int StrideWFieldNumber = 8;
    private uint strideW_;
    /// <summary>
    /// The stride width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideW {
      get { return strideW_; }
      set {
        strideW_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 11;
    private global::Apollo.Perception.Inference.PoolingParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PoolingParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    /// <summary>Field number for the "global_pooling" field.</summary>
    public const int GlobalPoolingFieldNumber = 12;
    private bool globalPooling_;
    /// <summary>
    /// If global_pooling then it will pool over the size of the bottom by doing
    /// kernel_h = bottom->height and kernel_w = bottom->width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GlobalPooling {
      get { return globalPooling_; }
      set {
        globalPooling_ = value;
      }
    }

    /// <summary>Field number for the "cmp_out_shape_floor_as_conv" field.</summary>
    public const int CmpOutShapeFloorAsConvFieldNumber = 13;
    private bool cmpOutShapeFloorAsConv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CmpOutShapeFloorAsConv {
      get { return cmpOutShapeFloorAsConv_; }
      set {
        cmpOutShapeFloorAsConv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolingParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolingParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pool != other.Pool) return false;
      if (Pad != other.Pad) return false;
      if (PadH != other.PadH) return false;
      if (PadW != other.PadW) return false;
      if (KernelSize != other.KernelSize) return false;
      if (KernelH != other.KernelH) return false;
      if (KernelW != other.KernelW) return false;
      if (Stride != other.Stride) return false;
      if (StrideH != other.StrideH) return false;
      if (StrideW != other.StrideW) return false;
      if (Engine != other.Engine) return false;
      if (GlobalPooling != other.GlobalPooling) return false;
      if (CmpOutShapeFloorAsConv != other.CmpOutShapeFloorAsConv) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pool != 0) hash ^= Pool.GetHashCode();
      if (Pad != 0) hash ^= Pad.GetHashCode();
      if (PadH != 0) hash ^= PadH.GetHashCode();
      if (PadW != 0) hash ^= PadW.GetHashCode();
      if (KernelSize != 0) hash ^= KernelSize.GetHashCode();
      if (KernelH != 0) hash ^= KernelH.GetHashCode();
      if (KernelW != 0) hash ^= KernelW.GetHashCode();
      if (Stride != 0) hash ^= Stride.GetHashCode();
      if (StrideH != 0) hash ^= StrideH.GetHashCode();
      if (StrideW != 0) hash ^= StrideW.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (GlobalPooling != false) hash ^= GlobalPooling.GetHashCode();
      if (CmpOutShapeFloorAsConv != false) hash ^= CmpOutShapeFloorAsConv.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pool != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pool);
      }
      if (KernelSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(KernelSize);
      }
      if (Stride != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Stride);
      }
      if (Pad != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pad);
      }
      if (KernelH != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(KernelH);
      }
      if (KernelW != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(KernelW);
      }
      if (StrideH != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(StrideH);
      }
      if (StrideW != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(StrideW);
      }
      if (PadH != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PadH);
      }
      if (PadW != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(PadW);
      }
      if (Engine != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Engine);
      }
      if (GlobalPooling != false) {
        output.WriteRawTag(96);
        output.WriteBool(GlobalPooling);
      }
      if (CmpOutShapeFloorAsConv != false) {
        output.WriteRawTag(104);
        output.WriteBool(CmpOutShapeFloorAsConv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pool != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pool);
      }
      if (Pad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pad);
      }
      if (PadH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadH);
      }
      if (PadW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadW);
      }
      if (KernelSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelSize);
      }
      if (KernelH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelH);
      }
      if (KernelW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelW);
      }
      if (Stride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stride);
      }
      if (StrideH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideH);
      }
      if (StrideW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideW);
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (GlobalPooling != false) {
        size += 1 + 1;
      }
      if (CmpOutShapeFloorAsConv != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolingParameter other) {
      if (other == null) {
        return;
      }
      if (other.Pool != 0) {
        Pool = other.Pool;
      }
      if (other.Pad != 0) {
        Pad = other.Pad;
      }
      if (other.PadH != 0) {
        PadH = other.PadH;
      }
      if (other.PadW != 0) {
        PadW = other.PadW;
      }
      if (other.KernelSize != 0) {
        KernelSize = other.KernelSize;
      }
      if (other.KernelH != 0) {
        KernelH = other.KernelH;
      }
      if (other.KernelW != 0) {
        KernelW = other.KernelW;
      }
      if (other.Stride != 0) {
        Stride = other.Stride;
      }
      if (other.StrideH != 0) {
        StrideH = other.StrideH;
      }
      if (other.StrideW != 0) {
        StrideW = other.StrideW;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      if (other.GlobalPooling != false) {
        GlobalPooling = other.GlobalPooling;
      }
      if (other.CmpOutShapeFloorAsConv != false) {
        CmpOutShapeFloorAsConv = other.CmpOutShapeFloorAsConv;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pool_ = (global::Apollo.Perception.Inference.PoolingParameter.Types.PoolMethod) input.ReadEnum();
            break;
          }
          case 16: {
            KernelSize = input.ReadUInt32();
            break;
          }
          case 24: {
            Stride = input.ReadUInt32();
            break;
          }
          case 32: {
            Pad = input.ReadUInt32();
            break;
          }
          case 40: {
            KernelH = input.ReadUInt32();
            break;
          }
          case 48: {
            KernelW = input.ReadUInt32();
            break;
          }
          case 56: {
            StrideH = input.ReadUInt32();
            break;
          }
          case 64: {
            StrideW = input.ReadUInt32();
            break;
          }
          case 72: {
            PadH = input.ReadUInt32();
            break;
          }
          case 80: {
            PadW = input.ReadUInt32();
            break;
          }
          case 88: {
            engine_ = (global::Apollo.Perception.Inference.PoolingParameter.Types.Engine) input.ReadEnum();
            break;
          }
          case 96: {
            GlobalPooling = input.ReadBool();
            break;
          }
          case 104: {
            CmpOutShapeFloorAsConv = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PoolingParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PoolMethod {
        [pbr::OriginalName("MAX")] Max = 0,
        [pbr::OriginalName("AVE")] Ave = 1,
        [pbr::OriginalName("STOCHASTIC")] Stochastic = 2,
      }

      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class PowerParameter : pb::IMessage<PowerParameter> {
    private static readonly pb::MessageParser<PowerParameter> _parser = new pb::MessageParser<PowerParameter>(() => new PowerParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerParameter(PowerParameter other) : this() {
      power_ = other.power_;
      scale_ = other.scale_;
      shift_ = other.shift_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerParameter Clone() {
      return new PowerParameter(this);
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private float power_;
    /// <summary>
    /// PowerLayer computes outputs y = (shift + scale * x) ^ power.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shift" field.</summary>
    public const int ShiftFieldNumber = 3;
    private float shift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shift {
      get { return shift_; }
      set {
        shift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Power != other.Power) return false;
      if (Scale != other.Scale) return false;
      if (Shift != other.Shift) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Power != 0F) hash ^= Power.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Shift != 0F) hash ^= Shift.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Power);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Shift != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Shift);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Shift != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Power != 0F) {
        Power = other.Power;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Shift != 0F) {
        Shift = other.Shift;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Power = input.ReadFloat();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Shift = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that store parameters used by PriorBoxLayer
  /// </summary>
  public sealed partial class PriorBoxParameter : pb::IMessage<PriorBoxParameter> {
    private static readonly pb::MessageParser<PriorBoxParameter> _parser = new pb::MessageParser<PriorBoxParameter>(() => new PriorBoxParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriorBoxParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriorBoxParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriorBoxParameter(PriorBoxParameter other) : this() {
      minSize_ = other.minSize_.Clone();
      maxSize_ = other.maxSize_.Clone();
      aspectRatio_ = other.aspectRatio_.Clone();
      flip_ = other.flip_;
      clip_ = other.clip_;
      variance_ = other.variance_.Clone();
      imgSize_ = other.imgSize_;
      imgH_ = other.imgH_;
      imgW_ = other.imgW_;
      step_ = other.step_;
      stepH_ = other.stepH_;
      stepW_ = other.stepW_;
      offset_ = other.offset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriorBoxParameter Clone() {
      return new PriorBoxParameter(this);
    }

    /// <summary>Field number for the "min_size" field.</summary>
    public const int MinSizeFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_minSize_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> minSize_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Minimum box size (in pixels). Required!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MinSize {
      get { return minSize_; }
    }

    /// <summary>Field number for the "max_size" field.</summary>
    public const int MaxSizeFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_maxSize_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> maxSize_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Maximum box size (in pixels). Required!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxSize {
      get { return maxSize_; }
    }

    /// <summary>Field number for the "aspect_ratio" field.</summary>
    public const int AspectRatioFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_aspectRatio_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> aspectRatio_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Various of aspect ratios. Duplicate ratios will be ignored.
    /// If none is provided, we use default ratio 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AspectRatio {
      get { return aspectRatio_; }
    }

    /// <summary>Field number for the "flip" field.</summary>
    public const int FlipFieldNumber = 4;
    private bool flip_;
    /// <summary>
    /// If true, will flip each aspect ratio.
    /// For example, if there is aspect ratio "r",
    /// we will generate aspect ratio "1.0/r" as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flip {
      get { return flip_; }
      set {
        flip_ = value;
      }
    }

    /// <summary>Field number for the "clip" field.</summary>
    public const int ClipFieldNumber = 5;
    private bool clip_;
    /// <summary>
    /// If true, will clip the prior so that it is within 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clip {
      get { return clip_; }
      set {
        clip_ = value;
      }
    }

    /// <summary>Field number for the "variance" field.</summary>
    public const int VarianceFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_variance_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> variance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Variance for adjusting the prior bboxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Variance {
      get { return variance_; }
    }

    /// <summary>Field number for the "img_size" field.</summary>
    public const int ImgSizeFieldNumber = 7;
    private uint imgSize_;
    /// <summary>
    /// By default, we calculate img_height, img_width, step_x, step_y based on
    /// bottom (feat) and bottom (img). Unless these values are explicitely
    /// provided.
    /// Explicitly provide the img_size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImgSize {
      get { return imgSize_; }
      set {
        imgSize_ = value;
      }
    }

    /// <summary>Field number for the "img_h" field.</summary>
    public const int ImgHFieldNumber = 8;
    private uint imgH_;
    /// <summary>
    /// Either img_size or img_h/img_w should be specified; not both.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImgH {
      get { return imgH_; }
      set {
        imgH_ = value;
      }
    }

    /// <summary>Field number for the "img_w" field.</summary>
    public const int ImgWFieldNumber = 9;
    private uint imgW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImgW {
      get { return imgW_; }
      set {
        imgW_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 10;
    private float step_;
    /// <summary>
    /// Explicitly provide the step size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "step_h" field.</summary>
    public const int StepHFieldNumber = 11;
    private float stepH_;
    /// <summary>
    /// Either step or step_h/step_w should be specified; not both.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StepH {
      get { return stepH_; }
      set {
        stepH_ = value;
      }
    }

    /// <summary>Field number for the "step_w" field.</summary>
    public const int StepWFieldNumber = 12;
    private float stepW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StepW {
      get { return stepW_; }
      set {
        stepW_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 13;
    private float offset_;
    /// <summary>
    /// Offset to the top left corner of each cell.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriorBoxParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriorBoxParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!minSize_.Equals(other.minSize_)) return false;
      if(!maxSize_.Equals(other.maxSize_)) return false;
      if(!aspectRatio_.Equals(other.aspectRatio_)) return false;
      if (Flip != other.Flip) return false;
      if (Clip != other.Clip) return false;
      if(!variance_.Equals(other.variance_)) return false;
      if (ImgSize != other.ImgSize) return false;
      if (ImgH != other.ImgH) return false;
      if (ImgW != other.ImgW) return false;
      if (Step != other.Step) return false;
      if (StepH != other.StepH) return false;
      if (StepW != other.StepW) return false;
      if (Offset != other.Offset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= minSize_.GetHashCode();
      hash ^= maxSize_.GetHashCode();
      hash ^= aspectRatio_.GetHashCode();
      if (Flip != false) hash ^= Flip.GetHashCode();
      if (Clip != false) hash ^= Clip.GetHashCode();
      hash ^= variance_.GetHashCode();
      if (ImgSize != 0) hash ^= ImgSize.GetHashCode();
      if (ImgH != 0) hash ^= ImgH.GetHashCode();
      if (ImgW != 0) hash ^= ImgW.GetHashCode();
      if (Step != 0F) hash ^= Step.GetHashCode();
      if (StepH != 0F) hash ^= StepH.GetHashCode();
      if (StepW != 0F) hash ^= StepW.GetHashCode();
      if (Offset != 0F) hash ^= Offset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      minSize_.WriteTo(output, _repeated_minSize_codec);
      maxSize_.WriteTo(output, _repeated_maxSize_codec);
      aspectRatio_.WriteTo(output, _repeated_aspectRatio_codec);
      if (Flip != false) {
        output.WriteRawTag(32);
        output.WriteBool(Flip);
      }
      if (Clip != false) {
        output.WriteRawTag(40);
        output.WriteBool(Clip);
      }
      variance_.WriteTo(output, _repeated_variance_codec);
      if (ImgSize != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ImgSize);
      }
      if (ImgH != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ImgH);
      }
      if (ImgW != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ImgW);
      }
      if (Step != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Step);
      }
      if (StepH != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(StepH);
      }
      if (StepW != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(StepW);
      }
      if (Offset != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += minSize_.CalculateSize(_repeated_minSize_codec);
      size += maxSize_.CalculateSize(_repeated_maxSize_codec);
      size += aspectRatio_.CalculateSize(_repeated_aspectRatio_codec);
      if (Flip != false) {
        size += 1 + 1;
      }
      if (Clip != false) {
        size += 1 + 1;
      }
      size += variance_.CalculateSize(_repeated_variance_codec);
      if (ImgSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImgSize);
      }
      if (ImgH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImgH);
      }
      if (ImgW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImgW);
      }
      if (Step != 0F) {
        size += 1 + 4;
      }
      if (StepH != 0F) {
        size += 1 + 4;
      }
      if (StepW != 0F) {
        size += 1 + 4;
      }
      if (Offset != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriorBoxParameter other) {
      if (other == null) {
        return;
      }
      minSize_.Add(other.minSize_);
      maxSize_.Add(other.maxSize_);
      aspectRatio_.Add(other.aspectRatio_);
      if (other.Flip != false) {
        Flip = other.Flip;
      }
      if (other.Clip != false) {
        Clip = other.Clip;
      }
      variance_.Add(other.variance_);
      if (other.ImgSize != 0) {
        ImgSize = other.ImgSize;
      }
      if (other.ImgH != 0) {
        ImgH = other.ImgH;
      }
      if (other.ImgW != 0) {
        ImgW = other.ImgW;
      }
      if (other.Step != 0F) {
        Step = other.Step;
      }
      if (other.StepH != 0F) {
        StepH = other.StepH;
      }
      if (other.StepW != 0F) {
        StepW = other.StepW;
      }
      if (other.Offset != 0F) {
        Offset = other.Offset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            minSize_.AddEntriesFrom(input, _repeated_minSize_codec);
            break;
          }
          case 18:
          case 21: {
            maxSize_.AddEntriesFrom(input, _repeated_maxSize_codec);
            break;
          }
          case 26:
          case 29: {
            aspectRatio_.AddEntriesFrom(input, _repeated_aspectRatio_codec);
            break;
          }
          case 32: {
            Flip = input.ReadBool();
            break;
          }
          case 40: {
            Clip = input.ReadBool();
            break;
          }
          case 50:
          case 53: {
            variance_.AddEntriesFrom(input, _repeated_variance_codec);
            break;
          }
          case 56: {
            ImgSize = input.ReadUInt32();
            break;
          }
          case 64: {
            ImgH = input.ReadUInt32();
            break;
          }
          case 72: {
            ImgW = input.ReadUInt32();
            break;
          }
          case 85: {
            Step = input.ReadFloat();
            break;
          }
          case 93: {
            StepH = input.ReadFloat();
            break;
          }
          case 101: {
            StepW = input.ReadFloat();
            break;
          }
          case 109: {
            Offset = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PriorBoxParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Encode/decode type.
      /// </summary>
      public enum CodeType {
        [pbr::OriginalName("CODETYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("CORNER")] Corner = 1,
        [pbr::OriginalName("CENTER_SIZE")] CenterSize = 2,
        [pbr::OriginalName("CORNER_SIZE")] CornerSize = 3,
      }

    }
    #endregion

  }

  public sealed partial class PythonParameter : pb::IMessage<PythonParameter> {
    private static readonly pb::MessageParser<PythonParameter> _parser = new pb::MessageParser<PythonParameter>(() => new PythonParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PythonParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PythonParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PythonParameter(PythonParameter other) : this() {
      module_ = other.module_;
      layer_ = other.layer_;
      paramStr_ = other.paramStr_;
      shareInParallel_ = other.shareInParallel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PythonParameter Clone() {
      return new PythonParameter(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private string module_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Module {
      get { return module_; }
      set {
        module_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 2;
    private string layer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Layer {
      get { return layer_; }
      set {
        layer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param_str" field.</summary>
    public const int ParamStrFieldNumber = 3;
    private string paramStr_ = "";
    /// <summary>
    /// This value is set to the attribute `param_str` of the `PythonLayer` object
    /// in Python before calling the `setup()` method. This could be a number,
    /// string, dictionary in Python dict format, JSON, etc. You may parse this
    /// string in `setup` method and use it in `forward` and `backward`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParamStr {
      get { return paramStr_; }
      set {
        paramStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "share_in_parallel" field.</summary>
    public const int ShareInParallelFieldNumber = 4;
    private bool shareInParallel_;
    /// <summary>
    /// Whether this PythonLayer is shared among worker solvers during data parallelism.
    /// If true, each worker solver sequentially run forward from this layer.
    /// This value should be set true if you are using it as a data layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShareInParallel {
      get { return shareInParallel_; }
      set {
        shareInParallel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PythonParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PythonParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Module != other.Module) return false;
      if (Layer != other.Layer) return false;
      if (ParamStr != other.ParamStr) return false;
      if (ShareInParallel != other.ShareInParallel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Module.Length != 0) hash ^= Module.GetHashCode();
      if (Layer.Length != 0) hash ^= Layer.GetHashCode();
      if (ParamStr.Length != 0) hash ^= ParamStr.GetHashCode();
      if (ShareInParallel != false) hash ^= ShareInParallel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Module.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Module);
      }
      if (Layer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Layer);
      }
      if (ParamStr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParamStr);
      }
      if (ShareInParallel != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShareInParallel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Module.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Module);
      }
      if (Layer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Layer);
      }
      if (ParamStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamStr);
      }
      if (ShareInParallel != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PythonParameter other) {
      if (other == null) {
        return;
      }
      if (other.Module.Length != 0) {
        Module = other.Module;
      }
      if (other.Layer.Length != 0) {
        Layer = other.Layer;
      }
      if (other.ParamStr.Length != 0) {
        ParamStr = other.ParamStr;
      }
      if (other.ShareInParallel != false) {
        ShareInParallel = other.ShareInParallel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Module = input.ReadString();
            break;
          }
          case 18: {
            Layer = input.ReadString();
            break;
          }
          case 26: {
            ParamStr = input.ReadString();
            break;
          }
          case 32: {
            ShareInParallel = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by RecurrentLayer
  /// </summary>
  public sealed partial class RecurrentParameter : pb::IMessage<RecurrentParameter> {
    private static readonly pb::MessageParser<RecurrentParameter> _parser = new pb::MessageParser<RecurrentParameter>(() => new RecurrentParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecurrentParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecurrentParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecurrentParameter(RecurrentParameter other) : this() {
      numOutput_ = other.numOutput_;
      WeightFiller = other.weightFiller_ != null ? other.WeightFiller.Clone() : null;
      BiasFiller = other.biasFiller_ != null ? other.BiasFiller.Clone() : null;
      debugInfo_ = other.debugInfo_;
      exposeHidden_ = other.exposeHidden_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecurrentParameter Clone() {
      return new RecurrentParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The dimension of the output (and usually hidden state) representation --
    /// must be explicitly set to non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 2;
    private global::Apollo.Perception.Inference.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 3;
    private global::Apollo.Perception.Inference.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "debug_info" field.</summary>
    public const int DebugInfoFieldNumber = 4;
    private bool debugInfo_;
    /// <summary>
    /// Whether to enable displaying debug_info in the unrolled recurrent net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = value;
      }
    }

    /// <summary>Field number for the "expose_hidden" field.</summary>
    public const int ExposeHiddenFieldNumber = 5;
    private bool exposeHidden_;
    /// <summary>
    /// Whether to add as additional inputs (bottoms) the initial hidden state
    /// blobs, and add as additional outputs (tops) the final timestep hidden state
    /// blobs.  The number of additional bottom/top blobs  depends on the
    /// recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExposeHidden {
      get { return exposeHidden_; }
      set {
        exposeHidden_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecurrentParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecurrentParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (DebugInfo != other.DebugInfo) return false;
      if (ExposeHidden != other.ExposeHidden) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (DebugInfo != false) hash ^= DebugInfo.GetHashCode();
      if (ExposeHidden != false) hash ^= ExposeHidden.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BiasFiller);
      }
      if (DebugInfo != false) {
        output.WriteRawTag(32);
        output.WriteBool(DebugInfo);
      }
      if (ExposeHidden != false) {
        output.WriteRawTag(40);
        output.WriteBool(ExposeHidden);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (DebugInfo != false) {
        size += 1 + 1;
      }
      if (ExposeHidden != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecurrentParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.DebugInfo != false) {
        DebugInfo = other.DebugInfo;
      }
      if (other.ExposeHidden != false) {
        ExposeHidden = other.ExposeHidden;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 18: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 26: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 32: {
            DebugInfo = input.ReadBool();
            break;
          }
          case 40: {
            ExposeHidden = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by ReductionLayer
  /// </summary>
  public sealed partial class ReductionParameter : pb::IMessage<ReductionParameter> {
    private static readonly pb::MessageParser<ReductionParameter> _parser = new pb::MessageParser<ReductionParameter>(() => new ReductionParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReductionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionParameter(ReductionParameter other) : this() {
      operation_ = other.operation_;
      axis_ = other.axis_;
      coeff_ = other.coeff_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionParameter Clone() {
      return new ReductionParameter(this);
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 1;
    private global::Apollo.Perception.Inference.ReductionParameter.Types.ReductionOp operation_ = 0;
    /// <summary>
    /// reduction operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ReductionParameter.Types.ReductionOp Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The first axis to reduce to a scalar -- may be negative to index from the
    /// end (e.g., -1 for the last axis).
    /// (Currently, only reduction along ALL "tail" axes is supported; reduction
    /// of axis M through N, where N &lt; num_axes - 1, is unsupported.)
    /// Suppose we have an n-axis bottom Blob with shape:
    ///     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
    /// If axis == m, the output Blob will have shape
    ///     (d0, d1, d2, ..., d(m-1)),
    /// and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
    /// times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
    /// If axis == 0 (the default), the output Blob always has the empty shape
    /// (count 1), performing reduction across the entire input --
    /// often useful for creating new loss functions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "coeff" field.</summary>
    public const int CoeffFieldNumber = 3;
    private float coeff_;
    /// <summary>
    /// coefficient for output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Coeff {
      get { return coeff_; }
      set {
        coeff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReductionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReductionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operation != other.Operation) return false;
      if (Axis != other.Axis) return false;
      if (Coeff != other.Coeff) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operation != 0) hash ^= Operation.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (Coeff != 0F) hash ^= Coeff.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operation != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operation);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (Coeff != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Coeff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (Coeff != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReductionParameter other) {
      if (other == null) {
        return;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.Coeff != 0F) {
        Coeff = other.Coeff;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operation_ = (global::Apollo.Perception.Inference.ReductionParameter.Types.ReductionOp) input.ReadEnum();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
          case 29: {
            Coeff = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReductionParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReductionOp {
        [pbr::OriginalName("REDUCTIONOP_DUMMY")] Dummy = 0,
        [pbr::OriginalName("SUM")] Sum = 1,
        [pbr::OriginalName("ASUM")] Asum = 2,
        [pbr::OriginalName("SUMSQ")] Sumsq = 3,
        [pbr::OriginalName("MEAN")] Mean = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that stores parameters used by ReLULayer
  /// </summary>
  public sealed partial class ReLUParameter : pb::IMessage<ReLUParameter> {
    private static readonly pb::MessageParser<ReLUParameter> _parser = new pb::MessageParser<ReLUParameter>(() => new ReLUParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReLUParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReLUParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReLUParameter(ReLUParameter other) : this() {
      negativeSlope_ = other.negativeSlope_;
      engine_ = other.engine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReLUParameter Clone() {
      return new ReLUParameter(this);
    }

    /// <summary>Field number for the "negative_slope" field.</summary>
    public const int NegativeSlopeFieldNumber = 1;
    private float negativeSlope_;
    /// <summary>
    /// Allow non-zero slope for negative inputs to speed up optimization
    /// Described in:
    /// Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
    /// improve neural network acoustic models. In ICML Workshop on Deep Learning
    /// for Audio, Speech, and Language Processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegativeSlope {
      get { return negativeSlope_; }
      set {
        negativeSlope_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 2;
    private global::Apollo.Perception.Inference.ReLUParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ReLUParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReLUParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReLUParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NegativeSlope != other.NegativeSlope) return false;
      if (Engine != other.Engine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NegativeSlope != 0F) hash ^= NegativeSlope.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NegativeSlope != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(NegativeSlope);
      }
      if (Engine != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Engine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NegativeSlope != 0F) {
        size += 1 + 4;
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReLUParameter other) {
      if (other == null) {
        return;
      }
      if (other.NegativeSlope != 0F) {
        NegativeSlope = other.NegativeSlope;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            NegativeSlope = input.ReadFloat();
            break;
          }
          case 16: {
            engine_ = (global::Apollo.Perception.Inference.ReLUParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReLUParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class ReshapeParameter : pb::IMessage<ReshapeParameter> {
    private static readonly pb::MessageParser<ReshapeParameter> _parser = new pb::MessageParser<ReshapeParameter>(() => new ReshapeParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReshapeParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeParameter(ReshapeParameter other) : this() {
      Shape = other.shape_ != null ? other.Shape.Clone() : null;
      axis_ = other.axis_;
      numAxes_ = other.numAxes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeParameter Clone() {
      return new ReshapeParameter(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::Apollo.Perception.Inference.BlobShape shape_;
    /// <summary>
    /// Specify the output dimensions. If some of the dimensions are set to 0,
    /// the corresponding dimension from the bottom layer is used (unchanged).
    /// Exactly one dimension may be set to -1, in which case its value is
    /// inferred from the count of the bottom blob and the remaining dimensions.
    /// For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
    ///
    ///   layer {
    ///     type: "Reshape" bottom: "input" top: "output"
    ///     reshape_param { ... }
    ///   }
    ///
    /// If "input" is 2D with shape 2 x 8, then the following reshape_param
    /// specifications are all equivalent, producing a 3D blob "output" with shape
    /// 2 x 2 x 4:
    ///
    ///   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
    ///   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
    ///   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
    ///   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.BlobShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// axis and num_axes control the portion of the bottom blob's shape that are
    /// replaced by (included in) the reshape. By default (axis == 0 and
    /// num_axes == -1), the entire bottom blob shape is included in the reshape,
    /// and hence the shape field must specify the entire output shape.
    ///
    /// axis may be non-zero to retain some portion of the beginning of the input
    /// shape (and may be negative to index from the end; e.g., -1 to begin the
    /// reshape after the last axis, including nothing in the reshape,
    /// -2 to include only the last axis, etc.).
    ///
    /// For example, suppose "input" is a 2D blob with shape 2 x 8.
    /// Then the following ReshapeLayer specifications are all equivalent,
    /// producing a blob "output" with shape 2 x 2 x 4:
    ///
    ///   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
    ///   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
    ///   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
    ///
    /// num_axes specifies the extent of the reshape.
    /// If num_axes >= 0 (and axis >= 0), the reshape will be performed only on
    /// input axes in the range .
    /// num_axes may also be -1, the default, to include all remaining axes
    /// (starting from axis).
    ///
    /// For example, suppose "input" is a 2D blob with shape 2 x 8.
    /// Then the following ReshapeLayer specifications are equivalent,
    /// producing a blob "output" with shape 1 x 2 x 8.
    ///
    ///   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
    ///   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
    ///   reshape_param { shape { dim:  1  }  num_axes: 0 }
    ///
    /// On the other hand, these would produce output blob shape 2 x 1 x 8:
    ///
    ///   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
    ///   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "num_axes" field.</summary>
    public const int NumAxesFieldNumber = 3;
    private int numAxes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAxes {
      get { return numAxes_; }
      set {
        numAxes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReshapeParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReshapeParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      if (Axis != other.Axis) return false;
      if (NumAxes != other.NumAxes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (NumAxes != 0) hash ^= NumAxes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shape_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shape);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (NumAxes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumAxes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (NumAxes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumAxes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReshapeParameter other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          shape_ = new global::Apollo.Perception.Inference.BlobShape();
        }
        Shape.MergeFrom(other.Shape);
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.NumAxes != 0) {
        NumAxes = other.NumAxes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (shape_ == null) {
              shape_ = new global::Apollo.Perception.Inference.BlobShape();
            }
            input.ReadMessage(shape_);
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
          case 24: {
            NumAxes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by ROIPoolingLayer
  /// </summary>
  public sealed partial class ROIPoolingParameter : pb::IMessage<ROIPoolingParameter> {
    private static readonly pb::MessageParser<ROIPoolingParameter> _parser = new pb::MessageParser<ROIPoolingParameter>(() => new ROIPoolingParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ROIPoolingParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIPoolingParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIPoolingParameter(ROIPoolingParameter other) : this() {
      pooledH_ = other.pooledH_;
      pooledW_ = other.pooledW_;
      spatialScale_ = other.spatialScale_;
      useFloor_ = other.useFloor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIPoolingParameter Clone() {
      return new ROIPoolingParameter(this);
    }

    /// <summary>Field number for the "pooled_h" field.</summary>
    public const int PooledHFieldNumber = 1;
    private uint pooledH_;
    /// <summary>
    /// Pad, kernel size, and stride are all given as a single value for equal
    /// dimensions in height and width or as Y, X pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PooledH {
      get { return pooledH_; }
      set {
        pooledH_ = value;
      }
    }

    /// <summary>Field number for the "pooled_w" field.</summary>
    public const int PooledWFieldNumber = 2;
    private uint pooledW_;
    /// <summary>
    /// The pooled output width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PooledW {
      get { return pooledW_; }
      set {
        pooledW_ = value;
      }
    }

    /// <summary>Field number for the "spatial_scale" field.</summary>
    public const int SpatialScaleFieldNumber = 3;
    private float spatialScale_;
    /// <summary>
    /// Multiplicative spatial scale factor to translate ROI coords from their
    /// input scale to the scale used when pooling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpatialScale {
      get { return spatialScale_; }
      set {
        spatialScale_ = value;
      }
    }

    /// <summary>Field number for the "use_floor" field.</summary>
    public const int UseFloorFieldNumber = 10;
    private bool useFloor_;
    /// <summary>
    /// add by wanji - begin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFloor {
      get { return useFloor_; }
      set {
        useFloor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ROIPoolingParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ROIPoolingParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PooledH != other.PooledH) return false;
      if (PooledW != other.PooledW) return false;
      if (SpatialScale != other.SpatialScale) return false;
      if (UseFloor != other.UseFloor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PooledH != 0) hash ^= PooledH.GetHashCode();
      if (PooledW != 0) hash ^= PooledW.GetHashCode();
      if (SpatialScale != 0F) hash ^= SpatialScale.GetHashCode();
      if (UseFloor != false) hash ^= UseFloor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PooledH != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PooledH);
      }
      if (PooledW != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PooledW);
      }
      if (SpatialScale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SpatialScale);
      }
      if (UseFloor != false) {
        output.WriteRawTag(80);
        output.WriteBool(UseFloor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PooledH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PooledH);
      }
      if (PooledW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PooledW);
      }
      if (SpatialScale != 0F) {
        size += 1 + 4;
      }
      if (UseFloor != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ROIPoolingParameter other) {
      if (other == null) {
        return;
      }
      if (other.PooledH != 0) {
        PooledH = other.PooledH;
      }
      if (other.PooledW != 0) {
        PooledW = other.PooledW;
      }
      if (other.SpatialScale != 0F) {
        SpatialScale = other.SpatialScale;
      }
      if (other.UseFloor != false) {
        UseFloor = other.UseFloor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PooledH = input.ReadUInt32();
            break;
          }
          case 16: {
            PooledW = input.ReadUInt32();
            break;
          }
          case 29: {
            SpatialScale = input.ReadFloat();
            break;
          }
          case 80: {
            UseFloor = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScaleParameter : pb::IMessage<ScaleParameter> {
    private static readonly pb::MessageParser<ScaleParameter> _parser = new pb::MessageParser<ScaleParameter>(() => new ScaleParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScaleParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleParameter(ScaleParameter other) : this() {
      axis_ = other.axis_;
      numAxes_ = other.numAxes_;
      Filler = other.filler_ != null ? other.Filler.Clone() : null;
      biasTerm_ = other.biasTerm_;
      BiasFiller = other.biasFiller_ != null ? other.BiasFiller.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleParameter Clone() {
      return new ScaleParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The first axis of bottom (the first input Blob) along which to apply
    /// bottom (the second input Blob).  May be negative to index from the end
    /// (e.g., -1 for the last axis).
    ///
    /// For example, if bottom is 4D with shape 100x3x40x60, the output
    /// top will have the same shape, and bottom may have any of the
    /// following shapes (for the given value of axis):
    ///    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
    ///    (axis == 1 == -3)          3;     3x40;     3x40x60
    ///    (axis == 2 == -2)                   40;       40x60
    ///    (axis == 3 == -1)                                60
    /// Furthermore, bottom may have the empty shape (regardless of the value of
    /// "axis") -- a scalar multiplier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "num_axes" field.</summary>
    public const int NumAxesFieldNumber = 2;
    private int numAxes_;
    /// <summary>
    /// (num_axes is ignored unless just one bottom is given and the scale is
    /// a learned parameter of the layer.  Otherwise, num_axes is determined by the
    /// number of axes by the second bottom.)
    /// The number of axes of the input (bottom) covered by the scale
    /// parameter, or -1 to cover all axes of bottom starting from `axis`.
    /// Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAxes {
      get { return numAxes_; }
      set {
        numAxes_ = value;
      }
    }

    /// <summary>Field number for the "filler" field.</summary>
    public const int FillerFieldNumber = 3;
    private global::Apollo.Perception.Inference.FillerParameter filler_;
    /// <summary>
    /// (filler is ignored unless just one bottom is given and the scale is
    /// a learned parameter of the layer.)
    /// The initialization for the learned scale parameter.
    /// Default is the unit (1) initialization, resulting in the ScaleLayer
    /// initially performing the identity operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter Filler {
      get { return filler_; }
      set {
        filler_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 4;
    private bool biasTerm_;
    /// <summary>
    /// Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
    /// may be more efficient).  Initialized with bias_filler (defaults to 0).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 5;
    private global::Apollo.Perception.Inference.FillerParameter biasFiller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScaleParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScaleParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (NumAxes != other.NumAxes) return false;
      if (!object.Equals(Filler, other.Filler)) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (NumAxes != 0) hash ^= NumAxes.GetHashCode();
      if (filler_ != null) hash ^= Filler.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (NumAxes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumAxes);
      }
      if (filler_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Filler);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(32);
        output.WriteBool(BiasTerm);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BiasFiller);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (NumAxes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumAxes);
      }
      if (filler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filler);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScaleParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.NumAxes != 0) {
        NumAxes = other.NumAxes;
      }
      if (other.filler_ != null) {
        if (filler_ == null) {
          filler_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        Filler.MergeFrom(other.Filler);
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            NumAxes = input.ReadInt32();
            break;
          }
          case 26: {
            if (filler_ == null) {
              filler_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(filler_);
            break;
          }
          case 32: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 42: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SigmoidParameter : pb::IMessage<SigmoidParameter> {
    private static readonly pb::MessageParser<SigmoidParameter> _parser = new pb::MessageParser<SigmoidParameter>(() => new SigmoidParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigmoidParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameter(SigmoidParameter other) : this() {
      engine_ = other.engine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameter Clone() {
      return new SigmoidParameter(this);
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 1;
    private global::Apollo.Perception.Inference.SigmoidParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SigmoidParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigmoidParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigmoidParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Engine != other.Engine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Engine != 0) hash ^= Engine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Engine != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Engine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigmoidParameter other) {
      if (other == null) {
        return;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            engine_ = (global::Apollo.Perception.Inference.SigmoidParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SigmoidParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class SliceParameter : pb::IMessage<SliceParameter> {
    private static readonly pb::MessageParser<SliceParameter> _parser = new pb::MessageParser<SliceParameter>(() => new SliceParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SliceParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceParameter(SliceParameter other) : this() {
      axis_ = other.axis_;
      slicePoint_ = other.slicePoint_.Clone();
      sliceDim_ = other.sliceDim_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceParameter Clone() {
      return new SliceParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 3;
    private int axis_;
    /// <summary>
    /// The axis along which to slice -- may be negative to index from the end
    /// (e.g., -1 for the last axis).
    /// By default, SliceLayer concatenates blobs along the "channels" axis (1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "slice_point" field.</summary>
    public const int SlicePointFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_slicePoint_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> slicePoint_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SlicePoint {
      get { return slicePoint_; }
    }

    /// <summary>Field number for the "slice_dim" field.</summary>
    public const int SliceDimFieldNumber = 1;
    private uint sliceDim_;
    /// <summary>
    /// DEPRECATED: alias for "axis" -- does not support negative indexing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SliceDim {
      get { return sliceDim_; }
      set {
        sliceDim_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SliceParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SliceParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if(!slicePoint_.Equals(other.slicePoint_)) return false;
      if (SliceDim != other.SliceDim) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      hash ^= slicePoint_.GetHashCode();
      if (SliceDim != 0) hash ^= SliceDim.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SliceDim != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SliceDim);
      }
      slicePoint_.WriteTo(output, _repeated_slicePoint_codec);
      if (Axis != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Axis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      size += slicePoint_.CalculateSize(_repeated_slicePoint_codec);
      if (SliceDim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SliceDim);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SliceParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      slicePoint_.Add(other.slicePoint_);
      if (other.SliceDim != 0) {
        SliceDim = other.SliceDim;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SliceDim = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            slicePoint_.AddEntriesFrom(input, _repeated_slicePoint_codec);
            break;
          }
          case 24: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by SoftmaxLayer, SoftmaxWithLossLayer
  /// </summary>
  public sealed partial class SoftmaxParameter : pb::IMessage<SoftmaxParameter> {
    private static readonly pb::MessageParser<SoftmaxParameter> _parser = new pb::MessageParser<SoftmaxParameter>(() => new SoftmaxParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoftmaxParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxParameter(SoftmaxParameter other) : this() {
      engine_ = other.engine_;
      axis_ = other.axis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxParameter Clone() {
      return new SoftmaxParameter(this);
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 1;
    private global::Apollo.Perception.Inference.SoftmaxParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SoftmaxParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The axis along which to perform the softmax -- may be negative to index
    /// from the end (e.g., -1 for the last axis).
    /// Any other axes will be evaluated as independent softmaxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoftmaxParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoftmaxParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Engine != other.Engine) return false;
      if (Axis != other.Axis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Engine != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Engine);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoftmaxParameter other) {
      if (other == null) {
        return;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            engine_ = (global::Apollo.Perception.Inference.SoftmaxParameter.Types.Engine) input.ReadEnum();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SoftmaxParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class TanHParameter : pb::IMessage<TanHParameter> {
    private static readonly pb::MessageParser<TanHParameter> _parser = new pb::MessageParser<TanHParameter>(() => new TanHParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TanHParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TanHParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TanHParameter(TanHParameter other) : this() {
      engine_ = other.engine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TanHParameter Clone() {
      return new TanHParameter(this);
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 1;
    private global::Apollo.Perception.Inference.TanHParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.TanHParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TanHParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TanHParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Engine != other.Engine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Engine != 0) hash ^= Engine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Engine != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Engine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TanHParameter other) {
      if (other == null) {
        return;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            engine_ = (global::Apollo.Perception.Inference.TanHParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TanHParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that stores parameters used by TileLayer
  /// </summary>
  public sealed partial class TileParameter : pb::IMessage<TileParameter> {
    private static readonly pb::MessageParser<TileParameter> _parser = new pb::MessageParser<TileParameter>(() => new TileParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileParameter(TileParameter other) : this() {
      axis_ = other.axis_;
      tiles_ = other.tiles_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileParameter Clone() {
      return new TileParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The index of the axis to tile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 2;
    private int tiles_;
    /// <summary>
    /// The number of copies (tiles) of the blob to output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tiles {
      get { return tiles_; }
      set {
        tiles_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (Tiles != other.Tiles) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (Tiles != 0) hash ^= Tiles.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (Tiles != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tiles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (Tiles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tiles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.Tiles != 0) {
        Tiles = other.Tiles;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            Tiles = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by ThresholdLayer
  /// </summary>
  public sealed partial class ThresholdParameter : pb::IMessage<ThresholdParameter> {
    private static readonly pb::MessageParser<ThresholdParameter> _parser = new pb::MessageParser<ThresholdParameter>(() => new ThresholdParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThresholdParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdParameter(ThresholdParameter other) : this() {
      threshold_ = other.threshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdParameter Clone() {
      return new ThresholdParameter(this);
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 1;
    private float threshold_;
    /// <summary>
    /// Strictly positive values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThresholdParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThresholdParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Threshold != other.Threshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Threshold != 0F) hash ^= Threshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Threshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Threshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Threshold != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThresholdParameter other) {
      if (other == null) {
        return;
      }
      if (other.Threshold != 0F) {
        Threshold = other.Threshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Threshold = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VideoDataParameter : pb::IMessage<VideoDataParameter> {
    private static readonly pb::MessageParser<VideoDataParameter> _parser = new pb::MessageParser<VideoDataParameter>(() => new VideoDataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoDataParameter(VideoDataParameter other) : this() {
      videoType_ = other.videoType_;
      deviceId_ = other.deviceId_;
      videoFile_ = other.videoFile_;
      skipFrames_ = other.skipFrames_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoDataParameter Clone() {
      return new VideoDataParameter(this);
    }

    /// <summary>Field number for the "video_type" field.</summary>
    public const int VideoTypeFieldNumber = 1;
    private global::Apollo.Perception.Inference.VideoDataParameter.Types.VideoType videoType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.VideoDataParameter.Types.VideoType VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private int deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "video_file" field.</summary>
    public const int VideoFileFieldNumber = 3;
    private string videoFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VideoFile {
      get { return videoFile_; }
      set {
        videoFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skip_frames" field.</summary>
    public const int SkipFramesFieldNumber = 4;
    private uint skipFrames_;
    /// <summary>
    /// Number of frames to be skipped before processing a frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkipFrames {
      get { return skipFrames_; }
      set {
        skipFrames_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VideoType != other.VideoType) return false;
      if (DeviceId != other.DeviceId) return false;
      if (VideoFile != other.VideoFile) return false;
      if (SkipFrames != other.SkipFrames) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VideoType != 0) hash ^= VideoType.GetHashCode();
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (VideoFile.Length != 0) hash ^= VideoFile.GetHashCode();
      if (SkipFrames != 0) hash ^= SkipFrames.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) VideoType);
      }
      if (DeviceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DeviceId);
      }
      if (VideoFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VideoFile);
      }
      if (SkipFrames != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkipFrames);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VideoType);
      }
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (VideoFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoFile);
      }
      if (SkipFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkipFrames);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoDataParameter other) {
      if (other == null) {
        return;
      }
      if (other.VideoType != 0) {
        VideoType = other.VideoType;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.VideoFile.Length != 0) {
        VideoFile = other.VideoFile;
      }
      if (other.SkipFrames != 0) {
        SkipFrames = other.SkipFrames;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            videoType_ = (global::Apollo.Perception.Inference.VideoDataParameter.Types.VideoType) input.ReadEnum();
            break;
          }
          case 16: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 26: {
            VideoFile = input.ReadString();
            break;
          }
          case 32: {
            SkipFrames = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VideoDataParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum VideoType {
        [pbr::OriginalName("WEBCAM")] Webcam = 0,
        [pbr::OriginalName("VIDEO")] Video = 1,
      }

    }
    #endregion

  }

  public sealed partial class WindowDataParameter : pb::IMessage<WindowDataParameter> {
    private static readonly pb::MessageParser<WindowDataParameter> _parser = new pb::MessageParser<WindowDataParameter>(() => new WindowDataParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowDataParameter(WindowDataParameter other) : this() {
      source_ = other.source_;
      scale_ = other.scale_;
      meanFile_ = other.meanFile_;
      batchSize_ = other.batchSize_;
      cropSize_ = other.cropSize_;
      mirror_ = other.mirror_;
      fgThreshold_ = other.fgThreshold_;
      bgThreshold_ = other.bgThreshold_;
      fgFraction_ = other.fgFraction_;
      contextPad_ = other.contextPad_;
      cropMode_ = other.cropMode_;
      cacheImages_ = other.cacheImages_;
      rootFolder_ = other.rootFolder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowDataParameter Clone() {
      return new WindowDataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    /// For data pre-processing, we can do simple scaling and subtracting the
    /// data mean, if provided. Note that the mean subtraction is always carried
    /// out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 3;
    private string meanFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 4;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 5;
    private uint cropSize_;
    /// <summary>
    /// Specify if we would like to randomly crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 6;
    private bool mirror_;
    /// <summary>
    /// Specify if we want to randomly mirror data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "fg_threshold" field.</summary>
    public const int FgThresholdFieldNumber = 7;
    private float fgThreshold_;
    /// <summary>
    /// Foreground (object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgThreshold {
      get { return fgThreshold_; }
      set {
        fgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "bg_threshold" field.</summary>
    public const int BgThresholdFieldNumber = 8;
    private float bgThreshold_;
    /// <summary>
    /// Background (non-object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgThreshold {
      get { return bgThreshold_; }
      set {
        bgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "fg_fraction" field.</summary>
    public const int FgFractionFieldNumber = 9;
    private float fgFraction_;
    /// <summary>
    /// Fraction of batch that should be foreground objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgFraction {
      get { return fgFraction_; }
      set {
        fgFraction_ = value;
      }
    }

    /// <summary>Field number for the "context_pad" field.</summary>
    public const int ContextPadFieldNumber = 10;
    private uint contextPad_;
    /// <summary>
    /// Amount of contextual padding to add around a window
    /// (used only by the window_data_layer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContextPad {
      get { return contextPad_; }
      set {
        contextPad_ = value;
      }
    }

    /// <summary>Field number for the "crop_mode" field.</summary>
    public const int CropModeFieldNumber = 11;
    private string cropMode_ = "";
    /// <summary>
    /// Mode for cropping out a detection window
    /// warp: cropped window is warped to a fixed size and aspect ratio
    /// square: the tightest square around the window is cropped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CropMode {
      get { return cropMode_; }
      set {
        cropMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cache_images" field.</summary>
    public const int CacheImagesFieldNumber = 12;
    private bool cacheImages_;
    /// <summary>
    /// cache_images: will load all images in memory for faster access
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CacheImages {
      get { return cacheImages_; }
      set {
        cacheImages_ = value;
      }
    }

    /// <summary>Field number for the "root_folder" field.</summary>
    public const int RootFolderFieldNumber = 13;
    private string rootFolder_ = "";
    /// <summary>
    /// append root_folder to locate images
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootFolder {
      get { return rootFolder_; }
      set {
        rootFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (Scale != other.Scale) return false;
      if (MeanFile != other.MeanFile) return false;
      if (BatchSize != other.BatchSize) return false;
      if (CropSize != other.CropSize) return false;
      if (Mirror != other.Mirror) return false;
      if (FgThreshold != other.FgThreshold) return false;
      if (BgThreshold != other.BgThreshold) return false;
      if (FgFraction != other.FgFraction) return false;
      if (ContextPad != other.ContextPad) return false;
      if (CropMode != other.CropMode) return false;
      if (CacheImages != other.CacheImages) return false;
      if (RootFolder != other.RootFolder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (FgThreshold != 0F) hash ^= FgThreshold.GetHashCode();
      if (BgThreshold != 0F) hash ^= BgThreshold.GetHashCode();
      if (FgFraction != 0F) hash ^= FgFraction.GetHashCode();
      if (ContextPad != 0) hash ^= ContextPad.GetHashCode();
      if (CropMode.Length != 0) hash ^= CropMode.GetHashCode();
      if (CacheImages != false) hash ^= CacheImages.GetHashCode();
      if (RootFolder.Length != 0) hash ^= RootFolder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeanFile);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BatchSize);
      }
      if (CropSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CropSize);
      }
      if (Mirror != false) {
        output.WriteRawTag(48);
        output.WriteBool(Mirror);
      }
      if (FgThreshold != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FgThreshold);
      }
      if (BgThreshold != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BgThreshold);
      }
      if (FgFraction != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FgFraction);
      }
      if (ContextPad != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ContextPad);
      }
      if (CropMode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CropMode);
      }
      if (CacheImages != false) {
        output.WriteRawTag(96);
        output.WriteBool(CacheImages);
      }
      if (RootFolder.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RootFolder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (FgThreshold != 0F) {
        size += 1 + 4;
      }
      if (BgThreshold != 0F) {
        size += 1 + 4;
      }
      if (FgFraction != 0F) {
        size += 1 + 4;
      }
      if (ContextPad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContextPad);
      }
      if (CropMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CropMode);
      }
      if (CacheImages != false) {
        size += 1 + 1;
      }
      if (RootFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootFolder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowDataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.FgThreshold != 0F) {
        FgThreshold = other.FgThreshold;
      }
      if (other.BgThreshold != 0F) {
        BgThreshold = other.BgThreshold;
      }
      if (other.FgFraction != 0F) {
        FgFraction = other.FgFraction;
      }
      if (other.ContextPad != 0) {
        ContextPad = other.ContextPad;
      }
      if (other.CropMode.Length != 0) {
        CropMode = other.CropMode;
      }
      if (other.CacheImages != false) {
        CacheImages = other.CacheImages;
      }
      if (other.RootFolder.Length != 0) {
        RootFolder = other.RootFolder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            MeanFile = input.ReadString();
            break;
          }
          case 32: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 40: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 48: {
            Mirror = input.ReadBool();
            break;
          }
          case 61: {
            FgThreshold = input.ReadFloat();
            break;
          }
          case 69: {
            BgThreshold = input.ReadFloat();
            break;
          }
          case 77: {
            FgFraction = input.ReadFloat();
            break;
          }
          case 80: {
            ContextPad = input.ReadUInt32();
            break;
          }
          case 90: {
            CropMode = input.ReadString();
            break;
          }
          case 96: {
            CacheImages = input.ReadBool();
            break;
          }
          case 106: {
            RootFolder = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SPPParameter : pb::IMessage<SPPParameter> {
    private static readonly pb::MessageParser<SPPParameter> _parser = new pb::MessageParser<SPPParameter>(() => new SPPParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SPPParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPPParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPPParameter(SPPParameter other) : this() {
      pyramidHeight_ = other.pyramidHeight_;
      pool_ = other.pool_;
      engine_ = other.engine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPPParameter Clone() {
      return new SPPParameter(this);
    }

    /// <summary>Field number for the "pyramid_height" field.</summary>
    public const int PyramidHeightFieldNumber = 1;
    private uint pyramidHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PyramidHeight {
      get { return pyramidHeight_; }
      set {
        pyramidHeight_ = value;
      }
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 2;
    private global::Apollo.Perception.Inference.SPPParameter.Types.PoolMethod pool_ = 0;
    /// <summary>
    /// The pooling method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SPPParameter.Types.PoolMethod Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 6;
    private global::Apollo.Perception.Inference.SPPParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SPPParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SPPParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SPPParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PyramidHeight != other.PyramidHeight) return false;
      if (Pool != other.Pool) return false;
      if (Engine != other.Engine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PyramidHeight != 0) hash ^= PyramidHeight.GetHashCode();
      if (Pool != 0) hash ^= Pool.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PyramidHeight != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PyramidHeight);
      }
      if (Pool != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Pool);
      }
      if (Engine != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Engine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PyramidHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PyramidHeight);
      }
      if (Pool != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pool);
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SPPParameter other) {
      if (other == null) {
        return;
      }
      if (other.PyramidHeight != 0) {
        PyramidHeight = other.PyramidHeight;
      }
      if (other.Pool != 0) {
        Pool = other.Pool;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PyramidHeight = input.ReadUInt32();
            break;
          }
          case 16: {
            pool_ = (global::Apollo.Perception.Inference.SPPParameter.Types.PoolMethod) input.ReadEnum();
            break;
          }
          case 48: {
            engine_ = (global::Apollo.Perception.Inference.SPPParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SPPParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PoolMethod {
        [pbr::OriginalName("MAX")] Max = 0,
        [pbr::OriginalName("AVE")] Ave = 1,
        [pbr::OriginalName("STOCHASTIC")] Stochastic = 2,
      }

      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// DEPRECATED: use LayerParameter.
  /// </summary>
  public sealed partial class V1LayerParameter : pb::IMessage<V1LayerParameter> {
    private static readonly pb::MessageParser<V1LayerParameter> _parser = new pb::MessageParser<V1LayerParameter>(() => new V1LayerParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<V1LayerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V1LayerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V1LayerParameter(V1LayerParameter other) : this() {
      bottom_ = other.bottom_.Clone();
      top_ = other.top_.Clone();
      name_ = other.name_;
      include_ = other.include_.Clone();
      exclude_ = other.exclude_.Clone();
      type_ = other.type_;
      blobs_ = other.blobs_.Clone();
      param_ = other.param_.Clone();
      blobShareMode_ = other.blobShareMode_.Clone();
      blobsLr_ = other.blobsLr_.Clone();
      weightDecay_ = other.weightDecay_.Clone();
      lossWeight_ = other.lossWeight_.Clone();
      AccuracyParam = other.accuracyParam_ != null ? other.AccuracyParam.Clone() : null;
      ArgmaxParam = other.argmaxParam_ != null ? other.ArgmaxParam.Clone() : null;
      ConcatParam = other.concatParam_ != null ? other.ConcatParam.Clone() : null;
      ContrastiveLossParam = other.contrastiveLossParam_ != null ? other.ContrastiveLossParam.Clone() : null;
      ConvolutionParam = other.convolutionParam_ != null ? other.ConvolutionParam.Clone() : null;
      DataParam = other.dataParam_ != null ? other.DataParam.Clone() : null;
      DropoutParam = other.dropoutParam_ != null ? other.DropoutParam.Clone() : null;
      DummyDataParam = other.dummyDataParam_ != null ? other.DummyDataParam.Clone() : null;
      EltwiseParam = other.eltwiseParam_ != null ? other.EltwiseParam.Clone() : null;
      ExpParam = other.expParam_ != null ? other.ExpParam.Clone() : null;
      Hdf5DataParam = other.hdf5DataParam_ != null ? other.Hdf5DataParam.Clone() : null;
      Hdf5OutputParam = other.hdf5OutputParam_ != null ? other.Hdf5OutputParam.Clone() : null;
      HingeLossParam = other.hingeLossParam_ != null ? other.HingeLossParam.Clone() : null;
      ImageDataParam = other.imageDataParam_ != null ? other.ImageDataParam.Clone() : null;
      InfogainLossParam = other.infogainLossParam_ != null ? other.InfogainLossParam.Clone() : null;
      InnerProductParam = other.innerProductParam_ != null ? other.InnerProductParam.Clone() : null;
      LrnParam = other.lrnParam_ != null ? other.LrnParam.Clone() : null;
      MemoryDataParam = other.memoryDataParam_ != null ? other.MemoryDataParam.Clone() : null;
      MvnParam = other.mvnParam_ != null ? other.MvnParam.Clone() : null;
      PoolingParam = other.poolingParam_ != null ? other.PoolingParam.Clone() : null;
      PowerParam = other.powerParam_ != null ? other.PowerParam.Clone() : null;
      ReluParam = other.reluParam_ != null ? other.ReluParam.Clone() : null;
      SigmoidParam = other.sigmoidParam_ != null ? other.SigmoidParam.Clone() : null;
      SoftmaxParam = other.softmaxParam_ != null ? other.SoftmaxParam.Clone() : null;
      SliceParam = other.sliceParam_ != null ? other.SliceParam.Clone() : null;
      TanhParam = other.tanhParam_ != null ? other.TanhParam.Clone() : null;
      ThresholdParam = other.thresholdParam_ != null ? other.ThresholdParam.Clone() : null;
      WindowDataParam = other.windowDataParam_ != null ? other.WindowDataParam.Clone() : null;
      TransformParam = other.transformParam_ != null ? other.TransformParam.Clone() : null;
      LossParam = other.lossParam_ != null ? other.LossParam.Clone() : null;
      Layer = other.layer_ != null ? other.Layer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V1LayerParameter Clone() {
      return new V1LayerParameter(this);
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_bottom_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> bottom_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Bottom {
      get { return bottom_; }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_top_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> top_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Top {
      get { return top_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include" field.</summary>
    public const int IncludeFieldNumber = 32;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.NetStateRule> _repeated_include_codec
        = pb::FieldCodec.ForMessage(258, global::Apollo.Perception.Inference.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> include_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> Include {
      get { return include_; }
    }

    /// <summary>Field number for the "exclude" field.</summary>
    public const int ExcludeFieldNumber = 33;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.NetStateRule> _repeated_exclude_codec
        = pb::FieldCodec.ForMessage(266, global::Apollo.Perception.Inference.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> exclude_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.NetStateRule> Exclude {
      get { return exclude_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Apollo.Perception.Inference.V1LayerParameter.Types.LayerType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.V1LayerParameter.Types.LayerType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Perception.Inference.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> blobs_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> Blobs {
      get { return blobs_; }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 1001;
    private static readonly pb::FieldCodec<string> _repeated_param_codec
        = pb::FieldCodec.ForString(8010);
    private readonly pbc::RepeatedField<string> param_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "blob_share_mode" field.</summary>
    public const int BlobShareModeFieldNumber = 1002;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.V1LayerParameter.Types.DimCheckMode> _repeated_blobShareMode_codec
        = pb::FieldCodec.ForEnum(8018, x => (int) x, x => (global::Apollo.Perception.Inference.V1LayerParameter.Types.DimCheckMode) x);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.V1LayerParameter.Types.DimCheckMode> blobShareMode_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.V1LayerParameter.Types.DimCheckMode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.V1LayerParameter.Types.DimCheckMode> BlobShareMode {
      get { return blobShareMode_; }
    }

    /// <summary>Field number for the "blobs_lr" field.</summary>
    public const int BlobsLrFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_blobsLr_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> blobsLr_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BlobsLr {
      get { return blobsLr_; }
    }

    /// <summary>Field number for the "weight_decay" field.</summary>
    public const int WeightDecayFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_weightDecay_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> weightDecay_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> WeightDecay {
      get { return weightDecay_; }
    }

    /// <summary>Field number for the "loss_weight" field.</summary>
    public const int LossWeightFieldNumber = 35;
    private static readonly pb::FieldCodec<float> _repeated_lossWeight_codec
        = pb::FieldCodec.ForFloat(282);
    private readonly pbc::RepeatedField<float> lossWeight_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LossWeight {
      get { return lossWeight_; }
    }

    /// <summary>Field number for the "accuracy_param" field.</summary>
    public const int AccuracyParamFieldNumber = 27;
    private global::Apollo.Perception.Inference.AccuracyParameter accuracyParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.AccuracyParameter AccuracyParam {
      get { return accuracyParam_; }
      set {
        accuracyParam_ = value;
      }
    }

    /// <summary>Field number for the "argmax_param" field.</summary>
    public const int ArgmaxParamFieldNumber = 23;
    private global::Apollo.Perception.Inference.ArgMaxParameter argmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ArgMaxParameter ArgmaxParam {
      get { return argmaxParam_; }
      set {
        argmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "concat_param" field.</summary>
    public const int ConcatParamFieldNumber = 9;
    private global::Apollo.Perception.Inference.ConcatParameter concatParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ConcatParameter ConcatParam {
      get { return concatParam_; }
      set {
        concatParam_ = value;
      }
    }

    /// <summary>Field number for the "contrastive_loss_param" field.</summary>
    public const int ContrastiveLossParamFieldNumber = 40;
    private global::Apollo.Perception.Inference.ContrastiveLossParameter contrastiveLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ContrastiveLossParameter ContrastiveLossParam {
      get { return contrastiveLossParam_; }
      set {
        contrastiveLossParam_ = value;
      }
    }

    /// <summary>Field number for the "convolution_param" field.</summary>
    public const int ConvolutionParamFieldNumber = 10;
    private global::Apollo.Perception.Inference.ConvolutionParameter convolutionParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ConvolutionParameter ConvolutionParam {
      get { return convolutionParam_; }
      set {
        convolutionParam_ = value;
      }
    }

    /// <summary>Field number for the "data_param" field.</summary>
    public const int DataParamFieldNumber = 11;
    private global::Apollo.Perception.Inference.DataParameter dataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DataParameter DataParam {
      get { return dataParam_; }
      set {
        dataParam_ = value;
      }
    }

    /// <summary>Field number for the "dropout_param" field.</summary>
    public const int DropoutParamFieldNumber = 12;
    private global::Apollo.Perception.Inference.DropoutParameter dropoutParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DropoutParameter DropoutParam {
      get { return dropoutParam_; }
      set {
        dropoutParam_ = value;
      }
    }

    /// <summary>Field number for the "dummy_data_param" field.</summary>
    public const int DummyDataParamFieldNumber = 26;
    private global::Apollo.Perception.Inference.DummyDataParameter dummyDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.DummyDataParameter DummyDataParam {
      get { return dummyDataParam_; }
      set {
        dummyDataParam_ = value;
      }
    }

    /// <summary>Field number for the "eltwise_param" field.</summary>
    public const int EltwiseParamFieldNumber = 24;
    private global::Apollo.Perception.Inference.EltwiseParameter eltwiseParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.EltwiseParameter EltwiseParam {
      get { return eltwiseParam_; }
      set {
        eltwiseParam_ = value;
      }
    }

    /// <summary>Field number for the "exp_param" field.</summary>
    public const int ExpParamFieldNumber = 41;
    private global::Apollo.Perception.Inference.ExpParameter expParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ExpParameter ExpParam {
      get { return expParam_; }
      set {
        expParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_data_param" field.</summary>
    public const int Hdf5DataParamFieldNumber = 13;
    private global::Apollo.Perception.Inference.HDF5DataParameter hdf5DataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HDF5DataParameter Hdf5DataParam {
      get { return hdf5DataParam_; }
      set {
        hdf5DataParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_output_param" field.</summary>
    public const int Hdf5OutputParamFieldNumber = 14;
    private global::Apollo.Perception.Inference.HDF5OutputParameter hdf5OutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HDF5OutputParameter Hdf5OutputParam {
      get { return hdf5OutputParam_; }
      set {
        hdf5OutputParam_ = value;
      }
    }

    /// <summary>Field number for the "hinge_loss_param" field.</summary>
    public const int HingeLossParamFieldNumber = 29;
    private global::Apollo.Perception.Inference.HingeLossParameter hingeLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HingeLossParameter HingeLossParam {
      get { return hingeLossParam_; }
      set {
        hingeLossParam_ = value;
      }
    }

    /// <summary>Field number for the "image_data_param" field.</summary>
    public const int ImageDataParamFieldNumber = 15;
    private global::Apollo.Perception.Inference.ImageDataParameter imageDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ImageDataParameter ImageDataParam {
      get { return imageDataParam_; }
      set {
        imageDataParam_ = value;
      }
    }

    /// <summary>Field number for the "infogain_loss_param" field.</summary>
    public const int InfogainLossParamFieldNumber = 16;
    private global::Apollo.Perception.Inference.InfogainLossParameter infogainLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.InfogainLossParameter InfogainLossParam {
      get { return infogainLossParam_; }
      set {
        infogainLossParam_ = value;
      }
    }

    /// <summary>Field number for the "inner_product_param" field.</summary>
    public const int InnerProductParamFieldNumber = 17;
    private global::Apollo.Perception.Inference.InnerProductParameter innerProductParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.InnerProductParameter InnerProductParam {
      get { return innerProductParam_; }
      set {
        innerProductParam_ = value;
      }
    }

    /// <summary>Field number for the "lrn_param" field.</summary>
    public const int LrnParamFieldNumber = 18;
    private global::Apollo.Perception.Inference.LRNParameter lrnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LRNParameter LrnParam {
      get { return lrnParam_; }
      set {
        lrnParam_ = value;
      }
    }

    /// <summary>Field number for the "memory_data_param" field.</summary>
    public const int MemoryDataParamFieldNumber = 22;
    private global::Apollo.Perception.Inference.MemoryDataParameter memoryDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MemoryDataParameter MemoryDataParam {
      get { return memoryDataParam_; }
      set {
        memoryDataParam_ = value;
      }
    }

    /// <summary>Field number for the "mvn_param" field.</summary>
    public const int MvnParamFieldNumber = 34;
    private global::Apollo.Perception.Inference.MVNParameter mvnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.MVNParameter MvnParam {
      get { return mvnParam_; }
      set {
        mvnParam_ = value;
      }
    }

    /// <summary>Field number for the "pooling_param" field.</summary>
    public const int PoolingParamFieldNumber = 19;
    private global::Apollo.Perception.Inference.PoolingParameter poolingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PoolingParameter PoolingParam {
      get { return poolingParam_; }
      set {
        poolingParam_ = value;
      }
    }

    /// <summary>Field number for the "power_param" field.</summary>
    public const int PowerParamFieldNumber = 21;
    private global::Apollo.Perception.Inference.PowerParameter powerParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.PowerParameter PowerParam {
      get { return powerParam_; }
      set {
        powerParam_ = value;
      }
    }

    /// <summary>Field number for the "relu_param" field.</summary>
    public const int ReluParamFieldNumber = 30;
    private global::Apollo.Perception.Inference.ReLUParameter reluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ReLUParameter ReluParam {
      get { return reluParam_; }
      set {
        reluParam_ = value;
      }
    }

    /// <summary>Field number for the "sigmoid_param" field.</summary>
    public const int SigmoidParamFieldNumber = 38;
    private global::Apollo.Perception.Inference.SigmoidParameter sigmoidParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SigmoidParameter SigmoidParam {
      get { return sigmoidParam_; }
      set {
        sigmoidParam_ = value;
      }
    }

    /// <summary>Field number for the "softmax_param" field.</summary>
    public const int SoftmaxParamFieldNumber = 39;
    private global::Apollo.Perception.Inference.SoftmaxParameter softmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SoftmaxParameter SoftmaxParam {
      get { return softmaxParam_; }
      set {
        softmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "slice_param" field.</summary>
    public const int SliceParamFieldNumber = 31;
    private global::Apollo.Perception.Inference.SliceParameter sliceParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.SliceParameter SliceParam {
      get { return sliceParam_; }
      set {
        sliceParam_ = value;
      }
    }

    /// <summary>Field number for the "tanh_param" field.</summary>
    public const int TanhParamFieldNumber = 37;
    private global::Apollo.Perception.Inference.TanHParameter tanhParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.TanHParameter TanhParam {
      get { return tanhParam_; }
      set {
        tanhParam_ = value;
      }
    }

    /// <summary>Field number for the "threshold_param" field.</summary>
    public const int ThresholdParamFieldNumber = 25;
    private global::Apollo.Perception.Inference.ThresholdParameter thresholdParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.ThresholdParameter ThresholdParam {
      get { return thresholdParam_; }
      set {
        thresholdParam_ = value;
      }
    }

    /// <summary>Field number for the "window_data_param" field.</summary>
    public const int WindowDataParamFieldNumber = 20;
    private global::Apollo.Perception.Inference.WindowDataParameter windowDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.WindowDataParameter WindowDataParam {
      get { return windowDataParam_; }
      set {
        windowDataParam_ = value;
      }
    }

    /// <summary>Field number for the "transform_param" field.</summary>
    public const int TransformParamFieldNumber = 36;
    private global::Apollo.Perception.Inference.TransformationParameter transformParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.TransformationParameter TransformParam {
      get { return transformParam_; }
      set {
        transformParam_ = value;
      }
    }

    /// <summary>Field number for the "loss_param" field.</summary>
    public const int LossParamFieldNumber = 42;
    private global::Apollo.Perception.Inference.LossParameter lossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.LossParameter LossParam {
      get { return lossParam_; }
      set {
        lossParam_ = value;
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 1;
    private global::Apollo.Perception.Inference.V0LayerParameter layer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.V0LayerParameter Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as V1LayerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(V1LayerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bottom_.Equals(other.bottom_)) return false;
      if(!top_.Equals(other.top_)) return false;
      if (Name != other.Name) return false;
      if(!include_.Equals(other.include_)) return false;
      if(!exclude_.Equals(other.exclude_)) return false;
      if (Type != other.Type) return false;
      if(!blobs_.Equals(other.blobs_)) return false;
      if(!param_.Equals(other.param_)) return false;
      if(!blobShareMode_.Equals(other.blobShareMode_)) return false;
      if(!blobsLr_.Equals(other.blobsLr_)) return false;
      if(!weightDecay_.Equals(other.weightDecay_)) return false;
      if(!lossWeight_.Equals(other.lossWeight_)) return false;
      if (!object.Equals(AccuracyParam, other.AccuracyParam)) return false;
      if (!object.Equals(ArgmaxParam, other.ArgmaxParam)) return false;
      if (!object.Equals(ConcatParam, other.ConcatParam)) return false;
      if (!object.Equals(ContrastiveLossParam, other.ContrastiveLossParam)) return false;
      if (!object.Equals(ConvolutionParam, other.ConvolutionParam)) return false;
      if (!object.Equals(DataParam, other.DataParam)) return false;
      if (!object.Equals(DropoutParam, other.DropoutParam)) return false;
      if (!object.Equals(DummyDataParam, other.DummyDataParam)) return false;
      if (!object.Equals(EltwiseParam, other.EltwiseParam)) return false;
      if (!object.Equals(ExpParam, other.ExpParam)) return false;
      if (!object.Equals(Hdf5DataParam, other.Hdf5DataParam)) return false;
      if (!object.Equals(Hdf5OutputParam, other.Hdf5OutputParam)) return false;
      if (!object.Equals(HingeLossParam, other.HingeLossParam)) return false;
      if (!object.Equals(ImageDataParam, other.ImageDataParam)) return false;
      if (!object.Equals(InfogainLossParam, other.InfogainLossParam)) return false;
      if (!object.Equals(InnerProductParam, other.InnerProductParam)) return false;
      if (!object.Equals(LrnParam, other.LrnParam)) return false;
      if (!object.Equals(MemoryDataParam, other.MemoryDataParam)) return false;
      if (!object.Equals(MvnParam, other.MvnParam)) return false;
      if (!object.Equals(PoolingParam, other.PoolingParam)) return false;
      if (!object.Equals(PowerParam, other.PowerParam)) return false;
      if (!object.Equals(ReluParam, other.ReluParam)) return false;
      if (!object.Equals(SigmoidParam, other.SigmoidParam)) return false;
      if (!object.Equals(SoftmaxParam, other.SoftmaxParam)) return false;
      if (!object.Equals(SliceParam, other.SliceParam)) return false;
      if (!object.Equals(TanhParam, other.TanhParam)) return false;
      if (!object.Equals(ThresholdParam, other.ThresholdParam)) return false;
      if (!object.Equals(WindowDataParam, other.WindowDataParam)) return false;
      if (!object.Equals(TransformParam, other.TransformParam)) return false;
      if (!object.Equals(LossParam, other.LossParam)) return false;
      if (!object.Equals(Layer, other.Layer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bottom_.GetHashCode();
      hash ^= top_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= include_.GetHashCode();
      hash ^= exclude_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= blobs_.GetHashCode();
      hash ^= param_.GetHashCode();
      hash ^= blobShareMode_.GetHashCode();
      hash ^= blobsLr_.GetHashCode();
      hash ^= weightDecay_.GetHashCode();
      hash ^= lossWeight_.GetHashCode();
      if (accuracyParam_ != null) hash ^= AccuracyParam.GetHashCode();
      if (argmaxParam_ != null) hash ^= ArgmaxParam.GetHashCode();
      if (concatParam_ != null) hash ^= ConcatParam.GetHashCode();
      if (contrastiveLossParam_ != null) hash ^= ContrastiveLossParam.GetHashCode();
      if (convolutionParam_ != null) hash ^= ConvolutionParam.GetHashCode();
      if (dataParam_ != null) hash ^= DataParam.GetHashCode();
      if (dropoutParam_ != null) hash ^= DropoutParam.GetHashCode();
      if (dummyDataParam_ != null) hash ^= DummyDataParam.GetHashCode();
      if (eltwiseParam_ != null) hash ^= EltwiseParam.GetHashCode();
      if (expParam_ != null) hash ^= ExpParam.GetHashCode();
      if (hdf5DataParam_ != null) hash ^= Hdf5DataParam.GetHashCode();
      if (hdf5OutputParam_ != null) hash ^= Hdf5OutputParam.GetHashCode();
      if (hingeLossParam_ != null) hash ^= HingeLossParam.GetHashCode();
      if (imageDataParam_ != null) hash ^= ImageDataParam.GetHashCode();
      if (infogainLossParam_ != null) hash ^= InfogainLossParam.GetHashCode();
      if (innerProductParam_ != null) hash ^= InnerProductParam.GetHashCode();
      if (lrnParam_ != null) hash ^= LrnParam.GetHashCode();
      if (memoryDataParam_ != null) hash ^= MemoryDataParam.GetHashCode();
      if (mvnParam_ != null) hash ^= MvnParam.GetHashCode();
      if (poolingParam_ != null) hash ^= PoolingParam.GetHashCode();
      if (powerParam_ != null) hash ^= PowerParam.GetHashCode();
      if (reluParam_ != null) hash ^= ReluParam.GetHashCode();
      if (sigmoidParam_ != null) hash ^= SigmoidParam.GetHashCode();
      if (softmaxParam_ != null) hash ^= SoftmaxParam.GetHashCode();
      if (sliceParam_ != null) hash ^= SliceParam.GetHashCode();
      if (tanhParam_ != null) hash ^= TanhParam.GetHashCode();
      if (thresholdParam_ != null) hash ^= ThresholdParam.GetHashCode();
      if (windowDataParam_ != null) hash ^= WindowDataParam.GetHashCode();
      if (transformParam_ != null) hash ^= TransformParam.GetHashCode();
      if (lossParam_ != null) hash ^= LossParam.GetHashCode();
      if (layer_ != null) hash ^= Layer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (layer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Layer);
      }
      bottom_.WriteTo(output, _repeated_bottom_codec);
      top_.WriteTo(output, _repeated_top_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      blobs_.WriteTo(output, _repeated_blobs_codec);
      blobsLr_.WriteTo(output, _repeated_blobsLr_codec);
      weightDecay_.WriteTo(output, _repeated_weightDecay_codec);
      if (concatParam_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ConcatParam);
      }
      if (convolutionParam_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ConvolutionParam);
      }
      if (dataParam_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DataParam);
      }
      if (dropoutParam_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DropoutParam);
      }
      if (hdf5DataParam_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Hdf5OutputParam);
      }
      if (imageDataParam_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ImageDataParam);
      }
      if (infogainLossParam_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(InnerProductParam);
      }
      if (lrnParam_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(LrnParam);
      }
      if (poolingParam_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PoolingParam);
      }
      if (windowDataParam_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(WindowDataParam);
      }
      if (powerParam_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(PowerParam);
      }
      if (memoryDataParam_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MemoryDataParam);
      }
      if (argmaxParam_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ArgmaxParam);
      }
      if (eltwiseParam_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(EltwiseParam);
      }
      if (thresholdParam_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ThresholdParam);
      }
      if (dummyDataParam_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(DummyDataParam);
      }
      if (accuracyParam_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(AccuracyParam);
      }
      if (hingeLossParam_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(HingeLossParam);
      }
      if (reluParam_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ReluParam);
      }
      if (sliceParam_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(SliceParam);
      }
      include_.WriteTo(output, _repeated_include_codec);
      exclude_.WriteTo(output, _repeated_exclude_codec);
      if (mvnParam_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(MvnParam);
      }
      lossWeight_.WriteTo(output, _repeated_lossWeight_codec);
      if (transformParam_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(TransformParam);
      }
      if (tanhParam_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TanhParam);
      }
      if (sigmoidParam_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SoftmaxParam);
      }
      if (contrastiveLossParam_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(ContrastiveLossParam);
      }
      if (expParam_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ExpParam);
      }
      if (lossParam_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(LossParam);
      }
      param_.WriteTo(output, _repeated_param_codec);
      blobShareMode_.WriteTo(output, _repeated_blobShareMode_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bottom_.CalculateSize(_repeated_bottom_codec);
      size += top_.CalculateSize(_repeated_top_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += include_.CalculateSize(_repeated_include_codec);
      size += exclude_.CalculateSize(_repeated_exclude_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      size += param_.CalculateSize(_repeated_param_codec);
      size += blobShareMode_.CalculateSize(_repeated_blobShareMode_codec);
      size += blobsLr_.CalculateSize(_repeated_blobsLr_codec);
      size += weightDecay_.CalculateSize(_repeated_weightDecay_codec);
      size += lossWeight_.CalculateSize(_repeated_lossWeight_codec);
      if (accuracyParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccuracyParam);
      }
      if (argmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArgmaxParam);
      }
      if (concatParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConcatParam);
      }
      if (contrastiveLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContrastiveLossParam);
      }
      if (convolutionParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConvolutionParam);
      }
      if (dataParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataParam);
      }
      if (dropoutParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DropoutParam);
      }
      if (dummyDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DummyDataParam);
      }
      if (eltwiseParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EltwiseParam);
      }
      if (expParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpParam);
      }
      if (hdf5DataParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdf5OutputParam);
      }
      if (hingeLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HingeLossParam);
      }
      if (imageDataParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageDataParam);
      }
      if (infogainLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InnerProductParam);
      }
      if (lrnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LrnParam);
      }
      if (memoryDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MemoryDataParam);
      }
      if (mvnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MvnParam);
      }
      if (poolingParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PoolingParam);
      }
      if (powerParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerParam);
      }
      if (reluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReluParam);
      }
      if (sigmoidParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SoftmaxParam);
      }
      if (sliceParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SliceParam);
      }
      if (tanhParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TanhParam);
      }
      if (thresholdParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ThresholdParam);
      }
      if (windowDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WindowDataParam);
      }
      if (transformParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformParam);
      }
      if (lossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LossParam);
      }
      if (layer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Layer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(V1LayerParameter other) {
      if (other == null) {
        return;
      }
      bottom_.Add(other.bottom_);
      top_.Add(other.top_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      include_.Add(other.include_);
      exclude_.Add(other.exclude_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      blobs_.Add(other.blobs_);
      param_.Add(other.param_);
      blobShareMode_.Add(other.blobShareMode_);
      blobsLr_.Add(other.blobsLr_);
      weightDecay_.Add(other.weightDecay_);
      lossWeight_.Add(other.lossWeight_);
      if (other.accuracyParam_ != null) {
        if (accuracyParam_ == null) {
          accuracyParam_ = new global::Apollo.Perception.Inference.AccuracyParameter();
        }
        AccuracyParam.MergeFrom(other.AccuracyParam);
      }
      if (other.argmaxParam_ != null) {
        if (argmaxParam_ == null) {
          argmaxParam_ = new global::Apollo.Perception.Inference.ArgMaxParameter();
        }
        ArgmaxParam.MergeFrom(other.ArgmaxParam);
      }
      if (other.concatParam_ != null) {
        if (concatParam_ == null) {
          concatParam_ = new global::Apollo.Perception.Inference.ConcatParameter();
        }
        ConcatParam.MergeFrom(other.ConcatParam);
      }
      if (other.contrastiveLossParam_ != null) {
        if (contrastiveLossParam_ == null) {
          contrastiveLossParam_ = new global::Apollo.Perception.Inference.ContrastiveLossParameter();
        }
        ContrastiveLossParam.MergeFrom(other.ContrastiveLossParam);
      }
      if (other.convolutionParam_ != null) {
        if (convolutionParam_ == null) {
          convolutionParam_ = new global::Apollo.Perception.Inference.ConvolutionParameter();
        }
        ConvolutionParam.MergeFrom(other.ConvolutionParam);
      }
      if (other.dataParam_ != null) {
        if (dataParam_ == null) {
          dataParam_ = new global::Apollo.Perception.Inference.DataParameter();
        }
        DataParam.MergeFrom(other.DataParam);
      }
      if (other.dropoutParam_ != null) {
        if (dropoutParam_ == null) {
          dropoutParam_ = new global::Apollo.Perception.Inference.DropoutParameter();
        }
        DropoutParam.MergeFrom(other.DropoutParam);
      }
      if (other.dummyDataParam_ != null) {
        if (dummyDataParam_ == null) {
          dummyDataParam_ = new global::Apollo.Perception.Inference.DummyDataParameter();
        }
        DummyDataParam.MergeFrom(other.DummyDataParam);
      }
      if (other.eltwiseParam_ != null) {
        if (eltwiseParam_ == null) {
          eltwiseParam_ = new global::Apollo.Perception.Inference.EltwiseParameter();
        }
        EltwiseParam.MergeFrom(other.EltwiseParam);
      }
      if (other.expParam_ != null) {
        if (expParam_ == null) {
          expParam_ = new global::Apollo.Perception.Inference.ExpParameter();
        }
        ExpParam.MergeFrom(other.ExpParam);
      }
      if (other.hdf5DataParam_ != null) {
        if (hdf5DataParam_ == null) {
          hdf5DataParam_ = new global::Apollo.Perception.Inference.HDF5DataParameter();
        }
        Hdf5DataParam.MergeFrom(other.Hdf5DataParam);
      }
      if (other.hdf5OutputParam_ != null) {
        if (hdf5OutputParam_ == null) {
          hdf5OutputParam_ = new global::Apollo.Perception.Inference.HDF5OutputParameter();
        }
        Hdf5OutputParam.MergeFrom(other.Hdf5OutputParam);
      }
      if (other.hingeLossParam_ != null) {
        if (hingeLossParam_ == null) {
          hingeLossParam_ = new global::Apollo.Perception.Inference.HingeLossParameter();
        }
        HingeLossParam.MergeFrom(other.HingeLossParam);
      }
      if (other.imageDataParam_ != null) {
        if (imageDataParam_ == null) {
          imageDataParam_ = new global::Apollo.Perception.Inference.ImageDataParameter();
        }
        ImageDataParam.MergeFrom(other.ImageDataParam);
      }
      if (other.infogainLossParam_ != null) {
        if (infogainLossParam_ == null) {
          infogainLossParam_ = new global::Apollo.Perception.Inference.InfogainLossParameter();
        }
        InfogainLossParam.MergeFrom(other.InfogainLossParam);
      }
      if (other.innerProductParam_ != null) {
        if (innerProductParam_ == null) {
          innerProductParam_ = new global::Apollo.Perception.Inference.InnerProductParameter();
        }
        InnerProductParam.MergeFrom(other.InnerProductParam);
      }
      if (other.lrnParam_ != null) {
        if (lrnParam_ == null) {
          lrnParam_ = new global::Apollo.Perception.Inference.LRNParameter();
        }
        LrnParam.MergeFrom(other.LrnParam);
      }
      if (other.memoryDataParam_ != null) {
        if (memoryDataParam_ == null) {
          memoryDataParam_ = new global::Apollo.Perception.Inference.MemoryDataParameter();
        }
        MemoryDataParam.MergeFrom(other.MemoryDataParam);
      }
      if (other.mvnParam_ != null) {
        if (mvnParam_ == null) {
          mvnParam_ = new global::Apollo.Perception.Inference.MVNParameter();
        }
        MvnParam.MergeFrom(other.MvnParam);
      }
      if (other.poolingParam_ != null) {
        if (poolingParam_ == null) {
          poolingParam_ = new global::Apollo.Perception.Inference.PoolingParameter();
        }
        PoolingParam.MergeFrom(other.PoolingParam);
      }
      if (other.powerParam_ != null) {
        if (powerParam_ == null) {
          powerParam_ = new global::Apollo.Perception.Inference.PowerParameter();
        }
        PowerParam.MergeFrom(other.PowerParam);
      }
      if (other.reluParam_ != null) {
        if (reluParam_ == null) {
          reluParam_ = new global::Apollo.Perception.Inference.ReLUParameter();
        }
        ReluParam.MergeFrom(other.ReluParam);
      }
      if (other.sigmoidParam_ != null) {
        if (sigmoidParam_ == null) {
          sigmoidParam_ = new global::Apollo.Perception.Inference.SigmoidParameter();
        }
        SigmoidParam.MergeFrom(other.SigmoidParam);
      }
      if (other.softmaxParam_ != null) {
        if (softmaxParam_ == null) {
          softmaxParam_ = new global::Apollo.Perception.Inference.SoftmaxParameter();
        }
        SoftmaxParam.MergeFrom(other.SoftmaxParam);
      }
      if (other.sliceParam_ != null) {
        if (sliceParam_ == null) {
          sliceParam_ = new global::Apollo.Perception.Inference.SliceParameter();
        }
        SliceParam.MergeFrom(other.SliceParam);
      }
      if (other.tanhParam_ != null) {
        if (tanhParam_ == null) {
          tanhParam_ = new global::Apollo.Perception.Inference.TanHParameter();
        }
        TanhParam.MergeFrom(other.TanhParam);
      }
      if (other.thresholdParam_ != null) {
        if (thresholdParam_ == null) {
          thresholdParam_ = new global::Apollo.Perception.Inference.ThresholdParameter();
        }
        ThresholdParam.MergeFrom(other.ThresholdParam);
      }
      if (other.windowDataParam_ != null) {
        if (windowDataParam_ == null) {
          windowDataParam_ = new global::Apollo.Perception.Inference.WindowDataParameter();
        }
        WindowDataParam.MergeFrom(other.WindowDataParam);
      }
      if (other.transformParam_ != null) {
        if (transformParam_ == null) {
          transformParam_ = new global::Apollo.Perception.Inference.TransformationParameter();
        }
        TransformParam.MergeFrom(other.TransformParam);
      }
      if (other.lossParam_ != null) {
        if (lossParam_ == null) {
          lossParam_ = new global::Apollo.Perception.Inference.LossParameter();
        }
        LossParam.MergeFrom(other.LossParam);
      }
      if (other.layer_ != null) {
        if (layer_ == null) {
          layer_ = new global::Apollo.Perception.Inference.V0LayerParameter();
        }
        Layer.MergeFrom(other.Layer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (layer_ == null) {
              layer_ = new global::Apollo.Perception.Inference.V0LayerParameter();
            }
            input.ReadMessage(layer_);
            break;
          }
          case 18: {
            bottom_.AddEntriesFrom(input, _repeated_bottom_codec);
            break;
          }
          case 26: {
            top_.AddEntriesFrom(input, _repeated_top_codec);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            type_ = (global::Apollo.Perception.Inference.V1LayerParameter.Types.LayerType) input.ReadEnum();
            break;
          }
          case 50: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
          case 58:
          case 61: {
            blobsLr_.AddEntriesFrom(input, _repeated_blobsLr_codec);
            break;
          }
          case 66:
          case 69: {
            weightDecay_.AddEntriesFrom(input, _repeated_weightDecay_codec);
            break;
          }
          case 74: {
            if (concatParam_ == null) {
              concatParam_ = new global::Apollo.Perception.Inference.ConcatParameter();
            }
            input.ReadMessage(concatParam_);
            break;
          }
          case 82: {
            if (convolutionParam_ == null) {
              convolutionParam_ = new global::Apollo.Perception.Inference.ConvolutionParameter();
            }
            input.ReadMessage(convolutionParam_);
            break;
          }
          case 90: {
            if (dataParam_ == null) {
              dataParam_ = new global::Apollo.Perception.Inference.DataParameter();
            }
            input.ReadMessage(dataParam_);
            break;
          }
          case 98: {
            if (dropoutParam_ == null) {
              dropoutParam_ = new global::Apollo.Perception.Inference.DropoutParameter();
            }
            input.ReadMessage(dropoutParam_);
            break;
          }
          case 106: {
            if (hdf5DataParam_ == null) {
              hdf5DataParam_ = new global::Apollo.Perception.Inference.HDF5DataParameter();
            }
            input.ReadMessage(hdf5DataParam_);
            break;
          }
          case 114: {
            if (hdf5OutputParam_ == null) {
              hdf5OutputParam_ = new global::Apollo.Perception.Inference.HDF5OutputParameter();
            }
            input.ReadMessage(hdf5OutputParam_);
            break;
          }
          case 122: {
            if (imageDataParam_ == null) {
              imageDataParam_ = new global::Apollo.Perception.Inference.ImageDataParameter();
            }
            input.ReadMessage(imageDataParam_);
            break;
          }
          case 130: {
            if (infogainLossParam_ == null) {
              infogainLossParam_ = new global::Apollo.Perception.Inference.InfogainLossParameter();
            }
            input.ReadMessage(infogainLossParam_);
            break;
          }
          case 138: {
            if (innerProductParam_ == null) {
              innerProductParam_ = new global::Apollo.Perception.Inference.InnerProductParameter();
            }
            input.ReadMessage(innerProductParam_);
            break;
          }
          case 146: {
            if (lrnParam_ == null) {
              lrnParam_ = new global::Apollo.Perception.Inference.LRNParameter();
            }
            input.ReadMessage(lrnParam_);
            break;
          }
          case 154: {
            if (poolingParam_ == null) {
              poolingParam_ = new global::Apollo.Perception.Inference.PoolingParameter();
            }
            input.ReadMessage(poolingParam_);
            break;
          }
          case 162: {
            if (windowDataParam_ == null) {
              windowDataParam_ = new global::Apollo.Perception.Inference.WindowDataParameter();
            }
            input.ReadMessage(windowDataParam_);
            break;
          }
          case 170: {
            if (powerParam_ == null) {
              powerParam_ = new global::Apollo.Perception.Inference.PowerParameter();
            }
            input.ReadMessage(powerParam_);
            break;
          }
          case 178: {
            if (memoryDataParam_ == null) {
              memoryDataParam_ = new global::Apollo.Perception.Inference.MemoryDataParameter();
            }
            input.ReadMessage(memoryDataParam_);
            break;
          }
          case 186: {
            if (argmaxParam_ == null) {
              argmaxParam_ = new global::Apollo.Perception.Inference.ArgMaxParameter();
            }
            input.ReadMessage(argmaxParam_);
            break;
          }
          case 194: {
            if (eltwiseParam_ == null) {
              eltwiseParam_ = new global::Apollo.Perception.Inference.EltwiseParameter();
            }
            input.ReadMessage(eltwiseParam_);
            break;
          }
          case 202: {
            if (thresholdParam_ == null) {
              thresholdParam_ = new global::Apollo.Perception.Inference.ThresholdParameter();
            }
            input.ReadMessage(thresholdParam_);
            break;
          }
          case 210: {
            if (dummyDataParam_ == null) {
              dummyDataParam_ = new global::Apollo.Perception.Inference.DummyDataParameter();
            }
            input.ReadMessage(dummyDataParam_);
            break;
          }
          case 218: {
            if (accuracyParam_ == null) {
              accuracyParam_ = new global::Apollo.Perception.Inference.AccuracyParameter();
            }
            input.ReadMessage(accuracyParam_);
            break;
          }
          case 234: {
            if (hingeLossParam_ == null) {
              hingeLossParam_ = new global::Apollo.Perception.Inference.HingeLossParameter();
            }
            input.ReadMessage(hingeLossParam_);
            break;
          }
          case 242: {
            if (reluParam_ == null) {
              reluParam_ = new global::Apollo.Perception.Inference.ReLUParameter();
            }
            input.ReadMessage(reluParam_);
            break;
          }
          case 250: {
            if (sliceParam_ == null) {
              sliceParam_ = new global::Apollo.Perception.Inference.SliceParameter();
            }
            input.ReadMessage(sliceParam_);
            break;
          }
          case 258: {
            include_.AddEntriesFrom(input, _repeated_include_codec);
            break;
          }
          case 266: {
            exclude_.AddEntriesFrom(input, _repeated_exclude_codec);
            break;
          }
          case 274: {
            if (mvnParam_ == null) {
              mvnParam_ = new global::Apollo.Perception.Inference.MVNParameter();
            }
            input.ReadMessage(mvnParam_);
            break;
          }
          case 282:
          case 285: {
            lossWeight_.AddEntriesFrom(input, _repeated_lossWeight_codec);
            break;
          }
          case 290: {
            if (transformParam_ == null) {
              transformParam_ = new global::Apollo.Perception.Inference.TransformationParameter();
            }
            input.ReadMessage(transformParam_);
            break;
          }
          case 298: {
            if (tanhParam_ == null) {
              tanhParam_ = new global::Apollo.Perception.Inference.TanHParameter();
            }
            input.ReadMessage(tanhParam_);
            break;
          }
          case 306: {
            if (sigmoidParam_ == null) {
              sigmoidParam_ = new global::Apollo.Perception.Inference.SigmoidParameter();
            }
            input.ReadMessage(sigmoidParam_);
            break;
          }
          case 314: {
            if (softmaxParam_ == null) {
              softmaxParam_ = new global::Apollo.Perception.Inference.SoftmaxParameter();
            }
            input.ReadMessage(softmaxParam_);
            break;
          }
          case 322: {
            if (contrastiveLossParam_ == null) {
              contrastiveLossParam_ = new global::Apollo.Perception.Inference.ContrastiveLossParameter();
            }
            input.ReadMessage(contrastiveLossParam_);
            break;
          }
          case 330: {
            if (expParam_ == null) {
              expParam_ = new global::Apollo.Perception.Inference.ExpParameter();
            }
            input.ReadMessage(expParam_);
            break;
          }
          case 338: {
            if (lossParam_ == null) {
              lossParam_ = new global::Apollo.Perception.Inference.LossParameter();
            }
            input.ReadMessage(lossParam_);
            break;
          }
          case 8010: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 8018:
          case 8016: {
            blobShareMode_.AddEntriesFrom(input, _repeated_blobShareMode_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the V1LayerParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LayerType {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("ABSVAL")] Absval = 35,
        [pbr::OriginalName("ACCURACY")] Accuracy = 1,
        [pbr::OriginalName("ARGMAX")] Argmax = 30,
        [pbr::OriginalName("BNLL")] Bnll = 2,
        [pbr::OriginalName("CONCAT")] Concat = 3,
        [pbr::OriginalName("CONTRASTIVE_LOSS")] ContrastiveLoss = 37,
        [pbr::OriginalName("CONVOLUTION")] Convolution = 4,
        [pbr::OriginalName("DATA")] Data = 5,
        [pbr::OriginalName("DECONVOLUTION")] Deconvolution = 39,
        [pbr::OriginalName("DROPOUT")] Dropout = 6,
        [pbr::OriginalName("DUMMY_DATA")] DummyData = 32,
        [pbr::OriginalName("EUCLIDEAN_LOSS")] EuclideanLoss = 7,
        [pbr::OriginalName("ELTWISE")] Eltwise = 25,
        [pbr::OriginalName("EXP")] Exp = 38,
        [pbr::OriginalName("FLATTEN")] Flatten = 8,
        [pbr::OriginalName("HDF5_DATA")] Hdf5Data = 9,
        [pbr::OriginalName("HDF5_OUTPUT")] Hdf5Output = 10,
        [pbr::OriginalName("HINGE_LOSS")] HingeLoss = 28,
        [pbr::OriginalName("IM2COL")] Im2Col = 11,
        [pbr::OriginalName("IMAGE_DATA")] ImageData = 12,
        [pbr::OriginalName("INFOGAIN_LOSS")] InfogainLoss = 13,
        [pbr::OriginalName("INNER_PRODUCT")] InnerProduct = 14,
        [pbr::OriginalName("LRN")] Lrn = 15,
        [pbr::OriginalName("MEMORY_DATA")] MemoryData = 29,
        [pbr::OriginalName("MULTINOMIAL_LOGISTIC_LOSS")] MultinomialLogisticLoss = 16,
        [pbr::OriginalName("MVN")] Mvn = 34,
        [pbr::OriginalName("POOLING")] Pooling = 17,
        [pbr::OriginalName("POWER")] Power = 26,
        [pbr::OriginalName("RELU")] Relu = 18,
        [pbr::OriginalName("SIGMOID")] Sigmoid = 19,
        [pbr::OriginalName("SIGMOID_CROSS_ENTROPY_LOSS")] SigmoidCrossEntropyLoss = 27,
        [pbr::OriginalName("SILENCE")] Silence = 36,
        [pbr::OriginalName("SOFTMAX")] Softmax = 20,
        [pbr::OriginalName("SOFTMAX_LOSS")] SoftmaxLoss = 21,
        [pbr::OriginalName("SPLIT")] Split = 22,
        [pbr::OriginalName("SLICE")] Slice = 33,
        [pbr::OriginalName("TANH")] Tanh = 23,
        [pbr::OriginalName("WINDOW_DATA")] WindowData = 24,
        [pbr::OriginalName("THRESHOLD")] Threshold = 31,
      }

      public enum DimCheckMode {
        [pbr::OriginalName("STRICT")] Strict = 0,
        [pbr::OriginalName("PERMISSIVE")] Permissive = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// DEPRECATED: V0LayerParameter is the old way of specifying layer parameters
  /// in Caffe.  We keep this message type around for legacy support.
  /// </summary>
  public sealed partial class V0LayerParameter : pb::IMessage<V0LayerParameter> {
    private static readonly pb::MessageParser<V0LayerParameter> _parser = new pb::MessageParser<V0LayerParameter>(() => new V0LayerParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<V0LayerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V0LayerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V0LayerParameter(V0LayerParameter other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      numOutput_ = other.numOutput_;
      biasterm_ = other.biasterm_;
      WeightFiller = other.weightFiller_ != null ? other.WeightFiller.Clone() : null;
      BiasFiller = other.biasFiller_ != null ? other.BiasFiller.Clone() : null;
      pad_ = other.pad_;
      kernelsize_ = other.kernelsize_;
      group_ = other.group_;
      stride_ = other.stride_;
      pool_ = other.pool_;
      dropoutRatio_ = other.dropoutRatio_;
      localSize_ = other.localSize_;
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      k_ = other.k_;
      source_ = other.source_;
      scale_ = other.scale_;
      meanfile_ = other.meanfile_;
      batchsize_ = other.batchsize_;
      cropsize_ = other.cropsize_;
      mirror_ = other.mirror_;
      blobs_ = other.blobs_.Clone();
      blobsLr_ = other.blobsLr_.Clone();
      weightDecay_ = other.weightDecay_.Clone();
      randSkip_ = other.randSkip_;
      detFgThreshold_ = other.detFgThreshold_;
      detBgThreshold_ = other.detBgThreshold_;
      detFgFraction_ = other.detFgFraction_;
      detContextPad_ = other.detContextPad_;
      detCropMode_ = other.detCropMode_;
      newNum_ = other.newNum_;
      newChannels_ = other.newChannels_;
      newHeight_ = other.newHeight_;
      newWidth_ = other.newWidth_;
      shuffleImages_ = other.shuffleImages_;
      concatDim_ = other.concatDim_;
      Hdf5OutputParam = other.hdf5OutputParam_ != null ? other.Hdf5OutputParam.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V0LayerParameter Clone() {
      return new V0LayerParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the layer name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// the string to specify the layer type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 3;
    private uint numOutput_;
    /// <summary>
    /// Parameters to specify layers with inner products.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "biasterm" field.</summary>
    public const int BiastermFieldNumber = 4;
    private bool biasterm_;
    /// <summary>
    /// whether to have bias terms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Biasterm {
      get { return biasterm_; }
      set {
        biasterm_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 5;
    private global::Apollo.Perception.Inference.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 6;
    private global::Apollo.Perception.Inference.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 7;
    private uint pad_;
    /// <summary>
    /// The padding size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pad {
      get { return pad_; }
      set {
        pad_ = value;
      }
    }

    /// <summary>Field number for the "kernelsize" field.</summary>
    public const int KernelsizeFieldNumber = 8;
    private uint kernelsize_;
    /// <summary>
    /// The kernel size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kernelsize {
      get { return kernelsize_; }
      set {
        kernelsize_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 9;
    private uint group_;
    /// <summary>
    /// The group size for group conv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 10;
    private uint stride_;
    /// <summary>
    /// The stride
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stride {
      get { return stride_; }
      set {
        stride_ = value;
      }
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 11;
    private global::Apollo.Perception.Inference.V0LayerParameter.Types.PoolMethod pool_ = 0;
    /// <summary>
    /// The pooling method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.V0LayerParameter.Types.PoolMethod Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    /// <summary>Field number for the "dropout_ratio" field.</summary>
    public const int DropoutRatioFieldNumber = 12;
    private float dropoutRatio_;
    /// <summary>
    /// dropout ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DropoutRatio {
      get { return dropoutRatio_; }
      set {
        dropoutRatio_ = value;
      }
    }

    /// <summary>Field number for the "local_size" field.</summary>
    public const int LocalSizeFieldNumber = 13;
    private uint localSize_;
    /// <summary>
    /// for local response norm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalSize {
      get { return localSize_; }
      set {
        localSize_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 14;
    private float alpha_;
    /// <summary>
    /// for local response norm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 15;
    private float beta_;
    /// <summary>
    /// for local response norm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 22;
    private float k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 16;
    private string source_ = "";
    /// <summary>
    /// For data layers, specify the data source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 17;
    private float scale_;
    /// <summary>
    /// For data pre-processing, we can do simple scaling and subtracting the
    /// data mean, if provided. Note that the mean subtraction is always carried
    /// out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "meanfile" field.</summary>
    public const int MeanfileFieldNumber = 18;
    private string meanfile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Meanfile {
      get { return meanfile_; }
      set {
        meanfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batchsize" field.</summary>
    public const int BatchsizeFieldNumber = 19;
    private uint batchsize_;
    /// <summary>
    /// For data layers, specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Batchsize {
      get { return batchsize_; }
      set {
        batchsize_ = value;
      }
    }

    /// <summary>Field number for the "cropsize" field.</summary>
    public const int CropsizeFieldNumber = 20;
    private uint cropsize_;
    /// <summary>
    /// For data layers, specify if we would like to randomly crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cropsize {
      get { return cropsize_; }
      set {
        cropsize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 21;
    private bool mirror_;
    /// <summary>
    /// For data layers, specify if we want to randomly mirror data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 50;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(402, global::Apollo.Perception.Inference.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> blobs_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto>();
    /// <summary>
    /// The blobs containing the numeric parameters of the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.BlobProto> Blobs {
      get { return blobs_; }
    }

    /// <summary>Field number for the "blobs_lr" field.</summary>
    public const int BlobsLrFieldNumber = 51;
    private static readonly pb::FieldCodec<float> _repeated_blobsLr_codec
        = pb::FieldCodec.ForFloat(410);
    private readonly pbc::RepeatedField<float> blobsLr_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// The ratio that is multiplied on the global learning rate. If you want to
    /// set the learning ratio for one blob, you need to set it for all blobs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BlobsLr {
      get { return blobsLr_; }
    }

    /// <summary>Field number for the "weight_decay" field.</summary>
    public const int WeightDecayFieldNumber = 52;
    private static readonly pb::FieldCodec<float> _repeated_weightDecay_codec
        = pb::FieldCodec.ForFloat(418);
    private readonly pbc::RepeatedField<float> weightDecay_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// The weight decay that is multiplied on the global weight decay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> WeightDecay {
      get { return weightDecay_; }
    }

    /// <summary>Field number for the "rand_skip" field.</summary>
    public const int RandSkipFieldNumber = 53;
    private uint randSkip_;
    /// <summary>
    /// The rand_skip variable is for the data layer to skip a few data points
    /// to avoid all asynchronous sgd clients to start at the same point. The skip
    /// point would be set as rand_skip * rand(0,1). Note that rand_skip should not
    /// be larger than the number of keys in the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandSkip {
      get { return randSkip_; }
      set {
        randSkip_ = value;
      }
    }

    /// <summary>Field number for the "det_fg_threshold" field.</summary>
    public const int DetFgThresholdFieldNumber = 54;
    private float detFgThreshold_;
    /// <summary>
    /// Fields related to detection (det_*)
    /// foreground (object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetFgThreshold {
      get { return detFgThreshold_; }
      set {
        detFgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "det_bg_threshold" field.</summary>
    public const int DetBgThresholdFieldNumber = 55;
    private float detBgThreshold_;
    /// <summary>
    /// background (non-object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetBgThreshold {
      get { return detBgThreshold_; }
      set {
        detBgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "det_fg_fraction" field.</summary>
    public const int DetFgFractionFieldNumber = 56;
    private float detFgFraction_;
    /// <summary>
    /// Fraction of batch that should be foreground objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetFgFraction {
      get { return detFgFraction_; }
      set {
        detFgFraction_ = value;
      }
    }

    /// <summary>Field number for the "det_context_pad" field.</summary>
    public const int DetContextPadFieldNumber = 58;
    private uint detContextPad_;
    /// <summary>
    /// Amount of contextual padding to add around a window
    /// (used only by the window_data_layer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DetContextPad {
      get { return detContextPad_; }
      set {
        detContextPad_ = value;
      }
    }

    /// <summary>Field number for the "det_crop_mode" field.</summary>
    public const int DetCropModeFieldNumber = 59;
    private string detCropMode_ = "";
    /// <summary>
    /// Mode for cropping out a detection window
    /// warp: cropped window is warped to a fixed size and aspect ratio
    /// square: the tightest square around the window is cropped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DetCropMode {
      get { return detCropMode_; }
      set {
        detCropMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_num" field.</summary>
    public const int NewNumFieldNumber = 60;
    private int newNum_;
    /// <summary>
    /// For ReshapeLayer, one needs to specify the new dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewNum {
      get { return newNum_; }
      set {
        newNum_ = value;
      }
    }

    /// <summary>Field number for the "new_channels" field.</summary>
    public const int NewChannelsFieldNumber = 61;
    private int newChannels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewChannels {
      get { return newChannels_; }
      set {
        newChannels_ = value;
      }
    }

    /// <summary>Field number for the "new_height" field.</summary>
    public const int NewHeightFieldNumber = 62;
    private int newHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewHeight {
      get { return newHeight_; }
      set {
        newHeight_ = value;
      }
    }

    /// <summary>Field number for the "new_width" field.</summary>
    public const int NewWidthFieldNumber = 63;
    private int newWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewWidth {
      get { return newWidth_; }
      set {
        newWidth_ = value;
      }
    }

    /// <summary>Field number for the "shuffle_images" field.</summary>
    public const int ShuffleImagesFieldNumber = 64;
    private bool shuffleImages_;
    /// <summary>
    /// Whether or not ImageLayer should shuffle the list of files at every epoch.
    /// It will also resize images if new_height or new_width are not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShuffleImages {
      get { return shuffleImages_; }
      set {
        shuffleImages_ = value;
      }
    }

    /// <summary>Field number for the "concat_dim" field.</summary>
    public const int ConcatDimFieldNumber = 65;
    private uint concatDim_;
    /// <summary>
    /// For ConcatLayer, one needs to specify the dimension for concatenation, and
    /// the other dimensions must be the same for all the bottom blobs.
    /// By default it will concatenate blobs along the channels dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConcatDim {
      get { return concatDim_; }
      set {
        concatDim_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_output_param" field.</summary>
    public const int Hdf5OutputParamFieldNumber = 1001;
    private global::Apollo.Perception.Inference.HDF5OutputParameter hdf5OutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.HDF5OutputParameter Hdf5OutputParam {
      get { return hdf5OutputParam_; }
      set {
        hdf5OutputParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as V0LayerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(V0LayerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (NumOutput != other.NumOutput) return false;
      if (Biasterm != other.Biasterm) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (Pad != other.Pad) return false;
      if (Kernelsize != other.Kernelsize) return false;
      if (Group != other.Group) return false;
      if (Stride != other.Stride) return false;
      if (Pool != other.Pool) return false;
      if (DropoutRatio != other.DropoutRatio) return false;
      if (LocalSize != other.LocalSize) return false;
      if (Alpha != other.Alpha) return false;
      if (Beta != other.Beta) return false;
      if (K != other.K) return false;
      if (Source != other.Source) return false;
      if (Scale != other.Scale) return false;
      if (Meanfile != other.Meanfile) return false;
      if (Batchsize != other.Batchsize) return false;
      if (Cropsize != other.Cropsize) return false;
      if (Mirror != other.Mirror) return false;
      if(!blobs_.Equals(other.blobs_)) return false;
      if(!blobsLr_.Equals(other.blobsLr_)) return false;
      if(!weightDecay_.Equals(other.weightDecay_)) return false;
      if (RandSkip != other.RandSkip) return false;
      if (DetFgThreshold != other.DetFgThreshold) return false;
      if (DetBgThreshold != other.DetBgThreshold) return false;
      if (DetFgFraction != other.DetFgFraction) return false;
      if (DetContextPad != other.DetContextPad) return false;
      if (DetCropMode != other.DetCropMode) return false;
      if (NewNum != other.NewNum) return false;
      if (NewChannels != other.NewChannels) return false;
      if (NewHeight != other.NewHeight) return false;
      if (NewWidth != other.NewWidth) return false;
      if (ShuffleImages != other.ShuffleImages) return false;
      if (ConcatDim != other.ConcatDim) return false;
      if (!object.Equals(Hdf5OutputParam, other.Hdf5OutputParam)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (Biasterm != false) hash ^= Biasterm.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (Pad != 0) hash ^= Pad.GetHashCode();
      if (Kernelsize != 0) hash ^= Kernelsize.GetHashCode();
      if (Group != 0) hash ^= Group.GetHashCode();
      if (Stride != 0) hash ^= Stride.GetHashCode();
      if (Pool != 0) hash ^= Pool.GetHashCode();
      if (DropoutRatio != 0F) hash ^= DropoutRatio.GetHashCode();
      if (LocalSize != 0) hash ^= LocalSize.GetHashCode();
      if (Alpha != 0F) hash ^= Alpha.GetHashCode();
      if (Beta != 0F) hash ^= Beta.GetHashCode();
      if (K != 0F) hash ^= K.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Meanfile.Length != 0) hash ^= Meanfile.GetHashCode();
      if (Batchsize != 0) hash ^= Batchsize.GetHashCode();
      if (Cropsize != 0) hash ^= Cropsize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      hash ^= blobs_.GetHashCode();
      hash ^= blobsLr_.GetHashCode();
      hash ^= weightDecay_.GetHashCode();
      if (RandSkip != 0) hash ^= RandSkip.GetHashCode();
      if (DetFgThreshold != 0F) hash ^= DetFgThreshold.GetHashCode();
      if (DetBgThreshold != 0F) hash ^= DetBgThreshold.GetHashCode();
      if (DetFgFraction != 0F) hash ^= DetFgFraction.GetHashCode();
      if (DetContextPad != 0) hash ^= DetContextPad.GetHashCode();
      if (DetCropMode.Length != 0) hash ^= DetCropMode.GetHashCode();
      if (NewNum != 0) hash ^= NewNum.GetHashCode();
      if (NewChannels != 0) hash ^= NewChannels.GetHashCode();
      if (NewHeight != 0) hash ^= NewHeight.GetHashCode();
      if (NewWidth != 0) hash ^= NewWidth.GetHashCode();
      if (ShuffleImages != false) hash ^= ShuffleImages.GetHashCode();
      if (ConcatDim != 0) hash ^= ConcatDim.GetHashCode();
      if (hdf5OutputParam_ != null) hash ^= Hdf5OutputParam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (NumOutput != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumOutput);
      }
      if (Biasterm != false) {
        output.WriteRawTag(32);
        output.WriteBool(Biasterm);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BiasFiller);
      }
      if (Pad != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Pad);
      }
      if (Kernelsize != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Kernelsize);
      }
      if (Group != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Group);
      }
      if (Stride != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Stride);
      }
      if (Pool != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Pool);
      }
      if (DropoutRatio != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DropoutRatio);
      }
      if (LocalSize != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(LocalSize);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Beta);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Scale);
      }
      if (Meanfile.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Meanfile);
      }
      if (Batchsize != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Batchsize);
      }
      if (Cropsize != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Cropsize);
      }
      if (Mirror != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Mirror);
      }
      if (K != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(K);
      }
      blobs_.WriteTo(output, _repeated_blobs_codec);
      blobsLr_.WriteTo(output, _repeated_blobsLr_codec);
      weightDecay_.WriteTo(output, _repeated_weightDecay_codec);
      if (RandSkip != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(RandSkip);
      }
      if (DetFgThreshold != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(DetFgThreshold);
      }
      if (DetBgThreshold != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(DetBgThreshold);
      }
      if (DetFgFraction != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(DetFgFraction);
      }
      if (DetContextPad != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(DetContextPad);
      }
      if (DetCropMode.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(DetCropMode);
      }
      if (NewNum != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(NewNum);
      }
      if (NewChannels != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(NewChannels);
      }
      if (NewHeight != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(NewHeight);
      }
      if (NewWidth != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(NewWidth);
      }
      if (ShuffleImages != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(ShuffleImages);
      }
      if (ConcatDim != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(ConcatDim);
      }
      if (hdf5OutputParam_ != null) {
        output.WriteRawTag(202, 62);
        output.WriteMessage(Hdf5OutputParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (Biasterm != false) {
        size += 1 + 1;
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (Pad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pad);
      }
      if (Kernelsize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kernelsize);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Group);
      }
      if (Stride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stride);
      }
      if (Pool != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pool);
      }
      if (DropoutRatio != 0F) {
        size += 1 + 4;
      }
      if (LocalSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalSize);
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (K != 0F) {
        size += 2 + 4;
      }
      if (Source.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Scale != 0F) {
        size += 2 + 4;
      }
      if (Meanfile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Meanfile);
      }
      if (Batchsize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Batchsize);
      }
      if (Cropsize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cropsize);
      }
      if (Mirror != false) {
        size += 2 + 1;
      }
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      size += blobsLr_.CalculateSize(_repeated_blobsLr_codec);
      size += weightDecay_.CalculateSize(_repeated_weightDecay_codec);
      if (RandSkip != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RandSkip);
      }
      if (DetFgThreshold != 0F) {
        size += 2 + 4;
      }
      if (DetBgThreshold != 0F) {
        size += 2 + 4;
      }
      if (DetFgFraction != 0F) {
        size += 2 + 4;
      }
      if (DetContextPad != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DetContextPad);
      }
      if (DetCropMode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DetCropMode);
      }
      if (NewNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewNum);
      }
      if (NewChannels != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewChannels);
      }
      if (NewHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewHeight);
      }
      if (NewWidth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewWidth);
      }
      if (ShuffleImages != false) {
        size += 2 + 1;
      }
      if (ConcatDim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ConcatDim);
      }
      if (hdf5OutputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hdf5OutputParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(V0LayerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.Biasterm != false) {
        Biasterm = other.Biasterm;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.Pad != 0) {
        Pad = other.Pad;
      }
      if (other.Kernelsize != 0) {
        Kernelsize = other.Kernelsize;
      }
      if (other.Group != 0) {
        Group = other.Group;
      }
      if (other.Stride != 0) {
        Stride = other.Stride;
      }
      if (other.Pool != 0) {
        Pool = other.Pool;
      }
      if (other.DropoutRatio != 0F) {
        DropoutRatio = other.DropoutRatio;
      }
      if (other.LocalSize != 0) {
        LocalSize = other.LocalSize;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Meanfile.Length != 0) {
        Meanfile = other.Meanfile;
      }
      if (other.Batchsize != 0) {
        Batchsize = other.Batchsize;
      }
      if (other.Cropsize != 0) {
        Cropsize = other.Cropsize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      blobs_.Add(other.blobs_);
      blobsLr_.Add(other.blobsLr_);
      weightDecay_.Add(other.weightDecay_);
      if (other.RandSkip != 0) {
        RandSkip = other.RandSkip;
      }
      if (other.DetFgThreshold != 0F) {
        DetFgThreshold = other.DetFgThreshold;
      }
      if (other.DetBgThreshold != 0F) {
        DetBgThreshold = other.DetBgThreshold;
      }
      if (other.DetFgFraction != 0F) {
        DetFgFraction = other.DetFgFraction;
      }
      if (other.DetContextPad != 0) {
        DetContextPad = other.DetContextPad;
      }
      if (other.DetCropMode.Length != 0) {
        DetCropMode = other.DetCropMode;
      }
      if (other.NewNum != 0) {
        NewNum = other.NewNum;
      }
      if (other.NewChannels != 0) {
        NewChannels = other.NewChannels;
      }
      if (other.NewHeight != 0) {
        NewHeight = other.NewHeight;
      }
      if (other.NewWidth != 0) {
        NewWidth = other.NewWidth;
      }
      if (other.ShuffleImages != false) {
        ShuffleImages = other.ShuffleImages;
      }
      if (other.ConcatDim != 0) {
        ConcatDim = other.ConcatDim;
      }
      if (other.hdf5OutputParam_ != null) {
        if (hdf5OutputParam_ == null) {
          hdf5OutputParam_ = new global::Apollo.Perception.Inference.HDF5OutputParameter();
        }
        Hdf5OutputParam.MergeFrom(other.Hdf5OutputParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 32: {
            Biasterm = input.ReadBool();
            break;
          }
          case 42: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 50: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 56: {
            Pad = input.ReadUInt32();
            break;
          }
          case 64: {
            Kernelsize = input.ReadUInt32();
            break;
          }
          case 72: {
            Group = input.ReadUInt32();
            break;
          }
          case 80: {
            Stride = input.ReadUInt32();
            break;
          }
          case 88: {
            pool_ = (global::Apollo.Perception.Inference.V0LayerParameter.Types.PoolMethod) input.ReadEnum();
            break;
          }
          case 101: {
            DropoutRatio = input.ReadFloat();
            break;
          }
          case 104: {
            LocalSize = input.ReadUInt32();
            break;
          }
          case 117: {
            Alpha = input.ReadFloat();
            break;
          }
          case 125: {
            Beta = input.ReadFloat();
            break;
          }
          case 130: {
            Source = input.ReadString();
            break;
          }
          case 141: {
            Scale = input.ReadFloat();
            break;
          }
          case 146: {
            Meanfile = input.ReadString();
            break;
          }
          case 152: {
            Batchsize = input.ReadUInt32();
            break;
          }
          case 160: {
            Cropsize = input.ReadUInt32();
            break;
          }
          case 168: {
            Mirror = input.ReadBool();
            break;
          }
          case 181: {
            K = input.ReadFloat();
            break;
          }
          case 402: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
          case 410:
          case 413: {
            blobsLr_.AddEntriesFrom(input, _repeated_blobsLr_codec);
            break;
          }
          case 418:
          case 421: {
            weightDecay_.AddEntriesFrom(input, _repeated_weightDecay_codec);
            break;
          }
          case 424: {
            RandSkip = input.ReadUInt32();
            break;
          }
          case 437: {
            DetFgThreshold = input.ReadFloat();
            break;
          }
          case 445: {
            DetBgThreshold = input.ReadFloat();
            break;
          }
          case 453: {
            DetFgFraction = input.ReadFloat();
            break;
          }
          case 464: {
            DetContextPad = input.ReadUInt32();
            break;
          }
          case 474: {
            DetCropMode = input.ReadString();
            break;
          }
          case 480: {
            NewNum = input.ReadInt32();
            break;
          }
          case 488: {
            NewChannels = input.ReadInt32();
            break;
          }
          case 496: {
            NewHeight = input.ReadInt32();
            break;
          }
          case 504: {
            NewWidth = input.ReadInt32();
            break;
          }
          case 512: {
            ShuffleImages = input.ReadBool();
            break;
          }
          case 520: {
            ConcatDim = input.ReadUInt32();
            break;
          }
          case 8010: {
            if (hdf5OutputParam_ == null) {
              hdf5OutputParam_ = new global::Apollo.Perception.Inference.HDF5OutputParameter();
            }
            input.ReadMessage(hdf5OutputParam_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the V0LayerParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PoolMethod {
        [pbr::OriginalName("MAX")] Max = 0,
        [pbr::OriginalName("AVE")] Ave = 1,
        [pbr::OriginalName("STOCHASTIC")] Stochastic = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Parametric ReLU described in K. He et al, Delving Deep into Rectifiers:
  /// Surpassing Human-Level Performance on ImageNet Classification, 2015.
  /// </summary>
  public sealed partial class PReLUParameter : pb::IMessage<PReLUParameter> {
    private static readonly pb::MessageParser<PReLUParameter> _parser = new pb::MessageParser<PReLUParameter>(() => new PReLUParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PReLUParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PReLUParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PReLUParameter(PReLUParameter other) : this() {
      Filler = other.filler_ != null ? other.Filler.Clone() : null;
      channelShared_ = other.channelShared_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PReLUParameter Clone() {
      return new PReLUParameter(this);
    }

    /// <summary>Field number for the "filler" field.</summary>
    public const int FillerFieldNumber = 1;
    private global::Apollo.Perception.Inference.FillerParameter filler_;
    /// <summary>
    /// Initial value of a_i. Default is a_i=0.25 for all i.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.FillerParameter Filler {
      get { return filler_; }
      set {
        filler_ = value;
      }
    }

    /// <summary>Field number for the "channel_shared" field.</summary>
    public const int ChannelSharedFieldNumber = 2;
    private bool channelShared_;
    /// <summary>
    /// Whether or not slope paramters are shared across channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChannelShared {
      get { return channelShared_; }
      set {
        channelShared_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PReLUParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PReLUParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Filler, other.Filler)) return false;
      if (ChannelShared != other.ChannelShared) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filler_ != null) hash ^= Filler.GetHashCode();
      if (ChannelShared != false) hash ^= ChannelShared.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filler_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Filler);
      }
      if (ChannelShared != false) {
        output.WriteRawTag(16);
        output.WriteBool(ChannelShared);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filler);
      }
      if (ChannelShared != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PReLUParameter other) {
      if (other == null) {
        return;
      }
      if (other.filler_ != null) {
        if (filler_ == null) {
          filler_ = new global::Apollo.Perception.Inference.FillerParameter();
        }
        Filler.MergeFrom(other.Filler);
      }
      if (other.ChannelShared != false) {
        ChannelShared = other.ChannelShared;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (filler_ == null) {
              filler_ = new global::Apollo.Perception.Inference.FillerParameter();
            }
            input.ReadMessage(filler_);
            break;
          }
          case 16: {
            ChannelShared = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaddingParameter : pb::IMessage<PaddingParameter> {
    private static readonly pb::MessageParser<PaddingParameter> _parser = new pb::MessageParser<PaddingParameter>(() => new PaddingParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaddingParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingParameter(PaddingParameter other) : this() {
      padT_ = other.padT_;
      padB_ = other.padB_;
      padL_ = other.padL_;
      padR_ = other.padR_;
      val_ = other.val_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingParameter Clone() {
      return new PaddingParameter(this);
    }

    /// <summary>Field number for the "pad_t" field.</summary>
    public const int PadTFieldNumber = 1;
    private uint padT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadT {
      get { return padT_; }
      set {
        padT_ = value;
      }
    }

    /// <summary>Field number for the "pad_b" field.</summary>
    public const int PadBFieldNumber = 2;
    private uint padB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadB {
      get { return padB_; }
      set {
        padB_ = value;
      }
    }

    /// <summary>Field number for the "pad_l" field.</summary>
    public const int PadLFieldNumber = 3;
    private uint padL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadL {
      get { return padL_; }
      set {
        padL_ = value;
      }
    }

    /// <summary>Field number for the "pad_r" field.</summary>
    public const int PadRFieldNumber = 4;
    private uint padR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadR {
      get { return padR_; }
      set {
        padR_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 5;
    private float val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaddingParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaddingParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PadT != other.PadT) return false;
      if (PadB != other.PadB) return false;
      if (PadL != other.PadL) return false;
      if (PadR != other.PadR) return false;
      if (Val != other.Val) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PadT != 0) hash ^= PadT.GetHashCode();
      if (PadB != 0) hash ^= PadB.GetHashCode();
      if (PadL != 0) hash ^= PadL.GetHashCode();
      if (PadR != 0) hash ^= PadR.GetHashCode();
      if (Val != 0F) hash ^= Val.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PadT != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PadT);
      }
      if (PadB != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PadB);
      }
      if (PadL != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PadL);
      }
      if (PadR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PadR);
      }
      if (Val != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Val);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PadT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadT);
      }
      if (PadB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadB);
      }
      if (PadL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadL);
      }
      if (PadR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadR);
      }
      if (Val != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaddingParameter other) {
      if (other == null) {
        return;
      }
      if (other.PadT != 0) {
        PadT = other.PadT;
      }
      if (other.PadB != 0) {
        PadB = other.PadB;
      }
      if (other.PadL != 0) {
        PadL = other.PadL;
      }
      if (other.PadR != 0) {
        PadR = other.PadR;
      }
      if (other.Val != 0F) {
        Val = other.Val;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PadT = input.ReadUInt32();
            break;
          }
          case 16: {
            PadB = input.ReadUInt32();
            break;
          }
          case 24: {
            PadL = input.ReadUInt32();
            break;
          }
          case 32: {
            PadR = input.ReadUInt32();
            break;
          }
          case 45: {
            Val = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YoloLossParameter : pb::IMessage<YoloLossParameter> {
    private static readonly pb::MessageParser<YoloLossParameter> _parser = new pb::MessageParser<YoloLossParameter>(() => new YoloLossParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YoloLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloLossParameter(YoloLossParameter other) : this() {
      regLossType_ = other.regLossType_;
      targetAxis_ = other.targetAxis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloLossParameter Clone() {
      return new YoloLossParameter(this);
    }

    /// <summary>Field number for the "reg_loss_type" field.</summary>
    public const int RegLossTypeFieldNumber = 1;
    private global::Apollo.Perception.Inference.YoloLossParameter.Types.RegLossType regLossType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.YoloLossParameter.Types.RegLossType RegLossType {
      get { return regLossType_; }
      set {
        regLossType_ = value;
      }
    }

    /// <summary>Field number for the "target_axis" field.</summary>
    public const int TargetAxisFieldNumber = 2;
    private int targetAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetAxis {
      get { return targetAxis_; }
      set {
        targetAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YoloLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YoloLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegLossType != other.RegLossType) return false;
      if (TargetAxis != other.TargetAxis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegLossType != 0) hash ^= RegLossType.GetHashCode();
      if (TargetAxis != 0) hash ^= TargetAxis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegLossType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RegLossType);
      }
      if (TargetAxis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetAxis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegLossType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RegLossType);
      }
      if (TargetAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetAxis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YoloLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.RegLossType != 0) {
        RegLossType = other.RegLossType;
      }
      if (other.TargetAxis != 0) {
        TargetAxis = other.TargetAxis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            regLossType_ = (global::Apollo.Perception.Inference.YoloLossParameter.Types.RegLossType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetAxis = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YoloLossParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RegLossType {
        [pbr::OriginalName("L2")] L2 = 0,
        [pbr::OriginalName("L1")] L1 = 1,
        [pbr::OriginalName("SMOOTH_L1")] SmoothL1 = 2,
      }

    }
    #endregion

  }

  public sealed partial class YoloDumpParameter : pb::IMessage<YoloDumpParameter> {
    private static readonly pb::MessageParser<YoloDumpParameter> _parser = new pb::MessageParser<YoloDumpParameter>(() => new YoloDumpParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YoloDumpParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloDumpParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloDumpParameter(YoloDumpParameter other) : this() {
      dumpDir_ = other.dumpDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloDumpParameter Clone() {
      return new YoloDumpParameter(this);
    }

    /// <summary>Field number for the "dump_dir" field.</summary>
    public const int DumpDirFieldNumber = 1;
    private string dumpDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DumpDir {
      get { return dumpDir_; }
      set {
        dumpDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YoloDumpParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YoloDumpParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DumpDir != other.DumpDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DumpDir.Length != 0) hash ^= DumpDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DumpDir.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DumpDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DumpDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DumpDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YoloDumpParameter other) {
      if (other == null) {
        return;
      }
      if (other.DumpDir.Length != 0) {
        DumpDir = other.DumpDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DumpDir = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YoloAnchorsParameter : pb::IMessage<YoloAnchorsParameter> {
    private static readonly pb::MessageParser<YoloAnchorsParameter> _parser = new pb::MessageParser<YoloAnchorsParameter>(() => new YoloAnchorsParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YoloAnchorsParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloAnchorsParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloAnchorsParameter(YoloAnchorsParameter other) : this() {
      anchorsFile_ = other.anchorsFile_;
      refW_ = other.refW_;
      refH_ = other.refH_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloAnchorsParameter Clone() {
      return new YoloAnchorsParameter(this);
    }

    /// <summary>Field number for the "anchors_file" field.</summary>
    public const int AnchorsFileFieldNumber = 1;
    private string anchorsFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnchorsFile {
      get { return anchorsFile_; }
      set {
        anchorsFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ref_w" field.</summary>
    public const int RefWFieldNumber = 2;
    private int refW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefW {
      get { return refW_; }
      set {
        refW_ = value;
      }
    }

    /// <summary>Field number for the "ref_h" field.</summary>
    public const int RefHFieldNumber = 3;
    private int refH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefH {
      get { return refH_; }
      set {
        refH_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YoloAnchorsParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YoloAnchorsParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnchorsFile != other.AnchorsFile) return false;
      if (RefW != other.RefW) return false;
      if (RefH != other.RefH) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnchorsFile.Length != 0) hash ^= AnchorsFile.GetHashCode();
      if (RefW != 0) hash ^= RefW.GetHashCode();
      if (RefH != 0) hash ^= RefH.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnchorsFile.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnchorsFile);
      }
      if (RefW != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefW);
      }
      if (RefH != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RefH);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnchorsFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnchorsFile);
      }
      if (RefW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefW);
      }
      if (RefH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefH);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YoloAnchorsParameter other) {
      if (other == null) {
        return;
      }
      if (other.AnchorsFile.Length != 0) {
        AnchorsFile = other.AnchorsFile;
      }
      if (other.RefW != 0) {
        RefW = other.RefW;
      }
      if (other.RefH != 0) {
        RefH = other.RefH;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnchorsFile = input.ReadString();
            break;
          }
          case 16: {
            RefW = input.ReadInt32();
            break;
          }
          case 24: {
            RefH = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DimensionStatistics : pb::IMessage<DimensionStatistics> {
    private static readonly pb::MessageParser<DimensionStatistics> _parser = new pb::MessageParser<DimensionStatistics>(() => new DimensionStatistics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DimensionStatistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionStatistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionStatistics(DimensionStatistics other) : this() {
      meanH_ = other.meanH_;
      meanW_ = other.meanW_;
      meanL_ = other.meanL_;
      stdH_ = other.stdH_;
      stdW_ = other.stdW_;
      stdL_ = other.stdL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionStatistics Clone() {
      return new DimensionStatistics(this);
    }

    /// <summary>Field number for the "mean_h" field.</summary>
    public const int MeanHFieldNumber = 1;
    private float meanH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanH {
      get { return meanH_; }
      set {
        meanH_ = value;
      }
    }

    /// <summary>Field number for the "mean_w" field.</summary>
    public const int MeanWFieldNumber = 2;
    private float meanW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanW {
      get { return meanW_; }
      set {
        meanW_ = value;
      }
    }

    /// <summary>Field number for the "mean_l" field.</summary>
    public const int MeanLFieldNumber = 3;
    private float meanL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanL {
      get { return meanL_; }
      set {
        meanL_ = value;
      }
    }

    /// <summary>Field number for the "std_h" field.</summary>
    public const int StdHFieldNumber = 4;
    private float stdH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StdH {
      get { return stdH_; }
      set {
        stdH_ = value;
      }
    }

    /// <summary>Field number for the "std_w" field.</summary>
    public const int StdWFieldNumber = 5;
    private float stdW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StdW {
      get { return stdW_; }
      set {
        stdW_ = value;
      }
    }

    /// <summary>Field number for the "std_l" field.</summary>
    public const int StdLFieldNumber = 6;
    private float stdL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StdL {
      get { return stdL_; }
      set {
        stdL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DimensionStatistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DimensionStatistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeanH != other.MeanH) return false;
      if (MeanW != other.MeanW) return false;
      if (MeanL != other.MeanL) return false;
      if (StdH != other.StdH) return false;
      if (StdW != other.StdW) return false;
      if (StdL != other.StdL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MeanH != 0F) hash ^= MeanH.GetHashCode();
      if (MeanW != 0F) hash ^= MeanW.GetHashCode();
      if (MeanL != 0F) hash ^= MeanL.GetHashCode();
      if (StdH != 0F) hash ^= StdH.GetHashCode();
      if (StdW != 0F) hash ^= StdW.GetHashCode();
      if (StdL != 0F) hash ^= StdL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeanH != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MeanH);
      }
      if (MeanW != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MeanW);
      }
      if (MeanL != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MeanL);
      }
      if (StdH != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StdH);
      }
      if (StdW != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StdW);
      }
      if (StdL != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StdL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeanH != 0F) {
        size += 1 + 4;
      }
      if (MeanW != 0F) {
        size += 1 + 4;
      }
      if (MeanL != 0F) {
        size += 1 + 4;
      }
      if (StdH != 0F) {
        size += 1 + 4;
      }
      if (StdW != 0F) {
        size += 1 + 4;
      }
      if (StdL != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DimensionStatistics other) {
      if (other == null) {
        return;
      }
      if (other.MeanH != 0F) {
        MeanH = other.MeanH;
      }
      if (other.MeanW != 0F) {
        MeanW = other.MeanW;
      }
      if (other.MeanL != 0F) {
        MeanL = other.MeanL;
      }
      if (other.StdH != 0F) {
        StdH = other.StdH;
      }
      if (other.StdW != 0F) {
        StdW = other.StdW;
      }
      if (other.StdL != 0F) {
        StdL = other.StdL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MeanH = input.ReadFloat();
            break;
          }
          case 21: {
            MeanW = input.ReadFloat();
            break;
          }
          case 29: {
            MeanL = input.ReadFloat();
            break;
          }
          case 37: {
            StdH = input.ReadFloat();
            break;
          }
          case 45: {
            StdW = input.ReadFloat();
            break;
          }
          case 53: {
            StdL = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YoloTargetParameter : pb::IMessage<YoloTargetParameter> {
    private static readonly pb::MessageParser<YoloTargetParameter> _parser = new pb::MessageParser<YoloTargetParameter>(() => new YoloTargetParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YoloTargetParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloTargetParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloTargetParameter(YoloTargetParameter other) : this() {
      negRoisRatio_ = other.negRoisRatio_;
      ignThreshold_ = other.ignThreshold_;
      negThreshold_ = other.negThreshold_;
      minHeight_ = other.minHeight_;
      biasMatch_ = other.biasMatch_;
      rescore_ = other.rescore_;
      oriCyc_ = other.oriCyc_;
      objWeight_ = other.objWeight_;
      noobjWeight_ = other.noobjWeight_;
      numClasses_ = other.numClasses_;
      dimensionStatistics_ = other.dimensionStatistics_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloTargetParameter Clone() {
      return new YoloTargetParameter(this);
    }

    /// <summary>Field number for the "neg_rois_ratio" field.</summary>
    public const int NegRoisRatioFieldNumber = 1;
    private float negRoisRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegRoisRatio {
      get { return negRoisRatio_; }
      set {
        negRoisRatio_ = value;
      }
    }

    /// <summary>Field number for the "ign_threshold" field.</summary>
    public const int IgnThresholdFieldNumber = 2;
    private float ignThreshold_;
    /// <summary>
    /// ignore iou threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IgnThreshold {
      get { return ignThreshold_; }
      set {
        ignThreshold_ = value;
      }
    }

    /// <summary>Field number for the "neg_threshold" field.</summary>
    public const int NegThresholdFieldNumber = 3;
    private float negThreshold_;
    /// <summary>
    /// negative iou threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegThreshold {
      get { return negThreshold_; }
      set {
        negThreshold_ = value;
      }
    }

    /// <summary>Field number for the "min_height" field.</summary>
    public const int MinHeightFieldNumber = 4;
    private float minHeight_;
    /// <summary>
    /// min height for neg roi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinHeight {
      get { return minHeight_; }
      set {
        minHeight_ = value;
      }
    }

    /// <summary>Field number for the "bias_match" field.</summary>
    public const int BiasMatchFieldNumber = 5;
    private bool biasMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasMatch {
      get { return biasMatch_; }
      set {
        biasMatch_ = value;
      }
    }

    /// <summary>Field number for the "rescore" field.</summary>
    public const int RescoreFieldNumber = 6;
    private bool rescore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rescore {
      get { return rescore_; }
      set {
        rescore_ = value;
      }
    }

    /// <summary>Field number for the "ori_cyc" field.</summary>
    public const int OriCycFieldNumber = 7;
    private int oriCyc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriCyc {
      get { return oriCyc_; }
      set {
        oriCyc_ = value;
      }
    }

    /// <summary>Field number for the "obj_weight" field.</summary>
    public const int ObjWeightFieldNumber = 8;
    private float objWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ObjWeight {
      get { return objWeight_; }
      set {
        objWeight_ = value;
      }
    }

    /// <summary>Field number for the "noobj_weight" field.</summary>
    public const int NoobjWeightFieldNumber = 9;
    private float noobjWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoobjWeight {
      get { return noobjWeight_; }
      set {
        noobjWeight_ = value;
      }
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 10;
    private int numClasses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "dimension_statistics" field.</summary>
    public const int DimensionStatisticsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.DimensionStatistics> _repeated_dimensionStatistics_codec
        = pb::FieldCodec.ForMessage(90, global::Apollo.Perception.Inference.DimensionStatistics.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.DimensionStatistics> dimensionStatistics_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.DimensionStatistics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.DimensionStatistics> DimensionStatistics {
      get { return dimensionStatistics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YoloTargetParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YoloTargetParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NegRoisRatio != other.NegRoisRatio) return false;
      if (IgnThreshold != other.IgnThreshold) return false;
      if (NegThreshold != other.NegThreshold) return false;
      if (MinHeight != other.MinHeight) return false;
      if (BiasMatch != other.BiasMatch) return false;
      if (Rescore != other.Rescore) return false;
      if (OriCyc != other.OriCyc) return false;
      if (ObjWeight != other.ObjWeight) return false;
      if (NoobjWeight != other.NoobjWeight) return false;
      if (NumClasses != other.NumClasses) return false;
      if(!dimensionStatistics_.Equals(other.dimensionStatistics_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NegRoisRatio != 0F) hash ^= NegRoisRatio.GetHashCode();
      if (IgnThreshold != 0F) hash ^= IgnThreshold.GetHashCode();
      if (NegThreshold != 0F) hash ^= NegThreshold.GetHashCode();
      if (MinHeight != 0F) hash ^= MinHeight.GetHashCode();
      if (BiasMatch != false) hash ^= BiasMatch.GetHashCode();
      if (Rescore != false) hash ^= Rescore.GetHashCode();
      if (OriCyc != 0) hash ^= OriCyc.GetHashCode();
      if (ObjWeight != 0F) hash ^= ObjWeight.GetHashCode();
      if (NoobjWeight != 0F) hash ^= NoobjWeight.GetHashCode();
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      hash ^= dimensionStatistics_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NegRoisRatio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(NegRoisRatio);
      }
      if (IgnThreshold != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(IgnThreshold);
      }
      if (NegThreshold != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(NegThreshold);
      }
      if (MinHeight != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinHeight);
      }
      if (BiasMatch != false) {
        output.WriteRawTag(40);
        output.WriteBool(BiasMatch);
      }
      if (Rescore != false) {
        output.WriteRawTag(48);
        output.WriteBool(Rescore);
      }
      if (OriCyc != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriCyc);
      }
      if (ObjWeight != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ObjWeight);
      }
      if (NoobjWeight != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(NoobjWeight);
      }
      if (NumClasses != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NumClasses);
      }
      dimensionStatistics_.WriteTo(output, _repeated_dimensionStatistics_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NegRoisRatio != 0F) {
        size += 1 + 4;
      }
      if (IgnThreshold != 0F) {
        size += 1 + 4;
      }
      if (NegThreshold != 0F) {
        size += 1 + 4;
      }
      if (MinHeight != 0F) {
        size += 1 + 4;
      }
      if (BiasMatch != false) {
        size += 1 + 1;
      }
      if (Rescore != false) {
        size += 1 + 1;
      }
      if (OriCyc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriCyc);
      }
      if (ObjWeight != 0F) {
        size += 1 + 4;
      }
      if (NoobjWeight != 0F) {
        size += 1 + 4;
      }
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumClasses);
      }
      size += dimensionStatistics_.CalculateSize(_repeated_dimensionStatistics_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YoloTargetParameter other) {
      if (other == null) {
        return;
      }
      if (other.NegRoisRatio != 0F) {
        NegRoisRatio = other.NegRoisRatio;
      }
      if (other.IgnThreshold != 0F) {
        IgnThreshold = other.IgnThreshold;
      }
      if (other.NegThreshold != 0F) {
        NegThreshold = other.NegThreshold;
      }
      if (other.MinHeight != 0F) {
        MinHeight = other.MinHeight;
      }
      if (other.BiasMatch != false) {
        BiasMatch = other.BiasMatch;
      }
      if (other.Rescore != false) {
        Rescore = other.Rescore;
      }
      if (other.OriCyc != 0) {
        OriCyc = other.OriCyc;
      }
      if (other.ObjWeight != 0F) {
        ObjWeight = other.ObjWeight;
      }
      if (other.NoobjWeight != 0F) {
        NoobjWeight = other.NoobjWeight;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      dimensionStatistics_.Add(other.dimensionStatistics_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            NegRoisRatio = input.ReadFloat();
            break;
          }
          case 21: {
            IgnThreshold = input.ReadFloat();
            break;
          }
          case 29: {
            NegThreshold = input.ReadFloat();
            break;
          }
          case 37: {
            MinHeight = input.ReadFloat();
            break;
          }
          case 40: {
            BiasMatch = input.ReadBool();
            break;
          }
          case 48: {
            Rescore = input.ReadBool();
            break;
          }
          case 56: {
            OriCyc = input.ReadInt32();
            break;
          }
          case 69: {
            ObjWeight = input.ReadFloat();
            break;
          }
          case 77: {
            NoobjWeight = input.ReadFloat();
            break;
          }
          case 80: {
            NumClasses = input.ReadInt32();
            break;
          }
          case 90: {
            dimensionStatistics_.AddEntriesFrom(input, _repeated_dimensionStatistics_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionProposalParameter : pb::IMessage<RegionProposalParameter> {
    private static readonly pb::MessageParser<RegionProposalParameter> _parser = new pb::MessageParser<RegionProposalParameter>(() => new RegionProposalParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionProposalParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionProposalParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionProposalParameter(RegionProposalParameter other) : this() {
      anchorbox_ = other.anchorbox_.Clone();
      thresholds_ = other.thresholds_.Clone();
      orientationScale_ = other.orientationScale_;
      objectScale_ = other.objectScale_;
      noobjectScale_ = other.noobjectScale_;
      classScale_ = other.classScale_;
      coordScale_ = other.coordScale_;
      jitter_ = other.jitter_;
      bias_ = other.bias_;
      rescore_ = other.rescore_;
      numClasses_ = other.numClasses_;
      biasMatch_ = other.biasMatch_;
      threshold_ = other.threshold_;
      trickyIter_ = other.trickyIter_;
      NmsParam = other.nmsParam_ != null ? other.NmsParam.Clone() : null;
      keepTopK_ = other.keepTopK_;
      posThreshold_ = other.posThreshold_;
      negThreshold_ = other.negThreshold_;
      negRatio_ = other.negRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionProposalParameter Clone() {
      return new RegionProposalParameter(this);
    }

    /// <summary>Field number for the "anchorbox" field.</summary>
    public const int AnchorboxFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.AnchorBox> _repeated_anchorbox_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Inference.AnchorBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox> anchorbox_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox> Anchorbox {
      get { return anchorbox_; }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_thresholds_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> thresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Thresholds {
      get { return thresholds_; }
    }

    /// <summary>Field number for the "orientation_scale" field.</summary>
    public const int OrientationScaleFieldNumber = 14;
    private float orientationScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OrientationScale {
      get { return orientationScale_; }
      set {
        orientationScale_ = value;
      }
    }

    /// <summary>Field number for the "object_scale" field.</summary>
    public const int ObjectScaleFieldNumber = 3;
    private uint objectScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectScale {
      get { return objectScale_; }
      set {
        objectScale_ = value;
      }
    }

    /// <summary>Field number for the "noobject_scale" field.</summary>
    public const int NoobjectScaleFieldNumber = 4;
    private uint noobjectScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoobjectScale {
      get { return noobjectScale_; }
      set {
        noobjectScale_ = value;
      }
    }

    /// <summary>Field number for the "class_scale" field.</summary>
    public const int ClassScaleFieldNumber = 5;
    private uint classScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClassScale {
      get { return classScale_; }
      set {
        classScale_ = value;
      }
    }

    /// <summary>Field number for the "coord_scale" field.</summary>
    public const int CoordScaleFieldNumber = 6;
    private uint coordScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoordScale {
      get { return coordScale_; }
      set {
        coordScale_ = value;
      }
    }

    /// <summary>Field number for the "jitter" field.</summary>
    public const int JitterFieldNumber = 7;
    private float jitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Jitter {
      get { return jitter_; }
      set {
        jitter_ = value;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 8;
    private float bias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    /// <summary>Field number for the "rescore" field.</summary>
    public const int RescoreFieldNumber = 9;
    private bool rescore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rescore {
      get { return rescore_; }
      set {
        rescore_ = value;
      }
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 10;
    private uint numClasses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "bias_match" field.</summary>
    public const int BiasMatchFieldNumber = 11;
    private bool biasMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasMatch {
      get { return biasMatch_; }
      set {
        biasMatch_ = value;
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 12;
    private float threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "tricky_iter" field.</summary>
    public const int TrickyIterFieldNumber = 13;
    private uint trickyIter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrickyIter {
      get { return trickyIter_; }
      set {
        trickyIter_ = value;
      }
    }

    /// <summary>Field number for the "nms_param" field.</summary>
    public const int NmsParamFieldNumber = 15;
    private global::Apollo.Perception.Inference.NonMaximumSuppressionParameter nmsParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Inference.NonMaximumSuppressionParameter NmsParam {
      get { return nmsParam_; }
      set {
        nmsParam_ = value;
      }
    }

    /// <summary>Field number for the "keep_top_k" field.</summary>
    public const int KeepTopKFieldNumber = 16;
    private int keepTopK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepTopK {
      get { return keepTopK_; }
      set {
        keepTopK_ = value;
      }
    }

    /// <summary>Field number for the "pos_threshold" field.</summary>
    public const int PosThresholdFieldNumber = 17;
    private float posThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosThreshold {
      get { return posThreshold_; }
      set {
        posThreshold_ = value;
      }
    }

    /// <summary>Field number for the "neg_threshold" field.</summary>
    public const int NegThresholdFieldNumber = 18;
    private float negThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegThreshold {
      get { return negThreshold_; }
      set {
        negThreshold_ = value;
      }
    }

    /// <summary>Field number for the "neg_ratio" field.</summary>
    public const int NegRatioFieldNumber = 19;
    private int negRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NegRatio {
      get { return negRatio_; }
      set {
        negRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionProposalParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionProposalParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!anchorbox_.Equals(other.anchorbox_)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      if (OrientationScale != other.OrientationScale) return false;
      if (ObjectScale != other.ObjectScale) return false;
      if (NoobjectScale != other.NoobjectScale) return false;
      if (ClassScale != other.ClassScale) return false;
      if (CoordScale != other.CoordScale) return false;
      if (Jitter != other.Jitter) return false;
      if (Bias != other.Bias) return false;
      if (Rescore != other.Rescore) return false;
      if (NumClasses != other.NumClasses) return false;
      if (BiasMatch != other.BiasMatch) return false;
      if (Threshold != other.Threshold) return false;
      if (TrickyIter != other.TrickyIter) return false;
      if (!object.Equals(NmsParam, other.NmsParam)) return false;
      if (KeepTopK != other.KeepTopK) return false;
      if (PosThreshold != other.PosThreshold) return false;
      if (NegThreshold != other.NegThreshold) return false;
      if (NegRatio != other.NegRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= anchorbox_.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      if (OrientationScale != 0F) hash ^= OrientationScale.GetHashCode();
      if (ObjectScale != 0) hash ^= ObjectScale.GetHashCode();
      if (NoobjectScale != 0) hash ^= NoobjectScale.GetHashCode();
      if (ClassScale != 0) hash ^= ClassScale.GetHashCode();
      if (CoordScale != 0) hash ^= CoordScale.GetHashCode();
      if (Jitter != 0F) hash ^= Jitter.GetHashCode();
      if (Bias != 0F) hash ^= Bias.GetHashCode();
      if (Rescore != false) hash ^= Rescore.GetHashCode();
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      if (BiasMatch != false) hash ^= BiasMatch.GetHashCode();
      if (Threshold != 0F) hash ^= Threshold.GetHashCode();
      if (TrickyIter != 0) hash ^= TrickyIter.GetHashCode();
      if (nmsParam_ != null) hash ^= NmsParam.GetHashCode();
      if (KeepTopK != 0) hash ^= KeepTopK.GetHashCode();
      if (PosThreshold != 0F) hash ^= PosThreshold.GetHashCode();
      if (NegThreshold != 0F) hash ^= NegThreshold.GetHashCode();
      if (NegRatio != 0) hash ^= NegRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      anchorbox_.WriteTo(output, _repeated_anchorbox_codec);
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      if (ObjectScale != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ObjectScale);
      }
      if (NoobjectScale != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NoobjectScale);
      }
      if (ClassScale != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ClassScale);
      }
      if (CoordScale != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CoordScale);
      }
      if (Jitter != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Jitter);
      }
      if (Bias != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Bias);
      }
      if (Rescore != false) {
        output.WriteRawTag(72);
        output.WriteBool(Rescore);
      }
      if (NumClasses != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NumClasses);
      }
      if (BiasMatch != false) {
        output.WriteRawTag(88);
        output.WriteBool(BiasMatch);
      }
      if (Threshold != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Threshold);
      }
      if (TrickyIter != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(TrickyIter);
      }
      if (OrientationScale != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(OrientationScale);
      }
      if (nmsParam_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(NmsParam);
      }
      if (KeepTopK != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(KeepTopK);
      }
      if (PosThreshold != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(PosThreshold);
      }
      if (NegThreshold != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(NegThreshold);
      }
      if (NegRatio != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NegRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += anchorbox_.CalculateSize(_repeated_anchorbox_codec);
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      if (OrientationScale != 0F) {
        size += 1 + 4;
      }
      if (ObjectScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectScale);
      }
      if (NoobjectScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoobjectScale);
      }
      if (ClassScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClassScale);
      }
      if (CoordScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoordScale);
      }
      if (Jitter != 0F) {
        size += 1 + 4;
      }
      if (Bias != 0F) {
        size += 1 + 4;
      }
      if (Rescore != false) {
        size += 1 + 1;
      }
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumClasses);
      }
      if (BiasMatch != false) {
        size += 1 + 1;
      }
      if (Threshold != 0F) {
        size += 1 + 4;
      }
      if (TrickyIter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrickyIter);
      }
      if (nmsParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NmsParam);
      }
      if (KeepTopK != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KeepTopK);
      }
      if (PosThreshold != 0F) {
        size += 2 + 4;
      }
      if (NegThreshold != 0F) {
        size += 2 + 4;
      }
      if (NegRatio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NegRatio);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionProposalParameter other) {
      if (other == null) {
        return;
      }
      anchorbox_.Add(other.anchorbox_);
      thresholds_.Add(other.thresholds_);
      if (other.OrientationScale != 0F) {
        OrientationScale = other.OrientationScale;
      }
      if (other.ObjectScale != 0) {
        ObjectScale = other.ObjectScale;
      }
      if (other.NoobjectScale != 0) {
        NoobjectScale = other.NoobjectScale;
      }
      if (other.ClassScale != 0) {
        ClassScale = other.ClassScale;
      }
      if (other.CoordScale != 0) {
        CoordScale = other.CoordScale;
      }
      if (other.Jitter != 0F) {
        Jitter = other.Jitter;
      }
      if (other.Bias != 0F) {
        Bias = other.Bias;
      }
      if (other.Rescore != false) {
        Rescore = other.Rescore;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      if (other.BiasMatch != false) {
        BiasMatch = other.BiasMatch;
      }
      if (other.Threshold != 0F) {
        Threshold = other.Threshold;
      }
      if (other.TrickyIter != 0) {
        TrickyIter = other.TrickyIter;
      }
      if (other.nmsParam_ != null) {
        if (nmsParam_ == null) {
          nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
        }
        NmsParam.MergeFrom(other.NmsParam);
      }
      if (other.KeepTopK != 0) {
        KeepTopK = other.KeepTopK;
      }
      if (other.PosThreshold != 0F) {
        PosThreshold = other.PosThreshold;
      }
      if (other.NegThreshold != 0F) {
        NegThreshold = other.NegThreshold;
      }
      if (other.NegRatio != 0) {
        NegRatio = other.NegRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            anchorbox_.AddEntriesFrom(input, _repeated_anchorbox_codec);
            break;
          }
          case 18:
          case 21: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
          case 24: {
            ObjectScale = input.ReadUInt32();
            break;
          }
          case 32: {
            NoobjectScale = input.ReadUInt32();
            break;
          }
          case 40: {
            ClassScale = input.ReadUInt32();
            break;
          }
          case 48: {
            CoordScale = input.ReadUInt32();
            break;
          }
          case 61: {
            Jitter = input.ReadFloat();
            break;
          }
          case 69: {
            Bias = input.ReadFloat();
            break;
          }
          case 72: {
            Rescore = input.ReadBool();
            break;
          }
          case 80: {
            NumClasses = input.ReadUInt32();
            break;
          }
          case 88: {
            BiasMatch = input.ReadBool();
            break;
          }
          case 101: {
            Threshold = input.ReadFloat();
            break;
          }
          case 104: {
            TrickyIter = input.ReadUInt32();
            break;
          }
          case 117: {
            OrientationScale = input.ReadFloat();
            break;
          }
          case 122: {
            if (nmsParam_ == null) {
              nmsParam_ = new global::Apollo.Perception.Inference.NonMaximumSuppressionParameter();
            }
            input.ReadMessage(nmsParam_);
            break;
          }
          case 128: {
            KeepTopK = input.ReadInt32();
            break;
          }
          case 141: {
            PosThreshold = input.ReadFloat();
            break;
          }
          case 149: {
            NegThreshold = input.ReadFloat();
            break;
          }
          case 152: {
            NegRatio = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionParameter : pb::IMessage<RegionParameter> {
    private static readonly pb::MessageParser<RegionParameter> _parser = new pb::MessageParser<RegionParameter>(() => new RegionParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionParameter(RegionParameter other) : this() {
      anchorbox_ = other.anchorbox_.Clone();
      thresholds_ = other.thresholds_.Clone();
      orientationScale_ = other.orientationScale_;
      dimensionScale_ = other.dimensionScale_;
      frontScale_ = other.frontScale_;
      rearScale_ = other.rearScale_;
      objectScale_ = other.objectScale_;
      noobjectScale_ = other.noobjectScale_;
      classScale_ = other.classScale_;
      coordScale_ = other.coordScale_;
      jitter_ = other.jitter_;
      bias_ = other.bias_;
      rescore_ = other.rescore_;
      numClasses_ = other.numClasses_;
      biasMatch_ = other.biasMatch_;
      threshold_ = other.threshold_;
      trickyIter_ = other.trickyIter_;
      useL1Loss_ = other.useL1Loss_;
      useTwiceSoftmax_ = other.useTwiceSoftmax_;
      isAnchorNormalized_ = other.isAnchorNormalized_;
      oriEnable_ = other.oriEnable_.Clone();
      anchorfile_ = other.anchorfile_;
      useSideBoxV2_ = other.useSideBoxV2_;
      useSideBoxV3_ = other.useSideBoxV3_;
      oriCycle_ = other.oriCycle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionParameter Clone() {
      return new RegionParameter(this);
    }

    /// <summary>Field number for the "anchorbox" field.</summary>
    public const int AnchorboxFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Inference.AnchorBox> _repeated_anchorbox_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Inference.AnchorBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox> anchorbox_ = new pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Inference.AnchorBox> Anchorbox {
      get { return anchorbox_; }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_thresholds_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> thresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Thresholds {
      get { return thresholds_; }
    }

    /// <summary>Field number for the "orientation_scale" field.</summary>
    public const int OrientationScaleFieldNumber = 14;
    private float orientationScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OrientationScale {
      get { return orientationScale_; }
      set {
        orientationScale_ = value;
      }
    }

    /// <summary>Field number for the "dimension_scale" field.</summary>
    public const int DimensionScaleFieldNumber = 15;
    private float dimensionScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DimensionScale {
      get { return dimensionScale_; }
      set {
        dimensionScale_ = value;
      }
    }

    /// <summary>Field number for the "front_scale" field.</summary>
    public const int FrontScaleFieldNumber = 19;
    private float frontScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrontScale {
      get { return frontScale_; }
      set {
        frontScale_ = value;
      }
    }

    /// <summary>Field number for the "rear_scale" field.</summary>
    public const int RearScaleFieldNumber = 20;
    private float rearScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RearScale {
      get { return rearScale_; }
      set {
        rearScale_ = value;
      }
    }

    /// <summary>Field number for the "object_scale" field.</summary>
    public const int ObjectScaleFieldNumber = 3;
    private uint objectScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectScale {
      get { return objectScale_; }
      set {
        objectScale_ = value;
      }
    }

    /// <summary>Field number for the "noobject_scale" field.</summary>
    public const int NoobjectScaleFieldNumber = 4;
    private uint noobjectScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoobjectScale {
      get { return noobjectScale_; }
      set {
        noobjectScale_ = value;
      }
    }

    /// <summary>Field number for the "class_scale" field.</summary>
    public const int ClassScaleFieldNumber = 5;
    private float classScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ClassScale {
      get { return classScale_; }
      set {
        classScale_ = value;
      }
    }

    /// <summary>Field number for the "coord_scale" field.</summary>
    public const int CoordScaleFieldNumber = 6;
    private uint coordScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoordScale {
      get { return coordScale_; }
      set {
        coordScale_ = value;
      }
    }

    /// <summary>Field number for the "jitter" field.</summary>
    public const int JitterFieldNumber = 7;
    private float jitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Jitter {
      get { return jitter_; }
      set {
        jitter_ = value;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 8;
    private float bias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    /// <summary>Field number for the "rescore" field.</summary>
    public const int RescoreFieldNumber = 9;
    private bool rescore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rescore {
      get { return rescore_; }
      set {
        rescore_ = value;
      }
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 10;
    private uint numClasses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "bias_match" field.</summary>
    public const int BiasMatchFieldNumber = 11;
    private bool biasMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasMatch {
      get { return biasMatch_; }
      set {
        biasMatch_ = value;
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 12;
    private float threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "tricky_iter" field.</summary>
    public const int TrickyIterFieldNumber = 13;
    private uint trickyIter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrickyIter {
      get { return trickyIter_; }
      set {
        trickyIter_ = value;
      }
    }

    /// <summary>Field number for the "use_l1_loss" field.</summary>
    public const int UseL1LossFieldNumber = 16;
    private bool useL1Loss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseL1Loss {
      get { return useL1Loss_; }
      set {
        useL1Loss_ = value;
      }
    }

    /// <summary>Field number for the "use_twice_softmax" field.</summary>
    public const int UseTwiceSoftmaxFieldNumber = 17;
    private bool useTwiceSoftmax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseTwiceSoftmax {
      get { return useTwiceSoftmax_; }
      set {
        useTwiceSoftmax_ = value;
      }
    }

    /// <summary>Field number for the "is_anchor_normalized" field.</summary>
    public const int IsAnchorNormalizedFieldNumber = 18;
    private bool isAnchorNormalized_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnchorNormalized {
      get { return isAnchorNormalized_; }
      set {
        isAnchorNormalized_ = value;
      }
    }

    /// <summary>Field number for the "ori_enable" field.</summary>
    public const int OriEnableFieldNumber = 21;
    private static readonly pb::FieldCodec<bool> _repeated_oriEnable_codec
        = pb::FieldCodec.ForBool(170);
    private readonly pbc::RepeatedField<bool> oriEnable_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> OriEnable {
      get { return oriEnable_; }
    }

    /// <summary>Field number for the "anchorfile" field.</summary>
    public const int AnchorfileFieldNumber = 22;
    private string anchorfile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Anchorfile {
      get { return anchorfile_; }
      set {
        anchorfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_side_box_v2" field.</summary>
    public const int UseSideBoxV2FieldNumber = 23;
    private bool useSideBoxV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSideBoxV2 {
      get { return useSideBoxV2_; }
      set {
        useSideBoxV2_ = value;
      }
    }

    /// <summary>Field number for the "use_side_box_v3" field.</summary>
    public const int UseSideBoxV3FieldNumber = 24;
    private bool useSideBoxV3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSideBoxV3 {
      get { return useSideBoxV3_; }
      set {
        useSideBoxV3_ = value;
      }
    }

    /// <summary>Field number for the "ori_cycle" field.</summary>
    public const int OriCycleFieldNumber = 25;
    private int oriCycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriCycle {
      get { return oriCycle_; }
      set {
        oriCycle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!anchorbox_.Equals(other.anchorbox_)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      if (OrientationScale != other.OrientationScale) return false;
      if (DimensionScale != other.DimensionScale) return false;
      if (FrontScale != other.FrontScale) return false;
      if (RearScale != other.RearScale) return false;
      if (ObjectScale != other.ObjectScale) return false;
      if (NoobjectScale != other.NoobjectScale) return false;
      if (ClassScale != other.ClassScale) return false;
      if (CoordScale != other.CoordScale) return false;
      if (Jitter != other.Jitter) return false;
      if (Bias != other.Bias) return false;
      if (Rescore != other.Rescore) return false;
      if (NumClasses != other.NumClasses) return false;
      if (BiasMatch != other.BiasMatch) return false;
      if (Threshold != other.Threshold) return false;
      if (TrickyIter != other.TrickyIter) return false;
      if (UseL1Loss != other.UseL1Loss) return false;
      if (UseTwiceSoftmax != other.UseTwiceSoftmax) return false;
      if (IsAnchorNormalized != other.IsAnchorNormalized) return false;
      if(!oriEnable_.Equals(other.oriEnable_)) return false;
      if (Anchorfile != other.Anchorfile) return false;
      if (UseSideBoxV2 != other.UseSideBoxV2) return false;
      if (UseSideBoxV3 != other.UseSideBoxV3) return false;
      if (OriCycle != other.OriCycle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= anchorbox_.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      if (OrientationScale != 0F) hash ^= OrientationScale.GetHashCode();
      if (DimensionScale != 0F) hash ^= DimensionScale.GetHashCode();
      if (FrontScale != 0F) hash ^= FrontScale.GetHashCode();
      if (RearScale != 0F) hash ^= RearScale.GetHashCode();
      if (ObjectScale != 0) hash ^= ObjectScale.GetHashCode();
      if (NoobjectScale != 0) hash ^= NoobjectScale.GetHashCode();
      if (ClassScale != 0F) hash ^= ClassScale.GetHashCode();
      if (CoordScale != 0) hash ^= CoordScale.GetHashCode();
      if (Jitter != 0F) hash ^= Jitter.GetHashCode();
      if (Bias != 0F) hash ^= Bias.GetHashCode();
      if (Rescore != false) hash ^= Rescore.GetHashCode();
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      if (BiasMatch != false) hash ^= BiasMatch.GetHashCode();
      if (Threshold != 0F) hash ^= Threshold.GetHashCode();
      if (TrickyIter != 0) hash ^= TrickyIter.GetHashCode();
      if (UseL1Loss != false) hash ^= UseL1Loss.GetHashCode();
      if (UseTwiceSoftmax != false) hash ^= UseTwiceSoftmax.GetHashCode();
      if (IsAnchorNormalized != false) hash ^= IsAnchorNormalized.GetHashCode();
      hash ^= oriEnable_.GetHashCode();
      if (Anchorfile.Length != 0) hash ^= Anchorfile.GetHashCode();
      if (UseSideBoxV2 != false) hash ^= UseSideBoxV2.GetHashCode();
      if (UseSideBoxV3 != false) hash ^= UseSideBoxV3.GetHashCode();
      if (OriCycle != 0) hash ^= OriCycle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      anchorbox_.WriteTo(output, _repeated_anchorbox_codec);
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      if (ObjectScale != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ObjectScale);
      }
      if (NoobjectScale != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NoobjectScale);
      }
      if (ClassScale != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ClassScale);
      }
      if (CoordScale != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CoordScale);
      }
      if (Jitter != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Jitter);
      }
      if (Bias != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Bias);
      }
      if (Rescore != false) {
        output.WriteRawTag(72);
        output.WriteBool(Rescore);
      }
      if (NumClasses != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NumClasses);
      }
      if (BiasMatch != false) {
        output.WriteRawTag(88);
        output.WriteBool(BiasMatch);
      }
      if (Threshold != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Threshold);
      }
      if (TrickyIter != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(TrickyIter);
      }
      if (OrientationScale != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(OrientationScale);
      }
      if (DimensionScale != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(DimensionScale);
      }
      if (UseL1Loss != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(UseL1Loss);
      }
      if (UseTwiceSoftmax != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(UseTwiceSoftmax);
      }
      if (IsAnchorNormalized != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAnchorNormalized);
      }
      if (FrontScale != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(FrontScale);
      }
      if (RearScale != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(RearScale);
      }
      oriEnable_.WriteTo(output, _repeated_oriEnable_codec);
      if (Anchorfile.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Anchorfile);
      }
      if (UseSideBoxV2 != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(UseSideBoxV2);
      }
      if (UseSideBoxV3 != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(UseSideBoxV3);
      }
      if (OriCycle != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(OriCycle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += anchorbox_.CalculateSize(_repeated_anchorbox_codec);
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      if (OrientationScale != 0F) {
        size += 1 + 4;
      }
      if (DimensionScale != 0F) {
        size += 1 + 4;
      }
      if (FrontScale != 0F) {
        size += 2 + 4;
      }
      if (RearScale != 0F) {
        size += 2 + 4;
      }
      if (ObjectScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectScale);
      }
      if (NoobjectScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoobjectScale);
      }
      if (ClassScale != 0F) {
        size += 1 + 4;
      }
      if (CoordScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoordScale);
      }
      if (Jitter != 0F) {
        size += 1 + 4;
      }
      if (Bias != 0F) {
        size += 1 + 4;
      }
      if (Rescore != false) {
        size += 1 + 1;
      }
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumClasses);
      }
      if (BiasMatch != false) {
        size += 1 + 1;
      }
      if (Threshold != 0F) {
        size += 1 + 4;
      }
      if (TrickyIter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrickyIter);
      }
      if (UseL1Loss != false) {
        size += 2 + 1;
      }
      if (UseTwiceSoftmax != false) {
        size += 2 + 1;
      }
      if (IsAnchorNormalized != false) {
        size += 2 + 1;
      }
      size += oriEnable_.CalculateSize(_repeated_oriEnable_codec);
      if (Anchorfile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Anchorfile);
      }
      if (UseSideBoxV2 != false) {
        size += 2 + 1;
      }
      if (UseSideBoxV3 != false) {
        size += 2 + 1;
      }
      if (OriCycle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriCycle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionParameter other) {
      if (other == null) {
        return;
      }
      anchorbox_.Add(other.anchorbox_);
      thresholds_.Add(other.thresholds_);
      if (other.OrientationScale != 0F) {
        OrientationScale = other.OrientationScale;
      }
      if (other.DimensionScale != 0F) {
        DimensionScale = other.DimensionScale;
      }
      if (other.FrontScale != 0F) {
        FrontScale = other.FrontScale;
      }
      if (other.RearScale != 0F) {
        RearScale = other.RearScale;
      }
      if (other.ObjectScale != 0) {
        ObjectScale = other.ObjectScale;
      }
      if (other.NoobjectScale != 0) {
        NoobjectScale = other.NoobjectScale;
      }
      if (other.ClassScale != 0F) {
        ClassScale = other.ClassScale;
      }
      if (other.CoordScale != 0) {
        CoordScale = other.CoordScale;
      }
      if (other.Jitter != 0F) {
        Jitter = other.Jitter;
      }
      if (other.Bias != 0F) {
        Bias = other.Bias;
      }
      if (other.Rescore != false) {
        Rescore = other.Rescore;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      if (other.BiasMatch != false) {
        BiasMatch = other.BiasMatch;
      }
      if (other.Threshold != 0F) {
        Threshold = other.Threshold;
      }
      if (other.TrickyIter != 0) {
        TrickyIter = other.TrickyIter;
      }
      if (other.UseL1Loss != false) {
        UseL1Loss = other.UseL1Loss;
      }
      if (other.UseTwiceSoftmax != false) {
        UseTwiceSoftmax = other.UseTwiceSoftmax;
      }
      if (other.IsAnchorNormalized != false) {
        IsAnchorNormalized = other.IsAnchorNormalized;
      }
      oriEnable_.Add(other.oriEnable_);
      if (other.Anchorfile.Length != 0) {
        Anchorfile = other.Anchorfile;
      }
      if (other.UseSideBoxV2 != false) {
        UseSideBoxV2 = other.UseSideBoxV2;
      }
      if (other.UseSideBoxV3 != false) {
        UseSideBoxV3 = other.UseSideBoxV3;
      }
      if (other.OriCycle != 0) {
        OriCycle = other.OriCycle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            anchorbox_.AddEntriesFrom(input, _repeated_anchorbox_codec);
            break;
          }
          case 18:
          case 21: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
          case 24: {
            ObjectScale = input.ReadUInt32();
            break;
          }
          case 32: {
            NoobjectScale = input.ReadUInt32();
            break;
          }
          case 45: {
            ClassScale = input.ReadFloat();
            break;
          }
          case 48: {
            CoordScale = input.ReadUInt32();
            break;
          }
          case 61: {
            Jitter = input.ReadFloat();
            break;
          }
          case 69: {
            Bias = input.ReadFloat();
            break;
          }
          case 72: {
            Rescore = input.ReadBool();
            break;
          }
          case 80: {
            NumClasses = input.ReadUInt32();
            break;
          }
          case 88: {
            BiasMatch = input.ReadBool();
            break;
          }
          case 101: {
            Threshold = input.ReadFloat();
            break;
          }
          case 104: {
            TrickyIter = input.ReadUInt32();
            break;
          }
          case 117: {
            OrientationScale = input.ReadFloat();
            break;
          }
          case 125: {
            DimensionScale = input.ReadFloat();
            break;
          }
          case 128: {
            UseL1Loss = input.ReadBool();
            break;
          }
          case 136: {
            UseTwiceSoftmax = input.ReadBool();
            break;
          }
          case 144: {
            IsAnchorNormalized = input.ReadBool();
            break;
          }
          case 157: {
            FrontScale = input.ReadFloat();
            break;
          }
          case 165: {
            RearScale = input.ReadFloat();
            break;
          }
          case 170:
          case 168: {
            oriEnable_.AddEntriesFrom(input, _repeated_oriEnable_codec);
            break;
          }
          case 178: {
            Anchorfile = input.ReadString();
            break;
          }
          case 184: {
            UseSideBoxV2 = input.ReadBool();
            break;
          }
          case 192: {
            UseSideBoxV3 = input.ReadBool();
            break;
          }
          case 200: {
            OriCycle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnchorBox : pb::IMessage<AnchorBox> {
    private static readonly pb::MessageParser<AnchorBox> _parser = new pb::MessageParser<AnchorBox>(() => new AnchorBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnchorBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnchorBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnchorBox(AnchorBox other) : this() {
      w_ = other.w_;
      h_ = other.h_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnchorBox Clone() {
      return new AnchorBox(this);
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 1;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 2;
    private float h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnchorBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnchorBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (W != other.W) return false;
      if (H != other.H) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (W != 0F) hash ^= W.GetHashCode();
      if (H != 0F) hash ^= H.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (W != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(W);
      }
      if (H != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(H);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (W != 0F) {
        size += 1 + 4;
      }
      if (H != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnchorBox other) {
      if (other == null) {
        return;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      if (other.H != 0F) {
        H = other.H;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            W = input.ReadFloat();
            break;
          }
          case 21: {
            H = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReorgParameter : pb::IMessage<ReorgParameter> {
    private static readonly pb::MessageParser<ReorgParameter> _parser = new pb::MessageParser<ReorgParameter>(() => new ReorgParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReorgParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Inference.RtReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReorgParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReorgParameter(ReorgParameter other) : this() {
      stride_ = other.stride_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReorgParameter Clone() {
      return new ReorgParameter(this);
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 1;
    private uint stride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stride {
      get { return stride_; }
      set {
        stride_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReorgParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReorgParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stride != other.Stride) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stride != 0) hash ^= Stride.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stride != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stride);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stride);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReorgParameter other) {
      if (other == null) {
        return;
      }
      if (other.Stride != 0) {
        Stride = other.Stride;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stride = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
