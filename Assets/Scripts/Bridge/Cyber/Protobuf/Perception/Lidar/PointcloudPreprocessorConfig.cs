// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/pointcloud_preprocessor/proto/pointcloud_preprocessor_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/lidar/lib/pointcloud_preprocessor/proto/pointcloud_preprocessor_config.proto</summary>
  public static partial class PointcloudPreprocessorConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/lidar/lib/pointcloud_preprocessor/proto/pointcloud_preprocessor_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PointcloudPreprocessorConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cl9tb2R1bGVzL3BlcmNlcHRpb24vbGlkYXIvbGliL3BvaW50Y2xvdWRfcHJl",
            "cHJvY2Vzc29yL3Byb3RvL3BvaW50Y2xvdWRfcHJlcHJvY2Vzc29yX2NvbmZp",
            "Zy5wcm90bxIXYXBvbGxvLnBlcmNlcHRpb24ubGlkYXIi7wEKHFBvaW50Q2xv",
            "dWRQcmVwcm9jZXNzb3JDb25maWcSHAoUZmlsdGVyX25hbmluZl9wb2ludHMY",
            "ASABKAgSIAoYZmlsdGVyX25lYXJieV9ib3hfcG9pbnRzGAIgASgIEhUKDWJv",
            "eF9mb3J3YXJkX3gYAyABKAISFgoOYm94X2JhY2t3YXJkX3gYBCABKAISFQoN",
            "Ym94X2ZvcndhcmRfeRgFIAEoAhIWCg5ib3hfYmFja3dhcmRfeRgGIAEoAhIc",
            "ChRmaWx0ZXJfaGlnaF96X3BvaW50cxgHIAEoCBITCgt6X3RocmVzaG9sZBgI",
            "IAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.PointCloudPreprocessorConfig), global::Apollo.Perception.Lidar.PointCloudPreprocessorConfig.Parser, new[]{ "FilterNaninfPoints", "FilterNearbyBoxPoints", "BoxForwardX", "BoxBackwardX", "BoxForwardY", "BoxBackwardY", "FilterHighZPoints", "ZThreshold" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PointCloudPreprocessorConfig : pb::IMessage<PointCloudPreprocessorConfig> {
    private static readonly pb::MessageParser<PointCloudPreprocessorConfig> _parser = new pb::MessageParser<PointCloudPreprocessorConfig>(() => new PointCloudPreprocessorConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloudPreprocessorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.PointcloudPreprocessorConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudPreprocessorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudPreprocessorConfig(PointCloudPreprocessorConfig other) : this() {
      filterNaninfPoints_ = other.filterNaninfPoints_;
      filterNearbyBoxPoints_ = other.filterNearbyBoxPoints_;
      boxForwardX_ = other.boxForwardX_;
      boxBackwardX_ = other.boxBackwardX_;
      boxForwardY_ = other.boxForwardY_;
      boxBackwardY_ = other.boxBackwardY_;
      filterHighZPoints_ = other.filterHighZPoints_;
      zThreshold_ = other.zThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudPreprocessorConfig Clone() {
      return new PointCloudPreprocessorConfig(this);
    }

    /// <summary>Field number for the "filter_naninf_points" field.</summary>
    public const int FilterNaninfPointsFieldNumber = 1;
    private bool filterNaninfPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FilterNaninfPoints {
      get { return filterNaninfPoints_; }
      set {
        filterNaninfPoints_ = value;
      }
    }

    /// <summary>Field number for the "filter_nearby_box_points" field.</summary>
    public const int FilterNearbyBoxPointsFieldNumber = 2;
    private bool filterNearbyBoxPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FilterNearbyBoxPoints {
      get { return filterNearbyBoxPoints_; }
      set {
        filterNearbyBoxPoints_ = value;
      }
    }

    /// <summary>Field number for the "box_forward_x" field.</summary>
    public const int BoxForwardXFieldNumber = 3;
    private float boxForwardX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoxForwardX {
      get { return boxForwardX_; }
      set {
        boxForwardX_ = value;
      }
    }

    /// <summary>Field number for the "box_backward_x" field.</summary>
    public const int BoxBackwardXFieldNumber = 4;
    private float boxBackwardX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoxBackwardX {
      get { return boxBackwardX_; }
      set {
        boxBackwardX_ = value;
      }
    }

    /// <summary>Field number for the "box_forward_y" field.</summary>
    public const int BoxForwardYFieldNumber = 5;
    private float boxForwardY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoxForwardY {
      get { return boxForwardY_; }
      set {
        boxForwardY_ = value;
      }
    }

    /// <summary>Field number for the "box_backward_y" field.</summary>
    public const int BoxBackwardYFieldNumber = 6;
    private float boxBackwardY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoxBackwardY {
      get { return boxBackwardY_; }
      set {
        boxBackwardY_ = value;
      }
    }

    /// <summary>Field number for the "filter_high_z_points" field.</summary>
    public const int FilterHighZPointsFieldNumber = 7;
    private bool filterHighZPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FilterHighZPoints {
      get { return filterHighZPoints_; }
      set {
        filterHighZPoints_ = value;
      }
    }

    /// <summary>Field number for the "z_threshold" field.</summary>
    public const int ZThresholdFieldNumber = 8;
    private float zThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZThreshold {
      get { return zThreshold_; }
      set {
        zThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloudPreprocessorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloudPreprocessorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilterNaninfPoints != other.FilterNaninfPoints) return false;
      if (FilterNearbyBoxPoints != other.FilterNearbyBoxPoints) return false;
      if (BoxForwardX != other.BoxForwardX) return false;
      if (BoxBackwardX != other.BoxBackwardX) return false;
      if (BoxForwardY != other.BoxForwardY) return false;
      if (BoxBackwardY != other.BoxBackwardY) return false;
      if (FilterHighZPoints != other.FilterHighZPoints) return false;
      if (ZThreshold != other.ZThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilterNaninfPoints != false) hash ^= FilterNaninfPoints.GetHashCode();
      if (FilterNearbyBoxPoints != false) hash ^= FilterNearbyBoxPoints.GetHashCode();
      if (BoxForwardX != 0F) hash ^= BoxForwardX.GetHashCode();
      if (BoxBackwardX != 0F) hash ^= BoxBackwardX.GetHashCode();
      if (BoxForwardY != 0F) hash ^= BoxForwardY.GetHashCode();
      if (BoxBackwardY != 0F) hash ^= BoxBackwardY.GetHashCode();
      if (FilterHighZPoints != false) hash ^= FilterHighZPoints.GetHashCode();
      if (ZThreshold != 0F) hash ^= ZThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilterNaninfPoints != false) {
        output.WriteRawTag(8);
        output.WriteBool(FilterNaninfPoints);
      }
      if (FilterNearbyBoxPoints != false) {
        output.WriteRawTag(16);
        output.WriteBool(FilterNearbyBoxPoints);
      }
      if (BoxForwardX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BoxForwardX);
      }
      if (BoxBackwardX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BoxBackwardX);
      }
      if (BoxForwardY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BoxForwardY);
      }
      if (BoxBackwardY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BoxBackwardY);
      }
      if (FilterHighZPoints != false) {
        output.WriteRawTag(56);
        output.WriteBool(FilterHighZPoints);
      }
      if (ZThreshold != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ZThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilterNaninfPoints != false) {
        size += 1 + 1;
      }
      if (FilterNearbyBoxPoints != false) {
        size += 1 + 1;
      }
      if (BoxForwardX != 0F) {
        size += 1 + 4;
      }
      if (BoxBackwardX != 0F) {
        size += 1 + 4;
      }
      if (BoxForwardY != 0F) {
        size += 1 + 4;
      }
      if (BoxBackwardY != 0F) {
        size += 1 + 4;
      }
      if (FilterHighZPoints != false) {
        size += 1 + 1;
      }
      if (ZThreshold != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloudPreprocessorConfig other) {
      if (other == null) {
        return;
      }
      if (other.FilterNaninfPoints != false) {
        FilterNaninfPoints = other.FilterNaninfPoints;
      }
      if (other.FilterNearbyBoxPoints != false) {
        FilterNearbyBoxPoints = other.FilterNearbyBoxPoints;
      }
      if (other.BoxForwardX != 0F) {
        BoxForwardX = other.BoxForwardX;
      }
      if (other.BoxBackwardX != 0F) {
        BoxBackwardX = other.BoxBackwardX;
      }
      if (other.BoxForwardY != 0F) {
        BoxForwardY = other.BoxForwardY;
      }
      if (other.BoxBackwardY != 0F) {
        BoxBackwardY = other.BoxBackwardY;
      }
      if (other.FilterHighZPoints != false) {
        FilterHighZPoints = other.FilterHighZPoints;
      }
      if (other.ZThreshold != 0F) {
        ZThreshold = other.ZThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FilterNaninfPoints = input.ReadBool();
            break;
          }
          case 16: {
            FilterNearbyBoxPoints = input.ReadBool();
            break;
          }
          case 29: {
            BoxForwardX = input.ReadFloat();
            break;
          }
          case 37: {
            BoxBackwardX = input.ReadFloat();
            break;
          }
          case 45: {
            BoxForwardY = input.ReadFloat();
            break;
          }
          case 53: {
            BoxBackwardY = input.ReadFloat();
            break;
          }
          case 56: {
            FilterHighZPoints = input.ReadBool();
            break;
          }
          case 69: {
            ZThreshold = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
