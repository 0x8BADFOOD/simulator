// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/app/proto/lidar_obstacle_segmentation_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/lidar/app/proto/lidar_obstacle_segmentation_config.proto</summary>
  public static partial class LidarObstacleSegmentationConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/lidar/app/proto/lidar_obstacle_segmentation_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LidarObstacleSegmentationConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ckttb2R1bGVzL3BlcmNlcHRpb24vbGlkYXIvYXBwL3Byb3RvL2xpZGFyX29i",
            "c3RhY2xlX3NlZ21lbnRhdGlvbl9jb25maWcucHJvdG8SF2Fwb2xsby5wZXJj",
            "ZXB0aW9uLmxpZGFyIm0KH0xpZGFyT2JzdGFjbGVTZWdtZW50YXRpb25Db25m",
            "aWcSEQoJc2VnbWVudG9yGAEgASgJEhcKD3VzZV9tYXBfbWFuYWdlchgCIAEo",
            "CBIeChZ1c2Vfb2JqZWN0X2ZpbHRlcl9iYW5rGAMgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.LidarObstacleSegmentationConfig), global::Apollo.Perception.Lidar.LidarObstacleSegmentationConfig.Parser, new[]{ "Segmentor", "UseMapManager", "UseObjectFilterBank" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LidarObstacleSegmentationConfig : pb::IMessage<LidarObstacleSegmentationConfig> {
    private static readonly pb::MessageParser<LidarObstacleSegmentationConfig> _parser = new pb::MessageParser<LidarObstacleSegmentationConfig>(() => new LidarObstacleSegmentationConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LidarObstacleSegmentationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.LidarObstacleSegmentationConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarObstacleSegmentationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarObstacleSegmentationConfig(LidarObstacleSegmentationConfig other) : this() {
      segmentor_ = other.segmentor_;
      useMapManager_ = other.useMapManager_;
      useObjectFilterBank_ = other.useObjectFilterBank_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarObstacleSegmentationConfig Clone() {
      return new LidarObstacleSegmentationConfig(this);
    }

    /// <summary>Field number for the "segmentor" field.</summary>
    public const int SegmentorFieldNumber = 1;
    private string segmentor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Segmentor {
      get { return segmentor_; }
      set {
        segmentor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_map_manager" field.</summary>
    public const int UseMapManagerFieldNumber = 2;
    private bool useMapManager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMapManager {
      get { return useMapManager_; }
      set {
        useMapManager_ = value;
      }
    }

    /// <summary>Field number for the "use_object_filter_bank" field.</summary>
    public const int UseObjectFilterBankFieldNumber = 3;
    private bool useObjectFilterBank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseObjectFilterBank {
      get { return useObjectFilterBank_; }
      set {
        useObjectFilterBank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LidarObstacleSegmentationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LidarObstacleSegmentationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Segmentor != other.Segmentor) return false;
      if (UseMapManager != other.UseMapManager) return false;
      if (UseObjectFilterBank != other.UseObjectFilterBank) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Segmentor.Length != 0) hash ^= Segmentor.GetHashCode();
      if (UseMapManager != false) hash ^= UseMapManager.GetHashCode();
      if (UseObjectFilterBank != false) hash ^= UseObjectFilterBank.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Segmentor.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Segmentor);
      }
      if (UseMapManager != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseMapManager);
      }
      if (UseObjectFilterBank != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseObjectFilterBank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Segmentor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Segmentor);
      }
      if (UseMapManager != false) {
        size += 1 + 1;
      }
      if (UseObjectFilterBank != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LidarObstacleSegmentationConfig other) {
      if (other == null) {
        return;
      }
      if (other.Segmentor.Length != 0) {
        Segmentor = other.Segmentor;
      }
      if (other.UseMapManager != false) {
        UseMapManager = other.UseMapManager;
      }
      if (other.UseObjectFilterBank != false) {
        UseObjectFilterBank = other.UseObjectFilterBank;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Segmentor = input.ReadString();
            break;
          }
          case 16: {
            UseMapManager = input.ReadBool();
            break;
          }
          case 24: {
            UseObjectFilterBank = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
