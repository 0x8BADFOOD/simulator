// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/scene_manager/proto/scene_manager_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/lidar/lib/scene_manager/proto/scene_manager_config.proto</summary>
  public static partial class SceneManagerConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/lidar/lib/scene_manager/proto/scene_manager_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneManagerConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ckttb2R1bGVzL3BlcmNlcHRpb24vbGlkYXIvbGliL3NjZW5lX21hbmFnZXIv",
            "cHJvdG8vc2NlbmVfbWFuYWdlcl9jb25maWcucHJvdG8SF2Fwb2xsby5wZXJj",
            "ZXB0aW9uLmxpZGFyIioKElNjZW5lTWFuYWdlckNvbmZpZxIUCgxzZXJ2aWNl",
            "X25hbWUYASADKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.SceneManagerConfig), global::Apollo.Perception.Lidar.SceneManagerConfig.Parser, new[]{ "ServiceName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SceneManagerConfig : pb::IMessage<SceneManagerConfig> {
    private static readonly pb::MessageParser<SceneManagerConfig> _parser = new pb::MessageParser<SceneManagerConfig>(() => new SceneManagerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneManagerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.SceneManagerConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneManagerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneManagerConfig(SceneManagerConfig other) : this() {
      serviceName_ = other.serviceName_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneManagerConfig Clone() {
      return new SceneManagerConfig(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_serviceName_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> serviceName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServiceName {
      get { return serviceName_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneManagerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneManagerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serviceName_.Equals(other.serviceName_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serviceName_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serviceName_.WriteTo(output, _repeated_serviceName_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serviceName_.CalculateSize(_repeated_serviceName_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneManagerConfig other) {
      if (other == null) {
        return;
      }
      serviceName_.Add(other.serviceName_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serviceName_.AddEntriesFrom(input, _repeated_serviceName_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
