// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light_detection.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception {

  /// <summary>Holder for reflection information generated from modules/perception/proto/traffic_light_detection.proto</summary>
  public static partial class TrafficLightDetectionReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/traffic_light_detection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrafficLightDetectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vdHJhZmZpY19saWdodF9kZXRl",
            "Y3Rpb24ucHJvdG8SEWFwb2xsby5wZXJjZXB0aW9uGiFtb2R1bGVzL2NvbW1v",
            "bi9wcm90by9oZWFkZXIucHJvdG8iowEKD1RyYWZmaWNMaWdodEJveBIJCgF4",
            "GAEgASgFEgkKAXkYAiABKAUSDQoFd2lkdGgYAyABKAUSDgoGaGVpZ2h0GAQg",
            "ASgFEjQKBWNvbG9yGAUgASgOMiUuYXBvbGxvLnBlcmNlcHRpb24uVHJhZmZp",
            "Y0xpZ2h0LkNvbG9yEhAKCHNlbGVjdGVkGAYgASgIEhMKC2NhbWVyYV9uYW1l",
            "GAcgASgJIvYDChFUcmFmZmljTGlnaHREZWJ1ZxIzCgdjcm9wYm94GAEgASgL",
            "MiIuYXBvbGxvLnBlcmNlcHRpb24uVHJhZmZpY0xpZ2h0Qm94Ei8KA2JveBgC",
            "IAMoCzIiLmFwb2xsby5wZXJjZXB0aW9uLlRyYWZmaWNMaWdodEJveBISCgpz",
            "aWduYWxfbnVtGAMgASgFEhEKCXZhbGlkX3BvcxgEIAEoBRITCgt0c19kaWZm",
            "X3BvcxgFIAEoARITCgt0c19kaWZmX3N5cxgGIAEoARIVCg1wcm9qZWN0X2Vy",
            "cm9yGAcgASgFEh0KFWRpc3RhbmNlX3RvX3N0b3BfbGluZRgIIAEoARIRCglj",
            "YW1lcmFfaWQYCSABKAUSNAoIY3JvcF9yb2kYCiADKAsyIi5hcG9sbG8ucGVy",
            "Y2VwdGlvbi5UcmFmZmljTGlnaHRCb3gSOQoNcHJvamVjdGVkX3JvaRgLIAMo",
            "CzIiLmFwb2xsby5wZXJjZXB0aW9uLlRyYWZmaWNMaWdodEJveBI5Cg1yZWN0",
            "aWZpZWRfcm9pGAwgAygLMiIuYXBvbGxvLnBlcmNlcHRpb24uVHJhZmZpY0xp",
            "Z2h0Qm94EjUKCWRlYnVnX3JvaRgNIAMoCzIiLmFwb2xsby5wZXJjZXB0aW9u",
            "LlRyYWZmaWNMaWdodEJveCLjAQoMVHJhZmZpY0xpZ2h0EjQKBWNvbG9yGAEg",
            "ASgOMiUuYXBvbGxvLnBlcmNlcHRpb24uVHJhZmZpY0xpZ2h0LkNvbG9yEgoK",
            "AmlkGAIgASgJEhIKCmNvbmZpZGVuY2UYAyABKAESFQoNdHJhY2tpbmdfdGlt",
            "ZRgEIAEoARINCgVibGluaxgFIAEoCBIWCg5yZW1haW5pbmdfdGltZRgGIAEo",
            "ASI/CgVDb2xvchILCgdVTktOT1dOEAASBwoDUkVEEAESCgoGWUVMTE9XEAIS",
            "CQoFR1JFRU4QAxIJCgVCTEFDSxAEIoIDChVUcmFmZmljTGlnaHREZXRlY3Rp",
            "b24SJQoGaGVhZGVyGAIgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFkZXISNgoN",
            "dHJhZmZpY19saWdodBgBIAMoCzIfLmFwb2xsby5wZXJjZXB0aW9uLlRyYWZm",
            "aWNMaWdodBJBChN0cmFmZmljX2xpZ2h0X2RlYnVnGAMgASgLMiQuYXBvbGxv",
            "LnBlcmNlcHRpb24uVHJhZmZpY0xpZ2h0RGVidWcSFgoOY29udGFpbl9saWdo",
            "dHMYBCABKAgSRAoJY2FtZXJhX2lkGAUgASgOMjEuYXBvbGxvLnBlcmNlcHRp",
            "b24uVHJhZmZpY0xpZ2h0RGV0ZWN0aW9uLkNhbWVyYUlEImkKCENhbWVyYUlE",
            "EhUKEUNBTUVSQV9GUk9OVF9MT05HEAASFwoTQ0FNRVJBX0ZST05UX05BUlJP",
            "VxABEhYKEkNBTUVSQV9GUk9OVF9TSE9SVBACEhUKEUNBTUVSQV9GUk9OVF9X",
            "SURFEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.TrafficLightBox), global::Apollo.Perception.TrafficLightBox.Parser, new[]{ "X", "Y", "Width", "Height", "Color", "Selected", "CameraName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.TrafficLightDebug), global::Apollo.Perception.TrafficLightDebug.Parser, new[]{ "Cropbox", "Box", "SignalNum", "ValidPos", "TsDiffPos", "TsDiffSys", "ProjectError", "DistanceToStopLine", "CameraId", "CropRoi", "ProjectedRoi", "RectifiedRoi", "DebugRoi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.TrafficLight), global::Apollo.Perception.TrafficLight.Parser, new[]{ "Color", "Id", "Confidence", "TrackingTime", "Blink", "RemainingTime" }, null, new[]{ typeof(global::Apollo.Perception.TrafficLight.Types.Color) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.TrafficLightDetection), global::Apollo.Perception.TrafficLightDetection.Parser, new[]{ "Header", "TrafficLight", "TrafficLightDebug", "ContainLights", "CameraId" }, null, new[]{ typeof(global::Apollo.Perception.TrafficLightDetection.Types.CameraID) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TrafficLightBox : pb::IMessage<TrafficLightBox> {
    private static readonly pb::MessageParser<TrafficLightBox> _parser = new pb::MessageParser<TrafficLightBox>(() => new TrafficLightBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLightBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.TrafficLightDetectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightBox(TrafficLightBox other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      color_ = other.color_;
      selected_ = other.selected_;
      cameraName_ = other.cameraName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightBox Clone() {
      return new TrafficLightBox(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private global::Apollo.Perception.TrafficLight.Types.Color color_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.TrafficLight.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "selected" field.</summary>
    public const int SelectedFieldNumber = 6;
    private bool selected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Selected {
      get { return selected_; }
      set {
        selected_ = value;
      }
    }

    /// <summary>Field number for the "camera_name" field.</summary>
    public const int CameraNameFieldNumber = 7;
    private string cameraName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraName {
      get { return cameraName_; }
      set {
        cameraName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLightBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLightBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Color != other.Color) return false;
      if (Selected != other.Selected) return false;
      if (CameraName != other.CameraName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Selected != false) hash ^= Selected.GetHashCode();
      if (CameraName.Length != 0) hash ^= CameraName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (Color != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Color);
      }
      if (Selected != false) {
        output.WriteRawTag(48);
        output.WriteBool(Selected);
      }
      if (CameraName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CameraName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      if (Selected != false) {
        size += 1 + 1;
      }
      if (CameraName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLightBox other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Selected != false) {
        Selected = other.Selected;
      }
      if (other.CameraName.Length != 0) {
        CameraName = other.CameraName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            color_ = (global::Apollo.Perception.TrafficLight.Types.Color) input.ReadEnum();
            break;
          }
          case 48: {
            Selected = input.ReadBool();
            break;
          }
          case 58: {
            CameraName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrafficLightDebug : pb::IMessage<TrafficLightDebug> {
    private static readonly pb::MessageParser<TrafficLightDebug> _parser = new pb::MessageParser<TrafficLightDebug>(() => new TrafficLightDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLightDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.TrafficLightDetectionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDebug(TrafficLightDebug other) : this() {
      Cropbox = other.cropbox_ != null ? other.Cropbox.Clone() : null;
      box_ = other.box_.Clone();
      signalNum_ = other.signalNum_;
      validPos_ = other.validPos_;
      tsDiffPos_ = other.tsDiffPos_;
      tsDiffSys_ = other.tsDiffSys_;
      projectError_ = other.projectError_;
      distanceToStopLine_ = other.distanceToStopLine_;
      cameraId_ = other.cameraId_;
      cropRoi_ = other.cropRoi_.Clone();
      projectedRoi_ = other.projectedRoi_.Clone();
      rectifiedRoi_ = other.rectifiedRoi_.Clone();
      debugRoi_ = other.debugRoi_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDebug Clone() {
      return new TrafficLightDebug(this);
    }

    /// <summary>Field number for the "cropbox" field.</summary>
    public const int CropboxFieldNumber = 1;
    private global::Apollo.Perception.TrafficLightBox cropbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.TrafficLightBox Cropbox {
      get { return cropbox_; }
      set {
        cropbox_ = value;
      }
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Perception.TrafficLightBox> _repeated_box_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Perception.TrafficLightBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> box_ = new pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> Box {
      get { return box_; }
    }

    /// <summary>Field number for the "signal_num" field.</summary>
    public const int SignalNumFieldNumber = 3;
    private int signalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignalNum {
      get { return signalNum_; }
      set {
        signalNum_ = value;
      }
    }

    /// <summary>Field number for the "valid_pos" field.</summary>
    public const int ValidPosFieldNumber = 4;
    private int validPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValidPos {
      get { return validPos_; }
      set {
        validPos_ = value;
      }
    }

    /// <summary>Field number for the "ts_diff_pos" field.</summary>
    public const int TsDiffPosFieldNumber = 5;
    private double tsDiffPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TsDiffPos {
      get { return tsDiffPos_; }
      set {
        tsDiffPos_ = value;
      }
    }

    /// <summary>Field number for the "ts_diff_sys" field.</summary>
    public const int TsDiffSysFieldNumber = 6;
    private double tsDiffSys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TsDiffSys {
      get { return tsDiffSys_; }
      set {
        tsDiffSys_ = value;
      }
    }

    /// <summary>Field number for the "project_error" field.</summary>
    public const int ProjectErrorFieldNumber = 7;
    private int projectError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProjectError {
      get { return projectError_; }
      set {
        projectError_ = value;
      }
    }

    /// <summary>Field number for the "distance_to_stop_line" field.</summary>
    public const int DistanceToStopLineFieldNumber = 8;
    private double distanceToStopLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceToStopLine {
      get { return distanceToStopLine_; }
      set {
        distanceToStopLine_ = value;
      }
    }

    /// <summary>Field number for the "camera_id" field.</summary>
    public const int CameraIdFieldNumber = 9;
    private int cameraId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CameraId {
      get { return cameraId_; }
      set {
        cameraId_ = value;
      }
    }

    /// <summary>Field number for the "crop_roi" field.</summary>
    public const int CropRoiFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Apollo.Perception.TrafficLightBox> _repeated_cropRoi_codec
        = pb::FieldCodec.ForMessage(82, global::Apollo.Perception.TrafficLightBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> cropRoi_ = new pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> CropRoi {
      get { return cropRoi_; }
    }

    /// <summary>Field number for the "projected_roi" field.</summary>
    public const int ProjectedRoiFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Apollo.Perception.TrafficLightBox> _repeated_projectedRoi_codec
        = pb::FieldCodec.ForMessage(90, global::Apollo.Perception.TrafficLightBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> projectedRoi_ = new pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> ProjectedRoi {
      get { return projectedRoi_; }
    }

    /// <summary>Field number for the "rectified_roi" field.</summary>
    public const int RectifiedRoiFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Apollo.Perception.TrafficLightBox> _repeated_rectifiedRoi_codec
        = pb::FieldCodec.ForMessage(98, global::Apollo.Perception.TrafficLightBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> rectifiedRoi_ = new pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> RectifiedRoi {
      get { return rectifiedRoi_; }
    }

    /// <summary>Field number for the "debug_roi" field.</summary>
    public const int DebugRoiFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Apollo.Perception.TrafficLightBox> _repeated_debugRoi_codec
        = pb::FieldCodec.ForMessage(106, global::Apollo.Perception.TrafficLightBox.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> debugRoi_ = new pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.TrafficLightBox> DebugRoi {
      get { return debugRoi_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLightDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLightDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Cropbox, other.Cropbox)) return false;
      if(!box_.Equals(other.box_)) return false;
      if (SignalNum != other.SignalNum) return false;
      if (ValidPos != other.ValidPos) return false;
      if (TsDiffPos != other.TsDiffPos) return false;
      if (TsDiffSys != other.TsDiffSys) return false;
      if (ProjectError != other.ProjectError) return false;
      if (DistanceToStopLine != other.DistanceToStopLine) return false;
      if (CameraId != other.CameraId) return false;
      if(!cropRoi_.Equals(other.cropRoi_)) return false;
      if(!projectedRoi_.Equals(other.projectedRoi_)) return false;
      if(!rectifiedRoi_.Equals(other.rectifiedRoi_)) return false;
      if(!debugRoi_.Equals(other.debugRoi_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cropbox_ != null) hash ^= Cropbox.GetHashCode();
      hash ^= box_.GetHashCode();
      if (SignalNum != 0) hash ^= SignalNum.GetHashCode();
      if (ValidPos != 0) hash ^= ValidPos.GetHashCode();
      if (TsDiffPos != 0D) hash ^= TsDiffPos.GetHashCode();
      if (TsDiffSys != 0D) hash ^= TsDiffSys.GetHashCode();
      if (ProjectError != 0) hash ^= ProjectError.GetHashCode();
      if (DistanceToStopLine != 0D) hash ^= DistanceToStopLine.GetHashCode();
      if (CameraId != 0) hash ^= CameraId.GetHashCode();
      hash ^= cropRoi_.GetHashCode();
      hash ^= projectedRoi_.GetHashCode();
      hash ^= rectifiedRoi_.GetHashCode();
      hash ^= debugRoi_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cropbox_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cropbox);
      }
      box_.WriteTo(output, _repeated_box_codec);
      if (SignalNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SignalNum);
      }
      if (ValidPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ValidPos);
      }
      if (TsDiffPos != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(TsDiffPos);
      }
      if (TsDiffSys != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TsDiffSys);
      }
      if (ProjectError != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ProjectError);
      }
      if (DistanceToStopLine != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DistanceToStopLine);
      }
      if (CameraId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CameraId);
      }
      cropRoi_.WriteTo(output, _repeated_cropRoi_codec);
      projectedRoi_.WriteTo(output, _repeated_projectedRoi_codec);
      rectifiedRoi_.WriteTo(output, _repeated_rectifiedRoi_codec);
      debugRoi_.WriteTo(output, _repeated_debugRoi_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cropbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cropbox);
      }
      size += box_.CalculateSize(_repeated_box_codec);
      if (SignalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignalNum);
      }
      if (ValidPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValidPos);
      }
      if (TsDiffPos != 0D) {
        size += 1 + 8;
      }
      if (TsDiffSys != 0D) {
        size += 1 + 8;
      }
      if (ProjectError != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectError);
      }
      if (DistanceToStopLine != 0D) {
        size += 1 + 8;
      }
      if (CameraId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CameraId);
      }
      size += cropRoi_.CalculateSize(_repeated_cropRoi_codec);
      size += projectedRoi_.CalculateSize(_repeated_projectedRoi_codec);
      size += rectifiedRoi_.CalculateSize(_repeated_rectifiedRoi_codec);
      size += debugRoi_.CalculateSize(_repeated_debugRoi_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLightDebug other) {
      if (other == null) {
        return;
      }
      if (other.cropbox_ != null) {
        if (cropbox_ == null) {
          cropbox_ = new global::Apollo.Perception.TrafficLightBox();
        }
        Cropbox.MergeFrom(other.Cropbox);
      }
      box_.Add(other.box_);
      if (other.SignalNum != 0) {
        SignalNum = other.SignalNum;
      }
      if (other.ValidPos != 0) {
        ValidPos = other.ValidPos;
      }
      if (other.TsDiffPos != 0D) {
        TsDiffPos = other.TsDiffPos;
      }
      if (other.TsDiffSys != 0D) {
        TsDiffSys = other.TsDiffSys;
      }
      if (other.ProjectError != 0) {
        ProjectError = other.ProjectError;
      }
      if (other.DistanceToStopLine != 0D) {
        DistanceToStopLine = other.DistanceToStopLine;
      }
      if (other.CameraId != 0) {
        CameraId = other.CameraId;
      }
      cropRoi_.Add(other.cropRoi_);
      projectedRoi_.Add(other.projectedRoi_);
      rectifiedRoi_.Add(other.rectifiedRoi_);
      debugRoi_.Add(other.debugRoi_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cropbox_ == null) {
              cropbox_ = new global::Apollo.Perception.TrafficLightBox();
            }
            input.ReadMessage(cropbox_);
            break;
          }
          case 18: {
            box_.AddEntriesFrom(input, _repeated_box_codec);
            break;
          }
          case 24: {
            SignalNum = input.ReadInt32();
            break;
          }
          case 32: {
            ValidPos = input.ReadInt32();
            break;
          }
          case 41: {
            TsDiffPos = input.ReadDouble();
            break;
          }
          case 49: {
            TsDiffSys = input.ReadDouble();
            break;
          }
          case 56: {
            ProjectError = input.ReadInt32();
            break;
          }
          case 65: {
            DistanceToStopLine = input.ReadDouble();
            break;
          }
          case 72: {
            CameraId = input.ReadInt32();
            break;
          }
          case 82: {
            cropRoi_.AddEntriesFrom(input, _repeated_cropRoi_codec);
            break;
          }
          case 90: {
            projectedRoi_.AddEntriesFrom(input, _repeated_projectedRoi_codec);
            break;
          }
          case 98: {
            rectifiedRoi_.AddEntriesFrom(input, _repeated_rectifiedRoi_codec);
            break;
          }
          case 106: {
            debugRoi_.AddEntriesFrom(input, _repeated_debugRoi_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrafficLight : pb::IMessage<TrafficLight> {
    private static readonly pb::MessageParser<TrafficLight> _parser = new pb::MessageParser<TrafficLight>(() => new TrafficLight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.TrafficLightDetectionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight(TrafficLight other) : this() {
      color_ = other.color_;
      id_ = other.id_;
      confidence_ = other.confidence_;
      trackingTime_ = other.trackingTime_;
      blink_ = other.blink_;
      remainingTime_ = other.remainingTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight Clone() {
      return new TrafficLight(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Apollo.Perception.TrafficLight.Types.Color color_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.TrafficLight.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// Traffic light string-ID in the map data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 3;
    private double confidence_;
    /// <summary>
    /// How confidence about the detected results, between 0 and 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "tracking_time" field.</summary>
    public const int TrackingTimeFieldNumber = 4;
    private double trackingTime_;
    /// <summary>
    /// Duration of the traffic light since detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrackingTime {
      get { return trackingTime_; }
      set {
        trackingTime_ = value;
      }
    }

    /// <summary>Field number for the "blink" field.</summary>
    public const int BlinkFieldNumber = 5;
    private bool blink_;
    /// <summary>
    /// Is traffic blinking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blink {
      get { return blink_; }
      set {
        blink_ = value;
      }
    }

    /// <summary>Field number for the "remaining_time" field.</summary>
    public const int RemainingTimeFieldNumber = 6;
    private double remainingTime_;
    /// <summary>
    /// v2x traffic light remaining time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RemainingTime {
      get { return remainingTime_; }
      set {
        remainingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (Id != other.Id) return false;
      if (Confidence != other.Confidence) return false;
      if (TrackingTime != other.TrackingTime) return false;
      if (Blink != other.Blink) return false;
      if (RemainingTime != other.RemainingTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Confidence != 0D) hash ^= Confidence.GetHashCode();
      if (TrackingTime != 0D) hash ^= TrackingTime.GetHashCode();
      if (Blink != false) hash ^= Blink.GetHashCode();
      if (RemainingTime != 0D) hash ^= RemainingTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Color);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Confidence != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Confidence);
      }
      if (TrackingTime != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TrackingTime);
      }
      if (Blink != false) {
        output.WriteRawTag(40);
        output.WriteBool(Blink);
      }
      if (RemainingTime != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RemainingTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Confidence != 0D) {
        size += 1 + 8;
      }
      if (TrackingTime != 0D) {
        size += 1 + 8;
      }
      if (Blink != false) {
        size += 1 + 1;
      }
      if (RemainingTime != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      if (other.TrackingTime != 0D) {
        TrackingTime = other.TrackingTime;
      }
      if (other.Blink != false) {
        Blink = other.Blink;
      }
      if (other.RemainingTime != 0D) {
        RemainingTime = other.RemainingTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            color_ = (global::Apollo.Perception.TrafficLight.Types.Color) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 25: {
            Confidence = input.ReadDouble();
            break;
          }
          case 33: {
            TrackingTime = input.ReadDouble();
            break;
          }
          case 40: {
            Blink = input.ReadBool();
            break;
          }
          case 49: {
            RemainingTime = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TrafficLight message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Color {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("RED")] Red = 1,
        [pbr::OriginalName("YELLOW")] Yellow = 2,
        [pbr::OriginalName("GREEN")] Green = 3,
        [pbr::OriginalName("BLACK")] Black = 4,
      }

    }
    #endregion

  }

  public sealed partial class TrafficLightDetection : pb::IMessage<TrafficLightDetection> {
    private static readonly pb::MessageParser<TrafficLightDetection> _parser = new pb::MessageParser<TrafficLightDetection>(() => new TrafficLightDetection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLightDetection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.TrafficLightDetectionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDetection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDetection(TrafficLightDetection other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      trafficLight_ = other.trafficLight_.Clone();
      TrafficLightDebug = other.trafficLightDebug_ != null ? other.TrafficLightDebug.Clone() : null;
      containLights_ = other.containLights_;
      cameraId_ = other.cameraId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDetection Clone() {
      return new TrafficLightDetection(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 2;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "traffic_light" field.</summary>
    public const int TrafficLightFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.TrafficLight> _repeated_trafficLight_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.TrafficLight.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.TrafficLight> trafficLight_ = new pbc::RepeatedField<global::Apollo.Perception.TrafficLight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.TrafficLight> TrafficLight {
      get { return trafficLight_; }
    }

    /// <summary>Field number for the "traffic_light_debug" field.</summary>
    public const int TrafficLightDebugFieldNumber = 3;
    private global::Apollo.Perception.TrafficLightDebug trafficLightDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.TrafficLightDebug TrafficLightDebug {
      get { return trafficLightDebug_; }
      set {
        trafficLightDebug_ = value;
      }
    }

    /// <summary>Field number for the "contain_lights" field.</summary>
    public const int ContainLightsFieldNumber = 4;
    private bool containLights_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ContainLights {
      get { return containLights_; }
      set {
        containLights_ = value;
      }
    }

    /// <summary>Field number for the "camera_id" field.</summary>
    public const int CameraIdFieldNumber = 5;
    private global::Apollo.Perception.TrafficLightDetection.Types.CameraID cameraId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.TrafficLightDetection.Types.CameraID CameraId {
      get { return cameraId_; }
      set {
        cameraId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLightDetection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLightDetection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!trafficLight_.Equals(other.trafficLight_)) return false;
      if (!object.Equals(TrafficLightDebug, other.TrafficLightDebug)) return false;
      if (ContainLights != other.ContainLights) return false;
      if (CameraId != other.CameraId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= trafficLight_.GetHashCode();
      if (trafficLightDebug_ != null) hash ^= TrafficLightDebug.GetHashCode();
      if (ContainLights != false) hash ^= ContainLights.GetHashCode();
      if (CameraId != 0) hash ^= CameraId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trafficLight_.WriteTo(output, _repeated_trafficLight_codec);
      if (header_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Header);
      }
      if (trafficLightDebug_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrafficLightDebug);
      }
      if (ContainLights != false) {
        output.WriteRawTag(32);
        output.WriteBool(ContainLights);
      }
      if (CameraId != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CameraId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += trafficLight_.CalculateSize(_repeated_trafficLight_codec);
      if (trafficLightDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrafficLightDebug);
      }
      if (ContainLights != false) {
        size += 1 + 1;
      }
      if (CameraId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CameraId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLightDetection other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      trafficLight_.Add(other.trafficLight_);
      if (other.trafficLightDebug_ != null) {
        if (trafficLightDebug_ == null) {
          trafficLightDebug_ = new global::Apollo.Perception.TrafficLightDebug();
        }
        TrafficLightDebug.MergeFrom(other.TrafficLightDebug);
      }
      if (other.ContainLights != false) {
        ContainLights = other.ContainLights;
      }
      if (other.CameraId != 0) {
        CameraId = other.CameraId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            trafficLight_.AddEntriesFrom(input, _repeated_trafficLight_codec);
            break;
          }
          case 18: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 26: {
            if (trafficLightDebug_ == null) {
              trafficLightDebug_ = new global::Apollo.Perception.TrafficLightDebug();
            }
            input.ReadMessage(trafficLightDebug_);
            break;
          }
          case 32: {
            ContainLights = input.ReadBool();
            break;
          }
          case 40: {
            cameraId_ = (global::Apollo.Perception.TrafficLightDetection.Types.CameraID) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TrafficLightDetection message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CameraID {
        [pbr::OriginalName("CAMERA_FRONT_LONG")] CameraFrontLong = 0,
        [pbr::OriginalName("CAMERA_FRONT_NARROW")] CameraFrontNarrow = 1,
        [pbr::OriginalName("CAMERA_FRONT_SHORT")] CameraFrontShort = 2,
        [pbr::OriginalName("CAMERA_FRONT_WIDE")] CameraFrontWide = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
