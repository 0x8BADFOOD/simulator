// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/obstacle/tracker/omt/omt.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Camera.Omt {

  /// <summary>Holder for reflection information generated from modules/perception/camera/lib/obstacle/tracker/omt/omt.proto</summary>
  public static partial class OmtReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/camera/lib/obstacle/tracker/omt/omt.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OmtReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjxtb2R1bGVzL3BlcmNlcHRpb24vY2FtZXJhL2xpYi9vYnN0YWNsZS90cmFj",
            "a2VyL29tdC9vbXQucHJvdG8SHGFwb2xsby5wZXJjZXB0aW9uLmNhbWVyYS5v",
            "bXQiWAoLS2FsbWFuUGFyYW0SFQoNaW5pdF92YXJpYW5jZRgBIAEoAhIYChBw",
            "cm9jZXNzX3ZhcmlhbmNlGAIgASgCEhgKEG1lYXN1cmVfdmFyaWFuY2UYAyAB",
            "KAIikwgKC1RhcmdldFBhcmFtEhoKEnZlbG9jaXR5X3RocmVzaG9sZBgBIAEo",
            "AhIdChV2ZWxvY2l0eV9vdXRwdXRfZGVsYXkYAiABKAUSPwoMd29ybGRfY2Vu",
            "dGVyGAMgASgLMikuYXBvbGxvLnBlcmNlcHRpb24uY2FtZXJhLm9tdC5LYWxt",
            "YW5QYXJhbRI/CgxpbWFnZV9jZW50ZXIYBCABKAsyKS5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5jYW1lcmEub210LkthbG1hblBhcmFtEhwKFGltYWdlX3doX3VwZGF0",
            "ZV9yYXRlGAUgASgCEhkKEXdvcmxkX2xod19oaXN0b3J5GAYgASgFEhkKEWhl",
            "aWdodF9kaWZmX3JhdGlvGAcgASgCEhsKE3dvcmxkX3N0YXRlX2hpc3RvcnkY",
            "CCABKAUSKwojbWluX2NhY2hlZF93b3JsZF9zdGF0ZV9oaXN0b3J5X3NpemUY",
            "CSABKAUSIAoYbWluX2NhY2hlZF92ZWxvY2l0eV9zaXplGAogASgFEiAKGG1p",
            "bl9jYWNoZWRfcG9zaXRpb25fc2l6ZRgLIAEoBRIlCh1jYWxjX2F2Z19wb3Np",
            "dGlvbl93aW5kb3dfc2l6ZRgMIAEoBRIeChZzdGF0aWNfc3BlZWRfdGhyZXNo",
            "b2xkGA0gASgCEiIKGnN0YXRpY19zcGVlZF90aHJlc2hvbGRfcGVkGA4gASgC",
            "EhwKFG1pbl9tb3ZpbmdfYXZnX3NwZWVkGA8gASgCEiAKGG1pbl9tb3Zpbmdf",
            "YXZnX3NwZWVkX3BlZBgQIAEoAhIeChZhYm5vcm1hbF9hY2NfdGhyZXNob2xk",
            "GBEgASgCEiIKGmFibm9ybWFsX2FjY190aHJlc2hvbGRfcGVkGBIgASgCEjEK",
            "KWFibm9ybWFsX3ZlbG9jaXR5X2hlYWRpbmdfYW5nbGVfdGhyZXNob2xkGBMg",
            "ASgCEhkKEWNsYXBwaW5nX3ZlbG9jaXR5GBQgASgIEiQKHHdvcmxkX21lYW5f",
            "dmVsb2NpdHlfZHVyYXRpb24YFSABKAUSFAoMdHJhY2tlZF9saWZlGBYgASgF",
            "EhcKD3R5cGVfZmlsdGVyX3ZhchgXIAEoAhIcChRsYXJnZV92ZWxvY2l0eV9y",
            "YXRpbxgYIAEoAhIgChh0b29fbGFyZ2VfdmVsb2NpdHlfcmF0aW8YGSABKAIS",
            "GgoSbWVhbl9maWx0ZXJfd2luZG93GBogASgFEh4KFmRpcmVjdGlvbl9maWx0",
            "ZXJfcmF0aW8YGyABKAISHgoWZGlzcGxhY2VtZW50X3RoZXRhX3ZhchgcIAEo",
            "AhIaChJ2ZWxvY2l0eV90aGV0YV92YXIYHSABKAISGwoTc3RhYmxlX21vdmlu",
            "Z19zcGVlZBgeIAEoAiKAAQoOUmVmZXJlbmNlUGFyYW0SDgoGbWFyZ2luGAEg",
            "ASgFEhgKEG1pbl9hbGxvd19oZWlnaHQYAiABKAUSEgoKYXJlYV9kZWNheRgD",
            "IAEoAhIVCg1kb3duX3NhbXBsaW5nGAQgASgFEhkKEWhlaWdodF9kaWZmX3Jh",
            "dGlvGAUgASgCImMKC1dlaWdodFBhcmFtEhIKCmFwcGVhcmFuY2UYASABKAIS",
            "DgoGbW90aW9uGAIgASgCEg0KBXNoYXBlGAMgASgCEhAKCHRyYWNrbGV0GAQg",
            "ASgCEg8KB292ZXJsYXAYBSABKAIi3wQKCE9tdFBhcmFtEhYKDmltZ19jYXBh",
            "YmlsaXR5GAEgASgFEhAKCGxvc3RfYWdlGAIgASgFEhMKC3Jlc2VydmVfYWdl",
            "GAMgASgFEkUKEndlaWdodF9zYW1lX2NhbWVyYRgEIAEoCzIpLmFwb2xsby5w",
            "ZXJjZXB0aW9uLmNhbWVyYS5vbXQuV2VpZ2h0UGFyYW0SRQoSd2VpZ2h0X2Rp",
            "ZmZfY2FtZXJhGAUgASgLMikuYXBvbGxvLnBlcmNlcHRpb24uY2FtZXJhLm9t",
            "dC5XZWlnaHRQYXJhbRIOCgZib3JkZXIYCSABKAISFQoNdGFyZ2V0X3RocmVz",
            "aBgKIAEoAhIUCgxjb3JyZWN0X3R5cGUYCyABKAgSPwoMdGFyZ2V0X3BhcmFt",
            "GAwgASgLMikuYXBvbGxvLnBlcmNlcHRpb24uY2FtZXJhLm9tdC5UYXJnZXRQ",
            "YXJhbRIdChVtaW5faW5pdF9oZWlnaHRfcmF0aW8YDSABKAISJAocdGFyZ2V0",
            "X2NvbWJpbmVfaW91X3RocmVzaG9sZBgOIAEoAhIcChRmdXNpb25fdGFyZ2V0",
            "X3RocmVzaBgPIAEoAhIaChJpbWFnZV9kaXNwbGFjZW1lbnQYECABKAISGQoR",
            "YWJub3JtYWxfbW92ZW1lbnQYESABKAISEwoLc2FtZV90c19lcHMYEiABKAES",
            "PwoJcmVmZXJlbmNlGBMgASgLMiwuYXBvbGxvLnBlcmNlcHRpb24uY2FtZXJh",
            "Lm9tdC5SZWZlcmVuY2VQYXJhbRIYChB0eXBlX2NoYW5nZV9jb3N0GBQgASgJ",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Omt.KalmanParam), global::Apollo.Perception.Camera.Omt.KalmanParam.Parser, new[]{ "InitVariance", "ProcessVariance", "MeasureVariance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Omt.TargetParam), global::Apollo.Perception.Camera.Omt.TargetParam.Parser, new[]{ "VelocityThreshold", "VelocityOutputDelay", "WorldCenter", "ImageCenter", "ImageWhUpdateRate", "WorldLhwHistory", "HeightDiffRatio", "WorldStateHistory", "MinCachedWorldStateHistorySize", "MinCachedVelocitySize", "MinCachedPositionSize", "CalcAvgPositionWindowSize", "StaticSpeedThreshold", "StaticSpeedThresholdPed", "MinMovingAvgSpeed", "MinMovingAvgSpeedPed", "AbnormalAccThreshold", "AbnormalAccThresholdPed", "AbnormalVelocityHeadingAngleThreshold", "ClappingVelocity", "WorldMeanVelocityDuration", "TrackedLife", "TypeFilterVar", "LargeVelocityRatio", "TooLargeVelocityRatio", "MeanFilterWindow", "DirectionFilterRatio", "DisplacementThetaVar", "VelocityThetaVar", "StableMovingSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Omt.ReferenceParam), global::Apollo.Perception.Camera.Omt.ReferenceParam.Parser, new[]{ "Margin", "MinAllowHeight", "AreaDecay", "DownSampling", "HeightDiffRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Omt.WeightParam), global::Apollo.Perception.Camera.Omt.WeightParam.Parser, new[]{ "Appearance", "Motion", "Shape", "Tracklet", "Overlap" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Omt.OmtParam), global::Apollo.Perception.Camera.Omt.OmtParam.Parser, new[]{ "ImgCapability", "LostAge", "ReserveAge", "WeightSameCamera", "WeightDiffCamera", "Border", "TargetThresh", "CorrectType", "TargetParam", "MinInitHeightRatio", "TargetCombineIouThreshold", "FusionTargetThresh", "ImageDisplacement", "AbnormalMovement", "SameTsEps", "Reference", "TypeChangeCost" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class KalmanParam : pb::IMessage<KalmanParam> {
    private static readonly pb::MessageParser<KalmanParam> _parser = new pb::MessageParser<KalmanParam>(() => new KalmanParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KalmanParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Omt.OmtReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KalmanParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KalmanParam(KalmanParam other) : this() {
      initVariance_ = other.initVariance_;
      processVariance_ = other.processVariance_;
      measureVariance_ = other.measureVariance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KalmanParam Clone() {
      return new KalmanParam(this);
    }

    /// <summary>Field number for the "init_variance" field.</summary>
    public const int InitVarianceFieldNumber = 1;
    private float initVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitVariance {
      get { return initVariance_; }
      set {
        initVariance_ = value;
      }
    }

    /// <summary>Field number for the "process_variance" field.</summary>
    public const int ProcessVarianceFieldNumber = 2;
    private float processVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProcessVariance {
      get { return processVariance_; }
      set {
        processVariance_ = value;
      }
    }

    /// <summary>Field number for the "measure_variance" field.</summary>
    public const int MeasureVarianceFieldNumber = 3;
    private float measureVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeasureVariance {
      get { return measureVariance_; }
      set {
        measureVariance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KalmanParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KalmanParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InitVariance != other.InitVariance) return false;
      if (ProcessVariance != other.ProcessVariance) return false;
      if (MeasureVariance != other.MeasureVariance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InitVariance != 0F) hash ^= InitVariance.GetHashCode();
      if (ProcessVariance != 0F) hash ^= ProcessVariance.GetHashCode();
      if (MeasureVariance != 0F) hash ^= MeasureVariance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InitVariance != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(InitVariance);
      }
      if (ProcessVariance != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ProcessVariance);
      }
      if (MeasureVariance != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MeasureVariance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InitVariance != 0F) {
        size += 1 + 4;
      }
      if (ProcessVariance != 0F) {
        size += 1 + 4;
      }
      if (MeasureVariance != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KalmanParam other) {
      if (other == null) {
        return;
      }
      if (other.InitVariance != 0F) {
        InitVariance = other.InitVariance;
      }
      if (other.ProcessVariance != 0F) {
        ProcessVariance = other.ProcessVariance;
      }
      if (other.MeasureVariance != 0F) {
        MeasureVariance = other.MeasureVariance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            InitVariance = input.ReadFloat();
            break;
          }
          case 21: {
            ProcessVariance = input.ReadFloat();
            break;
          }
          case 29: {
            MeasureVariance = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TargetParam : pb::IMessage<TargetParam> {
    private static readonly pb::MessageParser<TargetParam> _parser = new pb::MessageParser<TargetParam>(() => new TargetParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Omt.OmtReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetParam(TargetParam other) : this() {
      velocityThreshold_ = other.velocityThreshold_;
      velocityOutputDelay_ = other.velocityOutputDelay_;
      WorldCenter = other.worldCenter_ != null ? other.WorldCenter.Clone() : null;
      ImageCenter = other.imageCenter_ != null ? other.ImageCenter.Clone() : null;
      imageWhUpdateRate_ = other.imageWhUpdateRate_;
      worldLhwHistory_ = other.worldLhwHistory_;
      heightDiffRatio_ = other.heightDiffRatio_;
      worldStateHistory_ = other.worldStateHistory_;
      minCachedWorldStateHistorySize_ = other.minCachedWorldStateHistorySize_;
      minCachedVelocitySize_ = other.minCachedVelocitySize_;
      minCachedPositionSize_ = other.minCachedPositionSize_;
      calcAvgPositionWindowSize_ = other.calcAvgPositionWindowSize_;
      staticSpeedThreshold_ = other.staticSpeedThreshold_;
      staticSpeedThresholdPed_ = other.staticSpeedThresholdPed_;
      minMovingAvgSpeed_ = other.minMovingAvgSpeed_;
      minMovingAvgSpeedPed_ = other.minMovingAvgSpeedPed_;
      abnormalAccThreshold_ = other.abnormalAccThreshold_;
      abnormalAccThresholdPed_ = other.abnormalAccThresholdPed_;
      abnormalVelocityHeadingAngleThreshold_ = other.abnormalVelocityHeadingAngleThreshold_;
      clappingVelocity_ = other.clappingVelocity_;
      worldMeanVelocityDuration_ = other.worldMeanVelocityDuration_;
      trackedLife_ = other.trackedLife_;
      typeFilterVar_ = other.typeFilterVar_;
      largeVelocityRatio_ = other.largeVelocityRatio_;
      tooLargeVelocityRatio_ = other.tooLargeVelocityRatio_;
      meanFilterWindow_ = other.meanFilterWindow_;
      directionFilterRatio_ = other.directionFilterRatio_;
      displacementThetaVar_ = other.displacementThetaVar_;
      velocityThetaVar_ = other.velocityThetaVar_;
      stableMovingSpeed_ = other.stableMovingSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetParam Clone() {
      return new TargetParam(this);
    }

    /// <summary>Field number for the "velocity_threshold" field.</summary>
    public const int VelocityThresholdFieldNumber = 1;
    private float velocityThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityThreshold {
      get { return velocityThreshold_; }
      set {
        velocityThreshold_ = value;
      }
    }

    /// <summary>Field number for the "velocity_output_delay" field.</summary>
    public const int VelocityOutputDelayFieldNumber = 2;
    private int velocityOutputDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VelocityOutputDelay {
      get { return velocityOutputDelay_; }
      set {
        velocityOutputDelay_ = value;
      }
    }

    /// <summary>Field number for the "world_center" field.</summary>
    public const int WorldCenterFieldNumber = 3;
    private global::Apollo.Perception.Camera.Omt.KalmanParam worldCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Omt.KalmanParam WorldCenter {
      get { return worldCenter_; }
      set {
        worldCenter_ = value;
      }
    }

    /// <summary>Field number for the "image_center" field.</summary>
    public const int ImageCenterFieldNumber = 4;
    private global::Apollo.Perception.Camera.Omt.KalmanParam imageCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Omt.KalmanParam ImageCenter {
      get { return imageCenter_; }
      set {
        imageCenter_ = value;
      }
    }

    /// <summary>Field number for the "image_wh_update_rate" field.</summary>
    public const int ImageWhUpdateRateFieldNumber = 5;
    private float imageWhUpdateRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ImageWhUpdateRate {
      get { return imageWhUpdateRate_; }
      set {
        imageWhUpdateRate_ = value;
      }
    }

    /// <summary>Field number for the "world_lhw_history" field.</summary>
    public const int WorldLhwHistoryFieldNumber = 6;
    private int worldLhwHistory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldLhwHistory {
      get { return worldLhwHistory_; }
      set {
        worldLhwHistory_ = value;
      }
    }

    /// <summary>Field number for the "height_diff_ratio" field.</summary>
    public const int HeightDiffRatioFieldNumber = 7;
    private float heightDiffRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightDiffRatio {
      get { return heightDiffRatio_; }
      set {
        heightDiffRatio_ = value;
      }
    }

    /// <summary>Field number for the "world_state_history" field.</summary>
    public const int WorldStateHistoryFieldNumber = 8;
    private int worldStateHistory_;
    /// <summary>
    /// params for checking static obstacles 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldStateHistory {
      get { return worldStateHistory_; }
      set {
        worldStateHistory_ = value;
      }
    }

    /// <summary>Field number for the "min_cached_world_state_history_size" field.</summary>
    public const int MinCachedWorldStateHistorySizeFieldNumber = 9;
    private int minCachedWorldStateHistorySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinCachedWorldStateHistorySize {
      get { return minCachedWorldStateHistorySize_; }
      set {
        minCachedWorldStateHistorySize_ = value;
      }
    }

    /// <summary>Field number for the "min_cached_velocity_size" field.</summary>
    public const int MinCachedVelocitySizeFieldNumber = 10;
    private int minCachedVelocitySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinCachedVelocitySize {
      get { return minCachedVelocitySize_; }
      set {
        minCachedVelocitySize_ = value;
      }
    }

    /// <summary>Field number for the "min_cached_position_size" field.</summary>
    public const int MinCachedPositionSizeFieldNumber = 11;
    private int minCachedPositionSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinCachedPositionSize {
      get { return minCachedPositionSize_; }
      set {
        minCachedPositionSize_ = value;
      }
    }

    /// <summary>Field number for the "calc_avg_position_window_size" field.</summary>
    public const int CalcAvgPositionWindowSizeFieldNumber = 12;
    private int calcAvgPositionWindowSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalcAvgPositionWindowSize {
      get { return calcAvgPositionWindowSize_; }
      set {
        calcAvgPositionWindowSize_ = value;
      }
    }

    /// <summary>Field number for the "static_speed_threshold" field.</summary>
    public const int StaticSpeedThresholdFieldNumber = 13;
    private float staticSpeedThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaticSpeedThreshold {
      get { return staticSpeedThreshold_; }
      set {
        staticSpeedThreshold_ = value;
      }
    }

    /// <summary>Field number for the "static_speed_threshold_ped" field.</summary>
    public const int StaticSpeedThresholdPedFieldNumber = 14;
    private float staticSpeedThresholdPed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaticSpeedThresholdPed {
      get { return staticSpeedThresholdPed_; }
      set {
        staticSpeedThresholdPed_ = value;
      }
    }

    /// <summary>Field number for the "min_moving_avg_speed" field.</summary>
    public const int MinMovingAvgSpeedFieldNumber = 15;
    private float minMovingAvgSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinMovingAvgSpeed {
      get { return minMovingAvgSpeed_; }
      set {
        minMovingAvgSpeed_ = value;
      }
    }

    /// <summary>Field number for the "min_moving_avg_speed_ped" field.</summary>
    public const int MinMovingAvgSpeedPedFieldNumber = 16;
    private float minMovingAvgSpeedPed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinMovingAvgSpeedPed {
      get { return minMovingAvgSpeedPed_; }
      set {
        minMovingAvgSpeedPed_ = value;
      }
    }

    /// <summary>Field number for the "abnormal_acc_threshold" field.</summary>
    public const int AbnormalAccThresholdFieldNumber = 17;
    private float abnormalAccThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AbnormalAccThreshold {
      get { return abnormalAccThreshold_; }
      set {
        abnormalAccThreshold_ = value;
      }
    }

    /// <summary>Field number for the "abnormal_acc_threshold_ped" field.</summary>
    public const int AbnormalAccThresholdPedFieldNumber = 18;
    private float abnormalAccThresholdPed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AbnormalAccThresholdPed {
      get { return abnormalAccThresholdPed_; }
      set {
        abnormalAccThresholdPed_ = value;
      }
    }

    /// <summary>Field number for the "abnormal_velocity_heading_angle_threshold" field.</summary>
    public const int AbnormalVelocityHeadingAngleThresholdFieldNumber = 19;
    private float abnormalVelocityHeadingAngleThreshold_;
    /// <summary>
    /// M_PI / 4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AbnormalVelocityHeadingAngleThreshold {
      get { return abnormalVelocityHeadingAngleThreshold_; }
      set {
        abnormalVelocityHeadingAngleThreshold_ = value;
      }
    }

    /// <summary>Field number for the "clapping_velocity" field.</summary>
    public const int ClappingVelocityFieldNumber = 20;
    private bool clappingVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClappingVelocity {
      get { return clappingVelocity_; }
      set {
        clappingVelocity_ = value;
      }
    }

    /// <summary>Field number for the "world_mean_velocity_duration" field.</summary>
    public const int WorldMeanVelocityDurationFieldNumber = 21;
    private int worldMeanVelocityDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldMeanVelocityDuration {
      get { return worldMeanVelocityDuration_; }
      set {
        worldMeanVelocityDuration_ = value;
      }
    }

    /// <summary>Field number for the "tracked_life" field.</summary>
    public const int TrackedLifeFieldNumber = 22;
    private int trackedLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrackedLife {
      get { return trackedLife_; }
      set {
        trackedLife_ = value;
      }
    }

    /// <summary>Field number for the "type_filter_var" field.</summary>
    public const int TypeFilterVarFieldNumber = 23;
    private float typeFilterVar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TypeFilterVar {
      get { return typeFilterVar_; }
      set {
        typeFilterVar_ = value;
      }
    }

    /// <summary>Field number for the "large_velocity_ratio" field.</summary>
    public const int LargeVelocityRatioFieldNumber = 24;
    private float largeVelocityRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LargeVelocityRatio {
      get { return largeVelocityRatio_; }
      set {
        largeVelocityRatio_ = value;
      }
    }

    /// <summary>Field number for the "too_large_velocity_ratio" field.</summary>
    public const int TooLargeVelocityRatioFieldNumber = 25;
    private float tooLargeVelocityRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TooLargeVelocityRatio {
      get { return tooLargeVelocityRatio_; }
      set {
        tooLargeVelocityRatio_ = value;
      }
    }

    /// <summary>Field number for the "mean_filter_window" field.</summary>
    public const int MeanFilterWindowFieldNumber = 26;
    private int meanFilterWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeanFilterWindow {
      get { return meanFilterWindow_; }
      set {
        meanFilterWindow_ = value;
      }
    }

    /// <summary>Field number for the "direction_filter_ratio" field.</summary>
    public const int DirectionFilterRatioFieldNumber = 27;
    private float directionFilterRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionFilterRatio {
      get { return directionFilterRatio_; }
      set {
        directionFilterRatio_ = value;
      }
    }

    /// <summary>Field number for the "displacement_theta_var" field.</summary>
    public const int DisplacementThetaVarFieldNumber = 28;
    private float displacementThetaVar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisplacementThetaVar {
      get { return displacementThetaVar_; }
      set {
        displacementThetaVar_ = value;
      }
    }

    /// <summary>Field number for the "velocity_theta_var" field.</summary>
    public const int VelocityThetaVarFieldNumber = 29;
    private float velocityThetaVar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityThetaVar {
      get { return velocityThetaVar_; }
      set {
        velocityThetaVar_ = value;
      }
    }

    /// <summary>Field number for the "stable_moving_speed" field.</summary>
    public const int StableMovingSpeedFieldNumber = 30;
    private float stableMovingSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StableMovingSpeed {
      get { return stableMovingSpeed_; }
      set {
        stableMovingSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VelocityThreshold != other.VelocityThreshold) return false;
      if (VelocityOutputDelay != other.VelocityOutputDelay) return false;
      if (!object.Equals(WorldCenter, other.WorldCenter)) return false;
      if (!object.Equals(ImageCenter, other.ImageCenter)) return false;
      if (ImageWhUpdateRate != other.ImageWhUpdateRate) return false;
      if (WorldLhwHistory != other.WorldLhwHistory) return false;
      if (HeightDiffRatio != other.HeightDiffRatio) return false;
      if (WorldStateHistory != other.WorldStateHistory) return false;
      if (MinCachedWorldStateHistorySize != other.MinCachedWorldStateHistorySize) return false;
      if (MinCachedVelocitySize != other.MinCachedVelocitySize) return false;
      if (MinCachedPositionSize != other.MinCachedPositionSize) return false;
      if (CalcAvgPositionWindowSize != other.CalcAvgPositionWindowSize) return false;
      if (StaticSpeedThreshold != other.StaticSpeedThreshold) return false;
      if (StaticSpeedThresholdPed != other.StaticSpeedThresholdPed) return false;
      if (MinMovingAvgSpeed != other.MinMovingAvgSpeed) return false;
      if (MinMovingAvgSpeedPed != other.MinMovingAvgSpeedPed) return false;
      if (AbnormalAccThreshold != other.AbnormalAccThreshold) return false;
      if (AbnormalAccThresholdPed != other.AbnormalAccThresholdPed) return false;
      if (AbnormalVelocityHeadingAngleThreshold != other.AbnormalVelocityHeadingAngleThreshold) return false;
      if (ClappingVelocity != other.ClappingVelocity) return false;
      if (WorldMeanVelocityDuration != other.WorldMeanVelocityDuration) return false;
      if (TrackedLife != other.TrackedLife) return false;
      if (TypeFilterVar != other.TypeFilterVar) return false;
      if (LargeVelocityRatio != other.LargeVelocityRatio) return false;
      if (TooLargeVelocityRatio != other.TooLargeVelocityRatio) return false;
      if (MeanFilterWindow != other.MeanFilterWindow) return false;
      if (DirectionFilterRatio != other.DirectionFilterRatio) return false;
      if (DisplacementThetaVar != other.DisplacementThetaVar) return false;
      if (VelocityThetaVar != other.VelocityThetaVar) return false;
      if (StableMovingSpeed != other.StableMovingSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VelocityThreshold != 0F) hash ^= VelocityThreshold.GetHashCode();
      if (VelocityOutputDelay != 0) hash ^= VelocityOutputDelay.GetHashCode();
      if (worldCenter_ != null) hash ^= WorldCenter.GetHashCode();
      if (imageCenter_ != null) hash ^= ImageCenter.GetHashCode();
      if (ImageWhUpdateRate != 0F) hash ^= ImageWhUpdateRate.GetHashCode();
      if (WorldLhwHistory != 0) hash ^= WorldLhwHistory.GetHashCode();
      if (HeightDiffRatio != 0F) hash ^= HeightDiffRatio.GetHashCode();
      if (WorldStateHistory != 0) hash ^= WorldStateHistory.GetHashCode();
      if (MinCachedWorldStateHistorySize != 0) hash ^= MinCachedWorldStateHistorySize.GetHashCode();
      if (MinCachedVelocitySize != 0) hash ^= MinCachedVelocitySize.GetHashCode();
      if (MinCachedPositionSize != 0) hash ^= MinCachedPositionSize.GetHashCode();
      if (CalcAvgPositionWindowSize != 0) hash ^= CalcAvgPositionWindowSize.GetHashCode();
      if (StaticSpeedThreshold != 0F) hash ^= StaticSpeedThreshold.GetHashCode();
      if (StaticSpeedThresholdPed != 0F) hash ^= StaticSpeedThresholdPed.GetHashCode();
      if (MinMovingAvgSpeed != 0F) hash ^= MinMovingAvgSpeed.GetHashCode();
      if (MinMovingAvgSpeedPed != 0F) hash ^= MinMovingAvgSpeedPed.GetHashCode();
      if (AbnormalAccThreshold != 0F) hash ^= AbnormalAccThreshold.GetHashCode();
      if (AbnormalAccThresholdPed != 0F) hash ^= AbnormalAccThresholdPed.GetHashCode();
      if (AbnormalVelocityHeadingAngleThreshold != 0F) hash ^= AbnormalVelocityHeadingAngleThreshold.GetHashCode();
      if (ClappingVelocity != false) hash ^= ClappingVelocity.GetHashCode();
      if (WorldMeanVelocityDuration != 0) hash ^= WorldMeanVelocityDuration.GetHashCode();
      if (TrackedLife != 0) hash ^= TrackedLife.GetHashCode();
      if (TypeFilterVar != 0F) hash ^= TypeFilterVar.GetHashCode();
      if (LargeVelocityRatio != 0F) hash ^= LargeVelocityRatio.GetHashCode();
      if (TooLargeVelocityRatio != 0F) hash ^= TooLargeVelocityRatio.GetHashCode();
      if (MeanFilterWindow != 0) hash ^= MeanFilterWindow.GetHashCode();
      if (DirectionFilterRatio != 0F) hash ^= DirectionFilterRatio.GetHashCode();
      if (DisplacementThetaVar != 0F) hash ^= DisplacementThetaVar.GetHashCode();
      if (VelocityThetaVar != 0F) hash ^= VelocityThetaVar.GetHashCode();
      if (StableMovingSpeed != 0F) hash ^= StableMovingSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VelocityThreshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(VelocityThreshold);
      }
      if (VelocityOutputDelay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VelocityOutputDelay);
      }
      if (worldCenter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WorldCenter);
      }
      if (imageCenter_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ImageCenter);
      }
      if (ImageWhUpdateRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ImageWhUpdateRate);
      }
      if (WorldLhwHistory != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WorldLhwHistory);
      }
      if (HeightDiffRatio != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(HeightDiffRatio);
      }
      if (WorldStateHistory != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WorldStateHistory);
      }
      if (MinCachedWorldStateHistorySize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinCachedWorldStateHistorySize);
      }
      if (MinCachedVelocitySize != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MinCachedVelocitySize);
      }
      if (MinCachedPositionSize != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinCachedPositionSize);
      }
      if (CalcAvgPositionWindowSize != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CalcAvgPositionWindowSize);
      }
      if (StaticSpeedThreshold != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(StaticSpeedThreshold);
      }
      if (StaticSpeedThresholdPed != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(StaticSpeedThresholdPed);
      }
      if (MinMovingAvgSpeed != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(MinMovingAvgSpeed);
      }
      if (MinMovingAvgSpeedPed != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(MinMovingAvgSpeedPed);
      }
      if (AbnormalAccThreshold != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(AbnormalAccThreshold);
      }
      if (AbnormalAccThresholdPed != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AbnormalAccThresholdPed);
      }
      if (AbnormalVelocityHeadingAngleThreshold != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(AbnormalVelocityHeadingAngleThreshold);
      }
      if (ClappingVelocity != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(ClappingVelocity);
      }
      if (WorldMeanVelocityDuration != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(WorldMeanVelocityDuration);
      }
      if (TrackedLife != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(TrackedLife);
      }
      if (TypeFilterVar != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(TypeFilterVar);
      }
      if (LargeVelocityRatio != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(LargeVelocityRatio);
      }
      if (TooLargeVelocityRatio != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(TooLargeVelocityRatio);
      }
      if (MeanFilterWindow != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MeanFilterWindow);
      }
      if (DirectionFilterRatio != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(DirectionFilterRatio);
      }
      if (DisplacementThetaVar != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(DisplacementThetaVar);
      }
      if (VelocityThetaVar != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(VelocityThetaVar);
      }
      if (StableMovingSpeed != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(StableMovingSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VelocityThreshold != 0F) {
        size += 1 + 4;
      }
      if (VelocityOutputDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelocityOutputDelay);
      }
      if (worldCenter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldCenter);
      }
      if (imageCenter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageCenter);
      }
      if (ImageWhUpdateRate != 0F) {
        size += 1 + 4;
      }
      if (WorldLhwHistory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldLhwHistory);
      }
      if (HeightDiffRatio != 0F) {
        size += 1 + 4;
      }
      if (WorldStateHistory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldStateHistory);
      }
      if (MinCachedWorldStateHistorySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCachedWorldStateHistorySize);
      }
      if (MinCachedVelocitySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCachedVelocitySize);
      }
      if (MinCachedPositionSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCachedPositionSize);
      }
      if (CalcAvgPositionWindowSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CalcAvgPositionWindowSize);
      }
      if (StaticSpeedThreshold != 0F) {
        size += 1 + 4;
      }
      if (StaticSpeedThresholdPed != 0F) {
        size += 1 + 4;
      }
      if (MinMovingAvgSpeed != 0F) {
        size += 1 + 4;
      }
      if (MinMovingAvgSpeedPed != 0F) {
        size += 2 + 4;
      }
      if (AbnormalAccThreshold != 0F) {
        size += 2 + 4;
      }
      if (AbnormalAccThresholdPed != 0F) {
        size += 2 + 4;
      }
      if (AbnormalVelocityHeadingAngleThreshold != 0F) {
        size += 2 + 4;
      }
      if (ClappingVelocity != false) {
        size += 2 + 1;
      }
      if (WorldMeanVelocityDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WorldMeanVelocityDuration);
      }
      if (TrackedLife != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TrackedLife);
      }
      if (TypeFilterVar != 0F) {
        size += 2 + 4;
      }
      if (LargeVelocityRatio != 0F) {
        size += 2 + 4;
      }
      if (TooLargeVelocityRatio != 0F) {
        size += 2 + 4;
      }
      if (MeanFilterWindow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MeanFilterWindow);
      }
      if (DirectionFilterRatio != 0F) {
        size += 2 + 4;
      }
      if (DisplacementThetaVar != 0F) {
        size += 2 + 4;
      }
      if (VelocityThetaVar != 0F) {
        size += 2 + 4;
      }
      if (StableMovingSpeed != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetParam other) {
      if (other == null) {
        return;
      }
      if (other.VelocityThreshold != 0F) {
        VelocityThreshold = other.VelocityThreshold;
      }
      if (other.VelocityOutputDelay != 0) {
        VelocityOutputDelay = other.VelocityOutputDelay;
      }
      if (other.worldCenter_ != null) {
        if (worldCenter_ == null) {
          worldCenter_ = new global::Apollo.Perception.Camera.Omt.KalmanParam();
        }
        WorldCenter.MergeFrom(other.WorldCenter);
      }
      if (other.imageCenter_ != null) {
        if (imageCenter_ == null) {
          imageCenter_ = new global::Apollo.Perception.Camera.Omt.KalmanParam();
        }
        ImageCenter.MergeFrom(other.ImageCenter);
      }
      if (other.ImageWhUpdateRate != 0F) {
        ImageWhUpdateRate = other.ImageWhUpdateRate;
      }
      if (other.WorldLhwHistory != 0) {
        WorldLhwHistory = other.WorldLhwHistory;
      }
      if (other.HeightDiffRatio != 0F) {
        HeightDiffRatio = other.HeightDiffRatio;
      }
      if (other.WorldStateHistory != 0) {
        WorldStateHistory = other.WorldStateHistory;
      }
      if (other.MinCachedWorldStateHistorySize != 0) {
        MinCachedWorldStateHistorySize = other.MinCachedWorldStateHistorySize;
      }
      if (other.MinCachedVelocitySize != 0) {
        MinCachedVelocitySize = other.MinCachedVelocitySize;
      }
      if (other.MinCachedPositionSize != 0) {
        MinCachedPositionSize = other.MinCachedPositionSize;
      }
      if (other.CalcAvgPositionWindowSize != 0) {
        CalcAvgPositionWindowSize = other.CalcAvgPositionWindowSize;
      }
      if (other.StaticSpeedThreshold != 0F) {
        StaticSpeedThreshold = other.StaticSpeedThreshold;
      }
      if (other.StaticSpeedThresholdPed != 0F) {
        StaticSpeedThresholdPed = other.StaticSpeedThresholdPed;
      }
      if (other.MinMovingAvgSpeed != 0F) {
        MinMovingAvgSpeed = other.MinMovingAvgSpeed;
      }
      if (other.MinMovingAvgSpeedPed != 0F) {
        MinMovingAvgSpeedPed = other.MinMovingAvgSpeedPed;
      }
      if (other.AbnormalAccThreshold != 0F) {
        AbnormalAccThreshold = other.AbnormalAccThreshold;
      }
      if (other.AbnormalAccThresholdPed != 0F) {
        AbnormalAccThresholdPed = other.AbnormalAccThresholdPed;
      }
      if (other.AbnormalVelocityHeadingAngleThreshold != 0F) {
        AbnormalVelocityHeadingAngleThreshold = other.AbnormalVelocityHeadingAngleThreshold;
      }
      if (other.ClappingVelocity != false) {
        ClappingVelocity = other.ClappingVelocity;
      }
      if (other.WorldMeanVelocityDuration != 0) {
        WorldMeanVelocityDuration = other.WorldMeanVelocityDuration;
      }
      if (other.TrackedLife != 0) {
        TrackedLife = other.TrackedLife;
      }
      if (other.TypeFilterVar != 0F) {
        TypeFilterVar = other.TypeFilterVar;
      }
      if (other.LargeVelocityRatio != 0F) {
        LargeVelocityRatio = other.LargeVelocityRatio;
      }
      if (other.TooLargeVelocityRatio != 0F) {
        TooLargeVelocityRatio = other.TooLargeVelocityRatio;
      }
      if (other.MeanFilterWindow != 0) {
        MeanFilterWindow = other.MeanFilterWindow;
      }
      if (other.DirectionFilterRatio != 0F) {
        DirectionFilterRatio = other.DirectionFilterRatio;
      }
      if (other.DisplacementThetaVar != 0F) {
        DisplacementThetaVar = other.DisplacementThetaVar;
      }
      if (other.VelocityThetaVar != 0F) {
        VelocityThetaVar = other.VelocityThetaVar;
      }
      if (other.StableMovingSpeed != 0F) {
        StableMovingSpeed = other.StableMovingSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            VelocityThreshold = input.ReadFloat();
            break;
          }
          case 16: {
            VelocityOutputDelay = input.ReadInt32();
            break;
          }
          case 26: {
            if (worldCenter_ == null) {
              worldCenter_ = new global::Apollo.Perception.Camera.Omt.KalmanParam();
            }
            input.ReadMessage(worldCenter_);
            break;
          }
          case 34: {
            if (imageCenter_ == null) {
              imageCenter_ = new global::Apollo.Perception.Camera.Omt.KalmanParam();
            }
            input.ReadMessage(imageCenter_);
            break;
          }
          case 45: {
            ImageWhUpdateRate = input.ReadFloat();
            break;
          }
          case 48: {
            WorldLhwHistory = input.ReadInt32();
            break;
          }
          case 61: {
            HeightDiffRatio = input.ReadFloat();
            break;
          }
          case 64: {
            WorldStateHistory = input.ReadInt32();
            break;
          }
          case 72: {
            MinCachedWorldStateHistorySize = input.ReadInt32();
            break;
          }
          case 80: {
            MinCachedVelocitySize = input.ReadInt32();
            break;
          }
          case 88: {
            MinCachedPositionSize = input.ReadInt32();
            break;
          }
          case 96: {
            CalcAvgPositionWindowSize = input.ReadInt32();
            break;
          }
          case 109: {
            StaticSpeedThreshold = input.ReadFloat();
            break;
          }
          case 117: {
            StaticSpeedThresholdPed = input.ReadFloat();
            break;
          }
          case 125: {
            MinMovingAvgSpeed = input.ReadFloat();
            break;
          }
          case 133: {
            MinMovingAvgSpeedPed = input.ReadFloat();
            break;
          }
          case 141: {
            AbnormalAccThreshold = input.ReadFloat();
            break;
          }
          case 149: {
            AbnormalAccThresholdPed = input.ReadFloat();
            break;
          }
          case 157: {
            AbnormalVelocityHeadingAngleThreshold = input.ReadFloat();
            break;
          }
          case 160: {
            ClappingVelocity = input.ReadBool();
            break;
          }
          case 168: {
            WorldMeanVelocityDuration = input.ReadInt32();
            break;
          }
          case 176: {
            TrackedLife = input.ReadInt32();
            break;
          }
          case 189: {
            TypeFilterVar = input.ReadFloat();
            break;
          }
          case 197: {
            LargeVelocityRatio = input.ReadFloat();
            break;
          }
          case 205: {
            TooLargeVelocityRatio = input.ReadFloat();
            break;
          }
          case 208: {
            MeanFilterWindow = input.ReadInt32();
            break;
          }
          case 221: {
            DirectionFilterRatio = input.ReadFloat();
            break;
          }
          case 229: {
            DisplacementThetaVar = input.ReadFloat();
            break;
          }
          case 237: {
            VelocityThetaVar = input.ReadFloat();
            break;
          }
          case 245: {
            StableMovingSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReferenceParam : pb::IMessage<ReferenceParam> {
    private static readonly pb::MessageParser<ReferenceParam> _parser = new pb::MessageParser<ReferenceParam>(() => new ReferenceParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferenceParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Omt.OmtReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceParam(ReferenceParam other) : this() {
      margin_ = other.margin_;
      minAllowHeight_ = other.minAllowHeight_;
      areaDecay_ = other.areaDecay_;
      downSampling_ = other.downSampling_;
      heightDiffRatio_ = other.heightDiffRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceParam Clone() {
      return new ReferenceParam(this);
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 1;
    private int margin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "min_allow_height" field.</summary>
    public const int MinAllowHeightFieldNumber = 2;
    private int minAllowHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinAllowHeight {
      get { return minAllowHeight_; }
      set {
        minAllowHeight_ = value;
      }
    }

    /// <summary>Field number for the "area_decay" field.</summary>
    public const int AreaDecayFieldNumber = 3;
    private float areaDecay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AreaDecay {
      get { return areaDecay_; }
      set {
        areaDecay_ = value;
      }
    }

    /// <summary>Field number for the "down_sampling" field.</summary>
    public const int DownSamplingFieldNumber = 4;
    private int downSampling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownSampling {
      get { return downSampling_; }
      set {
        downSampling_ = value;
      }
    }

    /// <summary>Field number for the "height_diff_ratio" field.</summary>
    public const int HeightDiffRatioFieldNumber = 5;
    private float heightDiffRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightDiffRatio {
      get { return heightDiffRatio_; }
      set {
        heightDiffRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferenceParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferenceParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Margin != other.Margin) return false;
      if (MinAllowHeight != other.MinAllowHeight) return false;
      if (AreaDecay != other.AreaDecay) return false;
      if (DownSampling != other.DownSampling) return false;
      if (HeightDiffRatio != other.HeightDiffRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Margin != 0) hash ^= Margin.GetHashCode();
      if (MinAllowHeight != 0) hash ^= MinAllowHeight.GetHashCode();
      if (AreaDecay != 0F) hash ^= AreaDecay.GetHashCode();
      if (DownSampling != 0) hash ^= DownSampling.GetHashCode();
      if (HeightDiffRatio != 0F) hash ^= HeightDiffRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Margin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Margin);
      }
      if (MinAllowHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinAllowHeight);
      }
      if (AreaDecay != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AreaDecay);
      }
      if (DownSampling != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DownSampling);
      }
      if (HeightDiffRatio != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HeightDiffRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Margin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Margin);
      }
      if (MinAllowHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinAllowHeight);
      }
      if (AreaDecay != 0F) {
        size += 1 + 4;
      }
      if (DownSampling != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DownSampling);
      }
      if (HeightDiffRatio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferenceParam other) {
      if (other == null) {
        return;
      }
      if (other.Margin != 0) {
        Margin = other.Margin;
      }
      if (other.MinAllowHeight != 0) {
        MinAllowHeight = other.MinAllowHeight;
      }
      if (other.AreaDecay != 0F) {
        AreaDecay = other.AreaDecay;
      }
      if (other.DownSampling != 0) {
        DownSampling = other.DownSampling;
      }
      if (other.HeightDiffRatio != 0F) {
        HeightDiffRatio = other.HeightDiffRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Margin = input.ReadInt32();
            break;
          }
          case 16: {
            MinAllowHeight = input.ReadInt32();
            break;
          }
          case 29: {
            AreaDecay = input.ReadFloat();
            break;
          }
          case 32: {
            DownSampling = input.ReadInt32();
            break;
          }
          case 45: {
            HeightDiffRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeightParam : pb::IMessage<WeightParam> {
    private static readonly pb::MessageParser<WeightParam> _parser = new pb::MessageParser<WeightParam>(() => new WeightParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeightParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Omt.OmtReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightParam(WeightParam other) : this() {
      appearance_ = other.appearance_;
      motion_ = other.motion_;
      shape_ = other.shape_;
      tracklet_ = other.tracklet_;
      overlap_ = other.overlap_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightParam Clone() {
      return new WeightParam(this);
    }

    /// <summary>Field number for the "appearance" field.</summary>
    public const int AppearanceFieldNumber = 1;
    private float appearance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Appearance {
      get { return appearance_; }
      set {
        appearance_ = value;
      }
    }

    /// <summary>Field number for the "motion" field.</summary>
    public const int MotionFieldNumber = 2;
    private float motion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Motion {
      get { return motion_; }
      set {
        motion_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 3;
    private float shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "tracklet" field.</summary>
    public const int TrackletFieldNumber = 4;
    private float tracklet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Tracklet {
      get { return tracklet_; }
      set {
        tracklet_ = value;
      }
    }

    /// <summary>Field number for the "overlap" field.</summary>
    public const int OverlapFieldNumber = 5;
    private float overlap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Overlap {
      get { return overlap_; }
      set {
        overlap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeightParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeightParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Appearance != other.Appearance) return false;
      if (Motion != other.Motion) return false;
      if (Shape != other.Shape) return false;
      if (Tracklet != other.Tracklet) return false;
      if (Overlap != other.Overlap) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Appearance != 0F) hash ^= Appearance.GetHashCode();
      if (Motion != 0F) hash ^= Motion.GetHashCode();
      if (Shape != 0F) hash ^= Shape.GetHashCode();
      if (Tracklet != 0F) hash ^= Tracklet.GetHashCode();
      if (Overlap != 0F) hash ^= Overlap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Appearance != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Appearance);
      }
      if (Motion != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Motion);
      }
      if (Shape != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Shape);
      }
      if (Tracklet != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Tracklet);
      }
      if (Overlap != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Overlap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Appearance != 0F) {
        size += 1 + 4;
      }
      if (Motion != 0F) {
        size += 1 + 4;
      }
      if (Shape != 0F) {
        size += 1 + 4;
      }
      if (Tracklet != 0F) {
        size += 1 + 4;
      }
      if (Overlap != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeightParam other) {
      if (other == null) {
        return;
      }
      if (other.Appearance != 0F) {
        Appearance = other.Appearance;
      }
      if (other.Motion != 0F) {
        Motion = other.Motion;
      }
      if (other.Shape != 0F) {
        Shape = other.Shape;
      }
      if (other.Tracklet != 0F) {
        Tracklet = other.Tracklet;
      }
      if (other.Overlap != 0F) {
        Overlap = other.Overlap;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Appearance = input.ReadFloat();
            break;
          }
          case 21: {
            Motion = input.ReadFloat();
            break;
          }
          case 29: {
            Shape = input.ReadFloat();
            break;
          }
          case 37: {
            Tracklet = input.ReadFloat();
            break;
          }
          case 45: {
            Overlap = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OmtParam : pb::IMessage<OmtParam> {
    private static readonly pb::MessageParser<OmtParam> _parser = new pb::MessageParser<OmtParam>(() => new OmtParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OmtParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Omt.OmtReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OmtParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OmtParam(OmtParam other) : this() {
      imgCapability_ = other.imgCapability_;
      lostAge_ = other.lostAge_;
      reserveAge_ = other.reserveAge_;
      WeightSameCamera = other.weightSameCamera_ != null ? other.WeightSameCamera.Clone() : null;
      WeightDiffCamera = other.weightDiffCamera_ != null ? other.WeightDiffCamera.Clone() : null;
      border_ = other.border_;
      targetThresh_ = other.targetThresh_;
      correctType_ = other.correctType_;
      TargetParam = other.targetParam_ != null ? other.TargetParam.Clone() : null;
      minInitHeightRatio_ = other.minInitHeightRatio_;
      targetCombineIouThreshold_ = other.targetCombineIouThreshold_;
      fusionTargetThresh_ = other.fusionTargetThresh_;
      imageDisplacement_ = other.imageDisplacement_;
      abnormalMovement_ = other.abnormalMovement_;
      sameTsEps_ = other.sameTsEps_;
      Reference = other.reference_ != null ? other.Reference.Clone() : null;
      typeChangeCost_ = other.typeChangeCost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OmtParam Clone() {
      return new OmtParam(this);
    }

    /// <summary>Field number for the "img_capability" field.</summary>
    public const int ImgCapabilityFieldNumber = 1;
    private int imgCapability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImgCapability {
      get { return imgCapability_; }
      set {
        imgCapability_ = value;
      }
    }

    /// <summary>Field number for the "lost_age" field.</summary>
    public const int LostAgeFieldNumber = 2;
    private int lostAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LostAge {
      get { return lostAge_; }
      set {
        lostAge_ = value;
      }
    }

    /// <summary>Field number for the "reserve_age" field.</summary>
    public const int ReserveAgeFieldNumber = 3;
    private int reserveAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReserveAge {
      get { return reserveAge_; }
      set {
        reserveAge_ = value;
      }
    }

    /// <summary>Field number for the "weight_same_camera" field.</summary>
    public const int WeightSameCameraFieldNumber = 4;
    private global::Apollo.Perception.Camera.Omt.WeightParam weightSameCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Omt.WeightParam WeightSameCamera {
      get { return weightSameCamera_; }
      set {
        weightSameCamera_ = value;
      }
    }

    /// <summary>Field number for the "weight_diff_camera" field.</summary>
    public const int WeightDiffCameraFieldNumber = 5;
    private global::Apollo.Perception.Camera.Omt.WeightParam weightDiffCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Omt.WeightParam WeightDiffCamera {
      get { return weightDiffCamera_; }
      set {
        weightDiffCamera_ = value;
      }
    }

    /// <summary>Field number for the "border" field.</summary>
    public const int BorderFieldNumber = 9;
    private float border_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Border {
      get { return border_; }
      set {
        border_ = value;
      }
    }

    /// <summary>Field number for the "target_thresh" field.</summary>
    public const int TargetThreshFieldNumber = 10;
    private float targetThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetThresh {
      get { return targetThresh_; }
      set {
        targetThresh_ = value;
      }
    }

    /// <summary>Field number for the "correct_type" field.</summary>
    public const int CorrectTypeFieldNumber = 11;
    private bool correctType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CorrectType {
      get { return correctType_; }
      set {
        correctType_ = value;
      }
    }

    /// <summary>Field number for the "target_param" field.</summary>
    public const int TargetParamFieldNumber = 12;
    private global::Apollo.Perception.Camera.Omt.TargetParam targetParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Omt.TargetParam TargetParam {
      get { return targetParam_; }
      set {
        targetParam_ = value;
      }
    }

    /// <summary>Field number for the "min_init_height_ratio" field.</summary>
    public const int MinInitHeightRatioFieldNumber = 13;
    private float minInitHeightRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinInitHeightRatio {
      get { return minInitHeightRatio_; }
      set {
        minInitHeightRatio_ = value;
      }
    }

    /// <summary>Field number for the "target_combine_iou_threshold" field.</summary>
    public const int TargetCombineIouThresholdFieldNumber = 14;
    private float targetCombineIouThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetCombineIouThreshold {
      get { return targetCombineIouThreshold_; }
      set {
        targetCombineIouThreshold_ = value;
      }
    }

    /// <summary>Field number for the "fusion_target_thresh" field.</summary>
    public const int FusionTargetThreshFieldNumber = 15;
    private float fusionTargetThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FusionTargetThresh {
      get { return fusionTargetThresh_; }
      set {
        fusionTargetThresh_ = value;
      }
    }

    /// <summary>Field number for the "image_displacement" field.</summary>
    public const int ImageDisplacementFieldNumber = 16;
    private float imageDisplacement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ImageDisplacement {
      get { return imageDisplacement_; }
      set {
        imageDisplacement_ = value;
      }
    }

    /// <summary>Field number for the "abnormal_movement" field.</summary>
    public const int AbnormalMovementFieldNumber = 17;
    private float abnormalMovement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AbnormalMovement {
      get { return abnormalMovement_; }
      set {
        abnormalMovement_ = value;
      }
    }

    /// <summary>Field number for the "same_ts_eps" field.</summary>
    public const int SameTsEpsFieldNumber = 18;
    private double sameTsEps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SameTsEps {
      get { return sameTsEps_; }
      set {
        sameTsEps_ = value;
      }
    }

    /// <summary>Field number for the "reference" field.</summary>
    public const int ReferenceFieldNumber = 19;
    private global::Apollo.Perception.Camera.Omt.ReferenceParam reference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Omt.ReferenceParam Reference {
      get { return reference_; }
      set {
        reference_ = value;
      }
    }

    /// <summary>Field number for the "type_change_cost" field.</summary>
    public const int TypeChangeCostFieldNumber = 20;
    private string typeChangeCost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeChangeCost {
      get { return typeChangeCost_; }
      set {
        typeChangeCost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OmtParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OmtParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImgCapability != other.ImgCapability) return false;
      if (LostAge != other.LostAge) return false;
      if (ReserveAge != other.ReserveAge) return false;
      if (!object.Equals(WeightSameCamera, other.WeightSameCamera)) return false;
      if (!object.Equals(WeightDiffCamera, other.WeightDiffCamera)) return false;
      if (Border != other.Border) return false;
      if (TargetThresh != other.TargetThresh) return false;
      if (CorrectType != other.CorrectType) return false;
      if (!object.Equals(TargetParam, other.TargetParam)) return false;
      if (MinInitHeightRatio != other.MinInitHeightRatio) return false;
      if (TargetCombineIouThreshold != other.TargetCombineIouThreshold) return false;
      if (FusionTargetThresh != other.FusionTargetThresh) return false;
      if (ImageDisplacement != other.ImageDisplacement) return false;
      if (AbnormalMovement != other.AbnormalMovement) return false;
      if (SameTsEps != other.SameTsEps) return false;
      if (!object.Equals(Reference, other.Reference)) return false;
      if (TypeChangeCost != other.TypeChangeCost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImgCapability != 0) hash ^= ImgCapability.GetHashCode();
      if (LostAge != 0) hash ^= LostAge.GetHashCode();
      if (ReserveAge != 0) hash ^= ReserveAge.GetHashCode();
      if (weightSameCamera_ != null) hash ^= WeightSameCamera.GetHashCode();
      if (weightDiffCamera_ != null) hash ^= WeightDiffCamera.GetHashCode();
      if (Border != 0F) hash ^= Border.GetHashCode();
      if (TargetThresh != 0F) hash ^= TargetThresh.GetHashCode();
      if (CorrectType != false) hash ^= CorrectType.GetHashCode();
      if (targetParam_ != null) hash ^= TargetParam.GetHashCode();
      if (MinInitHeightRatio != 0F) hash ^= MinInitHeightRatio.GetHashCode();
      if (TargetCombineIouThreshold != 0F) hash ^= TargetCombineIouThreshold.GetHashCode();
      if (FusionTargetThresh != 0F) hash ^= FusionTargetThresh.GetHashCode();
      if (ImageDisplacement != 0F) hash ^= ImageDisplacement.GetHashCode();
      if (AbnormalMovement != 0F) hash ^= AbnormalMovement.GetHashCode();
      if (SameTsEps != 0D) hash ^= SameTsEps.GetHashCode();
      if (reference_ != null) hash ^= Reference.GetHashCode();
      if (TypeChangeCost.Length != 0) hash ^= TypeChangeCost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImgCapability != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImgCapability);
      }
      if (LostAge != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LostAge);
      }
      if (ReserveAge != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReserveAge);
      }
      if (weightSameCamera_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeightSameCamera);
      }
      if (weightDiffCamera_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WeightDiffCamera);
      }
      if (Border != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Border);
      }
      if (TargetThresh != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(TargetThresh);
      }
      if (CorrectType != false) {
        output.WriteRawTag(88);
        output.WriteBool(CorrectType);
      }
      if (targetParam_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TargetParam);
      }
      if (MinInitHeightRatio != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(MinInitHeightRatio);
      }
      if (TargetCombineIouThreshold != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(TargetCombineIouThreshold);
      }
      if (FusionTargetThresh != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(FusionTargetThresh);
      }
      if (ImageDisplacement != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ImageDisplacement);
      }
      if (AbnormalMovement != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(AbnormalMovement);
      }
      if (SameTsEps != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(SameTsEps);
      }
      if (reference_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Reference);
      }
      if (TypeChangeCost.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TypeChangeCost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImgCapability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImgCapability);
      }
      if (LostAge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LostAge);
      }
      if (ReserveAge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReserveAge);
      }
      if (weightSameCamera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightSameCamera);
      }
      if (weightDiffCamera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightDiffCamera);
      }
      if (Border != 0F) {
        size += 1 + 4;
      }
      if (TargetThresh != 0F) {
        size += 1 + 4;
      }
      if (CorrectType != false) {
        size += 1 + 1;
      }
      if (targetParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetParam);
      }
      if (MinInitHeightRatio != 0F) {
        size += 1 + 4;
      }
      if (TargetCombineIouThreshold != 0F) {
        size += 1 + 4;
      }
      if (FusionTargetThresh != 0F) {
        size += 1 + 4;
      }
      if (ImageDisplacement != 0F) {
        size += 2 + 4;
      }
      if (AbnormalMovement != 0F) {
        size += 2 + 4;
      }
      if (SameTsEps != 0D) {
        size += 2 + 8;
      }
      if (reference_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Reference);
      }
      if (TypeChangeCost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TypeChangeCost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OmtParam other) {
      if (other == null) {
        return;
      }
      if (other.ImgCapability != 0) {
        ImgCapability = other.ImgCapability;
      }
      if (other.LostAge != 0) {
        LostAge = other.LostAge;
      }
      if (other.ReserveAge != 0) {
        ReserveAge = other.ReserveAge;
      }
      if (other.weightSameCamera_ != null) {
        if (weightSameCamera_ == null) {
          weightSameCamera_ = new global::Apollo.Perception.Camera.Omt.WeightParam();
        }
        WeightSameCamera.MergeFrom(other.WeightSameCamera);
      }
      if (other.weightDiffCamera_ != null) {
        if (weightDiffCamera_ == null) {
          weightDiffCamera_ = new global::Apollo.Perception.Camera.Omt.WeightParam();
        }
        WeightDiffCamera.MergeFrom(other.WeightDiffCamera);
      }
      if (other.Border != 0F) {
        Border = other.Border;
      }
      if (other.TargetThresh != 0F) {
        TargetThresh = other.TargetThresh;
      }
      if (other.CorrectType != false) {
        CorrectType = other.CorrectType;
      }
      if (other.targetParam_ != null) {
        if (targetParam_ == null) {
          targetParam_ = new global::Apollo.Perception.Camera.Omt.TargetParam();
        }
        TargetParam.MergeFrom(other.TargetParam);
      }
      if (other.MinInitHeightRatio != 0F) {
        MinInitHeightRatio = other.MinInitHeightRatio;
      }
      if (other.TargetCombineIouThreshold != 0F) {
        TargetCombineIouThreshold = other.TargetCombineIouThreshold;
      }
      if (other.FusionTargetThresh != 0F) {
        FusionTargetThresh = other.FusionTargetThresh;
      }
      if (other.ImageDisplacement != 0F) {
        ImageDisplacement = other.ImageDisplacement;
      }
      if (other.AbnormalMovement != 0F) {
        AbnormalMovement = other.AbnormalMovement;
      }
      if (other.SameTsEps != 0D) {
        SameTsEps = other.SameTsEps;
      }
      if (other.reference_ != null) {
        if (reference_ == null) {
          reference_ = new global::Apollo.Perception.Camera.Omt.ReferenceParam();
        }
        Reference.MergeFrom(other.Reference);
      }
      if (other.TypeChangeCost.Length != 0) {
        TypeChangeCost = other.TypeChangeCost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ImgCapability = input.ReadInt32();
            break;
          }
          case 16: {
            LostAge = input.ReadInt32();
            break;
          }
          case 24: {
            ReserveAge = input.ReadInt32();
            break;
          }
          case 34: {
            if (weightSameCamera_ == null) {
              weightSameCamera_ = new global::Apollo.Perception.Camera.Omt.WeightParam();
            }
            input.ReadMessage(weightSameCamera_);
            break;
          }
          case 42: {
            if (weightDiffCamera_ == null) {
              weightDiffCamera_ = new global::Apollo.Perception.Camera.Omt.WeightParam();
            }
            input.ReadMessage(weightDiffCamera_);
            break;
          }
          case 77: {
            Border = input.ReadFloat();
            break;
          }
          case 85: {
            TargetThresh = input.ReadFloat();
            break;
          }
          case 88: {
            CorrectType = input.ReadBool();
            break;
          }
          case 98: {
            if (targetParam_ == null) {
              targetParam_ = new global::Apollo.Perception.Camera.Omt.TargetParam();
            }
            input.ReadMessage(targetParam_);
            break;
          }
          case 109: {
            MinInitHeightRatio = input.ReadFloat();
            break;
          }
          case 117: {
            TargetCombineIouThreshold = input.ReadFloat();
            break;
          }
          case 125: {
            FusionTargetThresh = input.ReadFloat();
            break;
          }
          case 133: {
            ImageDisplacement = input.ReadFloat();
            break;
          }
          case 141: {
            AbnormalMovement = input.ReadFloat();
            break;
          }
          case 145: {
            SameTsEps = input.ReadDouble();
            break;
          }
          case 154: {
            if (reference_ == null) {
              reference_ = new global::Apollo.Perception.Camera.Omt.ReferenceParam();
            }
            input.ReadMessage(reference_);
            break;
          }
          case 162: {
            TypeChangeCost = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
