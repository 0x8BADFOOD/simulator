// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/traffic_light/detector/detection/detection.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Camera.TrafficLight.Detection {

  /// <summary>Holder for reflection information generated from modules/perception/camera/lib/traffic_light/detector/detection/detection.proto</summary>
  public static partial class DetectionReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/camera/lib/traffic_light/detector/detection/detection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DetectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ck5tb2R1bGVzL3BlcmNlcHRpb24vY2FtZXJhL2xpYi90cmFmZmljX2xpZ2h0",
            "L2RldGVjdG9yL2RldGVjdGlvbi9kZXRlY3Rpb24ucHJvdG8SMGFwb2xsby5w",
            "ZXJjZXB0aW9uLmNhbWVyYS50cmFmZmljX2xpZ2h0LmRldGVjdGlvbiLIAgoO",
            "RGV0ZWN0aW9uUGFyYW0SFQoNbWluX2Nyb3Bfc2l6ZRgBIAEoBRITCgtjcm9w",
            "X21ldGhvZBgCIAEoBRIOCgZtZWFuX2IYAyABKAISDgoGbWVhbl9nGAQgASgC",
            "Eg4KBm1lYW5fchgFIAEoAhIOCgZpc19iZ3IYBiABKAgSEgoKY3JvcF9zY2Fs",
            "ZRgHIAEoAhIXCg9pbnB1dF9ibG9iX25hbWUYCCABKAkSGgoSaW1fcGFyYW1f",
            "YmxvYl9uYW1lGAkgASgJEhgKEG91dHB1dF9ibG9iX25hbWUYCiABKAkSEgoK",
            "bW9kZWxfbmFtZRgLIAEoCRISCgptb2RlbF90eXBlGAwgASgJEhIKCnByb3Rv",
            "X2ZpbGUYDSABKAkSEwoLd2VpZ2h0X2ZpbGUYDiABKAkSFgoObWF4X2JhdGNo",
            "X3NpemUYDyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.TrafficLight.Detection.DetectionParam), global::Apollo.Perception.Camera.TrafficLight.Detection.DetectionParam.Parser, new[]{ "MinCropSize", "CropMethod", "MeanB", "MeanG", "MeanR", "IsBgr", "CropScale", "InputBlobName", "ImParamBlobName", "OutputBlobName", "ModelName", "ModelType", "ProtoFile", "WeightFile", "MaxBatchSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DetectionParam : pb::IMessage<DetectionParam> {
    private static readonly pb::MessageParser<DetectionParam> _parser = new pb::MessageParser<DetectionParam>(() => new DetectionParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetectionParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.TrafficLight.Detection.DetectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionParam(DetectionParam other) : this() {
      minCropSize_ = other.minCropSize_;
      cropMethod_ = other.cropMethod_;
      meanB_ = other.meanB_;
      meanG_ = other.meanG_;
      meanR_ = other.meanR_;
      isBgr_ = other.isBgr_;
      cropScale_ = other.cropScale_;
      inputBlobName_ = other.inputBlobName_;
      imParamBlobName_ = other.imParamBlobName_;
      outputBlobName_ = other.outputBlobName_;
      modelName_ = other.modelName_;
      modelType_ = other.modelType_;
      protoFile_ = other.protoFile_;
      weightFile_ = other.weightFile_;
      maxBatchSize_ = other.maxBatchSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionParam Clone() {
      return new DetectionParam(this);
    }

    /// <summary>Field number for the "min_crop_size" field.</summary>
    public const int MinCropSizeFieldNumber = 1;
    private int minCropSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinCropSize {
      get { return minCropSize_; }
      set {
        minCropSize_ = value;
      }
    }

    /// <summary>Field number for the "crop_method" field.</summary>
    public const int CropMethodFieldNumber = 2;
    private int cropMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CropMethod {
      get { return cropMethod_; }
      set {
        cropMethod_ = value;
      }
    }

    /// <summary>Field number for the "mean_b" field.</summary>
    public const int MeanBFieldNumber = 3;
    private float meanB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanB {
      get { return meanB_; }
      set {
        meanB_ = value;
      }
    }

    /// <summary>Field number for the "mean_g" field.</summary>
    public const int MeanGFieldNumber = 4;
    private float meanG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanG {
      get { return meanG_; }
      set {
        meanG_ = value;
      }
    }

    /// <summary>Field number for the "mean_r" field.</summary>
    public const int MeanRFieldNumber = 5;
    private float meanR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanR {
      get { return meanR_; }
      set {
        meanR_ = value;
      }
    }

    /// <summary>Field number for the "is_bgr" field.</summary>
    public const int IsBgrFieldNumber = 6;
    private bool isBgr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBgr {
      get { return isBgr_; }
      set {
        isBgr_ = value;
      }
    }

    /// <summary>Field number for the "crop_scale" field.</summary>
    public const int CropScaleFieldNumber = 7;
    private float cropScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CropScale {
      get { return cropScale_; }
      set {
        cropScale_ = value;
      }
    }

    /// <summary>Field number for the "input_blob_name" field.</summary>
    public const int InputBlobNameFieldNumber = 8;
    private string inputBlobName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputBlobName {
      get { return inputBlobName_; }
      set {
        inputBlobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "im_param_blob_name" field.</summary>
    public const int ImParamBlobNameFieldNumber = 9;
    private string imParamBlobName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImParamBlobName {
      get { return imParamBlobName_; }
      set {
        imParamBlobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_blob_name" field.</summary>
    public const int OutputBlobNameFieldNumber = 10;
    private string outputBlobName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputBlobName {
      get { return outputBlobName_; }
      set {
        outputBlobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 11;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 12;
    private string modelType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelType {
      get { return modelType_; }
      set {
        modelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_file" field.</summary>
    public const int ProtoFileFieldNumber = 13;
    private string protoFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtoFile {
      get { return protoFile_; }
      set {
        protoFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight_file" field.</summary>
    public const int WeightFileFieldNumber = 14;
    private string weightFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeightFile {
      get { return weightFile_; }
      set {
        weightFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_batch_size" field.</summary>
    public const int MaxBatchSizeFieldNumber = 15;
    private int maxBatchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBatchSize {
      get { return maxBatchSize_; }
      set {
        maxBatchSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetectionParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetectionParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinCropSize != other.MinCropSize) return false;
      if (CropMethod != other.CropMethod) return false;
      if (MeanB != other.MeanB) return false;
      if (MeanG != other.MeanG) return false;
      if (MeanR != other.MeanR) return false;
      if (IsBgr != other.IsBgr) return false;
      if (CropScale != other.CropScale) return false;
      if (InputBlobName != other.InputBlobName) return false;
      if (ImParamBlobName != other.ImParamBlobName) return false;
      if (OutputBlobName != other.OutputBlobName) return false;
      if (ModelName != other.ModelName) return false;
      if (ModelType != other.ModelType) return false;
      if (ProtoFile != other.ProtoFile) return false;
      if (WeightFile != other.WeightFile) return false;
      if (MaxBatchSize != other.MaxBatchSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinCropSize != 0) hash ^= MinCropSize.GetHashCode();
      if (CropMethod != 0) hash ^= CropMethod.GetHashCode();
      if (MeanB != 0F) hash ^= MeanB.GetHashCode();
      if (MeanG != 0F) hash ^= MeanG.GetHashCode();
      if (MeanR != 0F) hash ^= MeanR.GetHashCode();
      if (IsBgr != false) hash ^= IsBgr.GetHashCode();
      if (CropScale != 0F) hash ^= CropScale.GetHashCode();
      if (InputBlobName.Length != 0) hash ^= InputBlobName.GetHashCode();
      if (ImParamBlobName.Length != 0) hash ^= ImParamBlobName.GetHashCode();
      if (OutputBlobName.Length != 0) hash ^= OutputBlobName.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (ModelType.Length != 0) hash ^= ModelType.GetHashCode();
      if (ProtoFile.Length != 0) hash ^= ProtoFile.GetHashCode();
      if (WeightFile.Length != 0) hash ^= WeightFile.GetHashCode();
      if (MaxBatchSize != 0) hash ^= MaxBatchSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinCropSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinCropSize);
      }
      if (CropMethod != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CropMethod);
      }
      if (MeanB != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MeanB);
      }
      if (MeanG != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MeanG);
      }
      if (MeanR != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MeanR);
      }
      if (IsBgr != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBgr);
      }
      if (CropScale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CropScale);
      }
      if (InputBlobName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(InputBlobName);
      }
      if (ImParamBlobName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ImParamBlobName);
      }
      if (OutputBlobName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OutputBlobName);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ModelName);
      }
      if (ModelType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ModelType);
      }
      if (ProtoFile.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ProtoFile);
      }
      if (WeightFile.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WeightFile);
      }
      if (MaxBatchSize != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MaxBatchSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinCropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCropSize);
      }
      if (CropMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CropMethod);
      }
      if (MeanB != 0F) {
        size += 1 + 4;
      }
      if (MeanG != 0F) {
        size += 1 + 4;
      }
      if (MeanR != 0F) {
        size += 1 + 4;
      }
      if (IsBgr != false) {
        size += 1 + 1;
      }
      if (CropScale != 0F) {
        size += 1 + 4;
      }
      if (InputBlobName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputBlobName);
      }
      if (ImParamBlobName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImParamBlobName);
      }
      if (OutputBlobName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputBlobName);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (ModelType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelType);
      }
      if (ProtoFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtoFile);
      }
      if (WeightFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeightFile);
      }
      if (MaxBatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBatchSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetectionParam other) {
      if (other == null) {
        return;
      }
      if (other.MinCropSize != 0) {
        MinCropSize = other.MinCropSize;
      }
      if (other.CropMethod != 0) {
        CropMethod = other.CropMethod;
      }
      if (other.MeanB != 0F) {
        MeanB = other.MeanB;
      }
      if (other.MeanG != 0F) {
        MeanG = other.MeanG;
      }
      if (other.MeanR != 0F) {
        MeanR = other.MeanR;
      }
      if (other.IsBgr != false) {
        IsBgr = other.IsBgr;
      }
      if (other.CropScale != 0F) {
        CropScale = other.CropScale;
      }
      if (other.InputBlobName.Length != 0) {
        InputBlobName = other.InputBlobName;
      }
      if (other.ImParamBlobName.Length != 0) {
        ImParamBlobName = other.ImParamBlobName;
      }
      if (other.OutputBlobName.Length != 0) {
        OutputBlobName = other.OutputBlobName;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.ModelType.Length != 0) {
        ModelType = other.ModelType;
      }
      if (other.ProtoFile.Length != 0) {
        ProtoFile = other.ProtoFile;
      }
      if (other.WeightFile.Length != 0) {
        WeightFile = other.WeightFile;
      }
      if (other.MaxBatchSize != 0) {
        MaxBatchSize = other.MaxBatchSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MinCropSize = input.ReadInt32();
            break;
          }
          case 16: {
            CropMethod = input.ReadInt32();
            break;
          }
          case 29: {
            MeanB = input.ReadFloat();
            break;
          }
          case 37: {
            MeanG = input.ReadFloat();
            break;
          }
          case 45: {
            MeanR = input.ReadFloat();
            break;
          }
          case 48: {
            IsBgr = input.ReadBool();
            break;
          }
          case 61: {
            CropScale = input.ReadFloat();
            break;
          }
          case 66: {
            InputBlobName = input.ReadString();
            break;
          }
          case 74: {
            ImParamBlobName = input.ReadString();
            break;
          }
          case 82: {
            OutputBlobName = input.ReadString();
            break;
          }
          case 90: {
            ModelName = input.ReadString();
            break;
          }
          case 98: {
            ModelType = input.ReadString();
            break;
          }
          case 106: {
            ProtoFile = input.ReadString();
            break;
          }
          case 114: {
            WeightFile = input.ReadString();
            break;
          }
          case 120: {
            MaxBatchSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
