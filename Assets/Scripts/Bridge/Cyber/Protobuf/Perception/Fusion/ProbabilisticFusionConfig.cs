// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/probabilistic_fusion_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Fusion {

  /// <summary>Holder for reflection information generated from modules/perception/proto/probabilistic_fusion_config.proto</summary>
  public static partial class ProbabilisticFusionConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/probabilistic_fusion_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProbabilisticFusionConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjptb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vcHJvYmFiaWxpc3RpY19mdXNp",
            "b25fY29uZmlnLnByb3RvEhhhcG9sbG8ucGVyY2VwdGlvbi5mdXNpb24i0gIK",
            "GVByb2JhYmlsaXN0aWNGdXNpb25Db25maWcSEQoJdXNlX2xpZGFyGAEgASgI",
            "EhEKCXVzZV9yYWRhchgCIAEoCBISCgp1c2VfY2FtZXJhGAMgASgIEhYKDnRy",
            "YWNrZXJfbWV0aG9kGAQgASgJEh8KF2RhdGFfYXNzb2NpYXRpb25fbWV0aG9k",
            "GAUgASgJEhoKEmdhdGVfa2VlcGVyX21ldGhvZBgGIAEoCRIbChNwcm9oaWJp",
            "dGlvbl9zZW5zb3JzGAcgAygJEiIKGm1heF9saWRhcl9pbnZpc2libGVfcGVy",
            "aW9kGAggASgBEiIKGm1heF9yYWRhcl9pbnZpc2libGVfcGVyaW9kGAkgASgB",
            "EiMKG21heF9jYW1lcmFfaW52aXNpYmxlX3BlcmlvZBgKIAEoARIcChRtYXhf",
            "Y2FjaGVkX2ZyYW1lX251bRgLIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Fusion.ProbabilisticFusionConfig), global::Apollo.Perception.Fusion.ProbabilisticFusionConfig.Parser, new[]{ "UseLidar", "UseRadar", "UseCamera", "TrackerMethod", "DataAssociationMethod", "GateKeeperMethod", "ProhibitionSensors", "MaxLidarInvisiblePeriod", "MaxRadarInvisiblePeriod", "MaxCameraInvisiblePeriod", "MaxCachedFrameNum" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProbabilisticFusionConfig : pb::IMessage<ProbabilisticFusionConfig> {
    private static readonly pb::MessageParser<ProbabilisticFusionConfig> _parser = new pb::MessageParser<ProbabilisticFusionConfig>(() => new ProbabilisticFusionConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProbabilisticFusionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Fusion.ProbabilisticFusionConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProbabilisticFusionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProbabilisticFusionConfig(ProbabilisticFusionConfig other) : this() {
      useLidar_ = other.useLidar_;
      useRadar_ = other.useRadar_;
      useCamera_ = other.useCamera_;
      trackerMethod_ = other.trackerMethod_;
      dataAssociationMethod_ = other.dataAssociationMethod_;
      gateKeeperMethod_ = other.gateKeeperMethod_;
      prohibitionSensors_ = other.prohibitionSensors_.Clone();
      maxLidarInvisiblePeriod_ = other.maxLidarInvisiblePeriod_;
      maxRadarInvisiblePeriod_ = other.maxRadarInvisiblePeriod_;
      maxCameraInvisiblePeriod_ = other.maxCameraInvisiblePeriod_;
      maxCachedFrameNum_ = other.maxCachedFrameNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProbabilisticFusionConfig Clone() {
      return new ProbabilisticFusionConfig(this);
    }

    /// <summary>Field number for the "use_lidar" field.</summary>
    public const int UseLidarFieldNumber = 1;
    private bool useLidar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseLidar {
      get { return useLidar_; }
      set {
        useLidar_ = value;
      }
    }

    /// <summary>Field number for the "use_radar" field.</summary>
    public const int UseRadarFieldNumber = 2;
    private bool useRadar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRadar {
      get { return useRadar_; }
      set {
        useRadar_ = value;
      }
    }

    /// <summary>Field number for the "use_camera" field.</summary>
    public const int UseCameraFieldNumber = 3;
    private bool useCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCamera {
      get { return useCamera_; }
      set {
        useCamera_ = value;
      }
    }

    /// <summary>Field number for the "tracker_method" field.</summary>
    public const int TrackerMethodFieldNumber = 4;
    private string trackerMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrackerMethod {
      get { return trackerMethod_; }
      set {
        trackerMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_association_method" field.</summary>
    public const int DataAssociationMethodFieldNumber = 5;
    private string dataAssociationMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataAssociationMethod {
      get { return dataAssociationMethod_; }
      set {
        dataAssociationMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gate_keeper_method" field.</summary>
    public const int GateKeeperMethodFieldNumber = 6;
    private string gateKeeperMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GateKeeperMethod {
      get { return gateKeeperMethod_; }
      set {
        gateKeeperMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prohibition_sensors" field.</summary>
    public const int ProhibitionSensorsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_prohibitionSensors_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> prohibitionSensors_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ProhibitionSensors {
      get { return prohibitionSensors_; }
    }

    /// <summary>Field number for the "max_lidar_invisible_period" field.</summary>
    public const int MaxLidarInvisiblePeriodFieldNumber = 8;
    private double maxLidarInvisiblePeriod_;
    /// <summary>
    /// initialization for static members in base/track.h
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxLidarInvisiblePeriod {
      get { return maxLidarInvisiblePeriod_; }
      set {
        maxLidarInvisiblePeriod_ = value;
      }
    }

    /// <summary>Field number for the "max_radar_invisible_period" field.</summary>
    public const int MaxRadarInvisiblePeriodFieldNumber = 9;
    private double maxRadarInvisiblePeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxRadarInvisiblePeriod {
      get { return maxRadarInvisiblePeriod_; }
      set {
        maxRadarInvisiblePeriod_ = value;
      }
    }

    /// <summary>Field number for the "max_camera_invisible_period" field.</summary>
    public const int MaxCameraInvisiblePeriodFieldNumber = 10;
    private double maxCameraInvisiblePeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxCameraInvisiblePeriod {
      get { return maxCameraInvisiblePeriod_; }
      set {
        maxCameraInvisiblePeriod_ = value;
      }
    }

    /// <summary>Field number for the "max_cached_frame_num" field.</summary>
    public const int MaxCachedFrameNumFieldNumber = 11;
    private long maxCachedFrameNum_;
    /// <summary>
    /// initialization for static members in base/sensor.h
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxCachedFrameNum {
      get { return maxCachedFrameNum_; }
      set {
        maxCachedFrameNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProbabilisticFusionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProbabilisticFusionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseLidar != other.UseLidar) return false;
      if (UseRadar != other.UseRadar) return false;
      if (UseCamera != other.UseCamera) return false;
      if (TrackerMethod != other.TrackerMethod) return false;
      if (DataAssociationMethod != other.DataAssociationMethod) return false;
      if (GateKeeperMethod != other.GateKeeperMethod) return false;
      if(!prohibitionSensors_.Equals(other.prohibitionSensors_)) return false;
      if (MaxLidarInvisiblePeriod != other.MaxLidarInvisiblePeriod) return false;
      if (MaxRadarInvisiblePeriod != other.MaxRadarInvisiblePeriod) return false;
      if (MaxCameraInvisiblePeriod != other.MaxCameraInvisiblePeriod) return false;
      if (MaxCachedFrameNum != other.MaxCachedFrameNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseLidar != false) hash ^= UseLidar.GetHashCode();
      if (UseRadar != false) hash ^= UseRadar.GetHashCode();
      if (UseCamera != false) hash ^= UseCamera.GetHashCode();
      if (TrackerMethod.Length != 0) hash ^= TrackerMethod.GetHashCode();
      if (DataAssociationMethod.Length != 0) hash ^= DataAssociationMethod.GetHashCode();
      if (GateKeeperMethod.Length != 0) hash ^= GateKeeperMethod.GetHashCode();
      hash ^= prohibitionSensors_.GetHashCode();
      if (MaxLidarInvisiblePeriod != 0D) hash ^= MaxLidarInvisiblePeriod.GetHashCode();
      if (MaxRadarInvisiblePeriod != 0D) hash ^= MaxRadarInvisiblePeriod.GetHashCode();
      if (MaxCameraInvisiblePeriod != 0D) hash ^= MaxCameraInvisiblePeriod.GetHashCode();
      if (MaxCachedFrameNum != 0L) hash ^= MaxCachedFrameNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseLidar != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseLidar);
      }
      if (UseRadar != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseRadar);
      }
      if (UseCamera != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseCamera);
      }
      if (TrackerMethod.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TrackerMethod);
      }
      if (DataAssociationMethod.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DataAssociationMethod);
      }
      if (GateKeeperMethod.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GateKeeperMethod);
      }
      prohibitionSensors_.WriteTo(output, _repeated_prohibitionSensors_codec);
      if (MaxLidarInvisiblePeriod != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(MaxLidarInvisiblePeriod);
      }
      if (MaxRadarInvisiblePeriod != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MaxRadarInvisiblePeriod);
      }
      if (MaxCameraInvisiblePeriod != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MaxCameraInvisiblePeriod);
      }
      if (MaxCachedFrameNum != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(MaxCachedFrameNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseLidar != false) {
        size += 1 + 1;
      }
      if (UseRadar != false) {
        size += 1 + 1;
      }
      if (UseCamera != false) {
        size += 1 + 1;
      }
      if (TrackerMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrackerMethod);
      }
      if (DataAssociationMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataAssociationMethod);
      }
      if (GateKeeperMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GateKeeperMethod);
      }
      size += prohibitionSensors_.CalculateSize(_repeated_prohibitionSensors_codec);
      if (MaxLidarInvisiblePeriod != 0D) {
        size += 1 + 8;
      }
      if (MaxRadarInvisiblePeriod != 0D) {
        size += 1 + 8;
      }
      if (MaxCameraInvisiblePeriod != 0D) {
        size += 1 + 8;
      }
      if (MaxCachedFrameNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxCachedFrameNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProbabilisticFusionConfig other) {
      if (other == null) {
        return;
      }
      if (other.UseLidar != false) {
        UseLidar = other.UseLidar;
      }
      if (other.UseRadar != false) {
        UseRadar = other.UseRadar;
      }
      if (other.UseCamera != false) {
        UseCamera = other.UseCamera;
      }
      if (other.TrackerMethod.Length != 0) {
        TrackerMethod = other.TrackerMethod;
      }
      if (other.DataAssociationMethod.Length != 0) {
        DataAssociationMethod = other.DataAssociationMethod;
      }
      if (other.GateKeeperMethod.Length != 0) {
        GateKeeperMethod = other.GateKeeperMethod;
      }
      prohibitionSensors_.Add(other.prohibitionSensors_);
      if (other.MaxLidarInvisiblePeriod != 0D) {
        MaxLidarInvisiblePeriod = other.MaxLidarInvisiblePeriod;
      }
      if (other.MaxRadarInvisiblePeriod != 0D) {
        MaxRadarInvisiblePeriod = other.MaxRadarInvisiblePeriod;
      }
      if (other.MaxCameraInvisiblePeriod != 0D) {
        MaxCameraInvisiblePeriod = other.MaxCameraInvisiblePeriod;
      }
      if (other.MaxCachedFrameNum != 0L) {
        MaxCachedFrameNum = other.MaxCachedFrameNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseLidar = input.ReadBool();
            break;
          }
          case 16: {
            UseRadar = input.ReadBool();
            break;
          }
          case 24: {
            UseCamera = input.ReadBool();
            break;
          }
          case 34: {
            TrackerMethod = input.ReadString();
            break;
          }
          case 42: {
            DataAssociationMethod = input.ReadString();
            break;
          }
          case 50: {
            GateKeeperMethod = input.ReadString();
            break;
          }
          case 58: {
            prohibitionSensors_.AddEntriesFrom(input, _repeated_prohibitionSensors_codec);
            break;
          }
          case 65: {
            MaxLidarInvisiblePeriod = input.ReadDouble();
            break;
          }
          case 73: {
            MaxRadarInvisiblePeriod = input.ReadDouble();
            break;
          }
          case 81: {
            MaxCameraInvisiblePeriod = input.ReadDouble();
            break;
          }
          case 88: {
            MaxCachedFrameNum = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
