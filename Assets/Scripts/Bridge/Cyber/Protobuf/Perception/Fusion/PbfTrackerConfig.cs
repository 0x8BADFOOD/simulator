// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/pbf_tracker_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Fusion {

  /// <summary>Holder for reflection information generated from modules/perception/proto/pbf_tracker_config.proto</summary>
  public static partial class PbfTrackerConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/pbf_tracker_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbfTrackerConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vcGJmX3RyYWNrZXJfY29uZmln",
            "LnByb3RvEhhhcG9sbG8ucGVyY2VwdGlvbi5mdXNpb24iigEKEFBiZlRyYWNr",
            "ZXJDb25maWcSGgoSdHlwZV9mdXNpb25fbWV0aG9kGAEgASgJEhwKFG1vdGlv",
            "bl9mdXNpb25fbWV0aG9kGAIgASgJEhsKE3NoYXBlX2Z1c2lvbl9tZXRob2QY",
            "AyABKAkSHwoXZXhpc3RhbmNlX2Z1c2lvbl9tZXRob2QYBCABKAliBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Fusion.PbfTrackerConfig), global::Apollo.Perception.Fusion.PbfTrackerConfig.Parser, new[]{ "TypeFusionMethod", "MotionFusionMethod", "ShapeFusionMethod", "ExistanceFusionMethod" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PbfTrackerConfig : pb::IMessage<PbfTrackerConfig> {
    private static readonly pb::MessageParser<PbfTrackerConfig> _parser = new pb::MessageParser<PbfTrackerConfig>(() => new PbfTrackerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbfTrackerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Fusion.PbfTrackerConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbfTrackerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbfTrackerConfig(PbfTrackerConfig other) : this() {
      typeFusionMethod_ = other.typeFusionMethod_;
      motionFusionMethod_ = other.motionFusionMethod_;
      shapeFusionMethod_ = other.shapeFusionMethod_;
      existanceFusionMethod_ = other.existanceFusionMethod_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbfTrackerConfig Clone() {
      return new PbfTrackerConfig(this);
    }

    /// <summary>Field number for the "type_fusion_method" field.</summary>
    public const int TypeFusionMethodFieldNumber = 1;
    private string typeFusionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeFusionMethod {
      get { return typeFusionMethod_; }
      set {
        typeFusionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "motion_fusion_method" field.</summary>
    public const int MotionFusionMethodFieldNumber = 2;
    private string motionFusionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MotionFusionMethod {
      get { return motionFusionMethod_; }
      set {
        motionFusionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape_fusion_method" field.</summary>
    public const int ShapeFusionMethodFieldNumber = 3;
    private string shapeFusionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShapeFusionMethod {
      get { return shapeFusionMethod_; }
      set {
        shapeFusionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "existance_fusion_method" field.</summary>
    public const int ExistanceFusionMethodFieldNumber = 4;
    private string existanceFusionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExistanceFusionMethod {
      get { return existanceFusionMethod_; }
      set {
        existanceFusionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbfTrackerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbfTrackerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeFusionMethod != other.TypeFusionMethod) return false;
      if (MotionFusionMethod != other.MotionFusionMethod) return false;
      if (ShapeFusionMethod != other.ShapeFusionMethod) return false;
      if (ExistanceFusionMethod != other.ExistanceFusionMethod) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeFusionMethod.Length != 0) hash ^= TypeFusionMethod.GetHashCode();
      if (MotionFusionMethod.Length != 0) hash ^= MotionFusionMethod.GetHashCode();
      if (ShapeFusionMethod.Length != 0) hash ^= ShapeFusionMethod.GetHashCode();
      if (ExistanceFusionMethod.Length != 0) hash ^= ExistanceFusionMethod.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeFusionMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeFusionMethod);
      }
      if (MotionFusionMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MotionFusionMethod);
      }
      if (ShapeFusionMethod.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShapeFusionMethod);
      }
      if (ExistanceFusionMethod.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExistanceFusionMethod);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeFusionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeFusionMethod);
      }
      if (MotionFusionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MotionFusionMethod);
      }
      if (ShapeFusionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShapeFusionMethod);
      }
      if (ExistanceFusionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExistanceFusionMethod);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbfTrackerConfig other) {
      if (other == null) {
        return;
      }
      if (other.TypeFusionMethod.Length != 0) {
        TypeFusionMethod = other.TypeFusionMethod;
      }
      if (other.MotionFusionMethod.Length != 0) {
        MotionFusionMethod = other.MotionFusionMethod;
      }
      if (other.ShapeFusionMethod.Length != 0) {
        ShapeFusionMethod = other.ShapeFusionMethod;
      }
      if (other.ExistanceFusionMethod.Length != 0) {
        ExistanceFusionMethod = other.ExistanceFusionMethod;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TypeFusionMethod = input.ReadString();
            break;
          }
          case 18: {
            MotionFusionMethod = input.ReadString();
            break;
          }
          case 26: {
            ShapeFusionMethod = input.ReadString();
            break;
          }
          case 34: {
            ExistanceFusionMethod = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
