// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/dst_type_fusion_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Fusion {

  /// <summary>Holder for reflection information generated from modules/perception/proto/dst_type_fusion_config.proto</summary>
  public static partial class DstTypeFusionConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/dst_type_fusion_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DstTypeFusionConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vZHN0X3R5cGVfZnVzaW9uX2Nv",
            "bmZpZy5wcm90bxIYYXBvbGxvLnBlcmNlcHRpb24uZnVzaW9uInIKGENhbWVy",
            "YURzdFR5cGVGdXNpb25QYXJhbRIMCgRuYW1lGAEgASgJEhIKCnZhbGlkX2Rp",
            "c3QYAiABKAESEwoLcmVsaWFiaWxpdHkYAyABKAESHwoXcmVsaWFiaWxpdHlf",
            "Zm9yX3Vua25vd24YBCABKAEiXQoXTGlkYXJEc3RUeXBlRnVzaW9uUGFyYW0S",
            "DAoEbmFtZRgBIAEoCRITCgtyZWxpYWJpbGl0eRgCIAEoARIfChdyZWxpYWJp",
            "bGl0eV9mb3JfdW5rbm93bhgDIAEoASKpAQoTRHN0VHlwZUZ1c2lvbkNvbmZp",
            "ZxJJCg1jYW1lcmFfcGFyYW1zGAEgAygLMjIuYXBvbGxvLnBlcmNlcHRpb24u",
            "ZnVzaW9uLkNhbWVyYURzdFR5cGVGdXNpb25QYXJhbRJHCgxsaWRhcl9wYXJh",
            "bXMYAiADKAsyMS5hcG9sbG8ucGVyY2VwdGlvbi5mdXNpb24uTGlkYXJEc3RU",
            "eXBlRnVzaW9uUGFyYW1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Fusion.CameraDstTypeFusionParam), global::Apollo.Perception.Fusion.CameraDstTypeFusionParam.Parser, new[]{ "Name", "ValidDist", "Reliability", "ReliabilityForUnknown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Fusion.LidarDstTypeFusionParam), global::Apollo.Perception.Fusion.LidarDstTypeFusionParam.Parser, new[]{ "Name", "Reliability", "ReliabilityForUnknown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Fusion.DstTypeFusionConfig), global::Apollo.Perception.Fusion.DstTypeFusionConfig.Parser, new[]{ "CameraParams", "LidarParams" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CameraDstTypeFusionParam : pb::IMessage<CameraDstTypeFusionParam> {
    private static readonly pb::MessageParser<CameraDstTypeFusionParam> _parser = new pb::MessageParser<CameraDstTypeFusionParam>(() => new CameraDstTypeFusionParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraDstTypeFusionParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Fusion.DstTypeFusionConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraDstTypeFusionParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraDstTypeFusionParam(CameraDstTypeFusionParam other) : this() {
      name_ = other.name_;
      validDist_ = other.validDist_;
      reliability_ = other.reliability_;
      reliabilityForUnknown_ = other.reliabilityForUnknown_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraDstTypeFusionParam Clone() {
      return new CameraDstTypeFusionParam(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valid_dist" field.</summary>
    public const int ValidDistFieldNumber = 2;
    private double validDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ValidDist {
      get { return validDist_; }
      set {
        validDist_ = value;
      }
    }

    /// <summary>Field number for the "reliability" field.</summary>
    public const int ReliabilityFieldNumber = 3;
    private double reliability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Reliability {
      get { return reliability_; }
      set {
        reliability_ = value;
      }
    }

    /// <summary>Field number for the "reliability_for_unknown" field.</summary>
    public const int ReliabilityForUnknownFieldNumber = 4;
    private double reliabilityForUnknown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReliabilityForUnknown {
      get { return reliabilityForUnknown_; }
      set {
        reliabilityForUnknown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraDstTypeFusionParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraDstTypeFusionParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ValidDist != other.ValidDist) return false;
      if (Reliability != other.Reliability) return false;
      if (ReliabilityForUnknown != other.ReliabilityForUnknown) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ValidDist != 0D) hash ^= ValidDist.GetHashCode();
      if (Reliability != 0D) hash ^= Reliability.GetHashCode();
      if (ReliabilityForUnknown != 0D) hash ^= ReliabilityForUnknown.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ValidDist != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ValidDist);
      }
      if (Reliability != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Reliability);
      }
      if (ReliabilityForUnknown != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ReliabilityForUnknown);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ValidDist != 0D) {
        size += 1 + 8;
      }
      if (Reliability != 0D) {
        size += 1 + 8;
      }
      if (ReliabilityForUnknown != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraDstTypeFusionParam other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ValidDist != 0D) {
        ValidDist = other.ValidDist;
      }
      if (other.Reliability != 0D) {
        Reliability = other.Reliability;
      }
      if (other.ReliabilityForUnknown != 0D) {
        ReliabilityForUnknown = other.ReliabilityForUnknown;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            ValidDist = input.ReadDouble();
            break;
          }
          case 25: {
            Reliability = input.ReadDouble();
            break;
          }
          case 33: {
            ReliabilityForUnknown = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LidarDstTypeFusionParam : pb::IMessage<LidarDstTypeFusionParam> {
    private static readonly pb::MessageParser<LidarDstTypeFusionParam> _parser = new pb::MessageParser<LidarDstTypeFusionParam>(() => new LidarDstTypeFusionParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LidarDstTypeFusionParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Fusion.DstTypeFusionConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarDstTypeFusionParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarDstTypeFusionParam(LidarDstTypeFusionParam other) : this() {
      name_ = other.name_;
      reliability_ = other.reliability_;
      reliabilityForUnknown_ = other.reliabilityForUnknown_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarDstTypeFusionParam Clone() {
      return new LidarDstTypeFusionParam(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reliability" field.</summary>
    public const int ReliabilityFieldNumber = 2;
    private double reliability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Reliability {
      get { return reliability_; }
      set {
        reliability_ = value;
      }
    }

    /// <summary>Field number for the "reliability_for_unknown" field.</summary>
    public const int ReliabilityForUnknownFieldNumber = 3;
    private double reliabilityForUnknown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReliabilityForUnknown {
      get { return reliabilityForUnknown_; }
      set {
        reliabilityForUnknown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LidarDstTypeFusionParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LidarDstTypeFusionParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Reliability != other.Reliability) return false;
      if (ReliabilityForUnknown != other.ReliabilityForUnknown) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Reliability != 0D) hash ^= Reliability.GetHashCode();
      if (ReliabilityForUnknown != 0D) hash ^= ReliabilityForUnknown.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Reliability != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Reliability);
      }
      if (ReliabilityForUnknown != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ReliabilityForUnknown);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Reliability != 0D) {
        size += 1 + 8;
      }
      if (ReliabilityForUnknown != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LidarDstTypeFusionParam other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Reliability != 0D) {
        Reliability = other.Reliability;
      }
      if (other.ReliabilityForUnknown != 0D) {
        ReliabilityForUnknown = other.ReliabilityForUnknown;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            Reliability = input.ReadDouble();
            break;
          }
          case 25: {
            ReliabilityForUnknown = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DstTypeFusionConfig : pb::IMessage<DstTypeFusionConfig> {
    private static readonly pb::MessageParser<DstTypeFusionConfig> _parser = new pb::MessageParser<DstTypeFusionConfig>(() => new DstTypeFusionConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DstTypeFusionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Fusion.DstTypeFusionConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DstTypeFusionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DstTypeFusionConfig(DstTypeFusionConfig other) : this() {
      cameraParams_ = other.cameraParams_.Clone();
      lidarParams_ = other.lidarParams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DstTypeFusionConfig Clone() {
      return new DstTypeFusionConfig(this);
    }

    /// <summary>Field number for the "camera_params" field.</summary>
    public const int CameraParamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Fusion.CameraDstTypeFusionParam> _repeated_cameraParams_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Fusion.CameraDstTypeFusionParam.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Fusion.CameraDstTypeFusionParam> cameraParams_ = new pbc::RepeatedField<global::Apollo.Perception.Fusion.CameraDstTypeFusionParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Fusion.CameraDstTypeFusionParam> CameraParams {
      get { return cameraParams_; }
    }

    /// <summary>Field number for the "lidar_params" field.</summary>
    public const int LidarParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Fusion.LidarDstTypeFusionParam> _repeated_lidarParams_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Perception.Fusion.LidarDstTypeFusionParam.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Fusion.LidarDstTypeFusionParam> lidarParams_ = new pbc::RepeatedField<global::Apollo.Perception.Fusion.LidarDstTypeFusionParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Fusion.LidarDstTypeFusionParam> LidarParams {
      get { return lidarParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DstTypeFusionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DstTypeFusionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cameraParams_.Equals(other.cameraParams_)) return false;
      if(!lidarParams_.Equals(other.lidarParams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cameraParams_.GetHashCode();
      hash ^= lidarParams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cameraParams_.WriteTo(output, _repeated_cameraParams_codec);
      lidarParams_.WriteTo(output, _repeated_lidarParams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cameraParams_.CalculateSize(_repeated_cameraParams_codec);
      size += lidarParams_.CalculateSize(_repeated_lidarParams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DstTypeFusionConfig other) {
      if (other == null) {
        return;
      }
      cameraParams_.Add(other.cameraParams_);
      lidarParams_.Add(other.lidarParams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cameraParams_.AddEntriesFrom(input, _repeated_cameraParams_codec);
            break;
          }
          case 18: {
            lidarParams_.AddEntriesFrom(input, _repeated_lidarParams_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
