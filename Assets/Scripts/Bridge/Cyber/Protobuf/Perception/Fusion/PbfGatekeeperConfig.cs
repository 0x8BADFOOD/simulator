// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/fusion/lib/gatekeeper/pbf_gatekeeper/proto/pbf_gatekeeper_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Fusion {

  /// <summary>Holder for reflection information generated from modules/perception/fusion/lib/gatekeeper/pbf_gatekeeper/proto/pbf_gatekeeper_config.proto</summary>
  public static partial class PbfGatekeeperConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/fusion/lib/gatekeeper/pbf_gatekeeper/proto/pbf_gatekeeper_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbfGatekeeperConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Clltb2R1bGVzL3BlcmNlcHRpb24vZnVzaW9uL2xpYi9nYXRla2VlcGVyL3Bi",
            "Zl9nYXRla2VlcGVyL3Byb3RvL3BiZl9nYXRla2VlcGVyX2NvbmZpZy5wcm90",
            "bxIYYXBvbGxvLnBlcmNlcHRpb24uZnVzaW9uIrUDChNQYmZHYXRla2VlcGVy",
            "Q29uZmlnEhwKFHB1Ymxpc2hfaWZfaGFzX2xpZGFyGAEgASgIEhwKFHB1Ymxp",
            "c2hfaWZfaGFzX3JhZGFyGAIgASgIEh0KFXB1Ymxpc2hfaWZfaGFzX2NhbWVy",
            "YRgDIAEoCBIVCg11c2VfY2FtZXJhXzNkGAQgASgIEiQKHG1pbl9yYWRhcl9j",
            "b25maWRlbnRfZGlzdGFuY2UYBSABKAESIQoZbWF4X3JhZGFyX2NvbmZpZGVu",
            "dF9hbmdsZRgGIAEoARIjChttaW5fY2FtZXJhX3B1Ymxpc2hfZGlzdGFuY2UY",
            "ByABKAESIgoaaW52aXNpYmxlX3BlcmlvZF90aHJlc2hvbGQYCCABKAESFgoO",
            "dG9pY190aHJlc2hvbGQYCSABKAESIwobdXNlX3RyYWNrX3RpbWVfcHViX3N0",
            "cmF0ZWd5GAogASgIEh0KFXB1Yl90cmFja190aW1lX3RocmVzaBgLIAEoBRIb",
            "ChNleGlzdGFuY2VfdGhyZXNob2xkGAwgASgBEiEKGXJhZGFyX2V4aXN0YW5j",
            "ZV90aHJlc2hvbGQYDSABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Fusion.PbfGatekeeperConfig), global::Apollo.Perception.Fusion.PbfGatekeeperConfig.Parser, new[]{ "PublishIfHasLidar", "PublishIfHasRadar", "PublishIfHasCamera", "UseCamera3D", "MinRadarConfidentDistance", "MaxRadarConfidentAngle", "MinCameraPublishDistance", "InvisiblePeriodThreshold", "ToicThreshold", "UseTrackTimePubStrategy", "PubTrackTimeThresh", "ExistanceThreshold", "RadarExistanceThreshold" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PbfGatekeeperConfig : pb::IMessage<PbfGatekeeperConfig> {
    private static readonly pb::MessageParser<PbfGatekeeperConfig> _parser = new pb::MessageParser<PbfGatekeeperConfig>(() => new PbfGatekeeperConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbfGatekeeperConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Fusion.PbfGatekeeperConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbfGatekeeperConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbfGatekeeperConfig(PbfGatekeeperConfig other) : this() {
      publishIfHasLidar_ = other.publishIfHasLidar_;
      publishIfHasRadar_ = other.publishIfHasRadar_;
      publishIfHasCamera_ = other.publishIfHasCamera_;
      useCamera3D_ = other.useCamera3D_;
      minRadarConfidentDistance_ = other.minRadarConfidentDistance_;
      maxRadarConfidentAngle_ = other.maxRadarConfidentAngle_;
      minCameraPublishDistance_ = other.minCameraPublishDistance_;
      invisiblePeriodThreshold_ = other.invisiblePeriodThreshold_;
      toicThreshold_ = other.toicThreshold_;
      useTrackTimePubStrategy_ = other.useTrackTimePubStrategy_;
      pubTrackTimeThresh_ = other.pubTrackTimeThresh_;
      existanceThreshold_ = other.existanceThreshold_;
      radarExistanceThreshold_ = other.radarExistanceThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbfGatekeeperConfig Clone() {
      return new PbfGatekeeperConfig(this);
    }

    /// <summary>Field number for the "publish_if_has_lidar" field.</summary>
    public const int PublishIfHasLidarFieldNumber = 1;
    private bool publishIfHasLidar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PublishIfHasLidar {
      get { return publishIfHasLidar_; }
      set {
        publishIfHasLidar_ = value;
      }
    }

    /// <summary>Field number for the "publish_if_has_radar" field.</summary>
    public const int PublishIfHasRadarFieldNumber = 2;
    private bool publishIfHasRadar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PublishIfHasRadar {
      get { return publishIfHasRadar_; }
      set {
        publishIfHasRadar_ = value;
      }
    }

    /// <summary>Field number for the "publish_if_has_camera" field.</summary>
    public const int PublishIfHasCameraFieldNumber = 3;
    private bool publishIfHasCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PublishIfHasCamera {
      get { return publishIfHasCamera_; }
      set {
        publishIfHasCamera_ = value;
      }
    }

    /// <summary>Field number for the "use_camera_3d" field.</summary>
    public const int UseCamera3DFieldNumber = 4;
    private bool useCamera3D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCamera3D {
      get { return useCamera3D_; }
      set {
        useCamera3D_ = value;
      }
    }

    /// <summary>Field number for the "min_radar_confident_distance" field.</summary>
    public const int MinRadarConfidentDistanceFieldNumber = 5;
    private double minRadarConfidentDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinRadarConfidentDistance {
      get { return minRadarConfidentDistance_; }
      set {
        minRadarConfidentDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_radar_confident_angle" field.</summary>
    public const int MaxRadarConfidentAngleFieldNumber = 6;
    private double maxRadarConfidentAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxRadarConfidentAngle {
      get { return maxRadarConfidentAngle_; }
      set {
        maxRadarConfidentAngle_ = value;
      }
    }

    /// <summary>Field number for the "min_camera_publish_distance" field.</summary>
    public const int MinCameraPublishDistanceFieldNumber = 7;
    private double minCameraPublishDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinCameraPublishDistance {
      get { return minCameraPublishDistance_; }
      set {
        minCameraPublishDistance_ = value;
      }
    }

    /// <summary>Field number for the "invisible_period_threshold" field.</summary>
    public const int InvisiblePeriodThresholdFieldNumber = 8;
    private double invisiblePeriodThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InvisiblePeriodThreshold {
      get { return invisiblePeriodThreshold_; }
      set {
        invisiblePeriodThreshold_ = value;
      }
    }

    /// <summary>Field number for the "toic_threshold" field.</summary>
    public const int ToicThresholdFieldNumber = 9;
    private double toicThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ToicThreshold {
      get { return toicThreshold_; }
      set {
        toicThreshold_ = value;
      }
    }

    /// <summary>Field number for the "use_track_time_pub_strategy" field.</summary>
    public const int UseTrackTimePubStrategyFieldNumber = 10;
    private bool useTrackTimePubStrategy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseTrackTimePubStrategy {
      get { return useTrackTimePubStrategy_; }
      set {
        useTrackTimePubStrategy_ = value;
      }
    }

    /// <summary>Field number for the "pub_track_time_thresh" field.</summary>
    public const int PubTrackTimeThreshFieldNumber = 11;
    private int pubTrackTimeThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PubTrackTimeThresh {
      get { return pubTrackTimeThresh_; }
      set {
        pubTrackTimeThresh_ = value;
      }
    }

    /// <summary>Field number for the "existance_threshold" field.</summary>
    public const int ExistanceThresholdFieldNumber = 12;
    private double existanceThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExistanceThreshold {
      get { return existanceThreshold_; }
      set {
        existanceThreshold_ = value;
      }
    }

    /// <summary>Field number for the "radar_existance_threshold" field.</summary>
    public const int RadarExistanceThresholdFieldNumber = 13;
    private double radarExistanceThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RadarExistanceThreshold {
      get { return radarExistanceThreshold_; }
      set {
        radarExistanceThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbfGatekeeperConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbfGatekeeperConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublishIfHasLidar != other.PublishIfHasLidar) return false;
      if (PublishIfHasRadar != other.PublishIfHasRadar) return false;
      if (PublishIfHasCamera != other.PublishIfHasCamera) return false;
      if (UseCamera3D != other.UseCamera3D) return false;
      if (MinRadarConfidentDistance != other.MinRadarConfidentDistance) return false;
      if (MaxRadarConfidentAngle != other.MaxRadarConfidentAngle) return false;
      if (MinCameraPublishDistance != other.MinCameraPublishDistance) return false;
      if (InvisiblePeriodThreshold != other.InvisiblePeriodThreshold) return false;
      if (ToicThreshold != other.ToicThreshold) return false;
      if (UseTrackTimePubStrategy != other.UseTrackTimePubStrategy) return false;
      if (PubTrackTimeThresh != other.PubTrackTimeThresh) return false;
      if (ExistanceThreshold != other.ExistanceThreshold) return false;
      if (RadarExistanceThreshold != other.RadarExistanceThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublishIfHasLidar != false) hash ^= PublishIfHasLidar.GetHashCode();
      if (PublishIfHasRadar != false) hash ^= PublishIfHasRadar.GetHashCode();
      if (PublishIfHasCamera != false) hash ^= PublishIfHasCamera.GetHashCode();
      if (UseCamera3D != false) hash ^= UseCamera3D.GetHashCode();
      if (MinRadarConfidentDistance != 0D) hash ^= MinRadarConfidentDistance.GetHashCode();
      if (MaxRadarConfidentAngle != 0D) hash ^= MaxRadarConfidentAngle.GetHashCode();
      if (MinCameraPublishDistance != 0D) hash ^= MinCameraPublishDistance.GetHashCode();
      if (InvisiblePeriodThreshold != 0D) hash ^= InvisiblePeriodThreshold.GetHashCode();
      if (ToicThreshold != 0D) hash ^= ToicThreshold.GetHashCode();
      if (UseTrackTimePubStrategy != false) hash ^= UseTrackTimePubStrategy.GetHashCode();
      if (PubTrackTimeThresh != 0) hash ^= PubTrackTimeThresh.GetHashCode();
      if (ExistanceThreshold != 0D) hash ^= ExistanceThreshold.GetHashCode();
      if (RadarExistanceThreshold != 0D) hash ^= RadarExistanceThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublishIfHasLidar != false) {
        output.WriteRawTag(8);
        output.WriteBool(PublishIfHasLidar);
      }
      if (PublishIfHasRadar != false) {
        output.WriteRawTag(16);
        output.WriteBool(PublishIfHasRadar);
      }
      if (PublishIfHasCamera != false) {
        output.WriteRawTag(24);
        output.WriteBool(PublishIfHasCamera);
      }
      if (UseCamera3D != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseCamera3D);
      }
      if (MinRadarConfidentDistance != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MinRadarConfidentDistance);
      }
      if (MaxRadarConfidentAngle != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MaxRadarConfidentAngle);
      }
      if (MinCameraPublishDistance != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MinCameraPublishDistance);
      }
      if (InvisiblePeriodThreshold != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(InvisiblePeriodThreshold);
      }
      if (ToicThreshold != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ToicThreshold);
      }
      if (UseTrackTimePubStrategy != false) {
        output.WriteRawTag(80);
        output.WriteBool(UseTrackTimePubStrategy);
      }
      if (PubTrackTimeThresh != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PubTrackTimeThresh);
      }
      if (ExistanceThreshold != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ExistanceThreshold);
      }
      if (RadarExistanceThreshold != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(RadarExistanceThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublishIfHasLidar != false) {
        size += 1 + 1;
      }
      if (PublishIfHasRadar != false) {
        size += 1 + 1;
      }
      if (PublishIfHasCamera != false) {
        size += 1 + 1;
      }
      if (UseCamera3D != false) {
        size += 1 + 1;
      }
      if (MinRadarConfidentDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxRadarConfidentAngle != 0D) {
        size += 1 + 8;
      }
      if (MinCameraPublishDistance != 0D) {
        size += 1 + 8;
      }
      if (InvisiblePeriodThreshold != 0D) {
        size += 1 + 8;
      }
      if (ToicThreshold != 0D) {
        size += 1 + 8;
      }
      if (UseTrackTimePubStrategy != false) {
        size += 1 + 1;
      }
      if (PubTrackTimeThresh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PubTrackTimeThresh);
      }
      if (ExistanceThreshold != 0D) {
        size += 1 + 8;
      }
      if (RadarExistanceThreshold != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbfGatekeeperConfig other) {
      if (other == null) {
        return;
      }
      if (other.PublishIfHasLidar != false) {
        PublishIfHasLidar = other.PublishIfHasLidar;
      }
      if (other.PublishIfHasRadar != false) {
        PublishIfHasRadar = other.PublishIfHasRadar;
      }
      if (other.PublishIfHasCamera != false) {
        PublishIfHasCamera = other.PublishIfHasCamera;
      }
      if (other.UseCamera3D != false) {
        UseCamera3D = other.UseCamera3D;
      }
      if (other.MinRadarConfidentDistance != 0D) {
        MinRadarConfidentDistance = other.MinRadarConfidentDistance;
      }
      if (other.MaxRadarConfidentAngle != 0D) {
        MaxRadarConfidentAngle = other.MaxRadarConfidentAngle;
      }
      if (other.MinCameraPublishDistance != 0D) {
        MinCameraPublishDistance = other.MinCameraPublishDistance;
      }
      if (other.InvisiblePeriodThreshold != 0D) {
        InvisiblePeriodThreshold = other.InvisiblePeriodThreshold;
      }
      if (other.ToicThreshold != 0D) {
        ToicThreshold = other.ToicThreshold;
      }
      if (other.UseTrackTimePubStrategy != false) {
        UseTrackTimePubStrategy = other.UseTrackTimePubStrategy;
      }
      if (other.PubTrackTimeThresh != 0) {
        PubTrackTimeThresh = other.PubTrackTimeThresh;
      }
      if (other.ExistanceThreshold != 0D) {
        ExistanceThreshold = other.ExistanceThreshold;
      }
      if (other.RadarExistanceThreshold != 0D) {
        RadarExistanceThreshold = other.RadarExistanceThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PublishIfHasLidar = input.ReadBool();
            break;
          }
          case 16: {
            PublishIfHasRadar = input.ReadBool();
            break;
          }
          case 24: {
            PublishIfHasCamera = input.ReadBool();
            break;
          }
          case 32: {
            UseCamera3D = input.ReadBool();
            break;
          }
          case 41: {
            MinRadarConfidentDistance = input.ReadDouble();
            break;
          }
          case 49: {
            MaxRadarConfidentAngle = input.ReadDouble();
            break;
          }
          case 57: {
            MinCameraPublishDistance = input.ReadDouble();
            break;
          }
          case 65: {
            InvisiblePeriodThreshold = input.ReadDouble();
            break;
          }
          case 73: {
            ToicThreshold = input.ReadDouble();
            break;
          }
          case 80: {
            UseTrackTimePubStrategy = input.ReadBool();
            break;
          }
          case 88: {
            PubTrackTimeThresh = input.ReadInt32();
            break;
          }
          case 97: {
            ExistanceThreshold = input.ReadDouble();
            break;
          }
          case 105: {
            RadarExistanceThreshold = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
