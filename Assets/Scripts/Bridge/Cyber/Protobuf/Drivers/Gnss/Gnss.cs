// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Gnss {

  /// <summary>Holder for reflection information generated from modules/drivers/gnss/proto/gnss.proto</summary>
  public static partial class GnssReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/gnss/proto/gnss.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GnssReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVtb2R1bGVzL2RyaXZlcnMvZ25zcy9wcm90by9nbnNzLnByb3RvEhNhcG9s",
            "bG8uZHJpdmVycy5nbnNzGiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFkZXIu",
            "cHJvdG8aI21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21ldHJ5LnByb3RvIv8D",
            "CgRHbnNzEiUKBmhlYWRlchgBIAEoCzIVLmFwb2xsby5jb21tb24uSGVhZGVy",
            "EhgKEG1lYXN1cmVtZW50X3RpbWUYAiABKAESGAoQdmVsb2NpdHlfbGF0ZW5j",
            "eRgDIAEoAhIpCghwb3NpdGlvbhgEIAEoCzIXLmFwb2xsby5jb21tb24uUG9p",
            "bnRMTEgSMAoQcG9zaXRpb25fc3RkX2RldhgFIAEoCzIWLmFwb2xsby5jb21t",
            "b24uUG9pbnQzRBIvCg9saW5lYXJfdmVsb2NpdHkYBiABKAsyFi5hcG9sbG8u",
            "Y29tbW9uLlBvaW50M0QSNwoXbGluZWFyX3ZlbG9jaXR5X3N0ZF9kZXYYByAB",
            "KAsyFi5hcG9sbG8uY29tbW9uLlBvaW50M0QSEAoIbnVtX3NhdHMYCCABKAUS",
            "LAoEdHlwZRgJIAEoDjIeLmFwb2xsby5kcml2ZXJzLmduc3MuR25zcy5UeXBl",
            "EhcKD3NvbHV0aW9uX3N0YXR1cxgKIAEoDRIVCg1wb3NpdGlvbl90eXBlGAsg",
            "ASgNImUKBFR5cGUSCwoHSU5WQUxJRBAAEg4KClBST1BBR0FURUQQARIKCgZT",
            "SU5HTEUQAhILCgdQU1JESUZGEAMSBwoDUFBQEAQSDQoJUlRLX0ZMT0FUEAUS",
            "DwoLUlRLX0lOVEVHRVIQBiL+AgoJUmFuZ2VJbmZvEkMKDWNvbnN0ZWxsYXRp",
            "b24YASABKA4yLC5hcG9sbG8uZHJpdmVycy5nbnNzLlJhbmdlSW5mby5Db25z",
            "dGVsbGF0aW9uEgsKA3BybhgCIAEoBRIZChFjYXJyaWVyX2ZyZXF1ZW5jeRgD",
            "IAEoBxITCgtwc2V1ZG9yYW5nZRgEIAEoARIbChNwc2V1ZG9yYW5nZV9zdGRf",
            "ZGV2GAUgASgCEhUKDWNhcnJpZXJfcGhhc2UYBiABKAESHQoVY2Fycmllcl9w",
            "aGFzZV9zdGRfZGV2GAcgASgCEg8KB2RvcHBsZXIYCCABKAISFwoPZG9wcGxl",
            "cl9zdGRfZGV2GAkgASgCEgsKA2NubxgKIAEoBRIRCglsb2NrX3RpbWUYCyAB",
            "KAUiUgoNQ29uc3RlbGxhdGlvbhIHCgNHUFMQABILCgdHTE9OQVNTEAESCAoE",
            "U0JBUxACEgsKB0dBTElMRU8QAxIKCgZCRUlET1UQBBIICgRRWlNTEAUifAoJ",
            "R25zc1JhbmdlEiUKBmhlYWRlchgBIAEoCzIVLmFwb2xsby5jb21tb24uSGVh",
            "ZGVyEhgKEG1lYXN1cmVtZW50X3RpbWUYAiABKAESLgoGcmFuZ2VzGAMgAygL",
            "Mh4uYXBvbGxvLmRyaXZlcnMuZ25zcy5SYW5nZUluZm8iPgoHUmF3RGF0YRIl",
            "CgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRlchIMCgRkYXRh",
            "GAIgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Gnss), global::Apollo.Drivers.Gnss.Gnss.Parser, new[]{ "Header", "MeasurementTime", "VelocityLatency", "Position", "PositionStdDev", "LinearVelocity", "LinearVelocityStdDev", "NumSats", "Type", "SolutionStatus", "PositionType" }, null, new[]{ typeof(global::Apollo.Drivers.Gnss.Gnss.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.RangeInfo), global::Apollo.Drivers.Gnss.RangeInfo.Parser, new[]{ "Constellation", "Prn", "CarrierFrequency", "Pseudorange", "PseudorangeStdDev", "CarrierPhase", "CarrierPhaseStdDev", "Doppler", "DopplerStdDev", "Cno", "LockTime" }, null, new[]{ typeof(global::Apollo.Drivers.Gnss.RangeInfo.Types.Constellation) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.GnssRange), global::Apollo.Drivers.Gnss.GnssRange.Parser, new[]{ "Header", "MeasurementTime", "Ranges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.RawData), global::Apollo.Drivers.Gnss.RawData.Parser, new[]{ "Header", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Solution from a Global Navigation Satellite System (GNSS) receiver without
  /// fused with any IMU.
  /// </summary>
  public sealed partial class Gnss : pb::IMessage<Gnss> {
    private static readonly pb::MessageParser<Gnss> _parser = new pb::MessageParser<Gnss>(() => new Gnss());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gnss> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gnss() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gnss(Gnss other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      measurementTime_ = other.measurementTime_;
      velocityLatency_ = other.velocityLatency_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      PositionStdDev = other.positionStdDev_ != null ? other.PositionStdDev.Clone() : null;
      LinearVelocity = other.linearVelocity_ != null ? other.LinearVelocity.Clone() : null;
      LinearVelocityStdDev = other.linearVelocityStdDev_ != null ? other.LinearVelocityStdDev.Clone() : null;
      numSats_ = other.numSats_;
      type_ = other.type_;
      solutionStatus_ = other.solutionStatus_;
      positionType_ = other.positionType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gnss Clone() {
      return new Gnss(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 2;
    private double measurementTime_;
    /// <summary>
    /// The time of position measurement, seconds since the GPS epoch (Jan 6,
    /// 1980).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "velocity_latency" field.</summary>
    public const int VelocityLatencyFieldNumber = 3;
    private float velocityLatency_;
    /// <summary>
    /// When velocity is computed from differentiating successive position
    /// computations, a non-zero latency is incurred. The velocity refers to the
    /// time measurement_time - velocity_latency.
    /// When velocity is computed using instantaneous Doppler frequency, there is
    /// no latency. We should have velocity_latency = 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityLatency {
      get { return velocityLatency_; }
      set {
        velocityLatency_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Apollo.Common.PointLLH position_;
    /// <summary>
    /// Position of the GNSS antenna phase center.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointLLH Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "position_std_dev" field.</summary>
    public const int PositionStdDevFieldNumber = 5;
    private global::Apollo.Common.Point3D positionStdDev_;
    /// <summary>
    /// East/north/up in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D PositionStdDev {
      get { return positionStdDev_; }
      set {
        positionStdDev_ = value;
      }
    }

    /// <summary>Field number for the "linear_velocity" field.</summary>
    public const int LinearVelocityFieldNumber = 6;
    private global::Apollo.Common.Point3D linearVelocity_;
    /// <summary>
    /// East/north/up in meters per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearVelocity {
      get { return linearVelocity_; }
      set {
        linearVelocity_ = value;
      }
    }

    /// <summary>Field number for the "linear_velocity_std_dev" field.</summary>
    public const int LinearVelocityStdDevFieldNumber = 7;
    private global::Apollo.Common.Point3D linearVelocityStdDev_;
    /// <summary>
    /// East/north/up in meters per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearVelocityStdDev {
      get { return linearVelocityStdDev_; }
      set {
        linearVelocityStdDev_ = value;
      }
    }

    /// <summary>Field number for the "num_sats" field.</summary>
    public const int NumSatsFieldNumber = 8;
    private int numSats_;
    /// <summary>
    /// Number of satellites in position solution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumSats {
      get { return numSats_; }
      set {
        numSats_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::Apollo.Drivers.Gnss.Gnss.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Gnss.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "solution_status" field.</summary>
    public const int SolutionStatusFieldNumber = 10;
    private uint solutionStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SolutionStatus {
      get { return solutionStatus_; }
      set {
        solutionStatus_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 11;
    private uint positionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gnss);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gnss other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if (VelocityLatency != other.VelocityLatency) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(PositionStdDev, other.PositionStdDev)) return false;
      if (!object.Equals(LinearVelocity, other.LinearVelocity)) return false;
      if (!object.Equals(LinearVelocityStdDev, other.LinearVelocityStdDev)) return false;
      if (NumSats != other.NumSats) return false;
      if (Type != other.Type) return false;
      if (SolutionStatus != other.SolutionStatus) return false;
      if (PositionType != other.PositionType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      if (VelocityLatency != 0F) hash ^= VelocityLatency.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (positionStdDev_ != null) hash ^= PositionStdDev.GetHashCode();
      if (linearVelocity_ != null) hash ^= LinearVelocity.GetHashCode();
      if (linearVelocityStdDev_ != null) hash ^= LinearVelocityStdDev.GetHashCode();
      if (NumSats != 0) hash ^= NumSats.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SolutionStatus != 0) hash ^= SolutionStatus.GetHashCode();
      if (PositionType != 0) hash ^= PositionType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MeasurementTime);
      }
      if (VelocityLatency != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(VelocityLatency);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (positionStdDev_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PositionStdDev);
      }
      if (linearVelocity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LinearVelocity);
      }
      if (linearVelocityStdDev_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LinearVelocityStdDev);
      }
      if (NumSats != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NumSats);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (SolutionStatus != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SolutionStatus);
      }
      if (PositionType != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PositionType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      if (VelocityLatency != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (positionStdDev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PositionStdDev);
      }
      if (linearVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearVelocity);
      }
      if (linearVelocityStdDev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearVelocityStdDev);
      }
      if (NumSats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumSats);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SolutionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SolutionStatus);
      }
      if (PositionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gnss other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      if (other.VelocityLatency != 0F) {
        VelocityLatency = other.VelocityLatency;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.PointLLH();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.positionStdDev_ != null) {
        if (positionStdDev_ == null) {
          positionStdDev_ = new global::Apollo.Common.Point3D();
        }
        PositionStdDev.MergeFrom(other.PositionStdDev);
      }
      if (other.linearVelocity_ != null) {
        if (linearVelocity_ == null) {
          linearVelocity_ = new global::Apollo.Common.Point3D();
        }
        LinearVelocity.MergeFrom(other.LinearVelocity);
      }
      if (other.linearVelocityStdDev_ != null) {
        if (linearVelocityStdDev_ == null) {
          linearVelocityStdDev_ = new global::Apollo.Common.Point3D();
        }
        LinearVelocityStdDev.MergeFrom(other.LinearVelocityStdDev);
      }
      if (other.NumSats != 0) {
        NumSats = other.NumSats;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SolutionStatus != 0) {
        SolutionStatus = other.SolutionStatus;
      }
      if (other.PositionType != 0) {
        PositionType = other.PositionType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 29: {
            VelocityLatency = input.ReadFloat();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.PointLLH();
            }
            input.ReadMessage(position_);
            break;
          }
          case 42: {
            if (positionStdDev_ == null) {
              positionStdDev_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(positionStdDev_);
            break;
          }
          case 50: {
            if (linearVelocity_ == null) {
              linearVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearVelocity_);
            break;
          }
          case 58: {
            if (linearVelocityStdDev_ == null) {
              linearVelocityStdDev_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearVelocityStdDev_);
            break;
          }
          case 64: {
            NumSats = input.ReadInt32();
            break;
          }
          case 72: {
            type_ = (global::Apollo.Drivers.Gnss.Gnss.Types.Type) input.ReadEnum();
            break;
          }
          case 80: {
            SolutionStatus = input.ReadUInt32();
            break;
          }
          case 88: {
            PositionType = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Gnss message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// GNSS solution type.
      /// </summary>
      public enum Type {
        /// <summary>
        /// It is recommended not using the GNSS solution if solution type is INVALID
        /// or PROPAGATED.
        /// </summary>
        [pbr::OriginalName("INVALID")] Invalid = 0,
        /// <summary>
        /// integrity warning, etc.
        /// </summary>
        [pbr::OriginalName("PROPAGATED")] Propagated = 1,
        /// <summary>
        /// It is recommended using the following types of solution.
        /// </summary>
        [pbr::OriginalName("SINGLE")] Single = 2,
        /// <summary>
        /// Pseudorange differential solution, including WAAS/SBAS
        /// </summary>
        [pbr::OriginalName("PSRDIFF")] Psrdiff = 3,
        /// <summary>
        /// solution.
        /// </summary>
        [pbr::OriginalName("PPP")] Ppp = 4,
        /// <summary>
        /// Real Time Kinematic (RTK) float solution.
        /// </summary>
        [pbr::OriginalName("RTK_FLOAT")] RtkFloat = 5,
        /// <summary>
        /// RTK integer solution.
        /// </summary>
        [pbr::OriginalName("RTK_INTEGER")] RtkInteger = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Range information for one GNSS satellite.
  /// </summary>
  public sealed partial class RangeInfo : pb::IMessage<RangeInfo> {
    private static readonly pb::MessageParser<RangeInfo> _parser = new pb::MessageParser<RangeInfo>(() => new RangeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeInfo(RangeInfo other) : this() {
      constellation_ = other.constellation_;
      prn_ = other.prn_;
      carrierFrequency_ = other.carrierFrequency_;
      pseudorange_ = other.pseudorange_;
      pseudorangeStdDev_ = other.pseudorangeStdDev_;
      carrierPhase_ = other.carrierPhase_;
      carrierPhaseStdDev_ = other.carrierPhaseStdDev_;
      doppler_ = other.doppler_;
      dopplerStdDev_ = other.dopplerStdDev_;
      cno_ = other.cno_;
      lockTime_ = other.lockTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeInfo Clone() {
      return new RangeInfo(this);
    }

    /// <summary>Field number for the "constellation" field.</summary>
    public const int ConstellationFieldNumber = 1;
    private global::Apollo.Drivers.Gnss.RangeInfo.Types.Constellation constellation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.RangeInfo.Types.Constellation Constellation {
      get { return constellation_; }
      set {
        constellation_ = value;
      }
    }

    /// <summary>Field number for the "prn" field.</summary>
    public const int PrnFieldNumber = 2;
    private int prn_;
    /// <summary>
    /// Satellite PRN number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Prn {
      get { return prn_; }
      set {
        prn_ = value;
      }
    }

    /// <summary>Field number for the "carrier_frequency" field.</summary>
    public const int CarrierFrequencyFieldNumber = 3;
    private uint carrierFrequency_;
    /// <summary>
    /// Carrier frequency of the signal used in this range measurement. Note that
    /// GLONASS uses FDMA, so different satellites transmit signals on different
    /// frequencies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CarrierFrequency {
      get { return carrierFrequency_; }
      set {
        carrierFrequency_ = value;
      }
    }

    /// <summary>Field number for the "pseudorange" field.</summary>
    public const int PseudorangeFieldNumber = 4;
    private double pseudorange_;
    /// <summary>
    /// In meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pseudorange {
      get { return pseudorange_; }
      set {
        pseudorange_ = value;
      }
    }

    /// <summary>Field number for the "pseudorange_std_dev" field.</summary>
    public const int PseudorangeStdDevFieldNumber = 5;
    private float pseudorangeStdDev_;
    /// <summary>
    /// In meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PseudorangeStdDev {
      get { return pseudorangeStdDev_; }
      set {
        pseudorangeStdDev_ = value;
      }
    }

    /// <summary>Field number for the "carrier_phase" field.</summary>
    public const int CarrierPhaseFieldNumber = 6;
    private double carrierPhase_;
    /// <summary>
    /// In cycles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CarrierPhase {
      get { return carrierPhase_; }
      set {
        carrierPhase_ = value;
      }
    }

    /// <summary>Field number for the "carrier_phase_std_dev" field.</summary>
    public const int CarrierPhaseStdDevFieldNumber = 7;
    private float carrierPhaseStdDev_;
    /// <summary>
    /// In cycles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CarrierPhaseStdDev {
      get { return carrierPhaseStdDev_; }
      set {
        carrierPhaseStdDev_ = value;
      }
    }

    /// <summary>Field number for the "doppler" field.</summary>
    public const int DopplerFieldNumber = 8;
    private float doppler_;
    /// <summary>
    /// In Hz.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Doppler {
      get { return doppler_; }
      set {
        doppler_ = value;
      }
    }

    /// <summary>Field number for the "doppler_std_dev" field.</summary>
    public const int DopplerStdDevFieldNumber = 9;
    private float dopplerStdDev_;
    /// <summary>
    /// In Hz.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DopplerStdDev {
      get { return dopplerStdDev_; }
      set {
        dopplerStdDev_ = value;
      }
    }

    /// <summary>Field number for the "cno" field.</summary>
    public const int CnoFieldNumber = 10;
    private int cno_;
    /// <summary>
    /// Carrier-to-noise ratio (signal // strength) in dB-Hz.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cno {
      get { return cno_; }
      set {
        cno_ = value;
      }
    }

    /// <summary>Field number for the "lock_time" field.</summary>
    public const int LockTimeFieldNumber = 11;
    private int lockTime_;
    /// <summary>
    /// Carrier phase lock time in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Constellation != other.Constellation) return false;
      if (Prn != other.Prn) return false;
      if (CarrierFrequency != other.CarrierFrequency) return false;
      if (Pseudorange != other.Pseudorange) return false;
      if (PseudorangeStdDev != other.PseudorangeStdDev) return false;
      if (CarrierPhase != other.CarrierPhase) return false;
      if (CarrierPhaseStdDev != other.CarrierPhaseStdDev) return false;
      if (Doppler != other.Doppler) return false;
      if (DopplerStdDev != other.DopplerStdDev) return false;
      if (Cno != other.Cno) return false;
      if (LockTime != other.LockTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Constellation != 0) hash ^= Constellation.GetHashCode();
      if (Prn != 0) hash ^= Prn.GetHashCode();
      if (CarrierFrequency != 0) hash ^= CarrierFrequency.GetHashCode();
      if (Pseudorange != 0D) hash ^= Pseudorange.GetHashCode();
      if (PseudorangeStdDev != 0F) hash ^= PseudorangeStdDev.GetHashCode();
      if (CarrierPhase != 0D) hash ^= CarrierPhase.GetHashCode();
      if (CarrierPhaseStdDev != 0F) hash ^= CarrierPhaseStdDev.GetHashCode();
      if (Doppler != 0F) hash ^= Doppler.GetHashCode();
      if (DopplerStdDev != 0F) hash ^= DopplerStdDev.GetHashCode();
      if (Cno != 0) hash ^= Cno.GetHashCode();
      if (LockTime != 0) hash ^= LockTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Constellation != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Constellation);
      }
      if (Prn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Prn);
      }
      if (CarrierFrequency != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(CarrierFrequency);
      }
      if (Pseudorange != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Pseudorange);
      }
      if (PseudorangeStdDev != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PseudorangeStdDev);
      }
      if (CarrierPhase != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CarrierPhase);
      }
      if (CarrierPhaseStdDev != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CarrierPhaseStdDev);
      }
      if (Doppler != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Doppler);
      }
      if (DopplerStdDev != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DopplerStdDev);
      }
      if (Cno != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Cno);
      }
      if (LockTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LockTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Constellation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Constellation);
      }
      if (Prn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Prn);
      }
      if (CarrierFrequency != 0) {
        size += 1 + 4;
      }
      if (Pseudorange != 0D) {
        size += 1 + 8;
      }
      if (PseudorangeStdDev != 0F) {
        size += 1 + 4;
      }
      if (CarrierPhase != 0D) {
        size += 1 + 8;
      }
      if (CarrierPhaseStdDev != 0F) {
        size += 1 + 4;
      }
      if (Doppler != 0F) {
        size += 1 + 4;
      }
      if (DopplerStdDev != 0F) {
        size += 1 + 4;
      }
      if (Cno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cno);
      }
      if (LockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Constellation != 0) {
        Constellation = other.Constellation;
      }
      if (other.Prn != 0) {
        Prn = other.Prn;
      }
      if (other.CarrierFrequency != 0) {
        CarrierFrequency = other.CarrierFrequency;
      }
      if (other.Pseudorange != 0D) {
        Pseudorange = other.Pseudorange;
      }
      if (other.PseudorangeStdDev != 0F) {
        PseudorangeStdDev = other.PseudorangeStdDev;
      }
      if (other.CarrierPhase != 0D) {
        CarrierPhase = other.CarrierPhase;
      }
      if (other.CarrierPhaseStdDev != 0F) {
        CarrierPhaseStdDev = other.CarrierPhaseStdDev;
      }
      if (other.Doppler != 0F) {
        Doppler = other.Doppler;
      }
      if (other.DopplerStdDev != 0F) {
        DopplerStdDev = other.DopplerStdDev;
      }
      if (other.Cno != 0) {
        Cno = other.Cno;
      }
      if (other.LockTime != 0) {
        LockTime = other.LockTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            constellation_ = (global::Apollo.Drivers.Gnss.RangeInfo.Types.Constellation) input.ReadEnum();
            break;
          }
          case 16: {
            Prn = input.ReadInt32();
            break;
          }
          case 29: {
            CarrierFrequency = input.ReadFixed32();
            break;
          }
          case 33: {
            Pseudorange = input.ReadDouble();
            break;
          }
          case 45: {
            PseudorangeStdDev = input.ReadFloat();
            break;
          }
          case 49: {
            CarrierPhase = input.ReadDouble();
            break;
          }
          case 61: {
            CarrierPhaseStdDev = input.ReadFloat();
            break;
          }
          case 69: {
            Doppler = input.ReadFloat();
            break;
          }
          case 77: {
            DopplerStdDev = input.ReadFloat();
            break;
          }
          case 80: {
            Cno = input.ReadInt32();
            break;
          }
          case 88: {
            LockTime = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RangeInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Constellation {
        [pbr::OriginalName("GPS")] Gps = 0,
        [pbr::OriginalName("GLONASS")] Glonass = 1,
        [pbr::OriginalName("SBAS")] Sbas = 2,
        [pbr::OriginalName("GALILEO")] Galileo = 3,
        [pbr::OriginalName("BEIDOU")] Beidou = 4,
        [pbr::OriginalName("QZSS")] Qzss = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// All range measurements at a time.
  /// </summary>
  public sealed partial class GnssRange : pb::IMessage<GnssRange> {
    private static readonly pb::MessageParser<GnssRange> _parser = new pb::MessageParser<GnssRange>(() => new GnssRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GnssRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssRange(GnssRange other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      measurementTime_ = other.measurementTime_;
      ranges_ = other.ranges_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssRange Clone() {
      return new GnssRange(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 2;
    private double measurementTime_;
    /// <summary>
    /// The time of range measurement, seconds since the GPS epoch (Jan 6, 1980).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "ranges" field.</summary>
    public const int RangesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Gnss.RangeInfo> _repeated_ranges_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Drivers.Gnss.RangeInfo.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Gnss.RangeInfo> ranges_ = new pbc::RepeatedField<global::Apollo.Drivers.Gnss.RangeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Gnss.RangeInfo> Ranges {
      get { return ranges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GnssRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GnssRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if(!ranges_.Equals(other.ranges_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      hash ^= ranges_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MeasurementTime);
      }
      ranges_.WriteTo(output, _repeated_ranges_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      size += ranges_.CalculateSize(_repeated_ranges_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GnssRange other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      ranges_.Add(other.ranges_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 26: {
            ranges_.AddEntriesFrom(input, _repeated_ranges_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// gnss raw data
  /// </summary>
  public sealed partial class RawData : pb::IMessage<RawData> {
    private static readonly pb::MessageParser<RawData> _parser = new pb::MessageParser<RawData>(() => new RawData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawData(RawData other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawData Clone() {
      return new RawData(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawData other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
