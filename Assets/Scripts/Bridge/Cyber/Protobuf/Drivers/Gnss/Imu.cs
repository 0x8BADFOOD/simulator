// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/imu.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Gnss {

  /// <summary>Holder for reflection information generated from modules/drivers/gnss/proto/imu.proto</summary>
  public static partial class ImuReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/gnss/proto/imu.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImuReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRtb2R1bGVzL2RyaXZlcnMvZ25zcy9wcm90by9pbXUucHJvdG8SE2Fwb2xs",
            "by5kcml2ZXJzLmduc3MaIW1vZHVsZXMvY29tbW9uL3Byb3RvL2hlYWRlci5w",
            "cm90bxojbW9kdWxlcy9jb21tb24vcHJvdG8vZ2VvbWV0cnkucHJvdG8ixwEK",
            "A0ltdRIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRlchIY",
            "ChBtZWFzdXJlbWVudF90aW1lGAIgASgBEhgKEG1lYXN1cmVtZW50X3NwYW4Y",
            "AyABKAISMwoTbGluZWFyX2FjY2VsZXJhdGlvbhgEIAEoCzIWLmFwb2xsby5j",
            "b21tb24uUG9pbnQzRBIwChBhbmd1bGFyX3ZlbG9jaXR5GAUgASgLMhYuYXBv",
            "bGxvLmNvbW1vbi5Qb2ludDNEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Imu), global::Apollo.Drivers.Gnss.Imu.Parser, new[]{ "Header", "MeasurementTime", "MeasurementSpan", "LinearAcceleration", "AngularVelocity" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Measurements from an inertial measurement unit (IMU). The solution is with
  /// respect to the IMU by default.
  /// </summary>
  public sealed partial class Imu : pb::IMessage<Imu> {
    private static readonly pb::MessageParser<Imu> _parser = new pb::MessageParser<Imu>(() => new Imu());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Imu> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.ImuReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imu() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imu(Imu other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      measurementTime_ = other.measurementTime_;
      measurementSpan_ = other.measurementSpan_;
      LinearAcceleration = other.linearAcceleration_ != null ? other.LinearAcceleration.Clone() : null;
      AngularVelocity = other.angularVelocity_ != null ? other.AngularVelocity.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imu Clone() {
      return new Imu(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 2;
    private double measurementTime_;
    /// <summary>
    /// The time of IMU measurement, seconds since the GPS epoch (Jan 6, 1980).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "measurement_span" field.</summary>
    public const int MeasurementSpanFieldNumber = 3;
    private float measurementSpan_;
    /// <summary>
    /// When measurement_span is non-zero, the gyroscope and accelerometer
    /// measurements are averaged for the period from
    /// (measurement_time - measurement_span) to measurement_time. Usually,
    ///      measurement_span = 1 / sampling_frequency.
    ///
    /// When measurement_span is 0, angular_velocity and linear_acceleration are
    /// instantaneous at measurement_time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeasurementSpan {
      get { return measurementSpan_; }
      set {
        measurementSpan_ = value;
      }
    }

    /// <summary>Field number for the "linear_acceleration" field.</summary>
    public const int LinearAccelerationFieldNumber = 4;
    private global::Apollo.Common.Point3D linearAcceleration_;
    /// <summary>
    /// Forward/left/up in meters per square second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearAcceleration {
      get { return linearAcceleration_; }
      set {
        linearAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 5;
    private global::Apollo.Common.Point3D angularVelocity_;
    /// <summary>
    /// Around forward/left/up axes in radians per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Imu);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Imu other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if (MeasurementSpan != other.MeasurementSpan) return false;
      if (!object.Equals(LinearAcceleration, other.LinearAcceleration)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      if (MeasurementSpan != 0F) hash ^= MeasurementSpan.GetHashCode();
      if (linearAcceleration_ != null) hash ^= LinearAcceleration.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MeasurementTime);
      }
      if (MeasurementSpan != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MeasurementSpan);
      }
      if (linearAcceleration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LinearAcceleration);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AngularVelocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      if (MeasurementSpan != 0F) {
        size += 1 + 4;
      }
      if (linearAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearAcceleration);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Imu other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      if (other.MeasurementSpan != 0F) {
        MeasurementSpan = other.MeasurementSpan;
      }
      if (other.linearAcceleration_ != null) {
        if (linearAcceleration_ == null) {
          linearAcceleration_ = new global::Apollo.Common.Point3D();
        }
        LinearAcceleration.MergeFrom(other.LinearAcceleration);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::Apollo.Common.Point3D();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 29: {
            MeasurementSpan = input.ReadFloat();
            break;
          }
          case 34: {
            if (linearAcceleration_ == null) {
              linearAcceleration_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearAcceleration_);
            break;
          }
          case 42: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
