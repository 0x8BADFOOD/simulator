// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_status.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Gnss {

  /// <summary>Holder for reflection information generated from modules/drivers/gnss/proto/gnss_status.proto</summary>
  public static partial class GnssStatusReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/gnss/proto/gnss_status.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GnssStatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixtb2R1bGVzL2RyaXZlcnMvZ25zcy9wcm90by9nbnNzX3N0YXR1cy5wcm90",
            "bxITYXBvbGxvLmRyaXZlcnMuZ25zcxohbW9kdWxlcy9jb21tb24vcHJvdG8v",
            "aGVhZGVyLnByb3RvIqgCCgxTdHJlYW1TdGF0dXMSJQoGaGVhZGVyGAEgASgL",
            "MhUuYXBvbGxvLmNvbW1vbi5IZWFkZXISPwoPaW5zX3N0cmVhbV90eXBlGAIg",
            "ASgOMiYuYXBvbGxvLmRyaXZlcnMuZ25zcy5TdHJlYW1TdGF0dXMuVHlwZRJC",
            "ChJydGtfc3RyZWFtX2luX3R5cGUYAyABKA4yJi5hcG9sbG8uZHJpdmVycy5n",
            "bnNzLlN0cmVhbVN0YXR1cy5UeXBlEkMKE3J0a19zdHJlYW1fb3V0X3R5cGUY",
            "BCABKA4yJi5hcG9sbG8uZHJpdmVycy5nbnNzLlN0cmVhbVN0YXR1cy5UeXBl",
            "IicKBFR5cGUSEAoMRElTQ09OTkVDVEVEEAASDQoJQ09OTkVDVEVEEAEilAEK",
            "CUluc1N0YXR1cxIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9uLkhl",
            "YWRlchIxCgR0eXBlGAIgASgOMiMuYXBvbGxvLmRyaXZlcnMuZ25zcy5JbnNT",
            "dGF0dXMuVHlwZSItCgRUeXBlEgsKB0lOVkFMSUQQABIOCgpDT05WRVJHSU5H",
            "EAESCAoER09PRBACIpEBCgpHbnNzU3RhdHVzEiUKBmhlYWRlchgBIAEoCzIV",
            "LmFwb2xsby5jb21tb24uSGVhZGVyEhoKEnNvbHV0aW9uX2NvbXBsZXRlZBgC",
            "IAEoCBIXCg9zb2x1dGlvbl9zdGF0dXMYAyABKA0SFQoNcG9zaXRpb25fdHlw",
            "ZRgEIAEoDRIQCghudW1fc2F0cxgFIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.StreamStatus), global::Apollo.Drivers.Gnss.StreamStatus.Parser, new[]{ "Header", "InsStreamType", "RtkStreamInType", "RtkStreamOutType" }, null, new[]{ typeof(global::Apollo.Drivers.Gnss.StreamStatus.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.InsStatus), global::Apollo.Drivers.Gnss.InsStatus.Parser, new[]{ "Header", "Type" }, null, new[]{ typeof(global::Apollo.Drivers.Gnss.InsStatus.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.GnssStatus), global::Apollo.Drivers.Gnss.GnssStatus.Parser, new[]{ "Header", "SolutionCompleted", "SolutionStatus", "PositionType", "NumSats" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StreamStatus : pb::IMessage<StreamStatus> {
    private static readonly pb::MessageParser<StreamStatus> _parser = new pb::MessageParser<StreamStatus>(() => new StreamStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssStatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStatus(StreamStatus other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      insStreamType_ = other.insStreamType_;
      rtkStreamInType_ = other.rtkStreamInType_;
      rtkStreamOutType_ = other.rtkStreamOutType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStatus Clone() {
      return new StreamStatus(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ins_stream_type" field.</summary>
    public const int InsStreamTypeFieldNumber = 2;
    private global::Apollo.Drivers.Gnss.StreamStatus.Types.Type insStreamType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.StreamStatus.Types.Type InsStreamType {
      get { return insStreamType_; }
      set {
        insStreamType_ = value;
      }
    }

    /// <summary>Field number for the "rtk_stream_in_type" field.</summary>
    public const int RtkStreamInTypeFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.StreamStatus.Types.Type rtkStreamInType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.StreamStatus.Types.Type RtkStreamInType {
      get { return rtkStreamInType_; }
      set {
        rtkStreamInType_ = value;
      }
    }

    /// <summary>Field number for the "rtk_stream_out_type" field.</summary>
    public const int RtkStreamOutTypeFieldNumber = 4;
    private global::Apollo.Drivers.Gnss.StreamStatus.Types.Type rtkStreamOutType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.StreamStatus.Types.Type RtkStreamOutType {
      get { return rtkStreamOutType_; }
      set {
        rtkStreamOutType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (InsStreamType != other.InsStreamType) return false;
      if (RtkStreamInType != other.RtkStreamInType) return false;
      if (RtkStreamOutType != other.RtkStreamOutType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (InsStreamType != 0) hash ^= InsStreamType.GetHashCode();
      if (RtkStreamInType != 0) hash ^= RtkStreamInType.GetHashCode();
      if (RtkStreamOutType != 0) hash ^= RtkStreamOutType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (InsStreamType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) InsStreamType);
      }
      if (RtkStreamInType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RtkStreamInType);
      }
      if (RtkStreamOutType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RtkStreamOutType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (InsStreamType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InsStreamType);
      }
      if (RtkStreamInType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RtkStreamInType);
      }
      if (RtkStreamOutType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RtkStreamOutType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamStatus other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.InsStreamType != 0) {
        InsStreamType = other.InsStreamType;
      }
      if (other.RtkStreamInType != 0) {
        RtkStreamInType = other.RtkStreamInType;
      }
      if (other.RtkStreamOutType != 0) {
        RtkStreamOutType = other.RtkStreamOutType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            insStreamType_ = (global::Apollo.Drivers.Gnss.StreamStatus.Types.Type) input.ReadEnum();
            break;
          }
          case 24: {
            rtkStreamInType_ = (global::Apollo.Drivers.Gnss.StreamStatus.Types.Type) input.ReadEnum();
            break;
          }
          case 32: {
            rtkStreamOutType_ = (global::Apollo.Drivers.Gnss.StreamStatus.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StreamStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("DISCONNECTED")] Disconnected = 0,
        [pbr::OriginalName("CONNECTED")] Connected = 1,
      }

    }
    #endregion

  }

  public sealed partial class InsStatus : pb::IMessage<InsStatus> {
    private static readonly pb::MessageParser<InsStatus> _parser = new pb::MessageParser<InsStatus>(() => new InsStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssStatusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsStatus(InsStatus other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsStatus Clone() {
      return new InsStatus(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Apollo.Drivers.Gnss.InsStatus.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.InsStatus.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsStatus other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            type_ = (global::Apollo.Drivers.Gnss.InsStatus.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InsStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// Invalid solution due to insufficient observations, no initial GNSS, ...
        /// </summary>
        [pbr::OriginalName("INVALID")] Invalid = 0,
        /// <summary>
        /// Use with caution. The covariance matrix may be unavailable or incorrect.
        /// High-variance result due to aligning, insufficient vehicle dynamics, ...
        /// </summary>
        [pbr::OriginalName("CONVERGING")] Converging = 1,
        /// <summary>
        /// Safe to use. The INS has fully converged.
        /// </summary>
        [pbr::OriginalName("GOOD")] Good = 2,
      }

    }
    #endregion

  }

  public sealed partial class GnssStatus : pb::IMessage<GnssStatus> {
    private static readonly pb::MessageParser<GnssStatus> _parser = new pb::MessageParser<GnssStatus>(() => new GnssStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GnssStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssStatusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssStatus(GnssStatus other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      solutionCompleted_ = other.solutionCompleted_;
      solutionStatus_ = other.solutionStatus_;
      positionType_ = other.positionType_;
      numSats_ = other.numSats_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssStatus Clone() {
      return new GnssStatus(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "solution_completed" field.</summary>
    public const int SolutionCompletedFieldNumber = 2;
    private bool solutionCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SolutionCompleted {
      get { return solutionCompleted_; }
      set {
        solutionCompleted_ = value;
      }
    }

    /// <summary>Field number for the "solution_status" field.</summary>
    public const int SolutionStatusFieldNumber = 3;
    private uint solutionStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SolutionStatus {
      get { return solutionStatus_; }
      set {
        solutionStatus_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 4;
    private uint positionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "num_sats" field.</summary>
    public const int NumSatsFieldNumber = 5;
    private int numSats_;
    /// <summary>
    /// Number of satellites in position solution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumSats {
      get { return numSats_; }
      set {
        numSats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GnssStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GnssStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (SolutionCompleted != other.SolutionCompleted) return false;
      if (SolutionStatus != other.SolutionStatus) return false;
      if (PositionType != other.PositionType) return false;
      if (NumSats != other.NumSats) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (SolutionCompleted != false) hash ^= SolutionCompleted.GetHashCode();
      if (SolutionStatus != 0) hash ^= SolutionStatus.GetHashCode();
      if (PositionType != 0) hash ^= PositionType.GetHashCode();
      if (NumSats != 0) hash ^= NumSats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (SolutionCompleted != false) {
        output.WriteRawTag(16);
        output.WriteBool(SolutionCompleted);
      }
      if (SolutionStatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SolutionStatus);
      }
      if (PositionType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PositionType);
      }
      if (NumSats != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumSats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (SolutionCompleted != false) {
        size += 1 + 1;
      }
      if (SolutionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SolutionStatus);
      }
      if (PositionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionType);
      }
      if (NumSats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumSats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GnssStatus other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.SolutionCompleted != false) {
        SolutionCompleted = other.SolutionCompleted;
      }
      if (other.SolutionStatus != 0) {
        SolutionStatus = other.SolutionStatus;
      }
      if (other.PositionType != 0) {
        PositionType = other.PositionType;
      }
      if (other.NumSats != 0) {
        NumSats = other.NumSats;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            SolutionCompleted = input.ReadBool();
            break;
          }
          case 24: {
            SolutionStatus = input.ReadUInt32();
            break;
          }
          case 32: {
            PositionType = input.ReadUInt32();
            break;
          }
          case 40: {
            NumSats = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
