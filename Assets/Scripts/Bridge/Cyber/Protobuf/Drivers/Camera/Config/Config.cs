// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/camera/proto/config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Camera.Config {

  /// <summary>Holder for reflection information generated from modules/drivers/camera/proto/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/camera/proto/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciltb2R1bGVzL2RyaXZlcnMvY2FtZXJhL3Byb3RvL2NvbmZpZy5wcm90bxIc",
            "YXBvbGxvLmRyaXZlcnMuY2FtZXJhLmNvbmZpZyL3BQoGQ29uZmlnEhIKCmNh",
            "bWVyYV9kZXYYASABKAkSEAoIZnJhbWVfaWQYAiABKAkSFAoMcGl4ZWxfZm9y",
            "bWF0GAMgASgJEjkKCWlvX21ldGhvZBgEIAEoDjImLmFwb2xsby5kcml2ZXJz",
            "LmNhbWVyYS5jb25maWcuSU9NZXRob2QSDQoFd2lkdGgYBSABKA0SDgoGaGVp",
            "Z2h0GAYgASgNEhIKCmZyYW1lX3JhdGUYByABKA0SEgoKbW9ub2Nocm9tZRgI",
            "IAEoCBISCgpicmlnaHRuZXNzGAkgASgFEhAKCGNvbnRyYXN0GAogASgFEhIK",
            "CnNhdHVyYXRpb24YCyABKAUSEQoJc2hhcnBuZXNzGAwgASgFEgwKBGdhaW4Y",
            "DSABKAUSEgoKYXV0b19mb2N1cxgOIAEoCBINCgVmb2N1cxgPIAEoBRIVCg1h",
            "dXRvX2V4cG9zdXJlGBAgASgIEhAKCGV4cG9zdXJlGBEgASgFEhoKEmF1dG9f",
            "d2hpdGVfYmFsYW5jZRgSIAEoCBIVCg13aGl0ZV9iYWxhbmNlGBMgASgFEhcK",
            "D2J5dGVzX3Blcl9waXhlbBgUIAEoDRIYChB0cmlnZ2VyX2ludGVybmFsGBUg",
            "ASgNEhMKC3RyaWdnZXJfZnBzGBYgASgNEhQKDGNoYW5uZWxfbmFtZRgXIAEo",
            "CRIWCg5kZXZpY2Vfd2FpdF9tcxgYIAEoDRIRCglzcGluX3JhdGUYGSABKA0S",
            "PQoLb3V0cHV0X3R5cGUYGiABKA4yKC5hcG9sbG8uZHJpdmVycy5jYW1lcmEu",
            "Y29uZmlnLk91dHB1dFR5cGUSSgoNY29tcHJlc3NfY29uZhgbIAEoCzIzLmFw",
            "b2xsby5kcml2ZXJzLmNhbWVyYS5jb25maWcuQ29uZmlnLkNvbXByZXNzQ29u",
            "ZmlnGkEKDkNvbXByZXNzQ29uZmlnEhYKDm91dHB1dF9jaGFubmVsGAEgASgJ",
            "EhcKD2ltYWdlX3Bvb2xfc2l6ZRgCIAEoDSpgCghJT01ldGhvZBIVChFJT19N",
            "RVRIT0RfVU5LTk9XThAAEhIKDklPX01FVEhPRF9SRUFEEAESEgoOSU9fTUVU",
            "SE9EX01NQVAQAhIVChFJT19NRVRIT0RfVVNFUlBUUhADKh8KCk91dHB1dFR5",
            "cGUSCAoEWVVZVhAAEgcKA1JHQhABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Drivers.Camera.Config.IOMethod), typeof(global::Apollo.Drivers.Camera.Config.OutputType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Camera.Config.Config), global::Apollo.Drivers.Camera.Config.Config.Parser, new[]{ "CameraDev", "FrameId", "PixelFormat", "IoMethod", "Width", "Height", "FrameRate", "Monochrome", "Brightness", "Contrast", "Saturation", "Sharpness", "Gain", "AutoFocus", "Focus", "AutoExposure", "Exposure", "AutoWhiteBalance", "WhiteBalance", "BytesPerPixel", "TriggerInternal", "TriggerFps", "ChannelName", "DeviceWaitMs", "SpinRate", "OutputType", "CompressConf" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Camera.Config.Config.Types.CompressConfig), global::Apollo.Drivers.Camera.Config.Config.Types.CompressConfig.Parser, new[]{ "OutputChannel", "ImagePoolSize" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum IOMethod {
    [pbr::OriginalName("IO_METHOD_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("IO_METHOD_READ")] Read = 1,
    [pbr::OriginalName("IO_METHOD_MMAP")] Mmap = 2,
    [pbr::OriginalName("IO_METHOD_USERPTR")] Userptr = 3,
  }

  public enum OutputType {
    [pbr::OriginalName("YUYV")] Yuyv = 0,
    [pbr::OriginalName("RGB")] Rgb = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Camera.Config.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      cameraDev_ = other.cameraDev_;
      frameId_ = other.frameId_;
      pixelFormat_ = other.pixelFormat_;
      ioMethod_ = other.ioMethod_;
      width_ = other.width_;
      height_ = other.height_;
      frameRate_ = other.frameRate_;
      monochrome_ = other.monochrome_;
      brightness_ = other.brightness_;
      contrast_ = other.contrast_;
      saturation_ = other.saturation_;
      sharpness_ = other.sharpness_;
      gain_ = other.gain_;
      autoFocus_ = other.autoFocus_;
      focus_ = other.focus_;
      autoExposure_ = other.autoExposure_;
      exposure_ = other.exposure_;
      autoWhiteBalance_ = other.autoWhiteBalance_;
      whiteBalance_ = other.whiteBalance_;
      bytesPerPixel_ = other.bytesPerPixel_;
      triggerInternal_ = other.triggerInternal_;
      triggerFps_ = other.triggerFps_;
      channelName_ = other.channelName_;
      deviceWaitMs_ = other.deviceWaitMs_;
      spinRate_ = other.spinRate_;
      outputType_ = other.outputType_;
      CompressConf = other.compressConf_ != null ? other.CompressConf.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "camera_dev" field.</summary>
    public const int CameraDevFieldNumber = 1;
    private string cameraDev_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraDev {
      get { return cameraDev_; }
      set {
        cameraDev_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private string frameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameId {
      get { return frameId_; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pixel_format" field.</summary>
    public const int PixelFormatFieldNumber = 3;
    private string pixelFormat_ = "";
    /// <summary>
    /// v4l pixel format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PixelFormat {
      get { return pixelFormat_; }
      set {
        pixelFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "io_method" field.</summary>
    public const int IoMethodFieldNumber = 4;
    private global::Apollo.Drivers.Camera.Config.IOMethod ioMethod_ = 0;
    /// <summary>
    /// mmap, userptr, read
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Camera.Config.IOMethod IoMethod {
      get { return ioMethod_; }
      set {
        ioMethod_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 6;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "frame_rate" field.</summary>
    public const int FrameRateFieldNumber = 7;
    private uint frameRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "monochrome" field.</summary>
    public const int MonochromeFieldNumber = 8;
    private bool monochrome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Monochrome {
      get { return monochrome_; }
      set {
        monochrome_ = value;
      }
    }

    /// <summary>Field number for the "brightness" field.</summary>
    public const int BrightnessFieldNumber = 9;
    private int brightness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Brightness {
      get { return brightness_; }
      set {
        brightness_ = value;
      }
    }

    /// <summary>Field number for the "contrast" field.</summary>
    public const int ContrastFieldNumber = 10;
    private int contrast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Contrast {
      get { return contrast_; }
      set {
        contrast_ = value;
      }
    }

    /// <summary>Field number for the "saturation" field.</summary>
    public const int SaturationFieldNumber = 11;
    private int saturation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Saturation {
      get { return saturation_; }
      set {
        saturation_ = value;
      }
    }

    /// <summary>Field number for the "sharpness" field.</summary>
    public const int SharpnessFieldNumber = 12;
    private int sharpness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sharpness {
      get { return sharpness_; }
      set {
        sharpness_ = value;
      }
    }

    /// <summary>Field number for the "gain" field.</summary>
    public const int GainFieldNumber = 13;
    private int gain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gain {
      get { return gain_; }
      set {
        gain_ = value;
      }
    }

    /// <summary>Field number for the "auto_focus" field.</summary>
    public const int AutoFocusFieldNumber = 14;
    private bool autoFocus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoFocus {
      get { return autoFocus_; }
      set {
        autoFocus_ = value;
      }
    }

    /// <summary>Field number for the "focus" field.</summary>
    public const int FocusFieldNumber = 15;
    private int focus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Focus {
      get { return focus_; }
      set {
        focus_ = value;
      }
    }

    /// <summary>Field number for the "auto_exposure" field.</summary>
    public const int AutoExposureFieldNumber = 16;
    private bool autoExposure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoExposure {
      get { return autoExposure_; }
      set {
        autoExposure_ = value;
      }
    }

    /// <summary>Field number for the "exposure" field.</summary>
    public const int ExposureFieldNumber = 17;
    private int exposure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exposure {
      get { return exposure_; }
      set {
        exposure_ = value;
      }
    }

    /// <summary>Field number for the "auto_white_balance" field.</summary>
    public const int AutoWhiteBalanceFieldNumber = 18;
    private bool autoWhiteBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoWhiteBalance {
      get { return autoWhiteBalance_; }
      set {
        autoWhiteBalance_ = value;
      }
    }

    /// <summary>Field number for the "white_balance" field.</summary>
    public const int WhiteBalanceFieldNumber = 19;
    private int whiteBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WhiteBalance {
      get { return whiteBalance_; }
      set {
        whiteBalance_ = value;
      }
    }

    /// <summary>Field number for the "bytes_per_pixel" field.</summary>
    public const int BytesPerPixelFieldNumber = 20;
    private uint bytesPerPixel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BytesPerPixel {
      get { return bytesPerPixel_; }
      set {
        bytesPerPixel_ = value;
      }
    }

    /// <summary>Field number for the "trigger_internal" field.</summary>
    public const int TriggerInternalFieldNumber = 21;
    private uint triggerInternal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TriggerInternal {
      get { return triggerInternal_; }
      set {
        triggerInternal_ = value;
      }
    }

    /// <summary>Field number for the "trigger_fps" field.</summary>
    public const int TriggerFpsFieldNumber = 22;
    private uint triggerFps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TriggerFps {
      get { return triggerFps_; }
      set {
        triggerFps_ = value;
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 23;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_wait_ms" field.</summary>
    public const int DeviceWaitMsFieldNumber = 24;
    private uint deviceWaitMs_;
    /// <summary>
    /// wait time when camera select timeout
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeviceWaitMs {
      get { return deviceWaitMs_; }
      set {
        deviceWaitMs_ = value;
      }
    }

    /// <summary>Field number for the "spin_rate" field.</summary>
    public const int SpinRateFieldNumber = 25;
    private uint spinRate_;
    /// <summary>
    /// camera select spin time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpinRate {
      get { return spinRate_; }
      set {
        spinRate_ = value;
      }
    }

    /// <summary>Field number for the "output_type" field.</summary>
    public const int OutputTypeFieldNumber = 26;
    private global::Apollo.Drivers.Camera.Config.OutputType outputType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Camera.Config.OutputType OutputType {
      get { return outputType_; }
      set {
        outputType_ = value;
      }
    }

    /// <summary>Field number for the "compress_conf" field.</summary>
    public const int CompressConfFieldNumber = 27;
    private global::Apollo.Drivers.Camera.Config.Config.Types.CompressConfig compressConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Camera.Config.Config.Types.CompressConfig CompressConf {
      get { return compressConf_; }
      set {
        compressConf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CameraDev != other.CameraDev) return false;
      if (FrameId != other.FrameId) return false;
      if (PixelFormat != other.PixelFormat) return false;
      if (IoMethod != other.IoMethod) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (FrameRate != other.FrameRate) return false;
      if (Monochrome != other.Monochrome) return false;
      if (Brightness != other.Brightness) return false;
      if (Contrast != other.Contrast) return false;
      if (Saturation != other.Saturation) return false;
      if (Sharpness != other.Sharpness) return false;
      if (Gain != other.Gain) return false;
      if (AutoFocus != other.AutoFocus) return false;
      if (Focus != other.Focus) return false;
      if (AutoExposure != other.AutoExposure) return false;
      if (Exposure != other.Exposure) return false;
      if (AutoWhiteBalance != other.AutoWhiteBalance) return false;
      if (WhiteBalance != other.WhiteBalance) return false;
      if (BytesPerPixel != other.BytesPerPixel) return false;
      if (TriggerInternal != other.TriggerInternal) return false;
      if (TriggerFps != other.TriggerFps) return false;
      if (ChannelName != other.ChannelName) return false;
      if (DeviceWaitMs != other.DeviceWaitMs) return false;
      if (SpinRate != other.SpinRate) return false;
      if (OutputType != other.OutputType) return false;
      if (!object.Equals(CompressConf, other.CompressConf)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CameraDev.Length != 0) hash ^= CameraDev.GetHashCode();
      if (FrameId.Length != 0) hash ^= FrameId.GetHashCode();
      if (PixelFormat.Length != 0) hash ^= PixelFormat.GetHashCode();
      if (IoMethod != 0) hash ^= IoMethod.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (FrameRate != 0) hash ^= FrameRate.GetHashCode();
      if (Monochrome != false) hash ^= Monochrome.GetHashCode();
      if (Brightness != 0) hash ^= Brightness.GetHashCode();
      if (Contrast != 0) hash ^= Contrast.GetHashCode();
      if (Saturation != 0) hash ^= Saturation.GetHashCode();
      if (Sharpness != 0) hash ^= Sharpness.GetHashCode();
      if (Gain != 0) hash ^= Gain.GetHashCode();
      if (AutoFocus != false) hash ^= AutoFocus.GetHashCode();
      if (Focus != 0) hash ^= Focus.GetHashCode();
      if (AutoExposure != false) hash ^= AutoExposure.GetHashCode();
      if (Exposure != 0) hash ^= Exposure.GetHashCode();
      if (AutoWhiteBalance != false) hash ^= AutoWhiteBalance.GetHashCode();
      if (WhiteBalance != 0) hash ^= WhiteBalance.GetHashCode();
      if (BytesPerPixel != 0) hash ^= BytesPerPixel.GetHashCode();
      if (TriggerInternal != 0) hash ^= TriggerInternal.GetHashCode();
      if (TriggerFps != 0) hash ^= TriggerFps.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (DeviceWaitMs != 0) hash ^= DeviceWaitMs.GetHashCode();
      if (SpinRate != 0) hash ^= SpinRate.GetHashCode();
      if (OutputType != 0) hash ^= OutputType.GetHashCode();
      if (compressConf_ != null) hash ^= CompressConf.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CameraDev.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CameraDev);
      }
      if (FrameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameId);
      }
      if (PixelFormat.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PixelFormat);
      }
      if (IoMethod != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) IoMethod);
      }
      if (Width != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Height);
      }
      if (FrameRate != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FrameRate);
      }
      if (Monochrome != false) {
        output.WriteRawTag(64);
        output.WriteBool(Monochrome);
      }
      if (Brightness != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Brightness);
      }
      if (Contrast != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Contrast);
      }
      if (Saturation != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Saturation);
      }
      if (Sharpness != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Sharpness);
      }
      if (Gain != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Gain);
      }
      if (AutoFocus != false) {
        output.WriteRawTag(112);
        output.WriteBool(AutoFocus);
      }
      if (Focus != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Focus);
      }
      if (AutoExposure != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AutoExposure);
      }
      if (Exposure != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Exposure);
      }
      if (AutoWhiteBalance != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(AutoWhiteBalance);
      }
      if (WhiteBalance != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(WhiteBalance);
      }
      if (BytesPerPixel != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(BytesPerPixel);
      }
      if (TriggerInternal != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(TriggerInternal);
      }
      if (TriggerFps != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TriggerFps);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(ChannelName);
      }
      if (DeviceWaitMs != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(DeviceWaitMs);
      }
      if (SpinRate != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(SpinRate);
      }
      if (OutputType != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) OutputType);
      }
      if (compressConf_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(CompressConf);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CameraDev.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraDev);
      }
      if (FrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (PixelFormat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PixelFormat);
      }
      if (IoMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IoMethod);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (FrameRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameRate);
      }
      if (Monochrome != false) {
        size += 1 + 1;
      }
      if (Brightness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Brightness);
      }
      if (Contrast != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Contrast);
      }
      if (Saturation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Saturation);
      }
      if (Sharpness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sharpness);
      }
      if (Gain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gain);
      }
      if (AutoFocus != false) {
        size += 1 + 1;
      }
      if (Focus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Focus);
      }
      if (AutoExposure != false) {
        size += 2 + 1;
      }
      if (Exposure != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Exposure);
      }
      if (AutoWhiteBalance != false) {
        size += 2 + 1;
      }
      if (WhiteBalance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WhiteBalance);
      }
      if (BytesPerPixel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BytesPerPixel);
      }
      if (TriggerInternal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TriggerInternal);
      }
      if (TriggerFps != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TriggerFps);
      }
      if (ChannelName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (DeviceWaitMs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeviceWaitMs);
      }
      if (SpinRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpinRate);
      }
      if (OutputType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OutputType);
      }
      if (compressConf_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CompressConf);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.CameraDev.Length != 0) {
        CameraDev = other.CameraDev;
      }
      if (other.FrameId.Length != 0) {
        FrameId = other.FrameId;
      }
      if (other.PixelFormat.Length != 0) {
        PixelFormat = other.PixelFormat;
      }
      if (other.IoMethod != 0) {
        IoMethod = other.IoMethod;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.FrameRate != 0) {
        FrameRate = other.FrameRate;
      }
      if (other.Monochrome != false) {
        Monochrome = other.Monochrome;
      }
      if (other.Brightness != 0) {
        Brightness = other.Brightness;
      }
      if (other.Contrast != 0) {
        Contrast = other.Contrast;
      }
      if (other.Saturation != 0) {
        Saturation = other.Saturation;
      }
      if (other.Sharpness != 0) {
        Sharpness = other.Sharpness;
      }
      if (other.Gain != 0) {
        Gain = other.Gain;
      }
      if (other.AutoFocus != false) {
        AutoFocus = other.AutoFocus;
      }
      if (other.Focus != 0) {
        Focus = other.Focus;
      }
      if (other.AutoExposure != false) {
        AutoExposure = other.AutoExposure;
      }
      if (other.Exposure != 0) {
        Exposure = other.Exposure;
      }
      if (other.AutoWhiteBalance != false) {
        AutoWhiteBalance = other.AutoWhiteBalance;
      }
      if (other.WhiteBalance != 0) {
        WhiteBalance = other.WhiteBalance;
      }
      if (other.BytesPerPixel != 0) {
        BytesPerPixel = other.BytesPerPixel;
      }
      if (other.TriggerInternal != 0) {
        TriggerInternal = other.TriggerInternal;
      }
      if (other.TriggerFps != 0) {
        TriggerFps = other.TriggerFps;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.DeviceWaitMs != 0) {
        DeviceWaitMs = other.DeviceWaitMs;
      }
      if (other.SpinRate != 0) {
        SpinRate = other.SpinRate;
      }
      if (other.OutputType != 0) {
        OutputType = other.OutputType;
      }
      if (other.compressConf_ != null) {
        if (compressConf_ == null) {
          compressConf_ = new global::Apollo.Drivers.Camera.Config.Config.Types.CompressConfig();
        }
        CompressConf.MergeFrom(other.CompressConf);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CameraDev = input.ReadString();
            break;
          }
          case 18: {
            FrameId = input.ReadString();
            break;
          }
          case 26: {
            PixelFormat = input.ReadString();
            break;
          }
          case 32: {
            ioMethod_ = (global::Apollo.Drivers.Camera.Config.IOMethod) input.ReadEnum();
            break;
          }
          case 40: {
            Width = input.ReadUInt32();
            break;
          }
          case 48: {
            Height = input.ReadUInt32();
            break;
          }
          case 56: {
            FrameRate = input.ReadUInt32();
            break;
          }
          case 64: {
            Monochrome = input.ReadBool();
            break;
          }
          case 72: {
            Brightness = input.ReadInt32();
            break;
          }
          case 80: {
            Contrast = input.ReadInt32();
            break;
          }
          case 88: {
            Saturation = input.ReadInt32();
            break;
          }
          case 96: {
            Sharpness = input.ReadInt32();
            break;
          }
          case 104: {
            Gain = input.ReadInt32();
            break;
          }
          case 112: {
            AutoFocus = input.ReadBool();
            break;
          }
          case 120: {
            Focus = input.ReadInt32();
            break;
          }
          case 128: {
            AutoExposure = input.ReadBool();
            break;
          }
          case 136: {
            Exposure = input.ReadInt32();
            break;
          }
          case 144: {
            AutoWhiteBalance = input.ReadBool();
            break;
          }
          case 152: {
            WhiteBalance = input.ReadInt32();
            break;
          }
          case 160: {
            BytesPerPixel = input.ReadUInt32();
            break;
          }
          case 168: {
            TriggerInternal = input.ReadUInt32();
            break;
          }
          case 176: {
            TriggerFps = input.ReadUInt32();
            break;
          }
          case 186: {
            ChannelName = input.ReadString();
            break;
          }
          case 192: {
            DeviceWaitMs = input.ReadUInt32();
            break;
          }
          case 200: {
            SpinRate = input.ReadUInt32();
            break;
          }
          case 208: {
            outputType_ = (global::Apollo.Drivers.Camera.Config.OutputType) input.ReadEnum();
            break;
          }
          case 218: {
            if (compressConf_ == null) {
              compressConf_ = new global::Apollo.Drivers.Camera.Config.Config.Types.CompressConfig();
            }
            input.ReadMessage(compressConf_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CompressConfig : pb::IMessage<CompressConfig> {
        private static readonly pb::MessageParser<CompressConfig> _parser = new pb::MessageParser<CompressConfig>(() => new CompressConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CompressConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Drivers.Camera.Config.Config.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompressConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompressConfig(CompressConfig other) : this() {
          outputChannel_ = other.outputChannel_;
          imagePoolSize_ = other.imagePoolSize_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompressConfig Clone() {
          return new CompressConfig(this);
        }

        /// <summary>Field number for the "output_channel" field.</summary>
        public const int OutputChannelFieldNumber = 1;
        private string outputChannel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OutputChannel {
          get { return outputChannel_; }
          set {
            outputChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "image_pool_size" field.</summary>
        public const int ImagePoolSizeFieldNumber = 2;
        private uint imagePoolSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ImagePoolSize {
          get { return imagePoolSize_; }
          set {
            imagePoolSize_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CompressConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CompressConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OutputChannel != other.OutputChannel) return false;
          if (ImagePoolSize != other.ImagePoolSize) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OutputChannel.Length != 0) hash ^= OutputChannel.GetHashCode();
          if (ImagePoolSize != 0) hash ^= ImagePoolSize.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OutputChannel.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(OutputChannel);
          }
          if (ImagePoolSize != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ImagePoolSize);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OutputChannel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputChannel);
          }
          if (ImagePoolSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImagePoolSize);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CompressConfig other) {
          if (other == null) {
            return;
          }
          if (other.OutputChannel.Length != 0) {
            OutputChannel = other.OutputChannel;
          }
          if (other.ImagePoolSize != 0) {
            ImagePoolSize = other.ImagePoolSize;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                OutputChannel = input.ReadString();
                break;
              }
              case 16: {
                ImagePoolSize = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
