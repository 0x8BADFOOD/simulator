// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/radar/conti_radar/proto/conti_radar_conf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Conti_Radar {

  /// <summary>Holder for reflection information generated from modules/drivers/radar/conti_radar/proto/conti_radar_conf.proto</summary>
  public static partial class ContiRadarConfReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/radar/conti_radar/proto/conti_radar_conf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContiRadarConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj5tb2R1bGVzL2RyaXZlcnMvcmFkYXIvY29udGlfcmFkYXIvcHJvdG8vY29u",
            "dGlfcmFkYXJfY29uZi5wcm90bxIaYXBvbGxvLmRyaXZlcnMuY29udGlfcmFk",
            "YXIaNW1vZHVsZXMvZHJpdmVycy9jYW5idXMvcHJvdG8vY2FuX2NhcmRfcGFy",
            "YW1ldGVyLnByb3RvIqEBCgdDYW5Db25mEkMKEmNhbl9jYXJkX3BhcmFtZXRl",
            "chgBIAEoCzInLmFwb2xsby5kcml2ZXJzLmNhbmJ1cy5DQU5DYXJkUGFyYW1l",
            "dGVyEhkKEWVuYWJsZV9kZWJ1Z19tb2RlGAIgASgIEhsKE2VuYWJsZV9yZWNl",
            "aXZlcl9sb2cYAyABKAgSGQoRZW5hYmxlX3NlbmRlcl9sb2cYBCABKAgi4AQK",
            "CVJhZGFyQ29uZhIaChJtYXhfZGlzdGFuY2VfdmFsaWQYASABKAgSFwoPc2Vu",
            "c29yX2lkX3ZhbGlkGAIgASgIEhkKEXJhZGFyX3Bvd2VyX3ZhbGlkGAMgASgI",
            "EhkKEW91dHB1dF90eXBlX3ZhbGlkGAQgASgIEhoKEnNlbmRfcXVhbGl0eV92",
            "YWxpZBgFIAEoCBIbChNzZW5kX2V4dF9pbmZvX3ZhbGlkGAYgASgIEhgKEHNv",
            "cnRfaW5kZXhfdmFsaWQYByABKAgSGgoSc3RvcmVfaW5fbnZtX3ZhbGlkGAgg",
            "ASgIEhgKEGN0cmxfcmVsYXlfdmFsaWQYCSABKAgSGwoTcmNzX3RocmVzaG9s",
            "ZF92YWxpZBgKIAEoCBIUCgxtYXhfZGlzdGFuY2UYCyABKA0SEQoJc2Vuc29y",
            "X2lkGAwgASgNEjsKC291dHB1dF90eXBlGA0gASgOMiYuYXBvbGxvLmRyaXZl",
            "cnMuY29udGlfcmFkYXIuT3V0cHV0VHlwZRITCgtyYWRhcl9wb3dlchgOIAEo",
            "DRISCgpjdHJsX3JlbGF5GA8gASgNEhUKDXNlbmRfZXh0X2luZm8YECABKAgS",
            "FAoMc2VuZF9xdWFsaXR5GBEgASgIEhIKCnNvcnRfaW5kZXgYEiABKA0SFAoM",
            "c3RvcmVfaW5fbnZtGBMgASgNEj8KDXJjc190aHJlc2hvbGQYFCABKA4yKC5h",
            "cG9sbG8uZHJpdmVycy5jb250aV9yYWRhci5SY3NUaHJlc2hvbGQSGwoTaW5w",
            "dXRfc2VuZF9pbnRlcnZhbBgVIAEoBCKZAQoOQ29udGlSYWRhckNvbmYSNQoI",
            "Y2FuX2NvbmYYASABKAsyIy5hcG9sbG8uZHJpdmVycy5jb250aV9yYWRhci5D",
            "YW5Db25mEjkKCnJhZGFyX2NvbmYYAiABKAsyJS5hcG9sbG8uZHJpdmVycy5j",
            "b250aV9yYWRhci5SYWRhckNvbmYSFQoNcmFkYXJfY2hhbm5lbBgDIAEoCSps",
            "CgpPdXRwdXRUeXBlEhQKEE9VVFBVVF9UWVBFX05PTkUQABIXChNPVVRQVVRf",
            "VFlQRV9PQkpFQ1RTEAESGAoUT1VUUFVUX1RZUEVfQ0xVU1RFUlMQAhIVChFP",
            "VVRQVVRfVFlQRV9FUlJPUhADKmcKDFJjc1RocmVzaG9sZBIaChZSQ1NfVEhS",
            "RVNIT0xEX1NUQU5EQVJEEAASIgoeUkNTX1RIUkVTSE9MRF9ISUdIX1NFTlNJ",
            "VElWSVRZEAESFwoTUkNTX1RIUkVTSE9MRF9FUlJPUhACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Drivers.Canbus.CanCardParameterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Drivers.Conti_Radar.OutputType), typeof(global::Apollo.Drivers.Conti_Radar.RcsThreshold), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Conti_Radar.CanConf), global::Apollo.Drivers.Conti_Radar.CanConf.Parser, new[]{ "CanCardParameter", "EnableDebugMode", "EnableReceiverLog", "EnableSenderLog" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Conti_Radar.RadarConf), global::Apollo.Drivers.Conti_Radar.RadarConf.Parser, new[]{ "MaxDistanceValid", "SensorIdValid", "RadarPowerValid", "OutputTypeValid", "SendQualityValid", "SendExtInfoValid", "SortIndexValid", "StoreInNvmValid", "CtrlRelayValid", "RcsThresholdValid", "MaxDistance", "SensorId", "OutputType", "RadarPower", "CtrlRelay", "SendExtInfo", "SendQuality", "SortIndex", "StoreInNvm", "RcsThreshold", "InputSendInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Conti_Radar.ContiRadarConf), global::Apollo.Drivers.Conti_Radar.ContiRadarConf.Parser, new[]{ "CanConf", "RadarConf", "RadarChannel" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OutputType {
    [pbr::OriginalName("OUTPUT_TYPE_NONE")] None = 0,
    [pbr::OriginalName("OUTPUT_TYPE_OBJECTS")] Objects = 1,
    [pbr::OriginalName("OUTPUT_TYPE_CLUSTERS")] Clusters = 2,
    [pbr::OriginalName("OUTPUT_TYPE_ERROR")] Error = 3,
  }

  public enum RcsThreshold {
    [pbr::OriginalName("RCS_THRESHOLD_STANDARD")] Standard = 0,
    [pbr::OriginalName("RCS_THRESHOLD_HIGH_SENSITIVITY")] HighSensitivity = 1,
    [pbr::OriginalName("RCS_THRESHOLD_ERROR")] Error = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CanConf : pb::IMessage<CanConf> {
    private static readonly pb::MessageParser<CanConf> _parser = new pb::MessageParser<CanConf>(() => new CanConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Conti_Radar.ContiRadarConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanConf(CanConf other) : this() {
      CanCardParameter = other.canCardParameter_ != null ? other.CanCardParameter.Clone() : null;
      enableDebugMode_ = other.enableDebugMode_;
      enableReceiverLog_ = other.enableReceiverLog_;
      enableSenderLog_ = other.enableSenderLog_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanConf Clone() {
      return new CanConf(this);
    }

    /// <summary>Field number for the "can_card_parameter" field.</summary>
    public const int CanCardParameterFieldNumber = 1;
    private global::Apollo.Drivers.Canbus.CANCardParameter canCardParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Canbus.CANCardParameter CanCardParameter {
      get { return canCardParameter_; }
      set {
        canCardParameter_ = value;
      }
    }

    /// <summary>Field number for the "enable_debug_mode" field.</summary>
    public const int EnableDebugModeFieldNumber = 2;
    private bool enableDebugMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableDebugMode {
      get { return enableDebugMode_; }
      set {
        enableDebugMode_ = value;
      }
    }

    /// <summary>Field number for the "enable_receiver_log" field.</summary>
    public const int EnableReceiverLogFieldNumber = 3;
    private bool enableReceiverLog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableReceiverLog {
      get { return enableReceiverLog_; }
      set {
        enableReceiverLog_ = value;
      }
    }

    /// <summary>Field number for the "enable_sender_log" field.</summary>
    public const int EnableSenderLogFieldNumber = 4;
    private bool enableSenderLog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableSenderLog {
      get { return enableSenderLog_; }
      set {
        enableSenderLog_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CanCardParameter, other.CanCardParameter)) return false;
      if (EnableDebugMode != other.EnableDebugMode) return false;
      if (EnableReceiverLog != other.EnableReceiverLog) return false;
      if (EnableSenderLog != other.EnableSenderLog) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (canCardParameter_ != null) hash ^= CanCardParameter.GetHashCode();
      if (EnableDebugMode != false) hash ^= EnableDebugMode.GetHashCode();
      if (EnableReceiverLog != false) hash ^= EnableReceiverLog.GetHashCode();
      if (EnableSenderLog != false) hash ^= EnableSenderLog.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (canCardParameter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CanCardParameter);
      }
      if (EnableDebugMode != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableDebugMode);
      }
      if (EnableReceiverLog != false) {
        output.WriteRawTag(24);
        output.WriteBool(EnableReceiverLog);
      }
      if (EnableSenderLog != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableSenderLog);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (canCardParameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CanCardParameter);
      }
      if (EnableDebugMode != false) {
        size += 1 + 1;
      }
      if (EnableReceiverLog != false) {
        size += 1 + 1;
      }
      if (EnableSenderLog != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanConf other) {
      if (other == null) {
        return;
      }
      if (other.canCardParameter_ != null) {
        if (canCardParameter_ == null) {
          canCardParameter_ = new global::Apollo.Drivers.Canbus.CANCardParameter();
        }
        CanCardParameter.MergeFrom(other.CanCardParameter);
      }
      if (other.EnableDebugMode != false) {
        EnableDebugMode = other.EnableDebugMode;
      }
      if (other.EnableReceiverLog != false) {
        EnableReceiverLog = other.EnableReceiverLog;
      }
      if (other.EnableSenderLog != false) {
        EnableSenderLog = other.EnableSenderLog;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (canCardParameter_ == null) {
              canCardParameter_ = new global::Apollo.Drivers.Canbus.CANCardParameter();
            }
            input.ReadMessage(canCardParameter_);
            break;
          }
          case 16: {
            EnableDebugMode = input.ReadBool();
            break;
          }
          case 24: {
            EnableReceiverLog = input.ReadBool();
            break;
          }
          case 32: {
            EnableSenderLog = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RadarConf : pb::IMessage<RadarConf> {
    private static readonly pb::MessageParser<RadarConf> _parser = new pb::MessageParser<RadarConf>(() => new RadarConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RadarConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Conti_Radar.ContiRadarConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarConf(RadarConf other) : this() {
      maxDistanceValid_ = other.maxDistanceValid_;
      sensorIdValid_ = other.sensorIdValid_;
      radarPowerValid_ = other.radarPowerValid_;
      outputTypeValid_ = other.outputTypeValid_;
      sendQualityValid_ = other.sendQualityValid_;
      sendExtInfoValid_ = other.sendExtInfoValid_;
      sortIndexValid_ = other.sortIndexValid_;
      storeInNvmValid_ = other.storeInNvmValid_;
      ctrlRelayValid_ = other.ctrlRelayValid_;
      rcsThresholdValid_ = other.rcsThresholdValid_;
      maxDistance_ = other.maxDistance_;
      sensorId_ = other.sensorId_;
      outputType_ = other.outputType_;
      radarPower_ = other.radarPower_;
      ctrlRelay_ = other.ctrlRelay_;
      sendExtInfo_ = other.sendExtInfo_;
      sendQuality_ = other.sendQuality_;
      sortIndex_ = other.sortIndex_;
      storeInNvm_ = other.storeInNvm_;
      rcsThreshold_ = other.rcsThreshold_;
      inputSendInterval_ = other.inputSendInterval_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarConf Clone() {
      return new RadarConf(this);
    }

    /// <summary>Field number for the "max_distance_valid" field.</summary>
    public const int MaxDistanceValidFieldNumber = 1;
    private bool maxDistanceValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MaxDistanceValid {
      get { return maxDistanceValid_; }
      set {
        maxDistanceValid_ = value;
      }
    }

    /// <summary>Field number for the "sensor_id_valid" field.</summary>
    public const int SensorIdValidFieldNumber = 2;
    private bool sensorIdValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SensorIdValid {
      get { return sensorIdValid_; }
      set {
        sensorIdValid_ = value;
      }
    }

    /// <summary>Field number for the "radar_power_valid" field.</summary>
    public const int RadarPowerValidFieldNumber = 3;
    private bool radarPowerValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadarPowerValid {
      get { return radarPowerValid_; }
      set {
        radarPowerValid_ = value;
      }
    }

    /// <summary>Field number for the "output_type_valid" field.</summary>
    public const int OutputTypeValidFieldNumber = 4;
    private bool outputTypeValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputTypeValid {
      get { return outputTypeValid_; }
      set {
        outputTypeValid_ = value;
      }
    }

    /// <summary>Field number for the "send_quality_valid" field.</summary>
    public const int SendQualityValidFieldNumber = 5;
    private bool sendQualityValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendQualityValid {
      get { return sendQualityValid_; }
      set {
        sendQualityValid_ = value;
      }
    }

    /// <summary>Field number for the "send_ext_info_valid" field.</summary>
    public const int SendExtInfoValidFieldNumber = 6;
    private bool sendExtInfoValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendExtInfoValid {
      get { return sendExtInfoValid_; }
      set {
        sendExtInfoValid_ = value;
      }
    }

    /// <summary>Field number for the "sort_index_valid" field.</summary>
    public const int SortIndexValidFieldNumber = 7;
    private bool sortIndexValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SortIndexValid {
      get { return sortIndexValid_; }
      set {
        sortIndexValid_ = value;
      }
    }

    /// <summary>Field number for the "store_in_nvm_valid" field.</summary>
    public const int StoreInNvmValidFieldNumber = 8;
    private bool storeInNvmValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StoreInNvmValid {
      get { return storeInNvmValid_; }
      set {
        storeInNvmValid_ = value;
      }
    }

    /// <summary>Field number for the "ctrl_relay_valid" field.</summary>
    public const int CtrlRelayValidFieldNumber = 9;
    private bool ctrlRelayValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CtrlRelayValid {
      get { return ctrlRelayValid_; }
      set {
        ctrlRelayValid_ = value;
      }
    }

    /// <summary>Field number for the "rcs_threshold_valid" field.</summary>
    public const int RcsThresholdValidFieldNumber = 10;
    private bool rcsThresholdValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RcsThresholdValid {
      get { return rcsThresholdValid_; }
      set {
        rcsThresholdValid_ = value;
      }
    }

    /// <summary>Field number for the "max_distance" field.</summary>
    public const int MaxDistanceFieldNumber = 11;
    private uint maxDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxDistance {
      get { return maxDistance_; }
      set {
        maxDistance_ = value;
      }
    }

    /// <summary>Field number for the "sensor_id" field.</summary>
    public const int SensorIdFieldNumber = 12;
    private uint sensorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = value;
      }
    }

    /// <summary>Field number for the "output_type" field.</summary>
    public const int OutputTypeFieldNumber = 13;
    private global::Apollo.Drivers.Conti_Radar.OutputType outputType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Conti_Radar.OutputType OutputType {
      get { return outputType_; }
      set {
        outputType_ = value;
      }
    }

    /// <summary>Field number for the "radar_power" field.</summary>
    public const int RadarPowerFieldNumber = 14;
    private uint radarPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadarPower {
      get { return radarPower_; }
      set {
        radarPower_ = value;
      }
    }

    /// <summary>Field number for the "ctrl_relay" field.</summary>
    public const int CtrlRelayFieldNumber = 15;
    private uint ctrlRelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtrlRelay {
      get { return ctrlRelay_; }
      set {
        ctrlRelay_ = value;
      }
    }

    /// <summary>Field number for the "send_ext_info" field.</summary>
    public const int SendExtInfoFieldNumber = 16;
    private bool sendExtInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendExtInfo {
      get { return sendExtInfo_; }
      set {
        sendExtInfo_ = value;
      }
    }

    /// <summary>Field number for the "send_quality" field.</summary>
    public const int SendQualityFieldNumber = 17;
    private bool sendQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendQuality {
      get { return sendQuality_; }
      set {
        sendQuality_ = value;
      }
    }

    /// <summary>Field number for the "sort_index" field.</summary>
    public const int SortIndexFieldNumber = 18;
    private uint sortIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortIndex {
      get { return sortIndex_; }
      set {
        sortIndex_ = value;
      }
    }

    /// <summary>Field number for the "store_in_nvm" field.</summary>
    public const int StoreInNvmFieldNumber = 19;
    private uint storeInNvm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StoreInNvm {
      get { return storeInNvm_; }
      set {
        storeInNvm_ = value;
      }
    }

    /// <summary>Field number for the "rcs_threshold" field.</summary>
    public const int RcsThresholdFieldNumber = 20;
    private global::Apollo.Drivers.Conti_Radar.RcsThreshold rcsThreshold_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Conti_Radar.RcsThreshold RcsThreshold {
      get { return rcsThreshold_; }
      set {
        rcsThreshold_ = value;
      }
    }

    /// <summary>Field number for the "input_send_interval" field.</summary>
    public const int InputSendIntervalFieldNumber = 21;
    private ulong inputSendInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InputSendInterval {
      get { return inputSendInterval_; }
      set {
        inputSendInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RadarConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RadarConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxDistanceValid != other.MaxDistanceValid) return false;
      if (SensorIdValid != other.SensorIdValid) return false;
      if (RadarPowerValid != other.RadarPowerValid) return false;
      if (OutputTypeValid != other.OutputTypeValid) return false;
      if (SendQualityValid != other.SendQualityValid) return false;
      if (SendExtInfoValid != other.SendExtInfoValid) return false;
      if (SortIndexValid != other.SortIndexValid) return false;
      if (StoreInNvmValid != other.StoreInNvmValid) return false;
      if (CtrlRelayValid != other.CtrlRelayValid) return false;
      if (RcsThresholdValid != other.RcsThresholdValid) return false;
      if (MaxDistance != other.MaxDistance) return false;
      if (SensorId != other.SensorId) return false;
      if (OutputType != other.OutputType) return false;
      if (RadarPower != other.RadarPower) return false;
      if (CtrlRelay != other.CtrlRelay) return false;
      if (SendExtInfo != other.SendExtInfo) return false;
      if (SendQuality != other.SendQuality) return false;
      if (SortIndex != other.SortIndex) return false;
      if (StoreInNvm != other.StoreInNvm) return false;
      if (RcsThreshold != other.RcsThreshold) return false;
      if (InputSendInterval != other.InputSendInterval) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxDistanceValid != false) hash ^= MaxDistanceValid.GetHashCode();
      if (SensorIdValid != false) hash ^= SensorIdValid.GetHashCode();
      if (RadarPowerValid != false) hash ^= RadarPowerValid.GetHashCode();
      if (OutputTypeValid != false) hash ^= OutputTypeValid.GetHashCode();
      if (SendQualityValid != false) hash ^= SendQualityValid.GetHashCode();
      if (SendExtInfoValid != false) hash ^= SendExtInfoValid.GetHashCode();
      if (SortIndexValid != false) hash ^= SortIndexValid.GetHashCode();
      if (StoreInNvmValid != false) hash ^= StoreInNvmValid.GetHashCode();
      if (CtrlRelayValid != false) hash ^= CtrlRelayValid.GetHashCode();
      if (RcsThresholdValid != false) hash ^= RcsThresholdValid.GetHashCode();
      if (MaxDistance != 0) hash ^= MaxDistance.GetHashCode();
      if (SensorId != 0) hash ^= SensorId.GetHashCode();
      if (OutputType != 0) hash ^= OutputType.GetHashCode();
      if (RadarPower != 0) hash ^= RadarPower.GetHashCode();
      if (CtrlRelay != 0) hash ^= CtrlRelay.GetHashCode();
      if (SendExtInfo != false) hash ^= SendExtInfo.GetHashCode();
      if (SendQuality != false) hash ^= SendQuality.GetHashCode();
      if (SortIndex != 0) hash ^= SortIndex.GetHashCode();
      if (StoreInNvm != 0) hash ^= StoreInNvm.GetHashCode();
      if (RcsThreshold != 0) hash ^= RcsThreshold.GetHashCode();
      if (InputSendInterval != 0UL) hash ^= InputSendInterval.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxDistanceValid != false) {
        output.WriteRawTag(8);
        output.WriteBool(MaxDistanceValid);
      }
      if (SensorIdValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(SensorIdValid);
      }
      if (RadarPowerValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(RadarPowerValid);
      }
      if (OutputTypeValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputTypeValid);
      }
      if (SendQualityValid != false) {
        output.WriteRawTag(40);
        output.WriteBool(SendQualityValid);
      }
      if (SendExtInfoValid != false) {
        output.WriteRawTag(48);
        output.WriteBool(SendExtInfoValid);
      }
      if (SortIndexValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(SortIndexValid);
      }
      if (StoreInNvmValid != false) {
        output.WriteRawTag(64);
        output.WriteBool(StoreInNvmValid);
      }
      if (CtrlRelayValid != false) {
        output.WriteRawTag(72);
        output.WriteBool(CtrlRelayValid);
      }
      if (RcsThresholdValid != false) {
        output.WriteRawTag(80);
        output.WriteBool(RcsThresholdValid);
      }
      if (MaxDistance != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MaxDistance);
      }
      if (SensorId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SensorId);
      }
      if (OutputType != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) OutputType);
      }
      if (RadarPower != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(RadarPower);
      }
      if (CtrlRelay != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(CtrlRelay);
      }
      if (SendExtInfo != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(SendExtInfo);
      }
      if (SendQuality != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(SendQuality);
      }
      if (SortIndex != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SortIndex);
      }
      if (StoreInNvm != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(StoreInNvm);
      }
      if (RcsThreshold != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) RcsThreshold);
      }
      if (InputSendInterval != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(InputSendInterval);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxDistanceValid != false) {
        size += 1 + 1;
      }
      if (SensorIdValid != false) {
        size += 1 + 1;
      }
      if (RadarPowerValid != false) {
        size += 1 + 1;
      }
      if (OutputTypeValid != false) {
        size += 1 + 1;
      }
      if (SendQualityValid != false) {
        size += 1 + 1;
      }
      if (SendExtInfoValid != false) {
        size += 1 + 1;
      }
      if (SortIndexValid != false) {
        size += 1 + 1;
      }
      if (StoreInNvmValid != false) {
        size += 1 + 1;
      }
      if (CtrlRelayValid != false) {
        size += 1 + 1;
      }
      if (RcsThresholdValid != false) {
        size += 1 + 1;
      }
      if (MaxDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDistance);
      }
      if (SensorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SensorId);
      }
      if (OutputType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputType);
      }
      if (RadarPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadarPower);
      }
      if (CtrlRelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtrlRelay);
      }
      if (SendExtInfo != false) {
        size += 2 + 1;
      }
      if (SendQuality != false) {
        size += 2 + 1;
      }
      if (SortIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SortIndex);
      }
      if (StoreInNvm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StoreInNvm);
      }
      if (RcsThreshold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RcsThreshold);
      }
      if (InputSendInterval != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(InputSendInterval);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RadarConf other) {
      if (other == null) {
        return;
      }
      if (other.MaxDistanceValid != false) {
        MaxDistanceValid = other.MaxDistanceValid;
      }
      if (other.SensorIdValid != false) {
        SensorIdValid = other.SensorIdValid;
      }
      if (other.RadarPowerValid != false) {
        RadarPowerValid = other.RadarPowerValid;
      }
      if (other.OutputTypeValid != false) {
        OutputTypeValid = other.OutputTypeValid;
      }
      if (other.SendQualityValid != false) {
        SendQualityValid = other.SendQualityValid;
      }
      if (other.SendExtInfoValid != false) {
        SendExtInfoValid = other.SendExtInfoValid;
      }
      if (other.SortIndexValid != false) {
        SortIndexValid = other.SortIndexValid;
      }
      if (other.StoreInNvmValid != false) {
        StoreInNvmValid = other.StoreInNvmValid;
      }
      if (other.CtrlRelayValid != false) {
        CtrlRelayValid = other.CtrlRelayValid;
      }
      if (other.RcsThresholdValid != false) {
        RcsThresholdValid = other.RcsThresholdValid;
      }
      if (other.MaxDistance != 0) {
        MaxDistance = other.MaxDistance;
      }
      if (other.SensorId != 0) {
        SensorId = other.SensorId;
      }
      if (other.OutputType != 0) {
        OutputType = other.OutputType;
      }
      if (other.RadarPower != 0) {
        RadarPower = other.RadarPower;
      }
      if (other.CtrlRelay != 0) {
        CtrlRelay = other.CtrlRelay;
      }
      if (other.SendExtInfo != false) {
        SendExtInfo = other.SendExtInfo;
      }
      if (other.SendQuality != false) {
        SendQuality = other.SendQuality;
      }
      if (other.SortIndex != 0) {
        SortIndex = other.SortIndex;
      }
      if (other.StoreInNvm != 0) {
        StoreInNvm = other.StoreInNvm;
      }
      if (other.RcsThreshold != 0) {
        RcsThreshold = other.RcsThreshold;
      }
      if (other.InputSendInterval != 0UL) {
        InputSendInterval = other.InputSendInterval;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxDistanceValid = input.ReadBool();
            break;
          }
          case 16: {
            SensorIdValid = input.ReadBool();
            break;
          }
          case 24: {
            RadarPowerValid = input.ReadBool();
            break;
          }
          case 32: {
            OutputTypeValid = input.ReadBool();
            break;
          }
          case 40: {
            SendQualityValid = input.ReadBool();
            break;
          }
          case 48: {
            SendExtInfoValid = input.ReadBool();
            break;
          }
          case 56: {
            SortIndexValid = input.ReadBool();
            break;
          }
          case 64: {
            StoreInNvmValid = input.ReadBool();
            break;
          }
          case 72: {
            CtrlRelayValid = input.ReadBool();
            break;
          }
          case 80: {
            RcsThresholdValid = input.ReadBool();
            break;
          }
          case 88: {
            MaxDistance = input.ReadUInt32();
            break;
          }
          case 96: {
            SensorId = input.ReadUInt32();
            break;
          }
          case 104: {
            outputType_ = (global::Apollo.Drivers.Conti_Radar.OutputType) input.ReadEnum();
            break;
          }
          case 112: {
            RadarPower = input.ReadUInt32();
            break;
          }
          case 120: {
            CtrlRelay = input.ReadUInt32();
            break;
          }
          case 128: {
            SendExtInfo = input.ReadBool();
            break;
          }
          case 136: {
            SendQuality = input.ReadBool();
            break;
          }
          case 144: {
            SortIndex = input.ReadUInt32();
            break;
          }
          case 152: {
            StoreInNvm = input.ReadUInt32();
            break;
          }
          case 160: {
            rcsThreshold_ = (global::Apollo.Drivers.Conti_Radar.RcsThreshold) input.ReadEnum();
            break;
          }
          case 168: {
            InputSendInterval = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContiRadarConf : pb::IMessage<ContiRadarConf> {
    private static readonly pb::MessageParser<ContiRadarConf> _parser = new pb::MessageParser<ContiRadarConf>(() => new ContiRadarConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContiRadarConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Conti_Radar.ContiRadarConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadarConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadarConf(ContiRadarConf other) : this() {
      CanConf = other.canConf_ != null ? other.CanConf.Clone() : null;
      RadarConf = other.radarConf_ != null ? other.RadarConf.Clone() : null;
      radarChannel_ = other.radarChannel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadarConf Clone() {
      return new ContiRadarConf(this);
    }

    /// <summary>Field number for the "can_conf" field.</summary>
    public const int CanConfFieldNumber = 1;
    private global::Apollo.Drivers.Conti_Radar.CanConf canConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Conti_Radar.CanConf CanConf {
      get { return canConf_; }
      set {
        canConf_ = value;
      }
    }

    /// <summary>Field number for the "radar_conf" field.</summary>
    public const int RadarConfFieldNumber = 2;
    private global::Apollo.Drivers.Conti_Radar.RadarConf radarConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Conti_Radar.RadarConf RadarConf {
      get { return radarConf_; }
      set {
        radarConf_ = value;
      }
    }

    /// <summary>Field number for the "radar_channel" field.</summary>
    public const int RadarChannelFieldNumber = 3;
    private string radarChannel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadarChannel {
      get { return radarChannel_; }
      set {
        radarChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContiRadarConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContiRadarConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CanConf, other.CanConf)) return false;
      if (!object.Equals(RadarConf, other.RadarConf)) return false;
      if (RadarChannel != other.RadarChannel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (canConf_ != null) hash ^= CanConf.GetHashCode();
      if (radarConf_ != null) hash ^= RadarConf.GetHashCode();
      if (RadarChannel.Length != 0) hash ^= RadarChannel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (canConf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CanConf);
      }
      if (radarConf_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RadarConf);
      }
      if (RadarChannel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RadarChannel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (canConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CanConf);
      }
      if (radarConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RadarConf);
      }
      if (RadarChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RadarChannel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContiRadarConf other) {
      if (other == null) {
        return;
      }
      if (other.canConf_ != null) {
        if (canConf_ == null) {
          canConf_ = new global::Apollo.Drivers.Conti_Radar.CanConf();
        }
        CanConf.MergeFrom(other.CanConf);
      }
      if (other.radarConf_ != null) {
        if (radarConf_ == null) {
          radarConf_ = new global::Apollo.Drivers.Conti_Radar.RadarConf();
        }
        RadarConf.MergeFrom(other.RadarConf);
      }
      if (other.RadarChannel.Length != 0) {
        RadarChannel = other.RadarChannel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (canConf_ == null) {
              canConf_ = new global::Apollo.Drivers.Conti_Radar.CanConf();
            }
            input.ReadMessage(canConf_);
            break;
          }
          case 18: {
            if (radarConf_ == null) {
              radarConf_ = new global::Apollo.Drivers.Conti_Radar.RadarConf();
            }
            input.ReadMessage(radarConf_);
            break;
          }
          case 26: {
            RadarChannel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
