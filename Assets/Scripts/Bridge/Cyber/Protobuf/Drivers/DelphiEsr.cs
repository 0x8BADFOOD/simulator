// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/delphi_esr.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers {

  /// <summary>Holder for reflection information generated from modules/drivers/proto/delphi_esr.proto</summary>
  public static partial class DelphiEsrReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/proto/delphi_esr.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DelphiEsrReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZtb2R1bGVzL2RyaXZlcnMvcHJvdG8vZGVscGhpX2Vzci5wcm90bxIOYXBv",
            "bGxvLmRyaXZlcnMaIW1vZHVsZXMvY29tbW9uL3Byb3RvL2hlYWRlci5wcm90",
            "byL8AQoPRXNyX3N0YXR1czlfNWU4EhwKFGNhbl90eF9wYXRoX2lkX2FjY18z",
            "GAEgASgFEhwKFGNhbl90eF9wYXRoX2lkX2FjY18yGAIgASgFEiUKHWNhbl90",
            "eF9maWx0ZXJlZF94b2hwX2FjY19jaXB2GAMgASgBEiQKHGNhbl90eF93YXRl",
            "cl9zcHJheV90YXJnZXRfaWQYBCABKAUSIgoaY2FuX3R4X3NlcmlhbF9udW1f",
            "M3JkX2J5dGUYBSABKAUSHQoVY2FuX3R4X3NpZGVzbGlwX2FuZ2xlGAYgASgB",
            "Eh0KFWNhbl90eF9hdmdfcHdyX2N3YmxrZxgHIAEoBSKaEQoPRXNyX3N0YXR1",
            "czZfNWU1EiYKHmNhbl90eF9zd192ZXJzaW9uX2RzcF8zcmRfYnl0ZRgBIAEo",
            "BRJoCh1jYW5fdHhfdmVydGljYWxfYWxpZ25fdXBkYXRlZBgCIAEoDjJBLmFw",
            "b2xsby5kcml2ZXJzLkVzcl9zdGF0dXM2XzVlNS5DYW5fdHhfdmVydGljYWxf",
            "YWxpZ25fdXBkYXRlZFR5cGUSJAocY2FuX3R4X3ZlcnRpY2FsX21pc2FsaWdu",
            "bWVudBgDIAEoARImCh5jYW5fdHhfc2Vydl9hbGlnbl91cGRhdGVzX2RvbmUY",
            "BCABKAUSVAoTY2FuX3R4X2ZvdW5kX3RhcmdldBgFIAEoDjI3LmFwb2xsby5k",
            "cml2ZXJzLkVzcl9zdGF0dXM2XzVlNS5DYW5fdHhfZm91bmRfdGFyZ2V0VHlw",
            "ZRIjChtjYW5fdHhfZmFjdG9yeV9taXNhbGlnbm1lbnQYBiABKAESaAodY2Fu",
            "X3R4X2ZhY3RvcnlfYWxpZ25fc3RhdHVzXzIYByABKA4yQS5hcG9sbG8uZHJp",
            "dmVycy5Fc3Jfc3RhdHVzNl81ZTUuQ2FuX3R4X2ZhY3RvcnlfYWxpZ25fc3Rh",
            "dHVzXzJUeXBlEmgKHWNhbl90eF9mYWN0b3J5X2FsaWduX3N0YXR1c18xGAgg",
            "ASgOMkEuYXBvbGxvLmRyaXZlcnMuRXNyX3N0YXR1czZfNWU1LkNhbl90eF9m",
            "YWN0b3J5X2FsaWduX3N0YXR1c18xVHlwZRJkChtjYW5fdHhfcmVjb21tZW5k",
            "X3VuY29udmVyZ2UYCSABKA4yPy5hcG9sbG8uZHJpdmVycy5Fc3Jfc3RhdHVz",
            "Nl81ZTUuQ2FuX3R4X3JlY29tbWVuZF91bmNvbnZlcmdlVHlwZRIcChRjYW5f",
            "dHhfd2F2ZV9kaWZmX2EyZBgKIAEoBRJeChhjYW5fdHhfc3lzdGVtX3Bvd2Vy",
            "X21vZGUYCyABKA4yPC5hcG9sbG8uZHJpdmVycy5Fc3Jfc3RhdHVzNl81ZTUu",
            "Q2FuX3R4X3N5c3RlbV9wb3dlcl9tb2RlVHlwZRIdChVjYW5fdHhfc3VwcGx5",
            "X241dl9hMmQYDCABKAUSHgoWY2FuX3R4X3N1cHBseV8xcDh2X2EyZBgNIAEo",
            "BSJ9CiFDYW5fdHhfdmVydGljYWxfYWxpZ25fdXBkYXRlZFR5cGUSLQopQ0FO",
            "X1RYX1ZFUlRJQ0FMX0FMSUdOX1VQREFURURfTk9UX1VQREFURUQQABIpCiVD",
            "QU5fVFhfVkVSVElDQUxfQUxJR05fVVBEQVRFRF9VUERBVEVEEAEiWwoXQ2Fu",
            "X3R4X2ZvdW5kX3RhcmdldFR5cGUSIQodQ0FOX1RYX0ZPVU5EX1RBUkdFVF9O",
            "T1RfRk9VTkQQABIdChlDQU5fVFhfRk9VTkRfVEFSR0VUX0ZPVU5EEAEiuwIK",
            "IUNhbl90eF9mYWN0b3J5X2FsaWduX3N0YXR1c18yVHlwZRIlCiFDQU5fVFhf",
            "RkFDVE9SWV9BTElHTl9TVEFUVVNfMl9PRkYQABImCiJDQU5fVFhfRkFDVE9S",
            "WV9BTElHTl9TVEFUVVNfMl9CVVNZEAESKQolQ0FOX1RYX0ZBQ1RPUllfQUxJ",
            "R05fU1RBVFVTXzJfU1VDQ0VTUxACEjAKLENBTl9UWF9GQUNUT1JZX0FMSUdO",
            "X1NUQVRVU18yX0ZBSUxfTk9fVEFSR0VUEAMSNAowQ0FOX1RYX0ZBQ1RPUllf",
            "QUxJR05fU1RBVFVTXzJfRkFJTF9ERVZfVE9PX0xBUkdFEAQSNAowQ0FOX1RY",
            "X0ZBQ1RPUllfQUxJR05fU1RBVFVTXzJfRkFJTF9WQVJfVE9PX0xBUkdFEAUi",
            "uwIKIUNhbl90eF9mYWN0b3J5X2FsaWduX3N0YXR1c18xVHlwZRIlCiFDQU5f",
            "VFhfRkFDVE9SWV9BTElHTl9TVEFUVVNfMV9PRkYQABImCiJDQU5fVFhfRkFD",
            "VE9SWV9BTElHTl9TVEFUVVNfMV9CVVNZEAESKQolQ0FOX1RYX0ZBQ1RPUllf",
            "QUxJR05fU1RBVFVTXzFfU1VDQ0VTUxACEjAKLENBTl9UWF9GQUNUT1JZX0FM",
            "SUdOX1NUQVRVU18xX0ZBSUxfTk9fVEFSR0VUEAMSNAowQ0FOX1RYX0ZBQ1RP",
            "UllfQUxJR05fU1RBVFVTXzFfRkFJTF9ERVZfVE9PX0xBUkdFEAQSNAowQ0FO",
            "X1RYX0ZBQ1RPUllfQUxJR05fU1RBVFVTXzFfRkFJTF9WQVJfVE9PX0xBUkdF",
            "EAUiewofQ2FuX3R4X3JlY29tbWVuZF91bmNvbnZlcmdlVHlwZRItCilDQU5f",
            "VFhfUkVDT01NRU5EX1VOQ09OVkVSR0VfTk9UX1JFQ09NTUVORBAAEikKJUNB",
            "Tl9UWF9SRUNPTU1FTkRfVU5DT05WRVJHRV9SRUNPTU1FTkQQASLfAgocQ2Fu",
            "X3R4X3N5c3RlbV9wb3dlcl9tb2RlVHlwZRIlCiFDQU5fVFhfU1lTVEVNX1BP",
            "V0VSX01PREVfRFNQX0lOSVQQABIoCiRDQU5fVFhfU1lTVEVNX1BPV0VSX01P",
            "REVfUkFESUFURV9PRkYQARInCiNDQU5fVFhfU1lTVEVNX1BPV0VSX01PREVf",
            "UkFESUFURV9PThACEikKJUNBTl9UWF9TWVNURU1fUE9XRVJfTU9ERV9EU1Bf",
            "U0hVVERPV04QAxIkCiBDQU5fVFhfU1lTVEVNX1BPV0VSX01PREVfRFNQX09G",
            "RhAEEioKJkNBTl9UWF9TWVNURU1fUE9XRVJfTU9ERV9IT1NUX1NIVVRET1dO",
            "EAUSIQodQ0FOX1RYX1NZU1RFTV9QT1dFUl9NT0RFX1RFU1QQBhIlCiFDQU5f",
            "VFhfU1lTVEVNX1BPV0VSX01PREVfN0lOVkFMSUQQByL3AQoPRXNyX3N0YXR1",
            "czVfNWU0Eh0KFWNhbl90eF9zdXBwbHlfMTB2X2EyZBgBIAEoBRIYChBjYW5f",
            "dHhfdGVtcDJfYTJkGAIgASgFEhgKEGNhbl90eF90ZW1wMV9hMmQYAyABKAUS",
            "GQoRY2FuX3R4X3N3YmF0dF9hMmQYBCABKAUSHgoWY2FuX3R4X3N1cHBseV81",
            "dmR4X2EyZBgFIAEoBRIdChVjYW5fdHhfc3VwcGx5XzV2YV9hMmQYBiABKAUS",
            "HgoWY2FuX3R4X3N1cHBseV8zcDN2X2EyZBgHIAEoBRIXCg9jYW5fdHhfaWdu",
            "cF9hMmQYCCABKAUiqAEKD0Vzcl9zdGF0dXMzXzRlMhIdChVjYW5fdHhfc3df",
            "dmVyc2lvbl9wbGQYASABKAUSHgoWY2FuX3R4X3N3X3ZlcnNpb25faG9zdBgC",
            "IAEoBRIZChFjYW5fdHhfaHdfdmVyc2lvbhgDIAEoBRIgChhjYW5fdHhfaW50",
            "ZXJmYWNlX3ZlcnNpb24YBCABKAUSGQoRY2FuX3R4X3NlcmlhbF9udW0YBSAB",
            "KAUilgsKD0Vzcl9zdGF0dXM0XzRlMxJcChdjYW5fdHhfdHJ1Y2tfdGFyZ2V0",
            "X2RldBgBIAEoDjI7LmFwb2xsby5kcml2ZXJzLkVzcl9zdGF0dXM0XzRlMy5D",
            "YW5fdHhfdHJ1Y2tfdGFyZ2V0X2RldFR5cGUSbAofY2FuX3R4X2xyX29ubHlf",
            "Z3JhdGluZ19sb2JlX2RldBgCIAEoDjJDLmFwb2xsby5kcml2ZXJzLkVzcl9z",
            "dGF0dXM0XzRlMy5DYW5fdHhfbHJfb25seV9ncmF0aW5nX2xvYmVfZGV0VHlw",
            "ZRJeChhjYW5fdHhfc2lkZWxvYmVfYmxvY2thZ2UYAyABKA4yPC5hcG9sbG8u",
            "ZHJpdmVycy5Fc3Jfc3RhdHVzNF80ZTMuQ2FuX3R4X3NpZGVsb2JlX2Jsb2Nr",
            "YWdlVHlwZRJcChdjYW5fdHhfcGFydGlhbF9ibG9ja2FnZRgEIAEoDjI7LmFw",
            "b2xsby5kcml2ZXJzLkVzcl9zdGF0dXM0XzRlMy5DYW5fdHhfcGFydGlhbF9i",
            "bG9ja2FnZVR5cGUSHwoXY2FuX3R4X3BhdGhfaWRfYWNjX3N0YXQYBSABKAUS",
            "UAoRY2FuX3R4X21yX2xyX21vZGUYBiABKA4yNS5hcG9sbG8uZHJpdmVycy5F",
            "c3Jfc3RhdHVzNF80ZTMuQ2FuX3R4X21yX2xyX21vZGVUeXBlEh8KF2Nhbl90",
            "eF9hdXRvX2FsaWduX2FuZ2xlGAcgASgBEh4KFmNhbl90eF9yb2xsaW5nX2Nv",
            "dW50XzMYCCABKAUSHwoXY2FuX3R4X3BhdGhfaWRfZmN3X3N0YXQYCSABKAUS",
            "HwoXY2FuX3R4X3BhdGhfaWRfZmN3X21vdmUYCiABKAUSIAoYY2FuX3R4X3Bh",
            "dGhfaWRfY21iYl9zdGF0GAsgASgFEiAKGGNhbl90eF9wYXRoX2lkX2NtYmJf",
            "bW92ZRgMIAEoBRIaChJjYW5fdHhfcGF0aF9pZF9hY2MYDSABKAUibQobQ2Fu",
            "X3R4X3RydWNrX3RhcmdldF9kZXRUeXBlEigKJENBTl9UWF9UUlVDS19UQVJH",
            "RVRfREVUX05PVF9ERVRFQ1RFRBAAEiQKIENBTl9UWF9UUlVDS19UQVJHRVRf",
            "REVUX0RFVEVDVEVEEAEihQEKI0Nhbl90eF9scl9vbmx5X2dyYXRpbmdfbG9i",
            "ZV9kZXRUeXBlEjAKLENBTl9UWF9MUl9PTkxZX0dSQVRJTkdfTE9CRV9ERVRf",
            "Tk9UX0RFVEVDVEVEEAASLAooQ0FOX1RYX0xSX09OTFlfR1JBVElOR19MT0JF",
            "X0RFVF9ERVRFQ1RFRBABImEKHENhbl90eF9zaWRlbG9iZV9ibG9ja2FnZVR5",
            "cGUSIAocQ0FOX1RYX1NJREVMT0JFX0JMT0NLQUdFX09GRhAAEh8KG0NBTl9U",
            "WF9TSURFTE9CRV9CTE9DS0FHRV9PThABImsKG0Nhbl90eF9wYXJ0aWFsX2Js",
            "b2NrYWdlVHlwZRInCiNDQU5fVFhfUEFSVElBTF9CTE9DS0FHRV9OT1RfQkxP",
            "Q0tFRBAAEiMKH0NBTl9UWF9QQVJUSUFMX0JMT0NLQUdFX0JMT0NLRUQQASLb",
            "AQoVQ2FuX3R4X21yX2xyX21vZGVUeXBlEh4KGkNBTl9UWF9NUl9MUl9NT0RF",
            "X1JFU0VSVkVEEAASNQoxQ0FOX1RYX01SX0xSX01PREVfT1VUUFVUX09OTFlf",
            "TUVESVVNX1JBTkdFX1RSQUNLUxABEjMKL0NBTl9UWF9NUl9MUl9NT0RFX09V",
            "VFBVVF9PTkxZX0xPTkdfUkFOR0VfVFJBQ0tTEAISNgoyQ0FOX1RYX01SX0xS",
            "X01PREVfT1VUUFVUX0FMTF9NRURJVU1fUkFOR0VfQU5EX0xPTkcQAyLJAgoY",
            "RXNyX3RyYWNrbW90aW9ucG93ZXJfNTQwEiQKHGNhbl90eF90cmFja19yb2xs",
            "aW5nX2NvdW50XzIYASABKAgSIQoZY2FuX3R4X3RyYWNrX2Nhbl9pZF9ncm91",
            "cBgCIAEoBRJXChljYW5fdHhfdHJhY2tfbW90aW9uX3Bvd2VyGAMgAygLMjQu",
            "YXBvbGxvLmRyaXZlcnMuRXNyX3RyYWNrbW90aW9ucG93ZXJfNTQwLk1vdGlv",
            "bnBvd2VyGooBCgtNb3Rpb25wb3dlchIbChNjYW5fdHhfdHJhY2tfbW92aW5n",
            "GAEgASgIEiAKGGNhbl90eF90cmFja19tb3ZpbmdfZmFzdBgCIAEoCBIgChhj",
            "YW5fdHhfdHJhY2tfbW92aW5nX3Nsb3cYAyABKAgSGgoSY2FuX3R4X3RyYWNr",
            "X3Bvd2VyGAQgASgFIokBChBBY21faW5zdF9yZXFfN2UwEhMKC2NvbW1hbmRf",
            "Y3RyGAEgASgFEhQKDGNvbW1hbmRfY29kZRgCIAEoBRIRCgljY193b3JkXzIY",
            "AyABKAUSEQoJY2Nfd29yZF8xGAQgASgFEhEKCWNjX2J5dGVfMhgFIAEoBRIR",
            "CgljY19ieXRlXzEYBiABKAUigw0KD0Vzcl90cmFjazAxXzUwMBJoCh1jYW5f",
            "dHhfdHJhY2tfZ3JvdXBpbmdfY2hhbmdlZBgBIAEoDjJBLmFwb2xsby5kcml2",
            "ZXJzLkVzcl90cmFjazAxXzUwMC5DYW5fdHhfdHJhY2tfZ3JvdXBpbmdfY2hh",
            "bmdlZFR5cGUSWAoVY2FuX3R4X3RyYWNrX29uY29taW5nGAIgASgOMjkuYXBv",
            "bGxvLmRyaXZlcnMuRXNyX3RyYWNrMDFfNTAwLkNhbl90eF90cmFja19vbmNv",
            "bWluZ1R5cGUSHQoVY2FuX3R4X3RyYWNrX2xhdF9yYXRlGAMgASgBEmIKGmNh",
            "bl90eF90cmFja19icmlkZ2Vfb2JqZWN0GAQgASgOMj4uYXBvbGxvLmRyaXZl",
            "cnMuRXNyX3RyYWNrMDFfNTAwLkNhbl90eF90cmFja19icmlkZ2Vfb2JqZWN0",
            "VHlwZRIaChJjYW5fdHhfdHJhY2tfd2lkdGgYBSABKAESVAoTY2FuX3R4X3Ry",
            "YWNrX3N0YXR1cxgGIAEoDjI3LmFwb2xsby5kcml2ZXJzLkVzcl90cmFjazAx",
            "XzUwMC5DYW5fdHhfdHJhY2tfc3RhdHVzVHlwZRIiChpjYW5fdHhfdHJhY2tf",
            "cm9sbGluZ19jb3VudBgHIAEoCBIfChdjYW5fdHhfdHJhY2tfcmFuZ2VfcmF0",
            "ZRgIIAEoARIgChhjYW5fdHhfdHJhY2tfcmFuZ2VfYWNjZWwYCSABKAESGgoS",
            "Y2FuX3R4X3RyYWNrX3JhbmdlGAogASgBEmQKG2Nhbl90eF90cmFja19tZWRf",
            "cmFuZ2VfbW9kZRgLIAEoDjI/LmFwb2xsby5kcml2ZXJzLkVzcl90cmFjazAx",
            "XzUwMC5DYW5fdHhfdHJhY2tfbWVkX3JhbmdlX21vZGVUeXBlEhoKEmNhbl90",
            "eF90cmFja19hbmdsZRgMIAEoASKLAQohQ2FuX3R4X3RyYWNrX2dyb3VwaW5n",
            "X2NoYW5nZWRUeXBlEjMKL0NBTl9UWF9UUkFDS19HUk9VUElOR19DSEFOR0VE",
            "X0dST1VQSU5HVU5DSEFOR0VEEAASMQotQ0FOX1RYX1RSQUNLX0dST1VQSU5H",
            "X0NIQU5HRURfR1JPVVBJTkdDSEFOR0VEEAEiZgoZQ2FuX3R4X3RyYWNrX29u",
            "Y29taW5nVHlwZRIlCiFDQU5fVFhfVFJBQ0tfT05DT01JTkdfTk9UT05DT01J",
            "TkcQABIiCh5DQU5fVFhfVFJBQ0tfT05DT01JTkdfT05DT01JTkcQASJyCh5D",
            "YW5fdHhfdHJhY2tfYnJpZGdlX29iamVjdFR5cGUSKQolQ0FOX1RYX1RSQUNL",
            "X0JSSURHRV9PQkpFQ1RfTk9UX0JSSURHRRAAEiUKIUNBTl9UWF9UUkFDS19C",
            "UklER0VfT0JKRUNUX0JSSURHRRABIt8CChdDYW5fdHhfdHJhY2tfc3RhdHVz",
            "VHlwZRIhCh1DQU5fVFhfVFJBQ0tfU1RBVFVTX05PX1RBUkdFVBAAEiIKHkNB",
            "Tl9UWF9UUkFDS19TVEFUVVNfTkVXX1RBUkdFVBABEioKJkNBTl9UWF9UUkFD",
            "S19TVEFUVVNfTkVXX1VQREFURURfVEFSR0VUEAISJgoiQ0FOX1RYX1RSQUNL",
            "X1NUQVRVU19VUERBVEVEX1RBUkdFVBADEiYKIkNBTl9UWF9UUkFDS19TVEFU",
            "VVNfQ09BU1RFRF9UQVJHRVQQBBIlCiFDQU5fVFhfVFJBQ0tfU1RBVFVTX01F",
            "UkdFRF9UQVJHRVQQBRIuCipDQU5fVFhfVFJBQ0tfU1RBVFVTX0lOVkFMSURf",
            "Q09BU1RFRF9UQVJHRVQQBhIqCiZDQU5fVFhfVFJBQ0tfU1RBVFVTX05FV19D",
            "T0FTVEVEX1RBUkdFVBAHIuUBCh9DYW5fdHhfdHJhY2tfbWVkX3JhbmdlX21v",
            "ZGVUeXBlEi8KK0NBTl9UWF9UUkFDS19NRURfUkFOR0VfTU9ERV9OT19NUl9M",
            "Ul9VUERBVEUQABIuCipDQU5fVFhfVFJBQ0tfTUVEX1JBTkdFX01PREVfTVJf",
            "VVBEQVRFX09OTFkQARIuCipDQU5fVFhfVFJBQ0tfTUVEX1JBTkdFX01PREVf",
            "TFJfVVBEQVRFX09OTFkQAhIxCi1DQU5fVFhfVFJBQ0tfTUVEX1JBTkdFX01P",
            "REVfQk9USF9NUl9MUl9VUERBVEUQAyKtAQoORXNyX3ZhbGlkMV81ZDASGgoS",
            "Y2FuX3R4X3ZhbGlkX2xyX3NuGAEgASgFEiIKGmNhbl90eF92YWxpZF9scl9y",
            "YW5nZV9yYXRlGAIgASgBEh0KFWNhbl90eF92YWxpZF9scl9yYW5nZRgDIAEo",
            "ARIdChVjYW5fdHhfdmFsaWRfbHJfcG93ZXIYBCABKAUSHQoVY2FuX3R4X3Zh",
            "bGlkX2xyX2FuZ2xlGAUgASgBIq0BCg5Fc3JfdmFsaWQyXzVkMRIaChJjYW5f",
            "dHhfdmFsaWRfbXJfc24YASABKAUSIgoaY2FuX3R4X3ZhbGlkX21yX3Jhbmdl",
            "X3JhdGUYAiABKAESHQoVY2FuX3R4X3ZhbGlkX21yX3JhbmdlGAMgASgBEh0K",
            "FWNhbl90eF92YWxpZF9tcl9wb3dlchgEIAEoBRIdChVjYW5fdHhfdmFsaWRf",
            "bXJfYW5nbGUYBSABKAEipgEKEUFjbV9pbnN0X3Jlc3BfN2U0Eg4KBmRhdGFf",
            "NxgBIAEoBRIOCgZkYXRhXzYYAiABKAUSDgoGZGF0YV81GAMgASgFEg4KBmRh",
            "dGFfNBgEIAEoBRIOCgZkYXRhXzMYBSABKAUSFwoPcnRuX2NtZF9jb3VudGVy",
            "GAYgASgFEhsKE2NvbW1hbmRfcmV0dXJuX2NvZGUYByABKAUSCwoDcGlkGAgg",
            "ASgFIp8VCgxWZWhpY2xlMl80ZjESJAocY2FuX3J4X3ZvbHZvX3Nob3J0X3Ry",
            "YWNrX3JvYxgBIAEoARJZChdjYW5fcnhfbXJfb25seV90cmFuc21pdBgCIAEo",
            "DjI4LmFwb2xsby5kcml2ZXJzLlZlaGljbGUyXzRmMS5DYW5fcnhfbXJfb25s",
            "eV90cmFuc21pdFR5cGUSWQoXY2FuX3J4X2xyX29ubHlfdHJhbnNtaXQYAyAB",
            "KA4yOC5hcG9sbG8uZHJpdmVycy5WZWhpY2xlMl80ZjEuQ2FuX3J4X2xyX29u",
            "bHlfdHJhbnNtaXRUeXBlEh0KFWNhbl9yeF9oaWdoX3lhd19hbmdsZRgEIAEo",
            "BRJRChNjYW5fcnhfY2xlYXJfZmF1bHRzGAUgASgOMjQuYXBvbGxvLmRyaXZl",
            "cnMuVmVoaWNsZTJfNGYxLkNhbl9yeF9jbGVhcl9mYXVsdHNUeXBlEmUKHWNh",
            "bl9yeF91c2VfYW5nbGVfbWlzYWxpZ25tZW50GAYgASgOMj4uYXBvbGxvLmRy",
            "aXZlcnMuVmVoaWNsZTJfNGYxLkNhbl9yeF91c2VfYW5nbGVfbWlzYWxpZ25t",
            "ZW50VHlwZRJdChljYW5fcnhfdHVybl9zaWduYWxfc3RhdHVzGAcgASgOMjou",
            "YXBvbGxvLmRyaXZlcnMuVmVoaWNsZTJfNGYxLkNhbl9yeF90dXJuX3NpZ25h",
            "bF9zdGF0dXNUeXBlElkKF2Nhbl9yeF9ibG9ja2FnZV9kaXNhYmxlGAggASgO",
            "MjguYXBvbGxvLmRyaXZlcnMuVmVoaWNsZTJfNGYxLkNhbl9yeF9ibG9ja2Fn",
            "ZV9kaXNhYmxlVHlwZRJlCh1jYW5fcnhfdmVoaWNsZV9zcGVlZF92YWxpZGl0",
            "eRgJIAEoDjI+LmFwb2xsby5kcml2ZXJzLlZlaGljbGUyXzRmMS5DYW5fcnhf",
            "dmVoaWNsZV9zcGVlZF92YWxpZGl0eVR5cGUSVwoWY2FuX3J4X21tcl91cHNp",
            "ZGVfZG93bhgKIAEoDjI3LmFwb2xsby5kcml2ZXJzLlZlaGljbGUyXzRmMS5D",
            "YW5fcnhfbW1yX3Vwc2lkZV9kb3duVHlwZRJRChNjYW5fcnhfd2lwZXJfc3Rh",
            "dHVzGAsgASgOMjQuYXBvbGxvLmRyaXZlcnMuVmVoaWNsZTJfNGYxLkNhbl9y",
            "eF93aXBlcl9zdGF0dXNUeXBlElcKFmNhbl9yeF9yYXdfZGF0YV9lbmFibGUY",
            "DCABKA4yNy5hcG9sbG8uZHJpdmVycy5WZWhpY2xlMl80ZjEuQ2FuX3J4X3Jh",
            "d19kYXRhX2VuYWJsZVR5cGUSWwoYY2FuX3J4X3JhZGFyX2NtZF9yYWRpYXRl",
            "GA0gASgOMjkuYXBvbGxvLmRyaXZlcnMuVmVoaWNsZTJfNGYxLkNhbl9yeF9y",
            "YWRhcl9jbWRfcmFkaWF0ZVR5cGUSUwoUY2FuX3J4X2dyb3VwaW5nX21vZGUY",
            "DiABKA4yNS5hcG9sbG8uZHJpdmVycy5WZWhpY2xlMl80ZjEuQ2FuX3J4X2dy",
            "b3VwaW5nX21vZGVUeXBlEh0KFWNhbl9yeF9tYXhpbXVtX3RyYWNrcxgPIAEo",
            "BRImCh5jYW5fcnhfbGF0ZXJhbF9tb3VudGluZ19vZmZzZXQYECABKAESIQoZ",
            "Y2FuX3J4X2FuZ2xlX21pc2FsaWdubWVudBgRIAEoARIdChVjYW5fcnhfc2Nh",
            "bl9pbmRleF9hY2sYEiABKAUiXgobQ2FuX3J4X21yX29ubHlfdHJhbnNtaXRU",
            "eXBlEh8KG0NBTl9SWF9NUl9PTkxZX1RSQU5TTUlUX09GRhAAEh4KGkNBTl9S",
            "WF9NUl9PTkxZX1RSQU5TTUlUX09OEAEiXgobQ2FuX3J4X2xyX29ubHlfdHJh",
            "bnNtaXRUeXBlEh8KG0NBTl9SWF9MUl9PTkxZX1RSQU5TTUlUX09GRhAAEh4K",
            "GkNBTl9SWF9MUl9PTkxZX1RSQU5TTUlUX09OEAEiUgoXQ2FuX3J4X2NsZWFy",
            "X2ZhdWx0c1R5cGUSGwoXQ0FOX1JYX0NMRUFSX0ZBVUxUU19PRkYQABIaChZD",
            "QU5fUlhfQ0xFQVJfRkFVTFRTX09OEAEicAohQ2FuX3J4X3VzZV9hbmdsZV9t",
            "aXNhbGlnbm1lbnRUeXBlEiUKIUNBTl9SWF9VU0VfQU5HTEVfTUlTQUxJR05N",
            "RU5UX09GRhAAEiQKIENBTl9SWF9VU0VfQU5HTEVfTUlTQUxJR05NRU5UX09O",
            "EAEitAEKHUNhbl9yeF90dXJuX3NpZ25hbF9zdGF0dXNUeXBlEiEKHUNBTl9S",
            "WF9UVVJOX1NJR05BTF9TVEFUVVNfT0ZGEAASIgoeQ0FOX1JYX1RVUk5fU0lH",
            "TkFMX1NUQVRVU19MRUZUEAESIwofQ0FOX1JYX1RVUk5fU0lHTkFMX1NUQVRV",
            "U19SSUdIVBACEicKI0NBTl9SWF9UVVJOX1NJR05BTF9TVEFUVVNfSU5WQUxJ",
            "RF8zEAMiaAobQ2FuX3J4X2Jsb2NrYWdlX2Rpc2FibGVUeXBlEiMKH0NBTl9S",
            "WF9CTE9DS0FHRV9ESVNBQkxFX0VOQUJMRUQQABIkCiBDQU5fUlhfQkxPQ0tB",
            "R0VfRElTQUJMRV9ESVNBQkxFRBABIncKIUNhbl9yeF92ZWhpY2xlX3NwZWVk",
            "X3ZhbGlkaXR5VHlwZRIpCiVDQU5fUlhfVkVISUNMRV9TUEVFRF9WQUxJRElU",
            "WV9JTlZBTElEEAASJwojQ0FOX1JYX1ZFSElDTEVfU1BFRURfVkFMSURJVFlf",
            "VkFMSUQQASJuChpDYW5fcnhfbW1yX3Vwc2lkZV9kb3duVHlwZRIoCiRDQU5f",
            "UlhfTU1SX1VQU0lERV9ET1dOX1JJR0hUX1NJREVfVVAQABImCiJDQU5fUlhf",
            "TU1SX1VQU0lERV9ET1dOX1VQU0lERV9ET1dOEAEiUgoXQ2FuX3J4X3dpcGVy",
            "X3N0YXR1c1R5cGUSGwoXQ0FOX1JYX1dJUEVSX1NUQVRVU19PRkYQABIaChZD",
            "QU5fUlhfV0lQRVJfU1RBVFVTX09OEAEiYQoaQ2FuX3J4X3Jhd19kYXRhX2Vu",
            "YWJsZVR5cGUSIwofQ0FOX1JYX1JBV19EQVRBX0VOQUJMRV9GSUxURVJFRBAA",
            "Eh4KGkNBTl9SWF9SQVdfREFUQV9FTkFCTEVfUkFXEAEiYQocQ2FuX3J4X3Jh",
            "ZGFyX2NtZF9yYWRpYXRlVHlwZRIgChxDQU5fUlhfUkFEQVJfQ01EX1JBRElB",
            "VEVfT0ZGEAASHwobQ0FOX1JYX1JBREFSX0NNRF9SQURJQVRFX09OEAEizgEK",
            "GENhbl9yeF9ncm91cGluZ19tb2RlVHlwZRIkCiBDQU5fUlhfR1JPVVBJTkdf",
            "TU9ERV9OT19HUk9VUElORxAAEioKJkNBTl9SWF9HUk9VUElOR19NT0RFX0dS",
            "T1VQX01PVklOR19PTkxZEAESLgoqQ0FOX1JYX0dST1VQSU5HX01PREVfR1JP",
            "VVBfU1RBVElPTkFSWV9PTkxZEAISMAosQ0FOX1JYX0dST1VQSU5HX01PREVf",
            "R1JPVVBfTU9WSU5HX1NUQVRJT05BUlkQAyKSCgoMVmVoaWNsZTFfNGYwEmcK",
            "HmNhbl9yeF9zdGVlcmluZ19hbmdsZV92YWxpZGl0eRgBIAEoDjI/LmFwb2xs",
            "by5kcml2ZXJzLlZlaGljbGUxXzRmMC5DYW5fcnhfc3RlZXJpbmdfYW5nbGVf",
            "dmFsaWRpdHlUeXBlEiIKGmNhbl9yeF9zdGVlcmluZ19hbmdsZV9yYXRlGAIg",
            "ASgFEl8KGmNhbl9yeF9zdGVlcmluZ19hbmdsZV9zaWduGAMgASgOMjsuYXBv",
            "bGxvLmRyaXZlcnMuVmVoaWNsZTFfNGYwLkNhbl9yeF9zdGVlcmluZ19hbmds",
            "ZV9zaWduVHlwZRJpCh9jYW5fcnhfc3RlZXJpbmdfYW5nbGVfcmF0ZV9zaWdu",
            "GAQgASgOMkAuYXBvbGxvLmRyaXZlcnMuVmVoaWNsZTFfNGYwLkNhbl9yeF9z",
            "dGVlcmluZ19hbmdsZV9yYXRlX3NpZ25UeXBlEh0KFWNhbl9yeF9zdGVlcmlu",
            "Z19hbmdsZRgFIAEoBRIfChdjYW5fcnhfcmFkaXVzX2N1cnZhdHVyZRgGIAEo",
            "BRJbChhjYW5fcnhfeWF3X3JhdGVfdmFsaWRpdHkYByABKA4yOS5hcG9sbG8u",
            "ZHJpdmVycy5WZWhpY2xlMV80ZjAuQ2FuX3J4X3lhd19yYXRlX3ZhbGlkaXR5",
            "VHlwZRIXCg9jYW5fcnhfeWF3X3JhdGUYCCABKAESZwoeY2FuX3J4X3ZlaGlj",
            "bGVfc3BlZWRfZGlyZWN0aW9uGAkgASgOMj8uYXBvbGxvLmRyaXZlcnMuVmVo",
            "aWNsZTFfNGYwLkNhbl9yeF92ZWhpY2xlX3NwZWVkX2RpcmVjdGlvblR5cGUS",
            "HAoUY2FuX3J4X3ZlaGljbGVfc3BlZWQYCiABKAEiegoiQ2FuX3J4X3N0ZWVy",
            "aW5nX2FuZ2xlX3ZhbGlkaXR5VHlwZRIqCiZDQU5fUlhfU1RFRVJJTkdfQU5H",
            "TEVfVkFMSURJVFlfSU5WQUxJRBAAEigKJENBTl9SWF9TVEVFUklOR19BTkdM",
            "RV9WQUxJRElUWV9WQUxJRBABInsKHkNhbl9yeF9zdGVlcmluZ19hbmdsZV9z",
            "aWduVHlwZRIvCitDQU5fUlhfU1RFRVJJTkdfQU5HTEVfU0lHTl9DT1VOVEVS",
            "Q0xPQ0tXSVNFEAASKAokQ0FOX1JYX1NURUVSSU5HX0FOR0xFX1NJR05fQ0xP",
            "Q0tXSVNFEAEiigEKI0Nhbl9yeF9zdGVlcmluZ19hbmdsZV9yYXRlX3NpZ25U",
            "eXBlEjQKMENBTl9SWF9TVEVFUklOR19BTkdMRV9SQVRFX1NJR05fQ09VTlRF",
            "UkNMT0NLV0lTRRAAEi0KKUNBTl9SWF9TVEVFUklOR19BTkdMRV9SQVRFX1NJ",
            "R05fQ0xPQ0tXSVNFEAEiaAocQ2FuX3J4X3lhd19yYXRlX3ZhbGlkaXR5VHlw",
            "ZRIkCiBDQU5fUlhfWUFXX1JBVEVfVkFMSURJVFlfSU5WQUxJRBAAEiIKHkNB",
            "Tl9SWF9ZQVdfUkFURV9WQUxJRElUWV9WQUxJRBABInwKIkNhbl9yeF92ZWhp",
            "Y2xlX3NwZWVkX2RpcmVjdGlvblR5cGUSKgomQ0FOX1JYX1ZFSElDTEVfU1BF",
            "RURfRElSRUNUSU9OX0ZPUldBUkQQABIqCiZDQU5fUlhfVkVISUNMRV9TUEVF",
            "RF9ESVJFQ1RJT05fUkVWRVJTRRABIoIICgxFc3Jfc2ltMV81YzASUQoTY2Fu",
            "X3J4X3NpbV90cmFja19pZBgBIAEoDjI0LmFwb2xsby5kcml2ZXJzLkVzcl9z",
            "aW0xXzVjMC5DYW5fcnhfc2ltX3RyYWNrX2lkVHlwZRJNChFjYW5fcnhfc2lt",
            "X3N0YXR1cxgCIAEoDjIyLmFwb2xsby5kcml2ZXJzLkVzcl9zaW0xXzVjMC5D",
            "YW5fcnhfc2ltX3N0YXR1c1R5cGUSHQoVY2FuX3J4X3NpbV9yYW5nZV9yYXRl",
            "GAMgASgBEh4KFmNhbl9yeF9zaW1fcmFuZ2VfYWNjZWwYBCABKAESGAoQY2Fu",
            "X3J4X3NpbV9yYW5nZRgFIAEoBRIbChNjYW5fcnhfc2ltX2xhdF9yYXRlGAYg",
            "ASgBEhoKEmNhbl9yeF9zaW1fbGF0X3BvcxgHIAEoARJRChNjYW5fcnhfc2lt",
            "X2Z1bmN0aW9uGAggASgOMjQuYXBvbGxvLmRyaXZlcnMuRXNyX3NpbTFfNWMw",
            "LkNhbl9yeF9zaW1fZnVuY3Rpb25UeXBlEhgKEGNhbl9yeF9zaW1fYW5nbGUY",
            "CSABKAEigAEKF0Nhbl9yeF9zaW1fdHJhY2tfaWRUeXBlEiEKHUNBTl9SWF9T",
            "SU1fVFJBQ0tfSURfTk9fVEFSR0VUEAASIAocQ0FOX1JYX1NJTV9UUkFDS19J",
            "RF9UQVJHRVRfMRABEiAKHENBTl9SWF9TSU1fVFJBQ0tfSURfVEFSR0VUXzIQ",
            "AiKPAQoVQ2FuX3J4X3NpbV9zdGF0dXNUeXBlEh0KGUNBTl9SWF9TSU1fU1RB",
            "VFVTX0lOVkFMSUQQABIZChVDQU5fUlhfU0lNX1NUQVRVU19ORVcQARIdChlD",
            "QU5fUlhfU0lNX1NUQVRVU19VUERBVEVEEAISHQoZQ0FOX1JYX1NJTV9TVEFU",
            "VVNfQ09BU1RFRBADIrsCChdDYW5fcnhfc2ltX2Z1bmN0aW9uVHlwZRIbChdD",
            "QU5fUlhfU0lNX0ZVTkNUSU9OX0FDQxAAEhoKFkNBTl9SWF9TSU1fRlVOQ1RJ",
            "T05fUkkQARIgChxDQU5fUlhfU0lNX0ZVTkNUSU9OX0ZDV19NT1ZFEAISIAoc",
            "Q0FOX1JYX1NJTV9GVU5DVElPTl9GQ1dfU1RBVBADEiEKHUNBTl9SWF9TSU1f",
            "RlVOQ1RJT05fQ01CQl9NT1ZFEAQSIQodQ0FOX1JYX1NJTV9GVU5DVElPTl9D",
            "TUJCX1NUQVQQBRIvCitDQU5fUlhfU0lNX0ZVTkNUSU9OX0FMTF9NT1ZJTkdf",
            "QUNDX0ZDV19DTUJCEAYSLAooQ0FOX1JYX1NJTV9GVU5DVElPTl9BTExfU1RB",
            "VF9SSV9GQ1dfQ01CQhAHIuwBCg9Fc3Jfc3RhdHVzMV80ZTASHAoUY2FuX3R4",
            "X2RzcF90aW1lc3RhbXAYASABKAESGQoRY2FuX3R4X2NvbW1fZXJyb3IYAiAB",
            "KAgSHAoUY2FuX3R4X3lhd19yYXRlX2NhbGMYAyABKAESIQoZY2FuX3R4X3Zl",
            "aGljbGVfc3BlZWRfY2FsYxgEIAEoARIZChFjYW5fdHhfc2Nhbl9pbmRleBgF",
            "IAEoBRIeChZjYW5fdHhfcm9sbGluZ19jb3VudF8xGAYgASgFEiQKHGNhbl90",
            "eF9yYWRpdXNfY3VydmF0dXJlX2NhbGMYByABKAUi3QsKD0Vzcl9zdGF0dXMy",
            "XzRlMRIcChRjYW5fdHhfeWF3X3JhdGVfYmlhcxgBIAEoARIiChpjYW5fdHhf",
            "dmVoX3NwZF9jb21wX2ZhY3RvchgCIAEoARIdChVjYW5fdHhfc3dfdmVyc2lv",
            "bl9kc3AYAyABKAUSGgoSY2FuX3R4X3RlbXBlcmF0dXJlGAQgASgFElYKFGNh",
            "bl90eF9yYXdfZGF0YV9tb2RlGAUgASgOMjguYXBvbGxvLmRyaXZlcnMuRXNy",
            "X3N0YXR1czJfNGUxLkNhbl90eF9yYXdfZGF0YV9tb2RlVHlwZRJcChdjYW5f",
            "dHhfcmFuZ2VfcGVyZl9lcnJvchgGIAEoDjI7LmFwb2xsby5kcml2ZXJzLkVz",
            "cl9zdGF0dXMyXzRlMS5DYW5fdHhfcmFuZ2VfcGVyZl9lcnJvclR5cGUSWAoV",
            "Y2FuX3R4X292ZXJoZWF0X2Vycm9yGAcgASgOMjkuYXBvbGxvLmRyaXZlcnMu",
            "RXNyX3N0YXR1czJfNGUxLkNhbl90eF9vdmVyaGVhdF9lcnJvclR5cGUSIQoZ",
            "Y2FuX3R4X21heGltdW1fdHJhY2tzX2FjaxgIIAEoBRJYChVjYW5fdHhfaW50",
            "ZXJuYWxfZXJyb3IYCSABKA4yOS5hcG9sbG8uZHJpdmVycy5Fc3Jfc3RhdHVz",
            "Ml80ZTEuQ2FuX3R4X2ludGVybmFsX2Vycm9yVHlwZRJWChRjYW5fdHhfZ3Jv",
            "dXBpbmdfbW9kZRgKIAEoDjI4LmFwb2xsby5kcml2ZXJzLkVzcl9zdGF0dXMy",
            "XzRlMS5DYW5fdHhfZ3JvdXBpbmdfbW9kZVR5cGUSXAoXY2FuX3R4X3hjdnJf",
            "b3BlcmF0aW9uYWwYCyABKA4yOy5hcG9sbG8uZHJpdmVycy5Fc3Jfc3RhdHVz",
            "Ml80ZTEuQ2FuX3R4X3hjdnJfb3BlcmF0aW9uYWxUeXBlEiEKGWNhbl90eF9z",
            "dGVlcmluZ19hbmdsZV9hY2sYDCABKAUSHgoWY2FuX3R4X3JvbGxpbmdfY291",
            "bnRfMhgNIAEoBSJbChhDYW5fdHhfcmF3X2RhdGFfbW9kZVR5cGUSIQodQ0FO",
            "X1RYX1JBV19EQVRBX01PREVfRklMVEVSRUQQABIcChhDQU5fVFhfUkFXX0RB",
            "VEFfTU9ERV9SQVcQASJrChtDYW5fdHhfcmFuZ2VfcGVyZl9lcnJvclR5cGUS",
            "JwojQ0FOX1RYX1JBTkdFX1BFUkZfRVJST1JfTk9UX0JMT0NLRUQQABIjCh9D",
            "QU5fVFhfUkFOR0VfUEVSRl9FUlJPUl9CTE9DS0VEEAEiZwoZQ2FuX3R4X292",
            "ZXJoZWF0X2Vycm9yVHlwZRImCiJDQU5fVFhfT1ZFUkhFQVRfRVJST1JfTk9U",
            "X09WRVJURU1QEAASIgoeQ0FOX1RYX09WRVJIRUFUX0VSUk9SX09WRVJURU1Q",
            "EAEiYwoZQ2FuX3R4X2ludGVybmFsX2Vycm9yVHlwZRIkCiBDQU5fVFhfSU5U",
            "RVJOQUxfRVJST1JfTk9UX0ZBSUxFRBAAEiAKHENBTl9UWF9JTlRFUk5BTF9F",
            "UlJPUl9GQUlMRUQQASLOAQoYQ2FuX3R4X2dyb3VwaW5nX21vZGVUeXBlEiQK",
            "IENBTl9UWF9HUk9VUElOR19NT0RFX05PX0dST1VQSU5HEAASKgomQ0FOX1RY",
            "X0dST1VQSU5HX01PREVfR1JPVVBfTU9WSU5HX09OTFkQARIuCipDQU5fVFhf",
            "R1JPVVBJTkdfTU9ERV9HUk9VUF9TVEFUSU9OQVJZX09OTFkQAhIwCixDQU5f",
            "VFhfR1JPVVBJTkdfTU9ERV9HUk9VUF9NT1ZJTkdfU1RBVElPTkFSWRADIl4K",
            "G0Nhbl90eF94Y3ZyX29wZXJhdGlvbmFsVHlwZRIfChtDQU5fVFhfWENWUl9P",
            "UEVSQVRJT05BTF9PRkYQABIeChpDQU5fVFhfWENWUl9PUEVSQVRJT05BTF9P",
            "ThABIpECCg9Fc3Jfc3RhdHVzOF81ZTcSHgoWY2FuX3R4X2hpc3RvcnlfZmF1",
            "bHRfNxgBIAEoBRIeChZjYW5fdHhfaGlzdG9yeV9mYXVsdF82GAIgASgFEh4K",
            "FmNhbl90eF9oaXN0b3J5X2ZhdWx0XzUYAyABKAUSHgoWY2FuX3R4X2hpc3Rv",
            "cnlfZmF1bHRfNBgEIAEoBRIeChZjYW5fdHhfaGlzdG9yeV9mYXVsdF8zGAUg",
            "ASgFEh4KFmNhbl90eF9oaXN0b3J5X2ZhdWx0XzIYBiABKAUSHgoWY2FuX3R4",
            "X2hpc3RvcnlfZmF1bHRfMRgHIAEoBRIeChZjYW5fdHhfaGlzdG9yeV9mYXVs",
            "dF8wGAggASgFIokCCg9Fc3Jfc3RhdHVzN181ZTYSHQoVY2FuX3R4X2FjdGl2",
            "ZV9mYXVsdF83GAEgASgFEh0KFWNhbl90eF9hY3RpdmVfZmF1bHRfNhgCIAEo",
            "BRIdChVjYW5fdHhfYWN0aXZlX2ZhdWx0XzUYAyABKAUSHQoVY2FuX3R4X2Fj",
            "dGl2ZV9mYXVsdF80GAQgASgFEh0KFWNhbl90eF9hY3RpdmVfZmF1bHRfMxgF",
            "IAEoBRIdChVjYW5fdHhfYWN0aXZlX2ZhdWx0XzIYBiABKAUSHQoVY2FuX3R4",
            "X2FjdGl2ZV9mYXVsdF8wGAcgASgFEh0KFWNhbl90eF9hY3RpdmVfZmF1bHRf",
            "MRgIIAEoBSL2DQoMVmVoaWNsZTNfNWYyEiYKHmNhbl9yeF9zZXJ2X2FsaWdu",
            "X3VwZGF0ZXNfbmVlZBgBIAEoBRJXChZjYW5fcnhfc2Vydl9hbGlnbl90eXBl",
            "GAIgASgOMjcuYXBvbGxvLmRyaXZlcnMuVmVoaWNsZTNfNWYyLkNhbl9yeF9z",
            "ZXJ2X2FsaWduX3R5cGVUeXBlElsKGGNhbl9yeF9zZXJ2X2FsaWduX2VuYWJs",
            "ZRgDIAEoDjI5LmFwb2xsby5kcml2ZXJzLlZlaGljbGUzXzVmMi5DYW5fcnhf",
            "c2Vydl9hbGlnbl9lbmFibGVUeXBlEiMKG2Nhbl9yeF9hYWxpZ25fYXZnX2N0",
            "cl90b3RhbBgEIAEoARJhChtjYW5fcnhfYXV0b19hbGlnbl9jb252ZXJnZWQY",
            "BSABKA4yPC5hcG9sbG8uZHJpdmVycy5WZWhpY2xlM181ZjIuQ2FuX3J4X2F1",
            "dG9fYWxpZ25fY29udmVyZ2VkVHlwZRJdChljYW5fcnhfYXV0b19hbGlnbl9k",
            "aXNhYmxlGAYgASgOMjouYXBvbGxvLmRyaXZlcnMuVmVoaWNsZTNfNWYyLkNh",
            "bl9yeF9hdXRvX2FsaWduX2Rpc2FibGVUeXBlEiQKHGNhbl9yeF9hbmdsZV9t",
            "b3VudGluZ19vZmZzZXQYByABKAESTQoRY2FuX3J4X3doZWVsX3NsaXAYCCAB",
            "KA4yMi5hcG9sbG8uZHJpdmVycy5WZWhpY2xlM181ZjIuQ2FuX3J4X3doZWVs",
            "X3NsaXBUeXBlEhsKE2Nhbl9yeF9yYWRhcl9oZWlnaHQYCSABKAUSGwoTY2Fu",
            "X3J4X3JhZGFyX2Zvdl9tchgKIAEoBRIbChNjYW5fcnhfcmFkYXJfZm92X2xy",
            "GAsgASgFEl8KGmNhbl9yeF9sb25nX2FjY2VsX3ZhbGlkaXR5GAwgASgOMjsu",
            "YXBvbGxvLmRyaXZlcnMuVmVoaWNsZTNfNWYyLkNhbl9yeF9sb25nX2FjY2Vs",
            "X3ZhbGlkaXR5VHlwZRIZChFjYW5fcnhfbG9uZ19hY2NlbBgNIAEoARJdChlj",
            "YW5fcnhfbGF0X2FjY2VsX3ZhbGlkaXR5GA4gASgOMjouYXBvbGxvLmRyaXZl",
            "cnMuVmVoaWNsZTNfNWYyLkNhbl9yeF9sYXRfYWNjZWxfdmFsaWRpdHlUeXBl",
            "EhgKEGNhbl9yeF9sYXRfYWNjZWwYDyABKAEidQoaQ2FuX3J4X3NlcnZfYWxp",
            "Z25fdHlwZVR5cGUSKQolQ0FOX1JYX1NFUlZfQUxJR05fVFlQRV9BVVRPX09S",
            "X0RFQUxFUhAAEiwKKENBTl9SWF9TRVJWX0FMSUdOX1RZUEVfVk9MVk9fU0hP",
            "UlRfVFJBQ0sQASJrChxDYW5fcnhfc2Vydl9hbGlnbl9lbmFibGVUeXBlEiUK",
            "IUNBTl9SWF9TRVJWX0FMSUdOX0VOQUJMRV9ESVNBQkxFRBAAEiQKIENBTl9S",
            "WF9TRVJWX0FMSUdOX0VOQUJMRV9FTkFCTEVEEAEiewofQ2FuX3J4X2F1dG9f",
            "YWxpZ25fY29udmVyZ2VkVHlwZRItCilDQU5fUlhfQVVUT19BTElHTl9DT05W",
            "RVJHRURfTk9UX0NPTlZFUkdFRBAAEikKJUNBTl9SWF9BVVRPX0FMSUdOX0NP",
            "TlZFUkdFRF9DT05WRVJHRUQQASJuCh1DYW5fcnhfYXV0b19hbGlnbl9kaXNh",
            "YmxlVHlwZRIlCiFDQU5fUlhfQVVUT19BTElHTl9ESVNBQkxFX0VOQUJMRUQQ",
            "ABImCiJDQU5fUlhfQVVUT19BTElHTl9ESVNBQkxFX0RJU0FCTEVEEAEisQEK",
            "FUNhbl9yeF93aGVlbF9zbGlwVHlwZRIgChxDQU5fUlhfV0hFRUxfU0xJUF9O",
            "T19DT05UUk9MEAASKAokQ0FOX1JYX1dIRUVMX1NMSVBfQlJBS0VfU0xJUF9D",
            "T05UUk9MEAESKwonQ0FOX1JYX1dIRUVMX1NMSVBfVFJBQ1RJT05fU0xJUF9D",
            "T05UUk9MEAISHwobQ0FOX1JYX1dIRUVMX1NMSVBfSU5WQUxJRF8zEAMibgoe",
            "Q2FuX3J4X2xvbmdfYWNjZWxfdmFsaWRpdHlUeXBlEiYKIkNBTl9SWF9MT05H",
            "X0FDQ0VMX1ZBTElESVRZX0lOVkFMSUQQABIkCiBDQU5fUlhfTE9OR19BQ0NF",
            "TF9WQUxJRElUWV9WQUxJRBABImsKHUNhbl9yeF9sYXRfYWNjZWxfdmFsaWRp",
            "dHlUeXBlEiUKIUNBTl9SWF9MQVRfQUNDRUxfVkFMSURJVFlfSU5WQUxJRBAA",
            "EiMKH0NBTl9SWF9MQVRfQUNDRUxfVkFMSURJVFlfVkFMSUQQASKRBQoMVmVo",
            "aWNsZTRfNWYzEiAKGGNhbl9yeF9mYWNfdGd0X3JhbmdlX3IybRgBIAEoARIg",
            "ChhjYW5fcnhfZmFjX3RndF9yYW5nZV9tMnQYAiABKAESHgoWY2FuX3J4X2Zh",
            "Y190Z3RfcmFuZ2VfMRgDIAEoARIkChxjYW5fcnhfZmFjX3RndF9tdGdfc3Bh",
            "Y2VfdmVyGAQgASgFEiQKHGNhbl9yeF9mYWNfdGd0X210Z19zcGFjZV9ob3IY",
            "BSABKAUSIQoZY2FuX3J4X2ZhY190Z3RfbXRnX29mZnNldBgGIAEoBRIhChlj",
            "YW5fcnhfZmFjX2FsaWduX3NhbXBfcmVxGAcgASgFEh8KF2Nhbl9yeF9mYWNf",
            "YWxpZ25fbWF4X250GAggASgFElcKFmNhbl9yeF9mYWNfYWxpZ25fY21kXzIY",
            "CSABKA4yNy5hcG9sbG8uZHJpdmVycy5WZWhpY2xlNF81ZjMuQ2FuX3J4X2Zh",
            "Y19hbGlnbl9jbWRfMlR5cGUSVwoWY2FuX3J4X2ZhY19hbGlnbl9jbWRfMRgK",
            "IAEoDjI3LmFwb2xsby5kcml2ZXJzLlZlaGljbGU0XzVmMy5DYW5fcnhfZmFj",
            "X2FsaWduX2NtZF8xVHlwZSJbChpDYW5fcnhfZmFjX2FsaWduX2NtZF8yVHlw",
            "ZRIeChpDQU5fUlhfRkFDX0FMSUdOX0NNRF8yX09GRhAAEh0KGUNBTl9SWF9G",
            "QUNfQUxJR05fQ01EXzJfT04QASJbChpDYW5fcnhfZmFjX2FsaWduX2NtZF8x",
            "VHlwZRIeChpDQU5fUlhfRkFDX0FMSUdOX0NNRF8xX09GRhAAEh0KGUNBTl9S",
            "WF9GQUNfQUxJR05fQ01EXzFfT04QASL0AwoMVmVoaWNsZTVfNWY0El8KGmNh",
            "bl9yeF95YXdfcmF0ZV9iaWFzX3NoaWZ0GAEgASgOMjsuYXBvbGxvLmRyaXZl",
            "cnMuVmVoaWNsZTVfNWY0LkNhbl9yeF95YXdfcmF0ZV9iaWFzX3NoaWZ0VHlw",
            "ZRIiChpjYW5fcnhfc3RlZXJpbmdfZ2Vhcl9yYXRpbxgCIAEoARIYChBjYW5f",
            "cnhfd2hlZWxiYXNlGAMgASgBEiEKGWNhbl9yeF9kaXN0YW5jZV9yZWFyX2F4",
            "bGUYBCABKAESJAocY2FuX3J4X2N3X2Jsb2NrYWdlX3RocmVzaG9sZBgFIAEo",
            "ARIiChpjYW5fcnhfZnVubmVsX29mZnNldF9yaWdodBgGIAEoARIhChljYW5f",
            "cnhfZnVubmVsX29mZnNldF9sZWZ0GAcgASgBEh0KFWNhbl9yeF9iZWFtd2lk",
            "dGhfdmVydBgIIAEoARIjChtjYW5fcnhfb3ZlcnN0ZWVyX3VuZGVyc3RlZXIY",
            "CSABKAUicQoeQ2FuX3J4X3lhd19yYXRlX2JpYXNfc2hpZnRUeXBlEigKJENB",
            "Tl9SWF9ZQVdfUkFURV9CSUFTX1NISUZUX05PX0RFVEVDVBAAEiUKIUNBTl9S",
            "WF9ZQVdfUkFURV9CSUFTX1NISUZUX0RFVEVDVBABItQBCgxWZWhpY2xlNl81",
            "ZjUSKAogY2FuX3J4X2lubmVyX2Z1bm5lbF9vZmZzZXRfcmlnaHQYASABKAES",
            "JwofY2FuX3J4X2lubmVyX2Z1bm5lbF9vZmZzZXRfbGVmdBgCIAEoARIkChxj",
            "YW5fdm9sdm9fZmFfcmFuZ2VfbWF4X3Nob3J0GAMgASgFEiUKHWNhbl92b2x2",
            "b19mYV9taW5fdnNwZWVkX3Nob3J0GAQgASgBEiQKHGNhbl92b2x2b19mYV9h",
            "YWxpZ25fZXN0aW1hdGUYBSABKAEimAoKCURlbHBoaUVTUhIlCgZoZWFkZXIY",
            "ASABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRlchI4Cg9lc3Jfc3RhdHVzOV81",
            "ZTgYAiABKAsyHy5hcG9sbG8uZHJpdmVycy5Fc3Jfc3RhdHVzOV81ZTgSOAoP",
            "ZXNyX3N0YXR1czZfNWU1GAMgASgLMh8uYXBvbGxvLmRyaXZlcnMuRXNyX3N0",
            "YXR1czZfNWU1EjgKD2Vzcl9zdGF0dXM1XzVlNBgEIAEoCzIfLmFwb2xsby5k",
            "cml2ZXJzLkVzcl9zdGF0dXM1XzVlNBI4Cg9lc3Jfc3RhdHVzM180ZTIYBSAB",
            "KAsyHy5hcG9sbG8uZHJpdmVycy5Fc3Jfc3RhdHVzM180ZTISOAoPZXNyX3N0",
            "YXR1czRfNGUzGAYgASgLMh8uYXBvbGxvLmRyaXZlcnMuRXNyX3N0YXR1czRf",
            "NGUzEkoKGGVzcl90cmFja21vdGlvbnBvd2VyXzU0MBgHIAMoCzIoLmFwb2xs",
            "by5kcml2ZXJzLkVzcl90cmFja21vdGlvbnBvd2VyXzU0MBI6ChBhY21faW5z",
            "dF9yZXFfN2UwGAggASgLMiAuYXBvbGxvLmRyaXZlcnMuQWNtX2luc3RfcmVx",
            "XzdlMBI4Cg9lc3JfdHJhY2swMV81MDAYCSADKAsyHy5hcG9sbG8uZHJpdmVy",
            "cy5Fc3JfdHJhY2swMV81MDASNgoOZXNyX3ZhbGlkMV81ZDAYCiABKAsyHi5h",
            "cG9sbG8uZHJpdmVycy5Fc3JfdmFsaWQxXzVkMBI2Cg5lc3JfdmFsaWQyXzVk",
            "MRgLIAEoCzIeLmFwb2xsby5kcml2ZXJzLkVzcl92YWxpZDJfNWQxEjwKEWFj",
            "bV9pbnN0X3Jlc3BfN2U0GAwgASgLMiEuYXBvbGxvLmRyaXZlcnMuQWNtX2lu",
            "c3RfcmVzcF83ZTQSMgoMdmVoaWNsZTJfNGYxGA0gASgLMhwuYXBvbGxvLmRy",
            "aXZlcnMuVmVoaWNsZTJfNGYxEjIKDHZlaGljbGUxXzRmMBgOIAEoCzIcLmFw",
            "b2xsby5kcml2ZXJzLlZlaGljbGUxXzRmMBIyCgxlc3Jfc2ltMV81YzAYDyAB",
            "KAsyHC5hcG9sbG8uZHJpdmVycy5Fc3Jfc2ltMV81YzASOAoPZXNyX3N0YXR1",
            "czFfNGUwGBAgASgLMh8uYXBvbGxvLmRyaXZlcnMuRXNyX3N0YXR1czFfNGUw",
            "EjgKD2Vzcl9zdGF0dXMyXzRlMRgRIAEoCzIfLmFwb2xsby5kcml2ZXJzLkVz",
            "cl9zdGF0dXMyXzRlMRI4Cg9lc3Jfc3RhdHVzOF81ZTcYEiABKAsyHy5hcG9s",
            "bG8uZHJpdmVycy5Fc3Jfc3RhdHVzOF81ZTcSOAoPZXNyX3N0YXR1czdfNWU2",
            "GBMgASgLMh8uYXBvbGxvLmRyaXZlcnMuRXNyX3N0YXR1czdfNWU2EjIKDHZl",
            "aGljbGUzXzVmMhgUIAEoCzIcLmFwb2xsby5kcml2ZXJzLlZlaGljbGUzXzVm",
            "MhIyCgx2ZWhpY2xlNF81ZjMYFSABKAsyHC5hcG9sbG8uZHJpdmVycy5WZWhp",
            "Y2xlNF81ZjMSMgoMdmVoaWNsZTVfNWY0GBYgASgLMhwuYXBvbGxvLmRyaXZl",
            "cnMuVmVoaWNsZTVfNWY0EjIKDHZlaGljbGU2XzVmNRgXIAEoCzIcLmFwb2xs",
            "by5kcml2ZXJzLlZlaGljbGU2XzVmNWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status9_5e8), global::Apollo.Drivers.Esr_status9_5e8.Parser, new[]{ "CanTxPathIdAcc3", "CanTxPathIdAcc2", "CanTxFilteredXohpAccCipv", "CanTxWaterSprayTargetId", "CanTxSerialNum3RdByte", "CanTxSideslipAngle", "CanTxAvgPwrCwblkg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status6_5e5), global::Apollo.Drivers.Esr_status6_5e5.Parser, new[]{ "CanTxSwVersionDsp3RdByte", "CanTxVerticalAlignUpdated", "CanTxVerticalMisalignment", "CanTxServAlignUpdatesDone", "CanTxFoundTarget", "CanTxFactoryMisalignment", "CanTxFactoryAlignStatus2", "CanTxFactoryAlignStatus1", "CanTxRecommendUnconverge", "CanTxWaveDiffA2D", "CanTxSystemPowerMode", "CanTxSupplyN5VA2D", "CanTxSupply1P8VA2D" }, null, new[]{ typeof(global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_vertical_align_updatedType), typeof(global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_found_targetType), typeof(global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_2Type), typeof(global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_1Type), typeof(global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_recommend_unconvergeType), typeof(global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_system_power_modeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status5_5e4), global::Apollo.Drivers.Esr_status5_5e4.Parser, new[]{ "CanTxSupply10VA2D", "CanTxTemp2A2D", "CanTxTemp1A2D", "CanTxSwbattA2D", "CanTxSupply5VdxA2D", "CanTxSupply5VaA2D", "CanTxSupply3P3VA2D", "CanTxIgnpA2D" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status3_4e2), global::Apollo.Drivers.Esr_status3_4e2.Parser, new[]{ "CanTxSwVersionPld", "CanTxSwVersionHost", "CanTxHwVersion", "CanTxInterfaceVersion", "CanTxSerialNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status4_4e3), global::Apollo.Drivers.Esr_status4_4e3.Parser, new[]{ "CanTxTruckTargetDet", "CanTxLrOnlyGratingLobeDet", "CanTxSidelobeBlockage", "CanTxPartialBlockage", "CanTxPathIdAccStat", "CanTxMrLrMode", "CanTxAutoAlignAngle", "CanTxRollingCount3", "CanTxPathIdFcwStat", "CanTxPathIdFcwMove", "CanTxPathIdCmbbStat", "CanTxPathIdCmbbMove", "CanTxPathIdAcc" }, null, new[]{ typeof(global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_truck_target_detType), typeof(global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_lr_only_grating_lobe_detType), typeof(global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_sidelobe_blockageType), typeof(global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_partial_blockageType), typeof(global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_mr_lr_modeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_trackmotionpower_540), global::Apollo.Drivers.Esr_trackmotionpower_540.Parser, new[]{ "CanTxTrackRollingCount2", "CanTxTrackCanIdGroup", "CanTxTrackMotionPower" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_trackmotionpower_540.Types.Motionpower), global::Apollo.Drivers.Esr_trackmotionpower_540.Types.Motionpower.Parser, new[]{ "CanTxTrackMoving", "CanTxTrackMovingFast", "CanTxTrackMovingSlow", "CanTxTrackPower" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Acm_inst_req_7e0), global::Apollo.Drivers.Acm_inst_req_7e0.Parser, new[]{ "CommandCtr", "CommandCode", "CcWord2", "CcWord1", "CcByte2", "CcByte1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_track01_500), global::Apollo.Drivers.Esr_track01_500.Parser, new[]{ "CanTxTrackGroupingChanged", "CanTxTrackOncoming", "CanTxTrackLatRate", "CanTxTrackBridgeObject", "CanTxTrackWidth", "CanTxTrackStatus", "CanTxTrackRollingCount", "CanTxTrackRangeRate", "CanTxTrackRangeAccel", "CanTxTrackRange", "CanTxTrackMedRangeMode", "CanTxTrackAngle" }, null, new[]{ typeof(global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_grouping_changedType), typeof(global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_oncomingType), typeof(global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_bridge_objectType), typeof(global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_statusType), typeof(global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_med_range_modeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_valid1_5d0), global::Apollo.Drivers.Esr_valid1_5d0.Parser, new[]{ "CanTxValidLrSn", "CanTxValidLrRangeRate", "CanTxValidLrRange", "CanTxValidLrPower", "CanTxValidLrAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_valid2_5d1), global::Apollo.Drivers.Esr_valid2_5d1.Parser, new[]{ "CanTxValidMrSn", "CanTxValidMrRangeRate", "CanTxValidMrRange", "CanTxValidMrPower", "CanTxValidMrAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Acm_inst_resp_7e4), global::Apollo.Drivers.Acm_inst_resp_7e4.Parser, new[]{ "Data7", "Data6", "Data5", "Data4", "Data3", "RtnCmdCounter", "CommandReturnCode", "Pid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Vehicle2_4f1), global::Apollo.Drivers.Vehicle2_4f1.Parser, new[]{ "CanRxVolvoShortTrackRoc", "CanRxMrOnlyTransmit", "CanRxLrOnlyTransmit", "CanRxHighYawAngle", "CanRxClearFaults", "CanRxUseAngleMisalignment", "CanRxTurnSignalStatus", "CanRxBlockageDisable", "CanRxVehicleSpeedValidity", "CanRxMmrUpsideDown", "CanRxWiperStatus", "CanRxRawDataEnable", "CanRxRadarCmdRadiate", "CanRxGroupingMode", "CanRxMaximumTracks", "CanRxLateralMountingOffset", "CanRxAngleMisalignment", "CanRxScanIndexAck" }, null, new[]{ typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mr_only_transmitType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_lr_only_transmitType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_clear_faultsType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_use_angle_misalignmentType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_turn_signal_statusType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_blockage_disableType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_vehicle_speed_validityType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mmr_upside_downType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_wiper_statusType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_raw_data_enableType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_radar_cmd_radiateType), typeof(global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_grouping_modeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Vehicle1_4f0), global::Apollo.Drivers.Vehicle1_4f0.Parser, new[]{ "CanRxSteeringAngleValidity", "CanRxSteeringAngleRate", "CanRxSteeringAngleSign", "CanRxSteeringAngleRateSign", "CanRxSteeringAngle", "CanRxRadiusCurvature", "CanRxYawRateValidity", "CanRxYawRate", "CanRxVehicleSpeedDirection", "CanRxVehicleSpeed" }, null, new[]{ typeof(global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_validityType), typeof(global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_signType), typeof(global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_rate_signType), typeof(global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_yaw_rate_validityType), typeof(global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_vehicle_speed_directionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_sim1_5c0), global::Apollo.Drivers.Esr_sim1_5c0.Parser, new[]{ "CanRxSimTrackId", "CanRxSimStatus", "CanRxSimRangeRate", "CanRxSimRangeAccel", "CanRxSimRange", "CanRxSimLatRate", "CanRxSimLatPos", "CanRxSimFunction", "CanRxSimAngle" }, null, new[]{ typeof(global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_track_idType), typeof(global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_statusType), typeof(global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_functionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status1_4e0), global::Apollo.Drivers.Esr_status1_4e0.Parser, new[]{ "CanTxDspTimestamp", "CanTxCommError", "CanTxYawRateCalc", "CanTxVehicleSpeedCalc", "CanTxScanIndex", "CanTxRollingCount1", "CanTxRadiusCurvatureCalc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status2_4e1), global::Apollo.Drivers.Esr_status2_4e1.Parser, new[]{ "CanTxYawRateBias", "CanTxVehSpdCompFactor", "CanTxSwVersionDsp", "CanTxTemperature", "CanTxRawDataMode", "CanTxRangePerfError", "CanTxOverheatError", "CanTxMaximumTracksAck", "CanTxInternalError", "CanTxGroupingMode", "CanTxXcvrOperational", "CanTxSteeringAngleAck", "CanTxRollingCount2" }, null, new[]{ typeof(global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_raw_data_modeType), typeof(global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_range_perf_errorType), typeof(global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_overheat_errorType), typeof(global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_internal_errorType), typeof(global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_grouping_modeType), typeof(global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_xcvr_operationalType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status8_5e7), global::Apollo.Drivers.Esr_status8_5e7.Parser, new[]{ "CanTxHistoryFault7", "CanTxHistoryFault6", "CanTxHistoryFault5", "CanTxHistoryFault4", "CanTxHistoryFault3", "CanTxHistoryFault2", "CanTxHistoryFault1", "CanTxHistoryFault0" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Esr_status7_5e6), global::Apollo.Drivers.Esr_status7_5e6.Parser, new[]{ "CanTxActiveFault7", "CanTxActiveFault6", "CanTxActiveFault5", "CanTxActiveFault4", "CanTxActiveFault3", "CanTxActiveFault2", "CanTxActiveFault0", "CanTxActiveFault1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Vehicle3_5f2), global::Apollo.Drivers.Vehicle3_5f2.Parser, new[]{ "CanRxServAlignUpdatesNeed", "CanRxServAlignType", "CanRxServAlignEnable", "CanRxAalignAvgCtrTotal", "CanRxAutoAlignConverged", "CanRxAutoAlignDisable", "CanRxAngleMountingOffset", "CanRxWheelSlip", "CanRxRadarHeight", "CanRxRadarFovMr", "CanRxRadarFovLr", "CanRxLongAccelValidity", "CanRxLongAccel", "CanRxLatAccelValidity", "CanRxLatAccel" }, null, new[]{ typeof(global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_typeType), typeof(global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_enableType), typeof(global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_convergedType), typeof(global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_disableType), typeof(global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_wheel_slipType), typeof(global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_long_accel_validityType), typeof(global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_lat_accel_validityType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Vehicle4_5f3), global::Apollo.Drivers.Vehicle4_5f3.Parser, new[]{ "CanRxFacTgtRangeR2M", "CanRxFacTgtRangeM2T", "CanRxFacTgtRange1", "CanRxFacTgtMtgSpaceVer", "CanRxFacTgtMtgSpaceHor", "CanRxFacTgtMtgOffset", "CanRxFacAlignSampReq", "CanRxFacAlignMaxNt", "CanRxFacAlignCmd2", "CanRxFacAlignCmd1" }, null, new[]{ typeof(global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_2Type), typeof(global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_1Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Vehicle5_5f4), global::Apollo.Drivers.Vehicle5_5f4.Parser, new[]{ "CanRxYawRateBiasShift", "CanRxSteeringGearRatio", "CanRxWheelbase", "CanRxDistanceRearAxle", "CanRxCwBlockageThreshold", "CanRxFunnelOffsetRight", "CanRxFunnelOffsetLeft", "CanRxBeamwidthVert", "CanRxOversteerUndersteer" }, null, new[]{ typeof(global::Apollo.Drivers.Vehicle5_5f4.Types.Can_rx_yaw_rate_bias_shiftType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Vehicle6_5f5), global::Apollo.Drivers.Vehicle6_5f5.Parser, new[]{ "CanRxInnerFunnelOffsetRight", "CanRxInnerFunnelOffsetLeft", "CanVolvoFaRangeMaxShort", "CanVolvoFaMinVspeedShort", "CanVolvoFaAalignEstimate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.DelphiESR), global::Apollo.Drivers.DelphiESR.Parser, new[]{ "Header", "EsrStatus95E8", "EsrStatus65E5", "EsrStatus55E4", "EsrStatus34E2", "EsrStatus44E3", "EsrTrackmotionpower540", "AcmInstReq7E0", "EsrTrack01500", "EsrValid15D0", "EsrValid25D1", "AcmInstResp7E4", "Vehicle24F1", "Vehicle14F0", "EsrSim15C0", "EsrStatus14E0", "EsrStatus24E1", "EsrStatus85E7", "EsrStatus75E6", "Vehicle35F2", "Vehicle45F3", "Vehicle55F4", "Vehicle65F5" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Esr_status9_5e8 : pb::IMessage<Esr_status9_5e8> {
    private static readonly pb::MessageParser<Esr_status9_5e8> _parser = new pb::MessageParser<Esr_status9_5e8>(() => new Esr_status9_5e8());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status9_5e8> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status9_5e8() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status9_5e8(Esr_status9_5e8 other) : this() {
      canTxPathIdAcc3_ = other.canTxPathIdAcc3_;
      canTxPathIdAcc2_ = other.canTxPathIdAcc2_;
      canTxFilteredXohpAccCipv_ = other.canTxFilteredXohpAccCipv_;
      canTxWaterSprayTargetId_ = other.canTxWaterSprayTargetId_;
      canTxSerialNum3RdByte_ = other.canTxSerialNum3RdByte_;
      canTxSideslipAngle_ = other.canTxSideslipAngle_;
      canTxAvgPwrCwblkg_ = other.canTxAvgPwrCwblkg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status9_5e8 Clone() {
      return new Esr_status9_5e8(this);
    }

    /// <summary>Field number for the "can_tx_path_id_acc_3" field.</summary>
    public const int CanTxPathIdAcc3FieldNumber = 1;
    private int canTxPathIdAcc3_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdAcc3 {
      get { return canTxPathIdAcc3_; }
      set {
        canTxPathIdAcc3_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_path_id_acc_2" field.</summary>
    public const int CanTxPathIdAcc2FieldNumber = 2;
    private int canTxPathIdAcc2_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdAcc2 {
      get { return canTxPathIdAcc2_; }
      set {
        canTxPathIdAcc2_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_filtered_xohp_acc_cipv" field.</summary>
    public const int CanTxFilteredXohpAccCipvFieldNumber = 3;
    private double canTxFilteredXohpAccCipv_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxFilteredXohpAccCipv {
      get { return canTxFilteredXohpAccCipv_; }
      set {
        canTxFilteredXohpAccCipv_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_water_spray_target_id" field.</summary>
    public const int CanTxWaterSprayTargetIdFieldNumber = 4;
    private int canTxWaterSprayTargetId_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxWaterSprayTargetId {
      get { return canTxWaterSprayTargetId_; }
      set {
        canTxWaterSprayTargetId_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_serial_num_3rd_byte" field.</summary>
    public const int CanTxSerialNum3RdByteFieldNumber = 5;
    private int canTxSerialNum3RdByte_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSerialNum3RdByte {
      get { return canTxSerialNum3RdByte_; }
      set {
        canTxSerialNum3RdByte_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_sideslip_angle" field.</summary>
    public const int CanTxSideslipAngleFieldNumber = 6;
    private double canTxSideslipAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxSideslipAngle {
      get { return canTxSideslipAngle_; }
      set {
        canTxSideslipAngle_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_avg_pwr_cwblkg" field.</summary>
    public const int CanTxAvgPwrCwblkgFieldNumber = 7;
    private int canTxAvgPwrCwblkg_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxAvgPwrCwblkg {
      get { return canTxAvgPwrCwblkg_; }
      set {
        canTxAvgPwrCwblkg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status9_5e8);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status9_5e8 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxPathIdAcc3 != other.CanTxPathIdAcc3) return false;
      if (CanTxPathIdAcc2 != other.CanTxPathIdAcc2) return false;
      if (CanTxFilteredXohpAccCipv != other.CanTxFilteredXohpAccCipv) return false;
      if (CanTxWaterSprayTargetId != other.CanTxWaterSprayTargetId) return false;
      if (CanTxSerialNum3RdByte != other.CanTxSerialNum3RdByte) return false;
      if (CanTxSideslipAngle != other.CanTxSideslipAngle) return false;
      if (CanTxAvgPwrCwblkg != other.CanTxAvgPwrCwblkg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxPathIdAcc3 != 0) hash ^= CanTxPathIdAcc3.GetHashCode();
      if (CanTxPathIdAcc2 != 0) hash ^= CanTxPathIdAcc2.GetHashCode();
      if (CanTxFilteredXohpAccCipv != 0D) hash ^= CanTxFilteredXohpAccCipv.GetHashCode();
      if (CanTxWaterSprayTargetId != 0) hash ^= CanTxWaterSprayTargetId.GetHashCode();
      if (CanTxSerialNum3RdByte != 0) hash ^= CanTxSerialNum3RdByte.GetHashCode();
      if (CanTxSideslipAngle != 0D) hash ^= CanTxSideslipAngle.GetHashCode();
      if (CanTxAvgPwrCwblkg != 0) hash ^= CanTxAvgPwrCwblkg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxPathIdAcc3 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxPathIdAcc3);
      }
      if (CanTxPathIdAcc2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanTxPathIdAcc2);
      }
      if (CanTxFilteredXohpAccCipv != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanTxFilteredXohpAccCipv);
      }
      if (CanTxWaterSprayTargetId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxWaterSprayTargetId);
      }
      if (CanTxSerialNum3RdByte != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanTxSerialNum3RdByte);
      }
      if (CanTxSideslipAngle != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CanTxSideslipAngle);
      }
      if (CanTxAvgPwrCwblkg != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanTxAvgPwrCwblkg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxPathIdAcc3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdAcc3);
      }
      if (CanTxPathIdAcc2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdAcc2);
      }
      if (CanTxFilteredXohpAccCipv != 0D) {
        size += 1 + 8;
      }
      if (CanTxWaterSprayTargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxWaterSprayTargetId);
      }
      if (CanTxSerialNum3RdByte != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSerialNum3RdByte);
      }
      if (CanTxSideslipAngle != 0D) {
        size += 1 + 8;
      }
      if (CanTxAvgPwrCwblkg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxAvgPwrCwblkg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status9_5e8 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxPathIdAcc3 != 0) {
        CanTxPathIdAcc3 = other.CanTxPathIdAcc3;
      }
      if (other.CanTxPathIdAcc2 != 0) {
        CanTxPathIdAcc2 = other.CanTxPathIdAcc2;
      }
      if (other.CanTxFilteredXohpAccCipv != 0D) {
        CanTxFilteredXohpAccCipv = other.CanTxFilteredXohpAccCipv;
      }
      if (other.CanTxWaterSprayTargetId != 0) {
        CanTxWaterSprayTargetId = other.CanTxWaterSprayTargetId;
      }
      if (other.CanTxSerialNum3RdByte != 0) {
        CanTxSerialNum3RdByte = other.CanTxSerialNum3RdByte;
      }
      if (other.CanTxSideslipAngle != 0D) {
        CanTxSideslipAngle = other.CanTxSideslipAngle;
      }
      if (other.CanTxAvgPwrCwblkg != 0) {
        CanTxAvgPwrCwblkg = other.CanTxAvgPwrCwblkg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxPathIdAcc3 = input.ReadInt32();
            break;
          }
          case 16: {
            CanTxPathIdAcc2 = input.ReadInt32();
            break;
          }
          case 25: {
            CanTxFilteredXohpAccCipv = input.ReadDouble();
            break;
          }
          case 32: {
            CanTxWaterSprayTargetId = input.ReadInt32();
            break;
          }
          case 40: {
            CanTxSerialNum3RdByte = input.ReadInt32();
            break;
          }
          case 49: {
            CanTxSideslipAngle = input.ReadDouble();
            break;
          }
          case 56: {
            CanTxAvgPwrCwblkg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Esr_status6_5e5 : pb::IMessage<Esr_status6_5e5> {
    private static readonly pb::MessageParser<Esr_status6_5e5> _parser = new pb::MessageParser<Esr_status6_5e5>(() => new Esr_status6_5e5());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status6_5e5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status6_5e5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status6_5e5(Esr_status6_5e5 other) : this() {
      canTxSwVersionDsp3RdByte_ = other.canTxSwVersionDsp3RdByte_;
      canTxVerticalAlignUpdated_ = other.canTxVerticalAlignUpdated_;
      canTxVerticalMisalignment_ = other.canTxVerticalMisalignment_;
      canTxServAlignUpdatesDone_ = other.canTxServAlignUpdatesDone_;
      canTxFoundTarget_ = other.canTxFoundTarget_;
      canTxFactoryMisalignment_ = other.canTxFactoryMisalignment_;
      canTxFactoryAlignStatus2_ = other.canTxFactoryAlignStatus2_;
      canTxFactoryAlignStatus1_ = other.canTxFactoryAlignStatus1_;
      canTxRecommendUnconverge_ = other.canTxRecommendUnconverge_;
      canTxWaveDiffA2D_ = other.canTxWaveDiffA2D_;
      canTxSystemPowerMode_ = other.canTxSystemPowerMode_;
      canTxSupplyN5VA2D_ = other.canTxSupplyN5VA2D_;
      canTxSupply1P8VA2D_ = other.canTxSupply1P8VA2D_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status6_5e5 Clone() {
      return new Esr_status6_5e5(this);
    }

    /// <summary>Field number for the "can_tx_sw_version_dsp_3rd_byte" field.</summary>
    public const int CanTxSwVersionDsp3RdByteFieldNumber = 1;
    private int canTxSwVersionDsp3RdByte_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSwVersionDsp3RdByte {
      get { return canTxSwVersionDsp3RdByte_; }
      set {
        canTxSwVersionDsp3RdByte_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_vertical_align_updated" field.</summary>
    public const int CanTxVerticalAlignUpdatedFieldNumber = 2;
    private global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_vertical_align_updatedType canTxVerticalAlignUpdated_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_vertical_align_updatedType CanTxVerticalAlignUpdated {
      get { return canTxVerticalAlignUpdated_; }
      set {
        canTxVerticalAlignUpdated_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_vertical_misalignment" field.</summary>
    public const int CanTxVerticalMisalignmentFieldNumber = 3;
    private double canTxVerticalMisalignment_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxVerticalMisalignment {
      get { return canTxVerticalMisalignment_; }
      set {
        canTxVerticalMisalignment_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_serv_align_updates_done" field.</summary>
    public const int CanTxServAlignUpdatesDoneFieldNumber = 4;
    private int canTxServAlignUpdatesDone_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxServAlignUpdatesDone {
      get { return canTxServAlignUpdatesDone_; }
      set {
        canTxServAlignUpdatesDone_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_found_target" field.</summary>
    public const int CanTxFoundTargetFieldNumber = 5;
    private global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_found_targetType canTxFoundTarget_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_found_targetType CanTxFoundTarget {
      get { return canTxFoundTarget_; }
      set {
        canTxFoundTarget_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_factory_misalignment" field.</summary>
    public const int CanTxFactoryMisalignmentFieldNumber = 6;
    private double canTxFactoryMisalignment_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxFactoryMisalignment {
      get { return canTxFactoryMisalignment_; }
      set {
        canTxFactoryMisalignment_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_factory_align_status_2" field.</summary>
    public const int CanTxFactoryAlignStatus2FieldNumber = 7;
    private global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_2Type canTxFactoryAlignStatus2_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_2Type CanTxFactoryAlignStatus2 {
      get { return canTxFactoryAlignStatus2_; }
      set {
        canTxFactoryAlignStatus2_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_factory_align_status_1" field.</summary>
    public const int CanTxFactoryAlignStatus1FieldNumber = 8;
    private global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_1Type canTxFactoryAlignStatus1_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_1Type CanTxFactoryAlignStatus1 {
      get { return canTxFactoryAlignStatus1_; }
      set {
        canTxFactoryAlignStatus1_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_recommend_unconverge" field.</summary>
    public const int CanTxRecommendUnconvergeFieldNumber = 9;
    private global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_recommend_unconvergeType canTxRecommendUnconverge_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_recommend_unconvergeType CanTxRecommendUnconverge {
      get { return canTxRecommendUnconverge_; }
      set {
        canTxRecommendUnconverge_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_wave_diff_a2d" field.</summary>
    public const int CanTxWaveDiffA2DFieldNumber = 10;
    private int canTxWaveDiffA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxWaveDiffA2D {
      get { return canTxWaveDiffA2D_; }
      set {
        canTxWaveDiffA2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_system_power_mode" field.</summary>
    public const int CanTxSystemPowerModeFieldNumber = 11;
    private global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_system_power_modeType canTxSystemPowerMode_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_system_power_modeType CanTxSystemPowerMode {
      get { return canTxSystemPowerMode_; }
      set {
        canTxSystemPowerMode_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_supply_n5v_a2d" field.</summary>
    public const int CanTxSupplyN5VA2DFieldNumber = 12;
    private int canTxSupplyN5VA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSupplyN5VA2D {
      get { return canTxSupplyN5VA2D_; }
      set {
        canTxSupplyN5VA2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_supply_1p8v_a2d" field.</summary>
    public const int CanTxSupply1P8VA2DFieldNumber = 13;
    private int canTxSupply1P8VA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSupply1P8VA2D {
      get { return canTxSupply1P8VA2D_; }
      set {
        canTxSupply1P8VA2D_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status6_5e5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status6_5e5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxSwVersionDsp3RdByte != other.CanTxSwVersionDsp3RdByte) return false;
      if (CanTxVerticalAlignUpdated != other.CanTxVerticalAlignUpdated) return false;
      if (CanTxVerticalMisalignment != other.CanTxVerticalMisalignment) return false;
      if (CanTxServAlignUpdatesDone != other.CanTxServAlignUpdatesDone) return false;
      if (CanTxFoundTarget != other.CanTxFoundTarget) return false;
      if (CanTxFactoryMisalignment != other.CanTxFactoryMisalignment) return false;
      if (CanTxFactoryAlignStatus2 != other.CanTxFactoryAlignStatus2) return false;
      if (CanTxFactoryAlignStatus1 != other.CanTxFactoryAlignStatus1) return false;
      if (CanTxRecommendUnconverge != other.CanTxRecommendUnconverge) return false;
      if (CanTxWaveDiffA2D != other.CanTxWaveDiffA2D) return false;
      if (CanTxSystemPowerMode != other.CanTxSystemPowerMode) return false;
      if (CanTxSupplyN5VA2D != other.CanTxSupplyN5VA2D) return false;
      if (CanTxSupply1P8VA2D != other.CanTxSupply1P8VA2D) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxSwVersionDsp3RdByte != 0) hash ^= CanTxSwVersionDsp3RdByte.GetHashCode();
      if (CanTxVerticalAlignUpdated != 0) hash ^= CanTxVerticalAlignUpdated.GetHashCode();
      if (CanTxVerticalMisalignment != 0D) hash ^= CanTxVerticalMisalignment.GetHashCode();
      if (CanTxServAlignUpdatesDone != 0) hash ^= CanTxServAlignUpdatesDone.GetHashCode();
      if (CanTxFoundTarget != 0) hash ^= CanTxFoundTarget.GetHashCode();
      if (CanTxFactoryMisalignment != 0D) hash ^= CanTxFactoryMisalignment.GetHashCode();
      if (CanTxFactoryAlignStatus2 != 0) hash ^= CanTxFactoryAlignStatus2.GetHashCode();
      if (CanTxFactoryAlignStatus1 != 0) hash ^= CanTxFactoryAlignStatus1.GetHashCode();
      if (CanTxRecommendUnconverge != 0) hash ^= CanTxRecommendUnconverge.GetHashCode();
      if (CanTxWaveDiffA2D != 0) hash ^= CanTxWaveDiffA2D.GetHashCode();
      if (CanTxSystemPowerMode != 0) hash ^= CanTxSystemPowerMode.GetHashCode();
      if (CanTxSupplyN5VA2D != 0) hash ^= CanTxSupplyN5VA2D.GetHashCode();
      if (CanTxSupply1P8VA2D != 0) hash ^= CanTxSupply1P8VA2D.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxSwVersionDsp3RdByte != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxSwVersionDsp3RdByte);
      }
      if (CanTxVerticalAlignUpdated != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CanTxVerticalAlignUpdated);
      }
      if (CanTxVerticalMisalignment != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanTxVerticalMisalignment);
      }
      if (CanTxServAlignUpdatesDone != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxServAlignUpdatesDone);
      }
      if (CanTxFoundTarget != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CanTxFoundTarget);
      }
      if (CanTxFactoryMisalignment != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CanTxFactoryMisalignment);
      }
      if (CanTxFactoryAlignStatus2 != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CanTxFactoryAlignStatus2);
      }
      if (CanTxFactoryAlignStatus1 != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CanTxFactoryAlignStatus1);
      }
      if (CanTxRecommendUnconverge != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CanTxRecommendUnconverge);
      }
      if (CanTxWaveDiffA2D != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CanTxWaveDiffA2D);
      }
      if (CanTxSystemPowerMode != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) CanTxSystemPowerMode);
      }
      if (CanTxSupplyN5VA2D != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CanTxSupplyN5VA2D);
      }
      if (CanTxSupply1P8VA2D != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CanTxSupply1P8VA2D);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxSwVersionDsp3RdByte != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSwVersionDsp3RdByte);
      }
      if (CanTxVerticalAlignUpdated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxVerticalAlignUpdated);
      }
      if (CanTxVerticalMisalignment != 0D) {
        size += 1 + 8;
      }
      if (CanTxServAlignUpdatesDone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxServAlignUpdatesDone);
      }
      if (CanTxFoundTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxFoundTarget);
      }
      if (CanTxFactoryMisalignment != 0D) {
        size += 1 + 8;
      }
      if (CanTxFactoryAlignStatus2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxFactoryAlignStatus2);
      }
      if (CanTxFactoryAlignStatus1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxFactoryAlignStatus1);
      }
      if (CanTxRecommendUnconverge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxRecommendUnconverge);
      }
      if (CanTxWaveDiffA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxWaveDiffA2D);
      }
      if (CanTxSystemPowerMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxSystemPowerMode);
      }
      if (CanTxSupplyN5VA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSupplyN5VA2D);
      }
      if (CanTxSupply1P8VA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSupply1P8VA2D);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status6_5e5 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxSwVersionDsp3RdByte != 0) {
        CanTxSwVersionDsp3RdByte = other.CanTxSwVersionDsp3RdByte;
      }
      if (other.CanTxVerticalAlignUpdated != 0) {
        CanTxVerticalAlignUpdated = other.CanTxVerticalAlignUpdated;
      }
      if (other.CanTxVerticalMisalignment != 0D) {
        CanTxVerticalMisalignment = other.CanTxVerticalMisalignment;
      }
      if (other.CanTxServAlignUpdatesDone != 0) {
        CanTxServAlignUpdatesDone = other.CanTxServAlignUpdatesDone;
      }
      if (other.CanTxFoundTarget != 0) {
        CanTxFoundTarget = other.CanTxFoundTarget;
      }
      if (other.CanTxFactoryMisalignment != 0D) {
        CanTxFactoryMisalignment = other.CanTxFactoryMisalignment;
      }
      if (other.CanTxFactoryAlignStatus2 != 0) {
        CanTxFactoryAlignStatus2 = other.CanTxFactoryAlignStatus2;
      }
      if (other.CanTxFactoryAlignStatus1 != 0) {
        CanTxFactoryAlignStatus1 = other.CanTxFactoryAlignStatus1;
      }
      if (other.CanTxRecommendUnconverge != 0) {
        CanTxRecommendUnconverge = other.CanTxRecommendUnconverge;
      }
      if (other.CanTxWaveDiffA2D != 0) {
        CanTxWaveDiffA2D = other.CanTxWaveDiffA2D;
      }
      if (other.CanTxSystemPowerMode != 0) {
        CanTxSystemPowerMode = other.CanTxSystemPowerMode;
      }
      if (other.CanTxSupplyN5VA2D != 0) {
        CanTxSupplyN5VA2D = other.CanTxSupplyN5VA2D;
      }
      if (other.CanTxSupply1P8VA2D != 0) {
        CanTxSupply1P8VA2D = other.CanTxSupply1P8VA2D;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxSwVersionDsp3RdByte = input.ReadInt32();
            break;
          }
          case 16: {
            canTxVerticalAlignUpdated_ = (global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_vertical_align_updatedType) input.ReadEnum();
            break;
          }
          case 25: {
            CanTxVerticalMisalignment = input.ReadDouble();
            break;
          }
          case 32: {
            CanTxServAlignUpdatesDone = input.ReadInt32();
            break;
          }
          case 40: {
            canTxFoundTarget_ = (global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_found_targetType) input.ReadEnum();
            break;
          }
          case 49: {
            CanTxFactoryMisalignment = input.ReadDouble();
            break;
          }
          case 56: {
            canTxFactoryAlignStatus2_ = (global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_2Type) input.ReadEnum();
            break;
          }
          case 64: {
            canTxFactoryAlignStatus1_ = (global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_factory_align_status_1Type) input.ReadEnum();
            break;
          }
          case 72: {
            canTxRecommendUnconverge_ = (global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_recommend_unconvergeType) input.ReadEnum();
            break;
          }
          case 80: {
            CanTxWaveDiffA2D = input.ReadInt32();
            break;
          }
          case 88: {
            canTxSystemPowerMode_ = (global::Apollo.Drivers.Esr_status6_5e5.Types.Can_tx_system_power_modeType) input.ReadEnum();
            break;
          }
          case 96: {
            CanTxSupplyN5VA2D = input.ReadInt32();
            break;
          }
          case 104: {
            CanTxSupply1P8VA2D = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Esr_status6_5e5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_tx_vertical_align_updatedType {
        [pbr::OriginalName("CAN_TX_VERTICAL_ALIGN_UPDATED_NOT_UPDATED")] CanTxVerticalAlignUpdatedNotUpdated = 0,
        [pbr::OriginalName("CAN_TX_VERTICAL_ALIGN_UPDATED_UPDATED")] CanTxVerticalAlignUpdatedUpdated = 1,
      }

      public enum Can_tx_found_targetType {
        [pbr::OriginalName("CAN_TX_FOUND_TARGET_NOT_FOUND")] CanTxFoundTargetNotFound = 0,
        [pbr::OriginalName("CAN_TX_FOUND_TARGET_FOUND")] CanTxFoundTargetFound = 1,
      }

      public enum Can_tx_factory_align_status_2Type {
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_2_OFF")] CanTxFactoryAlignStatus2Off = 0,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_2_BUSY")] CanTxFactoryAlignStatus2Busy = 1,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_2_SUCCESS")] CanTxFactoryAlignStatus2Success = 2,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_NO_TARGET")] CanTxFactoryAlignStatus2FailNoTarget = 3,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_DEV_TOO_LARGE")] CanTxFactoryAlignStatus2FailDevTooLarge = 4,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_LARGE")] CanTxFactoryAlignStatus2FailVarTooLarge = 5,
      }

      public enum Can_tx_factory_align_status_1Type {
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_1_OFF")] CanTxFactoryAlignStatus1Off = 0,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_1_BUSY")] CanTxFactoryAlignStatus1Busy = 1,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_1_SUCCESS")] CanTxFactoryAlignStatus1Success = 2,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_NO_TARGET")] CanTxFactoryAlignStatus1FailNoTarget = 3,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_DEV_TOO_LARGE")] CanTxFactoryAlignStatus1FailDevTooLarge = 4,
        [pbr::OriginalName("CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LARGE")] CanTxFactoryAlignStatus1FailVarTooLarge = 5,
      }

      public enum Can_tx_recommend_unconvergeType {
        [pbr::OriginalName("CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOMMEND")] CanTxRecommendUnconvergeNotRecommend = 0,
        [pbr::OriginalName("CAN_TX_RECOMMEND_UNCONVERGE_RECOMMEND")] CanTxRecommendUnconvergeRecommend = 1,
      }

      public enum Can_tx_system_power_modeType {
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_DSP_INIT")] CanTxSystemPowerModeDspInit = 0,
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_RADIATE_OFF")] CanTxSystemPowerModeRadiateOff = 1,
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_RADIATE_ON")] CanTxSystemPowerModeRadiateOn = 2,
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_DSP_SHUTDOWN")] CanTxSystemPowerModeDspShutdown = 3,
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_DSP_OFF")] CanTxSystemPowerModeDspOff = 4,
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_HOST_SHUTDOWN")] CanTxSystemPowerModeHostShutdown = 5,
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_TEST")] CanTxSystemPowerModeTest = 6,
        [pbr::OriginalName("CAN_TX_SYSTEM_POWER_MODE_7INVALID")] CanTxSystemPowerMode7Invalid = 7,
      }

    }
    #endregion

  }

  public sealed partial class Esr_status5_5e4 : pb::IMessage<Esr_status5_5e4> {
    private static readonly pb::MessageParser<Esr_status5_5e4> _parser = new pb::MessageParser<Esr_status5_5e4>(() => new Esr_status5_5e4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status5_5e4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status5_5e4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status5_5e4(Esr_status5_5e4 other) : this() {
      canTxSupply10VA2D_ = other.canTxSupply10VA2D_;
      canTxTemp2A2D_ = other.canTxTemp2A2D_;
      canTxTemp1A2D_ = other.canTxTemp1A2D_;
      canTxSwbattA2D_ = other.canTxSwbattA2D_;
      canTxSupply5VdxA2D_ = other.canTxSupply5VdxA2D_;
      canTxSupply5VaA2D_ = other.canTxSupply5VaA2D_;
      canTxSupply3P3VA2D_ = other.canTxSupply3P3VA2D_;
      canTxIgnpA2D_ = other.canTxIgnpA2D_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status5_5e4 Clone() {
      return new Esr_status5_5e4(this);
    }

    /// <summary>Field number for the "can_tx_supply_10v_a2d" field.</summary>
    public const int CanTxSupply10VA2DFieldNumber = 1;
    private int canTxSupply10VA2D_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSupply10VA2D {
      get { return canTxSupply10VA2D_; }
      set {
        canTxSupply10VA2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_temp2_a2d" field.</summary>
    public const int CanTxTemp2A2DFieldNumber = 2;
    private int canTxTemp2A2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxTemp2A2D {
      get { return canTxTemp2A2D_; }
      set {
        canTxTemp2A2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_temp1_a2d" field.</summary>
    public const int CanTxTemp1A2DFieldNumber = 3;
    private int canTxTemp1A2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxTemp1A2D {
      get { return canTxTemp1A2D_; }
      set {
        canTxTemp1A2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_swbatt_a2d" field.</summary>
    public const int CanTxSwbattA2DFieldNumber = 4;
    private int canTxSwbattA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSwbattA2D {
      get { return canTxSwbattA2D_; }
      set {
        canTxSwbattA2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_supply_5vdx_a2d" field.</summary>
    public const int CanTxSupply5VdxA2DFieldNumber = 5;
    private int canTxSupply5VdxA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSupply5VdxA2D {
      get { return canTxSupply5VdxA2D_; }
      set {
        canTxSupply5VdxA2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_supply_5va_a2d" field.</summary>
    public const int CanTxSupply5VaA2DFieldNumber = 6;
    private int canTxSupply5VaA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSupply5VaA2D {
      get { return canTxSupply5VaA2D_; }
      set {
        canTxSupply5VaA2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_supply_3p3v_a2d" field.</summary>
    public const int CanTxSupply3P3VA2DFieldNumber = 7;
    private int canTxSupply3P3VA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSupply3P3VA2D {
      get { return canTxSupply3P3VA2D_; }
      set {
        canTxSupply3P3VA2D_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_ignp_a2d" field.</summary>
    public const int CanTxIgnpA2DFieldNumber = 8;
    private int canTxIgnpA2D_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxIgnpA2D {
      get { return canTxIgnpA2D_; }
      set {
        canTxIgnpA2D_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status5_5e4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status5_5e4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxSupply10VA2D != other.CanTxSupply10VA2D) return false;
      if (CanTxTemp2A2D != other.CanTxTemp2A2D) return false;
      if (CanTxTemp1A2D != other.CanTxTemp1A2D) return false;
      if (CanTxSwbattA2D != other.CanTxSwbattA2D) return false;
      if (CanTxSupply5VdxA2D != other.CanTxSupply5VdxA2D) return false;
      if (CanTxSupply5VaA2D != other.CanTxSupply5VaA2D) return false;
      if (CanTxSupply3P3VA2D != other.CanTxSupply3P3VA2D) return false;
      if (CanTxIgnpA2D != other.CanTxIgnpA2D) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxSupply10VA2D != 0) hash ^= CanTxSupply10VA2D.GetHashCode();
      if (CanTxTemp2A2D != 0) hash ^= CanTxTemp2A2D.GetHashCode();
      if (CanTxTemp1A2D != 0) hash ^= CanTxTemp1A2D.GetHashCode();
      if (CanTxSwbattA2D != 0) hash ^= CanTxSwbattA2D.GetHashCode();
      if (CanTxSupply5VdxA2D != 0) hash ^= CanTxSupply5VdxA2D.GetHashCode();
      if (CanTxSupply5VaA2D != 0) hash ^= CanTxSupply5VaA2D.GetHashCode();
      if (CanTxSupply3P3VA2D != 0) hash ^= CanTxSupply3P3VA2D.GetHashCode();
      if (CanTxIgnpA2D != 0) hash ^= CanTxIgnpA2D.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxSupply10VA2D != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxSupply10VA2D);
      }
      if (CanTxTemp2A2D != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanTxTemp2A2D);
      }
      if (CanTxTemp1A2D != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CanTxTemp1A2D);
      }
      if (CanTxSwbattA2D != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxSwbattA2D);
      }
      if (CanTxSupply5VdxA2D != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanTxSupply5VdxA2D);
      }
      if (CanTxSupply5VaA2D != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CanTxSupply5VaA2D);
      }
      if (CanTxSupply3P3VA2D != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanTxSupply3P3VA2D);
      }
      if (CanTxIgnpA2D != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CanTxIgnpA2D);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxSupply10VA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSupply10VA2D);
      }
      if (CanTxTemp2A2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxTemp2A2D);
      }
      if (CanTxTemp1A2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxTemp1A2D);
      }
      if (CanTxSwbattA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSwbattA2D);
      }
      if (CanTxSupply5VdxA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSupply5VdxA2D);
      }
      if (CanTxSupply5VaA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSupply5VaA2D);
      }
      if (CanTxSupply3P3VA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSupply3P3VA2D);
      }
      if (CanTxIgnpA2D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxIgnpA2D);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status5_5e4 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxSupply10VA2D != 0) {
        CanTxSupply10VA2D = other.CanTxSupply10VA2D;
      }
      if (other.CanTxTemp2A2D != 0) {
        CanTxTemp2A2D = other.CanTxTemp2A2D;
      }
      if (other.CanTxTemp1A2D != 0) {
        CanTxTemp1A2D = other.CanTxTemp1A2D;
      }
      if (other.CanTxSwbattA2D != 0) {
        CanTxSwbattA2D = other.CanTxSwbattA2D;
      }
      if (other.CanTxSupply5VdxA2D != 0) {
        CanTxSupply5VdxA2D = other.CanTxSupply5VdxA2D;
      }
      if (other.CanTxSupply5VaA2D != 0) {
        CanTxSupply5VaA2D = other.CanTxSupply5VaA2D;
      }
      if (other.CanTxSupply3P3VA2D != 0) {
        CanTxSupply3P3VA2D = other.CanTxSupply3P3VA2D;
      }
      if (other.CanTxIgnpA2D != 0) {
        CanTxIgnpA2D = other.CanTxIgnpA2D;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxSupply10VA2D = input.ReadInt32();
            break;
          }
          case 16: {
            CanTxTemp2A2D = input.ReadInt32();
            break;
          }
          case 24: {
            CanTxTemp1A2D = input.ReadInt32();
            break;
          }
          case 32: {
            CanTxSwbattA2D = input.ReadInt32();
            break;
          }
          case 40: {
            CanTxSupply5VdxA2D = input.ReadInt32();
            break;
          }
          case 48: {
            CanTxSupply5VaA2D = input.ReadInt32();
            break;
          }
          case 56: {
            CanTxSupply3P3VA2D = input.ReadInt32();
            break;
          }
          case 64: {
            CanTxIgnpA2D = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Esr_status3_4e2 : pb::IMessage<Esr_status3_4e2> {
    private static readonly pb::MessageParser<Esr_status3_4e2> _parser = new pb::MessageParser<Esr_status3_4e2>(() => new Esr_status3_4e2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status3_4e2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status3_4e2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status3_4e2(Esr_status3_4e2 other) : this() {
      canTxSwVersionPld_ = other.canTxSwVersionPld_;
      canTxSwVersionHost_ = other.canTxSwVersionHost_;
      canTxHwVersion_ = other.canTxHwVersion_;
      canTxInterfaceVersion_ = other.canTxInterfaceVersion_;
      canTxSerialNum_ = other.canTxSerialNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status3_4e2 Clone() {
      return new Esr_status3_4e2(this);
    }

    /// <summary>Field number for the "can_tx_sw_version_pld" field.</summary>
    public const int CanTxSwVersionPldFieldNumber = 1;
    private int canTxSwVersionPld_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSwVersionPld {
      get { return canTxSwVersionPld_; }
      set {
        canTxSwVersionPld_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_sw_version_host" field.</summary>
    public const int CanTxSwVersionHostFieldNumber = 2;
    private int canTxSwVersionHost_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSwVersionHost {
      get { return canTxSwVersionHost_; }
      set {
        canTxSwVersionHost_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_hw_version" field.</summary>
    public const int CanTxHwVersionFieldNumber = 3;
    private int canTxHwVersion_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHwVersion {
      get { return canTxHwVersion_; }
      set {
        canTxHwVersion_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_interface_version" field.</summary>
    public const int CanTxInterfaceVersionFieldNumber = 4;
    private int canTxInterfaceVersion_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxInterfaceVersion {
      get { return canTxInterfaceVersion_; }
      set {
        canTxInterfaceVersion_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_serial_num" field.</summary>
    public const int CanTxSerialNumFieldNumber = 5;
    private int canTxSerialNum_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSerialNum {
      get { return canTxSerialNum_; }
      set {
        canTxSerialNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status3_4e2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status3_4e2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxSwVersionPld != other.CanTxSwVersionPld) return false;
      if (CanTxSwVersionHost != other.CanTxSwVersionHost) return false;
      if (CanTxHwVersion != other.CanTxHwVersion) return false;
      if (CanTxInterfaceVersion != other.CanTxInterfaceVersion) return false;
      if (CanTxSerialNum != other.CanTxSerialNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxSwVersionPld != 0) hash ^= CanTxSwVersionPld.GetHashCode();
      if (CanTxSwVersionHost != 0) hash ^= CanTxSwVersionHost.GetHashCode();
      if (CanTxHwVersion != 0) hash ^= CanTxHwVersion.GetHashCode();
      if (CanTxInterfaceVersion != 0) hash ^= CanTxInterfaceVersion.GetHashCode();
      if (CanTxSerialNum != 0) hash ^= CanTxSerialNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxSwVersionPld != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxSwVersionPld);
      }
      if (CanTxSwVersionHost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanTxSwVersionHost);
      }
      if (CanTxHwVersion != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CanTxHwVersion);
      }
      if (CanTxInterfaceVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxInterfaceVersion);
      }
      if (CanTxSerialNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanTxSerialNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxSwVersionPld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSwVersionPld);
      }
      if (CanTxSwVersionHost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSwVersionHost);
      }
      if (CanTxHwVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHwVersion);
      }
      if (CanTxInterfaceVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxInterfaceVersion);
      }
      if (CanTxSerialNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSerialNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status3_4e2 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxSwVersionPld != 0) {
        CanTxSwVersionPld = other.CanTxSwVersionPld;
      }
      if (other.CanTxSwVersionHost != 0) {
        CanTxSwVersionHost = other.CanTxSwVersionHost;
      }
      if (other.CanTxHwVersion != 0) {
        CanTxHwVersion = other.CanTxHwVersion;
      }
      if (other.CanTxInterfaceVersion != 0) {
        CanTxInterfaceVersion = other.CanTxInterfaceVersion;
      }
      if (other.CanTxSerialNum != 0) {
        CanTxSerialNum = other.CanTxSerialNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxSwVersionPld = input.ReadInt32();
            break;
          }
          case 16: {
            CanTxSwVersionHost = input.ReadInt32();
            break;
          }
          case 24: {
            CanTxHwVersion = input.ReadInt32();
            break;
          }
          case 32: {
            CanTxInterfaceVersion = input.ReadInt32();
            break;
          }
          case 40: {
            CanTxSerialNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Esr_status4_4e3 : pb::IMessage<Esr_status4_4e3> {
    private static readonly pb::MessageParser<Esr_status4_4e3> _parser = new pb::MessageParser<Esr_status4_4e3>(() => new Esr_status4_4e3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status4_4e3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status4_4e3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status4_4e3(Esr_status4_4e3 other) : this() {
      canTxTruckTargetDet_ = other.canTxTruckTargetDet_;
      canTxLrOnlyGratingLobeDet_ = other.canTxLrOnlyGratingLobeDet_;
      canTxSidelobeBlockage_ = other.canTxSidelobeBlockage_;
      canTxPartialBlockage_ = other.canTxPartialBlockage_;
      canTxPathIdAccStat_ = other.canTxPathIdAccStat_;
      canTxMrLrMode_ = other.canTxMrLrMode_;
      canTxAutoAlignAngle_ = other.canTxAutoAlignAngle_;
      canTxRollingCount3_ = other.canTxRollingCount3_;
      canTxPathIdFcwStat_ = other.canTxPathIdFcwStat_;
      canTxPathIdFcwMove_ = other.canTxPathIdFcwMove_;
      canTxPathIdCmbbStat_ = other.canTxPathIdCmbbStat_;
      canTxPathIdCmbbMove_ = other.canTxPathIdCmbbMove_;
      canTxPathIdAcc_ = other.canTxPathIdAcc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status4_4e3 Clone() {
      return new Esr_status4_4e3(this);
    }

    /// <summary>Field number for the "can_tx_truck_target_det" field.</summary>
    public const int CanTxTruckTargetDetFieldNumber = 1;
    private global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_truck_target_detType canTxTruckTargetDet_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_truck_target_detType CanTxTruckTargetDet {
      get { return canTxTruckTargetDet_; }
      set {
        canTxTruckTargetDet_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_lr_only_grating_lobe_det" field.</summary>
    public const int CanTxLrOnlyGratingLobeDetFieldNumber = 2;
    private global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_lr_only_grating_lobe_detType canTxLrOnlyGratingLobeDet_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_lr_only_grating_lobe_detType CanTxLrOnlyGratingLobeDet {
      get { return canTxLrOnlyGratingLobeDet_; }
      set {
        canTxLrOnlyGratingLobeDet_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_sidelobe_blockage" field.</summary>
    public const int CanTxSidelobeBlockageFieldNumber = 3;
    private global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_sidelobe_blockageType canTxSidelobeBlockage_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_sidelobe_blockageType CanTxSidelobeBlockage {
      get { return canTxSidelobeBlockage_; }
      set {
        canTxSidelobeBlockage_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_partial_blockage" field.</summary>
    public const int CanTxPartialBlockageFieldNumber = 4;
    private global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_partial_blockageType canTxPartialBlockage_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_partial_blockageType CanTxPartialBlockage {
      get { return canTxPartialBlockage_; }
      set {
        canTxPartialBlockage_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_path_id_acc_stat" field.</summary>
    public const int CanTxPathIdAccStatFieldNumber = 5;
    private int canTxPathIdAccStat_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdAccStat {
      get { return canTxPathIdAccStat_; }
      set {
        canTxPathIdAccStat_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_mr_lr_mode" field.</summary>
    public const int CanTxMrLrModeFieldNumber = 6;
    private global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_mr_lr_modeType canTxMrLrMode_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_mr_lr_modeType CanTxMrLrMode {
      get { return canTxMrLrMode_; }
      set {
        canTxMrLrMode_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_auto_align_angle" field.</summary>
    public const int CanTxAutoAlignAngleFieldNumber = 7;
    private double canTxAutoAlignAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxAutoAlignAngle {
      get { return canTxAutoAlignAngle_; }
      set {
        canTxAutoAlignAngle_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_rolling_count_3" field.</summary>
    public const int CanTxRollingCount3FieldNumber = 8;
    private int canTxRollingCount3_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxRollingCount3 {
      get { return canTxRollingCount3_; }
      set {
        canTxRollingCount3_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_path_id_fcw_stat" field.</summary>
    public const int CanTxPathIdFcwStatFieldNumber = 9;
    private int canTxPathIdFcwStat_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdFcwStat {
      get { return canTxPathIdFcwStat_; }
      set {
        canTxPathIdFcwStat_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_path_id_fcw_move" field.</summary>
    public const int CanTxPathIdFcwMoveFieldNumber = 10;
    private int canTxPathIdFcwMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdFcwMove {
      get { return canTxPathIdFcwMove_; }
      set {
        canTxPathIdFcwMove_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_path_id_cmbb_stat" field.</summary>
    public const int CanTxPathIdCmbbStatFieldNumber = 11;
    private int canTxPathIdCmbbStat_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdCmbbStat {
      get { return canTxPathIdCmbbStat_; }
      set {
        canTxPathIdCmbbStat_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_path_id_cmbb_move" field.</summary>
    public const int CanTxPathIdCmbbMoveFieldNumber = 12;
    private int canTxPathIdCmbbMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdCmbbMove {
      get { return canTxPathIdCmbbMove_; }
      set {
        canTxPathIdCmbbMove_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_path_id_acc" field.</summary>
    public const int CanTxPathIdAccFieldNumber = 13;
    private int canTxPathIdAcc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxPathIdAcc {
      get { return canTxPathIdAcc_; }
      set {
        canTxPathIdAcc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status4_4e3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status4_4e3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxTruckTargetDet != other.CanTxTruckTargetDet) return false;
      if (CanTxLrOnlyGratingLobeDet != other.CanTxLrOnlyGratingLobeDet) return false;
      if (CanTxSidelobeBlockage != other.CanTxSidelobeBlockage) return false;
      if (CanTxPartialBlockage != other.CanTxPartialBlockage) return false;
      if (CanTxPathIdAccStat != other.CanTxPathIdAccStat) return false;
      if (CanTxMrLrMode != other.CanTxMrLrMode) return false;
      if (CanTxAutoAlignAngle != other.CanTxAutoAlignAngle) return false;
      if (CanTxRollingCount3 != other.CanTxRollingCount3) return false;
      if (CanTxPathIdFcwStat != other.CanTxPathIdFcwStat) return false;
      if (CanTxPathIdFcwMove != other.CanTxPathIdFcwMove) return false;
      if (CanTxPathIdCmbbStat != other.CanTxPathIdCmbbStat) return false;
      if (CanTxPathIdCmbbMove != other.CanTxPathIdCmbbMove) return false;
      if (CanTxPathIdAcc != other.CanTxPathIdAcc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxTruckTargetDet != 0) hash ^= CanTxTruckTargetDet.GetHashCode();
      if (CanTxLrOnlyGratingLobeDet != 0) hash ^= CanTxLrOnlyGratingLobeDet.GetHashCode();
      if (CanTxSidelobeBlockage != 0) hash ^= CanTxSidelobeBlockage.GetHashCode();
      if (CanTxPartialBlockage != 0) hash ^= CanTxPartialBlockage.GetHashCode();
      if (CanTxPathIdAccStat != 0) hash ^= CanTxPathIdAccStat.GetHashCode();
      if (CanTxMrLrMode != 0) hash ^= CanTxMrLrMode.GetHashCode();
      if (CanTxAutoAlignAngle != 0D) hash ^= CanTxAutoAlignAngle.GetHashCode();
      if (CanTxRollingCount3 != 0) hash ^= CanTxRollingCount3.GetHashCode();
      if (CanTxPathIdFcwStat != 0) hash ^= CanTxPathIdFcwStat.GetHashCode();
      if (CanTxPathIdFcwMove != 0) hash ^= CanTxPathIdFcwMove.GetHashCode();
      if (CanTxPathIdCmbbStat != 0) hash ^= CanTxPathIdCmbbStat.GetHashCode();
      if (CanTxPathIdCmbbMove != 0) hash ^= CanTxPathIdCmbbMove.GetHashCode();
      if (CanTxPathIdAcc != 0) hash ^= CanTxPathIdAcc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxTruckTargetDet != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CanTxTruckTargetDet);
      }
      if (CanTxLrOnlyGratingLobeDet != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CanTxLrOnlyGratingLobeDet);
      }
      if (CanTxSidelobeBlockage != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CanTxSidelobeBlockage);
      }
      if (CanTxPartialBlockage != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CanTxPartialBlockage);
      }
      if (CanTxPathIdAccStat != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanTxPathIdAccStat);
      }
      if (CanTxMrLrMode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CanTxMrLrMode);
      }
      if (CanTxAutoAlignAngle != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(CanTxAutoAlignAngle);
      }
      if (CanTxRollingCount3 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CanTxRollingCount3);
      }
      if (CanTxPathIdFcwStat != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CanTxPathIdFcwStat);
      }
      if (CanTxPathIdFcwMove != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CanTxPathIdFcwMove);
      }
      if (CanTxPathIdCmbbStat != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CanTxPathIdCmbbStat);
      }
      if (CanTxPathIdCmbbMove != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CanTxPathIdCmbbMove);
      }
      if (CanTxPathIdAcc != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CanTxPathIdAcc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxTruckTargetDet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxTruckTargetDet);
      }
      if (CanTxLrOnlyGratingLobeDet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxLrOnlyGratingLobeDet);
      }
      if (CanTxSidelobeBlockage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxSidelobeBlockage);
      }
      if (CanTxPartialBlockage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxPartialBlockage);
      }
      if (CanTxPathIdAccStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdAccStat);
      }
      if (CanTxMrLrMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxMrLrMode);
      }
      if (CanTxAutoAlignAngle != 0D) {
        size += 1 + 8;
      }
      if (CanTxRollingCount3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxRollingCount3);
      }
      if (CanTxPathIdFcwStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdFcwStat);
      }
      if (CanTxPathIdFcwMove != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdFcwMove);
      }
      if (CanTxPathIdCmbbStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdCmbbStat);
      }
      if (CanTxPathIdCmbbMove != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdCmbbMove);
      }
      if (CanTxPathIdAcc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxPathIdAcc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status4_4e3 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxTruckTargetDet != 0) {
        CanTxTruckTargetDet = other.CanTxTruckTargetDet;
      }
      if (other.CanTxLrOnlyGratingLobeDet != 0) {
        CanTxLrOnlyGratingLobeDet = other.CanTxLrOnlyGratingLobeDet;
      }
      if (other.CanTxSidelobeBlockage != 0) {
        CanTxSidelobeBlockage = other.CanTxSidelobeBlockage;
      }
      if (other.CanTxPartialBlockage != 0) {
        CanTxPartialBlockage = other.CanTxPartialBlockage;
      }
      if (other.CanTxPathIdAccStat != 0) {
        CanTxPathIdAccStat = other.CanTxPathIdAccStat;
      }
      if (other.CanTxMrLrMode != 0) {
        CanTxMrLrMode = other.CanTxMrLrMode;
      }
      if (other.CanTxAutoAlignAngle != 0D) {
        CanTxAutoAlignAngle = other.CanTxAutoAlignAngle;
      }
      if (other.CanTxRollingCount3 != 0) {
        CanTxRollingCount3 = other.CanTxRollingCount3;
      }
      if (other.CanTxPathIdFcwStat != 0) {
        CanTxPathIdFcwStat = other.CanTxPathIdFcwStat;
      }
      if (other.CanTxPathIdFcwMove != 0) {
        CanTxPathIdFcwMove = other.CanTxPathIdFcwMove;
      }
      if (other.CanTxPathIdCmbbStat != 0) {
        CanTxPathIdCmbbStat = other.CanTxPathIdCmbbStat;
      }
      if (other.CanTxPathIdCmbbMove != 0) {
        CanTxPathIdCmbbMove = other.CanTxPathIdCmbbMove;
      }
      if (other.CanTxPathIdAcc != 0) {
        CanTxPathIdAcc = other.CanTxPathIdAcc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            canTxTruckTargetDet_ = (global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_truck_target_detType) input.ReadEnum();
            break;
          }
          case 16: {
            canTxLrOnlyGratingLobeDet_ = (global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_lr_only_grating_lobe_detType) input.ReadEnum();
            break;
          }
          case 24: {
            canTxSidelobeBlockage_ = (global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_sidelobe_blockageType) input.ReadEnum();
            break;
          }
          case 32: {
            canTxPartialBlockage_ = (global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_partial_blockageType) input.ReadEnum();
            break;
          }
          case 40: {
            CanTxPathIdAccStat = input.ReadInt32();
            break;
          }
          case 48: {
            canTxMrLrMode_ = (global::Apollo.Drivers.Esr_status4_4e3.Types.Can_tx_mr_lr_modeType) input.ReadEnum();
            break;
          }
          case 57: {
            CanTxAutoAlignAngle = input.ReadDouble();
            break;
          }
          case 64: {
            CanTxRollingCount3 = input.ReadInt32();
            break;
          }
          case 72: {
            CanTxPathIdFcwStat = input.ReadInt32();
            break;
          }
          case 80: {
            CanTxPathIdFcwMove = input.ReadInt32();
            break;
          }
          case 88: {
            CanTxPathIdCmbbStat = input.ReadInt32();
            break;
          }
          case 96: {
            CanTxPathIdCmbbMove = input.ReadInt32();
            break;
          }
          case 104: {
            CanTxPathIdAcc = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Esr_status4_4e3 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_tx_truck_target_detType {
        [pbr::OriginalName("CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED")] CanTxTruckTargetDetNotDetected = 0,
        [pbr::OriginalName("CAN_TX_TRUCK_TARGET_DET_DETECTED")] CanTxTruckTargetDetDetected = 1,
      }

      public enum Can_tx_lr_only_grating_lobe_detType {
        [pbr::OriginalName("CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_DETECTED")] CanTxLrOnlyGratingLobeDetNotDetected = 0,
        [pbr::OriginalName("CAN_TX_LR_ONLY_GRATING_LOBE_DET_DETECTED")] CanTxLrOnlyGratingLobeDetDetected = 1,
      }

      public enum Can_tx_sidelobe_blockageType {
        [pbr::OriginalName("CAN_TX_SIDELOBE_BLOCKAGE_OFF")] CanTxSidelobeBlockageOff = 0,
        [pbr::OriginalName("CAN_TX_SIDELOBE_BLOCKAGE_ON")] CanTxSidelobeBlockageOn = 1,
      }

      public enum Can_tx_partial_blockageType {
        [pbr::OriginalName("CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED")] CanTxPartialBlockageNotBlocked = 0,
        [pbr::OriginalName("CAN_TX_PARTIAL_BLOCKAGE_BLOCKED")] CanTxPartialBlockageBlocked = 1,
      }

      public enum Can_tx_mr_lr_modeType {
        [pbr::OriginalName("CAN_TX_MR_LR_MODE_RESERVED")] CanTxMrLrModeReserved = 0,
        [pbr::OriginalName("CAN_TX_MR_LR_MODE_OUTPUT_ONLY_MEDIUM_RANGE_TRACKS")] CanTxMrLrModeOutputOnlyMediumRangeTracks = 1,
        [pbr::OriginalName("CAN_TX_MR_LR_MODE_OUTPUT_ONLY_LONG_RANGE_TRACKS")] CanTxMrLrModeOutputOnlyLongRangeTracks = 2,
        [pbr::OriginalName("CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_LONG")] CanTxMrLrModeOutputAllMediumRangeAndLong = 3,
      }

    }
    #endregion

  }

  public sealed partial class Esr_trackmotionpower_540 : pb::IMessage<Esr_trackmotionpower_540> {
    private static readonly pb::MessageParser<Esr_trackmotionpower_540> _parser = new pb::MessageParser<Esr_trackmotionpower_540>(() => new Esr_trackmotionpower_540());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_trackmotionpower_540> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_trackmotionpower_540() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_trackmotionpower_540(Esr_trackmotionpower_540 other) : this() {
      canTxTrackRollingCount2_ = other.canTxTrackRollingCount2_;
      canTxTrackCanIdGroup_ = other.canTxTrackCanIdGroup_;
      canTxTrackMotionPower_ = other.canTxTrackMotionPower_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_trackmotionpower_540 Clone() {
      return new Esr_trackmotionpower_540(this);
    }

    /// <summary>Field number for the "can_tx_track_rolling_count_2" field.</summary>
    public const int CanTxTrackRollingCount2FieldNumber = 1;
    private bool canTxTrackRollingCount2_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanTxTrackRollingCount2 {
      get { return canTxTrackRollingCount2_; }
      set {
        canTxTrackRollingCount2_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_can_id_group" field.</summary>
    public const int CanTxTrackCanIdGroupFieldNumber = 2;
    private int canTxTrackCanIdGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxTrackCanIdGroup {
      get { return canTxTrackCanIdGroup_; }
      set {
        canTxTrackCanIdGroup_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_motion_power" field.</summary>
    public const int CanTxTrackMotionPowerFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Esr_trackmotionpower_540.Types.Motionpower> _repeated_canTxTrackMotionPower_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Drivers.Esr_trackmotionpower_540.Types.Motionpower.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Esr_trackmotionpower_540.Types.Motionpower> canTxTrackMotionPower_ = new pbc::RepeatedField<global::Apollo.Drivers.Esr_trackmotionpower_540.Types.Motionpower>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Esr_trackmotionpower_540.Types.Motionpower> CanTxTrackMotionPower {
      get { return canTxTrackMotionPower_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_trackmotionpower_540);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_trackmotionpower_540 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxTrackRollingCount2 != other.CanTxTrackRollingCount2) return false;
      if (CanTxTrackCanIdGroup != other.CanTxTrackCanIdGroup) return false;
      if(!canTxTrackMotionPower_.Equals(other.canTxTrackMotionPower_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxTrackRollingCount2 != false) hash ^= CanTxTrackRollingCount2.GetHashCode();
      if (CanTxTrackCanIdGroup != 0) hash ^= CanTxTrackCanIdGroup.GetHashCode();
      hash ^= canTxTrackMotionPower_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxTrackRollingCount2 != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanTxTrackRollingCount2);
      }
      if (CanTxTrackCanIdGroup != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanTxTrackCanIdGroup);
      }
      canTxTrackMotionPower_.WriteTo(output, _repeated_canTxTrackMotionPower_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxTrackRollingCount2 != false) {
        size += 1 + 1;
      }
      if (CanTxTrackCanIdGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxTrackCanIdGroup);
      }
      size += canTxTrackMotionPower_.CalculateSize(_repeated_canTxTrackMotionPower_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_trackmotionpower_540 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxTrackRollingCount2 != false) {
        CanTxTrackRollingCount2 = other.CanTxTrackRollingCount2;
      }
      if (other.CanTxTrackCanIdGroup != 0) {
        CanTxTrackCanIdGroup = other.CanTxTrackCanIdGroup;
      }
      canTxTrackMotionPower_.Add(other.canTxTrackMotionPower_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxTrackRollingCount2 = input.ReadBool();
            break;
          }
          case 16: {
            CanTxTrackCanIdGroup = input.ReadInt32();
            break;
          }
          case 26: {
            canTxTrackMotionPower_.AddEntriesFrom(input, _repeated_canTxTrackMotionPower_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Esr_trackmotionpower_540 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Motionpower : pb::IMessage<Motionpower> {
        private static readonly pb::MessageParser<Motionpower> _parser = new pb::MessageParser<Motionpower>(() => new Motionpower());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Motionpower> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Drivers.Esr_trackmotionpower_540.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Motionpower() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Motionpower(Motionpower other) : this() {
          canTxTrackMoving_ = other.canTxTrackMoving_;
          canTxTrackMovingFast_ = other.canTxTrackMovingFast_;
          canTxTrackMovingSlow_ = other.canTxTrackMovingSlow_;
          canTxTrackPower_ = other.canTxTrackPower_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Motionpower Clone() {
          return new Motionpower(this);
        }

        /// <summary>Field number for the "can_tx_track_moving" field.</summary>
        public const int CanTxTrackMovingFieldNumber = 1;
        private bool canTxTrackMoving_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CanTxTrackMoving {
          get { return canTxTrackMoving_; }
          set {
            canTxTrackMoving_ = value;
          }
        }

        /// <summary>Field number for the "can_tx_track_moving_fast" field.</summary>
        public const int CanTxTrackMovingFastFieldNumber = 2;
        private bool canTxTrackMovingFast_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CanTxTrackMovingFast {
          get { return canTxTrackMovingFast_; }
          set {
            canTxTrackMovingFast_ = value;
          }
        }

        /// <summary>Field number for the "can_tx_track_moving_slow" field.</summary>
        public const int CanTxTrackMovingSlowFieldNumber = 3;
        private bool canTxTrackMovingSlow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CanTxTrackMovingSlow {
          get { return canTxTrackMovingSlow_; }
          set {
            canTxTrackMovingSlow_ = value;
          }
        }

        /// <summary>Field number for the "can_tx_track_power" field.</summary>
        public const int CanTxTrackPowerFieldNumber = 4;
        private int canTxTrackPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CanTxTrackPower {
          get { return canTxTrackPower_; }
          set {
            canTxTrackPower_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Motionpower);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Motionpower other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CanTxTrackMoving != other.CanTxTrackMoving) return false;
          if (CanTxTrackMovingFast != other.CanTxTrackMovingFast) return false;
          if (CanTxTrackMovingSlow != other.CanTxTrackMovingSlow) return false;
          if (CanTxTrackPower != other.CanTxTrackPower) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CanTxTrackMoving != false) hash ^= CanTxTrackMoving.GetHashCode();
          if (CanTxTrackMovingFast != false) hash ^= CanTxTrackMovingFast.GetHashCode();
          if (CanTxTrackMovingSlow != false) hash ^= CanTxTrackMovingSlow.GetHashCode();
          if (CanTxTrackPower != 0) hash ^= CanTxTrackPower.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CanTxTrackMoving != false) {
            output.WriteRawTag(8);
            output.WriteBool(CanTxTrackMoving);
          }
          if (CanTxTrackMovingFast != false) {
            output.WriteRawTag(16);
            output.WriteBool(CanTxTrackMovingFast);
          }
          if (CanTxTrackMovingSlow != false) {
            output.WriteRawTag(24);
            output.WriteBool(CanTxTrackMovingSlow);
          }
          if (CanTxTrackPower != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(CanTxTrackPower);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CanTxTrackMoving != false) {
            size += 1 + 1;
          }
          if (CanTxTrackMovingFast != false) {
            size += 1 + 1;
          }
          if (CanTxTrackMovingSlow != false) {
            size += 1 + 1;
          }
          if (CanTxTrackPower != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxTrackPower);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Motionpower other) {
          if (other == null) {
            return;
          }
          if (other.CanTxTrackMoving != false) {
            CanTxTrackMoving = other.CanTxTrackMoving;
          }
          if (other.CanTxTrackMovingFast != false) {
            CanTxTrackMovingFast = other.CanTxTrackMovingFast;
          }
          if (other.CanTxTrackMovingSlow != false) {
            CanTxTrackMovingSlow = other.CanTxTrackMovingSlow;
          }
          if (other.CanTxTrackPower != 0) {
            CanTxTrackPower = other.CanTxTrackPower;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                CanTxTrackMoving = input.ReadBool();
                break;
              }
              case 16: {
                CanTxTrackMovingFast = input.ReadBool();
                break;
              }
              case 24: {
                CanTxTrackMovingSlow = input.ReadBool();
                break;
              }
              case 32: {
                CanTxTrackPower = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Acm_inst_req_7e0 : pb::IMessage<Acm_inst_req_7e0> {
    private static readonly pb::MessageParser<Acm_inst_req_7e0> _parser = new pb::MessageParser<Acm_inst_req_7e0>(() => new Acm_inst_req_7e0());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Acm_inst_req_7e0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acm_inst_req_7e0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acm_inst_req_7e0(Acm_inst_req_7e0 other) : this() {
      commandCtr_ = other.commandCtr_;
      commandCode_ = other.commandCode_;
      ccWord2_ = other.ccWord2_;
      ccWord1_ = other.ccWord1_;
      ccByte2_ = other.ccByte2_;
      ccByte1_ = other.ccByte1_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acm_inst_req_7e0 Clone() {
      return new Acm_inst_req_7e0(this);
    }

    /// <summary>Field number for the "command_ctr" field.</summary>
    public const int CommandCtrFieldNumber = 1;
    private int commandCtr_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommandCtr {
      get { return commandCtr_; }
      set {
        commandCtr_ = value;
      }
    }

    /// <summary>Field number for the "command_code" field.</summary>
    public const int CommandCodeFieldNumber = 2;
    private int commandCode_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommandCode {
      get { return commandCode_; }
      set {
        commandCode_ = value;
      }
    }

    /// <summary>Field number for the "cc_word_2" field.</summary>
    public const int CcWord2FieldNumber = 3;
    private int ccWord2_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CcWord2 {
      get { return ccWord2_; }
      set {
        ccWord2_ = value;
      }
    }

    /// <summary>Field number for the "cc_word_1" field.</summary>
    public const int CcWord1FieldNumber = 4;
    private int ccWord1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CcWord1 {
      get { return ccWord1_; }
      set {
        ccWord1_ = value;
      }
    }

    /// <summary>Field number for the "cc_byte_2" field.</summary>
    public const int CcByte2FieldNumber = 5;
    private int ccByte2_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CcByte2 {
      get { return ccByte2_; }
      set {
        ccByte2_ = value;
      }
    }

    /// <summary>Field number for the "cc_byte_1" field.</summary>
    public const int CcByte1FieldNumber = 6;
    private int ccByte1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CcByte1 {
      get { return ccByte1_; }
      set {
        ccByte1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Acm_inst_req_7e0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Acm_inst_req_7e0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommandCtr != other.CommandCtr) return false;
      if (CommandCode != other.CommandCode) return false;
      if (CcWord2 != other.CcWord2) return false;
      if (CcWord1 != other.CcWord1) return false;
      if (CcByte2 != other.CcByte2) return false;
      if (CcByte1 != other.CcByte1) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommandCtr != 0) hash ^= CommandCtr.GetHashCode();
      if (CommandCode != 0) hash ^= CommandCode.GetHashCode();
      if (CcWord2 != 0) hash ^= CcWord2.GetHashCode();
      if (CcWord1 != 0) hash ^= CcWord1.GetHashCode();
      if (CcByte2 != 0) hash ^= CcByte2.GetHashCode();
      if (CcByte1 != 0) hash ^= CcByte1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommandCtr != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CommandCtr);
      }
      if (CommandCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CommandCode);
      }
      if (CcWord2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CcWord2);
      }
      if (CcWord1 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CcWord1);
      }
      if (CcByte2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CcByte2);
      }
      if (CcByte1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CcByte1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommandCtr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommandCtr);
      }
      if (CommandCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommandCode);
      }
      if (CcWord2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CcWord2);
      }
      if (CcWord1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CcWord1);
      }
      if (CcByte2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CcByte2);
      }
      if (CcByte1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CcByte1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Acm_inst_req_7e0 other) {
      if (other == null) {
        return;
      }
      if (other.CommandCtr != 0) {
        CommandCtr = other.CommandCtr;
      }
      if (other.CommandCode != 0) {
        CommandCode = other.CommandCode;
      }
      if (other.CcWord2 != 0) {
        CcWord2 = other.CcWord2;
      }
      if (other.CcWord1 != 0) {
        CcWord1 = other.CcWord1;
      }
      if (other.CcByte2 != 0) {
        CcByte2 = other.CcByte2;
      }
      if (other.CcByte1 != 0) {
        CcByte1 = other.CcByte1;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommandCtr = input.ReadInt32();
            break;
          }
          case 16: {
            CommandCode = input.ReadInt32();
            break;
          }
          case 24: {
            CcWord2 = input.ReadInt32();
            break;
          }
          case 32: {
            CcWord1 = input.ReadInt32();
            break;
          }
          case 40: {
            CcByte2 = input.ReadInt32();
            break;
          }
          case 48: {
            CcByte1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Esr_track01_500 : pb::IMessage<Esr_track01_500> {
    private static readonly pb::MessageParser<Esr_track01_500> _parser = new pb::MessageParser<Esr_track01_500>(() => new Esr_track01_500());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_track01_500> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_track01_500() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_track01_500(Esr_track01_500 other) : this() {
      canTxTrackGroupingChanged_ = other.canTxTrackGroupingChanged_;
      canTxTrackOncoming_ = other.canTxTrackOncoming_;
      canTxTrackLatRate_ = other.canTxTrackLatRate_;
      canTxTrackBridgeObject_ = other.canTxTrackBridgeObject_;
      canTxTrackWidth_ = other.canTxTrackWidth_;
      canTxTrackStatus_ = other.canTxTrackStatus_;
      canTxTrackRollingCount_ = other.canTxTrackRollingCount_;
      canTxTrackRangeRate_ = other.canTxTrackRangeRate_;
      canTxTrackRangeAccel_ = other.canTxTrackRangeAccel_;
      canTxTrackRange_ = other.canTxTrackRange_;
      canTxTrackMedRangeMode_ = other.canTxTrackMedRangeMode_;
      canTxTrackAngle_ = other.canTxTrackAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_track01_500 Clone() {
      return new Esr_track01_500(this);
    }

    /// <summary>Field number for the "can_tx_track_grouping_changed" field.</summary>
    public const int CanTxTrackGroupingChangedFieldNumber = 1;
    private global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_grouping_changedType canTxTrackGroupingChanged_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_grouping_changedType CanTxTrackGroupingChanged {
      get { return canTxTrackGroupingChanged_; }
      set {
        canTxTrackGroupingChanged_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_oncoming" field.</summary>
    public const int CanTxTrackOncomingFieldNumber = 2;
    private global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_oncomingType canTxTrackOncoming_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_oncomingType CanTxTrackOncoming {
      get { return canTxTrackOncoming_; }
      set {
        canTxTrackOncoming_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_lat_rate" field.</summary>
    public const int CanTxTrackLatRateFieldNumber = 3;
    private double canTxTrackLatRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxTrackLatRate {
      get { return canTxTrackLatRate_; }
      set {
        canTxTrackLatRate_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_bridge_object" field.</summary>
    public const int CanTxTrackBridgeObjectFieldNumber = 4;
    private global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_bridge_objectType canTxTrackBridgeObject_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_bridge_objectType CanTxTrackBridgeObject {
      get { return canTxTrackBridgeObject_; }
      set {
        canTxTrackBridgeObject_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_width" field.</summary>
    public const int CanTxTrackWidthFieldNumber = 5;
    private double canTxTrackWidth_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxTrackWidth {
      get { return canTxTrackWidth_; }
      set {
        canTxTrackWidth_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_status" field.</summary>
    public const int CanTxTrackStatusFieldNumber = 6;
    private global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_statusType canTxTrackStatus_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_statusType CanTxTrackStatus {
      get { return canTxTrackStatus_; }
      set {
        canTxTrackStatus_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_rolling_count" field.</summary>
    public const int CanTxTrackRollingCountFieldNumber = 7;
    private bool canTxTrackRollingCount_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanTxTrackRollingCount {
      get { return canTxTrackRollingCount_; }
      set {
        canTxTrackRollingCount_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_range_rate" field.</summary>
    public const int CanTxTrackRangeRateFieldNumber = 8;
    private double canTxTrackRangeRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxTrackRangeRate {
      get { return canTxTrackRangeRate_; }
      set {
        canTxTrackRangeRate_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_range_accel" field.</summary>
    public const int CanTxTrackRangeAccelFieldNumber = 9;
    private double canTxTrackRangeAccel_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxTrackRangeAccel {
      get { return canTxTrackRangeAccel_; }
      set {
        canTxTrackRangeAccel_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_range" field.</summary>
    public const int CanTxTrackRangeFieldNumber = 10;
    private double canTxTrackRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxTrackRange {
      get { return canTxTrackRange_; }
      set {
        canTxTrackRange_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_med_range_mode" field.</summary>
    public const int CanTxTrackMedRangeModeFieldNumber = 11;
    private global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_med_range_modeType canTxTrackMedRangeMode_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_med_range_modeType CanTxTrackMedRangeMode {
      get { return canTxTrackMedRangeMode_; }
      set {
        canTxTrackMedRangeMode_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_track_angle" field.</summary>
    public const int CanTxTrackAngleFieldNumber = 12;
    private double canTxTrackAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxTrackAngle {
      get { return canTxTrackAngle_; }
      set {
        canTxTrackAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_track01_500);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_track01_500 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxTrackGroupingChanged != other.CanTxTrackGroupingChanged) return false;
      if (CanTxTrackOncoming != other.CanTxTrackOncoming) return false;
      if (CanTxTrackLatRate != other.CanTxTrackLatRate) return false;
      if (CanTxTrackBridgeObject != other.CanTxTrackBridgeObject) return false;
      if (CanTxTrackWidth != other.CanTxTrackWidth) return false;
      if (CanTxTrackStatus != other.CanTxTrackStatus) return false;
      if (CanTxTrackRollingCount != other.CanTxTrackRollingCount) return false;
      if (CanTxTrackRangeRate != other.CanTxTrackRangeRate) return false;
      if (CanTxTrackRangeAccel != other.CanTxTrackRangeAccel) return false;
      if (CanTxTrackRange != other.CanTxTrackRange) return false;
      if (CanTxTrackMedRangeMode != other.CanTxTrackMedRangeMode) return false;
      if (CanTxTrackAngle != other.CanTxTrackAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxTrackGroupingChanged != 0) hash ^= CanTxTrackGroupingChanged.GetHashCode();
      if (CanTxTrackOncoming != 0) hash ^= CanTxTrackOncoming.GetHashCode();
      if (CanTxTrackLatRate != 0D) hash ^= CanTxTrackLatRate.GetHashCode();
      if (CanTxTrackBridgeObject != 0) hash ^= CanTxTrackBridgeObject.GetHashCode();
      if (CanTxTrackWidth != 0D) hash ^= CanTxTrackWidth.GetHashCode();
      if (CanTxTrackStatus != 0) hash ^= CanTxTrackStatus.GetHashCode();
      if (CanTxTrackRollingCount != false) hash ^= CanTxTrackRollingCount.GetHashCode();
      if (CanTxTrackRangeRate != 0D) hash ^= CanTxTrackRangeRate.GetHashCode();
      if (CanTxTrackRangeAccel != 0D) hash ^= CanTxTrackRangeAccel.GetHashCode();
      if (CanTxTrackRange != 0D) hash ^= CanTxTrackRange.GetHashCode();
      if (CanTxTrackMedRangeMode != 0) hash ^= CanTxTrackMedRangeMode.GetHashCode();
      if (CanTxTrackAngle != 0D) hash ^= CanTxTrackAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxTrackGroupingChanged != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CanTxTrackGroupingChanged);
      }
      if (CanTxTrackOncoming != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CanTxTrackOncoming);
      }
      if (CanTxTrackLatRate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanTxTrackLatRate);
      }
      if (CanTxTrackBridgeObject != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CanTxTrackBridgeObject);
      }
      if (CanTxTrackWidth != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CanTxTrackWidth);
      }
      if (CanTxTrackStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CanTxTrackStatus);
      }
      if (CanTxTrackRollingCount != false) {
        output.WriteRawTag(56);
        output.WriteBool(CanTxTrackRollingCount);
      }
      if (CanTxTrackRangeRate != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CanTxTrackRangeRate);
      }
      if (CanTxTrackRangeAccel != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CanTxTrackRangeAccel);
      }
      if (CanTxTrackRange != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(CanTxTrackRange);
      }
      if (CanTxTrackMedRangeMode != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) CanTxTrackMedRangeMode);
      }
      if (CanTxTrackAngle != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(CanTxTrackAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxTrackGroupingChanged != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxTrackGroupingChanged);
      }
      if (CanTxTrackOncoming != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxTrackOncoming);
      }
      if (CanTxTrackLatRate != 0D) {
        size += 1 + 8;
      }
      if (CanTxTrackBridgeObject != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxTrackBridgeObject);
      }
      if (CanTxTrackWidth != 0D) {
        size += 1 + 8;
      }
      if (CanTxTrackStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxTrackStatus);
      }
      if (CanTxTrackRollingCount != false) {
        size += 1 + 1;
      }
      if (CanTxTrackRangeRate != 0D) {
        size += 1 + 8;
      }
      if (CanTxTrackRangeAccel != 0D) {
        size += 1 + 8;
      }
      if (CanTxTrackRange != 0D) {
        size += 1 + 8;
      }
      if (CanTxTrackMedRangeMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxTrackMedRangeMode);
      }
      if (CanTxTrackAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_track01_500 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxTrackGroupingChanged != 0) {
        CanTxTrackGroupingChanged = other.CanTxTrackGroupingChanged;
      }
      if (other.CanTxTrackOncoming != 0) {
        CanTxTrackOncoming = other.CanTxTrackOncoming;
      }
      if (other.CanTxTrackLatRate != 0D) {
        CanTxTrackLatRate = other.CanTxTrackLatRate;
      }
      if (other.CanTxTrackBridgeObject != 0) {
        CanTxTrackBridgeObject = other.CanTxTrackBridgeObject;
      }
      if (other.CanTxTrackWidth != 0D) {
        CanTxTrackWidth = other.CanTxTrackWidth;
      }
      if (other.CanTxTrackStatus != 0) {
        CanTxTrackStatus = other.CanTxTrackStatus;
      }
      if (other.CanTxTrackRollingCount != false) {
        CanTxTrackRollingCount = other.CanTxTrackRollingCount;
      }
      if (other.CanTxTrackRangeRate != 0D) {
        CanTxTrackRangeRate = other.CanTxTrackRangeRate;
      }
      if (other.CanTxTrackRangeAccel != 0D) {
        CanTxTrackRangeAccel = other.CanTxTrackRangeAccel;
      }
      if (other.CanTxTrackRange != 0D) {
        CanTxTrackRange = other.CanTxTrackRange;
      }
      if (other.CanTxTrackMedRangeMode != 0) {
        CanTxTrackMedRangeMode = other.CanTxTrackMedRangeMode;
      }
      if (other.CanTxTrackAngle != 0D) {
        CanTxTrackAngle = other.CanTxTrackAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            canTxTrackGroupingChanged_ = (global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_grouping_changedType) input.ReadEnum();
            break;
          }
          case 16: {
            canTxTrackOncoming_ = (global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_oncomingType) input.ReadEnum();
            break;
          }
          case 25: {
            CanTxTrackLatRate = input.ReadDouble();
            break;
          }
          case 32: {
            canTxTrackBridgeObject_ = (global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_bridge_objectType) input.ReadEnum();
            break;
          }
          case 41: {
            CanTxTrackWidth = input.ReadDouble();
            break;
          }
          case 48: {
            canTxTrackStatus_ = (global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_statusType) input.ReadEnum();
            break;
          }
          case 56: {
            CanTxTrackRollingCount = input.ReadBool();
            break;
          }
          case 65: {
            CanTxTrackRangeRate = input.ReadDouble();
            break;
          }
          case 73: {
            CanTxTrackRangeAccel = input.ReadDouble();
            break;
          }
          case 81: {
            CanTxTrackRange = input.ReadDouble();
            break;
          }
          case 88: {
            canTxTrackMedRangeMode_ = (global::Apollo.Drivers.Esr_track01_500.Types.Can_tx_track_med_range_modeType) input.ReadEnum();
            break;
          }
          case 97: {
            CanTxTrackAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Esr_track01_500 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_tx_track_grouping_changedType {
        [pbr::OriginalName("CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGUNCHANGED")] CanTxTrackGroupingChangedGroupingunchanged = 0,
        [pbr::OriginalName("CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGCHANGED")] CanTxTrackGroupingChangedGroupingchanged = 1,
      }

      public enum Can_tx_track_oncomingType {
        [pbr::OriginalName("CAN_TX_TRACK_ONCOMING_NOTONCOMING")] CanTxTrackOncomingNotoncoming = 0,
        [pbr::OriginalName("CAN_TX_TRACK_ONCOMING_ONCOMING")] CanTxTrackOncomingOncoming = 1,
      }

      public enum Can_tx_track_bridge_objectType {
        [pbr::OriginalName("CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE")] CanTxTrackBridgeObjectNotBridge = 0,
        [pbr::OriginalName("CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE")] CanTxTrackBridgeObjectBridge = 1,
      }

      public enum Can_tx_track_statusType {
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_NO_TARGET")] CanTxTrackStatusNoTarget = 0,
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_NEW_TARGET")] CanTxTrackStatusNewTarget = 1,
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_NEW_UPDATED_TARGET")] CanTxTrackStatusNewUpdatedTarget = 2,
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_UPDATED_TARGET")] CanTxTrackStatusUpdatedTarget = 3,
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_COASTED_TARGET")] CanTxTrackStatusCoastedTarget = 4,
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_MERGED_TARGET")] CanTxTrackStatusMergedTarget = 5,
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_INVALID_COASTED_TARGET")] CanTxTrackStatusInvalidCoastedTarget = 6,
        [pbr::OriginalName("CAN_TX_TRACK_STATUS_NEW_COASTED_TARGET")] CanTxTrackStatusNewCoastedTarget = 7,
      }

      public enum Can_tx_track_med_range_modeType {
        [pbr::OriginalName("CAN_TX_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE")] CanTxTrackMedRangeModeNoMrLrUpdate = 0,
        [pbr::OriginalName("CAN_TX_TRACK_MED_RANGE_MODE_MR_UPDATE_ONLY")] CanTxTrackMedRangeModeMrUpdateOnly = 1,
        [pbr::OriginalName("CAN_TX_TRACK_MED_RANGE_MODE_LR_UPDATE_ONLY")] CanTxTrackMedRangeModeLrUpdateOnly = 2,
        [pbr::OriginalName("CAN_TX_TRACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE")] CanTxTrackMedRangeModeBothMrLrUpdate = 3,
      }

    }
    #endregion

  }

  public sealed partial class Esr_valid1_5d0 : pb::IMessage<Esr_valid1_5d0> {
    private static readonly pb::MessageParser<Esr_valid1_5d0> _parser = new pb::MessageParser<Esr_valid1_5d0>(() => new Esr_valid1_5d0());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_valid1_5d0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_valid1_5d0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_valid1_5d0(Esr_valid1_5d0 other) : this() {
      canTxValidLrSn_ = other.canTxValidLrSn_;
      canTxValidLrRangeRate_ = other.canTxValidLrRangeRate_;
      canTxValidLrRange_ = other.canTxValidLrRange_;
      canTxValidLrPower_ = other.canTxValidLrPower_;
      canTxValidLrAngle_ = other.canTxValidLrAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_valid1_5d0 Clone() {
      return new Esr_valid1_5d0(this);
    }

    /// <summary>Field number for the "can_tx_valid_lr_sn" field.</summary>
    public const int CanTxValidLrSnFieldNumber = 1;
    private int canTxValidLrSn_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxValidLrSn {
      get { return canTxValidLrSn_; }
      set {
        canTxValidLrSn_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_lr_range_rate" field.</summary>
    public const int CanTxValidLrRangeRateFieldNumber = 2;
    private double canTxValidLrRangeRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxValidLrRangeRate {
      get { return canTxValidLrRangeRate_; }
      set {
        canTxValidLrRangeRate_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_lr_range" field.</summary>
    public const int CanTxValidLrRangeFieldNumber = 3;
    private double canTxValidLrRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxValidLrRange {
      get { return canTxValidLrRange_; }
      set {
        canTxValidLrRange_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_lr_power" field.</summary>
    public const int CanTxValidLrPowerFieldNumber = 4;
    private int canTxValidLrPower_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxValidLrPower {
      get { return canTxValidLrPower_; }
      set {
        canTxValidLrPower_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_lr_angle" field.</summary>
    public const int CanTxValidLrAngleFieldNumber = 5;
    private double canTxValidLrAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxValidLrAngle {
      get { return canTxValidLrAngle_; }
      set {
        canTxValidLrAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_valid1_5d0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_valid1_5d0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxValidLrSn != other.CanTxValidLrSn) return false;
      if (CanTxValidLrRangeRate != other.CanTxValidLrRangeRate) return false;
      if (CanTxValidLrRange != other.CanTxValidLrRange) return false;
      if (CanTxValidLrPower != other.CanTxValidLrPower) return false;
      if (CanTxValidLrAngle != other.CanTxValidLrAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxValidLrSn != 0) hash ^= CanTxValidLrSn.GetHashCode();
      if (CanTxValidLrRangeRate != 0D) hash ^= CanTxValidLrRangeRate.GetHashCode();
      if (CanTxValidLrRange != 0D) hash ^= CanTxValidLrRange.GetHashCode();
      if (CanTxValidLrPower != 0) hash ^= CanTxValidLrPower.GetHashCode();
      if (CanTxValidLrAngle != 0D) hash ^= CanTxValidLrAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxValidLrSn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxValidLrSn);
      }
      if (CanTxValidLrRangeRate != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CanTxValidLrRangeRate);
      }
      if (CanTxValidLrRange != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanTxValidLrRange);
      }
      if (CanTxValidLrPower != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxValidLrPower);
      }
      if (CanTxValidLrAngle != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CanTxValidLrAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxValidLrSn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxValidLrSn);
      }
      if (CanTxValidLrRangeRate != 0D) {
        size += 1 + 8;
      }
      if (CanTxValidLrRange != 0D) {
        size += 1 + 8;
      }
      if (CanTxValidLrPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxValidLrPower);
      }
      if (CanTxValidLrAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_valid1_5d0 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxValidLrSn != 0) {
        CanTxValidLrSn = other.CanTxValidLrSn;
      }
      if (other.CanTxValidLrRangeRate != 0D) {
        CanTxValidLrRangeRate = other.CanTxValidLrRangeRate;
      }
      if (other.CanTxValidLrRange != 0D) {
        CanTxValidLrRange = other.CanTxValidLrRange;
      }
      if (other.CanTxValidLrPower != 0) {
        CanTxValidLrPower = other.CanTxValidLrPower;
      }
      if (other.CanTxValidLrAngle != 0D) {
        CanTxValidLrAngle = other.CanTxValidLrAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxValidLrSn = input.ReadInt32();
            break;
          }
          case 17: {
            CanTxValidLrRangeRate = input.ReadDouble();
            break;
          }
          case 25: {
            CanTxValidLrRange = input.ReadDouble();
            break;
          }
          case 32: {
            CanTxValidLrPower = input.ReadInt32();
            break;
          }
          case 41: {
            CanTxValidLrAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Esr_valid2_5d1 : pb::IMessage<Esr_valid2_5d1> {
    private static readonly pb::MessageParser<Esr_valid2_5d1> _parser = new pb::MessageParser<Esr_valid2_5d1>(() => new Esr_valid2_5d1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_valid2_5d1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_valid2_5d1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_valid2_5d1(Esr_valid2_5d1 other) : this() {
      canTxValidMrSn_ = other.canTxValidMrSn_;
      canTxValidMrRangeRate_ = other.canTxValidMrRangeRate_;
      canTxValidMrRange_ = other.canTxValidMrRange_;
      canTxValidMrPower_ = other.canTxValidMrPower_;
      canTxValidMrAngle_ = other.canTxValidMrAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_valid2_5d1 Clone() {
      return new Esr_valid2_5d1(this);
    }

    /// <summary>Field number for the "can_tx_valid_mr_sn" field.</summary>
    public const int CanTxValidMrSnFieldNumber = 1;
    private int canTxValidMrSn_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxValidMrSn {
      get { return canTxValidMrSn_; }
      set {
        canTxValidMrSn_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_mr_range_rate" field.</summary>
    public const int CanTxValidMrRangeRateFieldNumber = 2;
    private double canTxValidMrRangeRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxValidMrRangeRate {
      get { return canTxValidMrRangeRate_; }
      set {
        canTxValidMrRangeRate_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_mr_range" field.</summary>
    public const int CanTxValidMrRangeFieldNumber = 3;
    private double canTxValidMrRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxValidMrRange {
      get { return canTxValidMrRange_; }
      set {
        canTxValidMrRange_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_mr_power" field.</summary>
    public const int CanTxValidMrPowerFieldNumber = 4;
    private int canTxValidMrPower_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxValidMrPower {
      get { return canTxValidMrPower_; }
      set {
        canTxValidMrPower_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_valid_mr_angle" field.</summary>
    public const int CanTxValidMrAngleFieldNumber = 5;
    private double canTxValidMrAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxValidMrAngle {
      get { return canTxValidMrAngle_; }
      set {
        canTxValidMrAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_valid2_5d1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_valid2_5d1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxValidMrSn != other.CanTxValidMrSn) return false;
      if (CanTxValidMrRangeRate != other.CanTxValidMrRangeRate) return false;
      if (CanTxValidMrRange != other.CanTxValidMrRange) return false;
      if (CanTxValidMrPower != other.CanTxValidMrPower) return false;
      if (CanTxValidMrAngle != other.CanTxValidMrAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxValidMrSn != 0) hash ^= CanTxValidMrSn.GetHashCode();
      if (CanTxValidMrRangeRate != 0D) hash ^= CanTxValidMrRangeRate.GetHashCode();
      if (CanTxValidMrRange != 0D) hash ^= CanTxValidMrRange.GetHashCode();
      if (CanTxValidMrPower != 0) hash ^= CanTxValidMrPower.GetHashCode();
      if (CanTxValidMrAngle != 0D) hash ^= CanTxValidMrAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxValidMrSn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxValidMrSn);
      }
      if (CanTxValidMrRangeRate != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CanTxValidMrRangeRate);
      }
      if (CanTxValidMrRange != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanTxValidMrRange);
      }
      if (CanTxValidMrPower != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxValidMrPower);
      }
      if (CanTxValidMrAngle != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CanTxValidMrAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxValidMrSn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxValidMrSn);
      }
      if (CanTxValidMrRangeRate != 0D) {
        size += 1 + 8;
      }
      if (CanTxValidMrRange != 0D) {
        size += 1 + 8;
      }
      if (CanTxValidMrPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxValidMrPower);
      }
      if (CanTxValidMrAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_valid2_5d1 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxValidMrSn != 0) {
        CanTxValidMrSn = other.CanTxValidMrSn;
      }
      if (other.CanTxValidMrRangeRate != 0D) {
        CanTxValidMrRangeRate = other.CanTxValidMrRangeRate;
      }
      if (other.CanTxValidMrRange != 0D) {
        CanTxValidMrRange = other.CanTxValidMrRange;
      }
      if (other.CanTxValidMrPower != 0) {
        CanTxValidMrPower = other.CanTxValidMrPower;
      }
      if (other.CanTxValidMrAngle != 0D) {
        CanTxValidMrAngle = other.CanTxValidMrAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxValidMrSn = input.ReadInt32();
            break;
          }
          case 17: {
            CanTxValidMrRangeRate = input.ReadDouble();
            break;
          }
          case 25: {
            CanTxValidMrRange = input.ReadDouble();
            break;
          }
          case 32: {
            CanTxValidMrPower = input.ReadInt32();
            break;
          }
          case 41: {
            CanTxValidMrAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Acm_inst_resp_7e4 : pb::IMessage<Acm_inst_resp_7e4> {
    private static readonly pb::MessageParser<Acm_inst_resp_7e4> _parser = new pb::MessageParser<Acm_inst_resp_7e4>(() => new Acm_inst_resp_7e4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Acm_inst_resp_7e4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acm_inst_resp_7e4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acm_inst_resp_7e4(Acm_inst_resp_7e4 other) : this() {
      data7_ = other.data7_;
      data6_ = other.data6_;
      data5_ = other.data5_;
      data4_ = other.data4_;
      data3_ = other.data3_;
      rtnCmdCounter_ = other.rtnCmdCounter_;
      commandReturnCode_ = other.commandReturnCode_;
      pid_ = other.pid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acm_inst_resp_7e4 Clone() {
      return new Acm_inst_resp_7e4(this);
    }

    /// <summary>Field number for the "data_7" field.</summary>
    public const int Data7FieldNumber = 1;
    private int data7_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data7 {
      get { return data7_; }
      set {
        data7_ = value;
      }
    }

    /// <summary>Field number for the "data_6" field.</summary>
    public const int Data6FieldNumber = 2;
    private int data6_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data6 {
      get { return data6_; }
      set {
        data6_ = value;
      }
    }

    /// <summary>Field number for the "data_5" field.</summary>
    public const int Data5FieldNumber = 3;
    private int data5_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data5 {
      get { return data5_; }
      set {
        data5_ = value;
      }
    }

    /// <summary>Field number for the "data_4" field.</summary>
    public const int Data4FieldNumber = 4;
    private int data4_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data4 {
      get { return data4_; }
      set {
        data4_ = value;
      }
    }

    /// <summary>Field number for the "data_3" field.</summary>
    public const int Data3FieldNumber = 5;
    private int data3_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data3 {
      get { return data3_; }
      set {
        data3_ = value;
      }
    }

    /// <summary>Field number for the "rtn_cmd_counter" field.</summary>
    public const int RtnCmdCounterFieldNumber = 6;
    private int rtnCmdCounter_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RtnCmdCounter {
      get { return rtnCmdCounter_; }
      set {
        rtnCmdCounter_ = value;
      }
    }

    /// <summary>Field number for the "command_return_code" field.</summary>
    public const int CommandReturnCodeFieldNumber = 7;
    private int commandReturnCode_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommandReturnCode {
      get { return commandReturnCode_; }
      set {
        commandReturnCode_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 8;
    private int pid_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Acm_inst_resp_7e4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Acm_inst_resp_7e4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data7 != other.Data7) return false;
      if (Data6 != other.Data6) return false;
      if (Data5 != other.Data5) return false;
      if (Data4 != other.Data4) return false;
      if (Data3 != other.Data3) return false;
      if (RtnCmdCounter != other.RtnCmdCounter) return false;
      if (CommandReturnCode != other.CommandReturnCode) return false;
      if (Pid != other.Pid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data7 != 0) hash ^= Data7.GetHashCode();
      if (Data6 != 0) hash ^= Data6.GetHashCode();
      if (Data5 != 0) hash ^= Data5.GetHashCode();
      if (Data4 != 0) hash ^= Data4.GetHashCode();
      if (Data3 != 0) hash ^= Data3.GetHashCode();
      if (RtnCmdCounter != 0) hash ^= RtnCmdCounter.GetHashCode();
      if (CommandReturnCode != 0) hash ^= CommandReturnCode.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data7 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Data7);
      }
      if (Data6 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Data6);
      }
      if (Data5 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Data5);
      }
      if (Data4 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Data4);
      }
      if (Data3 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Data3);
      }
      if (RtnCmdCounter != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RtnCmdCounter);
      }
      if (CommandReturnCode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CommandReturnCode);
      }
      if (Pid != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Pid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data7);
      }
      if (Data6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data6);
      }
      if (Data5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data5);
      }
      if (Data4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data4);
      }
      if (Data3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data3);
      }
      if (RtnCmdCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RtnCmdCounter);
      }
      if (CommandReturnCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommandReturnCode);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Acm_inst_resp_7e4 other) {
      if (other == null) {
        return;
      }
      if (other.Data7 != 0) {
        Data7 = other.Data7;
      }
      if (other.Data6 != 0) {
        Data6 = other.Data6;
      }
      if (other.Data5 != 0) {
        Data5 = other.Data5;
      }
      if (other.Data4 != 0) {
        Data4 = other.Data4;
      }
      if (other.Data3 != 0) {
        Data3 = other.Data3;
      }
      if (other.RtnCmdCounter != 0) {
        RtnCmdCounter = other.RtnCmdCounter;
      }
      if (other.CommandReturnCode != 0) {
        CommandReturnCode = other.CommandReturnCode;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data7 = input.ReadInt32();
            break;
          }
          case 16: {
            Data6 = input.ReadInt32();
            break;
          }
          case 24: {
            Data5 = input.ReadInt32();
            break;
          }
          case 32: {
            Data4 = input.ReadInt32();
            break;
          }
          case 40: {
            Data3 = input.ReadInt32();
            break;
          }
          case 48: {
            RtnCmdCounter = input.ReadInt32();
            break;
          }
          case 56: {
            CommandReturnCode = input.ReadInt32();
            break;
          }
          case 64: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vehicle2_4f1 : pb::IMessage<Vehicle2_4f1> {
    private static readonly pb::MessageParser<Vehicle2_4f1> _parser = new pb::MessageParser<Vehicle2_4f1>(() => new Vehicle2_4f1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle2_4f1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle2_4f1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle2_4f1(Vehicle2_4f1 other) : this() {
      canRxVolvoShortTrackRoc_ = other.canRxVolvoShortTrackRoc_;
      canRxMrOnlyTransmit_ = other.canRxMrOnlyTransmit_;
      canRxLrOnlyTransmit_ = other.canRxLrOnlyTransmit_;
      canRxHighYawAngle_ = other.canRxHighYawAngle_;
      canRxClearFaults_ = other.canRxClearFaults_;
      canRxUseAngleMisalignment_ = other.canRxUseAngleMisalignment_;
      canRxTurnSignalStatus_ = other.canRxTurnSignalStatus_;
      canRxBlockageDisable_ = other.canRxBlockageDisable_;
      canRxVehicleSpeedValidity_ = other.canRxVehicleSpeedValidity_;
      canRxMmrUpsideDown_ = other.canRxMmrUpsideDown_;
      canRxWiperStatus_ = other.canRxWiperStatus_;
      canRxRawDataEnable_ = other.canRxRawDataEnable_;
      canRxRadarCmdRadiate_ = other.canRxRadarCmdRadiate_;
      canRxGroupingMode_ = other.canRxGroupingMode_;
      canRxMaximumTracks_ = other.canRxMaximumTracks_;
      canRxLateralMountingOffset_ = other.canRxLateralMountingOffset_;
      canRxAngleMisalignment_ = other.canRxAngleMisalignment_;
      canRxScanIndexAck_ = other.canRxScanIndexAck_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle2_4f1 Clone() {
      return new Vehicle2_4f1(this);
    }

    /// <summary>Field number for the "can_rx_volvo_short_track_roc" field.</summary>
    public const int CanRxVolvoShortTrackRocFieldNumber = 1;
    private double canRxVolvoShortTrackRoc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxVolvoShortTrackRoc {
      get { return canRxVolvoShortTrackRoc_; }
      set {
        canRxVolvoShortTrackRoc_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_mr_only_transmit" field.</summary>
    public const int CanRxMrOnlyTransmitFieldNumber = 2;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mr_only_transmitType canRxMrOnlyTransmit_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mr_only_transmitType CanRxMrOnlyTransmit {
      get { return canRxMrOnlyTransmit_; }
      set {
        canRxMrOnlyTransmit_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_lr_only_transmit" field.</summary>
    public const int CanRxLrOnlyTransmitFieldNumber = 3;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_lr_only_transmitType canRxLrOnlyTransmit_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_lr_only_transmitType CanRxLrOnlyTransmit {
      get { return canRxLrOnlyTransmit_; }
      set {
        canRxLrOnlyTransmit_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_high_yaw_angle" field.</summary>
    public const int CanRxHighYawAngleFieldNumber = 4;
    private int canRxHighYawAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxHighYawAngle {
      get { return canRxHighYawAngle_; }
      set {
        canRxHighYawAngle_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_clear_faults" field.</summary>
    public const int CanRxClearFaultsFieldNumber = 5;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_clear_faultsType canRxClearFaults_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_clear_faultsType CanRxClearFaults {
      get { return canRxClearFaults_; }
      set {
        canRxClearFaults_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_use_angle_misalignment" field.</summary>
    public const int CanRxUseAngleMisalignmentFieldNumber = 6;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_use_angle_misalignmentType canRxUseAngleMisalignment_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_use_angle_misalignmentType CanRxUseAngleMisalignment {
      get { return canRxUseAngleMisalignment_; }
      set {
        canRxUseAngleMisalignment_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_turn_signal_status" field.</summary>
    public const int CanRxTurnSignalStatusFieldNumber = 7;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_turn_signal_statusType canRxTurnSignalStatus_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_turn_signal_statusType CanRxTurnSignalStatus {
      get { return canRxTurnSignalStatus_; }
      set {
        canRxTurnSignalStatus_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_blockage_disable" field.</summary>
    public const int CanRxBlockageDisableFieldNumber = 8;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_blockage_disableType canRxBlockageDisable_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_blockage_disableType CanRxBlockageDisable {
      get { return canRxBlockageDisable_; }
      set {
        canRxBlockageDisable_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_vehicle_speed_validity" field.</summary>
    public const int CanRxVehicleSpeedValidityFieldNumber = 9;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_vehicle_speed_validityType canRxVehicleSpeedValidity_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_vehicle_speed_validityType CanRxVehicleSpeedValidity {
      get { return canRxVehicleSpeedValidity_; }
      set {
        canRxVehicleSpeedValidity_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_mmr_upside_down" field.</summary>
    public const int CanRxMmrUpsideDownFieldNumber = 10;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mmr_upside_downType canRxMmrUpsideDown_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mmr_upside_downType CanRxMmrUpsideDown {
      get { return canRxMmrUpsideDown_; }
      set {
        canRxMmrUpsideDown_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_wiper_status" field.</summary>
    public const int CanRxWiperStatusFieldNumber = 11;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_wiper_statusType canRxWiperStatus_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_wiper_statusType CanRxWiperStatus {
      get { return canRxWiperStatus_; }
      set {
        canRxWiperStatus_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_raw_data_enable" field.</summary>
    public const int CanRxRawDataEnableFieldNumber = 12;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_raw_data_enableType canRxRawDataEnable_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_raw_data_enableType CanRxRawDataEnable {
      get { return canRxRawDataEnable_; }
      set {
        canRxRawDataEnable_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_radar_cmd_radiate" field.</summary>
    public const int CanRxRadarCmdRadiateFieldNumber = 13;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_radar_cmd_radiateType canRxRadarCmdRadiate_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_radar_cmd_radiateType CanRxRadarCmdRadiate {
      get { return canRxRadarCmdRadiate_; }
      set {
        canRxRadarCmdRadiate_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_grouping_mode" field.</summary>
    public const int CanRxGroupingModeFieldNumber = 14;
    private global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_grouping_modeType canRxGroupingMode_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_grouping_modeType CanRxGroupingMode {
      get { return canRxGroupingMode_; }
      set {
        canRxGroupingMode_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_maximum_tracks" field.</summary>
    public const int CanRxMaximumTracksFieldNumber = 15;
    private int canRxMaximumTracks_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxMaximumTracks {
      get { return canRxMaximumTracks_; }
      set {
        canRxMaximumTracks_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_lateral_mounting_offset" field.</summary>
    public const int CanRxLateralMountingOffsetFieldNumber = 16;
    private double canRxLateralMountingOffset_;
    /// <summary>
    /// (+) = to the right from driver's perspective  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxLateralMountingOffset {
      get { return canRxLateralMountingOffset_; }
      set {
        canRxLateralMountingOffset_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_angle_misalignment" field.</summary>
    public const int CanRxAngleMisalignmentFieldNumber = 17;
    private double canRxAngleMisalignment_;
    /// <summary>
    /// (+) = clockwise  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxAngleMisalignment {
      get { return canRxAngleMisalignment_; }
      set {
        canRxAngleMisalignment_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_scan_index_ack" field.</summary>
    public const int CanRxScanIndexAckFieldNumber = 18;
    private int canRxScanIndexAck_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxScanIndexAck {
      get { return canRxScanIndexAck_; }
      set {
        canRxScanIndexAck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle2_4f1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle2_4f1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanRxVolvoShortTrackRoc != other.CanRxVolvoShortTrackRoc) return false;
      if (CanRxMrOnlyTransmit != other.CanRxMrOnlyTransmit) return false;
      if (CanRxLrOnlyTransmit != other.CanRxLrOnlyTransmit) return false;
      if (CanRxHighYawAngle != other.CanRxHighYawAngle) return false;
      if (CanRxClearFaults != other.CanRxClearFaults) return false;
      if (CanRxUseAngleMisalignment != other.CanRxUseAngleMisalignment) return false;
      if (CanRxTurnSignalStatus != other.CanRxTurnSignalStatus) return false;
      if (CanRxBlockageDisable != other.CanRxBlockageDisable) return false;
      if (CanRxVehicleSpeedValidity != other.CanRxVehicleSpeedValidity) return false;
      if (CanRxMmrUpsideDown != other.CanRxMmrUpsideDown) return false;
      if (CanRxWiperStatus != other.CanRxWiperStatus) return false;
      if (CanRxRawDataEnable != other.CanRxRawDataEnable) return false;
      if (CanRxRadarCmdRadiate != other.CanRxRadarCmdRadiate) return false;
      if (CanRxGroupingMode != other.CanRxGroupingMode) return false;
      if (CanRxMaximumTracks != other.CanRxMaximumTracks) return false;
      if (CanRxLateralMountingOffset != other.CanRxLateralMountingOffset) return false;
      if (CanRxAngleMisalignment != other.CanRxAngleMisalignment) return false;
      if (CanRxScanIndexAck != other.CanRxScanIndexAck) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanRxVolvoShortTrackRoc != 0D) hash ^= CanRxVolvoShortTrackRoc.GetHashCode();
      if (CanRxMrOnlyTransmit != 0) hash ^= CanRxMrOnlyTransmit.GetHashCode();
      if (CanRxLrOnlyTransmit != 0) hash ^= CanRxLrOnlyTransmit.GetHashCode();
      if (CanRxHighYawAngle != 0) hash ^= CanRxHighYawAngle.GetHashCode();
      if (CanRxClearFaults != 0) hash ^= CanRxClearFaults.GetHashCode();
      if (CanRxUseAngleMisalignment != 0) hash ^= CanRxUseAngleMisalignment.GetHashCode();
      if (CanRxTurnSignalStatus != 0) hash ^= CanRxTurnSignalStatus.GetHashCode();
      if (CanRxBlockageDisable != 0) hash ^= CanRxBlockageDisable.GetHashCode();
      if (CanRxVehicleSpeedValidity != 0) hash ^= CanRxVehicleSpeedValidity.GetHashCode();
      if (CanRxMmrUpsideDown != 0) hash ^= CanRxMmrUpsideDown.GetHashCode();
      if (CanRxWiperStatus != 0) hash ^= CanRxWiperStatus.GetHashCode();
      if (CanRxRawDataEnable != 0) hash ^= CanRxRawDataEnable.GetHashCode();
      if (CanRxRadarCmdRadiate != 0) hash ^= CanRxRadarCmdRadiate.GetHashCode();
      if (CanRxGroupingMode != 0) hash ^= CanRxGroupingMode.GetHashCode();
      if (CanRxMaximumTracks != 0) hash ^= CanRxMaximumTracks.GetHashCode();
      if (CanRxLateralMountingOffset != 0D) hash ^= CanRxLateralMountingOffset.GetHashCode();
      if (CanRxAngleMisalignment != 0D) hash ^= CanRxAngleMisalignment.GetHashCode();
      if (CanRxScanIndexAck != 0) hash ^= CanRxScanIndexAck.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanRxVolvoShortTrackRoc != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CanRxVolvoShortTrackRoc);
      }
      if (CanRxMrOnlyTransmit != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CanRxMrOnlyTransmit);
      }
      if (CanRxLrOnlyTransmit != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CanRxLrOnlyTransmit);
      }
      if (CanRxHighYawAngle != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanRxHighYawAngle);
      }
      if (CanRxClearFaults != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CanRxClearFaults);
      }
      if (CanRxUseAngleMisalignment != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CanRxUseAngleMisalignment);
      }
      if (CanRxTurnSignalStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CanRxTurnSignalStatus);
      }
      if (CanRxBlockageDisable != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CanRxBlockageDisable);
      }
      if (CanRxVehicleSpeedValidity != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CanRxVehicleSpeedValidity);
      }
      if (CanRxMmrUpsideDown != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CanRxMmrUpsideDown);
      }
      if (CanRxWiperStatus != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) CanRxWiperStatus);
      }
      if (CanRxRawDataEnable != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CanRxRawDataEnable);
      }
      if (CanRxRadarCmdRadiate != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) CanRxRadarCmdRadiate);
      }
      if (CanRxGroupingMode != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) CanRxGroupingMode);
      }
      if (CanRxMaximumTracks != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CanRxMaximumTracks);
      }
      if (CanRxLateralMountingOffset != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(CanRxLateralMountingOffset);
      }
      if (CanRxAngleMisalignment != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(CanRxAngleMisalignment);
      }
      if (CanRxScanIndexAck != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CanRxScanIndexAck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanRxVolvoShortTrackRoc != 0D) {
        size += 1 + 8;
      }
      if (CanRxMrOnlyTransmit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxMrOnlyTransmit);
      }
      if (CanRxLrOnlyTransmit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxLrOnlyTransmit);
      }
      if (CanRxHighYawAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxHighYawAngle);
      }
      if (CanRxClearFaults != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxClearFaults);
      }
      if (CanRxUseAngleMisalignment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxUseAngleMisalignment);
      }
      if (CanRxTurnSignalStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxTurnSignalStatus);
      }
      if (CanRxBlockageDisable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxBlockageDisable);
      }
      if (CanRxVehicleSpeedValidity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxVehicleSpeedValidity);
      }
      if (CanRxMmrUpsideDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxMmrUpsideDown);
      }
      if (CanRxWiperStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxWiperStatus);
      }
      if (CanRxRawDataEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxRawDataEnable);
      }
      if (CanRxRadarCmdRadiate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxRadarCmdRadiate);
      }
      if (CanRxGroupingMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxGroupingMode);
      }
      if (CanRxMaximumTracks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxMaximumTracks);
      }
      if (CanRxLateralMountingOffset != 0D) {
        size += 2 + 8;
      }
      if (CanRxAngleMisalignment != 0D) {
        size += 2 + 8;
      }
      if (CanRxScanIndexAck != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CanRxScanIndexAck);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle2_4f1 other) {
      if (other == null) {
        return;
      }
      if (other.CanRxVolvoShortTrackRoc != 0D) {
        CanRxVolvoShortTrackRoc = other.CanRxVolvoShortTrackRoc;
      }
      if (other.CanRxMrOnlyTransmit != 0) {
        CanRxMrOnlyTransmit = other.CanRxMrOnlyTransmit;
      }
      if (other.CanRxLrOnlyTransmit != 0) {
        CanRxLrOnlyTransmit = other.CanRxLrOnlyTransmit;
      }
      if (other.CanRxHighYawAngle != 0) {
        CanRxHighYawAngle = other.CanRxHighYawAngle;
      }
      if (other.CanRxClearFaults != 0) {
        CanRxClearFaults = other.CanRxClearFaults;
      }
      if (other.CanRxUseAngleMisalignment != 0) {
        CanRxUseAngleMisalignment = other.CanRxUseAngleMisalignment;
      }
      if (other.CanRxTurnSignalStatus != 0) {
        CanRxTurnSignalStatus = other.CanRxTurnSignalStatus;
      }
      if (other.CanRxBlockageDisable != 0) {
        CanRxBlockageDisable = other.CanRxBlockageDisable;
      }
      if (other.CanRxVehicleSpeedValidity != 0) {
        CanRxVehicleSpeedValidity = other.CanRxVehicleSpeedValidity;
      }
      if (other.CanRxMmrUpsideDown != 0) {
        CanRxMmrUpsideDown = other.CanRxMmrUpsideDown;
      }
      if (other.CanRxWiperStatus != 0) {
        CanRxWiperStatus = other.CanRxWiperStatus;
      }
      if (other.CanRxRawDataEnable != 0) {
        CanRxRawDataEnable = other.CanRxRawDataEnable;
      }
      if (other.CanRxRadarCmdRadiate != 0) {
        CanRxRadarCmdRadiate = other.CanRxRadarCmdRadiate;
      }
      if (other.CanRxGroupingMode != 0) {
        CanRxGroupingMode = other.CanRxGroupingMode;
      }
      if (other.CanRxMaximumTracks != 0) {
        CanRxMaximumTracks = other.CanRxMaximumTracks;
      }
      if (other.CanRxLateralMountingOffset != 0D) {
        CanRxLateralMountingOffset = other.CanRxLateralMountingOffset;
      }
      if (other.CanRxAngleMisalignment != 0D) {
        CanRxAngleMisalignment = other.CanRxAngleMisalignment;
      }
      if (other.CanRxScanIndexAck != 0) {
        CanRxScanIndexAck = other.CanRxScanIndexAck;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            CanRxVolvoShortTrackRoc = input.ReadDouble();
            break;
          }
          case 16: {
            canRxMrOnlyTransmit_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mr_only_transmitType) input.ReadEnum();
            break;
          }
          case 24: {
            canRxLrOnlyTransmit_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_lr_only_transmitType) input.ReadEnum();
            break;
          }
          case 32: {
            CanRxHighYawAngle = input.ReadInt32();
            break;
          }
          case 40: {
            canRxClearFaults_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_clear_faultsType) input.ReadEnum();
            break;
          }
          case 48: {
            canRxUseAngleMisalignment_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_use_angle_misalignmentType) input.ReadEnum();
            break;
          }
          case 56: {
            canRxTurnSignalStatus_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_turn_signal_statusType) input.ReadEnum();
            break;
          }
          case 64: {
            canRxBlockageDisable_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_blockage_disableType) input.ReadEnum();
            break;
          }
          case 72: {
            canRxVehicleSpeedValidity_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_vehicle_speed_validityType) input.ReadEnum();
            break;
          }
          case 80: {
            canRxMmrUpsideDown_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_mmr_upside_downType) input.ReadEnum();
            break;
          }
          case 88: {
            canRxWiperStatus_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_wiper_statusType) input.ReadEnum();
            break;
          }
          case 96: {
            canRxRawDataEnable_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_raw_data_enableType) input.ReadEnum();
            break;
          }
          case 104: {
            canRxRadarCmdRadiate_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_radar_cmd_radiateType) input.ReadEnum();
            break;
          }
          case 112: {
            canRxGroupingMode_ = (global::Apollo.Drivers.Vehicle2_4f1.Types.Can_rx_grouping_modeType) input.ReadEnum();
            break;
          }
          case 120: {
            CanRxMaximumTracks = input.ReadInt32();
            break;
          }
          case 129: {
            CanRxLateralMountingOffset = input.ReadDouble();
            break;
          }
          case 137: {
            CanRxAngleMisalignment = input.ReadDouble();
            break;
          }
          case 144: {
            CanRxScanIndexAck = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vehicle2_4f1 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_rx_mr_only_transmitType {
        [pbr::OriginalName("CAN_RX_MR_ONLY_TRANSMIT_OFF")] CanRxMrOnlyTransmitOff = 0,
        [pbr::OriginalName("CAN_RX_MR_ONLY_TRANSMIT_ON")] CanRxMrOnlyTransmitOn = 1,
      }

      public enum Can_rx_lr_only_transmitType {
        [pbr::OriginalName("CAN_RX_LR_ONLY_TRANSMIT_OFF")] CanRxLrOnlyTransmitOff = 0,
        [pbr::OriginalName("CAN_RX_LR_ONLY_TRANSMIT_ON")] CanRxLrOnlyTransmitOn = 1,
      }

      public enum Can_rx_clear_faultsType {
        [pbr::OriginalName("CAN_RX_CLEAR_FAULTS_OFF")] CanRxClearFaultsOff = 0,
        [pbr::OriginalName("CAN_RX_CLEAR_FAULTS_ON")] CanRxClearFaultsOn = 1,
      }

      public enum Can_rx_use_angle_misalignmentType {
        [pbr::OriginalName("CAN_RX_USE_ANGLE_MISALIGNMENT_OFF")] CanRxUseAngleMisalignmentOff = 0,
        [pbr::OriginalName("CAN_RX_USE_ANGLE_MISALIGNMENT_ON")] CanRxUseAngleMisalignmentOn = 1,
      }

      public enum Can_rx_turn_signal_statusType {
        [pbr::OriginalName("CAN_RX_TURN_SIGNAL_STATUS_OFF")] CanRxTurnSignalStatusOff = 0,
        [pbr::OriginalName("CAN_RX_TURN_SIGNAL_STATUS_LEFT")] CanRxTurnSignalStatusLeft = 1,
        [pbr::OriginalName("CAN_RX_TURN_SIGNAL_STATUS_RIGHT")] CanRxTurnSignalStatusRight = 2,
        [pbr::OriginalName("CAN_RX_TURN_SIGNAL_STATUS_INVALID_3")] CanRxTurnSignalStatusInvalid3 = 3,
      }

      public enum Can_rx_blockage_disableType {
        [pbr::OriginalName("CAN_RX_BLOCKAGE_DISABLE_ENABLED")] CanRxBlockageDisableEnabled = 0,
        [pbr::OriginalName("CAN_RX_BLOCKAGE_DISABLE_DISABLED")] CanRxBlockageDisableDisabled = 1,
      }

      public enum Can_rx_vehicle_speed_validityType {
        [pbr::OriginalName("CAN_RX_VEHICLE_SPEED_VALIDITY_INVALID")] CanRxVehicleSpeedValidityInvalid = 0,
        [pbr::OriginalName("CAN_RX_VEHICLE_SPEED_VALIDITY_VALID")] CanRxVehicleSpeedValidityValid = 1,
      }

      public enum Can_rx_mmr_upside_downType {
        [pbr::OriginalName("CAN_RX_MMR_UPSIDE_DOWN_RIGHT_SIDE_UP")] CanRxMmrUpsideDownRightSideUp = 0,
        [pbr::OriginalName("CAN_RX_MMR_UPSIDE_DOWN_UPSIDE_DOWN")] CanRxMmrUpsideDownUpsideDown = 1,
      }

      public enum Can_rx_wiper_statusType {
        [pbr::OriginalName("CAN_RX_WIPER_STATUS_OFF")] CanRxWiperStatusOff = 0,
        [pbr::OriginalName("CAN_RX_WIPER_STATUS_ON")] CanRxWiperStatusOn = 1,
      }

      public enum Can_rx_raw_data_enableType {
        [pbr::OriginalName("CAN_RX_RAW_DATA_ENABLE_FILTERED")] CanRxRawDataEnableFiltered = 0,
        [pbr::OriginalName("CAN_RX_RAW_DATA_ENABLE_RAW")] CanRxRawDataEnableRaw = 1,
      }

      public enum Can_rx_radar_cmd_radiateType {
        [pbr::OriginalName("CAN_RX_RADAR_CMD_RADIATE_OFF")] CanRxRadarCmdRadiateOff = 0,
        [pbr::OriginalName("CAN_RX_RADAR_CMD_RADIATE_ON")] CanRxRadarCmdRadiateOn = 1,
      }

      public enum Can_rx_grouping_modeType {
        [pbr::OriginalName("CAN_RX_GROUPING_MODE_NO_GROUPING")] CanRxGroupingModeNoGrouping = 0,
        [pbr::OriginalName("CAN_RX_GROUPING_MODE_GROUP_MOVING_ONLY")] CanRxGroupingModeGroupMovingOnly = 1,
        [pbr::OriginalName("CAN_RX_GROUPING_MODE_GROUP_STATIONARY_ONLY")] CanRxGroupingModeGroupStationaryOnly = 2,
        [pbr::OriginalName("CAN_RX_GROUPING_MODE_GROUP_MOVING_STATIONARY")] CanRxGroupingModeGroupMovingStationary = 3,
      }

    }
    #endregion

  }

  public sealed partial class Vehicle1_4f0 : pb::IMessage<Vehicle1_4f0> {
    private static readonly pb::MessageParser<Vehicle1_4f0> _parser = new pb::MessageParser<Vehicle1_4f0>(() => new Vehicle1_4f0());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle1_4f0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle1_4f0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle1_4f0(Vehicle1_4f0 other) : this() {
      canRxSteeringAngleValidity_ = other.canRxSteeringAngleValidity_;
      canRxSteeringAngleRate_ = other.canRxSteeringAngleRate_;
      canRxSteeringAngleSign_ = other.canRxSteeringAngleSign_;
      canRxSteeringAngleRateSign_ = other.canRxSteeringAngleRateSign_;
      canRxSteeringAngle_ = other.canRxSteeringAngle_;
      canRxRadiusCurvature_ = other.canRxRadiusCurvature_;
      canRxYawRateValidity_ = other.canRxYawRateValidity_;
      canRxYawRate_ = other.canRxYawRate_;
      canRxVehicleSpeedDirection_ = other.canRxVehicleSpeedDirection_;
      canRxVehicleSpeed_ = other.canRxVehicleSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle1_4f0 Clone() {
      return new Vehicle1_4f0(this);
    }

    /// <summary>Field number for the "can_rx_steering_angle_validity" field.</summary>
    public const int CanRxSteeringAngleValidityFieldNumber = 1;
    private global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_validityType canRxSteeringAngleValidity_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_validityType CanRxSteeringAngleValidity {
      get { return canRxSteeringAngleValidity_; }
      set {
        canRxSteeringAngleValidity_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_steering_angle_rate" field.</summary>
    public const int CanRxSteeringAngleRateFieldNumber = 2;
    private int canRxSteeringAngleRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxSteeringAngleRate {
      get { return canRxSteeringAngleRate_; }
      set {
        canRxSteeringAngleRate_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_steering_angle_sign" field.</summary>
    public const int CanRxSteeringAngleSignFieldNumber = 3;
    private global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_signType canRxSteeringAngleSign_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_signType CanRxSteeringAngleSign {
      get { return canRxSteeringAngleSign_; }
      set {
        canRxSteeringAngleSign_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_steering_angle_rate_sign" field.</summary>
    public const int CanRxSteeringAngleRateSignFieldNumber = 4;
    private global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_rate_signType canRxSteeringAngleRateSign_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_rate_signType CanRxSteeringAngleRateSign {
      get { return canRxSteeringAngleRateSign_; }
      set {
        canRxSteeringAngleRateSign_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_steering_angle" field.</summary>
    public const int CanRxSteeringAngleFieldNumber = 5;
    private int canRxSteeringAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxSteeringAngle {
      get { return canRxSteeringAngle_; }
      set {
        canRxSteeringAngle_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_radius_curvature" field.</summary>
    public const int CanRxRadiusCurvatureFieldNumber = 6;
    private int canRxRadiusCurvature_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxRadiusCurvature {
      get { return canRxRadiusCurvature_; }
      set {
        canRxRadiusCurvature_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_yaw_rate_validity" field.</summary>
    public const int CanRxYawRateValidityFieldNumber = 7;
    private global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_yaw_rate_validityType canRxYawRateValidity_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_yaw_rate_validityType CanRxYawRateValidity {
      get { return canRxYawRateValidity_; }
      set {
        canRxYawRateValidity_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_yaw_rate" field.</summary>
    public const int CanRxYawRateFieldNumber = 8;
    private double canRxYawRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxYawRate {
      get { return canRxYawRate_; }
      set {
        canRxYawRate_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_vehicle_speed_direction" field.</summary>
    public const int CanRxVehicleSpeedDirectionFieldNumber = 9;
    private global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_vehicle_speed_directionType canRxVehicleSpeedDirection_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_vehicle_speed_directionType CanRxVehicleSpeedDirection {
      get { return canRxVehicleSpeedDirection_; }
      set {
        canRxVehicleSpeedDirection_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_vehicle_speed" field.</summary>
    public const int CanRxVehicleSpeedFieldNumber = 10;
    private double canRxVehicleSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxVehicleSpeed {
      get { return canRxVehicleSpeed_; }
      set {
        canRxVehicleSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle1_4f0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle1_4f0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanRxSteeringAngleValidity != other.CanRxSteeringAngleValidity) return false;
      if (CanRxSteeringAngleRate != other.CanRxSteeringAngleRate) return false;
      if (CanRxSteeringAngleSign != other.CanRxSteeringAngleSign) return false;
      if (CanRxSteeringAngleRateSign != other.CanRxSteeringAngleRateSign) return false;
      if (CanRxSteeringAngle != other.CanRxSteeringAngle) return false;
      if (CanRxRadiusCurvature != other.CanRxRadiusCurvature) return false;
      if (CanRxYawRateValidity != other.CanRxYawRateValidity) return false;
      if (CanRxYawRate != other.CanRxYawRate) return false;
      if (CanRxVehicleSpeedDirection != other.CanRxVehicleSpeedDirection) return false;
      if (CanRxVehicleSpeed != other.CanRxVehicleSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanRxSteeringAngleValidity != 0) hash ^= CanRxSteeringAngleValidity.GetHashCode();
      if (CanRxSteeringAngleRate != 0) hash ^= CanRxSteeringAngleRate.GetHashCode();
      if (CanRxSteeringAngleSign != 0) hash ^= CanRxSteeringAngleSign.GetHashCode();
      if (CanRxSteeringAngleRateSign != 0) hash ^= CanRxSteeringAngleRateSign.GetHashCode();
      if (CanRxSteeringAngle != 0) hash ^= CanRxSteeringAngle.GetHashCode();
      if (CanRxRadiusCurvature != 0) hash ^= CanRxRadiusCurvature.GetHashCode();
      if (CanRxYawRateValidity != 0) hash ^= CanRxYawRateValidity.GetHashCode();
      if (CanRxYawRate != 0D) hash ^= CanRxYawRate.GetHashCode();
      if (CanRxVehicleSpeedDirection != 0) hash ^= CanRxVehicleSpeedDirection.GetHashCode();
      if (CanRxVehicleSpeed != 0D) hash ^= CanRxVehicleSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanRxSteeringAngleValidity != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CanRxSteeringAngleValidity);
      }
      if (CanRxSteeringAngleRate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanRxSteeringAngleRate);
      }
      if (CanRxSteeringAngleSign != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CanRxSteeringAngleSign);
      }
      if (CanRxSteeringAngleRateSign != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CanRxSteeringAngleRateSign);
      }
      if (CanRxSteeringAngle != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanRxSteeringAngle);
      }
      if (CanRxRadiusCurvature != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CanRxRadiusCurvature);
      }
      if (CanRxYawRateValidity != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CanRxYawRateValidity);
      }
      if (CanRxYawRate != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CanRxYawRate);
      }
      if (CanRxVehicleSpeedDirection != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CanRxVehicleSpeedDirection);
      }
      if (CanRxVehicleSpeed != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(CanRxVehicleSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanRxSteeringAngleValidity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxSteeringAngleValidity);
      }
      if (CanRxSteeringAngleRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxSteeringAngleRate);
      }
      if (CanRxSteeringAngleSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxSteeringAngleSign);
      }
      if (CanRxSteeringAngleRateSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxSteeringAngleRateSign);
      }
      if (CanRxSteeringAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxSteeringAngle);
      }
      if (CanRxRadiusCurvature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxRadiusCurvature);
      }
      if (CanRxYawRateValidity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxYawRateValidity);
      }
      if (CanRxYawRate != 0D) {
        size += 1 + 8;
      }
      if (CanRxVehicleSpeedDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxVehicleSpeedDirection);
      }
      if (CanRxVehicleSpeed != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle1_4f0 other) {
      if (other == null) {
        return;
      }
      if (other.CanRxSteeringAngleValidity != 0) {
        CanRxSteeringAngleValidity = other.CanRxSteeringAngleValidity;
      }
      if (other.CanRxSteeringAngleRate != 0) {
        CanRxSteeringAngleRate = other.CanRxSteeringAngleRate;
      }
      if (other.CanRxSteeringAngleSign != 0) {
        CanRxSteeringAngleSign = other.CanRxSteeringAngleSign;
      }
      if (other.CanRxSteeringAngleRateSign != 0) {
        CanRxSteeringAngleRateSign = other.CanRxSteeringAngleRateSign;
      }
      if (other.CanRxSteeringAngle != 0) {
        CanRxSteeringAngle = other.CanRxSteeringAngle;
      }
      if (other.CanRxRadiusCurvature != 0) {
        CanRxRadiusCurvature = other.CanRxRadiusCurvature;
      }
      if (other.CanRxYawRateValidity != 0) {
        CanRxYawRateValidity = other.CanRxYawRateValidity;
      }
      if (other.CanRxYawRate != 0D) {
        CanRxYawRate = other.CanRxYawRate;
      }
      if (other.CanRxVehicleSpeedDirection != 0) {
        CanRxVehicleSpeedDirection = other.CanRxVehicleSpeedDirection;
      }
      if (other.CanRxVehicleSpeed != 0D) {
        CanRxVehicleSpeed = other.CanRxVehicleSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            canRxSteeringAngleValidity_ = (global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_validityType) input.ReadEnum();
            break;
          }
          case 16: {
            CanRxSteeringAngleRate = input.ReadInt32();
            break;
          }
          case 24: {
            canRxSteeringAngleSign_ = (global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_signType) input.ReadEnum();
            break;
          }
          case 32: {
            canRxSteeringAngleRateSign_ = (global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_steering_angle_rate_signType) input.ReadEnum();
            break;
          }
          case 40: {
            CanRxSteeringAngle = input.ReadInt32();
            break;
          }
          case 48: {
            CanRxRadiusCurvature = input.ReadInt32();
            break;
          }
          case 56: {
            canRxYawRateValidity_ = (global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_yaw_rate_validityType) input.ReadEnum();
            break;
          }
          case 65: {
            CanRxYawRate = input.ReadDouble();
            break;
          }
          case 72: {
            canRxVehicleSpeedDirection_ = (global::Apollo.Drivers.Vehicle1_4f0.Types.Can_rx_vehicle_speed_directionType) input.ReadEnum();
            break;
          }
          case 81: {
            CanRxVehicleSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vehicle1_4f0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_rx_steering_angle_validityType {
        [pbr::OriginalName("CAN_RX_STEERING_ANGLE_VALIDITY_INVALID")] CanRxSteeringAngleValidityInvalid = 0,
        [pbr::OriginalName("CAN_RX_STEERING_ANGLE_VALIDITY_VALID")] CanRxSteeringAngleValidityValid = 1,
      }

      public enum Can_rx_steering_angle_signType {
        [pbr::OriginalName("CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLOCKWISE")] CanRxSteeringAngleSignCounterclockwise = 0,
        [pbr::OriginalName("CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE")] CanRxSteeringAngleSignClockwise = 1,
      }

      public enum Can_rx_steering_angle_rate_signType {
        [pbr::OriginalName("CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTERCLOCKWISE")] CanRxSteeringAngleRateSignCounterclockwise = 0,
        [pbr::OriginalName("CAN_RX_STEERING_ANGLE_RATE_SIGN_CLOCKWISE")] CanRxSteeringAngleRateSignClockwise = 1,
      }

      public enum Can_rx_yaw_rate_validityType {
        [pbr::OriginalName("CAN_RX_YAW_RATE_VALIDITY_INVALID")] CanRxYawRateValidityInvalid = 0,
        [pbr::OriginalName("CAN_RX_YAW_RATE_VALIDITY_VALID")] CanRxYawRateValidityValid = 1,
      }

      public enum Can_rx_vehicle_speed_directionType {
        [pbr::OriginalName("CAN_RX_VEHICLE_SPEED_DIRECTION_FORWARD")] CanRxVehicleSpeedDirectionForward = 0,
        [pbr::OriginalName("CAN_RX_VEHICLE_SPEED_DIRECTION_REVERSE")] CanRxVehicleSpeedDirectionReverse = 1,
      }

    }
    #endregion

  }

  public sealed partial class Esr_sim1_5c0 : pb::IMessage<Esr_sim1_5c0> {
    private static readonly pb::MessageParser<Esr_sim1_5c0> _parser = new pb::MessageParser<Esr_sim1_5c0>(() => new Esr_sim1_5c0());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_sim1_5c0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_sim1_5c0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_sim1_5c0(Esr_sim1_5c0 other) : this() {
      canRxSimTrackId_ = other.canRxSimTrackId_;
      canRxSimStatus_ = other.canRxSimStatus_;
      canRxSimRangeRate_ = other.canRxSimRangeRate_;
      canRxSimRangeAccel_ = other.canRxSimRangeAccel_;
      canRxSimRange_ = other.canRxSimRange_;
      canRxSimLatRate_ = other.canRxSimLatRate_;
      canRxSimLatPos_ = other.canRxSimLatPos_;
      canRxSimFunction_ = other.canRxSimFunction_;
      canRxSimAngle_ = other.canRxSimAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_sim1_5c0 Clone() {
      return new Esr_sim1_5c0(this);
    }

    /// <summary>Field number for the "can_rx_sim_track_id" field.</summary>
    public const int CanRxSimTrackIdFieldNumber = 1;
    private global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_track_idType canRxSimTrackId_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_track_idType CanRxSimTrackId {
      get { return canRxSimTrackId_; }
      set {
        canRxSimTrackId_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_status" field.</summary>
    public const int CanRxSimStatusFieldNumber = 2;
    private global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_statusType canRxSimStatus_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_statusType CanRxSimStatus {
      get { return canRxSimStatus_; }
      set {
        canRxSimStatus_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_range_rate" field.</summary>
    public const int CanRxSimRangeRateFieldNumber = 3;
    private double canRxSimRangeRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxSimRangeRate {
      get { return canRxSimRangeRate_; }
      set {
        canRxSimRangeRate_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_range_accel" field.</summary>
    public const int CanRxSimRangeAccelFieldNumber = 4;
    private double canRxSimRangeAccel_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxSimRangeAccel {
      get { return canRxSimRangeAccel_; }
      set {
        canRxSimRangeAccel_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_range" field.</summary>
    public const int CanRxSimRangeFieldNumber = 5;
    private int canRxSimRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxSimRange {
      get { return canRxSimRange_; }
      set {
        canRxSimRange_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_lat_rate" field.</summary>
    public const int CanRxSimLatRateFieldNumber = 6;
    private double canRxSimLatRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxSimLatRate {
      get { return canRxSimLatRate_; }
      set {
        canRxSimLatRate_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_lat_pos" field.</summary>
    public const int CanRxSimLatPosFieldNumber = 7;
    private double canRxSimLatPos_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxSimLatPos {
      get { return canRxSimLatPos_; }
      set {
        canRxSimLatPos_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_function" field.</summary>
    public const int CanRxSimFunctionFieldNumber = 8;
    private global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_functionType canRxSimFunction_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_functionType CanRxSimFunction {
      get { return canRxSimFunction_; }
      set {
        canRxSimFunction_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_sim_angle" field.</summary>
    public const int CanRxSimAngleFieldNumber = 9;
    private double canRxSimAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxSimAngle {
      get { return canRxSimAngle_; }
      set {
        canRxSimAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_sim1_5c0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_sim1_5c0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanRxSimTrackId != other.CanRxSimTrackId) return false;
      if (CanRxSimStatus != other.CanRxSimStatus) return false;
      if (CanRxSimRangeRate != other.CanRxSimRangeRate) return false;
      if (CanRxSimRangeAccel != other.CanRxSimRangeAccel) return false;
      if (CanRxSimRange != other.CanRxSimRange) return false;
      if (CanRxSimLatRate != other.CanRxSimLatRate) return false;
      if (CanRxSimLatPos != other.CanRxSimLatPos) return false;
      if (CanRxSimFunction != other.CanRxSimFunction) return false;
      if (CanRxSimAngle != other.CanRxSimAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanRxSimTrackId != 0) hash ^= CanRxSimTrackId.GetHashCode();
      if (CanRxSimStatus != 0) hash ^= CanRxSimStatus.GetHashCode();
      if (CanRxSimRangeRate != 0D) hash ^= CanRxSimRangeRate.GetHashCode();
      if (CanRxSimRangeAccel != 0D) hash ^= CanRxSimRangeAccel.GetHashCode();
      if (CanRxSimRange != 0) hash ^= CanRxSimRange.GetHashCode();
      if (CanRxSimLatRate != 0D) hash ^= CanRxSimLatRate.GetHashCode();
      if (CanRxSimLatPos != 0D) hash ^= CanRxSimLatPos.GetHashCode();
      if (CanRxSimFunction != 0) hash ^= CanRxSimFunction.GetHashCode();
      if (CanRxSimAngle != 0D) hash ^= CanRxSimAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanRxSimTrackId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CanRxSimTrackId);
      }
      if (CanRxSimStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CanRxSimStatus);
      }
      if (CanRxSimRangeRate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanRxSimRangeRate);
      }
      if (CanRxSimRangeAccel != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CanRxSimRangeAccel);
      }
      if (CanRxSimRange != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanRxSimRange);
      }
      if (CanRxSimLatRate != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CanRxSimLatRate);
      }
      if (CanRxSimLatPos != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(CanRxSimLatPos);
      }
      if (CanRxSimFunction != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CanRxSimFunction);
      }
      if (CanRxSimAngle != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CanRxSimAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanRxSimTrackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxSimTrackId);
      }
      if (CanRxSimStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxSimStatus);
      }
      if (CanRxSimRangeRate != 0D) {
        size += 1 + 8;
      }
      if (CanRxSimRangeAccel != 0D) {
        size += 1 + 8;
      }
      if (CanRxSimRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxSimRange);
      }
      if (CanRxSimLatRate != 0D) {
        size += 1 + 8;
      }
      if (CanRxSimLatPos != 0D) {
        size += 1 + 8;
      }
      if (CanRxSimFunction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxSimFunction);
      }
      if (CanRxSimAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_sim1_5c0 other) {
      if (other == null) {
        return;
      }
      if (other.CanRxSimTrackId != 0) {
        CanRxSimTrackId = other.CanRxSimTrackId;
      }
      if (other.CanRxSimStatus != 0) {
        CanRxSimStatus = other.CanRxSimStatus;
      }
      if (other.CanRxSimRangeRate != 0D) {
        CanRxSimRangeRate = other.CanRxSimRangeRate;
      }
      if (other.CanRxSimRangeAccel != 0D) {
        CanRxSimRangeAccel = other.CanRxSimRangeAccel;
      }
      if (other.CanRxSimRange != 0) {
        CanRxSimRange = other.CanRxSimRange;
      }
      if (other.CanRxSimLatRate != 0D) {
        CanRxSimLatRate = other.CanRxSimLatRate;
      }
      if (other.CanRxSimLatPos != 0D) {
        CanRxSimLatPos = other.CanRxSimLatPos;
      }
      if (other.CanRxSimFunction != 0) {
        CanRxSimFunction = other.CanRxSimFunction;
      }
      if (other.CanRxSimAngle != 0D) {
        CanRxSimAngle = other.CanRxSimAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            canRxSimTrackId_ = (global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_track_idType) input.ReadEnum();
            break;
          }
          case 16: {
            canRxSimStatus_ = (global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_statusType) input.ReadEnum();
            break;
          }
          case 25: {
            CanRxSimRangeRate = input.ReadDouble();
            break;
          }
          case 33: {
            CanRxSimRangeAccel = input.ReadDouble();
            break;
          }
          case 40: {
            CanRxSimRange = input.ReadInt32();
            break;
          }
          case 49: {
            CanRxSimLatRate = input.ReadDouble();
            break;
          }
          case 57: {
            CanRxSimLatPos = input.ReadDouble();
            break;
          }
          case 64: {
            canRxSimFunction_ = (global::Apollo.Drivers.Esr_sim1_5c0.Types.Can_rx_sim_functionType) input.ReadEnum();
            break;
          }
          case 73: {
            CanRxSimAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Esr_sim1_5c0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_rx_sim_track_idType {
        [pbr::OriginalName("CAN_RX_SIM_TRACK_ID_NO_TARGET")] CanRxSimTrackIdNoTarget = 0,
        [pbr::OriginalName("CAN_RX_SIM_TRACK_ID_TARGET_1")] CanRxSimTrackIdTarget1 = 1,
        [pbr::OriginalName("CAN_RX_SIM_TRACK_ID_TARGET_2")] CanRxSimTrackIdTarget2 = 2,
      }

      public enum Can_rx_sim_statusType {
        [pbr::OriginalName("CAN_RX_SIM_STATUS_INVALID")] CanRxSimStatusInvalid = 0,
        [pbr::OriginalName("CAN_RX_SIM_STATUS_NEW")] CanRxSimStatusNew = 1,
        [pbr::OriginalName("CAN_RX_SIM_STATUS_UPDATED")] CanRxSimStatusUpdated = 2,
        [pbr::OriginalName("CAN_RX_SIM_STATUS_COASTED")] CanRxSimStatusCoasted = 3,
      }

      public enum Can_rx_sim_functionType {
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_ACC")] CanRxSimFunctionAcc = 0,
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_RI")] CanRxSimFunctionRi = 1,
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_FCW_MOVE")] CanRxSimFunctionFcwMove = 2,
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_FCW_STAT")] CanRxSimFunctionFcwStat = 3,
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_CMBB_MOVE")] CanRxSimFunctionCmbbMove = 4,
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_CMBB_STAT")] CanRxSimFunctionCmbbStat = 5,
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_ALL_MOVING_ACC_FCW_CMBB")] CanRxSimFunctionAllMovingAccFcwCmbb = 6,
        [pbr::OriginalName("CAN_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB")] CanRxSimFunctionAllStatRiFcwCmbb = 7,
      }

    }
    #endregion

  }

  public sealed partial class Esr_status1_4e0 : pb::IMessage<Esr_status1_4e0> {
    private static readonly pb::MessageParser<Esr_status1_4e0> _parser = new pb::MessageParser<Esr_status1_4e0>(() => new Esr_status1_4e0());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status1_4e0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status1_4e0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status1_4e0(Esr_status1_4e0 other) : this() {
      canTxDspTimestamp_ = other.canTxDspTimestamp_;
      canTxCommError_ = other.canTxCommError_;
      canTxYawRateCalc_ = other.canTxYawRateCalc_;
      canTxVehicleSpeedCalc_ = other.canTxVehicleSpeedCalc_;
      canTxScanIndex_ = other.canTxScanIndex_;
      canTxRollingCount1_ = other.canTxRollingCount1_;
      canTxRadiusCurvatureCalc_ = other.canTxRadiusCurvatureCalc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status1_4e0 Clone() {
      return new Esr_status1_4e0(this);
    }

    /// <summary>Field number for the "can_tx_dsp_timestamp" field.</summary>
    public const int CanTxDspTimestampFieldNumber = 1;
    private double canTxDspTimestamp_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxDspTimestamp {
      get { return canTxDspTimestamp_; }
      set {
        canTxDspTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_comm_error" field.</summary>
    public const int CanTxCommErrorFieldNumber = 2;
    private bool canTxCommError_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanTxCommError {
      get { return canTxCommError_; }
      set {
        canTxCommError_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_yaw_rate_calc" field.</summary>
    public const int CanTxYawRateCalcFieldNumber = 3;
    private double canTxYawRateCalc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxYawRateCalc {
      get { return canTxYawRateCalc_; }
      set {
        canTxYawRateCalc_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_vehicle_speed_calc" field.</summary>
    public const int CanTxVehicleSpeedCalcFieldNumber = 4;
    private double canTxVehicleSpeedCalc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxVehicleSpeedCalc {
      get { return canTxVehicleSpeedCalc_; }
      set {
        canTxVehicleSpeedCalc_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_scan_index" field.</summary>
    public const int CanTxScanIndexFieldNumber = 5;
    private int canTxScanIndex_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxScanIndex {
      get { return canTxScanIndex_; }
      set {
        canTxScanIndex_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_rolling_count_1" field.</summary>
    public const int CanTxRollingCount1FieldNumber = 6;
    private int canTxRollingCount1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxRollingCount1 {
      get { return canTxRollingCount1_; }
      set {
        canTxRollingCount1_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_radius_curvature_calc" field.</summary>
    public const int CanTxRadiusCurvatureCalcFieldNumber = 7;
    private int canTxRadiusCurvatureCalc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxRadiusCurvatureCalc {
      get { return canTxRadiusCurvatureCalc_; }
      set {
        canTxRadiusCurvatureCalc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status1_4e0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status1_4e0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxDspTimestamp != other.CanTxDspTimestamp) return false;
      if (CanTxCommError != other.CanTxCommError) return false;
      if (CanTxYawRateCalc != other.CanTxYawRateCalc) return false;
      if (CanTxVehicleSpeedCalc != other.CanTxVehicleSpeedCalc) return false;
      if (CanTxScanIndex != other.CanTxScanIndex) return false;
      if (CanTxRollingCount1 != other.CanTxRollingCount1) return false;
      if (CanTxRadiusCurvatureCalc != other.CanTxRadiusCurvatureCalc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxDspTimestamp != 0D) hash ^= CanTxDspTimestamp.GetHashCode();
      if (CanTxCommError != false) hash ^= CanTxCommError.GetHashCode();
      if (CanTxYawRateCalc != 0D) hash ^= CanTxYawRateCalc.GetHashCode();
      if (CanTxVehicleSpeedCalc != 0D) hash ^= CanTxVehicleSpeedCalc.GetHashCode();
      if (CanTxScanIndex != 0) hash ^= CanTxScanIndex.GetHashCode();
      if (CanTxRollingCount1 != 0) hash ^= CanTxRollingCount1.GetHashCode();
      if (CanTxRadiusCurvatureCalc != 0) hash ^= CanTxRadiusCurvatureCalc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxDspTimestamp != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CanTxDspTimestamp);
      }
      if (CanTxCommError != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanTxCommError);
      }
      if (CanTxYawRateCalc != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanTxYawRateCalc);
      }
      if (CanTxVehicleSpeedCalc != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CanTxVehicleSpeedCalc);
      }
      if (CanTxScanIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanTxScanIndex);
      }
      if (CanTxRollingCount1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CanTxRollingCount1);
      }
      if (CanTxRadiusCurvatureCalc != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanTxRadiusCurvatureCalc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxDspTimestamp != 0D) {
        size += 1 + 8;
      }
      if (CanTxCommError != false) {
        size += 1 + 1;
      }
      if (CanTxYawRateCalc != 0D) {
        size += 1 + 8;
      }
      if (CanTxVehicleSpeedCalc != 0D) {
        size += 1 + 8;
      }
      if (CanTxScanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxScanIndex);
      }
      if (CanTxRollingCount1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxRollingCount1);
      }
      if (CanTxRadiusCurvatureCalc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxRadiusCurvatureCalc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status1_4e0 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxDspTimestamp != 0D) {
        CanTxDspTimestamp = other.CanTxDspTimestamp;
      }
      if (other.CanTxCommError != false) {
        CanTxCommError = other.CanTxCommError;
      }
      if (other.CanTxYawRateCalc != 0D) {
        CanTxYawRateCalc = other.CanTxYawRateCalc;
      }
      if (other.CanTxVehicleSpeedCalc != 0D) {
        CanTxVehicleSpeedCalc = other.CanTxVehicleSpeedCalc;
      }
      if (other.CanTxScanIndex != 0) {
        CanTxScanIndex = other.CanTxScanIndex;
      }
      if (other.CanTxRollingCount1 != 0) {
        CanTxRollingCount1 = other.CanTxRollingCount1;
      }
      if (other.CanTxRadiusCurvatureCalc != 0) {
        CanTxRadiusCurvatureCalc = other.CanTxRadiusCurvatureCalc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            CanTxDspTimestamp = input.ReadDouble();
            break;
          }
          case 16: {
            CanTxCommError = input.ReadBool();
            break;
          }
          case 25: {
            CanTxYawRateCalc = input.ReadDouble();
            break;
          }
          case 33: {
            CanTxVehicleSpeedCalc = input.ReadDouble();
            break;
          }
          case 40: {
            CanTxScanIndex = input.ReadInt32();
            break;
          }
          case 48: {
            CanTxRollingCount1 = input.ReadInt32();
            break;
          }
          case 56: {
            CanTxRadiusCurvatureCalc = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Esr_status2_4e1 : pb::IMessage<Esr_status2_4e1> {
    private static readonly pb::MessageParser<Esr_status2_4e1> _parser = new pb::MessageParser<Esr_status2_4e1>(() => new Esr_status2_4e1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status2_4e1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status2_4e1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status2_4e1(Esr_status2_4e1 other) : this() {
      canTxYawRateBias_ = other.canTxYawRateBias_;
      canTxVehSpdCompFactor_ = other.canTxVehSpdCompFactor_;
      canTxSwVersionDsp_ = other.canTxSwVersionDsp_;
      canTxTemperature_ = other.canTxTemperature_;
      canTxRawDataMode_ = other.canTxRawDataMode_;
      canTxRangePerfError_ = other.canTxRangePerfError_;
      canTxOverheatError_ = other.canTxOverheatError_;
      canTxMaximumTracksAck_ = other.canTxMaximumTracksAck_;
      canTxInternalError_ = other.canTxInternalError_;
      canTxGroupingMode_ = other.canTxGroupingMode_;
      canTxXcvrOperational_ = other.canTxXcvrOperational_;
      canTxSteeringAngleAck_ = other.canTxSteeringAngleAck_;
      canTxRollingCount2_ = other.canTxRollingCount2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status2_4e1 Clone() {
      return new Esr_status2_4e1(this);
    }

    /// <summary>Field number for the "can_tx_yaw_rate_bias" field.</summary>
    public const int CanTxYawRateBiasFieldNumber = 1;
    private double canTxYawRateBias_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxYawRateBias {
      get { return canTxYawRateBias_; }
      set {
        canTxYawRateBias_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_veh_spd_comp_factor" field.</summary>
    public const int CanTxVehSpdCompFactorFieldNumber = 2;
    private double canTxVehSpdCompFactor_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanTxVehSpdCompFactor {
      get { return canTxVehSpdCompFactor_; }
      set {
        canTxVehSpdCompFactor_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_sw_version_dsp" field.</summary>
    public const int CanTxSwVersionDspFieldNumber = 3;
    private int canTxSwVersionDsp_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSwVersionDsp {
      get { return canTxSwVersionDsp_; }
      set {
        canTxSwVersionDsp_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_temperature" field.</summary>
    public const int CanTxTemperatureFieldNumber = 4;
    private int canTxTemperature_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxTemperature {
      get { return canTxTemperature_; }
      set {
        canTxTemperature_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_raw_data_mode" field.</summary>
    public const int CanTxRawDataModeFieldNumber = 5;
    private global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_raw_data_modeType canTxRawDataMode_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_raw_data_modeType CanTxRawDataMode {
      get { return canTxRawDataMode_; }
      set {
        canTxRawDataMode_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_range_perf_error" field.</summary>
    public const int CanTxRangePerfErrorFieldNumber = 6;
    private global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_range_perf_errorType canTxRangePerfError_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_range_perf_errorType CanTxRangePerfError {
      get { return canTxRangePerfError_; }
      set {
        canTxRangePerfError_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_overheat_error" field.</summary>
    public const int CanTxOverheatErrorFieldNumber = 7;
    private global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_overheat_errorType canTxOverheatError_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_overheat_errorType CanTxOverheatError {
      get { return canTxOverheatError_; }
      set {
        canTxOverheatError_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_maximum_tracks_ack" field.</summary>
    public const int CanTxMaximumTracksAckFieldNumber = 8;
    private int canTxMaximumTracksAck_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxMaximumTracksAck {
      get { return canTxMaximumTracksAck_; }
      set {
        canTxMaximumTracksAck_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_internal_error" field.</summary>
    public const int CanTxInternalErrorFieldNumber = 9;
    private global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_internal_errorType canTxInternalError_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_internal_errorType CanTxInternalError {
      get { return canTxInternalError_; }
      set {
        canTxInternalError_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_grouping_mode" field.</summary>
    public const int CanTxGroupingModeFieldNumber = 10;
    private global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_grouping_modeType canTxGroupingMode_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_grouping_modeType CanTxGroupingMode {
      get { return canTxGroupingMode_; }
      set {
        canTxGroupingMode_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_xcvr_operational" field.</summary>
    public const int CanTxXcvrOperationalFieldNumber = 11;
    private global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_xcvr_operationalType canTxXcvrOperational_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_xcvr_operationalType CanTxXcvrOperational {
      get { return canTxXcvrOperational_; }
      set {
        canTxXcvrOperational_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_steering_angle_ack" field.</summary>
    public const int CanTxSteeringAngleAckFieldNumber = 12;
    private int canTxSteeringAngleAck_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxSteeringAngleAck {
      get { return canTxSteeringAngleAck_; }
      set {
        canTxSteeringAngleAck_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_rolling_count_2" field.</summary>
    public const int CanTxRollingCount2FieldNumber = 13;
    private int canTxRollingCount2_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxRollingCount2 {
      get { return canTxRollingCount2_; }
      set {
        canTxRollingCount2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status2_4e1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status2_4e1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxYawRateBias != other.CanTxYawRateBias) return false;
      if (CanTxVehSpdCompFactor != other.CanTxVehSpdCompFactor) return false;
      if (CanTxSwVersionDsp != other.CanTxSwVersionDsp) return false;
      if (CanTxTemperature != other.CanTxTemperature) return false;
      if (CanTxRawDataMode != other.CanTxRawDataMode) return false;
      if (CanTxRangePerfError != other.CanTxRangePerfError) return false;
      if (CanTxOverheatError != other.CanTxOverheatError) return false;
      if (CanTxMaximumTracksAck != other.CanTxMaximumTracksAck) return false;
      if (CanTxInternalError != other.CanTxInternalError) return false;
      if (CanTxGroupingMode != other.CanTxGroupingMode) return false;
      if (CanTxXcvrOperational != other.CanTxXcvrOperational) return false;
      if (CanTxSteeringAngleAck != other.CanTxSteeringAngleAck) return false;
      if (CanTxRollingCount2 != other.CanTxRollingCount2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxYawRateBias != 0D) hash ^= CanTxYawRateBias.GetHashCode();
      if (CanTxVehSpdCompFactor != 0D) hash ^= CanTxVehSpdCompFactor.GetHashCode();
      if (CanTxSwVersionDsp != 0) hash ^= CanTxSwVersionDsp.GetHashCode();
      if (CanTxTemperature != 0) hash ^= CanTxTemperature.GetHashCode();
      if (CanTxRawDataMode != 0) hash ^= CanTxRawDataMode.GetHashCode();
      if (CanTxRangePerfError != 0) hash ^= CanTxRangePerfError.GetHashCode();
      if (CanTxOverheatError != 0) hash ^= CanTxOverheatError.GetHashCode();
      if (CanTxMaximumTracksAck != 0) hash ^= CanTxMaximumTracksAck.GetHashCode();
      if (CanTxInternalError != 0) hash ^= CanTxInternalError.GetHashCode();
      if (CanTxGroupingMode != 0) hash ^= CanTxGroupingMode.GetHashCode();
      if (CanTxXcvrOperational != 0) hash ^= CanTxXcvrOperational.GetHashCode();
      if (CanTxSteeringAngleAck != 0) hash ^= CanTxSteeringAngleAck.GetHashCode();
      if (CanTxRollingCount2 != 0) hash ^= CanTxRollingCount2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxYawRateBias != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CanTxYawRateBias);
      }
      if (CanTxVehSpdCompFactor != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CanTxVehSpdCompFactor);
      }
      if (CanTxSwVersionDsp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CanTxSwVersionDsp);
      }
      if (CanTxTemperature != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxTemperature);
      }
      if (CanTxRawDataMode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CanTxRawDataMode);
      }
      if (CanTxRangePerfError != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CanTxRangePerfError);
      }
      if (CanTxOverheatError != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CanTxOverheatError);
      }
      if (CanTxMaximumTracksAck != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CanTxMaximumTracksAck);
      }
      if (CanTxInternalError != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CanTxInternalError);
      }
      if (CanTxGroupingMode != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CanTxGroupingMode);
      }
      if (CanTxXcvrOperational != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) CanTxXcvrOperational);
      }
      if (CanTxSteeringAngleAck != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CanTxSteeringAngleAck);
      }
      if (CanTxRollingCount2 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CanTxRollingCount2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxYawRateBias != 0D) {
        size += 1 + 8;
      }
      if (CanTxVehSpdCompFactor != 0D) {
        size += 1 + 8;
      }
      if (CanTxSwVersionDsp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSwVersionDsp);
      }
      if (CanTxTemperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxTemperature);
      }
      if (CanTxRawDataMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxRawDataMode);
      }
      if (CanTxRangePerfError != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxRangePerfError);
      }
      if (CanTxOverheatError != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxOverheatError);
      }
      if (CanTxMaximumTracksAck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxMaximumTracksAck);
      }
      if (CanTxInternalError != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxInternalError);
      }
      if (CanTxGroupingMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxGroupingMode);
      }
      if (CanTxXcvrOperational != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanTxXcvrOperational);
      }
      if (CanTxSteeringAngleAck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxSteeringAngleAck);
      }
      if (CanTxRollingCount2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxRollingCount2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status2_4e1 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxYawRateBias != 0D) {
        CanTxYawRateBias = other.CanTxYawRateBias;
      }
      if (other.CanTxVehSpdCompFactor != 0D) {
        CanTxVehSpdCompFactor = other.CanTxVehSpdCompFactor;
      }
      if (other.CanTxSwVersionDsp != 0) {
        CanTxSwVersionDsp = other.CanTxSwVersionDsp;
      }
      if (other.CanTxTemperature != 0) {
        CanTxTemperature = other.CanTxTemperature;
      }
      if (other.CanTxRawDataMode != 0) {
        CanTxRawDataMode = other.CanTxRawDataMode;
      }
      if (other.CanTxRangePerfError != 0) {
        CanTxRangePerfError = other.CanTxRangePerfError;
      }
      if (other.CanTxOverheatError != 0) {
        CanTxOverheatError = other.CanTxOverheatError;
      }
      if (other.CanTxMaximumTracksAck != 0) {
        CanTxMaximumTracksAck = other.CanTxMaximumTracksAck;
      }
      if (other.CanTxInternalError != 0) {
        CanTxInternalError = other.CanTxInternalError;
      }
      if (other.CanTxGroupingMode != 0) {
        CanTxGroupingMode = other.CanTxGroupingMode;
      }
      if (other.CanTxXcvrOperational != 0) {
        CanTxXcvrOperational = other.CanTxXcvrOperational;
      }
      if (other.CanTxSteeringAngleAck != 0) {
        CanTxSteeringAngleAck = other.CanTxSteeringAngleAck;
      }
      if (other.CanTxRollingCount2 != 0) {
        CanTxRollingCount2 = other.CanTxRollingCount2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            CanTxYawRateBias = input.ReadDouble();
            break;
          }
          case 17: {
            CanTxVehSpdCompFactor = input.ReadDouble();
            break;
          }
          case 24: {
            CanTxSwVersionDsp = input.ReadInt32();
            break;
          }
          case 32: {
            CanTxTemperature = input.ReadInt32();
            break;
          }
          case 40: {
            canTxRawDataMode_ = (global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_raw_data_modeType) input.ReadEnum();
            break;
          }
          case 48: {
            canTxRangePerfError_ = (global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_range_perf_errorType) input.ReadEnum();
            break;
          }
          case 56: {
            canTxOverheatError_ = (global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_overheat_errorType) input.ReadEnum();
            break;
          }
          case 64: {
            CanTxMaximumTracksAck = input.ReadInt32();
            break;
          }
          case 72: {
            canTxInternalError_ = (global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_internal_errorType) input.ReadEnum();
            break;
          }
          case 80: {
            canTxGroupingMode_ = (global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_grouping_modeType) input.ReadEnum();
            break;
          }
          case 88: {
            canTxXcvrOperational_ = (global::Apollo.Drivers.Esr_status2_4e1.Types.Can_tx_xcvr_operationalType) input.ReadEnum();
            break;
          }
          case 96: {
            CanTxSteeringAngleAck = input.ReadInt32();
            break;
          }
          case 104: {
            CanTxRollingCount2 = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Esr_status2_4e1 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_tx_raw_data_modeType {
        [pbr::OriginalName("CAN_TX_RAW_DATA_MODE_FILTERED")] CanTxRawDataModeFiltered = 0,
        [pbr::OriginalName("CAN_TX_RAW_DATA_MODE_RAW")] CanTxRawDataModeRaw = 1,
      }

      public enum Can_tx_range_perf_errorType {
        [pbr::OriginalName("CAN_TX_RANGE_PERF_ERROR_NOT_BLOCKED")] CanTxRangePerfErrorNotBlocked = 0,
        [pbr::OriginalName("CAN_TX_RANGE_PERF_ERROR_BLOCKED")] CanTxRangePerfErrorBlocked = 1,
      }

      public enum Can_tx_overheat_errorType {
        [pbr::OriginalName("CAN_TX_OVERHEAT_ERROR_NOT_OVERTEMP")] CanTxOverheatErrorNotOvertemp = 0,
        [pbr::OriginalName("CAN_TX_OVERHEAT_ERROR_OVERTEMP")] CanTxOverheatErrorOvertemp = 1,
      }

      public enum Can_tx_internal_errorType {
        [pbr::OriginalName("CAN_TX_INTERNAL_ERROR_NOT_FAILED")] CanTxInternalErrorNotFailed = 0,
        [pbr::OriginalName("CAN_TX_INTERNAL_ERROR_FAILED")] CanTxInternalErrorFailed = 1,
      }

      public enum Can_tx_grouping_modeType {
        [pbr::OriginalName("CAN_TX_GROUPING_MODE_NO_GROUPING")] CanTxGroupingModeNoGrouping = 0,
        [pbr::OriginalName("CAN_TX_GROUPING_MODE_GROUP_MOVING_ONLY")] CanTxGroupingModeGroupMovingOnly = 1,
        [pbr::OriginalName("CAN_TX_GROUPING_MODE_GROUP_STATIONARY_ONLY")] CanTxGroupingModeGroupStationaryOnly = 2,
        [pbr::OriginalName("CAN_TX_GROUPING_MODE_GROUP_MOVING_STATIONARY")] CanTxGroupingModeGroupMovingStationary = 3,
      }

      public enum Can_tx_xcvr_operationalType {
        [pbr::OriginalName("CAN_TX_XCVR_OPERATIONAL_OFF")] CanTxXcvrOperationalOff = 0,
        [pbr::OriginalName("CAN_TX_XCVR_OPERATIONAL_ON")] CanTxXcvrOperationalOn = 1,
      }

    }
    #endregion

  }

  public sealed partial class Esr_status8_5e7 : pb::IMessage<Esr_status8_5e7> {
    private static readonly pb::MessageParser<Esr_status8_5e7> _parser = new pb::MessageParser<Esr_status8_5e7>(() => new Esr_status8_5e7());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status8_5e7> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status8_5e7() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status8_5e7(Esr_status8_5e7 other) : this() {
      canTxHistoryFault7_ = other.canTxHistoryFault7_;
      canTxHistoryFault6_ = other.canTxHistoryFault6_;
      canTxHistoryFault5_ = other.canTxHistoryFault5_;
      canTxHistoryFault4_ = other.canTxHistoryFault4_;
      canTxHistoryFault3_ = other.canTxHistoryFault3_;
      canTxHistoryFault2_ = other.canTxHistoryFault2_;
      canTxHistoryFault1_ = other.canTxHistoryFault1_;
      canTxHistoryFault0_ = other.canTxHistoryFault0_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status8_5e7 Clone() {
      return new Esr_status8_5e7(this);
    }

    /// <summary>Field number for the "can_tx_history_fault_7" field.</summary>
    public const int CanTxHistoryFault7FieldNumber = 1;
    private int canTxHistoryFault7_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault7 {
      get { return canTxHistoryFault7_; }
      set {
        canTxHistoryFault7_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_history_fault_6" field.</summary>
    public const int CanTxHistoryFault6FieldNumber = 2;
    private int canTxHistoryFault6_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault6 {
      get { return canTxHistoryFault6_; }
      set {
        canTxHistoryFault6_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_history_fault_5" field.</summary>
    public const int CanTxHistoryFault5FieldNumber = 3;
    private int canTxHistoryFault5_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault5 {
      get { return canTxHistoryFault5_; }
      set {
        canTxHistoryFault5_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_history_fault_4" field.</summary>
    public const int CanTxHistoryFault4FieldNumber = 4;
    private int canTxHistoryFault4_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault4 {
      get { return canTxHistoryFault4_; }
      set {
        canTxHistoryFault4_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_history_fault_3" field.</summary>
    public const int CanTxHistoryFault3FieldNumber = 5;
    private int canTxHistoryFault3_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault3 {
      get { return canTxHistoryFault3_; }
      set {
        canTxHistoryFault3_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_history_fault_2" field.</summary>
    public const int CanTxHistoryFault2FieldNumber = 6;
    private int canTxHistoryFault2_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault2 {
      get { return canTxHistoryFault2_; }
      set {
        canTxHistoryFault2_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_history_fault_1" field.</summary>
    public const int CanTxHistoryFault1FieldNumber = 7;
    private int canTxHistoryFault1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault1 {
      get { return canTxHistoryFault1_; }
      set {
        canTxHistoryFault1_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_history_fault_0" field.</summary>
    public const int CanTxHistoryFault0FieldNumber = 8;
    private int canTxHistoryFault0_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxHistoryFault0 {
      get { return canTxHistoryFault0_; }
      set {
        canTxHistoryFault0_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status8_5e7);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status8_5e7 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxHistoryFault7 != other.CanTxHistoryFault7) return false;
      if (CanTxHistoryFault6 != other.CanTxHistoryFault6) return false;
      if (CanTxHistoryFault5 != other.CanTxHistoryFault5) return false;
      if (CanTxHistoryFault4 != other.CanTxHistoryFault4) return false;
      if (CanTxHistoryFault3 != other.CanTxHistoryFault3) return false;
      if (CanTxHistoryFault2 != other.CanTxHistoryFault2) return false;
      if (CanTxHistoryFault1 != other.CanTxHistoryFault1) return false;
      if (CanTxHistoryFault0 != other.CanTxHistoryFault0) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxHistoryFault7 != 0) hash ^= CanTxHistoryFault7.GetHashCode();
      if (CanTxHistoryFault6 != 0) hash ^= CanTxHistoryFault6.GetHashCode();
      if (CanTxHistoryFault5 != 0) hash ^= CanTxHistoryFault5.GetHashCode();
      if (CanTxHistoryFault4 != 0) hash ^= CanTxHistoryFault4.GetHashCode();
      if (CanTxHistoryFault3 != 0) hash ^= CanTxHistoryFault3.GetHashCode();
      if (CanTxHistoryFault2 != 0) hash ^= CanTxHistoryFault2.GetHashCode();
      if (CanTxHistoryFault1 != 0) hash ^= CanTxHistoryFault1.GetHashCode();
      if (CanTxHistoryFault0 != 0) hash ^= CanTxHistoryFault0.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxHistoryFault7 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxHistoryFault7);
      }
      if (CanTxHistoryFault6 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanTxHistoryFault6);
      }
      if (CanTxHistoryFault5 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CanTxHistoryFault5);
      }
      if (CanTxHistoryFault4 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxHistoryFault4);
      }
      if (CanTxHistoryFault3 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanTxHistoryFault3);
      }
      if (CanTxHistoryFault2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CanTxHistoryFault2);
      }
      if (CanTxHistoryFault1 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanTxHistoryFault1);
      }
      if (CanTxHistoryFault0 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CanTxHistoryFault0);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxHistoryFault7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault7);
      }
      if (CanTxHistoryFault6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault6);
      }
      if (CanTxHistoryFault5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault5);
      }
      if (CanTxHistoryFault4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault4);
      }
      if (CanTxHistoryFault3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault3);
      }
      if (CanTxHistoryFault2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault2);
      }
      if (CanTxHistoryFault1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault1);
      }
      if (CanTxHistoryFault0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxHistoryFault0);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status8_5e7 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxHistoryFault7 != 0) {
        CanTxHistoryFault7 = other.CanTxHistoryFault7;
      }
      if (other.CanTxHistoryFault6 != 0) {
        CanTxHistoryFault6 = other.CanTxHistoryFault6;
      }
      if (other.CanTxHistoryFault5 != 0) {
        CanTxHistoryFault5 = other.CanTxHistoryFault5;
      }
      if (other.CanTxHistoryFault4 != 0) {
        CanTxHistoryFault4 = other.CanTxHistoryFault4;
      }
      if (other.CanTxHistoryFault3 != 0) {
        CanTxHistoryFault3 = other.CanTxHistoryFault3;
      }
      if (other.CanTxHistoryFault2 != 0) {
        CanTxHistoryFault2 = other.CanTxHistoryFault2;
      }
      if (other.CanTxHistoryFault1 != 0) {
        CanTxHistoryFault1 = other.CanTxHistoryFault1;
      }
      if (other.CanTxHistoryFault0 != 0) {
        CanTxHistoryFault0 = other.CanTxHistoryFault0;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxHistoryFault7 = input.ReadInt32();
            break;
          }
          case 16: {
            CanTxHistoryFault6 = input.ReadInt32();
            break;
          }
          case 24: {
            CanTxHistoryFault5 = input.ReadInt32();
            break;
          }
          case 32: {
            CanTxHistoryFault4 = input.ReadInt32();
            break;
          }
          case 40: {
            CanTxHistoryFault3 = input.ReadInt32();
            break;
          }
          case 48: {
            CanTxHistoryFault2 = input.ReadInt32();
            break;
          }
          case 56: {
            CanTxHistoryFault1 = input.ReadInt32();
            break;
          }
          case 64: {
            CanTxHistoryFault0 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Esr_status7_5e6 : pb::IMessage<Esr_status7_5e6> {
    private static readonly pb::MessageParser<Esr_status7_5e6> _parser = new pb::MessageParser<Esr_status7_5e6>(() => new Esr_status7_5e6());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Esr_status7_5e6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status7_5e6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status7_5e6(Esr_status7_5e6 other) : this() {
      canTxActiveFault7_ = other.canTxActiveFault7_;
      canTxActiveFault6_ = other.canTxActiveFault6_;
      canTxActiveFault5_ = other.canTxActiveFault5_;
      canTxActiveFault4_ = other.canTxActiveFault4_;
      canTxActiveFault3_ = other.canTxActiveFault3_;
      canTxActiveFault2_ = other.canTxActiveFault2_;
      canTxActiveFault0_ = other.canTxActiveFault0_;
      canTxActiveFault1_ = other.canTxActiveFault1_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Esr_status7_5e6 Clone() {
      return new Esr_status7_5e6(this);
    }

    /// <summary>Field number for the "can_tx_active_fault_7" field.</summary>
    public const int CanTxActiveFault7FieldNumber = 1;
    private int canTxActiveFault7_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault7 {
      get { return canTxActiveFault7_; }
      set {
        canTxActiveFault7_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_active_fault_6" field.</summary>
    public const int CanTxActiveFault6FieldNumber = 2;
    private int canTxActiveFault6_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault6 {
      get { return canTxActiveFault6_; }
      set {
        canTxActiveFault6_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_active_fault_5" field.</summary>
    public const int CanTxActiveFault5FieldNumber = 3;
    private int canTxActiveFault5_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault5 {
      get { return canTxActiveFault5_; }
      set {
        canTxActiveFault5_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_active_fault_4" field.</summary>
    public const int CanTxActiveFault4FieldNumber = 4;
    private int canTxActiveFault4_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault4 {
      get { return canTxActiveFault4_; }
      set {
        canTxActiveFault4_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_active_fault_3" field.</summary>
    public const int CanTxActiveFault3FieldNumber = 5;
    private int canTxActiveFault3_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault3 {
      get { return canTxActiveFault3_; }
      set {
        canTxActiveFault3_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_active_fault_2" field.</summary>
    public const int CanTxActiveFault2FieldNumber = 6;
    private int canTxActiveFault2_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault2 {
      get { return canTxActiveFault2_; }
      set {
        canTxActiveFault2_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_active_fault_0" field.</summary>
    public const int CanTxActiveFault0FieldNumber = 7;
    private int canTxActiveFault0_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault0 {
      get { return canTxActiveFault0_; }
      set {
        canTxActiveFault0_ = value;
      }
    }

    /// <summary>Field number for the "can_tx_active_fault_1" field.</summary>
    public const int CanTxActiveFault1FieldNumber = 8;
    private int canTxActiveFault1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTxActiveFault1 {
      get { return canTxActiveFault1_; }
      set {
        canTxActiveFault1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Esr_status7_5e6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Esr_status7_5e6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanTxActiveFault7 != other.CanTxActiveFault7) return false;
      if (CanTxActiveFault6 != other.CanTxActiveFault6) return false;
      if (CanTxActiveFault5 != other.CanTxActiveFault5) return false;
      if (CanTxActiveFault4 != other.CanTxActiveFault4) return false;
      if (CanTxActiveFault3 != other.CanTxActiveFault3) return false;
      if (CanTxActiveFault2 != other.CanTxActiveFault2) return false;
      if (CanTxActiveFault0 != other.CanTxActiveFault0) return false;
      if (CanTxActiveFault1 != other.CanTxActiveFault1) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanTxActiveFault7 != 0) hash ^= CanTxActiveFault7.GetHashCode();
      if (CanTxActiveFault6 != 0) hash ^= CanTxActiveFault6.GetHashCode();
      if (CanTxActiveFault5 != 0) hash ^= CanTxActiveFault5.GetHashCode();
      if (CanTxActiveFault4 != 0) hash ^= CanTxActiveFault4.GetHashCode();
      if (CanTxActiveFault3 != 0) hash ^= CanTxActiveFault3.GetHashCode();
      if (CanTxActiveFault2 != 0) hash ^= CanTxActiveFault2.GetHashCode();
      if (CanTxActiveFault0 != 0) hash ^= CanTxActiveFault0.GetHashCode();
      if (CanTxActiveFault1 != 0) hash ^= CanTxActiveFault1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanTxActiveFault7 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanTxActiveFault7);
      }
      if (CanTxActiveFault6 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CanTxActiveFault6);
      }
      if (CanTxActiveFault5 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CanTxActiveFault5);
      }
      if (CanTxActiveFault4 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanTxActiveFault4);
      }
      if (CanTxActiveFault3 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanTxActiveFault3);
      }
      if (CanTxActiveFault2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CanTxActiveFault2);
      }
      if (CanTxActiveFault0 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanTxActiveFault0);
      }
      if (CanTxActiveFault1 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CanTxActiveFault1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanTxActiveFault7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault7);
      }
      if (CanTxActiveFault6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault6);
      }
      if (CanTxActiveFault5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault5);
      }
      if (CanTxActiveFault4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault4);
      }
      if (CanTxActiveFault3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault3);
      }
      if (CanTxActiveFault2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault2);
      }
      if (CanTxActiveFault0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault0);
      }
      if (CanTxActiveFault1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTxActiveFault1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Esr_status7_5e6 other) {
      if (other == null) {
        return;
      }
      if (other.CanTxActiveFault7 != 0) {
        CanTxActiveFault7 = other.CanTxActiveFault7;
      }
      if (other.CanTxActiveFault6 != 0) {
        CanTxActiveFault6 = other.CanTxActiveFault6;
      }
      if (other.CanTxActiveFault5 != 0) {
        CanTxActiveFault5 = other.CanTxActiveFault5;
      }
      if (other.CanTxActiveFault4 != 0) {
        CanTxActiveFault4 = other.CanTxActiveFault4;
      }
      if (other.CanTxActiveFault3 != 0) {
        CanTxActiveFault3 = other.CanTxActiveFault3;
      }
      if (other.CanTxActiveFault2 != 0) {
        CanTxActiveFault2 = other.CanTxActiveFault2;
      }
      if (other.CanTxActiveFault0 != 0) {
        CanTxActiveFault0 = other.CanTxActiveFault0;
      }
      if (other.CanTxActiveFault1 != 0) {
        CanTxActiveFault1 = other.CanTxActiveFault1;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanTxActiveFault7 = input.ReadInt32();
            break;
          }
          case 16: {
            CanTxActiveFault6 = input.ReadInt32();
            break;
          }
          case 24: {
            CanTxActiveFault5 = input.ReadInt32();
            break;
          }
          case 32: {
            CanTxActiveFault4 = input.ReadInt32();
            break;
          }
          case 40: {
            CanTxActiveFault3 = input.ReadInt32();
            break;
          }
          case 48: {
            CanTxActiveFault2 = input.ReadInt32();
            break;
          }
          case 56: {
            CanTxActiveFault0 = input.ReadInt32();
            break;
          }
          case 64: {
            CanTxActiveFault1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vehicle3_5f2 : pb::IMessage<Vehicle3_5f2> {
    private static readonly pb::MessageParser<Vehicle3_5f2> _parser = new pb::MessageParser<Vehicle3_5f2>(() => new Vehicle3_5f2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle3_5f2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle3_5f2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle3_5f2(Vehicle3_5f2 other) : this() {
      canRxServAlignUpdatesNeed_ = other.canRxServAlignUpdatesNeed_;
      canRxServAlignType_ = other.canRxServAlignType_;
      canRxServAlignEnable_ = other.canRxServAlignEnable_;
      canRxAalignAvgCtrTotal_ = other.canRxAalignAvgCtrTotal_;
      canRxAutoAlignConverged_ = other.canRxAutoAlignConverged_;
      canRxAutoAlignDisable_ = other.canRxAutoAlignDisable_;
      canRxAngleMountingOffset_ = other.canRxAngleMountingOffset_;
      canRxWheelSlip_ = other.canRxWheelSlip_;
      canRxRadarHeight_ = other.canRxRadarHeight_;
      canRxRadarFovMr_ = other.canRxRadarFovMr_;
      canRxRadarFovLr_ = other.canRxRadarFovLr_;
      canRxLongAccelValidity_ = other.canRxLongAccelValidity_;
      canRxLongAccel_ = other.canRxLongAccel_;
      canRxLatAccelValidity_ = other.canRxLatAccelValidity_;
      canRxLatAccel_ = other.canRxLatAccel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle3_5f2 Clone() {
      return new Vehicle3_5f2(this);
    }

    /// <summary>Field number for the "can_rx_serv_align_updates_need" field.</summary>
    public const int CanRxServAlignUpdatesNeedFieldNumber = 1;
    private int canRxServAlignUpdatesNeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxServAlignUpdatesNeed {
      get { return canRxServAlignUpdatesNeed_; }
      set {
        canRxServAlignUpdatesNeed_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_serv_align_type" field.</summary>
    public const int CanRxServAlignTypeFieldNumber = 2;
    private global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_typeType canRxServAlignType_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_typeType CanRxServAlignType {
      get { return canRxServAlignType_; }
      set {
        canRxServAlignType_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_serv_align_enable" field.</summary>
    public const int CanRxServAlignEnableFieldNumber = 3;
    private global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_enableType canRxServAlignEnable_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_enableType CanRxServAlignEnable {
      get { return canRxServAlignEnable_; }
      set {
        canRxServAlignEnable_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_aalign_avg_ctr_total" field.</summary>
    public const int CanRxAalignAvgCtrTotalFieldNumber = 4;
    private double canRxAalignAvgCtrTotal_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxAalignAvgCtrTotal {
      get { return canRxAalignAvgCtrTotal_; }
      set {
        canRxAalignAvgCtrTotal_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_auto_align_converged" field.</summary>
    public const int CanRxAutoAlignConvergedFieldNumber = 5;
    private global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_convergedType canRxAutoAlignConverged_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_convergedType CanRxAutoAlignConverged {
      get { return canRxAutoAlignConverged_; }
      set {
        canRxAutoAlignConverged_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_auto_align_disable" field.</summary>
    public const int CanRxAutoAlignDisableFieldNumber = 6;
    private global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_disableType canRxAutoAlignDisable_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_disableType CanRxAutoAlignDisable {
      get { return canRxAutoAlignDisable_; }
      set {
        canRxAutoAlignDisable_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_angle_mounting_offset" field.</summary>
    public const int CanRxAngleMountingOffsetFieldNumber = 7;
    private double canRxAngleMountingOffset_;
    /// <summary>
    /// (+) = clockwise  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxAngleMountingOffset {
      get { return canRxAngleMountingOffset_; }
      set {
        canRxAngleMountingOffset_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_wheel_slip" field.</summary>
    public const int CanRxWheelSlipFieldNumber = 8;
    private global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_wheel_slipType canRxWheelSlip_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_wheel_slipType CanRxWheelSlip {
      get { return canRxWheelSlip_; }
      set {
        canRxWheelSlip_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_radar_height" field.</summary>
    public const int CanRxRadarHeightFieldNumber = 9;
    private int canRxRadarHeight_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxRadarHeight {
      get { return canRxRadarHeight_; }
      set {
        canRxRadarHeight_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_radar_fov_mr" field.</summary>
    public const int CanRxRadarFovMrFieldNumber = 10;
    private int canRxRadarFovMr_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxRadarFovMr {
      get { return canRxRadarFovMr_; }
      set {
        canRxRadarFovMr_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_radar_fov_lr" field.</summary>
    public const int CanRxRadarFovLrFieldNumber = 11;
    private int canRxRadarFovLr_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxRadarFovLr {
      get { return canRxRadarFovLr_; }
      set {
        canRxRadarFovLr_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_long_accel_validity" field.</summary>
    public const int CanRxLongAccelValidityFieldNumber = 12;
    private global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_long_accel_validityType canRxLongAccelValidity_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_long_accel_validityType CanRxLongAccelValidity {
      get { return canRxLongAccelValidity_; }
      set {
        canRxLongAccelValidity_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_long_accel" field.</summary>
    public const int CanRxLongAccelFieldNumber = 13;
    private double canRxLongAccel_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxLongAccel {
      get { return canRxLongAccel_; }
      set {
        canRxLongAccel_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_lat_accel_validity" field.</summary>
    public const int CanRxLatAccelValidityFieldNumber = 14;
    private global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_lat_accel_validityType canRxLatAccelValidity_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_lat_accel_validityType CanRxLatAccelValidity {
      get { return canRxLatAccelValidity_; }
      set {
        canRxLatAccelValidity_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_lat_accel" field.</summary>
    public const int CanRxLatAccelFieldNumber = 15;
    private double canRxLatAccel_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxLatAccel {
      get { return canRxLatAccel_; }
      set {
        canRxLatAccel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle3_5f2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle3_5f2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanRxServAlignUpdatesNeed != other.CanRxServAlignUpdatesNeed) return false;
      if (CanRxServAlignType != other.CanRxServAlignType) return false;
      if (CanRxServAlignEnable != other.CanRxServAlignEnable) return false;
      if (CanRxAalignAvgCtrTotal != other.CanRxAalignAvgCtrTotal) return false;
      if (CanRxAutoAlignConverged != other.CanRxAutoAlignConverged) return false;
      if (CanRxAutoAlignDisable != other.CanRxAutoAlignDisable) return false;
      if (CanRxAngleMountingOffset != other.CanRxAngleMountingOffset) return false;
      if (CanRxWheelSlip != other.CanRxWheelSlip) return false;
      if (CanRxRadarHeight != other.CanRxRadarHeight) return false;
      if (CanRxRadarFovMr != other.CanRxRadarFovMr) return false;
      if (CanRxRadarFovLr != other.CanRxRadarFovLr) return false;
      if (CanRxLongAccelValidity != other.CanRxLongAccelValidity) return false;
      if (CanRxLongAccel != other.CanRxLongAccel) return false;
      if (CanRxLatAccelValidity != other.CanRxLatAccelValidity) return false;
      if (CanRxLatAccel != other.CanRxLatAccel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanRxServAlignUpdatesNeed != 0) hash ^= CanRxServAlignUpdatesNeed.GetHashCode();
      if (CanRxServAlignType != 0) hash ^= CanRxServAlignType.GetHashCode();
      if (CanRxServAlignEnable != 0) hash ^= CanRxServAlignEnable.GetHashCode();
      if (CanRxAalignAvgCtrTotal != 0D) hash ^= CanRxAalignAvgCtrTotal.GetHashCode();
      if (CanRxAutoAlignConverged != 0) hash ^= CanRxAutoAlignConverged.GetHashCode();
      if (CanRxAutoAlignDisable != 0) hash ^= CanRxAutoAlignDisable.GetHashCode();
      if (CanRxAngleMountingOffset != 0D) hash ^= CanRxAngleMountingOffset.GetHashCode();
      if (CanRxWheelSlip != 0) hash ^= CanRxWheelSlip.GetHashCode();
      if (CanRxRadarHeight != 0) hash ^= CanRxRadarHeight.GetHashCode();
      if (CanRxRadarFovMr != 0) hash ^= CanRxRadarFovMr.GetHashCode();
      if (CanRxRadarFovLr != 0) hash ^= CanRxRadarFovLr.GetHashCode();
      if (CanRxLongAccelValidity != 0) hash ^= CanRxLongAccelValidity.GetHashCode();
      if (CanRxLongAccel != 0D) hash ^= CanRxLongAccel.GetHashCode();
      if (CanRxLatAccelValidity != 0) hash ^= CanRxLatAccelValidity.GetHashCode();
      if (CanRxLatAccel != 0D) hash ^= CanRxLatAccel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanRxServAlignUpdatesNeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CanRxServAlignUpdatesNeed);
      }
      if (CanRxServAlignType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CanRxServAlignType);
      }
      if (CanRxServAlignEnable != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CanRxServAlignEnable);
      }
      if (CanRxAalignAvgCtrTotal != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CanRxAalignAvgCtrTotal);
      }
      if (CanRxAutoAlignConverged != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CanRxAutoAlignConverged);
      }
      if (CanRxAutoAlignDisable != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CanRxAutoAlignDisable);
      }
      if (CanRxAngleMountingOffset != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(CanRxAngleMountingOffset);
      }
      if (CanRxWheelSlip != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CanRxWheelSlip);
      }
      if (CanRxRadarHeight != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CanRxRadarHeight);
      }
      if (CanRxRadarFovMr != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CanRxRadarFovMr);
      }
      if (CanRxRadarFovLr != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CanRxRadarFovLr);
      }
      if (CanRxLongAccelValidity != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CanRxLongAccelValidity);
      }
      if (CanRxLongAccel != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(CanRxLongAccel);
      }
      if (CanRxLatAccelValidity != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) CanRxLatAccelValidity);
      }
      if (CanRxLatAccel != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(CanRxLatAccel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanRxServAlignUpdatesNeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxServAlignUpdatesNeed);
      }
      if (CanRxServAlignType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxServAlignType);
      }
      if (CanRxServAlignEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxServAlignEnable);
      }
      if (CanRxAalignAvgCtrTotal != 0D) {
        size += 1 + 8;
      }
      if (CanRxAutoAlignConverged != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxAutoAlignConverged);
      }
      if (CanRxAutoAlignDisable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxAutoAlignDisable);
      }
      if (CanRxAngleMountingOffset != 0D) {
        size += 1 + 8;
      }
      if (CanRxWheelSlip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxWheelSlip);
      }
      if (CanRxRadarHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxRadarHeight);
      }
      if (CanRxRadarFovMr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxRadarFovMr);
      }
      if (CanRxRadarFovLr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxRadarFovLr);
      }
      if (CanRxLongAccelValidity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxLongAccelValidity);
      }
      if (CanRxLongAccel != 0D) {
        size += 1 + 8;
      }
      if (CanRxLatAccelValidity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxLatAccelValidity);
      }
      if (CanRxLatAccel != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle3_5f2 other) {
      if (other == null) {
        return;
      }
      if (other.CanRxServAlignUpdatesNeed != 0) {
        CanRxServAlignUpdatesNeed = other.CanRxServAlignUpdatesNeed;
      }
      if (other.CanRxServAlignType != 0) {
        CanRxServAlignType = other.CanRxServAlignType;
      }
      if (other.CanRxServAlignEnable != 0) {
        CanRxServAlignEnable = other.CanRxServAlignEnable;
      }
      if (other.CanRxAalignAvgCtrTotal != 0D) {
        CanRxAalignAvgCtrTotal = other.CanRxAalignAvgCtrTotal;
      }
      if (other.CanRxAutoAlignConverged != 0) {
        CanRxAutoAlignConverged = other.CanRxAutoAlignConverged;
      }
      if (other.CanRxAutoAlignDisable != 0) {
        CanRxAutoAlignDisable = other.CanRxAutoAlignDisable;
      }
      if (other.CanRxAngleMountingOffset != 0D) {
        CanRxAngleMountingOffset = other.CanRxAngleMountingOffset;
      }
      if (other.CanRxWheelSlip != 0) {
        CanRxWheelSlip = other.CanRxWheelSlip;
      }
      if (other.CanRxRadarHeight != 0) {
        CanRxRadarHeight = other.CanRxRadarHeight;
      }
      if (other.CanRxRadarFovMr != 0) {
        CanRxRadarFovMr = other.CanRxRadarFovMr;
      }
      if (other.CanRxRadarFovLr != 0) {
        CanRxRadarFovLr = other.CanRxRadarFovLr;
      }
      if (other.CanRxLongAccelValidity != 0) {
        CanRxLongAccelValidity = other.CanRxLongAccelValidity;
      }
      if (other.CanRxLongAccel != 0D) {
        CanRxLongAccel = other.CanRxLongAccel;
      }
      if (other.CanRxLatAccelValidity != 0) {
        CanRxLatAccelValidity = other.CanRxLatAccelValidity;
      }
      if (other.CanRxLatAccel != 0D) {
        CanRxLatAccel = other.CanRxLatAccel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CanRxServAlignUpdatesNeed = input.ReadInt32();
            break;
          }
          case 16: {
            canRxServAlignType_ = (global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_typeType) input.ReadEnum();
            break;
          }
          case 24: {
            canRxServAlignEnable_ = (global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_serv_align_enableType) input.ReadEnum();
            break;
          }
          case 33: {
            CanRxAalignAvgCtrTotal = input.ReadDouble();
            break;
          }
          case 40: {
            canRxAutoAlignConverged_ = (global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_convergedType) input.ReadEnum();
            break;
          }
          case 48: {
            canRxAutoAlignDisable_ = (global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_auto_align_disableType) input.ReadEnum();
            break;
          }
          case 57: {
            CanRxAngleMountingOffset = input.ReadDouble();
            break;
          }
          case 64: {
            canRxWheelSlip_ = (global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_wheel_slipType) input.ReadEnum();
            break;
          }
          case 72: {
            CanRxRadarHeight = input.ReadInt32();
            break;
          }
          case 80: {
            CanRxRadarFovMr = input.ReadInt32();
            break;
          }
          case 88: {
            CanRxRadarFovLr = input.ReadInt32();
            break;
          }
          case 96: {
            canRxLongAccelValidity_ = (global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_long_accel_validityType) input.ReadEnum();
            break;
          }
          case 105: {
            CanRxLongAccel = input.ReadDouble();
            break;
          }
          case 112: {
            canRxLatAccelValidity_ = (global::Apollo.Drivers.Vehicle3_5f2.Types.Can_rx_lat_accel_validityType) input.ReadEnum();
            break;
          }
          case 121: {
            CanRxLatAccel = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vehicle3_5f2 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_rx_serv_align_typeType {
        [pbr::OriginalName("CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER")] CanRxServAlignTypeAutoOrDealer = 0,
        [pbr::OriginalName("CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TRACK")] CanRxServAlignTypeVolvoShortTrack = 1,
      }

      public enum Can_rx_serv_align_enableType {
        [pbr::OriginalName("CAN_RX_SERV_ALIGN_ENABLE_DISABLED")] CanRxServAlignEnableDisabled = 0,
        [pbr::OriginalName("CAN_RX_SERV_ALIGN_ENABLE_ENABLED")] CanRxServAlignEnableEnabled = 1,
      }

      public enum Can_rx_auto_align_convergedType {
        [pbr::OriginalName("CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CONVERGED")] CanRxAutoAlignConvergedNotConverged = 0,
        [pbr::OriginalName("CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED")] CanRxAutoAlignConvergedConverged = 1,
      }

      public enum Can_rx_auto_align_disableType {
        [pbr::OriginalName("CAN_RX_AUTO_ALIGN_DISABLE_ENABLED")] CanRxAutoAlignDisableEnabled = 0,
        [pbr::OriginalName("CAN_RX_AUTO_ALIGN_DISABLE_DISABLED")] CanRxAutoAlignDisableDisabled = 1,
      }

      public enum Can_rx_wheel_slipType {
        [pbr::OriginalName("CAN_RX_WHEEL_SLIP_NO_CONTROL")] CanRxWheelSlipNoControl = 0,
        [pbr::OriginalName("CAN_RX_WHEEL_SLIP_BRAKE_SLIP_CONTROL")] CanRxWheelSlipBrakeSlipControl = 1,
        [pbr::OriginalName("CAN_RX_WHEEL_SLIP_TRACTION_SLIP_CONTROL")] CanRxWheelSlipTractionSlipControl = 2,
        [pbr::OriginalName("CAN_RX_WHEEL_SLIP_INVALID_3")] CanRxWheelSlipInvalid3 = 3,
      }

      public enum Can_rx_long_accel_validityType {
        [pbr::OriginalName("CAN_RX_LONG_ACCEL_VALIDITY_INVALID")] CanRxLongAccelValidityInvalid = 0,
        [pbr::OriginalName("CAN_RX_LONG_ACCEL_VALIDITY_VALID")] CanRxLongAccelValidityValid = 1,
      }

      public enum Can_rx_lat_accel_validityType {
        [pbr::OriginalName("CAN_RX_LAT_ACCEL_VALIDITY_INVALID")] CanRxLatAccelValidityInvalid = 0,
        [pbr::OriginalName("CAN_RX_LAT_ACCEL_VALIDITY_VALID")] CanRxLatAccelValidityValid = 1,
      }

    }
    #endregion

  }

  public sealed partial class Vehicle4_5f3 : pb::IMessage<Vehicle4_5f3> {
    private static readonly pb::MessageParser<Vehicle4_5f3> _parser = new pb::MessageParser<Vehicle4_5f3>(() => new Vehicle4_5f3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle4_5f3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle4_5f3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle4_5f3(Vehicle4_5f3 other) : this() {
      canRxFacTgtRangeR2M_ = other.canRxFacTgtRangeR2M_;
      canRxFacTgtRangeM2T_ = other.canRxFacTgtRangeM2T_;
      canRxFacTgtRange1_ = other.canRxFacTgtRange1_;
      canRxFacTgtMtgSpaceVer_ = other.canRxFacTgtMtgSpaceVer_;
      canRxFacTgtMtgSpaceHor_ = other.canRxFacTgtMtgSpaceHor_;
      canRxFacTgtMtgOffset_ = other.canRxFacTgtMtgOffset_;
      canRxFacAlignSampReq_ = other.canRxFacAlignSampReq_;
      canRxFacAlignMaxNt_ = other.canRxFacAlignMaxNt_;
      canRxFacAlignCmd2_ = other.canRxFacAlignCmd2_;
      canRxFacAlignCmd1_ = other.canRxFacAlignCmd1_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle4_5f3 Clone() {
      return new Vehicle4_5f3(this);
    }

    /// <summary>Field number for the "can_rx_fac_tgt_range_r2m" field.</summary>
    public const int CanRxFacTgtRangeR2MFieldNumber = 1;
    private double canRxFacTgtRangeR2M_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxFacTgtRangeR2M {
      get { return canRxFacTgtRangeR2M_; }
      set {
        canRxFacTgtRangeR2M_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_tgt_range_m2t" field.</summary>
    public const int CanRxFacTgtRangeM2TFieldNumber = 2;
    private double canRxFacTgtRangeM2T_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxFacTgtRangeM2T {
      get { return canRxFacTgtRangeM2T_; }
      set {
        canRxFacTgtRangeM2T_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_tgt_range_1" field.</summary>
    public const int CanRxFacTgtRange1FieldNumber = 3;
    private double canRxFacTgtRange1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxFacTgtRange1 {
      get { return canRxFacTgtRange1_; }
      set {
        canRxFacTgtRange1_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_tgt_mtg_space_ver" field.</summary>
    public const int CanRxFacTgtMtgSpaceVerFieldNumber = 4;
    private int canRxFacTgtMtgSpaceVer_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxFacTgtMtgSpaceVer {
      get { return canRxFacTgtMtgSpaceVer_; }
      set {
        canRxFacTgtMtgSpaceVer_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_tgt_mtg_space_hor" field.</summary>
    public const int CanRxFacTgtMtgSpaceHorFieldNumber = 5;
    private int canRxFacTgtMtgSpaceHor_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxFacTgtMtgSpaceHor {
      get { return canRxFacTgtMtgSpaceHor_; }
      set {
        canRxFacTgtMtgSpaceHor_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_tgt_mtg_offset" field.</summary>
    public const int CanRxFacTgtMtgOffsetFieldNumber = 6;
    private int canRxFacTgtMtgOffset_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxFacTgtMtgOffset {
      get { return canRxFacTgtMtgOffset_; }
      set {
        canRxFacTgtMtgOffset_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_align_samp_req" field.</summary>
    public const int CanRxFacAlignSampReqFieldNumber = 7;
    private int canRxFacAlignSampReq_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxFacAlignSampReq {
      get { return canRxFacAlignSampReq_; }
      set {
        canRxFacAlignSampReq_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_align_max_nt" field.</summary>
    public const int CanRxFacAlignMaxNtFieldNumber = 8;
    private int canRxFacAlignMaxNt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxFacAlignMaxNt {
      get { return canRxFacAlignMaxNt_; }
      set {
        canRxFacAlignMaxNt_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_align_cmd_2" field.</summary>
    public const int CanRxFacAlignCmd2FieldNumber = 9;
    private global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_2Type canRxFacAlignCmd2_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_2Type CanRxFacAlignCmd2 {
      get { return canRxFacAlignCmd2_; }
      set {
        canRxFacAlignCmd2_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_fac_align_cmd_1" field.</summary>
    public const int CanRxFacAlignCmd1FieldNumber = 10;
    private global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_1Type canRxFacAlignCmd1_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_1Type CanRxFacAlignCmd1 {
      get { return canRxFacAlignCmd1_; }
      set {
        canRxFacAlignCmd1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle4_5f3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle4_5f3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanRxFacTgtRangeR2M != other.CanRxFacTgtRangeR2M) return false;
      if (CanRxFacTgtRangeM2T != other.CanRxFacTgtRangeM2T) return false;
      if (CanRxFacTgtRange1 != other.CanRxFacTgtRange1) return false;
      if (CanRxFacTgtMtgSpaceVer != other.CanRxFacTgtMtgSpaceVer) return false;
      if (CanRxFacTgtMtgSpaceHor != other.CanRxFacTgtMtgSpaceHor) return false;
      if (CanRxFacTgtMtgOffset != other.CanRxFacTgtMtgOffset) return false;
      if (CanRxFacAlignSampReq != other.CanRxFacAlignSampReq) return false;
      if (CanRxFacAlignMaxNt != other.CanRxFacAlignMaxNt) return false;
      if (CanRxFacAlignCmd2 != other.CanRxFacAlignCmd2) return false;
      if (CanRxFacAlignCmd1 != other.CanRxFacAlignCmd1) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanRxFacTgtRangeR2M != 0D) hash ^= CanRxFacTgtRangeR2M.GetHashCode();
      if (CanRxFacTgtRangeM2T != 0D) hash ^= CanRxFacTgtRangeM2T.GetHashCode();
      if (CanRxFacTgtRange1 != 0D) hash ^= CanRxFacTgtRange1.GetHashCode();
      if (CanRxFacTgtMtgSpaceVer != 0) hash ^= CanRxFacTgtMtgSpaceVer.GetHashCode();
      if (CanRxFacTgtMtgSpaceHor != 0) hash ^= CanRxFacTgtMtgSpaceHor.GetHashCode();
      if (CanRxFacTgtMtgOffset != 0) hash ^= CanRxFacTgtMtgOffset.GetHashCode();
      if (CanRxFacAlignSampReq != 0) hash ^= CanRxFacAlignSampReq.GetHashCode();
      if (CanRxFacAlignMaxNt != 0) hash ^= CanRxFacAlignMaxNt.GetHashCode();
      if (CanRxFacAlignCmd2 != 0) hash ^= CanRxFacAlignCmd2.GetHashCode();
      if (CanRxFacAlignCmd1 != 0) hash ^= CanRxFacAlignCmd1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanRxFacTgtRangeR2M != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CanRxFacTgtRangeR2M);
      }
      if (CanRxFacTgtRangeM2T != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CanRxFacTgtRangeM2T);
      }
      if (CanRxFacTgtRange1 != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanRxFacTgtRange1);
      }
      if (CanRxFacTgtMtgSpaceVer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanRxFacTgtMtgSpaceVer);
      }
      if (CanRxFacTgtMtgSpaceHor != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanRxFacTgtMtgSpaceHor);
      }
      if (CanRxFacTgtMtgOffset != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CanRxFacTgtMtgOffset);
      }
      if (CanRxFacAlignSampReq != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanRxFacAlignSampReq);
      }
      if (CanRxFacAlignMaxNt != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CanRxFacAlignMaxNt);
      }
      if (CanRxFacAlignCmd2 != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CanRxFacAlignCmd2);
      }
      if (CanRxFacAlignCmd1 != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CanRxFacAlignCmd1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanRxFacTgtRangeR2M != 0D) {
        size += 1 + 8;
      }
      if (CanRxFacTgtRangeM2T != 0D) {
        size += 1 + 8;
      }
      if (CanRxFacTgtRange1 != 0D) {
        size += 1 + 8;
      }
      if (CanRxFacTgtMtgSpaceVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxFacTgtMtgSpaceVer);
      }
      if (CanRxFacTgtMtgSpaceHor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxFacTgtMtgSpaceHor);
      }
      if (CanRxFacTgtMtgOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxFacTgtMtgOffset);
      }
      if (CanRxFacAlignSampReq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxFacAlignSampReq);
      }
      if (CanRxFacAlignMaxNt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxFacAlignMaxNt);
      }
      if (CanRxFacAlignCmd2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxFacAlignCmd2);
      }
      if (CanRxFacAlignCmd1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxFacAlignCmd1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle4_5f3 other) {
      if (other == null) {
        return;
      }
      if (other.CanRxFacTgtRangeR2M != 0D) {
        CanRxFacTgtRangeR2M = other.CanRxFacTgtRangeR2M;
      }
      if (other.CanRxFacTgtRangeM2T != 0D) {
        CanRxFacTgtRangeM2T = other.CanRxFacTgtRangeM2T;
      }
      if (other.CanRxFacTgtRange1 != 0D) {
        CanRxFacTgtRange1 = other.CanRxFacTgtRange1;
      }
      if (other.CanRxFacTgtMtgSpaceVer != 0) {
        CanRxFacTgtMtgSpaceVer = other.CanRxFacTgtMtgSpaceVer;
      }
      if (other.CanRxFacTgtMtgSpaceHor != 0) {
        CanRxFacTgtMtgSpaceHor = other.CanRxFacTgtMtgSpaceHor;
      }
      if (other.CanRxFacTgtMtgOffset != 0) {
        CanRxFacTgtMtgOffset = other.CanRxFacTgtMtgOffset;
      }
      if (other.CanRxFacAlignSampReq != 0) {
        CanRxFacAlignSampReq = other.CanRxFacAlignSampReq;
      }
      if (other.CanRxFacAlignMaxNt != 0) {
        CanRxFacAlignMaxNt = other.CanRxFacAlignMaxNt;
      }
      if (other.CanRxFacAlignCmd2 != 0) {
        CanRxFacAlignCmd2 = other.CanRxFacAlignCmd2;
      }
      if (other.CanRxFacAlignCmd1 != 0) {
        CanRxFacAlignCmd1 = other.CanRxFacAlignCmd1;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            CanRxFacTgtRangeR2M = input.ReadDouble();
            break;
          }
          case 17: {
            CanRxFacTgtRangeM2T = input.ReadDouble();
            break;
          }
          case 25: {
            CanRxFacTgtRange1 = input.ReadDouble();
            break;
          }
          case 32: {
            CanRxFacTgtMtgSpaceVer = input.ReadInt32();
            break;
          }
          case 40: {
            CanRxFacTgtMtgSpaceHor = input.ReadInt32();
            break;
          }
          case 48: {
            CanRxFacTgtMtgOffset = input.ReadInt32();
            break;
          }
          case 56: {
            CanRxFacAlignSampReq = input.ReadInt32();
            break;
          }
          case 64: {
            CanRxFacAlignMaxNt = input.ReadInt32();
            break;
          }
          case 72: {
            canRxFacAlignCmd2_ = (global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_2Type) input.ReadEnum();
            break;
          }
          case 80: {
            canRxFacAlignCmd1_ = (global::Apollo.Drivers.Vehicle4_5f3.Types.Can_rx_fac_align_cmd_1Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vehicle4_5f3 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_rx_fac_align_cmd_2Type {
        [pbr::OriginalName("CAN_RX_FAC_ALIGN_CMD_2_OFF")] CanRxFacAlignCmd2Off = 0,
        [pbr::OriginalName("CAN_RX_FAC_ALIGN_CMD_2_ON")] CanRxFacAlignCmd2On = 1,
      }

      public enum Can_rx_fac_align_cmd_1Type {
        [pbr::OriginalName("CAN_RX_FAC_ALIGN_CMD_1_OFF")] CanRxFacAlignCmd1Off = 0,
        [pbr::OriginalName("CAN_RX_FAC_ALIGN_CMD_1_ON")] CanRxFacAlignCmd1On = 1,
      }

    }
    #endregion

  }

  public sealed partial class Vehicle5_5f4 : pb::IMessage<Vehicle5_5f4> {
    private static readonly pb::MessageParser<Vehicle5_5f4> _parser = new pb::MessageParser<Vehicle5_5f4>(() => new Vehicle5_5f4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle5_5f4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle5_5f4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle5_5f4(Vehicle5_5f4 other) : this() {
      canRxYawRateBiasShift_ = other.canRxYawRateBiasShift_;
      canRxSteeringGearRatio_ = other.canRxSteeringGearRatio_;
      canRxWheelbase_ = other.canRxWheelbase_;
      canRxDistanceRearAxle_ = other.canRxDistanceRearAxle_;
      canRxCwBlockageThreshold_ = other.canRxCwBlockageThreshold_;
      canRxFunnelOffsetRight_ = other.canRxFunnelOffsetRight_;
      canRxFunnelOffsetLeft_ = other.canRxFunnelOffsetLeft_;
      canRxBeamwidthVert_ = other.canRxBeamwidthVert_;
      canRxOversteerUndersteer_ = other.canRxOversteerUndersteer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle5_5f4 Clone() {
      return new Vehicle5_5f4(this);
    }

    /// <summary>Field number for the "can_rx_yaw_rate_bias_shift" field.</summary>
    public const int CanRxYawRateBiasShiftFieldNumber = 1;
    private global::Apollo.Drivers.Vehicle5_5f4.Types.Can_rx_yaw_rate_bias_shiftType canRxYawRateBiasShift_ = 0;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle5_5f4.Types.Can_rx_yaw_rate_bias_shiftType CanRxYawRateBiasShift {
      get { return canRxYawRateBiasShift_; }
      set {
        canRxYawRateBiasShift_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_steering_gear_ratio" field.</summary>
    public const int CanRxSteeringGearRatioFieldNumber = 2;
    private double canRxSteeringGearRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxSteeringGearRatio {
      get { return canRxSteeringGearRatio_; }
      set {
        canRxSteeringGearRatio_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_wheelbase" field.</summary>
    public const int CanRxWheelbaseFieldNumber = 3;
    private double canRxWheelbase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxWheelbase {
      get { return canRxWheelbase_; }
      set {
        canRxWheelbase_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_distance_rear_axle" field.</summary>
    public const int CanRxDistanceRearAxleFieldNumber = 4;
    private double canRxDistanceRearAxle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxDistanceRearAxle {
      get { return canRxDistanceRearAxle_; }
      set {
        canRxDistanceRearAxle_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_cw_blockage_threshold" field.</summary>
    public const int CanRxCwBlockageThresholdFieldNumber = 5;
    private double canRxCwBlockageThreshold_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxCwBlockageThreshold {
      get { return canRxCwBlockageThreshold_; }
      set {
        canRxCwBlockageThreshold_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_funnel_offset_right" field.</summary>
    public const int CanRxFunnelOffsetRightFieldNumber = 6;
    private double canRxFunnelOffsetRight_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxFunnelOffsetRight {
      get { return canRxFunnelOffsetRight_; }
      set {
        canRxFunnelOffsetRight_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_funnel_offset_left" field.</summary>
    public const int CanRxFunnelOffsetLeftFieldNumber = 7;
    private double canRxFunnelOffsetLeft_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxFunnelOffsetLeft {
      get { return canRxFunnelOffsetLeft_; }
      set {
        canRxFunnelOffsetLeft_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_beamwidth_vert" field.</summary>
    public const int CanRxBeamwidthVertFieldNumber = 8;
    private double canRxBeamwidthVert_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxBeamwidthVert {
      get { return canRxBeamwidthVert_; }
      set {
        canRxBeamwidthVert_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_oversteer_understeer" field.</summary>
    public const int CanRxOversteerUndersteerFieldNumber = 9;
    private int canRxOversteerUndersteer_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanRxOversteerUndersteer {
      get { return canRxOversteerUndersteer_; }
      set {
        canRxOversteerUndersteer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle5_5f4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle5_5f4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanRxYawRateBiasShift != other.CanRxYawRateBiasShift) return false;
      if (CanRxSteeringGearRatio != other.CanRxSteeringGearRatio) return false;
      if (CanRxWheelbase != other.CanRxWheelbase) return false;
      if (CanRxDistanceRearAxle != other.CanRxDistanceRearAxle) return false;
      if (CanRxCwBlockageThreshold != other.CanRxCwBlockageThreshold) return false;
      if (CanRxFunnelOffsetRight != other.CanRxFunnelOffsetRight) return false;
      if (CanRxFunnelOffsetLeft != other.CanRxFunnelOffsetLeft) return false;
      if (CanRxBeamwidthVert != other.CanRxBeamwidthVert) return false;
      if (CanRxOversteerUndersteer != other.CanRxOversteerUndersteer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanRxYawRateBiasShift != 0) hash ^= CanRxYawRateBiasShift.GetHashCode();
      if (CanRxSteeringGearRatio != 0D) hash ^= CanRxSteeringGearRatio.GetHashCode();
      if (CanRxWheelbase != 0D) hash ^= CanRxWheelbase.GetHashCode();
      if (CanRxDistanceRearAxle != 0D) hash ^= CanRxDistanceRearAxle.GetHashCode();
      if (CanRxCwBlockageThreshold != 0D) hash ^= CanRxCwBlockageThreshold.GetHashCode();
      if (CanRxFunnelOffsetRight != 0D) hash ^= CanRxFunnelOffsetRight.GetHashCode();
      if (CanRxFunnelOffsetLeft != 0D) hash ^= CanRxFunnelOffsetLeft.GetHashCode();
      if (CanRxBeamwidthVert != 0D) hash ^= CanRxBeamwidthVert.GetHashCode();
      if (CanRxOversteerUndersteer != 0) hash ^= CanRxOversteerUndersteer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanRxYawRateBiasShift != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CanRxYawRateBiasShift);
      }
      if (CanRxSteeringGearRatio != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CanRxSteeringGearRatio);
      }
      if (CanRxWheelbase != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CanRxWheelbase);
      }
      if (CanRxDistanceRearAxle != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CanRxDistanceRearAxle);
      }
      if (CanRxCwBlockageThreshold != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CanRxCwBlockageThreshold);
      }
      if (CanRxFunnelOffsetRight != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CanRxFunnelOffsetRight);
      }
      if (CanRxFunnelOffsetLeft != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(CanRxFunnelOffsetLeft);
      }
      if (CanRxBeamwidthVert != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CanRxBeamwidthVert);
      }
      if (CanRxOversteerUndersteer != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CanRxOversteerUndersteer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanRxYawRateBiasShift != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanRxYawRateBiasShift);
      }
      if (CanRxSteeringGearRatio != 0D) {
        size += 1 + 8;
      }
      if (CanRxWheelbase != 0D) {
        size += 1 + 8;
      }
      if (CanRxDistanceRearAxle != 0D) {
        size += 1 + 8;
      }
      if (CanRxCwBlockageThreshold != 0D) {
        size += 1 + 8;
      }
      if (CanRxFunnelOffsetRight != 0D) {
        size += 1 + 8;
      }
      if (CanRxFunnelOffsetLeft != 0D) {
        size += 1 + 8;
      }
      if (CanRxBeamwidthVert != 0D) {
        size += 1 + 8;
      }
      if (CanRxOversteerUndersteer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanRxOversteerUndersteer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle5_5f4 other) {
      if (other == null) {
        return;
      }
      if (other.CanRxYawRateBiasShift != 0) {
        CanRxYawRateBiasShift = other.CanRxYawRateBiasShift;
      }
      if (other.CanRxSteeringGearRatio != 0D) {
        CanRxSteeringGearRatio = other.CanRxSteeringGearRatio;
      }
      if (other.CanRxWheelbase != 0D) {
        CanRxWheelbase = other.CanRxWheelbase;
      }
      if (other.CanRxDistanceRearAxle != 0D) {
        CanRxDistanceRearAxle = other.CanRxDistanceRearAxle;
      }
      if (other.CanRxCwBlockageThreshold != 0D) {
        CanRxCwBlockageThreshold = other.CanRxCwBlockageThreshold;
      }
      if (other.CanRxFunnelOffsetRight != 0D) {
        CanRxFunnelOffsetRight = other.CanRxFunnelOffsetRight;
      }
      if (other.CanRxFunnelOffsetLeft != 0D) {
        CanRxFunnelOffsetLeft = other.CanRxFunnelOffsetLeft;
      }
      if (other.CanRxBeamwidthVert != 0D) {
        CanRxBeamwidthVert = other.CanRxBeamwidthVert;
      }
      if (other.CanRxOversteerUndersteer != 0) {
        CanRxOversteerUndersteer = other.CanRxOversteerUndersteer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            canRxYawRateBiasShift_ = (global::Apollo.Drivers.Vehicle5_5f4.Types.Can_rx_yaw_rate_bias_shiftType) input.ReadEnum();
            break;
          }
          case 17: {
            CanRxSteeringGearRatio = input.ReadDouble();
            break;
          }
          case 25: {
            CanRxWheelbase = input.ReadDouble();
            break;
          }
          case 33: {
            CanRxDistanceRearAxle = input.ReadDouble();
            break;
          }
          case 41: {
            CanRxCwBlockageThreshold = input.ReadDouble();
            break;
          }
          case 49: {
            CanRxFunnelOffsetRight = input.ReadDouble();
            break;
          }
          case 57: {
            CanRxFunnelOffsetLeft = input.ReadDouble();
            break;
          }
          case 65: {
            CanRxBeamwidthVert = input.ReadDouble();
            break;
          }
          case 72: {
            CanRxOversteerUndersteer = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vehicle5_5f4 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Can_rx_yaw_rate_bias_shiftType {
        [pbr::OriginalName("CAN_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT")] CanRxYawRateBiasShiftNoDetect = 0,
        [pbr::OriginalName("CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT")] CanRxYawRateBiasShiftDetect = 1,
      }

    }
    #endregion

  }

  public sealed partial class Vehicle6_5f5 : pb::IMessage<Vehicle6_5f5> {
    private static readonly pb::MessageParser<Vehicle6_5f5> _parser = new pb::MessageParser<Vehicle6_5f5>(() => new Vehicle6_5f5());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle6_5f5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle6_5f5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle6_5f5(Vehicle6_5f5 other) : this() {
      canRxInnerFunnelOffsetRight_ = other.canRxInnerFunnelOffsetRight_;
      canRxInnerFunnelOffsetLeft_ = other.canRxInnerFunnelOffsetLeft_;
      canVolvoFaRangeMaxShort_ = other.canVolvoFaRangeMaxShort_;
      canVolvoFaMinVspeedShort_ = other.canVolvoFaMinVspeedShort_;
      canVolvoFaAalignEstimate_ = other.canVolvoFaAalignEstimate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle6_5f5 Clone() {
      return new Vehicle6_5f5(this);
    }

    /// <summary>Field number for the "can_rx_inner_funnel_offset_right" field.</summary>
    public const int CanRxInnerFunnelOffsetRightFieldNumber = 1;
    private double canRxInnerFunnelOffsetRight_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxInnerFunnelOffsetRight {
      get { return canRxInnerFunnelOffsetRight_; }
      set {
        canRxInnerFunnelOffsetRight_ = value;
      }
    }

    /// <summary>Field number for the "can_rx_inner_funnel_offset_left" field.</summary>
    public const int CanRxInnerFunnelOffsetLeftFieldNumber = 2;
    private double canRxInnerFunnelOffsetLeft_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanRxInnerFunnelOffsetLeft {
      get { return canRxInnerFunnelOffsetLeft_; }
      set {
        canRxInnerFunnelOffsetLeft_ = value;
      }
    }

    /// <summary>Field number for the "can_volvo_fa_range_max_short" field.</summary>
    public const int CanVolvoFaRangeMaxShortFieldNumber = 3;
    private int canVolvoFaRangeMaxShort_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanVolvoFaRangeMaxShort {
      get { return canVolvoFaRangeMaxShort_; }
      set {
        canVolvoFaRangeMaxShort_ = value;
      }
    }

    /// <summary>Field number for the "can_volvo_fa_min_vspeed_short" field.</summary>
    public const int CanVolvoFaMinVspeedShortFieldNumber = 4;
    private double canVolvoFaMinVspeedShort_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanVolvoFaMinVspeedShort {
      get { return canVolvoFaMinVspeedShort_; }
      set {
        canVolvoFaMinVspeedShort_ = value;
      }
    }

    /// <summary>Field number for the "can_volvo_fa_aalign_estimate" field.</summary>
    public const int CanVolvoFaAalignEstimateFieldNumber = 5;
    private double canVolvoFaAalignEstimate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanVolvoFaAalignEstimate {
      get { return canVolvoFaAalignEstimate_; }
      set {
        canVolvoFaAalignEstimate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle6_5f5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle6_5f5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanRxInnerFunnelOffsetRight != other.CanRxInnerFunnelOffsetRight) return false;
      if (CanRxInnerFunnelOffsetLeft != other.CanRxInnerFunnelOffsetLeft) return false;
      if (CanVolvoFaRangeMaxShort != other.CanVolvoFaRangeMaxShort) return false;
      if (CanVolvoFaMinVspeedShort != other.CanVolvoFaMinVspeedShort) return false;
      if (CanVolvoFaAalignEstimate != other.CanVolvoFaAalignEstimate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanRxInnerFunnelOffsetRight != 0D) hash ^= CanRxInnerFunnelOffsetRight.GetHashCode();
      if (CanRxInnerFunnelOffsetLeft != 0D) hash ^= CanRxInnerFunnelOffsetLeft.GetHashCode();
      if (CanVolvoFaRangeMaxShort != 0) hash ^= CanVolvoFaRangeMaxShort.GetHashCode();
      if (CanVolvoFaMinVspeedShort != 0D) hash ^= CanVolvoFaMinVspeedShort.GetHashCode();
      if (CanVolvoFaAalignEstimate != 0D) hash ^= CanVolvoFaAalignEstimate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanRxInnerFunnelOffsetRight != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CanRxInnerFunnelOffsetRight);
      }
      if (CanRxInnerFunnelOffsetLeft != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CanRxInnerFunnelOffsetLeft);
      }
      if (CanVolvoFaRangeMaxShort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CanVolvoFaRangeMaxShort);
      }
      if (CanVolvoFaMinVspeedShort != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CanVolvoFaMinVspeedShort);
      }
      if (CanVolvoFaAalignEstimate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CanVolvoFaAalignEstimate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanRxInnerFunnelOffsetRight != 0D) {
        size += 1 + 8;
      }
      if (CanRxInnerFunnelOffsetLeft != 0D) {
        size += 1 + 8;
      }
      if (CanVolvoFaRangeMaxShort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanVolvoFaRangeMaxShort);
      }
      if (CanVolvoFaMinVspeedShort != 0D) {
        size += 1 + 8;
      }
      if (CanVolvoFaAalignEstimate != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle6_5f5 other) {
      if (other == null) {
        return;
      }
      if (other.CanRxInnerFunnelOffsetRight != 0D) {
        CanRxInnerFunnelOffsetRight = other.CanRxInnerFunnelOffsetRight;
      }
      if (other.CanRxInnerFunnelOffsetLeft != 0D) {
        CanRxInnerFunnelOffsetLeft = other.CanRxInnerFunnelOffsetLeft;
      }
      if (other.CanVolvoFaRangeMaxShort != 0) {
        CanVolvoFaRangeMaxShort = other.CanVolvoFaRangeMaxShort;
      }
      if (other.CanVolvoFaMinVspeedShort != 0D) {
        CanVolvoFaMinVspeedShort = other.CanVolvoFaMinVspeedShort;
      }
      if (other.CanVolvoFaAalignEstimate != 0D) {
        CanVolvoFaAalignEstimate = other.CanVolvoFaAalignEstimate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            CanRxInnerFunnelOffsetRight = input.ReadDouble();
            break;
          }
          case 17: {
            CanRxInnerFunnelOffsetLeft = input.ReadDouble();
            break;
          }
          case 24: {
            CanVolvoFaRangeMaxShort = input.ReadInt32();
            break;
          }
          case 33: {
            CanVolvoFaMinVspeedShort = input.ReadDouble();
            break;
          }
          case 41: {
            CanVolvoFaAalignEstimate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelphiESR : pb::IMessage<DelphiESR> {
    private static readonly pb::MessageParser<DelphiESR> _parser = new pb::MessageParser<DelphiESR>(() => new DelphiESR());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelphiESR> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.DelphiEsrReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelphiESR() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelphiESR(DelphiESR other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      EsrStatus95E8 = other.esrStatus95E8_ != null ? other.EsrStatus95E8.Clone() : null;
      EsrStatus65E5 = other.esrStatus65E5_ != null ? other.EsrStatus65E5.Clone() : null;
      EsrStatus55E4 = other.esrStatus55E4_ != null ? other.EsrStatus55E4.Clone() : null;
      EsrStatus34E2 = other.esrStatus34E2_ != null ? other.EsrStatus34E2.Clone() : null;
      EsrStatus44E3 = other.esrStatus44E3_ != null ? other.EsrStatus44E3.Clone() : null;
      esrTrackmotionpower540_ = other.esrTrackmotionpower540_.Clone();
      AcmInstReq7E0 = other.acmInstReq7E0_ != null ? other.AcmInstReq7E0.Clone() : null;
      esrTrack01500_ = other.esrTrack01500_.Clone();
      EsrValid15D0 = other.esrValid15D0_ != null ? other.EsrValid15D0.Clone() : null;
      EsrValid25D1 = other.esrValid25D1_ != null ? other.EsrValid25D1.Clone() : null;
      AcmInstResp7E4 = other.acmInstResp7E4_ != null ? other.AcmInstResp7E4.Clone() : null;
      Vehicle24F1 = other.vehicle24F1_ != null ? other.Vehicle24F1.Clone() : null;
      Vehicle14F0 = other.vehicle14F0_ != null ? other.Vehicle14F0.Clone() : null;
      EsrSim15C0 = other.esrSim15C0_ != null ? other.EsrSim15C0.Clone() : null;
      EsrStatus14E0 = other.esrStatus14E0_ != null ? other.EsrStatus14E0.Clone() : null;
      EsrStatus24E1 = other.esrStatus24E1_ != null ? other.EsrStatus24E1.Clone() : null;
      EsrStatus85E7 = other.esrStatus85E7_ != null ? other.EsrStatus85E7.Clone() : null;
      EsrStatus75E6 = other.esrStatus75E6_ != null ? other.EsrStatus75E6.Clone() : null;
      Vehicle35F2 = other.vehicle35F2_ != null ? other.Vehicle35F2.Clone() : null;
      Vehicle45F3 = other.vehicle45F3_ != null ? other.Vehicle45F3.Clone() : null;
      Vehicle55F4 = other.vehicle55F4_ != null ? other.Vehicle55F4.Clone() : null;
      Vehicle65F5 = other.vehicle65F5_ != null ? other.Vehicle65F5.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelphiESR Clone() {
      return new DelphiESR(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "esr_status9_5e8" field.</summary>
    public const int EsrStatus95E8FieldNumber = 2;
    private global::Apollo.Drivers.Esr_status9_5e8 esrStatus95E8_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status9_5e8 EsrStatus95E8 {
      get { return esrStatus95E8_; }
      set {
        esrStatus95E8_ = value;
      }
    }

    /// <summary>Field number for the "esr_status6_5e5" field.</summary>
    public const int EsrStatus65E5FieldNumber = 3;
    private global::Apollo.Drivers.Esr_status6_5e5 esrStatus65E5_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status6_5e5 EsrStatus65E5 {
      get { return esrStatus65E5_; }
      set {
        esrStatus65E5_ = value;
      }
    }

    /// <summary>Field number for the "esr_status5_5e4" field.</summary>
    public const int EsrStatus55E4FieldNumber = 4;
    private global::Apollo.Drivers.Esr_status5_5e4 esrStatus55E4_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status5_5e4 EsrStatus55E4 {
      get { return esrStatus55E4_; }
      set {
        esrStatus55E4_ = value;
      }
    }

    /// <summary>Field number for the "esr_status3_4e2" field.</summary>
    public const int EsrStatus34E2FieldNumber = 5;
    private global::Apollo.Drivers.Esr_status3_4e2 esrStatus34E2_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status3_4e2 EsrStatus34E2 {
      get { return esrStatus34E2_; }
      set {
        esrStatus34E2_ = value;
      }
    }

    /// <summary>Field number for the "esr_status4_4e3" field.</summary>
    public const int EsrStatus44E3FieldNumber = 6;
    private global::Apollo.Drivers.Esr_status4_4e3 esrStatus44E3_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status4_4e3 EsrStatus44E3 {
      get { return esrStatus44E3_; }
      set {
        esrStatus44E3_ = value;
      }
    }

    /// <summary>Field number for the "esr_trackmotionpower_540" field.</summary>
    public const int EsrTrackmotionpower540FieldNumber = 7;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Esr_trackmotionpower_540> _repeated_esrTrackmotionpower540_codec
        = pb::FieldCodec.ForMessage(58, global::Apollo.Drivers.Esr_trackmotionpower_540.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Esr_trackmotionpower_540> esrTrackmotionpower540_ = new pbc::RepeatedField<global::Apollo.Drivers.Esr_trackmotionpower_540>();
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Esr_trackmotionpower_540> EsrTrackmotionpower540 {
      get { return esrTrackmotionpower540_; }
    }

    /// <summary>Field number for the "acm_inst_req_7e0" field.</summary>
    public const int AcmInstReq7E0FieldNumber = 8;
    private global::Apollo.Drivers.Acm_inst_req_7e0 acmInstReq7E0_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Acm_inst_req_7e0 AcmInstReq7E0 {
      get { return acmInstReq7E0_; }
      set {
        acmInstReq7E0_ = value;
      }
    }

    /// <summary>Field number for the "esr_track01_500" field.</summary>
    public const int EsrTrack01500FieldNumber = 9;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Esr_track01_500> _repeated_esrTrack01500_codec
        = pb::FieldCodec.ForMessage(74, global::Apollo.Drivers.Esr_track01_500.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Esr_track01_500> esrTrack01500_ = new pbc::RepeatedField<global::Apollo.Drivers.Esr_track01_500>();
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Esr_track01_500> EsrTrack01500 {
      get { return esrTrack01500_; }
    }

    /// <summary>Field number for the "esr_valid1_5d0" field.</summary>
    public const int EsrValid15D0FieldNumber = 10;
    private global::Apollo.Drivers.Esr_valid1_5d0 esrValid15D0_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_valid1_5d0 EsrValid15D0 {
      get { return esrValid15D0_; }
      set {
        esrValid15D0_ = value;
      }
    }

    /// <summary>Field number for the "esr_valid2_5d1" field.</summary>
    public const int EsrValid25D1FieldNumber = 11;
    private global::Apollo.Drivers.Esr_valid2_5d1 esrValid25D1_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_valid2_5d1 EsrValid25D1 {
      get { return esrValid25D1_; }
      set {
        esrValid25D1_ = value;
      }
    }

    /// <summary>Field number for the "acm_inst_resp_7e4" field.</summary>
    public const int AcmInstResp7E4FieldNumber = 12;
    private global::Apollo.Drivers.Acm_inst_resp_7e4 acmInstResp7E4_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Acm_inst_resp_7e4 AcmInstResp7E4 {
      get { return acmInstResp7E4_; }
      set {
        acmInstResp7E4_ = value;
      }
    }

    /// <summary>Field number for the "vehicle2_4f1" field.</summary>
    public const int Vehicle24F1FieldNumber = 13;
    private global::Apollo.Drivers.Vehicle2_4f1 vehicle24F1_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle2_4f1 Vehicle24F1 {
      get { return vehicle24F1_; }
      set {
        vehicle24F1_ = value;
      }
    }

    /// <summary>Field number for the "vehicle1_4f0" field.</summary>
    public const int Vehicle14F0FieldNumber = 14;
    private global::Apollo.Drivers.Vehicle1_4f0 vehicle14F0_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle1_4f0 Vehicle14F0 {
      get { return vehicle14F0_; }
      set {
        vehicle14F0_ = value;
      }
    }

    /// <summary>Field number for the "esr_sim1_5c0" field.</summary>
    public const int EsrSim15C0FieldNumber = 15;
    private global::Apollo.Drivers.Esr_sim1_5c0 esrSim15C0_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_sim1_5c0 EsrSim15C0 {
      get { return esrSim15C0_; }
      set {
        esrSim15C0_ = value;
      }
    }

    /// <summary>Field number for the "esr_status1_4e0" field.</summary>
    public const int EsrStatus14E0FieldNumber = 16;
    private global::Apollo.Drivers.Esr_status1_4e0 esrStatus14E0_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status1_4e0 EsrStatus14E0 {
      get { return esrStatus14E0_; }
      set {
        esrStatus14E0_ = value;
      }
    }

    /// <summary>Field number for the "esr_status2_4e1" field.</summary>
    public const int EsrStatus24E1FieldNumber = 17;
    private global::Apollo.Drivers.Esr_status2_4e1 esrStatus24E1_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status2_4e1 EsrStatus24E1 {
      get { return esrStatus24E1_; }
      set {
        esrStatus24E1_ = value;
      }
    }

    /// <summary>Field number for the "esr_status8_5e7" field.</summary>
    public const int EsrStatus85E7FieldNumber = 18;
    private global::Apollo.Drivers.Esr_status8_5e7 esrStatus85E7_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status8_5e7 EsrStatus85E7 {
      get { return esrStatus85E7_; }
      set {
        esrStatus85E7_ = value;
      }
    }

    /// <summary>Field number for the "esr_status7_5e6" field.</summary>
    public const int EsrStatus75E6FieldNumber = 19;
    private global::Apollo.Drivers.Esr_status7_5e6 esrStatus75E6_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Esr_status7_5e6 EsrStatus75E6 {
      get { return esrStatus75E6_; }
      set {
        esrStatus75E6_ = value;
      }
    }

    /// <summary>Field number for the "vehicle3_5f2" field.</summary>
    public const int Vehicle35F2FieldNumber = 20;
    private global::Apollo.Drivers.Vehicle3_5f2 vehicle35F2_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle3_5f2 Vehicle35F2 {
      get { return vehicle35F2_; }
      set {
        vehicle35F2_ = value;
      }
    }

    /// <summary>Field number for the "vehicle4_5f3" field.</summary>
    public const int Vehicle45F3FieldNumber = 21;
    private global::Apollo.Drivers.Vehicle4_5f3 vehicle45F3_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle4_5f3 Vehicle45F3 {
      get { return vehicle45F3_; }
      set {
        vehicle45F3_ = value;
      }
    }

    /// <summary>Field number for the "vehicle5_5f4" field.</summary>
    public const int Vehicle55F4FieldNumber = 22;
    private global::Apollo.Drivers.Vehicle5_5f4 vehicle55F4_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle5_5f4 Vehicle55F4 {
      get { return vehicle55F4_; }
      set {
        vehicle55F4_ = value;
      }
    }

    /// <summary>Field number for the "vehicle6_5f5" field.</summary>
    public const int Vehicle65F5FieldNumber = 23;
    private global::Apollo.Drivers.Vehicle6_5f5 vehicle65F5_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Vehicle6_5f5 Vehicle65F5 {
      get { return vehicle65F5_; }
      set {
        vehicle65F5_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelphiESR);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelphiESR other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(EsrStatus95E8, other.EsrStatus95E8)) return false;
      if (!object.Equals(EsrStatus65E5, other.EsrStatus65E5)) return false;
      if (!object.Equals(EsrStatus55E4, other.EsrStatus55E4)) return false;
      if (!object.Equals(EsrStatus34E2, other.EsrStatus34E2)) return false;
      if (!object.Equals(EsrStatus44E3, other.EsrStatus44E3)) return false;
      if(!esrTrackmotionpower540_.Equals(other.esrTrackmotionpower540_)) return false;
      if (!object.Equals(AcmInstReq7E0, other.AcmInstReq7E0)) return false;
      if(!esrTrack01500_.Equals(other.esrTrack01500_)) return false;
      if (!object.Equals(EsrValid15D0, other.EsrValid15D0)) return false;
      if (!object.Equals(EsrValid25D1, other.EsrValid25D1)) return false;
      if (!object.Equals(AcmInstResp7E4, other.AcmInstResp7E4)) return false;
      if (!object.Equals(Vehicle24F1, other.Vehicle24F1)) return false;
      if (!object.Equals(Vehicle14F0, other.Vehicle14F0)) return false;
      if (!object.Equals(EsrSim15C0, other.EsrSim15C0)) return false;
      if (!object.Equals(EsrStatus14E0, other.EsrStatus14E0)) return false;
      if (!object.Equals(EsrStatus24E1, other.EsrStatus24E1)) return false;
      if (!object.Equals(EsrStatus85E7, other.EsrStatus85E7)) return false;
      if (!object.Equals(EsrStatus75E6, other.EsrStatus75E6)) return false;
      if (!object.Equals(Vehicle35F2, other.Vehicle35F2)) return false;
      if (!object.Equals(Vehicle45F3, other.Vehicle45F3)) return false;
      if (!object.Equals(Vehicle55F4, other.Vehicle55F4)) return false;
      if (!object.Equals(Vehicle65F5, other.Vehicle65F5)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (esrStatus95E8_ != null) hash ^= EsrStatus95E8.GetHashCode();
      if (esrStatus65E5_ != null) hash ^= EsrStatus65E5.GetHashCode();
      if (esrStatus55E4_ != null) hash ^= EsrStatus55E4.GetHashCode();
      if (esrStatus34E2_ != null) hash ^= EsrStatus34E2.GetHashCode();
      if (esrStatus44E3_ != null) hash ^= EsrStatus44E3.GetHashCode();
      hash ^= esrTrackmotionpower540_.GetHashCode();
      if (acmInstReq7E0_ != null) hash ^= AcmInstReq7E0.GetHashCode();
      hash ^= esrTrack01500_.GetHashCode();
      if (esrValid15D0_ != null) hash ^= EsrValid15D0.GetHashCode();
      if (esrValid25D1_ != null) hash ^= EsrValid25D1.GetHashCode();
      if (acmInstResp7E4_ != null) hash ^= AcmInstResp7E4.GetHashCode();
      if (vehicle24F1_ != null) hash ^= Vehicle24F1.GetHashCode();
      if (vehicle14F0_ != null) hash ^= Vehicle14F0.GetHashCode();
      if (esrSim15C0_ != null) hash ^= EsrSim15C0.GetHashCode();
      if (esrStatus14E0_ != null) hash ^= EsrStatus14E0.GetHashCode();
      if (esrStatus24E1_ != null) hash ^= EsrStatus24E1.GetHashCode();
      if (esrStatus85E7_ != null) hash ^= EsrStatus85E7.GetHashCode();
      if (esrStatus75E6_ != null) hash ^= EsrStatus75E6.GetHashCode();
      if (vehicle35F2_ != null) hash ^= Vehicle35F2.GetHashCode();
      if (vehicle45F3_ != null) hash ^= Vehicle45F3.GetHashCode();
      if (vehicle55F4_ != null) hash ^= Vehicle55F4.GetHashCode();
      if (vehicle65F5_ != null) hash ^= Vehicle65F5.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (esrStatus95E8_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EsrStatus95E8);
      }
      if (esrStatus65E5_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EsrStatus65E5);
      }
      if (esrStatus55E4_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EsrStatus55E4);
      }
      if (esrStatus34E2_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EsrStatus34E2);
      }
      if (esrStatus44E3_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EsrStatus44E3);
      }
      esrTrackmotionpower540_.WriteTo(output, _repeated_esrTrackmotionpower540_codec);
      if (acmInstReq7E0_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AcmInstReq7E0);
      }
      esrTrack01500_.WriteTo(output, _repeated_esrTrack01500_codec);
      if (esrValid15D0_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EsrValid15D0);
      }
      if (esrValid25D1_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EsrValid25D1);
      }
      if (acmInstResp7E4_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AcmInstResp7E4);
      }
      if (vehicle24F1_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Vehicle24F1);
      }
      if (vehicle14F0_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Vehicle14F0);
      }
      if (esrSim15C0_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EsrSim15C0);
      }
      if (esrStatus14E0_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(EsrStatus14E0);
      }
      if (esrStatus24E1_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(EsrStatus24E1);
      }
      if (esrStatus85E7_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(EsrStatus85E7);
      }
      if (esrStatus75E6_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(EsrStatus75E6);
      }
      if (vehicle35F2_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Vehicle35F2);
      }
      if (vehicle45F3_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Vehicle45F3);
      }
      if (vehicle55F4_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Vehicle55F4);
      }
      if (vehicle65F5_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Vehicle65F5);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (esrStatus95E8_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus95E8);
      }
      if (esrStatus65E5_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus65E5);
      }
      if (esrStatus55E4_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus55E4);
      }
      if (esrStatus34E2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus34E2);
      }
      if (esrStatus44E3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus44E3);
      }
      size += esrTrackmotionpower540_.CalculateSize(_repeated_esrTrackmotionpower540_codec);
      if (acmInstReq7E0_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcmInstReq7E0);
      }
      size += esrTrack01500_.CalculateSize(_repeated_esrTrack01500_codec);
      if (esrValid15D0_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrValid15D0);
      }
      if (esrValid25D1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrValid25D1);
      }
      if (acmInstResp7E4_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcmInstResp7E4);
      }
      if (vehicle24F1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicle24F1);
      }
      if (vehicle14F0_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicle14F0);
      }
      if (esrSim15C0_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EsrSim15C0);
      }
      if (esrStatus14E0_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus14E0);
      }
      if (esrStatus24E1_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus24E1);
      }
      if (esrStatus85E7_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus85E7);
      }
      if (esrStatus75E6_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EsrStatus75E6);
      }
      if (vehicle35F2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vehicle35F2);
      }
      if (vehicle45F3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vehicle45F3);
      }
      if (vehicle55F4_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vehicle55F4);
      }
      if (vehicle65F5_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vehicle65F5);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelphiESR other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.esrStatus95E8_ != null) {
        if (esrStatus95E8_ == null) {
          esrStatus95E8_ = new global::Apollo.Drivers.Esr_status9_5e8();
        }
        EsrStatus95E8.MergeFrom(other.EsrStatus95E8);
      }
      if (other.esrStatus65E5_ != null) {
        if (esrStatus65E5_ == null) {
          esrStatus65E5_ = new global::Apollo.Drivers.Esr_status6_5e5();
        }
        EsrStatus65E5.MergeFrom(other.EsrStatus65E5);
      }
      if (other.esrStatus55E4_ != null) {
        if (esrStatus55E4_ == null) {
          esrStatus55E4_ = new global::Apollo.Drivers.Esr_status5_5e4();
        }
        EsrStatus55E4.MergeFrom(other.EsrStatus55E4);
      }
      if (other.esrStatus34E2_ != null) {
        if (esrStatus34E2_ == null) {
          esrStatus34E2_ = new global::Apollo.Drivers.Esr_status3_4e2();
        }
        EsrStatus34E2.MergeFrom(other.EsrStatus34E2);
      }
      if (other.esrStatus44E3_ != null) {
        if (esrStatus44E3_ == null) {
          esrStatus44E3_ = new global::Apollo.Drivers.Esr_status4_4e3();
        }
        EsrStatus44E3.MergeFrom(other.EsrStatus44E3);
      }
      esrTrackmotionpower540_.Add(other.esrTrackmotionpower540_);
      if (other.acmInstReq7E0_ != null) {
        if (acmInstReq7E0_ == null) {
          acmInstReq7E0_ = new global::Apollo.Drivers.Acm_inst_req_7e0();
        }
        AcmInstReq7E0.MergeFrom(other.AcmInstReq7E0);
      }
      esrTrack01500_.Add(other.esrTrack01500_);
      if (other.esrValid15D0_ != null) {
        if (esrValid15D0_ == null) {
          esrValid15D0_ = new global::Apollo.Drivers.Esr_valid1_5d0();
        }
        EsrValid15D0.MergeFrom(other.EsrValid15D0);
      }
      if (other.esrValid25D1_ != null) {
        if (esrValid25D1_ == null) {
          esrValid25D1_ = new global::Apollo.Drivers.Esr_valid2_5d1();
        }
        EsrValid25D1.MergeFrom(other.EsrValid25D1);
      }
      if (other.acmInstResp7E4_ != null) {
        if (acmInstResp7E4_ == null) {
          acmInstResp7E4_ = new global::Apollo.Drivers.Acm_inst_resp_7e4();
        }
        AcmInstResp7E4.MergeFrom(other.AcmInstResp7E4);
      }
      if (other.vehicle24F1_ != null) {
        if (vehicle24F1_ == null) {
          vehicle24F1_ = new global::Apollo.Drivers.Vehicle2_4f1();
        }
        Vehicle24F1.MergeFrom(other.Vehicle24F1);
      }
      if (other.vehicle14F0_ != null) {
        if (vehicle14F0_ == null) {
          vehicle14F0_ = new global::Apollo.Drivers.Vehicle1_4f0();
        }
        Vehicle14F0.MergeFrom(other.Vehicle14F0);
      }
      if (other.esrSim15C0_ != null) {
        if (esrSim15C0_ == null) {
          esrSim15C0_ = new global::Apollo.Drivers.Esr_sim1_5c0();
        }
        EsrSim15C0.MergeFrom(other.EsrSim15C0);
      }
      if (other.esrStatus14E0_ != null) {
        if (esrStatus14E0_ == null) {
          esrStatus14E0_ = new global::Apollo.Drivers.Esr_status1_4e0();
        }
        EsrStatus14E0.MergeFrom(other.EsrStatus14E0);
      }
      if (other.esrStatus24E1_ != null) {
        if (esrStatus24E1_ == null) {
          esrStatus24E1_ = new global::Apollo.Drivers.Esr_status2_4e1();
        }
        EsrStatus24E1.MergeFrom(other.EsrStatus24E1);
      }
      if (other.esrStatus85E7_ != null) {
        if (esrStatus85E7_ == null) {
          esrStatus85E7_ = new global::Apollo.Drivers.Esr_status8_5e7();
        }
        EsrStatus85E7.MergeFrom(other.EsrStatus85E7);
      }
      if (other.esrStatus75E6_ != null) {
        if (esrStatus75E6_ == null) {
          esrStatus75E6_ = new global::Apollo.Drivers.Esr_status7_5e6();
        }
        EsrStatus75E6.MergeFrom(other.EsrStatus75E6);
      }
      if (other.vehicle35F2_ != null) {
        if (vehicle35F2_ == null) {
          vehicle35F2_ = new global::Apollo.Drivers.Vehicle3_5f2();
        }
        Vehicle35F2.MergeFrom(other.Vehicle35F2);
      }
      if (other.vehicle45F3_ != null) {
        if (vehicle45F3_ == null) {
          vehicle45F3_ = new global::Apollo.Drivers.Vehicle4_5f3();
        }
        Vehicle45F3.MergeFrom(other.Vehicle45F3);
      }
      if (other.vehicle55F4_ != null) {
        if (vehicle55F4_ == null) {
          vehicle55F4_ = new global::Apollo.Drivers.Vehicle5_5f4();
        }
        Vehicle55F4.MergeFrom(other.Vehicle55F4);
      }
      if (other.vehicle65F5_ != null) {
        if (vehicle65F5_ == null) {
          vehicle65F5_ = new global::Apollo.Drivers.Vehicle6_5f5();
        }
        Vehicle65F5.MergeFrom(other.Vehicle65F5);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (esrStatus95E8_ == null) {
              esrStatus95E8_ = new global::Apollo.Drivers.Esr_status9_5e8();
            }
            input.ReadMessage(esrStatus95E8_);
            break;
          }
          case 26: {
            if (esrStatus65E5_ == null) {
              esrStatus65E5_ = new global::Apollo.Drivers.Esr_status6_5e5();
            }
            input.ReadMessage(esrStatus65E5_);
            break;
          }
          case 34: {
            if (esrStatus55E4_ == null) {
              esrStatus55E4_ = new global::Apollo.Drivers.Esr_status5_5e4();
            }
            input.ReadMessage(esrStatus55E4_);
            break;
          }
          case 42: {
            if (esrStatus34E2_ == null) {
              esrStatus34E2_ = new global::Apollo.Drivers.Esr_status3_4e2();
            }
            input.ReadMessage(esrStatus34E2_);
            break;
          }
          case 50: {
            if (esrStatus44E3_ == null) {
              esrStatus44E3_ = new global::Apollo.Drivers.Esr_status4_4e3();
            }
            input.ReadMessage(esrStatus44E3_);
            break;
          }
          case 58: {
            esrTrackmotionpower540_.AddEntriesFrom(input, _repeated_esrTrackmotionpower540_codec);
            break;
          }
          case 66: {
            if (acmInstReq7E0_ == null) {
              acmInstReq7E0_ = new global::Apollo.Drivers.Acm_inst_req_7e0();
            }
            input.ReadMessage(acmInstReq7E0_);
            break;
          }
          case 74: {
            esrTrack01500_.AddEntriesFrom(input, _repeated_esrTrack01500_codec);
            break;
          }
          case 82: {
            if (esrValid15D0_ == null) {
              esrValid15D0_ = new global::Apollo.Drivers.Esr_valid1_5d0();
            }
            input.ReadMessage(esrValid15D0_);
            break;
          }
          case 90: {
            if (esrValid25D1_ == null) {
              esrValid25D1_ = new global::Apollo.Drivers.Esr_valid2_5d1();
            }
            input.ReadMessage(esrValid25D1_);
            break;
          }
          case 98: {
            if (acmInstResp7E4_ == null) {
              acmInstResp7E4_ = new global::Apollo.Drivers.Acm_inst_resp_7e4();
            }
            input.ReadMessage(acmInstResp7E4_);
            break;
          }
          case 106: {
            if (vehicle24F1_ == null) {
              vehicle24F1_ = new global::Apollo.Drivers.Vehicle2_4f1();
            }
            input.ReadMessage(vehicle24F1_);
            break;
          }
          case 114: {
            if (vehicle14F0_ == null) {
              vehicle14F0_ = new global::Apollo.Drivers.Vehicle1_4f0();
            }
            input.ReadMessage(vehicle14F0_);
            break;
          }
          case 122: {
            if (esrSim15C0_ == null) {
              esrSim15C0_ = new global::Apollo.Drivers.Esr_sim1_5c0();
            }
            input.ReadMessage(esrSim15C0_);
            break;
          }
          case 130: {
            if (esrStatus14E0_ == null) {
              esrStatus14E0_ = new global::Apollo.Drivers.Esr_status1_4e0();
            }
            input.ReadMessage(esrStatus14E0_);
            break;
          }
          case 138: {
            if (esrStatus24E1_ == null) {
              esrStatus24E1_ = new global::Apollo.Drivers.Esr_status2_4e1();
            }
            input.ReadMessage(esrStatus24E1_);
            break;
          }
          case 146: {
            if (esrStatus85E7_ == null) {
              esrStatus85E7_ = new global::Apollo.Drivers.Esr_status8_5e7();
            }
            input.ReadMessage(esrStatus85E7_);
            break;
          }
          case 154: {
            if (esrStatus75E6_ == null) {
              esrStatus75E6_ = new global::Apollo.Drivers.Esr_status7_5e6();
            }
            input.ReadMessage(esrStatus75E6_);
            break;
          }
          case 162: {
            if (vehicle35F2_ == null) {
              vehicle35F2_ = new global::Apollo.Drivers.Vehicle3_5f2();
            }
            input.ReadMessage(vehicle35F2_);
            break;
          }
          case 170: {
            if (vehicle45F3_ == null) {
              vehicle45F3_ = new global::Apollo.Drivers.Vehicle4_5f3();
            }
            input.ReadMessage(vehicle45F3_);
            break;
          }
          case 178: {
            if (vehicle55F4_ == null) {
              vehicle55F4_ = new global::Apollo.Drivers.Vehicle5_5f4();
            }
            input.ReadMessage(vehicle55F4_);
            break;
          }
          case 186: {
            if (vehicle65F5_ == null) {
              vehicle65F5_ = new global::Apollo.Drivers.Vehicle6_5f5();
            }
            input.ReadMessage(vehicle65F5_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
