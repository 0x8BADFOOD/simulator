// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/lane_graph.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Prediction {

  /// <summary>Holder for reflection information generated from modules/prediction/proto/lane_graph.proto</summary>
  public static partial class LaneGraphReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/prediction/proto/lane_graph.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LaneGraphReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciltb2R1bGVzL3ByZWRpY3Rpb24vcHJvdG8vbGFuZV9ncmFwaC5wcm90bxIR",
            "YXBvbGxvLnByZWRpY3Rpb24aI21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21l",
            "dHJ5LnByb3RvGiRtb2R1bGVzL2NvbW1vbi9wcm90by9wbmNfcG9pbnQucHJv",
            "dG8isgIKCUxhbmVQb2ludBIoCghwb3NpdGlvbhgBIAEoCzIWLmFwb2xsby5j",
            "b21tb24uUG9pbnQzRBIPCgdoZWFkaW5nGAIgASgBEg0KBXdpZHRoGAMgASgB",
            "EhIKCnJlbGF0aXZlX3MYBCABKAESEgoKcmVsYXRpdmVfbBgFIAEoARISCgph",
            "bmdsZV9kaWZmGAYgASgBEg0KBWthcHBhGAcgASgBEkAKDXNjZW5hcmlvX3R5",
            "cGUYCCABKA4yKS5hcG9sbG8ucHJlZGljdGlvbi5MYW5lUG9pbnQuU2NlbmFy",
            "aW9UeXBlEhMKC3NwZWVkX2xpbWl0GAkgASgBIjkKDFNjZW5hcmlvVHlwZRIO",
            "CgpVUkJBTl9ST0FEEAASDAoISlVOQ1RJT04QARILCgdISUdIV0FZEAIingEK",
            "C0xhbmVTZWdtZW50Eg8KB2xhbmVfaWQYASABKAkSDwoHc3RhcnRfcxgCIAEo",
            "ARINCgVlbmRfcxgDIAEoARIWCg5sYW5lX3R1cm5fdHlwZRgEIAEoDRIwCgps",
            "YW5lX3BvaW50GAUgAygLMhwuYXBvbGxvLnByZWRpY3Rpb24uTGFuZVBvaW50",
            "EhQKDHRvdGFsX2xlbmd0aBgGIAEoASIyCg5OZWFyYnlPYnN0YWNsZRIKCgJp",
            "ZBgBIAEoBRIJCgFzGAIgASgBEgkKAWwYAyABKAEiWgoIU3RvcFNpZ24SFAoM",
            "c3RvcF9zaWduX2lkGAEgASgJEg8KB2xhbmVfaWQYAiABKAkSDgoGbGFuZV9z",
            "GAMgASgBEhcKD2xhbmVfc2VxdWVuY2VfcxgEIAEoASKnCAoMTGFuZVNlcXVl",
            "bmNlEhgKEGxhbmVfc2VxdWVuY2VfaWQYASABKAUSNAoMbGFuZV9zZWdtZW50",
            "GAIgAygLMh4uYXBvbGxvLnByZWRpY3Rpb24uTGFuZVNlZ21lbnQSOgoPbmVh",
            "cmJ5X29ic3RhY2xlGAMgAygLMiEuYXBvbGxvLnByZWRpY3Rpb24uTmVhcmJ5",
            "T2JzdGFjbGUSDgoGbGFuZV9zGBEgASgBEg4KBmxhbmVfbBgSIAEoARIuCglz",
            "dG9wX3NpZ24YFCABKAsyGy5hcG9sbG8ucHJlZGljdGlvbi5TdG9wU2lnbhI6",
            "CghmZWF0dXJlcxgEIAEoCzIoLmFwb2xsby5wcmVkaWN0aW9uLkxhbmVTZXF1",
            "ZW5jZS5GZWF0dXJlcxINCgVsYWJlbBgFIAEoBRITCgtwcm9iYWJpbGl0eRgG",
            "IAEoARIUCgxhY2NlbGVyYXRpb24YByABKAESGwoTdGltZV90b19sYW5lX2Nl",
            "bnRlchgQIAEoARIZChF0aW1lX3RvX2xhbmVfZWRnZRgTIAEoARIsCgpwYXRo",
            "X3BvaW50GAggAygLMhguYXBvbGxvLmNvbW1vbi5QYXRoUG9pbnQSQwoNYmVo",
            "YXZpb3JfdHlwZRgJIAEoDjIsLmFwb2xsby5wcmVkaWN0aW9uLkxhbmVTZXF1",
            "ZW5jZS5CZWhhdmlvclR5cGUSFwoPdmVoaWNsZV9vbl9sYW5lGAogASgIEjUK",
            "D2N1cnJfbGFuZV9wb2ludBgLIAMoCzIcLmFwb2xsby5wcmVkaWN0aW9uLkxh",
            "bmVQb2ludBI5ChNsZWZ0X25laWdoYm9yX3BvaW50GAwgAygLMhwuYXBvbGxv",
            "LnByZWRpY3Rpb24uTGFuZVBvaW50EjoKFHJpZ2h0X25laWdoYm9yX3BvaW50",
            "GA0gAygLMhwuYXBvbGxvLnByZWRpY3Rpb24uTGFuZVBvaW50Ej8KFGxlZnRf",
            "bmVhcmJ5X29ic3RhY2xlGA4gAygLMiEuYXBvbGxvLnByZWRpY3Rpb24uTmVh",
            "cmJ5T2JzdGFjbGUSQAoVcmlnaHRfbmVhcmJ5X29ic3RhY2xlGA8gAygLMiEu",
            "YXBvbGxvLnByZWRpY3Rpb24uTmVhcmJ5T2JzdGFjbGUaIAoIRmVhdHVyZXMS",
            "FAoMbWxwX2ZlYXR1cmVzGAEgAygBIq0BCgxCZWhhdmlvclR5cGUSFgoSQkVI",
            "QVZJT1JUWVBFX0RVTU1ZEAASEQoNTk9UX0dPVE9fTEFORRABEhIKDkNPTlNU",
            "QU5UX1NQRUVEEAISFgoSU01BTExfQUNDRUxFUkFUSU9OEAMSFgoSTEFSR0Vf",
            "QUNDRUxFUkFUSU9OEAQSFgoSU01BTExfREVDRUxFUkFUSU9OEAUSFgoSTEFS",
            "R0VfREVDRUxFUkFUSU9OEAYiQwoJTGFuZUdyYXBoEjYKDWxhbmVfc2VxdWVu",
            "Y2UYASADKAsyHy5hcG9sbG8ucHJlZGljdGlvbi5MYW5lU2VxdWVuY2UiVAoM",
            "TGFuZU9ic3RhY2xlEhMKC29ic3RhY2xlX2lkGAEgASgFEg8KB2xhbmVfaWQY",
            "AiABKAkSDgoGbGFuZV9zGAMgASgBEg4KBmxhbmVfbBgEIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Common.PncPointReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.LanePoint), global::Apollo.Prediction.LanePoint.Parser, new[]{ "Position", "Heading", "Width", "RelativeS", "RelativeL", "AngleDiff", "Kappa", "ScenarioType", "SpeedLimit" }, null, new[]{ typeof(global::Apollo.Prediction.LanePoint.Types.ScenarioType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.LaneSegment), global::Apollo.Prediction.LaneSegment.Parser, new[]{ "LaneId", "StartS", "EndS", "LaneTurnType", "LanePoint", "TotalLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.NearbyObstacle), global::Apollo.Prediction.NearbyObstacle.Parser, new[]{ "Id", "S", "L" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.StopSign), global::Apollo.Prediction.StopSign.Parser, new[]{ "StopSignId", "LaneId", "LaneS", "LaneSequenceS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.LaneSequence), global::Apollo.Prediction.LaneSequence.Parser, new[]{ "LaneSequenceId", "LaneSegment", "NearbyObstacle", "LaneS", "LaneL", "StopSign", "Features", "Label", "Probability", "Acceleration", "TimeToLaneCenter", "TimeToLaneEdge", "PathPoint", "BehaviorType", "VehicleOnLane", "CurrLanePoint", "LeftNeighborPoint", "RightNeighborPoint", "LeftNearbyObstacle", "RightNearbyObstacle" }, null, new[]{ typeof(global::Apollo.Prediction.LaneSequence.Types.BehaviorType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.LaneSequence.Types.Features), global::Apollo.Prediction.LaneSequence.Types.Features.Parser, new[]{ "MlpFeatures" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.LaneGraph), global::Apollo.Prediction.LaneGraph.Parser, new[]{ "LaneSequence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.LaneObstacle), global::Apollo.Prediction.LaneObstacle.Parser, new[]{ "ObstacleId", "LaneId", "LaneS", "LaneL" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LanePoint : pb::IMessage<LanePoint> {
    private static readonly pb::MessageParser<LanePoint> _parser = new pb::MessageParser<LanePoint>(() => new LanePoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.LaneGraphReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanePoint(LanePoint other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      heading_ = other.heading_;
      width_ = other.width_;
      relativeS_ = other.relativeS_;
      relativeL_ = other.relativeL_;
      angleDiff_ = other.angleDiff_;
      kappa_ = other.kappa_;
      scenarioType_ = other.scenarioType_;
      speedLimit_ = other.speedLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanePoint Clone() {
      return new LanePoint(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Apollo.Common.Point3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 2;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "relative_s" field.</summary>
    public const int RelativeSFieldNumber = 4;
    private double relativeS_;
    /// <summary>
    /// relative s to focus obstacle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RelativeS {
      get { return relativeS_; }
      set {
        relativeS_ = value;
      }
    }

    /// <summary>Field number for the "relative_l" field.</summary>
    public const int RelativeLFieldNumber = 5;
    private double relativeL_;
    /// <summary>
    /// relative l to focus obstacle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RelativeL {
      get { return relativeL_; }
      set {
        relativeL_ = value;
      }
    }

    /// <summary>Field number for the "angle_diff" field.</summary>
    public const int AngleDiffFieldNumber = 6;
    private double angleDiff_;
    /// <summary>
    /// lane point heading relative to focused obstacle heading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngleDiff {
      get { return angleDiff_; }
      set {
        angleDiff_ = value;
      }
    }

    /// <summary>Field number for the "kappa" field.</summary>
    public const int KappaFieldNumber = 7;
    private double kappa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Kappa {
      get { return kappa_; }
      set {
        kappa_ = value;
      }
    }

    /// <summary>Field number for the "scenario_type" field.</summary>
    public const int ScenarioTypeFieldNumber = 8;
    private global::Apollo.Prediction.LanePoint.Types.ScenarioType scenarioType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.LanePoint.Types.ScenarioType ScenarioType {
      get { return scenarioType_; }
      set {
        scenarioType_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 9;
    private double speedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (Heading != other.Heading) return false;
      if (Width != other.Width) return false;
      if (RelativeS != other.RelativeS) return false;
      if (RelativeL != other.RelativeL) return false;
      if (AngleDiff != other.AngleDiff) return false;
      if (Kappa != other.Kappa) return false;
      if (ScenarioType != other.ScenarioType) return false;
      if (SpeedLimit != other.SpeedLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (RelativeS != 0D) hash ^= RelativeS.GetHashCode();
      if (RelativeL != 0D) hash ^= RelativeL.GetHashCode();
      if (AngleDiff != 0D) hash ^= AngleDiff.GetHashCode();
      if (Kappa != 0D) hash ^= Kappa.GetHashCode();
      if (ScenarioType != 0) hash ^= ScenarioType.GetHashCode();
      if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Heading != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Heading);
      }
      if (Width != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Width);
      }
      if (RelativeS != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RelativeS);
      }
      if (RelativeL != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RelativeL);
      }
      if (AngleDiff != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(AngleDiff);
      }
      if (Kappa != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Kappa);
      }
      if (ScenarioType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ScenarioType);
      }
      if (SpeedLimit != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SpeedLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (RelativeS != 0D) {
        size += 1 + 8;
      }
      if (RelativeL != 0D) {
        size += 1 + 8;
      }
      if (AngleDiff != 0D) {
        size += 1 + 8;
      }
      if (Kappa != 0D) {
        size += 1 + 8;
      }
      if (ScenarioType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScenarioType);
      }
      if (SpeedLimit != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanePoint other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.RelativeS != 0D) {
        RelativeS = other.RelativeS;
      }
      if (other.RelativeL != 0D) {
        RelativeL = other.RelativeL;
      }
      if (other.AngleDiff != 0D) {
        AngleDiff = other.AngleDiff;
      }
      if (other.Kappa != 0D) {
        Kappa = other.Kappa;
      }
      if (other.ScenarioType != 0) {
        ScenarioType = other.ScenarioType;
      }
      if (other.SpeedLimit != 0D) {
        SpeedLimit = other.SpeedLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(position_);
            break;
          }
          case 17: {
            Heading = input.ReadDouble();
            break;
          }
          case 25: {
            Width = input.ReadDouble();
            break;
          }
          case 33: {
            RelativeS = input.ReadDouble();
            break;
          }
          case 41: {
            RelativeL = input.ReadDouble();
            break;
          }
          case 49: {
            AngleDiff = input.ReadDouble();
            break;
          }
          case 57: {
            Kappa = input.ReadDouble();
            break;
          }
          case 64: {
            scenarioType_ = (global::Apollo.Prediction.LanePoint.Types.ScenarioType) input.ReadEnum();
            break;
          }
          case 73: {
            SpeedLimit = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LanePoint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ScenarioType {
        [pbr::OriginalName("URBAN_ROAD")] UrbanRoad = 0,
        [pbr::OriginalName("JUNCTION")] Junction = 1,
        [pbr::OriginalName("HIGHWAY")] Highway = 2,
      }

    }
    #endregion

  }

  public sealed partial class LaneSegment : pb::IMessage<LaneSegment> {
    private static readonly pb::MessageParser<LaneSegment> _parser = new pb::MessageParser<LaneSegment>(() => new LaneSegment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.LaneGraphReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSegment(LaneSegment other) : this() {
      laneId_ = other.laneId_;
      startS_ = other.startS_;
      endS_ = other.endS_;
      laneTurnType_ = other.laneTurnType_;
      lanePoint_ = other.lanePoint_.Clone();
      totalLength_ = other.totalLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSegment Clone() {
      return new LaneSegment(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private string laneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneId {
      get { return laneId_; }
      set {
        laneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_s" field.</summary>
    public const int StartSFieldNumber = 2;
    private double startS_;
    /// <summary>
    /// s offset of the first lane point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartS {
      get { return startS_; }
      set {
        startS_ = value;
      }
    }

    /// <summary>Field number for the "end_s" field.</summary>
    public const int EndSFieldNumber = 3;
    private double endS_;
    /// <summary>
    /// s offset of the last lane point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EndS {
      get { return endS_; }
      set {
        endS_ = value;
      }
    }

    /// <summary>Field number for the "lane_turn_type" field.</summary>
    public const int LaneTurnTypeFieldNumber = 4;
    private uint laneTurnType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneTurnType {
      get { return laneTurnType_; }
      set {
        laneTurnType_ = value;
      }
    }

    /// <summary>Field number for the "lane_point" field.</summary>
    public const int LanePointFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LanePoint> _repeated_lanePoint_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Prediction.LanePoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LanePoint> lanePoint_ = new pbc::RepeatedField<global::Apollo.Prediction.LanePoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LanePoint> LanePoint {
      get { return lanePoint_; }
    }

    /// <summary>Field number for the "total_length" field.</summary>
    public const int TotalLengthFieldNumber = 6;
    private double totalLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalLength {
      get { return totalLength_; }
      set {
        totalLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if (StartS != other.StartS) return false;
      if (EndS != other.EndS) return false;
      if (LaneTurnType != other.LaneTurnType) return false;
      if(!lanePoint_.Equals(other.lanePoint_)) return false;
      if (TotalLength != other.TotalLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneId.Length != 0) hash ^= LaneId.GetHashCode();
      if (StartS != 0D) hash ^= StartS.GetHashCode();
      if (EndS != 0D) hash ^= EndS.GetHashCode();
      if (LaneTurnType != 0) hash ^= LaneTurnType.GetHashCode();
      hash ^= lanePoint_.GetHashCode();
      if (TotalLength != 0D) hash ^= TotalLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LaneId);
      }
      if (StartS != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StartS);
      }
      if (EndS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(EndS);
      }
      if (LaneTurnType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LaneTurnType);
      }
      lanePoint_.WriteTo(output, _repeated_lanePoint_codec);
      if (TotalLength != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TotalLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneId);
      }
      if (StartS != 0D) {
        size += 1 + 8;
      }
      if (EndS != 0D) {
        size += 1 + 8;
      }
      if (LaneTurnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneTurnType);
      }
      size += lanePoint_.CalculateSize(_repeated_lanePoint_codec);
      if (TotalLength != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneSegment other) {
      if (other == null) {
        return;
      }
      if (other.LaneId.Length != 0) {
        LaneId = other.LaneId;
      }
      if (other.StartS != 0D) {
        StartS = other.StartS;
      }
      if (other.EndS != 0D) {
        EndS = other.EndS;
      }
      if (other.LaneTurnType != 0) {
        LaneTurnType = other.LaneTurnType;
      }
      lanePoint_.Add(other.lanePoint_);
      if (other.TotalLength != 0D) {
        TotalLength = other.TotalLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LaneId = input.ReadString();
            break;
          }
          case 17: {
            StartS = input.ReadDouble();
            break;
          }
          case 25: {
            EndS = input.ReadDouble();
            break;
          }
          case 32: {
            LaneTurnType = input.ReadUInt32();
            break;
          }
          case 42: {
            lanePoint_.AddEntriesFrom(input, _repeated_lanePoint_codec);
            break;
          }
          case 49: {
            TotalLength = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NearbyObstacle : pb::IMessage<NearbyObstacle> {
    private static readonly pb::MessageParser<NearbyObstacle> _parser = new pb::MessageParser<NearbyObstacle>(() => new NearbyObstacle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NearbyObstacle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.LaneGraphReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NearbyObstacle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NearbyObstacle(NearbyObstacle other) : this() {
      id_ = other.id_;
      s_ = other.s_;
      l_ = other.l_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NearbyObstacle Clone() {
      return new NearbyObstacle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 2;
    private double s_;
    /// <summary>
    /// relative to focus obstacle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 3;
    private double l_;
    /// <summary>
    /// relative to focus obstacle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NearbyObstacle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NearbyObstacle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (S != other.S) return false;
      if (L != other.L) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (S != 0D) hash ^= S.GetHashCode();
      if (L != 0D) hash ^= L.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (S != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(S);
      }
      if (L != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(L);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (S != 0D) {
        size += 1 + 8;
      }
      if (L != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NearbyObstacle other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.L != 0D) {
        L = other.L;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 17: {
            S = input.ReadDouble();
            break;
          }
          case 25: {
            L = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopSign : pb::IMessage<StopSign> {
    private static readonly pb::MessageParser<StopSign> _parser = new pb::MessageParser<StopSign>(() => new StopSign());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopSign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.LaneGraphReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopSign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopSign(StopSign other) : this() {
      stopSignId_ = other.stopSignId_;
      laneId_ = other.laneId_;
      laneS_ = other.laneS_;
      laneSequenceS_ = other.laneSequenceS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopSign Clone() {
      return new StopSign(this);
    }

    /// <summary>Field number for the "stop_sign_id" field.</summary>
    public const int StopSignIdFieldNumber = 1;
    private string stopSignId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopSignId {
      get { return stopSignId_; }
      set {
        stopSignId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 2;
    private string laneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneId {
      get { return laneId_; }
      set {
        laneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lane_s" field.</summary>
    public const int LaneSFieldNumber = 3;
    private double laneS_;
    /// <summary>
    /// the s value within the lane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneS {
      get { return laneS_; }
      set {
        laneS_ = value;
      }
    }

    /// <summary>Field number for the "lane_sequence_s" field.</summary>
    public const int LaneSequenceSFieldNumber = 4;
    private double laneSequenceS_;
    /// <summary>
    /// the s value along lane sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneSequenceS {
      get { return laneSequenceS_; }
      set {
        laneSequenceS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopSign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopSign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StopSignId != other.StopSignId) return false;
      if (LaneId != other.LaneId) return false;
      if (LaneS != other.LaneS) return false;
      if (LaneSequenceS != other.LaneSequenceS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StopSignId.Length != 0) hash ^= StopSignId.GetHashCode();
      if (LaneId.Length != 0) hash ^= LaneId.GetHashCode();
      if (LaneS != 0D) hash ^= LaneS.GetHashCode();
      if (LaneSequenceS != 0D) hash ^= LaneSequenceS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StopSignId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StopSignId);
      }
      if (LaneId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LaneId);
      }
      if (LaneS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LaneS);
      }
      if (LaneSequenceS != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LaneSequenceS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StopSignId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopSignId);
      }
      if (LaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneId);
      }
      if (LaneS != 0D) {
        size += 1 + 8;
      }
      if (LaneSequenceS != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopSign other) {
      if (other == null) {
        return;
      }
      if (other.StopSignId.Length != 0) {
        StopSignId = other.StopSignId;
      }
      if (other.LaneId.Length != 0) {
        LaneId = other.LaneId;
      }
      if (other.LaneS != 0D) {
        LaneS = other.LaneS;
      }
      if (other.LaneSequenceS != 0D) {
        LaneSequenceS = other.LaneSequenceS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StopSignId = input.ReadString();
            break;
          }
          case 18: {
            LaneId = input.ReadString();
            break;
          }
          case 25: {
            LaneS = input.ReadDouble();
            break;
          }
          case 33: {
            LaneSequenceS = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// next id = 21
  /// </summary>
  public sealed partial class LaneSequence : pb::IMessage<LaneSequence> {
    private static readonly pb::MessageParser<LaneSequence> _parser = new pb::MessageParser<LaneSequence>(() => new LaneSequence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneSequence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.LaneGraphReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSequence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSequence(LaneSequence other) : this() {
      laneSequenceId_ = other.laneSequenceId_;
      laneSegment_ = other.laneSegment_.Clone();
      nearbyObstacle_ = other.nearbyObstacle_.Clone();
      laneS_ = other.laneS_;
      laneL_ = other.laneL_;
      StopSign = other.stopSign_ != null ? other.StopSign.Clone() : null;
      Features = other.features_ != null ? other.Features.Clone() : null;
      label_ = other.label_;
      probability_ = other.probability_;
      acceleration_ = other.acceleration_;
      timeToLaneCenter_ = other.timeToLaneCenter_;
      timeToLaneEdge_ = other.timeToLaneEdge_;
      pathPoint_ = other.pathPoint_.Clone();
      behaviorType_ = other.behaviorType_;
      vehicleOnLane_ = other.vehicleOnLane_;
      currLanePoint_ = other.currLanePoint_.Clone();
      leftNeighborPoint_ = other.leftNeighborPoint_.Clone();
      rightNeighborPoint_ = other.rightNeighborPoint_.Clone();
      leftNearbyObstacle_ = other.leftNearbyObstacle_.Clone();
      rightNearbyObstacle_ = other.rightNearbyObstacle_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSequence Clone() {
      return new LaneSequence(this);
    }

    /// <summary>Field number for the "lane_sequence_id" field.</summary>
    public const int LaneSequenceIdFieldNumber = 1;
    private int laneSequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneSequenceId {
      get { return laneSequenceId_; }
      set {
        laneSequenceId_ = value;
      }
    }

    /// <summary>Field number for the "lane_segment" field.</summary>
    public const int LaneSegmentFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LaneSegment> _repeated_laneSegment_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Prediction.LaneSegment.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LaneSegment> laneSegment_ = new pbc::RepeatedField<global::Apollo.Prediction.LaneSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LaneSegment> LaneSegment {
      get { return laneSegment_; }
    }

    /// <summary>Field number for the "nearby_obstacle" field.</summary>
    public const int NearbyObstacleFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.NearbyObstacle> _repeated_nearbyObstacle_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Prediction.NearbyObstacle.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle> nearbyObstacle_ = new pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle>();
    /// <summary>
    /// nearby obstacles on this lane sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle> NearbyObstacle {
      get { return nearbyObstacle_; }
    }

    /// <summary>Field number for the "lane_s" field.</summary>
    public const int LaneSFieldNumber = 17;
    private double laneS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneS {
      get { return laneS_; }
      set {
        laneS_ = value;
      }
    }

    /// <summary>Field number for the "lane_l" field.</summary>
    public const int LaneLFieldNumber = 18;
    private double laneL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneL {
      get { return laneL_; }
      set {
        laneL_ = value;
      }
    }

    /// <summary>Field number for the "stop_sign" field.</summary>
    public const int StopSignFieldNumber = 20;
    private global::Apollo.Prediction.StopSign stopSign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.StopSign StopSign {
      get { return stopSign_; }
      set {
        stopSign_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 4;
    private global::Apollo.Prediction.LaneSequence.Types.Features features_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.LaneSequence.Types.Features Features {
      get { return features_; }
      set {
        features_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private int label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 6;
    private double probability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 7;
    private double acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "time_to_lane_center" field.</summary>
    public const int TimeToLaneCenterFieldNumber = 16;
    private double timeToLaneCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeToLaneCenter {
      get { return timeToLaneCenter_; }
      set {
        timeToLaneCenter_ = value;
      }
    }

    /// <summary>Field number for the "time_to_lane_edge" field.</summary>
    public const int TimeToLaneEdgeFieldNumber = 19;
    private double timeToLaneEdge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeToLaneEdge {
      get { return timeToLaneEdge_; }
      set {
        timeToLaneEdge_ = value;
      }
    }

    /// <summary>Field number for the "path_point" field.</summary>
    public const int PathPointFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Apollo.Common.PathPoint> _repeated_pathPoint_codec
        = pb::FieldCodec.ForMessage(66, global::Apollo.Common.PathPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.PathPoint> pathPoint_ = new pbc::RepeatedField<global::Apollo.Common.PathPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.PathPoint> PathPoint {
      get { return pathPoint_; }
    }

    /// <summary>Field number for the "behavior_type" field.</summary>
    public const int BehaviorTypeFieldNumber = 9;
    private global::Apollo.Prediction.LaneSequence.Types.BehaviorType behaviorType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.LaneSequence.Types.BehaviorType BehaviorType {
      get { return behaviorType_; }
      set {
        behaviorType_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_on_lane" field.</summary>
    public const int VehicleOnLaneFieldNumber = 10;
    private bool vehicleOnLane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VehicleOnLane {
      get { return vehicleOnLane_; }
      set {
        vehicleOnLane_ = value;
      }
    }

    /// <summary>Field number for the "curr_lane_point" field.</summary>
    public const int CurrLanePointFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LanePoint> _repeated_currLanePoint_codec
        = pb::FieldCodec.ForMessage(90, global::Apollo.Prediction.LanePoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LanePoint> currLanePoint_ = new pbc::RepeatedField<global::Apollo.Prediction.LanePoint>();
    /// <summary>
    /// lane points on this lane sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LanePoint> CurrLanePoint {
      get { return currLanePoint_; }
    }

    /// <summary>Field number for the "left_neighbor_point" field.</summary>
    public const int LeftNeighborPointFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LanePoint> _repeated_leftNeighborPoint_codec
        = pb::FieldCodec.ForMessage(98, global::Apollo.Prediction.LanePoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LanePoint> leftNeighborPoint_ = new pbc::RepeatedField<global::Apollo.Prediction.LanePoint>();
    /// <summary>
    /// lane points on the left neighbor lane sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LanePoint> LeftNeighborPoint {
      get { return leftNeighborPoint_; }
    }

    /// <summary>Field number for the "right_neighbor_point" field.</summary>
    public const int RightNeighborPointFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LanePoint> _repeated_rightNeighborPoint_codec
        = pb::FieldCodec.ForMessage(106, global::Apollo.Prediction.LanePoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LanePoint> rightNeighborPoint_ = new pbc::RepeatedField<global::Apollo.Prediction.LanePoint>();
    /// <summary>
    /// lane points on the right neighbor lane sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LanePoint> RightNeighborPoint {
      get { return rightNeighborPoint_; }
    }

    /// <summary>Field number for the "left_nearby_obstacle" field.</summary>
    public const int LeftNearbyObstacleFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.NearbyObstacle> _repeated_leftNearbyObstacle_codec
        = pb::FieldCodec.ForMessage(114, global::Apollo.Prediction.NearbyObstacle.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle> leftNearbyObstacle_ = new pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle>();
    /// <summary>
    /// nearby obstacles on the left neighbor lane sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle> LeftNearbyObstacle {
      get { return leftNearbyObstacle_; }
    }

    /// <summary>Field number for the "right_nearby_obstacle" field.</summary>
    public const int RightNearbyObstacleFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.NearbyObstacle> _repeated_rightNearbyObstacle_codec
        = pb::FieldCodec.ForMessage(122, global::Apollo.Prediction.NearbyObstacle.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle> rightNearbyObstacle_ = new pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle>();
    /// <summary>
    /// nearby obstacles on the right neighbor lane sequence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.NearbyObstacle> RightNearbyObstacle {
      get { return rightNearbyObstacle_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneSequence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneSequence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneSequenceId != other.LaneSequenceId) return false;
      if(!laneSegment_.Equals(other.laneSegment_)) return false;
      if(!nearbyObstacle_.Equals(other.nearbyObstacle_)) return false;
      if (LaneS != other.LaneS) return false;
      if (LaneL != other.LaneL) return false;
      if (!object.Equals(StopSign, other.StopSign)) return false;
      if (!object.Equals(Features, other.Features)) return false;
      if (Label != other.Label) return false;
      if (Probability != other.Probability) return false;
      if (Acceleration != other.Acceleration) return false;
      if (TimeToLaneCenter != other.TimeToLaneCenter) return false;
      if (TimeToLaneEdge != other.TimeToLaneEdge) return false;
      if(!pathPoint_.Equals(other.pathPoint_)) return false;
      if (BehaviorType != other.BehaviorType) return false;
      if (VehicleOnLane != other.VehicleOnLane) return false;
      if(!currLanePoint_.Equals(other.currLanePoint_)) return false;
      if(!leftNeighborPoint_.Equals(other.leftNeighborPoint_)) return false;
      if(!rightNeighborPoint_.Equals(other.rightNeighborPoint_)) return false;
      if(!leftNearbyObstacle_.Equals(other.leftNearbyObstacle_)) return false;
      if(!rightNearbyObstacle_.Equals(other.rightNearbyObstacle_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneSequenceId != 0) hash ^= LaneSequenceId.GetHashCode();
      hash ^= laneSegment_.GetHashCode();
      hash ^= nearbyObstacle_.GetHashCode();
      if (LaneS != 0D) hash ^= LaneS.GetHashCode();
      if (LaneL != 0D) hash ^= LaneL.GetHashCode();
      if (stopSign_ != null) hash ^= StopSign.GetHashCode();
      if (features_ != null) hash ^= Features.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (Probability != 0D) hash ^= Probability.GetHashCode();
      if (Acceleration != 0D) hash ^= Acceleration.GetHashCode();
      if (TimeToLaneCenter != 0D) hash ^= TimeToLaneCenter.GetHashCode();
      if (TimeToLaneEdge != 0D) hash ^= TimeToLaneEdge.GetHashCode();
      hash ^= pathPoint_.GetHashCode();
      if (BehaviorType != 0) hash ^= BehaviorType.GetHashCode();
      if (VehicleOnLane != false) hash ^= VehicleOnLane.GetHashCode();
      hash ^= currLanePoint_.GetHashCode();
      hash ^= leftNeighborPoint_.GetHashCode();
      hash ^= rightNeighborPoint_.GetHashCode();
      hash ^= leftNearbyObstacle_.GetHashCode();
      hash ^= rightNearbyObstacle_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneSequenceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneSequenceId);
      }
      laneSegment_.WriteTo(output, _repeated_laneSegment_codec);
      nearbyObstacle_.WriteTo(output, _repeated_nearbyObstacle_codec);
      if (features_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Features);
      }
      if (Label != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Label);
      }
      if (Probability != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Probability);
      }
      if (Acceleration != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Acceleration);
      }
      pathPoint_.WriteTo(output, _repeated_pathPoint_codec);
      if (BehaviorType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) BehaviorType);
      }
      if (VehicleOnLane != false) {
        output.WriteRawTag(80);
        output.WriteBool(VehicleOnLane);
      }
      currLanePoint_.WriteTo(output, _repeated_currLanePoint_codec);
      leftNeighborPoint_.WriteTo(output, _repeated_leftNeighborPoint_codec);
      rightNeighborPoint_.WriteTo(output, _repeated_rightNeighborPoint_codec);
      leftNearbyObstacle_.WriteTo(output, _repeated_leftNearbyObstacle_codec);
      rightNearbyObstacle_.WriteTo(output, _repeated_rightNearbyObstacle_codec);
      if (TimeToLaneCenter != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(TimeToLaneCenter);
      }
      if (LaneS != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(LaneS);
      }
      if (LaneL != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(LaneL);
      }
      if (TimeToLaneEdge != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(TimeToLaneEdge);
      }
      if (stopSign_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(StopSign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneSequenceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneSequenceId);
      }
      size += laneSegment_.CalculateSize(_repeated_laneSegment_codec);
      size += nearbyObstacle_.CalculateSize(_repeated_nearbyObstacle_codec);
      if (LaneS != 0D) {
        size += 2 + 8;
      }
      if (LaneL != 0D) {
        size += 2 + 8;
      }
      if (stopSign_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StopSign);
      }
      if (features_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Features);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (Probability != 0D) {
        size += 1 + 8;
      }
      if (Acceleration != 0D) {
        size += 1 + 8;
      }
      if (TimeToLaneCenter != 0D) {
        size += 2 + 8;
      }
      if (TimeToLaneEdge != 0D) {
        size += 2 + 8;
      }
      size += pathPoint_.CalculateSize(_repeated_pathPoint_codec);
      if (BehaviorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BehaviorType);
      }
      if (VehicleOnLane != false) {
        size += 1 + 1;
      }
      size += currLanePoint_.CalculateSize(_repeated_currLanePoint_codec);
      size += leftNeighborPoint_.CalculateSize(_repeated_leftNeighborPoint_codec);
      size += rightNeighborPoint_.CalculateSize(_repeated_rightNeighborPoint_codec);
      size += leftNearbyObstacle_.CalculateSize(_repeated_leftNearbyObstacle_codec);
      size += rightNearbyObstacle_.CalculateSize(_repeated_rightNearbyObstacle_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneSequence other) {
      if (other == null) {
        return;
      }
      if (other.LaneSequenceId != 0) {
        LaneSequenceId = other.LaneSequenceId;
      }
      laneSegment_.Add(other.laneSegment_);
      nearbyObstacle_.Add(other.nearbyObstacle_);
      if (other.LaneS != 0D) {
        LaneS = other.LaneS;
      }
      if (other.LaneL != 0D) {
        LaneL = other.LaneL;
      }
      if (other.stopSign_ != null) {
        if (stopSign_ == null) {
          stopSign_ = new global::Apollo.Prediction.StopSign();
        }
        StopSign.MergeFrom(other.StopSign);
      }
      if (other.features_ != null) {
        if (features_ == null) {
          features_ = new global::Apollo.Prediction.LaneSequence.Types.Features();
        }
        Features.MergeFrom(other.Features);
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.Probability != 0D) {
        Probability = other.Probability;
      }
      if (other.Acceleration != 0D) {
        Acceleration = other.Acceleration;
      }
      if (other.TimeToLaneCenter != 0D) {
        TimeToLaneCenter = other.TimeToLaneCenter;
      }
      if (other.TimeToLaneEdge != 0D) {
        TimeToLaneEdge = other.TimeToLaneEdge;
      }
      pathPoint_.Add(other.pathPoint_);
      if (other.BehaviorType != 0) {
        BehaviorType = other.BehaviorType;
      }
      if (other.VehicleOnLane != false) {
        VehicleOnLane = other.VehicleOnLane;
      }
      currLanePoint_.Add(other.currLanePoint_);
      leftNeighborPoint_.Add(other.leftNeighborPoint_);
      rightNeighborPoint_.Add(other.rightNeighborPoint_);
      leftNearbyObstacle_.Add(other.leftNearbyObstacle_);
      rightNearbyObstacle_.Add(other.rightNearbyObstacle_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LaneSequenceId = input.ReadInt32();
            break;
          }
          case 18: {
            laneSegment_.AddEntriesFrom(input, _repeated_laneSegment_codec);
            break;
          }
          case 26: {
            nearbyObstacle_.AddEntriesFrom(input, _repeated_nearbyObstacle_codec);
            break;
          }
          case 34: {
            if (features_ == null) {
              features_ = new global::Apollo.Prediction.LaneSequence.Types.Features();
            }
            input.ReadMessage(features_);
            break;
          }
          case 40: {
            Label = input.ReadInt32();
            break;
          }
          case 49: {
            Probability = input.ReadDouble();
            break;
          }
          case 57: {
            Acceleration = input.ReadDouble();
            break;
          }
          case 66: {
            pathPoint_.AddEntriesFrom(input, _repeated_pathPoint_codec);
            break;
          }
          case 72: {
            behaviorType_ = (global::Apollo.Prediction.LaneSequence.Types.BehaviorType) input.ReadEnum();
            break;
          }
          case 80: {
            VehicleOnLane = input.ReadBool();
            break;
          }
          case 90: {
            currLanePoint_.AddEntriesFrom(input, _repeated_currLanePoint_codec);
            break;
          }
          case 98: {
            leftNeighborPoint_.AddEntriesFrom(input, _repeated_leftNeighborPoint_codec);
            break;
          }
          case 106: {
            rightNeighborPoint_.AddEntriesFrom(input, _repeated_rightNeighborPoint_codec);
            break;
          }
          case 114: {
            leftNearbyObstacle_.AddEntriesFrom(input, _repeated_leftNearbyObstacle_codec);
            break;
          }
          case 122: {
            rightNearbyObstacle_.AddEntriesFrom(input, _repeated_rightNearbyObstacle_codec);
            break;
          }
          case 129: {
            TimeToLaneCenter = input.ReadDouble();
            break;
          }
          case 137: {
            LaneS = input.ReadDouble();
            break;
          }
          case 145: {
            LaneL = input.ReadDouble();
            break;
          }
          case 153: {
            TimeToLaneEdge = input.ReadDouble();
            break;
          }
          case 162: {
            if (stopSign_ == null) {
              stopSign_ = new global::Apollo.Prediction.StopSign();
            }
            input.ReadMessage(stopSign_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LaneSequence message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BehaviorType {
        [pbr::OriginalName("BEHAVIORTYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("NOT_GOTO_LANE")] NotGotoLane = 1,
        [pbr::OriginalName("CONSTANT_SPEED")] ConstantSpeed = 2,
        [pbr::OriginalName("SMALL_ACCELERATION")] SmallAcceleration = 3,
        [pbr::OriginalName("LARGE_ACCELERATION")] LargeAcceleration = 4,
        [pbr::OriginalName("SMALL_DECELERATION")] SmallDeceleration = 5,
        [pbr::OriginalName("LARGE_DECELERATION")] LargeDeceleration = 6,
      }

      public sealed partial class Features : pb::IMessage<Features> {
        private static readonly pb::MessageParser<Features> _parser = new pb::MessageParser<Features>(() => new Features());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Features> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Prediction.LaneSequence.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features(Features other) : this() {
          mlpFeatures_ = other.mlpFeatures_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features Clone() {
          return new Features(this);
        }

        /// <summary>Field number for the "mlp_features" field.</summary>
        public const int MlpFeaturesFieldNumber = 1;
        private static readonly pb::FieldCodec<double> _repeated_mlpFeatures_codec
            = pb::FieldCodec.ForDouble(10);
        private readonly pbc::RepeatedField<double> mlpFeatures_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> MlpFeatures {
          get { return mlpFeatures_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Features);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Features other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!mlpFeatures_.Equals(other.mlpFeatures_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= mlpFeatures_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          mlpFeatures_.WriteTo(output, _repeated_mlpFeatures_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += mlpFeatures_.CalculateSize(_repeated_mlpFeatures_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Features other) {
          if (other == null) {
            return;
          }
          mlpFeatures_.Add(other.mlpFeatures_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 9: {
                mlpFeatures_.AddEntriesFrom(input, _repeated_mlpFeatures_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class LaneGraph : pb::IMessage<LaneGraph> {
    private static readonly pb::MessageParser<LaneGraph> _parser = new pb::MessageParser<LaneGraph>(() => new LaneGraph());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.LaneGraphReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneGraph(LaneGraph other) : this() {
      laneSequence_ = other.laneSequence_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneGraph Clone() {
      return new LaneGraph(this);
    }

    /// <summary>Field number for the "lane_sequence" field.</summary>
    public const int LaneSequenceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LaneSequence> _repeated_laneSequence_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Prediction.LaneSequence.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LaneSequence> laneSequence_ = new pbc::RepeatedField<global::Apollo.Prediction.LaneSequence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LaneSequence> LaneSequence {
      get { return laneSequence_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!laneSequence_.Equals(other.laneSequence_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= laneSequence_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      laneSequence_.WriteTo(output, _repeated_laneSequence_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += laneSequence_.CalculateSize(_repeated_laneSequence_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneGraph other) {
      if (other == null) {
        return;
      }
      laneSequence_.Add(other.laneSequence_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            laneSequence_.AddEntriesFrom(input, _repeated_laneSequence_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneObstacle : pb::IMessage<LaneObstacle> {
    private static readonly pb::MessageParser<LaneObstacle> _parser = new pb::MessageParser<LaneObstacle>(() => new LaneObstacle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneObstacle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.LaneGraphReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneObstacle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneObstacle(LaneObstacle other) : this() {
      obstacleId_ = other.obstacleId_;
      laneId_ = other.laneId_;
      laneS_ = other.laneS_;
      laneL_ = other.laneL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneObstacle Clone() {
      return new LaneObstacle(this);
    }

    /// <summary>Field number for the "obstacle_id" field.</summary>
    public const int ObstacleIdFieldNumber = 1;
    private int obstacleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleId {
      get { return obstacleId_; }
      set {
        obstacleId_ = value;
      }
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 2;
    private string laneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneId {
      get { return laneId_; }
      set {
        laneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lane_s" field.</summary>
    public const int LaneSFieldNumber = 3;
    private double laneS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneS {
      get { return laneS_; }
      set {
        laneS_ = value;
      }
    }

    /// <summary>Field number for the "lane_l" field.</summary>
    public const int LaneLFieldNumber = 4;
    private double laneL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneL {
      get { return laneL_; }
      set {
        laneL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneObstacle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneObstacle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObstacleId != other.ObstacleId) return false;
      if (LaneId != other.LaneId) return false;
      if (LaneS != other.LaneS) return false;
      if (LaneL != other.LaneL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObstacleId != 0) hash ^= ObstacleId.GetHashCode();
      if (LaneId.Length != 0) hash ^= LaneId.GetHashCode();
      if (LaneS != 0D) hash ^= LaneS.GetHashCode();
      if (LaneL != 0D) hash ^= LaneL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObstacleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ObstacleId);
      }
      if (LaneId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LaneId);
      }
      if (LaneS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LaneS);
      }
      if (LaneL != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LaneL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObstacleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleId);
      }
      if (LaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneId);
      }
      if (LaneS != 0D) {
        size += 1 + 8;
      }
      if (LaneL != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneObstacle other) {
      if (other == null) {
        return;
      }
      if (other.ObstacleId != 0) {
        ObstacleId = other.ObstacleId;
      }
      if (other.LaneId.Length != 0) {
        LaneId = other.LaneId;
      }
      if (other.LaneS != 0D) {
        LaneS = other.LaneS;
      }
      if (other.LaneL != 0D) {
        LaneL = other.LaneL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObstacleId = input.ReadInt32();
            break;
          }
          case 18: {
            LaneId = input.ReadString();
            break;
          }
          case 25: {
            LaneS = input.ReadDouble();
            break;
          }
          case 33: {
            LaneL = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
