// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Prediction {

  /// <summary>Holder for reflection information generated from modules/prediction/proto/feature.proto</summary>
  public static partial class FeatureReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/prediction/proto/feature.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FeatureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZtb2R1bGVzL3ByZWRpY3Rpb24vcHJvdG8vZmVhdHVyZS5wcm90bxIRYXBv",
            "bGxvLnByZWRpY3Rpb24aI21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21ldHJ5",
            "LnByb3RvGjJtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vcGVyY2VwdGlvbl9v",
            "YnN0YWNsZS5wcm90bxopbW9kdWxlcy9wcmVkaWN0aW9uL3Byb3RvL2xhbmVf",
            "Z3JhcGgucHJvdG8aL21vZHVsZXMvcHJlZGljdGlvbi9wcm90by9wcmVkaWN0",
            "aW9uX3BvaW50LnByb3RvIsQCCgRMYW5lEjwKFGN1cnJlbnRfbGFuZV9mZWF0",
            "dXJlGAEgAygLMh4uYXBvbGxvLnByZWRpY3Rpb24uTGFuZUZlYXR1cmUSNAoM",
            "bGFuZV9mZWF0dXJlGAIgASgLMh4uYXBvbGxvLnByZWRpY3Rpb24uTGFuZUZl",
            "YXR1cmUSOwoTbmVhcmJ5X2xhbmVfZmVhdHVyZRgDIAMoCzIeLmFwb2xsby5w",
            "cmVkaWN0aW9uLkxhbmVGZWF0dXJlEjAKCmxhbmVfZ3JhcGgYBCABKAsyHC5h",
            "cG9sbG8ucHJlZGljdGlvbi5MYW5lR3JhcGgSOAoSbGFuZV9ncmFwaF9vcmRl",
            "cmVkGAUgASgLMhwuYXBvbGxvLnByZWRpY3Rpb24uTGFuZUdyYXBoEh8KF2xh",
            "YmVsX3VwZGF0ZV90aW1lX2RlbHRhGBogASgBIr8BCgtMYW5lRmVhdHVyZRIP",
            "CgdsYW5lX2lkGAEgASgJEhYKDmxhbmVfdHVybl90eXBlGAIgASgNEg4KBmxh",
            "bmVfcxgDIAEoARIOCgZsYW5lX2wYBCABKAESEgoKYW5nbGVfZGlmZhgFIAEo",
            "ARIdChVkaXN0X3RvX2xlZnRfYm91bmRhcnkYBiABKAESHgoWZGlzdF90b19y",
            "aWdodF9ib3VuZGFyeRgHIAEoARIUCgxsYW5lX2hlYWRpbmcYCCABKAEifQoM",
            "SnVuY3Rpb25FeGl0EhQKDGV4aXRfbGFuZV9pZBgBIAEoCRItCg1leGl0X3Bv",
            "c2l0aW9uGAIgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNEEhQKDGV4aXRf",
            "aGVhZGluZxgDIAEoARISCgpleGl0X3dpZHRoGAQgASgBIp0CCg9KdW5jdGlv",
            "bkZlYXR1cmUSEwoLanVuY3Rpb25faWQYASABKAkSFgoOanVuY3Rpb25fcmFu",
            "Z2UYAiABKAESMgoKZW50ZXJfbGFuZRgDIAEoCzIeLmFwb2xsby5wcmVkaWN0",
            "aW9uLkxhbmVGZWF0dXJlEjYKDWp1bmN0aW9uX2V4aXQYBCADKAsyHy5hcG9s",
            "bG8ucHJlZGljdGlvbi5KdW5jdGlvbkV4aXQSHAoUanVuY3Rpb25fbWxwX2Zl",
            "YXR1cmUYBSADKAESGgoSanVuY3Rpb25fbWxwX2xhYmVsGAYgAygFEiAKGGp1",
            "bmN0aW9uX21scF9wcm9iYWJpbGl0eRgHIAMoARIVCg1zdGFydF9sYW5lX2lk",
            "GAggAygJIpcBChBPYnN0YWNsZVByaW9yaXR5Ej4KCHByaW9yaXR5GBkgASgO",
            "MiwuYXBvbGxvLnByZWRpY3Rpb24uT2JzdGFjbGVQcmlvcml0eS5Qcmlvcml0",
            "eSJDCghQcmlvcml0eRISCg5QUklPUklUWV9EVU1NWRAAEgsKB0NBVVRJT04Q",
            "ARIKCgZOT1JNQUwQAhIKCgZJR05PUkUQAyL5BwoHRmVhdHVyZRIKCgJpZBgB",
            "IAEoBRItCg1wb2x5Z29uX3BvaW50GB4gAygLMhYuYXBvbGxvLmNvbW1vbi5Q",
            "b2ludDNEEigKCHBvc2l0aW9uGAIgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2lu",
            "dDNEEi4KDmZyb250X3Bvc2l0aW9uGBsgASgLMhYuYXBvbGxvLmNvbW1vbi5Q",
            "b2ludDNEEigKCHZlbG9jaXR5GAMgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2lu",
            "dDNEEiwKDHJhd192ZWxvY2l0eRgcIAEoCzIWLmFwb2xsby5jb21tb24uUG9p",
            "bnQzRBIsCgxhY2NlbGVyYXRpb24YBCABKAsyFi5hcG9sbG8uY29tbW9uLlBv",
            "aW50M0QSGAoQdmVsb2NpdHlfaGVhZGluZxgFIAEoARINCgVzcGVlZBgGIAEo",
            "ARILCgNhY2MYByABKAESDQoFdGhldGEYCCABKAESDgoGbGVuZ3RoGAkgASgB",
            "Eg0KBXdpZHRoGAogASgBEg4KBmhlaWdodBgLIAEoARIVCg10cmFja2luZ190",
            "aW1lGAwgASgBEhEKCXRpbWVzdGFtcBgNIAEoARIlCgRsYW5lGA4gASgLMhcu",
            "YXBvbGxvLnByZWRpY3Rpb24uTGFuZRI8ChBqdW5jdGlvbl9mZWF0dXJlGBog",
            "ASgLMiIuYXBvbGxvLnByZWRpY3Rpb24uSnVuY3Rpb25GZWF0dXJlEioKCnRf",
            "cG9zaXRpb24YECABKAsyFi5hcG9sbG8uY29tbW9uLlBvaW50M0QSKgoKdF92",
            "ZWxvY2l0eRgRIAEoCzIWLmFwb2xsby5jb21tb24uUG9pbnQzRBIaChJ0X3Zl",
            "bG9jaXR5X2hlYWRpbmcYEiABKAESDwoHdF9zcGVlZBgTIAEoARIuCg50X2Fj",
            "Y2VsZXJhdGlvbhgUIAEoCzIWLmFwb2xsby5jb21tb24uUG9pbnQzRBINCgV0",
            "X2FjYxgVIAEoARIQCghpc19zdGlsbBgWIAEoCBI4CgR0eXBlGBcgASgOMiou",
            "YXBvbGxvLnBlcmNlcHRpb24uUGVyY2VwdGlvbk9ic3RhY2xlLlR5cGUSHwoX",
            "bGFiZWxfdXBkYXRlX3RpbWVfZGVsdGEYGCABKAESNQoIcHJpb3JpdHkYGSAB",
            "KAsyIy5hcG9sbG8ucHJlZGljdGlvbi5PYnN0YWNsZVByaW9yaXR5EhgKEGlz",
            "X25lYXJfanVuY3Rpb24YHSABKAgSTgoYZnV0dXJlX3RyYWplY3RvcnlfcG9p",
            "bnRzGB8gAygLMiwuYXBvbGxvLnByZWRpY3Rpb24uUHJlZGljdGlvblRyYWpl",
            "Y3RvcnlQb2ludGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Perception.PerceptionObstacleReflection.Descriptor, global::Apollo.Prediction.LaneGraphReflection.Descriptor, global::Apollo.Prediction.PredictionPointReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.Lane), global::Apollo.Prediction.Lane.Parser, new[]{ "CurrentLaneFeature", "LaneFeature", "NearbyLaneFeature", "LaneGraph", "LaneGraphOrdered", "LabelUpdateTimeDelta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.LaneFeature), global::Apollo.Prediction.LaneFeature.Parser, new[]{ "LaneId", "LaneTurnType", "LaneS", "LaneL", "AngleDiff", "DistToLeftBoundary", "DistToRightBoundary", "LaneHeading" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.JunctionExit), global::Apollo.Prediction.JunctionExit.Parser, new[]{ "ExitLaneId", "ExitPosition", "ExitHeading", "ExitWidth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.JunctionFeature), global::Apollo.Prediction.JunctionFeature.Parser, new[]{ "JunctionId", "JunctionRange", "EnterLane", "JunctionExit", "JunctionMlpFeature", "JunctionMlpLabel", "JunctionMlpProbability", "StartLaneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.ObstaclePriority), global::Apollo.Prediction.ObstaclePriority.Parser, new[]{ "Priority" }, null, new[]{ typeof(global::Apollo.Prediction.ObstaclePriority.Types.Priority) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.Feature), global::Apollo.Prediction.Feature.Parser, new[]{ "Id", "PolygonPoint", "Position", "FrontPosition", "Velocity", "RawVelocity", "Acceleration", "VelocityHeading", "Speed", "Acc", "Theta", "Length", "Width", "Height", "TrackingTime", "Timestamp", "Lane", "JunctionFeature", "TPosition", "TVelocity", "TVelocityHeading", "TSpeed", "TAcceleration", "TAcc", "IsStill", "Type", "LabelUpdateTimeDelta", "Priority", "IsNearJunction", "FutureTrajectoryPoints" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Lane : pb::IMessage<Lane> {
    private static readonly pb::MessageParser<Lane> _parser = new pb::MessageParser<Lane>(() => new Lane());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.FeatureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lane(Lane other) : this() {
      currentLaneFeature_ = other.currentLaneFeature_.Clone();
      LaneFeature = other.laneFeature_ != null ? other.LaneFeature.Clone() : null;
      nearbyLaneFeature_ = other.nearbyLaneFeature_.Clone();
      LaneGraph = other.laneGraph_ != null ? other.LaneGraph.Clone() : null;
      LaneGraphOrdered = other.laneGraphOrdered_ != null ? other.LaneGraphOrdered.Clone() : null;
      labelUpdateTimeDelta_ = other.labelUpdateTimeDelta_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lane Clone() {
      return new Lane(this);
    }

    /// <summary>Field number for the "current_lane_feature" field.</summary>
    public const int CurrentLaneFeatureFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LaneFeature> _repeated_currentLaneFeature_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Prediction.LaneFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LaneFeature> currentLaneFeature_ = new pbc::RepeatedField<global::Apollo.Prediction.LaneFeature>();
    /// <summary>
    /// Features of all possible current lanes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LaneFeature> CurrentLaneFeature {
      get { return currentLaneFeature_; }
    }

    /// <summary>Field number for the "lane_feature" field.</summary>
    public const int LaneFeatureFieldNumber = 2;
    private global::Apollo.Prediction.LaneFeature laneFeature_;
    /// <summary>
    /// Features of the most possible current lane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.LaneFeature LaneFeature {
      get { return laneFeature_; }
      set {
        laneFeature_ = value;
      }
    }

    /// <summary>Field number for the "nearby_lane_feature" field.</summary>
    public const int NearbyLaneFeatureFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.LaneFeature> _repeated_nearbyLaneFeature_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Prediction.LaneFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.LaneFeature> nearbyLaneFeature_ = new pbc::RepeatedField<global::Apollo.Prediction.LaneFeature>();
    /// <summary>
    /// Features of all nearby lanes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.LaneFeature> NearbyLaneFeature {
      get { return nearbyLaneFeature_; }
    }

    /// <summary>Field number for the "lane_graph" field.</summary>
    public const int LaneGraphFieldNumber = 4;
    private global::Apollo.Prediction.LaneGraph laneGraph_;
    /// <summary>
    /// Lane graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.LaneGraph LaneGraph {
      get { return laneGraph_; }
      set {
        laneGraph_ = value;
      }
    }

    /// <summary>Field number for the "lane_graph_ordered" field.</summary>
    public const int LaneGraphOrderedFieldNumber = 5;
    private global::Apollo.Prediction.LaneGraph laneGraphOrdered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.LaneGraph LaneGraphOrdered {
      get { return laneGraphOrdered_; }
      set {
        laneGraphOrdered_ = value;
      }
    }

    /// <summary>Field number for the "label_update_time_delta" field.</summary>
    public const int LabelUpdateTimeDeltaFieldNumber = 26;
    private double labelUpdateTimeDelta_;
    /// <summary>
    /// For modeling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LabelUpdateTimeDelta {
      get { return labelUpdateTimeDelta_; }
      set {
        labelUpdateTimeDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!currentLaneFeature_.Equals(other.currentLaneFeature_)) return false;
      if (!object.Equals(LaneFeature, other.LaneFeature)) return false;
      if(!nearbyLaneFeature_.Equals(other.nearbyLaneFeature_)) return false;
      if (!object.Equals(LaneGraph, other.LaneGraph)) return false;
      if (!object.Equals(LaneGraphOrdered, other.LaneGraphOrdered)) return false;
      if (LabelUpdateTimeDelta != other.LabelUpdateTimeDelta) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= currentLaneFeature_.GetHashCode();
      if (laneFeature_ != null) hash ^= LaneFeature.GetHashCode();
      hash ^= nearbyLaneFeature_.GetHashCode();
      if (laneGraph_ != null) hash ^= LaneGraph.GetHashCode();
      if (laneGraphOrdered_ != null) hash ^= LaneGraphOrdered.GetHashCode();
      if (LabelUpdateTimeDelta != 0D) hash ^= LabelUpdateTimeDelta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      currentLaneFeature_.WriteTo(output, _repeated_currentLaneFeature_codec);
      if (laneFeature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LaneFeature);
      }
      nearbyLaneFeature_.WriteTo(output, _repeated_nearbyLaneFeature_codec);
      if (laneGraph_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LaneGraph);
      }
      if (laneGraphOrdered_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LaneGraphOrdered);
      }
      if (LabelUpdateTimeDelta != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(LabelUpdateTimeDelta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += currentLaneFeature_.CalculateSize(_repeated_currentLaneFeature_codec);
      if (laneFeature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneFeature);
      }
      size += nearbyLaneFeature_.CalculateSize(_repeated_nearbyLaneFeature_codec);
      if (laneGraph_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneGraph);
      }
      if (laneGraphOrdered_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneGraphOrdered);
      }
      if (LabelUpdateTimeDelta != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lane other) {
      if (other == null) {
        return;
      }
      currentLaneFeature_.Add(other.currentLaneFeature_);
      if (other.laneFeature_ != null) {
        if (laneFeature_ == null) {
          laneFeature_ = new global::Apollo.Prediction.LaneFeature();
        }
        LaneFeature.MergeFrom(other.LaneFeature);
      }
      nearbyLaneFeature_.Add(other.nearbyLaneFeature_);
      if (other.laneGraph_ != null) {
        if (laneGraph_ == null) {
          laneGraph_ = new global::Apollo.Prediction.LaneGraph();
        }
        LaneGraph.MergeFrom(other.LaneGraph);
      }
      if (other.laneGraphOrdered_ != null) {
        if (laneGraphOrdered_ == null) {
          laneGraphOrdered_ = new global::Apollo.Prediction.LaneGraph();
        }
        LaneGraphOrdered.MergeFrom(other.LaneGraphOrdered);
      }
      if (other.LabelUpdateTimeDelta != 0D) {
        LabelUpdateTimeDelta = other.LabelUpdateTimeDelta;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            currentLaneFeature_.AddEntriesFrom(input, _repeated_currentLaneFeature_codec);
            break;
          }
          case 18: {
            if (laneFeature_ == null) {
              laneFeature_ = new global::Apollo.Prediction.LaneFeature();
            }
            input.ReadMessage(laneFeature_);
            break;
          }
          case 26: {
            nearbyLaneFeature_.AddEntriesFrom(input, _repeated_nearbyLaneFeature_codec);
            break;
          }
          case 34: {
            if (laneGraph_ == null) {
              laneGraph_ = new global::Apollo.Prediction.LaneGraph();
            }
            input.ReadMessage(laneGraph_);
            break;
          }
          case 42: {
            if (laneGraphOrdered_ == null) {
              laneGraphOrdered_ = new global::Apollo.Prediction.LaneGraph();
            }
            input.ReadMessage(laneGraphOrdered_);
            break;
          }
          case 209: {
            LabelUpdateTimeDelta = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneFeature : pb::IMessage<LaneFeature> {
    private static readonly pb::MessageParser<LaneFeature> _parser = new pb::MessageParser<LaneFeature>(() => new LaneFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.FeatureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneFeature(LaneFeature other) : this() {
      laneId_ = other.laneId_;
      laneTurnType_ = other.laneTurnType_;
      laneS_ = other.laneS_;
      laneL_ = other.laneL_;
      angleDiff_ = other.angleDiff_;
      distToLeftBoundary_ = other.distToLeftBoundary_;
      distToRightBoundary_ = other.distToRightBoundary_;
      laneHeading_ = other.laneHeading_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneFeature Clone() {
      return new LaneFeature(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private string laneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneId {
      get { return laneId_; }
      set {
        laneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lane_turn_type" field.</summary>
    public const int LaneTurnTypeFieldNumber = 2;
    private uint laneTurnType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneTurnType {
      get { return laneTurnType_; }
      set {
        laneTurnType_ = value;
      }
    }

    /// <summary>Field number for the "lane_s" field.</summary>
    public const int LaneSFieldNumber = 3;
    private double laneS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneS {
      get { return laneS_; }
      set {
        laneS_ = value;
      }
    }

    /// <summary>Field number for the "lane_l" field.</summary>
    public const int LaneLFieldNumber = 4;
    private double laneL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneL {
      get { return laneL_; }
      set {
        laneL_ = value;
      }
    }

    /// <summary>Field number for the "angle_diff" field.</summary>
    public const int AngleDiffFieldNumber = 5;
    private double angleDiff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngleDiff {
      get { return angleDiff_; }
      set {
        angleDiff_ = value;
      }
    }

    /// <summary>Field number for the "dist_to_left_boundary" field.</summary>
    public const int DistToLeftBoundaryFieldNumber = 6;
    private double distToLeftBoundary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistToLeftBoundary {
      get { return distToLeftBoundary_; }
      set {
        distToLeftBoundary_ = value;
      }
    }

    /// <summary>Field number for the "dist_to_right_boundary" field.</summary>
    public const int DistToRightBoundaryFieldNumber = 7;
    private double distToRightBoundary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistToRightBoundary {
      get { return distToRightBoundary_; }
      set {
        distToRightBoundary_ = value;
      }
    }

    /// <summary>Field number for the "lane_heading" field.</summary>
    public const int LaneHeadingFieldNumber = 8;
    private double laneHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneHeading {
      get { return laneHeading_; }
      set {
        laneHeading_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if (LaneTurnType != other.LaneTurnType) return false;
      if (LaneS != other.LaneS) return false;
      if (LaneL != other.LaneL) return false;
      if (AngleDiff != other.AngleDiff) return false;
      if (DistToLeftBoundary != other.DistToLeftBoundary) return false;
      if (DistToRightBoundary != other.DistToRightBoundary) return false;
      if (LaneHeading != other.LaneHeading) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneId.Length != 0) hash ^= LaneId.GetHashCode();
      if (LaneTurnType != 0) hash ^= LaneTurnType.GetHashCode();
      if (LaneS != 0D) hash ^= LaneS.GetHashCode();
      if (LaneL != 0D) hash ^= LaneL.GetHashCode();
      if (AngleDiff != 0D) hash ^= AngleDiff.GetHashCode();
      if (DistToLeftBoundary != 0D) hash ^= DistToLeftBoundary.GetHashCode();
      if (DistToRightBoundary != 0D) hash ^= DistToRightBoundary.GetHashCode();
      if (LaneHeading != 0D) hash ^= LaneHeading.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LaneId);
      }
      if (LaneTurnType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LaneTurnType);
      }
      if (LaneS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LaneS);
      }
      if (LaneL != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LaneL);
      }
      if (AngleDiff != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AngleDiff);
      }
      if (DistToLeftBoundary != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DistToLeftBoundary);
      }
      if (DistToRightBoundary != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(DistToRightBoundary);
      }
      if (LaneHeading != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(LaneHeading);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneId);
      }
      if (LaneTurnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneTurnType);
      }
      if (LaneS != 0D) {
        size += 1 + 8;
      }
      if (LaneL != 0D) {
        size += 1 + 8;
      }
      if (AngleDiff != 0D) {
        size += 1 + 8;
      }
      if (DistToLeftBoundary != 0D) {
        size += 1 + 8;
      }
      if (DistToRightBoundary != 0D) {
        size += 1 + 8;
      }
      if (LaneHeading != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneFeature other) {
      if (other == null) {
        return;
      }
      if (other.LaneId.Length != 0) {
        LaneId = other.LaneId;
      }
      if (other.LaneTurnType != 0) {
        LaneTurnType = other.LaneTurnType;
      }
      if (other.LaneS != 0D) {
        LaneS = other.LaneS;
      }
      if (other.LaneL != 0D) {
        LaneL = other.LaneL;
      }
      if (other.AngleDiff != 0D) {
        AngleDiff = other.AngleDiff;
      }
      if (other.DistToLeftBoundary != 0D) {
        DistToLeftBoundary = other.DistToLeftBoundary;
      }
      if (other.DistToRightBoundary != 0D) {
        DistToRightBoundary = other.DistToRightBoundary;
      }
      if (other.LaneHeading != 0D) {
        LaneHeading = other.LaneHeading;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LaneId = input.ReadString();
            break;
          }
          case 16: {
            LaneTurnType = input.ReadUInt32();
            break;
          }
          case 25: {
            LaneS = input.ReadDouble();
            break;
          }
          case 33: {
            LaneL = input.ReadDouble();
            break;
          }
          case 41: {
            AngleDiff = input.ReadDouble();
            break;
          }
          case 49: {
            DistToLeftBoundary = input.ReadDouble();
            break;
          }
          case 57: {
            DistToRightBoundary = input.ReadDouble();
            break;
          }
          case 65: {
            LaneHeading = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JunctionExit : pb::IMessage<JunctionExit> {
    private static readonly pb::MessageParser<JunctionExit> _parser = new pb::MessageParser<JunctionExit>(() => new JunctionExit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JunctionExit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.FeatureReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JunctionExit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JunctionExit(JunctionExit other) : this() {
      exitLaneId_ = other.exitLaneId_;
      ExitPosition = other.exitPosition_ != null ? other.ExitPosition.Clone() : null;
      exitHeading_ = other.exitHeading_;
      exitWidth_ = other.exitWidth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JunctionExit Clone() {
      return new JunctionExit(this);
    }

    /// <summary>Field number for the "exit_lane_id" field.</summary>
    public const int ExitLaneIdFieldNumber = 1;
    private string exitLaneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExitLaneId {
      get { return exitLaneId_; }
      set {
        exitLaneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exit_position" field.</summary>
    public const int ExitPositionFieldNumber = 2;
    private global::Apollo.Common.Point3D exitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D ExitPosition {
      get { return exitPosition_; }
      set {
        exitPosition_ = value;
      }
    }

    /// <summary>Field number for the "exit_heading" field.</summary>
    public const int ExitHeadingFieldNumber = 3;
    private double exitHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExitHeading {
      get { return exitHeading_; }
      set {
        exitHeading_ = value;
      }
    }

    /// <summary>Field number for the "exit_width" field.</summary>
    public const int ExitWidthFieldNumber = 4;
    private double exitWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExitWidth {
      get { return exitWidth_; }
      set {
        exitWidth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JunctionExit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JunctionExit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExitLaneId != other.ExitLaneId) return false;
      if (!object.Equals(ExitPosition, other.ExitPosition)) return false;
      if (ExitHeading != other.ExitHeading) return false;
      if (ExitWidth != other.ExitWidth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExitLaneId.Length != 0) hash ^= ExitLaneId.GetHashCode();
      if (exitPosition_ != null) hash ^= ExitPosition.GetHashCode();
      if (ExitHeading != 0D) hash ^= ExitHeading.GetHashCode();
      if (ExitWidth != 0D) hash ^= ExitWidth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExitLaneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExitLaneId);
      }
      if (exitPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExitPosition);
      }
      if (ExitHeading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ExitHeading);
      }
      if (ExitWidth != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ExitWidth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExitLaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExitLaneId);
      }
      if (exitPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExitPosition);
      }
      if (ExitHeading != 0D) {
        size += 1 + 8;
      }
      if (ExitWidth != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JunctionExit other) {
      if (other == null) {
        return;
      }
      if (other.ExitLaneId.Length != 0) {
        ExitLaneId = other.ExitLaneId;
      }
      if (other.exitPosition_ != null) {
        if (exitPosition_ == null) {
          exitPosition_ = new global::Apollo.Common.Point3D();
        }
        ExitPosition.MergeFrom(other.ExitPosition);
      }
      if (other.ExitHeading != 0D) {
        ExitHeading = other.ExitHeading;
      }
      if (other.ExitWidth != 0D) {
        ExitWidth = other.ExitWidth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ExitLaneId = input.ReadString();
            break;
          }
          case 18: {
            if (exitPosition_ == null) {
              exitPosition_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(exitPosition_);
            break;
          }
          case 25: {
            ExitHeading = input.ReadDouble();
            break;
          }
          case 33: {
            ExitWidth = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JunctionFeature : pb::IMessage<JunctionFeature> {
    private static readonly pb::MessageParser<JunctionFeature> _parser = new pb::MessageParser<JunctionFeature>(() => new JunctionFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JunctionFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.FeatureReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JunctionFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JunctionFeature(JunctionFeature other) : this() {
      junctionId_ = other.junctionId_;
      junctionRange_ = other.junctionRange_;
      EnterLane = other.enterLane_ != null ? other.EnterLane.Clone() : null;
      junctionExit_ = other.junctionExit_.Clone();
      junctionMlpFeature_ = other.junctionMlpFeature_.Clone();
      junctionMlpLabel_ = other.junctionMlpLabel_.Clone();
      junctionMlpProbability_ = other.junctionMlpProbability_.Clone();
      startLaneId_ = other.startLaneId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JunctionFeature Clone() {
      return new JunctionFeature(this);
    }

    /// <summary>Field number for the "junction_id" field.</summary>
    public const int JunctionIdFieldNumber = 1;
    private string junctionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JunctionId {
      get { return junctionId_; }
      set {
        junctionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "junction_range" field.</summary>
    public const int JunctionRangeFieldNumber = 2;
    private double junctionRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double JunctionRange {
      get { return junctionRange_; }
      set {
        junctionRange_ = value;
      }
    }

    /// <summary>Field number for the "enter_lane" field.</summary>
    public const int EnterLaneFieldNumber = 3;
    private global::Apollo.Prediction.LaneFeature enterLane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.LaneFeature EnterLane {
      get { return enterLane_; }
      set {
        enterLane_ = value;
      }
    }

    /// <summary>Field number for the "junction_exit" field.</summary>
    public const int JunctionExitFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.JunctionExit> _repeated_junctionExit_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Prediction.JunctionExit.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.JunctionExit> junctionExit_ = new pbc::RepeatedField<global::Apollo.Prediction.JunctionExit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.JunctionExit> JunctionExit {
      get { return junctionExit_; }
    }

    /// <summary>Field number for the "junction_mlp_feature" field.</summary>
    public const int JunctionMlpFeatureFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_junctionMlpFeature_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> junctionMlpFeature_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> JunctionMlpFeature {
      get { return junctionMlpFeature_; }
    }

    /// <summary>Field number for the "junction_mlp_label" field.</summary>
    public const int JunctionMlpLabelFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_junctionMlpLabel_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> junctionMlpLabel_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// dim is number of masks, i.e. 12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> JunctionMlpLabel {
      get { return junctionMlpLabel_; }
    }

    /// <summary>Field number for the "junction_mlp_probability" field.</summary>
    public const int JunctionMlpProbabilityFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_junctionMlpProbability_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> junctionMlpProbability_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> JunctionMlpProbability {
      get { return junctionMlpProbability_; }
    }

    /// <summary>Field number for the "start_lane_id" field.</summary>
    public const int StartLaneIdFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_startLaneId_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> startLaneId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StartLaneId {
      get { return startLaneId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JunctionFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JunctionFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JunctionId != other.JunctionId) return false;
      if (JunctionRange != other.JunctionRange) return false;
      if (!object.Equals(EnterLane, other.EnterLane)) return false;
      if(!junctionExit_.Equals(other.junctionExit_)) return false;
      if(!junctionMlpFeature_.Equals(other.junctionMlpFeature_)) return false;
      if(!junctionMlpLabel_.Equals(other.junctionMlpLabel_)) return false;
      if(!junctionMlpProbability_.Equals(other.junctionMlpProbability_)) return false;
      if(!startLaneId_.Equals(other.startLaneId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JunctionId.Length != 0) hash ^= JunctionId.GetHashCode();
      if (JunctionRange != 0D) hash ^= JunctionRange.GetHashCode();
      if (enterLane_ != null) hash ^= EnterLane.GetHashCode();
      hash ^= junctionExit_.GetHashCode();
      hash ^= junctionMlpFeature_.GetHashCode();
      hash ^= junctionMlpLabel_.GetHashCode();
      hash ^= junctionMlpProbability_.GetHashCode();
      hash ^= startLaneId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JunctionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JunctionId);
      }
      if (JunctionRange != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(JunctionRange);
      }
      if (enterLane_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EnterLane);
      }
      junctionExit_.WriteTo(output, _repeated_junctionExit_codec);
      junctionMlpFeature_.WriteTo(output, _repeated_junctionMlpFeature_codec);
      junctionMlpLabel_.WriteTo(output, _repeated_junctionMlpLabel_codec);
      junctionMlpProbability_.WriteTo(output, _repeated_junctionMlpProbability_codec);
      startLaneId_.WriteTo(output, _repeated_startLaneId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JunctionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JunctionId);
      }
      if (JunctionRange != 0D) {
        size += 1 + 8;
      }
      if (enterLane_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnterLane);
      }
      size += junctionExit_.CalculateSize(_repeated_junctionExit_codec);
      size += junctionMlpFeature_.CalculateSize(_repeated_junctionMlpFeature_codec);
      size += junctionMlpLabel_.CalculateSize(_repeated_junctionMlpLabel_codec);
      size += junctionMlpProbability_.CalculateSize(_repeated_junctionMlpProbability_codec);
      size += startLaneId_.CalculateSize(_repeated_startLaneId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JunctionFeature other) {
      if (other == null) {
        return;
      }
      if (other.JunctionId.Length != 0) {
        JunctionId = other.JunctionId;
      }
      if (other.JunctionRange != 0D) {
        JunctionRange = other.JunctionRange;
      }
      if (other.enterLane_ != null) {
        if (enterLane_ == null) {
          enterLane_ = new global::Apollo.Prediction.LaneFeature();
        }
        EnterLane.MergeFrom(other.EnterLane);
      }
      junctionExit_.Add(other.junctionExit_);
      junctionMlpFeature_.Add(other.junctionMlpFeature_);
      junctionMlpLabel_.Add(other.junctionMlpLabel_);
      junctionMlpProbability_.Add(other.junctionMlpProbability_);
      startLaneId_.Add(other.startLaneId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            JunctionId = input.ReadString();
            break;
          }
          case 17: {
            JunctionRange = input.ReadDouble();
            break;
          }
          case 26: {
            if (enterLane_ == null) {
              enterLane_ = new global::Apollo.Prediction.LaneFeature();
            }
            input.ReadMessage(enterLane_);
            break;
          }
          case 34: {
            junctionExit_.AddEntriesFrom(input, _repeated_junctionExit_codec);
            break;
          }
          case 42:
          case 41: {
            junctionMlpFeature_.AddEntriesFrom(input, _repeated_junctionMlpFeature_codec);
            break;
          }
          case 50:
          case 48: {
            junctionMlpLabel_.AddEntriesFrom(input, _repeated_junctionMlpLabel_codec);
            break;
          }
          case 58:
          case 57: {
            junctionMlpProbability_.AddEntriesFrom(input, _repeated_junctionMlpProbability_codec);
            break;
          }
          case 66: {
            startLaneId_.AddEntriesFrom(input, _repeated_startLaneId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObstaclePriority : pb::IMessage<ObstaclePriority> {
    private static readonly pb::MessageParser<ObstaclePriority> _parser = new pb::MessageParser<ObstaclePriority>(() => new ObstaclePriority());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObstaclePriority> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.FeatureReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstaclePriority() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstaclePriority(ObstaclePriority other) : this() {
      priority_ = other.priority_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstaclePriority Clone() {
      return new ObstaclePriority(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 25;
    private global::Apollo.Prediction.ObstaclePriority.Types.Priority priority_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.ObstaclePriority.Types.Priority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObstaclePriority);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObstaclePriority other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Priority != 0) hash ^= Priority.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Priority != 0) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) Priority);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Priority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Priority);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObstaclePriority other) {
      if (other == null) {
        return;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 200: {
            priority_ = (global::Apollo.Prediction.ObstaclePriority.Types.Priority) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ObstaclePriority message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Priority {
        [pbr::OriginalName("PRIORITY_DUMMY")] Dummy = 0,
        [pbr::OriginalName("CAUTION")] Caution = 1,
        [pbr::OriginalName("NORMAL")] Normal = 2,
        [pbr::OriginalName("IGNORE")] Ignore = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// next id = 32
  /// </summary>
  public sealed partial class Feature : pb::IMessage<Feature> {
    private static readonly pb::MessageParser<Feature> _parser = new pb::MessageParser<Feature>(() => new Feature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Feature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.FeatureReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature(Feature other) : this() {
      id_ = other.id_;
      polygonPoint_ = other.polygonPoint_.Clone();
      Position = other.position_ != null ? other.Position.Clone() : null;
      FrontPosition = other.frontPosition_ != null ? other.FrontPosition.Clone() : null;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      RawVelocity = other.rawVelocity_ != null ? other.RawVelocity.Clone() : null;
      Acceleration = other.acceleration_ != null ? other.Acceleration.Clone() : null;
      velocityHeading_ = other.velocityHeading_;
      speed_ = other.speed_;
      acc_ = other.acc_;
      theta_ = other.theta_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      trackingTime_ = other.trackingTime_;
      timestamp_ = other.timestamp_;
      Lane = other.lane_ != null ? other.Lane.Clone() : null;
      JunctionFeature = other.junctionFeature_ != null ? other.JunctionFeature.Clone() : null;
      TPosition = other.tPosition_ != null ? other.TPosition.Clone() : null;
      TVelocity = other.tVelocity_ != null ? other.TVelocity.Clone() : null;
      tVelocityHeading_ = other.tVelocityHeading_;
      tSpeed_ = other.tSpeed_;
      TAcceleration = other.tAcceleration_ != null ? other.TAcceleration.Clone() : null;
      tAcc_ = other.tAcc_;
      isStill_ = other.isStill_;
      type_ = other.type_;
      labelUpdateTimeDelta_ = other.labelUpdateTimeDelta_;
      Priority = other.priority_ != null ? other.Priority.Clone() : null;
      isNearJunction_ = other.isNearJunction_;
      futureTrajectoryPoints_ = other.futureTrajectoryPoints_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature Clone() {
      return new Feature(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// Obstacle ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "polygon_point" field.</summary>
    public const int PolygonPointFieldNumber = 30;
    private static readonly pb::FieldCodec<global::Apollo.Common.Point3D> _repeated_polygonPoint_codec
        = pb::FieldCodec.ForMessage(242, global::Apollo.Common.Point3D.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Point3D> polygonPoint_ = new pbc::RepeatedField<global::Apollo.Common.Point3D>();
    /// <summary>
    /// Obstacle features
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Point3D> PolygonPoint {
      get { return polygonPoint_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Apollo.Common.Point3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "front_position" field.</summary>
    public const int FrontPositionFieldNumber = 27;
    private global::Apollo.Common.Point3D frontPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D FrontPosition {
      get { return frontPosition_; }
      set {
        frontPosition_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 3;
    private global::Apollo.Common.Point3D velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "raw_velocity" field.</summary>
    public const int RawVelocityFieldNumber = 28;
    private global::Apollo.Common.Point3D rawVelocity_;
    /// <summary>
    /// from perception
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D RawVelocity {
      get { return rawVelocity_; }
      set {
        rawVelocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 4;
    private global::Apollo.Common.Point3D acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "velocity_heading" field.</summary>
    public const int VelocityHeadingFieldNumber = 5;
    private double velocityHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityHeading {
      get { return velocityHeading_; }
      set {
        velocityHeading_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 6;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "acc" field.</summary>
    public const int AccFieldNumber = 7;
    private double acc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Acc {
      get { return acc_; }
      set {
        acc_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 8;
    private double theta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 9;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 10;
    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 11;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "tracking_time" field.</summary>
    public const int TrackingTimeFieldNumber = 12;
    private double trackingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrackingTime {
      get { return trackingTime_; }
      set {
        trackingTime_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 13;
    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "lane" field.</summary>
    public const int LaneFieldNumber = 14;
    private global::Apollo.Prediction.Lane lane_;
    /// <summary>
    /// Obstacle type-specific features
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.Lane Lane {
      get { return lane_; }
      set {
        lane_ = value;
      }
    }

    /// <summary>Field number for the "junction_feature" field.</summary>
    public const int JunctionFeatureFieldNumber = 26;
    private global::Apollo.Prediction.JunctionFeature junctionFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.JunctionFeature JunctionFeature {
      get { return junctionFeature_; }
      set {
        junctionFeature_ = value;
      }
    }

    /// <summary>Field number for the "t_position" field.</summary>
    public const int TPositionFieldNumber = 16;
    private global::Apollo.Common.Point3D tPosition_;
    /// <summary>
    /// Obstacle tracked features
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D TPosition {
      get { return tPosition_; }
      set {
        tPosition_ = value;
      }
    }

    /// <summary>Field number for the "t_velocity" field.</summary>
    public const int TVelocityFieldNumber = 17;
    private global::Apollo.Common.Point3D tVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D TVelocity {
      get { return tVelocity_; }
      set {
        tVelocity_ = value;
      }
    }

    /// <summary>Field number for the "t_velocity_heading" field.</summary>
    public const int TVelocityHeadingFieldNumber = 18;
    private double tVelocityHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TVelocityHeading {
      get { return tVelocityHeading_; }
      set {
        tVelocityHeading_ = value;
      }
    }

    /// <summary>Field number for the "t_speed" field.</summary>
    public const int TSpeedFieldNumber = 19;
    private double tSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TSpeed {
      get { return tSpeed_; }
      set {
        tSpeed_ = value;
      }
    }

    /// <summary>Field number for the "t_acceleration" field.</summary>
    public const int TAccelerationFieldNumber = 20;
    private global::Apollo.Common.Point3D tAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D TAcceleration {
      get { return tAcceleration_; }
      set {
        tAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "t_acc" field.</summary>
    public const int TAccFieldNumber = 21;
    private double tAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TAcc {
      get { return tAcc_; }
      set {
        tAcc_ = value;
      }
    }

    /// <summary>Field number for the "is_still" field.</summary>
    public const int IsStillFieldNumber = 22;
    private bool isStill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStill {
      get { return isStill_; }
      set {
        isStill_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 23;
    private global::Apollo.Perception.PerceptionObstacle.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.PerceptionObstacle.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "label_update_time_delta" field.</summary>
    public const int LabelUpdateTimeDeltaFieldNumber = 24;
    private double labelUpdateTimeDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LabelUpdateTimeDelta {
      get { return labelUpdateTimeDelta_; }
      set {
        labelUpdateTimeDelta_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 25;
    private global::Apollo.Prediction.ObstaclePriority priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.ObstaclePriority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "is_near_junction" field.</summary>
    public const int IsNearJunctionFieldNumber = 29;
    private bool isNearJunction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNearJunction {
      get { return isNearJunction_; }
      set {
        isNearJunction_ = value;
      }
    }

    /// <summary>Field number for the "future_trajectory_points" field.</summary>
    public const int FutureTrajectoryPointsFieldNumber = 31;
    private static readonly pb::FieldCodec<global::Apollo.Prediction.PredictionTrajectoryPoint> _repeated_futureTrajectoryPoints_codec
        = pb::FieldCodec.ForMessage(250, global::Apollo.Prediction.PredictionTrajectoryPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Prediction.PredictionTrajectoryPoint> futureTrajectoryPoints_ = new pbc::RepeatedField<global::Apollo.Prediction.PredictionTrajectoryPoint>();
    /// <summary>
    /// Obstacle ground-truth labels:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Prediction.PredictionTrajectoryPoint> FutureTrajectoryPoints {
      get { return futureTrajectoryPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Feature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Feature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!polygonPoint_.Equals(other.polygonPoint_)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(FrontPosition, other.FrontPosition)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(RawVelocity, other.RawVelocity)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (VelocityHeading != other.VelocityHeading) return false;
      if (Speed != other.Speed) return false;
      if (Acc != other.Acc) return false;
      if (Theta != other.Theta) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (TrackingTime != other.TrackingTime) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Lane, other.Lane)) return false;
      if (!object.Equals(JunctionFeature, other.JunctionFeature)) return false;
      if (!object.Equals(TPosition, other.TPosition)) return false;
      if (!object.Equals(TVelocity, other.TVelocity)) return false;
      if (TVelocityHeading != other.TVelocityHeading) return false;
      if (TSpeed != other.TSpeed) return false;
      if (!object.Equals(TAcceleration, other.TAcceleration)) return false;
      if (TAcc != other.TAcc) return false;
      if (IsStill != other.IsStill) return false;
      if (Type != other.Type) return false;
      if (LabelUpdateTimeDelta != other.LabelUpdateTimeDelta) return false;
      if (!object.Equals(Priority, other.Priority)) return false;
      if (IsNearJunction != other.IsNearJunction) return false;
      if(!futureTrajectoryPoints_.Equals(other.futureTrajectoryPoints_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= polygonPoint_.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (frontPosition_ != null) hash ^= FrontPosition.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (rawVelocity_ != null) hash ^= RawVelocity.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (VelocityHeading != 0D) hash ^= VelocityHeading.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (Acc != 0D) hash ^= Acc.GetHashCode();
      if (Theta != 0D) hash ^= Theta.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (TrackingTime != 0D) hash ^= TrackingTime.GetHashCode();
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      if (lane_ != null) hash ^= Lane.GetHashCode();
      if (junctionFeature_ != null) hash ^= JunctionFeature.GetHashCode();
      if (tPosition_ != null) hash ^= TPosition.GetHashCode();
      if (tVelocity_ != null) hash ^= TVelocity.GetHashCode();
      if (TVelocityHeading != 0D) hash ^= TVelocityHeading.GetHashCode();
      if (TSpeed != 0D) hash ^= TSpeed.GetHashCode();
      if (tAcceleration_ != null) hash ^= TAcceleration.GetHashCode();
      if (TAcc != 0D) hash ^= TAcc.GetHashCode();
      if (IsStill != false) hash ^= IsStill.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (LabelUpdateTimeDelta != 0D) hash ^= LabelUpdateTimeDelta.GetHashCode();
      if (priority_ != null) hash ^= Priority.GetHashCode();
      if (IsNearJunction != false) hash ^= IsNearJunction.GetHashCode();
      hash ^= futureTrajectoryPoints_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Velocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Acceleration);
      }
      if (VelocityHeading != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(VelocityHeading);
      }
      if (Speed != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Speed);
      }
      if (Acc != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Acc);
      }
      if (Theta != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Theta);
      }
      if (Length != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Height);
      }
      if (TrackingTime != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(TrackingTime);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Timestamp);
      }
      if (lane_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Lane);
      }
      if (tPosition_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(TPosition);
      }
      if (tVelocity_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TVelocity);
      }
      if (TVelocityHeading != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(TVelocityHeading);
      }
      if (TSpeed != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(TSpeed);
      }
      if (tAcceleration_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(TAcceleration);
      }
      if (TAcc != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(TAcc);
      }
      if (IsStill != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsStill);
      }
      if (Type != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Type);
      }
      if (LabelUpdateTimeDelta != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(LabelUpdateTimeDelta);
      }
      if (priority_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Priority);
      }
      if (junctionFeature_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(JunctionFeature);
      }
      if (frontPosition_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(FrontPosition);
      }
      if (rawVelocity_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(RawVelocity);
      }
      if (IsNearJunction != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsNearJunction);
      }
      polygonPoint_.WriteTo(output, _repeated_polygonPoint_codec);
      futureTrajectoryPoints_.WriteTo(output, _repeated_futureTrajectoryPoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += polygonPoint_.CalculateSize(_repeated_polygonPoint_codec);
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (frontPosition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FrontPosition);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (rawVelocity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RawVelocity);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (VelocityHeading != 0D) {
        size += 1 + 8;
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (Acc != 0D) {
        size += 1 + 8;
      }
      if (Theta != 0D) {
        size += 1 + 8;
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (TrackingTime != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (lane_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lane);
      }
      if (junctionFeature_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JunctionFeature);
      }
      if (tPosition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TPosition);
      }
      if (tVelocity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TVelocity);
      }
      if (TVelocityHeading != 0D) {
        size += 2 + 8;
      }
      if (TSpeed != 0D) {
        size += 2 + 8;
      }
      if (tAcceleration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TAcceleration);
      }
      if (TAcc != 0D) {
        size += 2 + 8;
      }
      if (IsStill != false) {
        size += 2 + 1;
      }
      if (Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (LabelUpdateTimeDelta != 0D) {
        size += 2 + 8;
      }
      if (priority_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Priority);
      }
      if (IsNearJunction != false) {
        size += 2 + 1;
      }
      size += futureTrajectoryPoints_.CalculateSize(_repeated_futureTrajectoryPoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Feature other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      polygonPoint_.Add(other.polygonPoint_);
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.frontPosition_ != null) {
        if (frontPosition_ == null) {
          frontPosition_ = new global::Apollo.Common.Point3D();
        }
        FrontPosition.MergeFrom(other.FrontPosition);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Apollo.Common.Point3D();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.rawVelocity_ != null) {
        if (rawVelocity_ == null) {
          rawVelocity_ = new global::Apollo.Common.Point3D();
        }
        RawVelocity.MergeFrom(other.RawVelocity);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          acceleration_ = new global::Apollo.Common.Point3D();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.VelocityHeading != 0D) {
        VelocityHeading = other.VelocityHeading;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.Acc != 0D) {
        Acc = other.Acc;
      }
      if (other.Theta != 0D) {
        Theta = other.Theta;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.TrackingTime != 0D) {
        TrackingTime = other.TrackingTime;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      if (other.lane_ != null) {
        if (lane_ == null) {
          lane_ = new global::Apollo.Prediction.Lane();
        }
        Lane.MergeFrom(other.Lane);
      }
      if (other.junctionFeature_ != null) {
        if (junctionFeature_ == null) {
          junctionFeature_ = new global::Apollo.Prediction.JunctionFeature();
        }
        JunctionFeature.MergeFrom(other.JunctionFeature);
      }
      if (other.tPosition_ != null) {
        if (tPosition_ == null) {
          tPosition_ = new global::Apollo.Common.Point3D();
        }
        TPosition.MergeFrom(other.TPosition);
      }
      if (other.tVelocity_ != null) {
        if (tVelocity_ == null) {
          tVelocity_ = new global::Apollo.Common.Point3D();
        }
        TVelocity.MergeFrom(other.TVelocity);
      }
      if (other.TVelocityHeading != 0D) {
        TVelocityHeading = other.TVelocityHeading;
      }
      if (other.TSpeed != 0D) {
        TSpeed = other.TSpeed;
      }
      if (other.tAcceleration_ != null) {
        if (tAcceleration_ == null) {
          tAcceleration_ = new global::Apollo.Common.Point3D();
        }
        TAcceleration.MergeFrom(other.TAcceleration);
      }
      if (other.TAcc != 0D) {
        TAcc = other.TAcc;
      }
      if (other.IsStill != false) {
        IsStill = other.IsStill;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.LabelUpdateTimeDelta != 0D) {
        LabelUpdateTimeDelta = other.LabelUpdateTimeDelta;
      }
      if (other.priority_ != null) {
        if (priority_ == null) {
          priority_ = new global::Apollo.Prediction.ObstaclePriority();
        }
        Priority.MergeFrom(other.Priority);
      }
      if (other.IsNearJunction != false) {
        IsNearJunction = other.IsNearJunction;
      }
      futureTrajectoryPoints_.Add(other.futureTrajectoryPoints_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (velocity_ == null) {
              velocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 34: {
            if (acceleration_ == null) {
              acceleration_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(acceleration_);
            break;
          }
          case 41: {
            VelocityHeading = input.ReadDouble();
            break;
          }
          case 49: {
            Speed = input.ReadDouble();
            break;
          }
          case 57: {
            Acc = input.ReadDouble();
            break;
          }
          case 65: {
            Theta = input.ReadDouble();
            break;
          }
          case 73: {
            Length = input.ReadDouble();
            break;
          }
          case 81: {
            Width = input.ReadDouble();
            break;
          }
          case 89: {
            Height = input.ReadDouble();
            break;
          }
          case 97: {
            TrackingTime = input.ReadDouble();
            break;
          }
          case 105: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 114: {
            if (lane_ == null) {
              lane_ = new global::Apollo.Prediction.Lane();
            }
            input.ReadMessage(lane_);
            break;
          }
          case 130: {
            if (tPosition_ == null) {
              tPosition_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(tPosition_);
            break;
          }
          case 138: {
            if (tVelocity_ == null) {
              tVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(tVelocity_);
            break;
          }
          case 145: {
            TVelocityHeading = input.ReadDouble();
            break;
          }
          case 153: {
            TSpeed = input.ReadDouble();
            break;
          }
          case 162: {
            if (tAcceleration_ == null) {
              tAcceleration_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(tAcceleration_);
            break;
          }
          case 169: {
            TAcc = input.ReadDouble();
            break;
          }
          case 176: {
            IsStill = input.ReadBool();
            break;
          }
          case 184: {
            type_ = (global::Apollo.Perception.PerceptionObstacle.Types.Type) input.ReadEnum();
            break;
          }
          case 193: {
            LabelUpdateTimeDelta = input.ReadDouble();
            break;
          }
          case 202: {
            if (priority_ == null) {
              priority_ = new global::Apollo.Prediction.ObstaclePriority();
            }
            input.ReadMessage(priority_);
            break;
          }
          case 210: {
            if (junctionFeature_ == null) {
              junctionFeature_ = new global::Apollo.Prediction.JunctionFeature();
            }
            input.ReadMessage(junctionFeature_);
            break;
          }
          case 218: {
            if (frontPosition_ == null) {
              frontPosition_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(frontPosition_);
            break;
          }
          case 226: {
            if (rawVelocity_ == null) {
              rawVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(rawVelocity_);
            break;
          }
          case 232: {
            IsNearJunction = input.ReadBool();
            break;
          }
          case 242: {
            polygonPoint_.AddEntriesFrom(input, _repeated_polygonPoint_codec);
            break;
          }
          case 250: {
            futureTrajectoryPoints_.AddEntriesFrom(input, _repeated_futureTrajectoryPoints_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
