// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/frame.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from modules/data/proto/frame.proto</summary>
public static partial class FrameReflection {

  #region Descriptor
  /// <summary>File descriptor for modules/data/proto/frame.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FrameReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5tb2R1bGVzL2RhdGEvcHJvdG8vZnJhbWUucHJvdG8iKgoHVmVjdG9yMxIJ",
          "CgF4GAEgASgBEgkKAXkYAiABKAESCQoBehgDIAEoASJICgdWZWN0b3I0EgkK",
          "AXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMgASgBEgkKAWkYBCABKAESEQoJ",
          "aXNfZ3JvdW5kGAUgASgIIjgKClF1YXRlcm5pb24SCQoBeBgBIAEoARIJCgF5",
          "GAIgASgBEgkKAXoYAyABKAESCQoBdxgEIAEoASI0CgdHUFNQb3NlEgsKA2xh",
          "dBgBIAEoARILCgNsb24YAiABKAESDwoHYmVhcmluZxgDIAEoASLnAQoLQ2Ft",
          "ZXJhSW1hZ2USEQoJdGltZXN0YW1wGAEgASgBEhEKCWltYWdlX3VybBgCIAEo",
          "CRIaCghwb3NpdGlvbhgDIAEoCzIILlZlY3RvcjMSHAoHaGVhZGluZxgEIAEo",
          "CzILLlF1YXRlcm5pb24SCgoCZngYBSABKAESCgoCZnkYBiABKAESCgoCY3gY",
          "ByABKAESCgoCY3kYCCABKAESDAoEc2tldxgJIAEoARIKCgJrMRgKIAEoARIK",
          "CgJrMhgLIAEoARIKCgJrMxgMIAEoARIKCgJwMRgNIAEoARIKCgJwMhgOIAEo",
          "ASJFCgpSYWRhclBvaW50EhoKCHBvc2l0aW9uGAEgASgLMgguVmVjdG9yMxIb",
          "CglkaXJlY3Rpb24YAiABKAsyCC5WZWN0b3IzIuABCgVGcmFtZRIhCg9kZXZp",
          "Y2VfcG9zaXRpb24YASABKAsyCC5WZWN0b3IzEiMKDmRldmljZV9oZWFkaW5n",
          "GAIgASgLMgsuUXVhdGVybmlvbhIhCg9kZXZpY2VfZ3BzX3Bvc2UYAyABKAsy",
          "CC5HUFNQb3NlEhgKBnBvaW50cxgEIAMoCzIILlZlY3RvcjQSIQoMcmFkYXJf",
          "cG9pbnRzGAUgAygLMgsuUmFkYXJQb2ludBIcCgZpbWFnZXMYBiADKAsyDC5D",
          "YW1lcmFJbWFnZRIRCgl0aW1lc3RhbXAYByABKAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameVector3), global::FrameVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameVector4), global::FrameVector4.Parser, new[]{ "X", "Y", "Z", "I", "IsGround" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameQuaternion), global::FrameQuaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GPSPose), global::GPSPose.Parser, new[]{ "Lat", "Lon", "Bearing" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CameraImage), global::CameraImage.Parser, new[]{ "Timestamp", "ImageUrl", "Position", "Heading", "Fx", "Fy", "Cx", "Cy", "Skew", "K1", "K2", "K3", "P1", "P2" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RadarPoint), global::RadarPoint.Parser, new[]{ "Position", "Direction" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Frame), global::Frame.Parser, new[]{ "DevicePosition", "DeviceHeading", "DeviceGpsPose", "Points", "RadarPoints", "Images", "Timestamp" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class FrameVector3 : pb::IMessage<FrameVector3> {
  private static readonly pb::MessageParser<FrameVector3> _parser = new pb::MessageParser<FrameVector3>(() => new FrameVector3());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameVector3> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameVector3() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameVector3(FrameVector3 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameVector3 Clone() {
    return new FrameVector3(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameVector3);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameVector3 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0D) hash ^= X.GetHashCode();
    if (Y != 0D) hash ^= Y.GetHashCode();
    if (Z != 0D) hash ^= Z.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (Y != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (Z != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0D) {
      size += 1 + 8;
    }
    if (Y != 0D) {
      size += 1 + 8;
    }
    if (Z != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameVector3 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0D) {
      X = other.X;
    }
    if (other.Y != 0D) {
      Y = other.Y;
    }
    if (other.Z != 0D) {
      Z = other.Z;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class FrameVector4 : pb::IMessage<FrameVector4> {
  private static readonly pb::MessageParser<FrameVector4> _parser = new pb::MessageParser<FrameVector4>(() => new FrameVector4());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameVector4> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameVector4() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameVector4(FrameVector4 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    i_ = other.i_;
    isGround_ = other.isGround_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameVector4 Clone() {
    return new FrameVector4(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "i" field.</summary>
  public const int IFieldNumber = 4;
  private double i_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double I {
    get { return i_; }
    set {
      i_ = value;
    }
  }

  /// <summary>Field number for the "is_ground" field.</summary>
  public const int IsGroundFieldNumber = 5;
  private bool isGround_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsGround {
    get { return isGround_; }
    set {
      isGround_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameVector4);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameVector4 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    if (I != other.I) return false;
    if (IsGround != other.IsGround) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0D) hash ^= X.GetHashCode();
    if (Y != 0D) hash ^= Y.GetHashCode();
    if (Z != 0D) hash ^= Z.GetHashCode();
    if (I != 0D) hash ^= I.GetHashCode();
    if (IsGround != false) hash ^= IsGround.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (Y != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (Z != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
    if (I != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(I);
    }
    if (IsGround != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsGround);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0D) {
      size += 1 + 8;
    }
    if (Y != 0D) {
      size += 1 + 8;
    }
    if (Z != 0D) {
      size += 1 + 8;
    }
    if (I != 0D) {
      size += 1 + 8;
    }
    if (IsGround != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameVector4 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0D) {
      X = other.X;
    }
    if (other.Y != 0D) {
      Y = other.Y;
    }
    if (other.Z != 0D) {
      Z = other.Z;
    }
    if (other.I != 0D) {
      I = other.I;
    }
    if (other.IsGround != false) {
      IsGround = other.IsGround;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
        case 33: {
          I = input.ReadDouble();
          break;
        }
        case 40: {
          IsGround = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class FrameQuaternion : pb::IMessage<FrameQuaternion> {
  private static readonly pb::MessageParser<FrameQuaternion> _parser = new pb::MessageParser<FrameQuaternion>(() => new FrameQuaternion());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameQuaternion> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameQuaternion() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameQuaternion(FrameQuaternion other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    w_ = other.w_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameQuaternion Clone() {
    return new FrameQuaternion(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 4;
  private double w_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameQuaternion);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameQuaternion other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    if (W != other.W) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0D) hash ^= X.GetHashCode();
    if (Y != 0D) hash ^= Y.GetHashCode();
    if (Z != 0D) hash ^= Z.GetHashCode();
    if (W != 0D) hash ^= W.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (Y != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (Z != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
    if (W != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(W);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0D) {
      size += 1 + 8;
    }
    if (Y != 0D) {
      size += 1 + 8;
    }
    if (Z != 0D) {
      size += 1 + 8;
    }
    if (W != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameQuaternion other) {
    if (other == null) {
      return;
    }
    if (other.X != 0D) {
      X = other.X;
    }
    if (other.Y != 0D) {
      Y = other.Y;
    }
    if (other.Z != 0D) {
      Z = other.Z;
    }
    if (other.W != 0D) {
      W = other.W;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
        case 33: {
          W = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class GPSPose : pb::IMessage<GPSPose> {
  private static readonly pb::MessageParser<GPSPose> _parser = new pb::MessageParser<GPSPose>(() => new GPSPose());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GPSPose> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSPose() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSPose(GPSPose other) : this() {
    lat_ = other.lat_;
    lon_ = other.lon_;
    bearing_ = other.bearing_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSPose Clone() {
    return new GPSPose(this);
  }

  /// <summary>Field number for the "lat" field.</summary>
  public const int LatFieldNumber = 1;
  private double lat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Lat {
    get { return lat_; }
    set {
      lat_ = value;
    }
  }

  /// <summary>Field number for the "lon" field.</summary>
  public const int LonFieldNumber = 2;
  private double lon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Lon {
    get { return lon_; }
    set {
      lon_ = value;
    }
  }

  /// <summary>Field number for the "bearing" field.</summary>
  public const int BearingFieldNumber = 3;
  private double bearing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Bearing {
    get { return bearing_; }
    set {
      bearing_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GPSPose);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GPSPose other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Lat != other.Lat) return false;
    if (Lon != other.Lon) return false;
    if (Bearing != other.Bearing) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Lat != 0D) hash ^= Lat.GetHashCode();
    if (Lon != 0D) hash ^= Lon.GetHashCode();
    if (Bearing != 0D) hash ^= Bearing.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Lat != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Lat);
    }
    if (Lon != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Lon);
    }
    if (Bearing != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Bearing);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Lat != 0D) {
      size += 1 + 8;
    }
    if (Lon != 0D) {
      size += 1 + 8;
    }
    if (Bearing != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GPSPose other) {
    if (other == null) {
      return;
    }
    if (other.Lat != 0D) {
      Lat = other.Lat;
    }
    if (other.Lon != 0D) {
      Lon = other.Lon;
    }
    if (other.Bearing != 0D) {
      Bearing = other.Bearing;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          Lat = input.ReadDouble();
          break;
        }
        case 17: {
          Lon = input.ReadDouble();
          break;
        }
        case 25: {
          Bearing = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class CameraImage : pb::IMessage<CameraImage> {
  private static readonly pb::MessageParser<CameraImage> _parser = new pb::MessageParser<CameraImage>(() => new CameraImage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CameraImage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraImage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraImage(CameraImage other) : this() {
    timestamp_ = other.timestamp_;
    imageUrl_ = other.imageUrl_;
    Position = other.position_ != null ? other.Position.Clone() : null;
    Heading = other.heading_ != null ? other.Heading.Clone() : null;
    fx_ = other.fx_;
    fy_ = other.fy_;
    cx_ = other.cx_;
    cy_ = other.cy_;
    skew_ = other.skew_;
    k1_ = other.k1_;
    k2_ = other.k2_;
    k3_ = other.k3_;
    p1_ = other.p1_;
    p2_ = other.p2_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraImage Clone() {
    return new CameraImage(this);
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 1;
  private double timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "image_url" field.</summary>
  public const int ImageUrlFieldNumber = 2;
  private string imageUrl_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ImageUrl {
    get { return imageUrl_; }
    set {
      imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::FrameVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FrameVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "heading" field.</summary>
  public const int HeadingFieldNumber = 4;
  private global::FrameQuaternion heading_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FrameQuaternion Heading {
    get { return heading_; }
    set {
      heading_ = value;
    }
  }

  /// <summary>Field number for the "fx" field.</summary>
  public const int FxFieldNumber = 5;
  private double fx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Fx {
    get { return fx_; }
    set {
      fx_ = value;
    }
  }

  /// <summary>Field number for the "fy" field.</summary>
  public const int FyFieldNumber = 6;
  private double fy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Fy {
    get { return fy_; }
    set {
      fy_ = value;
    }
  }

  /// <summary>Field number for the "cx" field.</summary>
  public const int CxFieldNumber = 7;
  private double cx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Cx {
    get { return cx_; }
    set {
      cx_ = value;
    }
  }

  /// <summary>Field number for the "cy" field.</summary>
  public const int CyFieldNumber = 8;
  private double cy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Cy {
    get { return cy_; }
    set {
      cy_ = value;
    }
  }

  /// <summary>Field number for the "skew" field.</summary>
  public const int SkewFieldNumber = 9;
  private double skew_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Skew {
    get { return skew_; }
    set {
      skew_ = value;
    }
  }

  /// <summary>Field number for the "k1" field.</summary>
  public const int K1FieldNumber = 10;
  private double k1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double K1 {
    get { return k1_; }
    set {
      k1_ = value;
    }
  }

  /// <summary>Field number for the "k2" field.</summary>
  public const int K2FieldNumber = 11;
  private double k2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double K2 {
    get { return k2_; }
    set {
      k2_ = value;
    }
  }

  /// <summary>Field number for the "k3" field.</summary>
  public const int K3FieldNumber = 12;
  private double k3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double K3 {
    get { return k3_; }
    set {
      k3_ = value;
    }
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 13;
  private double p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 14;
  private double p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CameraImage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CameraImage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Timestamp != other.Timestamp) return false;
    if (ImageUrl != other.ImageUrl) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(Heading, other.Heading)) return false;
    if (Fx != other.Fx) return false;
    if (Fy != other.Fy) return false;
    if (Cx != other.Cx) return false;
    if (Cy != other.Cy) return false;
    if (Skew != other.Skew) return false;
    if (K1 != other.K1) return false;
    if (K2 != other.K2) return false;
    if (K3 != other.K3) return false;
    if (P1 != other.P1) return false;
    if (P2 != other.P2) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
    if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (heading_ != null) hash ^= Heading.GetHashCode();
    if (Fx != 0D) hash ^= Fx.GetHashCode();
    if (Fy != 0D) hash ^= Fy.GetHashCode();
    if (Cx != 0D) hash ^= Cx.GetHashCode();
    if (Cy != 0D) hash ^= Cy.GetHashCode();
    if (Skew != 0D) hash ^= Skew.GetHashCode();
    if (K1 != 0D) hash ^= K1.GetHashCode();
    if (K2 != 0D) hash ^= K2.GetHashCode();
    if (K3 != 0D) hash ^= K3.GetHashCode();
    if (P1 != 0D) hash ^= P1.GetHashCode();
    if (P2 != 0D) hash ^= P2.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Timestamp != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Timestamp);
    }
    if (ImageUrl.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ImageUrl);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (heading_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Heading);
    }
    if (Fx != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(Fx);
    }
    if (Fy != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(Fy);
    }
    if (Cx != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(Cx);
    }
    if (Cy != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(Cy);
    }
    if (Skew != 0D) {
      output.WriteRawTag(73);
      output.WriteDouble(Skew);
    }
    if (K1 != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(K1);
    }
    if (K2 != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(K2);
    }
    if (K3 != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(K3);
    }
    if (P1 != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(P1);
    }
    if (P2 != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(P2);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Timestamp != 0D) {
      size += 1 + 8;
    }
    if (ImageUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (heading_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heading);
    }
    if (Fx != 0D) {
      size += 1 + 8;
    }
    if (Fy != 0D) {
      size += 1 + 8;
    }
    if (Cx != 0D) {
      size += 1 + 8;
    }
    if (Cy != 0D) {
      size += 1 + 8;
    }
    if (Skew != 0D) {
      size += 1 + 8;
    }
    if (K1 != 0D) {
      size += 1 + 8;
    }
    if (K2 != 0D) {
      size += 1 + 8;
    }
    if (K3 != 0D) {
      size += 1 + 8;
    }
    if (P1 != 0D) {
      size += 1 + 8;
    }
    if (P2 != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CameraImage other) {
    if (other == null) {
      return;
    }
    if (other.Timestamp != 0D) {
      Timestamp = other.Timestamp;
    }
    if (other.ImageUrl.Length != 0) {
      ImageUrl = other.ImageUrl;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::FrameVector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.heading_ != null) {
      if (heading_ == null) {
        heading_ = new global::FrameQuaternion();
      }
      Heading.MergeFrom(other.Heading);
    }
    if (other.Fx != 0D) {
      Fx = other.Fx;
    }
    if (other.Fy != 0D) {
      Fy = other.Fy;
    }
    if (other.Cx != 0D) {
      Cx = other.Cx;
    }
    if (other.Cy != 0D) {
      Cy = other.Cy;
    }
    if (other.Skew != 0D) {
      Skew = other.Skew;
    }
    if (other.K1 != 0D) {
      K1 = other.K1;
    }
    if (other.K2 != 0D) {
      K2 = other.K2;
    }
    if (other.K3 != 0D) {
      K3 = other.K3;
    }
    if (other.P1 != 0D) {
      P1 = other.P1;
    }
    if (other.P2 != 0D) {
      P2 = other.P2;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          Timestamp = input.ReadDouble();
          break;
        }
        case 18: {
          ImageUrl = input.ReadString();
          break;
        }
        case 26: {
          if (position_ == null) {
            position_ = new global::FrameVector3();
          }
          input.ReadMessage(position_);
          break;
        }
        case 34: {
          if (heading_ == null) {
            heading_ = new global::FrameQuaternion();
          }
          input.ReadMessage(heading_);
          break;
        }
        case 41: {
          Fx = input.ReadDouble();
          break;
        }
        case 49: {
          Fy = input.ReadDouble();
          break;
        }
        case 57: {
          Cx = input.ReadDouble();
          break;
        }
        case 65: {
          Cy = input.ReadDouble();
          break;
        }
        case 73: {
          Skew = input.ReadDouble();
          break;
        }
        case 81: {
          K1 = input.ReadDouble();
          break;
        }
        case 89: {
          K2 = input.ReadDouble();
          break;
        }
        case 97: {
          K3 = input.ReadDouble();
          break;
        }
        case 105: {
          P1 = input.ReadDouble();
          break;
        }
        case 113: {
          P2 = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class RadarPoint : pb::IMessage<RadarPoint> {
  private static readonly pb::MessageParser<RadarPoint> _parser = new pb::MessageParser<RadarPoint>(() => new RadarPoint());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RadarPoint> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RadarPoint() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RadarPoint(RadarPoint other) : this() {
    Position = other.position_ != null ? other.Position.Clone() : null;
    Direction = other.direction_ != null ? other.Direction.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RadarPoint Clone() {
    return new RadarPoint(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private global::FrameVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FrameVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "direction" field.</summary>
  public const int DirectionFieldNumber = 2;
  private global::FrameVector3 direction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FrameVector3 Direction {
    get { return direction_; }
    set {
      direction_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RadarPoint);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RadarPoint other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(Direction, other.Direction)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (position_ != null) hash ^= Position.GetHashCode();
    if (direction_ != null) hash ^= Direction.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (position_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Position);
    }
    if (direction_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Direction);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (direction_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RadarPoint other) {
    if (other == null) {
      return;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::FrameVector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.direction_ != null) {
      if (direction_ == null) {
        direction_ = new global::FrameVector3();
      }
      Direction.MergeFrom(other.Direction);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (position_ == null) {
            position_ = new global::FrameVector3();
          }
          input.ReadMessage(position_);
          break;
        }
        case 18: {
          if (direction_ == null) {
            direction_ = new global::FrameVector3();
          }
          input.ReadMessage(direction_);
          break;
        }
      }
    }
  }

}

public sealed partial class Frame : pb::IMessage<Frame> {
  private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Frame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Frame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Frame(Frame other) : this() {
    DevicePosition = other.devicePosition_ != null ? other.DevicePosition.Clone() : null;
    DeviceHeading = other.deviceHeading_ != null ? other.DeviceHeading.Clone() : null;
    DeviceGpsPose = other.deviceGpsPose_ != null ? other.DeviceGpsPose.Clone() : null;
    points_ = other.points_.Clone();
    radarPoints_ = other.radarPoints_.Clone();
    images_ = other.images_.Clone();
    timestamp_ = other.timestamp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Frame Clone() {
    return new Frame(this);
  }

  /// <summary>Field number for the "device_position" field.</summary>
  public const int DevicePositionFieldNumber = 1;
  private global::FrameVector3 devicePosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FrameVector3 DevicePosition {
    get { return devicePosition_; }
    set {
      devicePosition_ = value;
    }
  }

  /// <summary>Field number for the "device_heading" field.</summary>
  public const int DeviceHeadingFieldNumber = 2;
  private global::FrameQuaternion deviceHeading_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FrameQuaternion DeviceHeading {
    get { return deviceHeading_; }
    set {
      deviceHeading_ = value;
    }
  }

  /// <summary>Field number for the "device_gps_pose" field.</summary>
  public const int DeviceGpsPoseFieldNumber = 3;
  private global::GPSPose deviceGpsPose_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GPSPose DeviceGpsPose {
    get { return deviceGpsPose_; }
    set {
      deviceGpsPose_ = value;
    }
  }

  /// <summary>Field number for the "points" field.</summary>
  public const int PointsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::FrameVector4> _repeated_points_codec
      = pb::FieldCodec.ForMessage(34, global::FrameVector4.Parser);
  private readonly pbc::RepeatedField<global::FrameVector4> points_ = new pbc::RepeatedField<global::FrameVector4>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FrameVector4> Points {
    get { return points_; }
  }

  /// <summary>Field number for the "radar_points" field.</summary>
  public const int RadarPointsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::RadarPoint> _repeated_radarPoints_codec
      = pb::FieldCodec.ForMessage(42, global::RadarPoint.Parser);
  private readonly pbc::RepeatedField<global::RadarPoint> radarPoints_ = new pbc::RepeatedField<global::RadarPoint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RadarPoint> RadarPoints {
    get { return radarPoints_; }
  }

  /// <summary>Field number for the "images" field.</summary>
  public const int ImagesFieldNumber = 6;
  private static readonly pb::FieldCodec<global::CameraImage> _repeated_images_codec
      = pb::FieldCodec.ForMessage(50, global::CameraImage.Parser);
  private readonly pbc::RepeatedField<global::CameraImage> images_ = new pbc::RepeatedField<global::CameraImage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CameraImage> Images {
    get { return images_; }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 7;
  private double timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Frame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Frame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DevicePosition, other.DevicePosition)) return false;
    if (!object.Equals(DeviceHeading, other.DeviceHeading)) return false;
    if (!object.Equals(DeviceGpsPose, other.DeviceGpsPose)) return false;
    if(!points_.Equals(other.points_)) return false;
    if(!radarPoints_.Equals(other.radarPoints_)) return false;
    if(!images_.Equals(other.images_)) return false;
    if (Timestamp != other.Timestamp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (devicePosition_ != null) hash ^= DevicePosition.GetHashCode();
    if (deviceHeading_ != null) hash ^= DeviceHeading.GetHashCode();
    if (deviceGpsPose_ != null) hash ^= DeviceGpsPose.GetHashCode();
    hash ^= points_.GetHashCode();
    hash ^= radarPoints_.GetHashCode();
    hash ^= images_.GetHashCode();
    if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (devicePosition_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DevicePosition);
    }
    if (deviceHeading_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DeviceHeading);
    }
    if (deviceGpsPose_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DeviceGpsPose);
    }
    points_.WriteTo(output, _repeated_points_codec);
    radarPoints_.WriteTo(output, _repeated_radarPoints_codec);
    images_.WriteTo(output, _repeated_images_codec);
    if (Timestamp != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(Timestamp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (devicePosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DevicePosition);
    }
    if (deviceHeading_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceHeading);
    }
    if (deviceGpsPose_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceGpsPose);
    }
    size += points_.CalculateSize(_repeated_points_codec);
    size += radarPoints_.CalculateSize(_repeated_radarPoints_codec);
    size += images_.CalculateSize(_repeated_images_codec);
    if (Timestamp != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Frame other) {
    if (other == null) {
      return;
    }
    if (other.devicePosition_ != null) {
      if (devicePosition_ == null) {
        devicePosition_ = new global::FrameVector3();
      }
      DevicePosition.MergeFrom(other.DevicePosition);
    }
    if (other.deviceHeading_ != null) {
      if (deviceHeading_ == null) {
        deviceHeading_ = new global::FrameQuaternion();
      }
      DeviceHeading.MergeFrom(other.DeviceHeading);
    }
    if (other.deviceGpsPose_ != null) {
      if (deviceGpsPose_ == null) {
        deviceGpsPose_ = new global::GPSPose();
      }
      DeviceGpsPose.MergeFrom(other.DeviceGpsPose);
    }
    points_.Add(other.points_);
    radarPoints_.Add(other.radarPoints_);
    images_.Add(other.images_);
    if (other.Timestamp != 0D) {
      Timestamp = other.Timestamp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (devicePosition_ == null) {
            devicePosition_ = new global::FrameVector3();
          }
          input.ReadMessage(devicePosition_);
          break;
        }
        case 18: {
          if (deviceHeading_ == null) {
            deviceHeading_ = new global::FrameQuaternion();
          }
          input.ReadMessage(deviceHeading_);
          break;
        }
        case 26: {
          if (deviceGpsPose_ == null) {
            deviceGpsPose_ = new global::GPSPose();
          }
          input.ReadMessage(deviceGpsPose_);
          break;
        }
        case 34: {
          points_.AddEntriesFrom(input, _repeated_points_codec);
          break;
        }
        case 42: {
          radarPoints_.AddEntriesFrom(input, _repeated_radarPoints_codec);
          break;
        }
        case 50: {
          images_.AddEntriesFrom(input, _repeated_images_codec);
          break;
        }
        case 57: {
          Timestamp = input.ReadDouble();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
