// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.PlanningInternal {

  /// <summary>Holder for reflection information generated from modules/planning/proto/planning_internal.proto</summary>
  public static partial class PlanningInternalReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/planning_internal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlanningInternalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5tb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BsYW5uaW5nX2ludGVybmFsLnBy",
            "b3RvEhhhcG9sbG8ucGxhbm5pbmdfaW50ZXJuYWwaIW1vZHVsZXMvY29tbW9u",
            "L3Byb3RvL2hlYWRlci5wcm90bxoibW9kdWxlcy9jYW5idXMvcHJvdG8vY2hh",
            "c3Npcy5wcm90bxokbW9kdWxlcy9jb21tb24vcHJvdG8vcG5jX3BvaW50LnBy",
            "b3RvGi1tb2R1bGVzL2xvY2FsaXphdGlvbi9wcm90by9sb2NhbGl6YXRpb24u",
            "cHJvdG8aI21vZHVsZXMvZHJlYW12aWV3L3Byb3RvL2NoYXJ0LnByb3RvGi9t",
            "b2R1bGVzL21hcC9yZWxhdGl2ZV9tYXAvcHJvdG8vbmF2aWdhdGlvbi5wcm90",
            "bxojbW9kdWxlcy9yb3V0aW5nL3Byb3RvL3JvdXRpbmcucHJvdG8aNm1vZHVs",
            "ZXMvcGVyY2VwdGlvbi9wcm90by90cmFmZmljX2xpZ2h0X2RldGVjdGlvbi5w",
            "cm90bxoobW9kdWxlcy9wbGFubmluZy9wcm90by9zbF9ib3VuZGFyeS5wcm90",
            "bxolbW9kdWxlcy9wbGFubmluZy9wcm90by9kZWNpc2lvbi5wcm90bxosbW9k",
            "dWxlcy9wbGFubmluZy9wcm90by9wbGFubmluZ19jb25maWcucHJvdG8iRgoF",
            "RGVidWcSPQoNcGxhbm5pbmdfZGF0YRgCIAEoCzImLmFwb2xsby5wbGFubmlu",
            "Z19pbnRlcm5hbC5QbGFubmluZ0RhdGEiSQoJU3BlZWRQbGFuEgwKBG5hbWUY",
            "ASABKAkSLgoLc3BlZWRfcG9pbnQYAiADKAsyGS5hcG9sbG8uY29tbW9uLlNw",
            "ZWVkUG9pbnQi+gIKFFN0R3JhcGhCb3VuZGFyeURlYnVnEgwKBG5hbWUYASAB",
            "KAkSKAoFcG9pbnQYAiADKAsyGS5hcG9sbG8uY29tbW9uLlNwZWVkUG9pbnQS",
            "SwoEdHlwZRgDIAEoDjI9LmFwb2xsby5wbGFubmluZ19pbnRlcm5hbC5TdEdy",
            "YXBoQm91bmRhcnlEZWJ1Zy5TdEJvdW5kYXJ5VHlwZSLcAQoOU3RCb3VuZGFy",
            "eVR5cGUSGAoUU1RCT1VOREFSWVRZUEVfRFVNTVkQABIcChhTVF9CT1VOREFS",
            "WV9UWVBFX1VOS05PV04QARIZChVTVF9CT1VOREFSWV9UWVBFX1NUT1AQAhIb",
            "ChdTVF9CT1VOREFSWV9UWVBFX0ZPTExPVxADEhoKFlNUX0JPVU5EQVJZX1RZ",
            "UEVfWUlFTEQQBBIdChlTVF9CT1VOREFSWV9UWVBFX09WRVJUQUtFEAUSHwob",
            "U1RfQk9VTkRBUllfVFlQRV9LRUVQX0NMRUFSEAYiggMKDFNMRnJhbWVEZWJ1",
            "ZxIMCgRuYW1lGAEgASgJEhEKCXNhbXBsZWRfcxgCIAMoARIjChtzdGF0aWNf",
            "b2JzdGFjbGVfbG93ZXJfYm91bmQYAyADKAESJAocZHluYW1pY19vYnN0YWNs",
            "ZV9sb3dlcl9ib3VuZBgEIAMoARIjChtzdGF0aWNfb2JzdGFjbGVfdXBwZXJf",
            "Ym91bmQYBSADKAESJAocZHluYW1pY19vYnN0YWNsZV91cHBlcl9ib3VuZBgG",
            "IAMoARIXCg9tYXBfbG93ZXJfYm91bmQYByADKAESFwoPbWFwX3VwcGVyX2Jv",
            "dW5kGAggAygBEicKB3NsX3BhdGgYCSADKAsyFi5hcG9sbG8uY29tbW9uLlNM",
            "UG9pbnQSHQoVYWdncmVnYXRlZF9ib3VuZGFyeV9zGAogAygBEh8KF2FnZ3Jl",
            "Z2F0ZWRfYm91bmRhcnlfbG93GAsgAygBEiAKGGFnZ3JlZ2F0ZWRfYm91bmRh",
            "cnlfaGlnaBgMIAMoASKSBQoMU1RHcmFwaERlYnVnEgwKBG5hbWUYASABKAkS",
            "QAoIYm91bmRhcnkYAiADKAsyLi5hcG9sbG8ucGxhbm5pbmdfaW50ZXJuYWwu",
            "U3RHcmFwaEJvdW5kYXJ5RGVidWcSLgoLc3BlZWRfbGltaXQYAyADKAsyGS5h",
            "cG9sbG8uY29tbW9uLlNwZWVkUG9pbnQSMAoNc3BlZWRfcHJvZmlsZRgEIAMo",
            "CzIZLmFwb2xsby5jb21tb24uU3BlZWRQb2ludBJXChBzcGVlZF9jb25zdHJh",
            "aW50GAUgASgLMj0uYXBvbGxvLnBsYW5uaW5nX2ludGVybmFsLlNUR3JhcGhE",
            "ZWJ1Zy5TVEdyYXBoU3BlZWRDb25zdHJhaW50ElcKEWtlcm5lbF9jcnVpc2Vf",
            "cmVmGAYgASgLMjwuYXBvbGxvLnBsYW5uaW5nX2ludGVybmFsLlNUR3JhcGhE",
            "ZWJ1Zy5TVEdyYXBoS2VybmVsQ3Vpc2VSZWYSWAoRa2VybmVsX2ZvbGxvd19y",
            "ZWYYByABKAsyPS5hcG9sbG8ucGxhbm5pbmdfaW50ZXJuYWwuU1RHcmFwaERl",
            "YnVnLlNUR3JhcGhLZXJuZWxGb2xsb3dSZWYaTQoWU1RHcmFwaFNwZWVkQ29u",
            "c3RyYWludBIJCgF0GAEgAygBEhMKC2xvd2VyX2JvdW5kGAIgAygBEhMKC3Vw",
            "cGVyX2JvdW5kGAMgAygBGjkKFVNUR3JhcGhLZXJuZWxDdWlzZVJlZhIJCgF0",
            "GAEgAygBEhUKDWNydWlzZV9saW5lX3MYAiADKAEaOgoWU1RHcmFwaEtlcm5l",
            "bEZvbGxvd1JlZhIJCgF0GAEgAygBEhUKDWZvbGxvd19saW5lX3MYAiADKAEi",
            "rwIKEFNpZ25hbExpZ2h0RGVidWcSEQoJYWRjX3NwZWVkGAEgASgBEhMKC2Fk",
            "Y19mcm9udF9zGAIgASgBEkYKBnNpZ25hbBgDIAMoCzI2LmFwb2xsby5wbGFu",
            "bmluZ19pbnRlcm5hbC5TaWduYWxMaWdodERlYnVnLlNpZ25hbERlYnVnGqoB",
            "CgtTaWduYWxEZWJ1ZxIQCghsaWdodF9pZBgBIAEoCRI0CgVjb2xvchgCIAEo",
            "DjIlLmFwb2xsby5wZXJjZXB0aW9uLlRyYWZmaWNMaWdodC5Db2xvchIUCgxs",
            "aWdodF9zdG9wX3MYAyABKAESHwoXYWRjX3N0b3BfZGVhY2NlbGVyYXRpb24Y",
            "BCABKAESHAoUaXNfc3RvcF93YWxsX2NyZWF0ZWQYBSABKAgiWQoLRGVjaXNp",
            "b25UYWcSEwoLZGVjaWRlcl90YWcYASABKAkSNQoIZGVjaXNpb24YAiABKAsy",
            "Iy5hcG9sbG8ucGxhbm5pbmcuT2JqZWN0RGVjaXNpb25UeXBlIsABCg1PYnN0",
            "YWNsZURlYnVnEgoKAmlkGAEgASgJEjAKC3NsX2JvdW5kYXJ5GAIgASgLMhsu",
            "YXBvbGxvLnBsYW5uaW5nLlNMQm91bmRhcnkSOwoMZGVjaXNpb25fdGFnGAMg",
            "AygLMiUuYXBvbGxvLnBsYW5uaW5nX2ludGVybmFsLkRlY2lzaW9uVGFnEhkK",
            "EXZlcnRpY2VzX3hfY29vcmRzGAQgAygBEhkKEXZlcnRpY2VzX3lfY29vcmRz",
            "GAUgAygBIoYBChJSZWZlcmVuY2VMaW5lRGVidWcSCgoCaWQYASABKAkSDgoG",
            "bGVuZ3RoGAIgASgBEgwKBGNvc3QYAyABKAESGwoTaXNfY2hhbmdlX2xhbmVf",
            "cGF0aBgEIAEoCBITCgtpc19kcml2YWJsZRgFIAEoCBIUCgxpc19wcm90ZWN0",
            "ZWQYBiABKAgiPAoQU2FtcGxlTGF5ZXJEZWJ1ZxIoCghzbF9wb2ludBgBIAMo",
            "CzIWLmFwb2xsby5jb21tb24uU0xQb2ludCKEAQoQRHBQb2x5R3JhcGhEZWJ1",
            "ZxJACgxzYW1wbGVfbGF5ZXIYASADKAsyKi5hcG9sbG8ucGxhbm5pbmdfaW50",
            "ZXJuYWwuU2FtcGxlTGF5ZXJEZWJ1ZxIuCg5taW5fY29zdF9wb2ludBgCIAMo",
            "CzIWLmFwb2xsby5jb21tb24uU0xQb2ludCKgAQoNU2NlbmFyaW9EZWJ1ZxJD",
            "Cg1zY2VuYXJpb190eXBlGAEgASgOMiwuYXBvbGxvLnBsYW5uaW5nLlNjZW5h",
            "cmlvQ29uZmlnLlNjZW5hcmlvVHlwZRI9CgpzdGFnZV90eXBlGAIgASgOMiku",
            "YXBvbGxvLnBsYW5uaW5nLlNjZW5hcmlvQ29uZmlnLlN0YWdlVHlwZRILCgNt",
            "c2cYAyABKAkiPQoMVHJhamVjdG9yaWVzEi0KCnRyYWplY3RvcnkYASADKAsy",
            "GS5hcG9sbG8uY29tbW9uLlRyYWplY3RvcnkijwMKDk9wZW5TcGFjZURlYnVn",
            "EjwKDHRyYWplY3RvcmllcxgBIAEoCzImLmFwb2xsby5wbGFubmluZ19pbnRl",
            "cm5hbC5UcmFqZWN0b3JpZXMSOwoVd2FybV9zdGFydF90cmFqZWN0b3J5GAIg",
            "ASgLMhwuYXBvbGxvLmNvbW1vbi5WZWhpY2xlTW90aW9uEjkKE3Ntb290aGVk",
            "X3RyYWplY3RvcnkYAyABKAsyHC5hcG9sbG8uY29tbW9uLlZlaGljbGVNb3Rp",
            "b24SHgoWd2FybV9zdGFydF9kdWFsX2xhbWJkYRgEIAMoARIbChN3YXJtX3N0",
            "YXJ0X2R1YWxfbWl1GAUgAygBEh0KFW9wdGltaXplZF9kdWFsX2xhbWJkYRgG",
            "IAMoARIaChJvcHRpbWl6ZWRfZHVhbF9taXUYByADKAESEwoLeHlfYm91bmRh",
            "cnkYCCADKAESOgoJb2JzdGFjbGVzGAkgAygLMicuYXBvbGxvLnBsYW5uaW5n",
            "X2ludGVybmFsLk9ic3RhY2xlRGVidWcizAEKDVNtb290aGVyRGVidWcSEwoL",
            "aXNfc21vb3RoZWQYASABKAgSQgoEdHlwZRgCIAEoDjI0LmFwb2xsby5wbGFu",
            "bmluZ19pbnRlcm5hbC5TbW9vdGhlckRlYnVnLlNtb290aGVyVHlwZRIOCgZy",
            "ZWFzb24YAyABKAkiUgoMU21vb3RoZXJUeXBlEhYKElNNT09USEVSVFlQRV9E",
            "VU1NWRAAEhEKDVNNT09USEVSX05PTkUQARIXChNTTU9PVEhFUl9DTE9TRV9T",
            "VE9QEAIirwkKDFBsYW5uaW5nRGF0YRI/CgxhZGNfcG9zaXRpb24YByABKAsy",
            "KS5hcG9sbG8ubG9jYWxpemF0aW9uLkxvY2FsaXphdGlvbkVzdGltYXRlEicK",
            "B2NoYXNzaXMYCCABKAsyFi5hcG9sbG8uY2FuYnVzLkNoYXNzaXMSMAoHcm91",
            "dGluZxgJIAEoCzIfLmFwb2xsby5yb3V0aW5nLlJvdXRpbmdSZXNwb25zZRIy",
            "Cgppbml0X3BvaW50GAogASgLMh4uYXBvbGxvLmNvbW1vbi5UcmFqZWN0b3J5",
            "UG9pbnQSIQoEcGF0aBgGIAMoCzITLmFwb2xsby5jb21tb24uUGF0aBI3Cgpz",
            "cGVlZF9wbGFuGA0gAygLMiMuYXBvbGxvLnBsYW5uaW5nX2ludGVybmFsLlNw",
            "ZWVkUGxhbhI4CghzdF9ncmFwaBgOIAMoCzImLmFwb2xsby5wbGFubmluZ19p",
            "bnRlcm5hbC5TVEdyYXBoRGVidWcSOAoIc2xfZnJhbWUYDyADKAsyJi5hcG9s",
            "bG8ucGxhbm5pbmdfaW50ZXJuYWwuU0xGcmFtZURlYnVnEjAKEXByZWRpY3Rp",
            "b25faGVhZGVyGBAgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFkZXISQAoMc2ln",
            "bmFsX2xpZ2h0GBEgASgLMiouYXBvbGxvLnBsYW5uaW5nX2ludGVybmFsLlNp",
            "Z25hbExpZ2h0RGVidWcSOQoIb2JzdGFjbGUYEiADKAsyJy5hcG9sbG8ucGxh",
            "bm5pbmdfaW50ZXJuYWwuT2JzdGFjbGVEZWJ1ZxJECg5yZWZlcmVuY2VfbGlu",
            "ZRgTIAMoCzIsLmFwb2xsby5wbGFubmluZ19pbnRlcm5hbC5SZWZlcmVuY2VM",
            "aW5lRGVidWcSQQoNZHBfcG9seV9ncmFwaBgUIAEoCzIqLmFwb2xsby5wbGFu",
            "bmluZ19pbnRlcm5hbC5EcFBvbHlHcmFwaERlYnVnEkUKEGxhdHRpY2Vfc3Rf",
            "aW1hZ2UYFSABKAsyKy5hcG9sbG8ucGxhbm5pbmdfaW50ZXJuYWwuTGF0dGlj",
            "ZVN0VHJhaW5pbmcSMQoMcmVsYXRpdmVfbWFwGBYgASgLMhsuYXBvbGxvLnJl",
            "bGF0aXZlX21hcC5NYXBNc2cSUwoZYXV0b190dW5pbmdfdHJhaW5pbmdfZGF0",
            "YRgXIAEoCzIwLmFwb2xsby5wbGFubmluZ19pbnRlcm5hbC5BdXRvVHVuaW5n",
            "VHJhaW5pbmdEYXRhEhwKFGZyb250X2NsZWFyX2Rpc3RhbmNlGBggASgBEiYK",
            "BWNoYXJ0GBkgAygLMhcuYXBvbGxvLmRyZWFtdmlldy5DaGFydBI5CghzY2Vu",
            "YXJpbxgaIAEoCzInLmFwb2xsby5wbGFubmluZ19pbnRlcm5hbC5TY2VuYXJp",
            "b0RlYnVnEjwKCm9wZW5fc3BhY2UYGyABKAsyKC5hcG9sbG8ucGxhbm5pbmdf",
            "aW50ZXJuYWwuT3BlblNwYWNlRGVidWcSOQoIc21vb3RoZXIYHCABKAsyJy5h",
            "cG9sbG8ucGxhbm5pbmdfaW50ZXJuYWwuU21vb3RoZXJEZWJ1ZyJHCg5MYXR0",
            "aWNlU3RQaXhlbBIJCgFzGAEgASgFEgkKAXQYAiABKAUSCQoBchgDIAEoDRIJ",
            "CgFnGAQgASgNEgkKAWIYBSABKA0iyQEKEUxhdHRpY2VTdFRyYWluaW5nEjcK",
            "BXBpeGVsGAEgAygLMiguYXBvbGxvLnBsYW5uaW5nX2ludGVybmFsLkxhdHRp",
            "Y2VTdFBpeGVsEhEKCXRpbWVzdGFtcBgCIAEoARISCgphbm5vdGF0aW9uGAMg",
            "ASgJEhMKC251bV9zX2dyaWRzGAQgASgNEhMKC251bV90X2dyaWRzGAUgASgN",
            "EhQKDHNfcmVzb2x1dGlvbhgGIAEoARIUCgx0X3Jlc29sdXRpb24YByABKAEi",
            "KAoOQ29zdENvbXBvbmVudHMSFgoOY29zdF9jb21wb25lbnQYASADKAEiogEK",
            "FkF1dG9UdW5pbmdUcmFpbmluZ0RhdGESQwoRdGVhY2hlcl9jb21wb25lbnQY",
            "ASABKAsyKC5hcG9sbG8ucGxhbm5pbmdfaW50ZXJuYWwuQ29zdENvbXBvbmVu",
            "dHMSQwoRc3R1ZGVudF9jb21wb25lbnQYAiABKAsyKC5hcG9sbG8ucGxhbm5p",
            "bmdfaW50ZXJuYWwuQ29zdENvbXBvbmVudHMiTgoZQ2xvdWRSZWZlcmVuY2VM",
            "aW5lUmVxdWVzdBIxCgxsYW5lX3NlZ21lbnQYASADKAsyGy5hcG9sbG8ucm91",
            "dGluZy5MYW5lU2VnbWVudCJUCiBDbG91ZFJlZmVyZW5jZUxpbmVSb3V0aW5n",
            "UmVxdWVzdBIwCgdyb3V0aW5nGAEgASgLMh8uYXBvbGxvLnJvdXRpbmcuUm91",
            "dGluZ1Jlc3BvbnNlIkIKGkNsb3VkUmVmZXJlbmNlTGluZVJlc3BvbnNlEiQK",
            "B3NlZ21lbnQYASADKAsyEy5hcG9sbG8uY29tbW9uLlBhdGhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Canbus.ChassisReflection.Descriptor, global::Apollo.Common.PncPointReflection.Descriptor, global::Apollo.Localization.LocalizationReflection.Descriptor, global::Apollo.Dreamview.ChartReflection.Descriptor, global::Apollo.RelativeMap.NavigationReflection.Descriptor, global::Apollo.Routing.RoutingReflection.Descriptor, global::Apollo.Perception.TrafficLightDetectionReflection.Descriptor, global::Apollo.Planning.SlBoundaryReflection.Descriptor, global::Apollo.Planning.DecisionReflection.Descriptor, global::Apollo.Planning.PlanningConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.Debug), global::Apollo.PlanningInternal.Debug.Parser, new[]{ "PlanningData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.SpeedPlan), global::Apollo.PlanningInternal.SpeedPlan.Parser, new[]{ "Name", "SpeedPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.StGraphBoundaryDebug), global::Apollo.PlanningInternal.StGraphBoundaryDebug.Parser, new[]{ "Name", "Point", "Type" }, null, new[]{ typeof(global::Apollo.PlanningInternal.StGraphBoundaryDebug.Types.StBoundaryType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.SLFrameDebug), global::Apollo.PlanningInternal.SLFrameDebug.Parser, new[]{ "Name", "SampledS", "StaticObstacleLowerBound", "DynamicObstacleLowerBound", "StaticObstacleUpperBound", "DynamicObstacleUpperBound", "MapLowerBound", "MapUpperBound", "SlPath", "AggregatedBoundaryS", "AggregatedBoundaryLow", "AggregatedBoundaryHigh" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.STGraphDebug), global::Apollo.PlanningInternal.STGraphDebug.Parser, new[]{ "Name", "Boundary", "SpeedLimit", "SpeedProfile", "SpeedConstraint", "KernelCruiseRef", "KernelFollowRef" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphSpeedConstraint), global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphSpeedConstraint.Parser, new[]{ "T", "LowerBound", "UpperBound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelCuiseRef), global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelCuiseRef.Parser, new[]{ "T", "CruiseLineS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelFollowRef), global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelFollowRef.Parser, new[]{ "T", "FollowLineS" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.SignalLightDebug), global::Apollo.PlanningInternal.SignalLightDebug.Parser, new[]{ "AdcSpeed", "AdcFrontS", "Signal" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.SignalLightDebug.Types.SignalDebug), global::Apollo.PlanningInternal.SignalLightDebug.Types.SignalDebug.Parser, new[]{ "LightId", "Color", "LightStopS", "AdcStopDeacceleration", "IsStopWallCreated" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.DecisionTag), global::Apollo.PlanningInternal.DecisionTag.Parser, new[]{ "DeciderTag", "Decision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.ObstacleDebug), global::Apollo.PlanningInternal.ObstacleDebug.Parser, new[]{ "Id", "SlBoundary", "DecisionTag", "VerticesXCoords", "VerticesYCoords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.ReferenceLineDebug), global::Apollo.PlanningInternal.ReferenceLineDebug.Parser, new[]{ "Id", "Length", "Cost", "IsChangeLanePath", "IsDrivable", "IsProtected" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.SampleLayerDebug), global::Apollo.PlanningInternal.SampleLayerDebug.Parser, new[]{ "SlPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.DpPolyGraphDebug), global::Apollo.PlanningInternal.DpPolyGraphDebug.Parser, new[]{ "SampleLayer", "MinCostPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.ScenarioDebug), global::Apollo.PlanningInternal.ScenarioDebug.Parser, new[]{ "ScenarioType", "StageType", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.Trajectories), global::Apollo.PlanningInternal.Trajectories.Parser, new[]{ "Trajectory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.OpenSpaceDebug), global::Apollo.PlanningInternal.OpenSpaceDebug.Parser, new[]{ "Trajectories", "WarmStartTrajectory", "SmoothedTrajectory", "WarmStartDualLambda", "WarmStartDualMiu", "OptimizedDualLambda", "OptimizedDualMiu", "XyBoundary", "Obstacles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.SmootherDebug), global::Apollo.PlanningInternal.SmootherDebug.Parser, new[]{ "IsSmoothed", "Type", "Reason" }, null, new[]{ typeof(global::Apollo.PlanningInternal.SmootherDebug.Types.SmootherType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.PlanningData), global::Apollo.PlanningInternal.PlanningData.Parser, new[]{ "AdcPosition", "Chassis", "Routing", "InitPoint", "Path", "SpeedPlan", "StGraph", "SlFrame", "PredictionHeader", "SignalLight", "Obstacle", "ReferenceLine", "DpPolyGraph", "LatticeStImage", "RelativeMap", "AutoTuningTrainingData", "FrontClearDistance", "Chart", "Scenario", "OpenSpace", "Smoother" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.LatticeStPixel), global::Apollo.PlanningInternal.LatticeStPixel.Parser, new[]{ "S", "T", "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.LatticeStTraining), global::Apollo.PlanningInternal.LatticeStTraining.Parser, new[]{ "Pixel", "Timestamp", "Annotation", "NumSGrids", "NumTGrids", "SResolution", "TResolution" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.CostComponents), global::Apollo.PlanningInternal.CostComponents.Parser, new[]{ "CostComponent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.AutoTuningTrainingData), global::Apollo.PlanningInternal.AutoTuningTrainingData.Parser, new[]{ "TeacherComponent", "StudentComponent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.CloudReferenceLineRequest), global::Apollo.PlanningInternal.CloudReferenceLineRequest.Parser, new[]{ "LaneSegment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.CloudReferenceLineRoutingRequest), global::Apollo.PlanningInternal.CloudReferenceLineRoutingRequest.Parser, new[]{ "Routing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.PlanningInternal.CloudReferenceLineResponse), global::Apollo.PlanningInternal.CloudReferenceLineResponse.Parser, new[]{ "Segment" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Debug : pb::IMessage<Debug> {
    private static readonly pb::MessageParser<Debug> _parser = new pb::MessageParser<Debug>(() => new Debug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Debug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debug(Debug other) : this() {
      PlanningData = other.planningData_ != null ? other.PlanningData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debug Clone() {
      return new Debug(this);
    }

    /// <summary>Field number for the "planning_data" field.</summary>
    public const int PlanningDataFieldNumber = 2;
    private global::Apollo.PlanningInternal.PlanningData planningData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.PlanningData PlanningData {
      get { return planningData_; }
      set {
        planningData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Debug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Debug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlanningData, other.PlanningData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (planningData_ != null) hash ^= PlanningData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (planningData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlanningData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (planningData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlanningData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Debug other) {
      if (other == null) {
        return;
      }
      if (other.planningData_ != null) {
        if (planningData_ == null) {
          planningData_ = new global::Apollo.PlanningInternal.PlanningData();
        }
        PlanningData.MergeFrom(other.PlanningData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (planningData_ == null) {
              planningData_ = new global::Apollo.PlanningInternal.PlanningData();
            }
            input.ReadMessage(planningData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedPlan : pb::IMessage<SpeedPlan> {
    private static readonly pb::MessageParser<SpeedPlan> _parser = new pb::MessageParser<SpeedPlan>(() => new SpeedPlan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedPlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPlan(SpeedPlan other) : this() {
      name_ = other.name_;
      speedPoint_ = other.speedPoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPlan Clone() {
      return new SpeedPlan(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed_point" field.</summary>
    public const int SpeedPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.SpeedPoint> _repeated_speedPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.SpeedPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.SpeedPoint> speedPoint_ = new pbc::RepeatedField<global::Apollo.Common.SpeedPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.SpeedPoint> SpeedPoint {
      get { return speedPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedPlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedPlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!speedPoint_.Equals(other.speedPoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= speedPoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      speedPoint_.WriteTo(output, _repeated_speedPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += speedPoint_.CalculateSize(_repeated_speedPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedPlan other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      speedPoint_.Add(other.speedPoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            speedPoint_.AddEntriesFrom(input, _repeated_speedPoint_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StGraphBoundaryDebug : pb::IMessage<StGraphBoundaryDebug> {
    private static readonly pb::MessageParser<StGraphBoundaryDebug> _parser = new pb::MessageParser<StGraphBoundaryDebug>(() => new StGraphBoundaryDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StGraphBoundaryDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StGraphBoundaryDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StGraphBoundaryDebug(StGraphBoundaryDebug other) : this() {
      name_ = other.name_;
      point_ = other.point_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StGraphBoundaryDebug Clone() {
      return new StGraphBoundaryDebug(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.SpeedPoint> _repeated_point_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.SpeedPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.SpeedPoint> point_ = new pbc::RepeatedField<global::Apollo.Common.SpeedPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.SpeedPoint> Point {
      get { return point_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Apollo.PlanningInternal.StGraphBoundaryDebug.Types.StBoundaryType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.StGraphBoundaryDebug.Types.StBoundaryType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StGraphBoundaryDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StGraphBoundaryDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!point_.Equals(other.point_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= point_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      point_.WriteTo(output, _repeated_point_codec);
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += point_.CalculateSize(_repeated_point_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StGraphBoundaryDebug other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      point_.Add(other.point_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
          case 24: {
            type_ = (global::Apollo.PlanningInternal.StGraphBoundaryDebug.Types.StBoundaryType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StGraphBoundaryDebug message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StBoundaryType {
        [pbr::OriginalName("STBOUNDARYTYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("ST_BOUNDARY_TYPE_UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("ST_BOUNDARY_TYPE_STOP")] Stop = 2,
        [pbr::OriginalName("ST_BOUNDARY_TYPE_FOLLOW")] Follow = 3,
        [pbr::OriginalName("ST_BOUNDARY_TYPE_YIELD")] Yield = 4,
        [pbr::OriginalName("ST_BOUNDARY_TYPE_OVERTAKE")] Overtake = 5,
        [pbr::OriginalName("ST_BOUNDARY_TYPE_KEEP_CLEAR")] KeepClear = 6,
      }

    }
    #endregion

  }

  public sealed partial class SLFrameDebug : pb::IMessage<SLFrameDebug> {
    private static readonly pb::MessageParser<SLFrameDebug> _parser = new pb::MessageParser<SLFrameDebug>(() => new SLFrameDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SLFrameDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLFrameDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLFrameDebug(SLFrameDebug other) : this() {
      name_ = other.name_;
      sampledS_ = other.sampledS_.Clone();
      staticObstacleLowerBound_ = other.staticObstacleLowerBound_.Clone();
      dynamicObstacleLowerBound_ = other.dynamicObstacleLowerBound_.Clone();
      staticObstacleUpperBound_ = other.staticObstacleUpperBound_.Clone();
      dynamicObstacleUpperBound_ = other.dynamicObstacleUpperBound_.Clone();
      mapLowerBound_ = other.mapLowerBound_.Clone();
      mapUpperBound_ = other.mapUpperBound_.Clone();
      slPath_ = other.slPath_.Clone();
      aggregatedBoundaryS_ = other.aggregatedBoundaryS_.Clone();
      aggregatedBoundaryLow_ = other.aggregatedBoundaryLow_.Clone();
      aggregatedBoundaryHigh_ = other.aggregatedBoundaryHigh_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLFrameDebug Clone() {
      return new SLFrameDebug(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sampled_s" field.</summary>
    public const int SampledSFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_sampledS_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> sampledS_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> SampledS {
      get { return sampledS_; }
    }

    /// <summary>Field number for the "static_obstacle_lower_bound" field.</summary>
    public const int StaticObstacleLowerBoundFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_staticObstacleLowerBound_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> staticObstacleLowerBound_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> StaticObstacleLowerBound {
      get { return staticObstacleLowerBound_; }
    }

    /// <summary>Field number for the "dynamic_obstacle_lower_bound" field.</summary>
    public const int DynamicObstacleLowerBoundFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_dynamicObstacleLowerBound_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> dynamicObstacleLowerBound_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> DynamicObstacleLowerBound {
      get { return dynamicObstacleLowerBound_; }
    }

    /// <summary>Field number for the "static_obstacle_upper_bound" field.</summary>
    public const int StaticObstacleUpperBoundFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_staticObstacleUpperBound_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> staticObstacleUpperBound_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> StaticObstacleUpperBound {
      get { return staticObstacleUpperBound_; }
    }

    /// <summary>Field number for the "dynamic_obstacle_upper_bound" field.</summary>
    public const int DynamicObstacleUpperBoundFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_dynamicObstacleUpperBound_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> dynamicObstacleUpperBound_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> DynamicObstacleUpperBound {
      get { return dynamicObstacleUpperBound_; }
    }

    /// <summary>Field number for the "map_lower_bound" field.</summary>
    public const int MapLowerBoundFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_mapLowerBound_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> mapLowerBound_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> MapLowerBound {
      get { return mapLowerBound_; }
    }

    /// <summary>Field number for the "map_upper_bound" field.</summary>
    public const int MapUpperBoundFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_mapUpperBound_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> mapUpperBound_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> MapUpperBound {
      get { return mapUpperBound_; }
    }

    /// <summary>Field number for the "sl_path" field.</summary>
    public const int SlPathFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Apollo.Common.SLPoint> _repeated_slPath_codec
        = pb::FieldCodec.ForMessage(74, global::Apollo.Common.SLPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.SLPoint> slPath_ = new pbc::RepeatedField<global::Apollo.Common.SLPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.SLPoint> SlPath {
      get { return slPath_; }
    }

    /// <summary>Field number for the "aggregated_boundary_s" field.</summary>
    public const int AggregatedBoundarySFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_aggregatedBoundaryS_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> aggregatedBoundaryS_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AggregatedBoundaryS {
      get { return aggregatedBoundaryS_; }
    }

    /// <summary>Field number for the "aggregated_boundary_low" field.</summary>
    public const int AggregatedBoundaryLowFieldNumber = 11;
    private static readonly pb::FieldCodec<double> _repeated_aggregatedBoundaryLow_codec
        = pb::FieldCodec.ForDouble(90);
    private readonly pbc::RepeatedField<double> aggregatedBoundaryLow_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AggregatedBoundaryLow {
      get { return aggregatedBoundaryLow_; }
    }

    /// <summary>Field number for the "aggregated_boundary_high" field.</summary>
    public const int AggregatedBoundaryHighFieldNumber = 12;
    private static readonly pb::FieldCodec<double> _repeated_aggregatedBoundaryHigh_codec
        = pb::FieldCodec.ForDouble(98);
    private readonly pbc::RepeatedField<double> aggregatedBoundaryHigh_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AggregatedBoundaryHigh {
      get { return aggregatedBoundaryHigh_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SLFrameDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SLFrameDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!sampledS_.Equals(other.sampledS_)) return false;
      if(!staticObstacleLowerBound_.Equals(other.staticObstacleLowerBound_)) return false;
      if(!dynamicObstacleLowerBound_.Equals(other.dynamicObstacleLowerBound_)) return false;
      if(!staticObstacleUpperBound_.Equals(other.staticObstacleUpperBound_)) return false;
      if(!dynamicObstacleUpperBound_.Equals(other.dynamicObstacleUpperBound_)) return false;
      if(!mapLowerBound_.Equals(other.mapLowerBound_)) return false;
      if(!mapUpperBound_.Equals(other.mapUpperBound_)) return false;
      if(!slPath_.Equals(other.slPath_)) return false;
      if(!aggregatedBoundaryS_.Equals(other.aggregatedBoundaryS_)) return false;
      if(!aggregatedBoundaryLow_.Equals(other.aggregatedBoundaryLow_)) return false;
      if(!aggregatedBoundaryHigh_.Equals(other.aggregatedBoundaryHigh_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= sampledS_.GetHashCode();
      hash ^= staticObstacleLowerBound_.GetHashCode();
      hash ^= dynamicObstacleLowerBound_.GetHashCode();
      hash ^= staticObstacleUpperBound_.GetHashCode();
      hash ^= dynamicObstacleUpperBound_.GetHashCode();
      hash ^= mapLowerBound_.GetHashCode();
      hash ^= mapUpperBound_.GetHashCode();
      hash ^= slPath_.GetHashCode();
      hash ^= aggregatedBoundaryS_.GetHashCode();
      hash ^= aggregatedBoundaryLow_.GetHashCode();
      hash ^= aggregatedBoundaryHigh_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      sampledS_.WriteTo(output, _repeated_sampledS_codec);
      staticObstacleLowerBound_.WriteTo(output, _repeated_staticObstacleLowerBound_codec);
      dynamicObstacleLowerBound_.WriteTo(output, _repeated_dynamicObstacleLowerBound_codec);
      staticObstacleUpperBound_.WriteTo(output, _repeated_staticObstacleUpperBound_codec);
      dynamicObstacleUpperBound_.WriteTo(output, _repeated_dynamicObstacleUpperBound_codec);
      mapLowerBound_.WriteTo(output, _repeated_mapLowerBound_codec);
      mapUpperBound_.WriteTo(output, _repeated_mapUpperBound_codec);
      slPath_.WriteTo(output, _repeated_slPath_codec);
      aggregatedBoundaryS_.WriteTo(output, _repeated_aggregatedBoundaryS_codec);
      aggregatedBoundaryLow_.WriteTo(output, _repeated_aggregatedBoundaryLow_codec);
      aggregatedBoundaryHigh_.WriteTo(output, _repeated_aggregatedBoundaryHigh_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += sampledS_.CalculateSize(_repeated_sampledS_codec);
      size += staticObstacleLowerBound_.CalculateSize(_repeated_staticObstacleLowerBound_codec);
      size += dynamicObstacleLowerBound_.CalculateSize(_repeated_dynamicObstacleLowerBound_codec);
      size += staticObstacleUpperBound_.CalculateSize(_repeated_staticObstacleUpperBound_codec);
      size += dynamicObstacleUpperBound_.CalculateSize(_repeated_dynamicObstacleUpperBound_codec);
      size += mapLowerBound_.CalculateSize(_repeated_mapLowerBound_codec);
      size += mapUpperBound_.CalculateSize(_repeated_mapUpperBound_codec);
      size += slPath_.CalculateSize(_repeated_slPath_codec);
      size += aggregatedBoundaryS_.CalculateSize(_repeated_aggregatedBoundaryS_codec);
      size += aggregatedBoundaryLow_.CalculateSize(_repeated_aggregatedBoundaryLow_codec);
      size += aggregatedBoundaryHigh_.CalculateSize(_repeated_aggregatedBoundaryHigh_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SLFrameDebug other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      sampledS_.Add(other.sampledS_);
      staticObstacleLowerBound_.Add(other.staticObstacleLowerBound_);
      dynamicObstacleLowerBound_.Add(other.dynamicObstacleLowerBound_);
      staticObstacleUpperBound_.Add(other.staticObstacleUpperBound_);
      dynamicObstacleUpperBound_.Add(other.dynamicObstacleUpperBound_);
      mapLowerBound_.Add(other.mapLowerBound_);
      mapUpperBound_.Add(other.mapUpperBound_);
      slPath_.Add(other.slPath_);
      aggregatedBoundaryS_.Add(other.aggregatedBoundaryS_);
      aggregatedBoundaryLow_.Add(other.aggregatedBoundaryLow_);
      aggregatedBoundaryHigh_.Add(other.aggregatedBoundaryHigh_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 17: {
            sampledS_.AddEntriesFrom(input, _repeated_sampledS_codec);
            break;
          }
          case 26:
          case 25: {
            staticObstacleLowerBound_.AddEntriesFrom(input, _repeated_staticObstacleLowerBound_codec);
            break;
          }
          case 34:
          case 33: {
            dynamicObstacleLowerBound_.AddEntriesFrom(input, _repeated_dynamicObstacleLowerBound_codec);
            break;
          }
          case 42:
          case 41: {
            staticObstacleUpperBound_.AddEntriesFrom(input, _repeated_staticObstacleUpperBound_codec);
            break;
          }
          case 50:
          case 49: {
            dynamicObstacleUpperBound_.AddEntriesFrom(input, _repeated_dynamicObstacleUpperBound_codec);
            break;
          }
          case 58:
          case 57: {
            mapLowerBound_.AddEntriesFrom(input, _repeated_mapLowerBound_codec);
            break;
          }
          case 66:
          case 65: {
            mapUpperBound_.AddEntriesFrom(input, _repeated_mapUpperBound_codec);
            break;
          }
          case 74: {
            slPath_.AddEntriesFrom(input, _repeated_slPath_codec);
            break;
          }
          case 82:
          case 81: {
            aggregatedBoundaryS_.AddEntriesFrom(input, _repeated_aggregatedBoundaryS_codec);
            break;
          }
          case 90:
          case 89: {
            aggregatedBoundaryLow_.AddEntriesFrom(input, _repeated_aggregatedBoundaryLow_codec);
            break;
          }
          case 98:
          case 97: {
            aggregatedBoundaryHigh_.AddEntriesFrom(input, _repeated_aggregatedBoundaryHigh_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class STGraphDebug : pb::IMessage<STGraphDebug> {
    private static readonly pb::MessageParser<STGraphDebug> _parser = new pb::MessageParser<STGraphDebug>(() => new STGraphDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STGraphDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STGraphDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STGraphDebug(STGraphDebug other) : this() {
      name_ = other.name_;
      boundary_ = other.boundary_.Clone();
      speedLimit_ = other.speedLimit_.Clone();
      speedProfile_ = other.speedProfile_.Clone();
      SpeedConstraint = other.speedConstraint_ != null ? other.SpeedConstraint.Clone() : null;
      KernelCruiseRef = other.kernelCruiseRef_ != null ? other.KernelCruiseRef.Clone() : null;
      KernelFollowRef = other.kernelFollowRef_ != null ? other.KernelFollowRef.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STGraphDebug Clone() {
      return new STGraphDebug(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boundary" field.</summary>
    public const int BoundaryFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.StGraphBoundaryDebug> _repeated_boundary_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.PlanningInternal.StGraphBoundaryDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.StGraphBoundaryDebug> boundary_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.StGraphBoundaryDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.StGraphBoundaryDebug> Boundary {
      get { return boundary_; }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Common.SpeedPoint> _repeated_speedLimit_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Common.SpeedPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.SpeedPoint> speedLimit_ = new pbc::RepeatedField<global::Apollo.Common.SpeedPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.SpeedPoint> SpeedLimit {
      get { return speedLimit_; }
    }

    /// <summary>Field number for the "speed_profile" field.</summary>
    public const int SpeedProfileFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Common.SpeedPoint> _repeated_speedProfile_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Common.SpeedPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.SpeedPoint> speedProfile_ = new pbc::RepeatedField<global::Apollo.Common.SpeedPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.SpeedPoint> SpeedProfile {
      get { return speedProfile_; }
    }

    /// <summary>Field number for the "speed_constraint" field.</summary>
    public const int SpeedConstraintFieldNumber = 5;
    private global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphSpeedConstraint speedConstraint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphSpeedConstraint SpeedConstraint {
      get { return speedConstraint_; }
      set {
        speedConstraint_ = value;
      }
    }

    /// <summary>Field number for the "kernel_cruise_ref" field.</summary>
    public const int KernelCruiseRefFieldNumber = 6;
    private global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelCuiseRef kernelCruiseRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelCuiseRef KernelCruiseRef {
      get { return kernelCruiseRef_; }
      set {
        kernelCruiseRef_ = value;
      }
    }

    /// <summary>Field number for the "kernel_follow_ref" field.</summary>
    public const int KernelFollowRefFieldNumber = 7;
    private global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelFollowRef kernelFollowRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelFollowRef KernelFollowRef {
      get { return kernelFollowRef_; }
      set {
        kernelFollowRef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STGraphDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STGraphDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!boundary_.Equals(other.boundary_)) return false;
      if(!speedLimit_.Equals(other.speedLimit_)) return false;
      if(!speedProfile_.Equals(other.speedProfile_)) return false;
      if (!object.Equals(SpeedConstraint, other.SpeedConstraint)) return false;
      if (!object.Equals(KernelCruiseRef, other.KernelCruiseRef)) return false;
      if (!object.Equals(KernelFollowRef, other.KernelFollowRef)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= boundary_.GetHashCode();
      hash ^= speedLimit_.GetHashCode();
      hash ^= speedProfile_.GetHashCode();
      if (speedConstraint_ != null) hash ^= SpeedConstraint.GetHashCode();
      if (kernelCruiseRef_ != null) hash ^= KernelCruiseRef.GetHashCode();
      if (kernelFollowRef_ != null) hash ^= KernelFollowRef.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      boundary_.WriteTo(output, _repeated_boundary_codec);
      speedLimit_.WriteTo(output, _repeated_speedLimit_codec);
      speedProfile_.WriteTo(output, _repeated_speedProfile_codec);
      if (speedConstraint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SpeedConstraint);
      }
      if (kernelCruiseRef_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(KernelCruiseRef);
      }
      if (kernelFollowRef_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(KernelFollowRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += boundary_.CalculateSize(_repeated_boundary_codec);
      size += speedLimit_.CalculateSize(_repeated_speedLimit_codec);
      size += speedProfile_.CalculateSize(_repeated_speedProfile_codec);
      if (speedConstraint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedConstraint);
      }
      if (kernelCruiseRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KernelCruiseRef);
      }
      if (kernelFollowRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KernelFollowRef);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STGraphDebug other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      boundary_.Add(other.boundary_);
      speedLimit_.Add(other.speedLimit_);
      speedProfile_.Add(other.speedProfile_);
      if (other.speedConstraint_ != null) {
        if (speedConstraint_ == null) {
          speedConstraint_ = new global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphSpeedConstraint();
        }
        SpeedConstraint.MergeFrom(other.SpeedConstraint);
      }
      if (other.kernelCruiseRef_ != null) {
        if (kernelCruiseRef_ == null) {
          kernelCruiseRef_ = new global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelCuiseRef();
        }
        KernelCruiseRef.MergeFrom(other.KernelCruiseRef);
      }
      if (other.kernelFollowRef_ != null) {
        if (kernelFollowRef_ == null) {
          kernelFollowRef_ = new global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelFollowRef();
        }
        KernelFollowRef.MergeFrom(other.KernelFollowRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            boundary_.AddEntriesFrom(input, _repeated_boundary_codec);
            break;
          }
          case 26: {
            speedLimit_.AddEntriesFrom(input, _repeated_speedLimit_codec);
            break;
          }
          case 34: {
            speedProfile_.AddEntriesFrom(input, _repeated_speedProfile_codec);
            break;
          }
          case 42: {
            if (speedConstraint_ == null) {
              speedConstraint_ = new global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphSpeedConstraint();
            }
            input.ReadMessage(speedConstraint_);
            break;
          }
          case 50: {
            if (kernelCruiseRef_ == null) {
              kernelCruiseRef_ = new global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelCuiseRef();
            }
            input.ReadMessage(kernelCruiseRef_);
            break;
          }
          case 58: {
            if (kernelFollowRef_ == null) {
              kernelFollowRef_ = new global::Apollo.PlanningInternal.STGraphDebug.Types.STGraphKernelFollowRef();
            }
            input.ReadMessage(kernelFollowRef_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the STGraphDebug message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class STGraphSpeedConstraint : pb::IMessage<STGraphSpeedConstraint> {
        private static readonly pb::MessageParser<STGraphSpeedConstraint> _parser = new pb::MessageParser<STGraphSpeedConstraint>(() => new STGraphSpeedConstraint());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<STGraphSpeedConstraint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.PlanningInternal.STGraphDebug.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphSpeedConstraint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphSpeedConstraint(STGraphSpeedConstraint other) : this() {
          t_ = other.t_.Clone();
          lowerBound_ = other.lowerBound_.Clone();
          upperBound_ = other.upperBound_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphSpeedConstraint Clone() {
          return new STGraphSpeedConstraint(this);
        }

        /// <summary>Field number for the "t" field.</summary>
        public const int TFieldNumber = 1;
        private static readonly pb::FieldCodec<double> _repeated_t_codec
            = pb::FieldCodec.ForDouble(10);
        private readonly pbc::RepeatedField<double> t_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> T {
          get { return t_; }
        }

        /// <summary>Field number for the "lower_bound" field.</summary>
        public const int LowerBoundFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_lowerBound_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> lowerBound_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> LowerBound {
          get { return lowerBound_; }
        }

        /// <summary>Field number for the "upper_bound" field.</summary>
        public const int UpperBoundFieldNumber = 3;
        private static readonly pb::FieldCodec<double> _repeated_upperBound_codec
            = pb::FieldCodec.ForDouble(26);
        private readonly pbc::RepeatedField<double> upperBound_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> UpperBound {
          get { return upperBound_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as STGraphSpeedConstraint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(STGraphSpeedConstraint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!t_.Equals(other.t_)) return false;
          if(!lowerBound_.Equals(other.lowerBound_)) return false;
          if(!upperBound_.Equals(other.upperBound_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= t_.GetHashCode();
          hash ^= lowerBound_.GetHashCode();
          hash ^= upperBound_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          t_.WriteTo(output, _repeated_t_codec);
          lowerBound_.WriteTo(output, _repeated_lowerBound_codec);
          upperBound_.WriteTo(output, _repeated_upperBound_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += t_.CalculateSize(_repeated_t_codec);
          size += lowerBound_.CalculateSize(_repeated_lowerBound_codec);
          size += upperBound_.CalculateSize(_repeated_upperBound_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(STGraphSpeedConstraint other) {
          if (other == null) {
            return;
          }
          t_.Add(other.t_);
          lowerBound_.Add(other.lowerBound_);
          upperBound_.Add(other.upperBound_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 9: {
                t_.AddEntriesFrom(input, _repeated_t_codec);
                break;
              }
              case 18:
              case 17: {
                lowerBound_.AddEntriesFrom(input, _repeated_lowerBound_codec);
                break;
              }
              case 26:
              case 25: {
                upperBound_.AddEntriesFrom(input, _repeated_upperBound_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class STGraphKernelCuiseRef : pb::IMessage<STGraphKernelCuiseRef> {
        private static readonly pb::MessageParser<STGraphKernelCuiseRef> _parser = new pb::MessageParser<STGraphKernelCuiseRef>(() => new STGraphKernelCuiseRef());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<STGraphKernelCuiseRef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.PlanningInternal.STGraphDebug.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphKernelCuiseRef() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphKernelCuiseRef(STGraphKernelCuiseRef other) : this() {
          t_ = other.t_.Clone();
          cruiseLineS_ = other.cruiseLineS_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphKernelCuiseRef Clone() {
          return new STGraphKernelCuiseRef(this);
        }

        /// <summary>Field number for the "t" field.</summary>
        public const int TFieldNumber = 1;
        private static readonly pb::FieldCodec<double> _repeated_t_codec
            = pb::FieldCodec.ForDouble(10);
        private readonly pbc::RepeatedField<double> t_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> T {
          get { return t_; }
        }

        /// <summary>Field number for the "cruise_line_s" field.</summary>
        public const int CruiseLineSFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_cruiseLineS_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> cruiseLineS_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> CruiseLineS {
          get { return cruiseLineS_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as STGraphKernelCuiseRef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(STGraphKernelCuiseRef other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!t_.Equals(other.t_)) return false;
          if(!cruiseLineS_.Equals(other.cruiseLineS_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= t_.GetHashCode();
          hash ^= cruiseLineS_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          t_.WriteTo(output, _repeated_t_codec);
          cruiseLineS_.WriteTo(output, _repeated_cruiseLineS_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += t_.CalculateSize(_repeated_t_codec);
          size += cruiseLineS_.CalculateSize(_repeated_cruiseLineS_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(STGraphKernelCuiseRef other) {
          if (other == null) {
            return;
          }
          t_.Add(other.t_);
          cruiseLineS_.Add(other.cruiseLineS_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 9: {
                t_.AddEntriesFrom(input, _repeated_t_codec);
                break;
              }
              case 18:
              case 17: {
                cruiseLineS_.AddEntriesFrom(input, _repeated_cruiseLineS_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class STGraphKernelFollowRef : pb::IMessage<STGraphKernelFollowRef> {
        private static readonly pb::MessageParser<STGraphKernelFollowRef> _parser = new pb::MessageParser<STGraphKernelFollowRef>(() => new STGraphKernelFollowRef());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<STGraphKernelFollowRef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.PlanningInternal.STGraphDebug.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphKernelFollowRef() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphKernelFollowRef(STGraphKernelFollowRef other) : this() {
          t_ = other.t_.Clone();
          followLineS_ = other.followLineS_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STGraphKernelFollowRef Clone() {
          return new STGraphKernelFollowRef(this);
        }

        /// <summary>Field number for the "t" field.</summary>
        public const int TFieldNumber = 1;
        private static readonly pb::FieldCodec<double> _repeated_t_codec
            = pb::FieldCodec.ForDouble(10);
        private readonly pbc::RepeatedField<double> t_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> T {
          get { return t_; }
        }

        /// <summary>Field number for the "follow_line_s" field.</summary>
        public const int FollowLineSFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_followLineS_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> followLineS_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> FollowLineS {
          get { return followLineS_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as STGraphKernelFollowRef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(STGraphKernelFollowRef other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!t_.Equals(other.t_)) return false;
          if(!followLineS_.Equals(other.followLineS_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= t_.GetHashCode();
          hash ^= followLineS_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          t_.WriteTo(output, _repeated_t_codec);
          followLineS_.WriteTo(output, _repeated_followLineS_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += t_.CalculateSize(_repeated_t_codec);
          size += followLineS_.CalculateSize(_repeated_followLineS_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(STGraphKernelFollowRef other) {
          if (other == null) {
            return;
          }
          t_.Add(other.t_);
          followLineS_.Add(other.followLineS_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 9: {
                t_.AddEntriesFrom(input, _repeated_t_codec);
                break;
              }
              case 18:
              case 17: {
                followLineS_.AddEntriesFrom(input, _repeated_followLineS_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SignalLightDebug : pb::IMessage<SignalLightDebug> {
    private static readonly pb::MessageParser<SignalLightDebug> _parser = new pb::MessageParser<SignalLightDebug>(() => new SignalLightDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignalLightDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalLightDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalLightDebug(SignalLightDebug other) : this() {
      adcSpeed_ = other.adcSpeed_;
      adcFrontS_ = other.adcFrontS_;
      signal_ = other.signal_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalLightDebug Clone() {
      return new SignalLightDebug(this);
    }

    /// <summary>Field number for the "adc_speed" field.</summary>
    public const int AdcSpeedFieldNumber = 1;
    private double adcSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcSpeed {
      get { return adcSpeed_; }
      set {
        adcSpeed_ = value;
      }
    }

    /// <summary>Field number for the "adc_front_s" field.</summary>
    public const int AdcFrontSFieldNumber = 2;
    private double adcFrontS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcFrontS {
      get { return adcFrontS_; }
      set {
        adcFrontS_ = value;
      }
    }

    /// <summary>Field number for the "signal" field.</summary>
    public const int SignalFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.SignalLightDebug.Types.SignalDebug> _repeated_signal_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.PlanningInternal.SignalLightDebug.Types.SignalDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.SignalLightDebug.Types.SignalDebug> signal_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.SignalLightDebug.Types.SignalDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.SignalLightDebug.Types.SignalDebug> Signal {
      get { return signal_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignalLightDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignalLightDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdcSpeed != other.AdcSpeed) return false;
      if (AdcFrontS != other.AdcFrontS) return false;
      if(!signal_.Equals(other.signal_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdcSpeed != 0D) hash ^= AdcSpeed.GetHashCode();
      if (AdcFrontS != 0D) hash ^= AdcFrontS.GetHashCode();
      hash ^= signal_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdcSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(AdcSpeed);
      }
      if (AdcFrontS != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AdcFrontS);
      }
      signal_.WriteTo(output, _repeated_signal_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdcSpeed != 0D) {
        size += 1 + 8;
      }
      if (AdcFrontS != 0D) {
        size += 1 + 8;
      }
      size += signal_.CalculateSize(_repeated_signal_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignalLightDebug other) {
      if (other == null) {
        return;
      }
      if (other.AdcSpeed != 0D) {
        AdcSpeed = other.AdcSpeed;
      }
      if (other.AdcFrontS != 0D) {
        AdcFrontS = other.AdcFrontS;
      }
      signal_.Add(other.signal_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            AdcSpeed = input.ReadDouble();
            break;
          }
          case 17: {
            AdcFrontS = input.ReadDouble();
            break;
          }
          case 26: {
            signal_.AddEntriesFrom(input, _repeated_signal_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SignalLightDebug message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SignalDebug : pb::IMessage<SignalDebug> {
        private static readonly pb::MessageParser<SignalDebug> _parser = new pb::MessageParser<SignalDebug>(() => new SignalDebug());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SignalDebug> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.PlanningInternal.SignalLightDebug.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignalDebug() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignalDebug(SignalDebug other) : this() {
          lightId_ = other.lightId_;
          color_ = other.color_;
          lightStopS_ = other.lightStopS_;
          adcStopDeacceleration_ = other.adcStopDeacceleration_;
          isStopWallCreated_ = other.isStopWallCreated_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignalDebug Clone() {
          return new SignalDebug(this);
        }

        /// <summary>Field number for the "light_id" field.</summary>
        public const int LightIdFieldNumber = 1;
        private string lightId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LightId {
          get { return lightId_; }
          set {
            lightId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 2;
        private global::Apollo.Perception.TrafficLight.Types.Color color_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Apollo.Perception.TrafficLight.Types.Color Color {
          get { return color_; }
          set {
            color_ = value;
          }
        }

        /// <summary>Field number for the "light_stop_s" field.</summary>
        public const int LightStopSFieldNumber = 3;
        private double lightStopS_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LightStopS {
          get { return lightStopS_; }
          set {
            lightStopS_ = value;
          }
        }

        /// <summary>Field number for the "adc_stop_deacceleration" field.</summary>
        public const int AdcStopDeaccelerationFieldNumber = 4;
        private double adcStopDeacceleration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AdcStopDeacceleration {
          get { return adcStopDeacceleration_; }
          set {
            adcStopDeacceleration_ = value;
          }
        }

        /// <summary>Field number for the "is_stop_wall_created" field.</summary>
        public const int IsStopWallCreatedFieldNumber = 5;
        private bool isStopWallCreated_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsStopWallCreated {
          get { return isStopWallCreated_; }
          set {
            isStopWallCreated_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SignalDebug);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SignalDebug other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LightId != other.LightId) return false;
          if (Color != other.Color) return false;
          if (LightStopS != other.LightStopS) return false;
          if (AdcStopDeacceleration != other.AdcStopDeacceleration) return false;
          if (IsStopWallCreated != other.IsStopWallCreated) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LightId.Length != 0) hash ^= LightId.GetHashCode();
          if (Color != 0) hash ^= Color.GetHashCode();
          if (LightStopS != 0D) hash ^= LightStopS.GetHashCode();
          if (AdcStopDeacceleration != 0D) hash ^= AdcStopDeacceleration.GetHashCode();
          if (IsStopWallCreated != false) hash ^= IsStopWallCreated.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LightId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LightId);
          }
          if (Color != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Color);
          }
          if (LightStopS != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(LightStopS);
          }
          if (AdcStopDeacceleration != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(AdcStopDeacceleration);
          }
          if (IsStopWallCreated != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsStopWallCreated);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LightId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LightId);
          }
          if (Color != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
          }
          if (LightStopS != 0D) {
            size += 1 + 8;
          }
          if (AdcStopDeacceleration != 0D) {
            size += 1 + 8;
          }
          if (IsStopWallCreated != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SignalDebug other) {
          if (other == null) {
            return;
          }
          if (other.LightId.Length != 0) {
            LightId = other.LightId;
          }
          if (other.Color != 0) {
            Color = other.Color;
          }
          if (other.LightStopS != 0D) {
            LightStopS = other.LightStopS;
          }
          if (other.AdcStopDeacceleration != 0D) {
            AdcStopDeacceleration = other.AdcStopDeacceleration;
          }
          if (other.IsStopWallCreated != false) {
            IsStopWallCreated = other.IsStopWallCreated;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                LightId = input.ReadString();
                break;
              }
              case 16: {
                color_ = (global::Apollo.Perception.TrafficLight.Types.Color) input.ReadEnum();
                break;
              }
              case 25: {
                LightStopS = input.ReadDouble();
                break;
              }
              case 33: {
                AdcStopDeacceleration = input.ReadDouble();
                break;
              }
              case 40: {
                IsStopWallCreated = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DecisionTag : pb::IMessage<DecisionTag> {
    private static readonly pb::MessageParser<DecisionTag> _parser = new pb::MessageParser<DecisionTag>(() => new DecisionTag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecisionTag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecisionTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecisionTag(DecisionTag other) : this() {
      deciderTag_ = other.deciderTag_;
      Decision = other.decision_ != null ? other.Decision.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecisionTag Clone() {
      return new DecisionTag(this);
    }

    /// <summary>Field number for the "decider_tag" field.</summary>
    public const int DeciderTagFieldNumber = 1;
    private string deciderTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeciderTag {
      get { return deciderTag_; }
      set {
        deciderTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decision" field.</summary>
    public const int DecisionFieldNumber = 2;
    private global::Apollo.Planning.ObjectDecisionType decision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectDecisionType Decision {
      get { return decision_; }
      set {
        decision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecisionTag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecisionTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeciderTag != other.DeciderTag) return false;
      if (!object.Equals(Decision, other.Decision)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeciderTag.Length != 0) hash ^= DeciderTag.GetHashCode();
      if (decision_ != null) hash ^= Decision.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeciderTag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeciderTag);
      }
      if (decision_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Decision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeciderTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeciderTag);
      }
      if (decision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Decision);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecisionTag other) {
      if (other == null) {
        return;
      }
      if (other.DeciderTag.Length != 0) {
        DeciderTag = other.DeciderTag;
      }
      if (other.decision_ != null) {
        if (decision_ == null) {
          decision_ = new global::Apollo.Planning.ObjectDecisionType();
        }
        Decision.MergeFrom(other.Decision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeciderTag = input.ReadString();
            break;
          }
          case 18: {
            if (decision_ == null) {
              decision_ = new global::Apollo.Planning.ObjectDecisionType();
            }
            input.ReadMessage(decision_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObstacleDebug : pb::IMessage<ObstacleDebug> {
    private static readonly pb::MessageParser<ObstacleDebug> _parser = new pb::MessageParser<ObstacleDebug>(() => new ObstacleDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObstacleDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleDebug(ObstacleDebug other) : this() {
      id_ = other.id_;
      SlBoundary = other.slBoundary_ != null ? other.SlBoundary.Clone() : null;
      decisionTag_ = other.decisionTag_.Clone();
      verticesXCoords_ = other.verticesXCoords_.Clone();
      verticesYCoords_ = other.verticesYCoords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleDebug Clone() {
      return new ObstacleDebug(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sl_boundary" field.</summary>
    public const int SlBoundaryFieldNumber = 2;
    private global::Apollo.Planning.SLBoundary slBoundary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.SLBoundary SlBoundary {
      get { return slBoundary_; }
      set {
        slBoundary_ = value;
      }
    }

    /// <summary>Field number for the "decision_tag" field.</summary>
    public const int DecisionTagFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.DecisionTag> _repeated_decisionTag_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.PlanningInternal.DecisionTag.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.DecisionTag> decisionTag_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.DecisionTag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.DecisionTag> DecisionTag {
      get { return decisionTag_; }
    }

    /// <summary>Field number for the "vertices_x_coords" field.</summary>
    public const int VerticesXCoordsFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_verticesXCoords_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> verticesXCoords_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> VerticesXCoords {
      get { return verticesXCoords_; }
    }

    /// <summary>Field number for the "vertices_y_coords" field.</summary>
    public const int VerticesYCoordsFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_verticesYCoords_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> verticesYCoords_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> VerticesYCoords {
      get { return verticesYCoords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObstacleDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObstacleDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(SlBoundary, other.SlBoundary)) return false;
      if(!decisionTag_.Equals(other.decisionTag_)) return false;
      if(!verticesXCoords_.Equals(other.verticesXCoords_)) return false;
      if(!verticesYCoords_.Equals(other.verticesYCoords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (slBoundary_ != null) hash ^= SlBoundary.GetHashCode();
      hash ^= decisionTag_.GetHashCode();
      hash ^= verticesXCoords_.GetHashCode();
      hash ^= verticesYCoords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (slBoundary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SlBoundary);
      }
      decisionTag_.WriteTo(output, _repeated_decisionTag_codec);
      verticesXCoords_.WriteTo(output, _repeated_verticesXCoords_codec);
      verticesYCoords_.WriteTo(output, _repeated_verticesYCoords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (slBoundary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlBoundary);
      }
      size += decisionTag_.CalculateSize(_repeated_decisionTag_codec);
      size += verticesXCoords_.CalculateSize(_repeated_verticesXCoords_codec);
      size += verticesYCoords_.CalculateSize(_repeated_verticesYCoords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObstacleDebug other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.slBoundary_ != null) {
        if (slBoundary_ == null) {
          slBoundary_ = new global::Apollo.Planning.SLBoundary();
        }
        SlBoundary.MergeFrom(other.SlBoundary);
      }
      decisionTag_.Add(other.decisionTag_);
      verticesXCoords_.Add(other.verticesXCoords_);
      verticesYCoords_.Add(other.verticesYCoords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (slBoundary_ == null) {
              slBoundary_ = new global::Apollo.Planning.SLBoundary();
            }
            input.ReadMessage(slBoundary_);
            break;
          }
          case 26: {
            decisionTag_.AddEntriesFrom(input, _repeated_decisionTag_codec);
            break;
          }
          case 34:
          case 33: {
            verticesXCoords_.AddEntriesFrom(input, _repeated_verticesXCoords_codec);
            break;
          }
          case 42:
          case 41: {
            verticesYCoords_.AddEntriesFrom(input, _repeated_verticesYCoords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReferenceLineDebug : pb::IMessage<ReferenceLineDebug> {
    private static readonly pb::MessageParser<ReferenceLineDebug> _parser = new pb::MessageParser<ReferenceLineDebug>(() => new ReferenceLineDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferenceLineDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLineDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLineDebug(ReferenceLineDebug other) : this() {
      id_ = other.id_;
      length_ = other.length_;
      cost_ = other.cost_;
      isChangeLanePath_ = other.isChangeLanePath_;
      isDrivable_ = other.isDrivable_;
      isProtected_ = other.isProtected_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLineDebug Clone() {
      return new ReferenceLineDebug(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private double cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "is_change_lane_path" field.</summary>
    public const int IsChangeLanePathFieldNumber = 4;
    private bool isChangeLanePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChangeLanePath {
      get { return isChangeLanePath_; }
      set {
        isChangeLanePath_ = value;
      }
    }

    /// <summary>Field number for the "is_drivable" field.</summary>
    public const int IsDrivableFieldNumber = 5;
    private bool isDrivable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDrivable {
      get { return isDrivable_; }
      set {
        isDrivable_ = value;
      }
    }

    /// <summary>Field number for the "is_protected" field.</summary>
    public const int IsProtectedFieldNumber = 6;
    private bool isProtected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProtected {
      get { return isProtected_; }
      set {
        isProtected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferenceLineDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferenceLineDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Length != other.Length) return false;
      if (Cost != other.Cost) return false;
      if (IsChangeLanePath != other.IsChangeLanePath) return false;
      if (IsDrivable != other.IsDrivable) return false;
      if (IsProtected != other.IsProtected) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Cost != 0D) hash ^= Cost.GetHashCode();
      if (IsChangeLanePath != false) hash ^= IsChangeLanePath.GetHashCode();
      if (IsDrivable != false) hash ^= IsDrivable.GetHashCode();
      if (IsProtected != false) hash ^= IsProtected.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Length != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Length);
      }
      if (Cost != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Cost);
      }
      if (IsChangeLanePath != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsChangeLanePath);
      }
      if (IsDrivable != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsDrivable);
      }
      if (IsProtected != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsProtected);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Cost != 0D) {
        size += 1 + 8;
      }
      if (IsChangeLanePath != false) {
        size += 1 + 1;
      }
      if (IsDrivable != false) {
        size += 1 + 1;
      }
      if (IsProtected != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferenceLineDebug other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Cost != 0D) {
        Cost = other.Cost;
      }
      if (other.IsChangeLanePath != false) {
        IsChangeLanePath = other.IsChangeLanePath;
      }
      if (other.IsDrivable != false) {
        IsDrivable = other.IsDrivable;
      }
      if (other.IsProtected != false) {
        IsProtected = other.IsProtected;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 17: {
            Length = input.ReadDouble();
            break;
          }
          case 25: {
            Cost = input.ReadDouble();
            break;
          }
          case 32: {
            IsChangeLanePath = input.ReadBool();
            break;
          }
          case 40: {
            IsDrivable = input.ReadBool();
            break;
          }
          case 48: {
            IsProtected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SampleLayerDebug : pb::IMessage<SampleLayerDebug> {
    private static readonly pb::MessageParser<SampleLayerDebug> _parser = new pb::MessageParser<SampleLayerDebug>(() => new SampleLayerDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SampleLayerDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleLayerDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleLayerDebug(SampleLayerDebug other) : this() {
      slPoint_ = other.slPoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleLayerDebug Clone() {
      return new SampleLayerDebug(this);
    }

    /// <summary>Field number for the "sl_point" field.</summary>
    public const int SlPointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.SLPoint> _repeated_slPoint_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.SLPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.SLPoint> slPoint_ = new pbc::RepeatedField<global::Apollo.Common.SLPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.SLPoint> SlPoint {
      get { return slPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SampleLayerDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SampleLayerDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!slPoint_.Equals(other.slPoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= slPoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slPoint_.WriteTo(output, _repeated_slPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slPoint_.CalculateSize(_repeated_slPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SampleLayerDebug other) {
      if (other == null) {
        return;
      }
      slPoint_.Add(other.slPoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            slPoint_.AddEntriesFrom(input, _repeated_slPoint_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DpPolyGraphDebug : pb::IMessage<DpPolyGraphDebug> {
    private static readonly pb::MessageParser<DpPolyGraphDebug> _parser = new pb::MessageParser<DpPolyGraphDebug>(() => new DpPolyGraphDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DpPolyGraphDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpPolyGraphDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpPolyGraphDebug(DpPolyGraphDebug other) : this() {
      sampleLayer_ = other.sampleLayer_.Clone();
      minCostPoint_ = other.minCostPoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpPolyGraphDebug Clone() {
      return new DpPolyGraphDebug(this);
    }

    /// <summary>Field number for the "sample_layer" field.</summary>
    public const int SampleLayerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.SampleLayerDebug> _repeated_sampleLayer_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.PlanningInternal.SampleLayerDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.SampleLayerDebug> sampleLayer_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.SampleLayerDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.SampleLayerDebug> SampleLayer {
      get { return sampleLayer_; }
    }

    /// <summary>Field number for the "min_cost_point" field.</summary>
    public const int MinCostPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.SLPoint> _repeated_minCostPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.SLPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.SLPoint> minCostPoint_ = new pbc::RepeatedField<global::Apollo.Common.SLPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.SLPoint> MinCostPoint {
      get { return minCostPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DpPolyGraphDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DpPolyGraphDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sampleLayer_.Equals(other.sampleLayer_)) return false;
      if(!minCostPoint_.Equals(other.minCostPoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sampleLayer_.GetHashCode();
      hash ^= minCostPoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sampleLayer_.WriteTo(output, _repeated_sampleLayer_codec);
      minCostPoint_.WriteTo(output, _repeated_minCostPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sampleLayer_.CalculateSize(_repeated_sampleLayer_codec);
      size += minCostPoint_.CalculateSize(_repeated_minCostPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DpPolyGraphDebug other) {
      if (other == null) {
        return;
      }
      sampleLayer_.Add(other.sampleLayer_);
      minCostPoint_.Add(other.minCostPoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sampleLayer_.AddEntriesFrom(input, _repeated_sampleLayer_codec);
            break;
          }
          case 18: {
            minCostPoint_.AddEntriesFrom(input, _repeated_minCostPoint_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenarioDebug : pb::IMessage<ScenarioDebug> {
    private static readonly pb::MessageParser<ScenarioDebug> _parser = new pb::MessageParser<ScenarioDebug>(() => new ScenarioDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioDebug(ScenarioDebug other) : this() {
      scenarioType_ = other.scenarioType_;
      stageType_ = other.stageType_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioDebug Clone() {
      return new ScenarioDebug(this);
    }

    /// <summary>Field number for the "scenario_type" field.</summary>
    public const int ScenarioTypeFieldNumber = 1;
    private global::Apollo.Planning.ScenarioConfig.Types.ScenarioType scenarioType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioConfig.Types.ScenarioType ScenarioType {
      get { return scenarioType_; }
      set {
        scenarioType_ = value;
      }
    }

    /// <summary>Field number for the "stage_type" field.</summary>
    public const int StageTypeFieldNumber = 2;
    private global::Apollo.Planning.ScenarioConfig.Types.StageType stageType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioConfig.Types.StageType StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScenarioType != other.ScenarioType) return false;
      if (StageType != other.StageType) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScenarioType != 0) hash ^= ScenarioType.GetHashCode();
      if (StageType != 0) hash ^= StageType.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScenarioType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ScenarioType);
      }
      if (StageType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StageType);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScenarioType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScenarioType);
      }
      if (StageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StageType);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioDebug other) {
      if (other == null) {
        return;
      }
      if (other.ScenarioType != 0) {
        ScenarioType = other.ScenarioType;
      }
      if (other.StageType != 0) {
        StageType = other.StageType;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            scenarioType_ = (global::Apollo.Planning.ScenarioConfig.Types.ScenarioType) input.ReadEnum();
            break;
          }
          case 16: {
            stageType_ = (global::Apollo.Planning.ScenarioConfig.Types.StageType) input.ReadEnum();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trajectories : pb::IMessage<Trajectories> {
    private static readonly pb::MessageParser<Trajectories> _parser = new pb::MessageParser<Trajectories>(() => new Trajectories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trajectories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trajectories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trajectories(Trajectories other) : this() {
      trajectory_ = other.trajectory_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trajectories Clone() {
      return new Trajectories(this);
    }

    /// <summary>Field number for the "trajectory" field.</summary>
    public const int TrajectoryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.Trajectory> _repeated_trajectory_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.Trajectory.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Trajectory> trajectory_ = new pbc::RepeatedField<global::Apollo.Common.Trajectory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Trajectory> Trajectory {
      get { return trajectory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trajectories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trajectories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trajectory_.Equals(other.trajectory_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trajectory_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trajectory_.WriteTo(output, _repeated_trajectory_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trajectory_.CalculateSize(_repeated_trajectory_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trajectories other) {
      if (other == null) {
        return;
      }
      trajectory_.Add(other.trajectory_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            trajectory_.AddEntriesFrom(input, _repeated_trajectory_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenSpaceDebug : pb::IMessage<OpenSpaceDebug> {
    private static readonly pb::MessageParser<OpenSpaceDebug> _parser = new pb::MessageParser<OpenSpaceDebug>(() => new OpenSpaceDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenSpaceDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSpaceDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSpaceDebug(OpenSpaceDebug other) : this() {
      Trajectories = other.trajectories_ != null ? other.Trajectories.Clone() : null;
      WarmStartTrajectory = other.warmStartTrajectory_ != null ? other.WarmStartTrajectory.Clone() : null;
      SmoothedTrajectory = other.smoothedTrajectory_ != null ? other.SmoothedTrajectory.Clone() : null;
      warmStartDualLambda_ = other.warmStartDualLambda_.Clone();
      warmStartDualMiu_ = other.warmStartDualMiu_.Clone();
      optimizedDualLambda_ = other.optimizedDualLambda_.Clone();
      optimizedDualMiu_ = other.optimizedDualMiu_.Clone();
      xyBoundary_ = other.xyBoundary_.Clone();
      obstacles_ = other.obstacles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSpaceDebug Clone() {
      return new OpenSpaceDebug(this);
    }

    /// <summary>Field number for the "trajectories" field.</summary>
    public const int TrajectoriesFieldNumber = 1;
    private global::Apollo.PlanningInternal.Trajectories trajectories_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.Trajectories Trajectories {
      get { return trajectories_; }
      set {
        trajectories_ = value;
      }
    }

    /// <summary>Field number for the "warm_start_trajectory" field.</summary>
    public const int WarmStartTrajectoryFieldNumber = 2;
    private global::Apollo.Common.VehicleMotion warmStartTrajectory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleMotion WarmStartTrajectory {
      get { return warmStartTrajectory_; }
      set {
        warmStartTrajectory_ = value;
      }
    }

    /// <summary>Field number for the "smoothed_trajectory" field.</summary>
    public const int SmoothedTrajectoryFieldNumber = 3;
    private global::Apollo.Common.VehicleMotion smoothedTrajectory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleMotion SmoothedTrajectory {
      get { return smoothedTrajectory_; }
      set {
        smoothedTrajectory_ = value;
      }
    }

    /// <summary>Field number for the "warm_start_dual_lambda" field.</summary>
    public const int WarmStartDualLambdaFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_warmStartDualLambda_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> warmStartDualLambda_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> WarmStartDualLambda {
      get { return warmStartDualLambda_; }
    }

    /// <summary>Field number for the "warm_start_dual_miu" field.</summary>
    public const int WarmStartDualMiuFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_warmStartDualMiu_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> warmStartDualMiu_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> WarmStartDualMiu {
      get { return warmStartDualMiu_; }
    }

    /// <summary>Field number for the "optimized_dual_lambda" field.</summary>
    public const int OptimizedDualLambdaFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_optimizedDualLambda_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> optimizedDualLambda_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> OptimizedDualLambda {
      get { return optimizedDualLambda_; }
    }

    /// <summary>Field number for the "optimized_dual_miu" field.</summary>
    public const int OptimizedDualMiuFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_optimizedDualMiu_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> optimizedDualMiu_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> OptimizedDualMiu {
      get { return optimizedDualMiu_; }
    }

    /// <summary>Field number for the "xy_boundary" field.</summary>
    public const int XyBoundaryFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_xyBoundary_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> xyBoundary_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> XyBoundary {
      get { return xyBoundary_; }
    }

    /// <summary>Field number for the "obstacles" field.</summary>
    public const int ObstaclesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.ObstacleDebug> _repeated_obstacles_codec
        = pb::FieldCodec.ForMessage(74, global::Apollo.PlanningInternal.ObstacleDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.ObstacleDebug> obstacles_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.ObstacleDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.ObstacleDebug> Obstacles {
      get { return obstacles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenSpaceDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenSpaceDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Trajectories, other.Trajectories)) return false;
      if (!object.Equals(WarmStartTrajectory, other.WarmStartTrajectory)) return false;
      if (!object.Equals(SmoothedTrajectory, other.SmoothedTrajectory)) return false;
      if(!warmStartDualLambda_.Equals(other.warmStartDualLambda_)) return false;
      if(!warmStartDualMiu_.Equals(other.warmStartDualMiu_)) return false;
      if(!optimizedDualLambda_.Equals(other.optimizedDualLambda_)) return false;
      if(!optimizedDualMiu_.Equals(other.optimizedDualMiu_)) return false;
      if(!xyBoundary_.Equals(other.xyBoundary_)) return false;
      if(!obstacles_.Equals(other.obstacles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (trajectories_ != null) hash ^= Trajectories.GetHashCode();
      if (warmStartTrajectory_ != null) hash ^= WarmStartTrajectory.GetHashCode();
      if (smoothedTrajectory_ != null) hash ^= SmoothedTrajectory.GetHashCode();
      hash ^= warmStartDualLambda_.GetHashCode();
      hash ^= warmStartDualMiu_.GetHashCode();
      hash ^= optimizedDualLambda_.GetHashCode();
      hash ^= optimizedDualMiu_.GetHashCode();
      hash ^= xyBoundary_.GetHashCode();
      hash ^= obstacles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trajectories_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Trajectories);
      }
      if (warmStartTrajectory_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WarmStartTrajectory);
      }
      if (smoothedTrajectory_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SmoothedTrajectory);
      }
      warmStartDualLambda_.WriteTo(output, _repeated_warmStartDualLambda_codec);
      warmStartDualMiu_.WriteTo(output, _repeated_warmStartDualMiu_codec);
      optimizedDualLambda_.WriteTo(output, _repeated_optimizedDualLambda_codec);
      optimizedDualMiu_.WriteTo(output, _repeated_optimizedDualMiu_codec);
      xyBoundary_.WriteTo(output, _repeated_xyBoundary_codec);
      obstacles_.WriteTo(output, _repeated_obstacles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trajectories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trajectories);
      }
      if (warmStartTrajectory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarmStartTrajectory);
      }
      if (smoothedTrajectory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SmoothedTrajectory);
      }
      size += warmStartDualLambda_.CalculateSize(_repeated_warmStartDualLambda_codec);
      size += warmStartDualMiu_.CalculateSize(_repeated_warmStartDualMiu_codec);
      size += optimizedDualLambda_.CalculateSize(_repeated_optimizedDualLambda_codec);
      size += optimizedDualMiu_.CalculateSize(_repeated_optimizedDualMiu_codec);
      size += xyBoundary_.CalculateSize(_repeated_xyBoundary_codec);
      size += obstacles_.CalculateSize(_repeated_obstacles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenSpaceDebug other) {
      if (other == null) {
        return;
      }
      if (other.trajectories_ != null) {
        if (trajectories_ == null) {
          trajectories_ = new global::Apollo.PlanningInternal.Trajectories();
        }
        Trajectories.MergeFrom(other.Trajectories);
      }
      if (other.warmStartTrajectory_ != null) {
        if (warmStartTrajectory_ == null) {
          warmStartTrajectory_ = new global::Apollo.Common.VehicleMotion();
        }
        WarmStartTrajectory.MergeFrom(other.WarmStartTrajectory);
      }
      if (other.smoothedTrajectory_ != null) {
        if (smoothedTrajectory_ == null) {
          smoothedTrajectory_ = new global::Apollo.Common.VehicleMotion();
        }
        SmoothedTrajectory.MergeFrom(other.SmoothedTrajectory);
      }
      warmStartDualLambda_.Add(other.warmStartDualLambda_);
      warmStartDualMiu_.Add(other.warmStartDualMiu_);
      optimizedDualLambda_.Add(other.optimizedDualLambda_);
      optimizedDualMiu_.Add(other.optimizedDualMiu_);
      xyBoundary_.Add(other.xyBoundary_);
      obstacles_.Add(other.obstacles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (trajectories_ == null) {
              trajectories_ = new global::Apollo.PlanningInternal.Trajectories();
            }
            input.ReadMessage(trajectories_);
            break;
          }
          case 18: {
            if (warmStartTrajectory_ == null) {
              warmStartTrajectory_ = new global::Apollo.Common.VehicleMotion();
            }
            input.ReadMessage(warmStartTrajectory_);
            break;
          }
          case 26: {
            if (smoothedTrajectory_ == null) {
              smoothedTrajectory_ = new global::Apollo.Common.VehicleMotion();
            }
            input.ReadMessage(smoothedTrajectory_);
            break;
          }
          case 34:
          case 33: {
            warmStartDualLambda_.AddEntriesFrom(input, _repeated_warmStartDualLambda_codec);
            break;
          }
          case 42:
          case 41: {
            warmStartDualMiu_.AddEntriesFrom(input, _repeated_warmStartDualMiu_codec);
            break;
          }
          case 50:
          case 49: {
            optimizedDualLambda_.AddEntriesFrom(input, _repeated_optimizedDualLambda_codec);
            break;
          }
          case 58:
          case 57: {
            optimizedDualMiu_.AddEntriesFrom(input, _repeated_optimizedDualMiu_codec);
            break;
          }
          case 66:
          case 65: {
            xyBoundary_.AddEntriesFrom(input, _repeated_xyBoundary_codec);
            break;
          }
          case 74: {
            obstacles_.AddEntriesFrom(input, _repeated_obstacles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmootherDebug : pb::IMessage<SmootherDebug> {
    private static readonly pb::MessageParser<SmootherDebug> _parser = new pb::MessageParser<SmootherDebug>(() => new SmootherDebug());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmootherDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmootherDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmootherDebug(SmootherDebug other) : this() {
      isSmoothed_ = other.isSmoothed_;
      type_ = other.type_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmootherDebug Clone() {
      return new SmootherDebug(this);
    }

    /// <summary>Field number for the "is_smoothed" field.</summary>
    public const int IsSmoothedFieldNumber = 1;
    private bool isSmoothed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSmoothed {
      get { return isSmoothed_; }
      set {
        isSmoothed_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Apollo.PlanningInternal.SmootherDebug.Types.SmootherType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.SmootherDebug.Types.SmootherType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmootherDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmootherDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSmoothed != other.IsSmoothed) return false;
      if (Type != other.Type) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSmoothed != false) hash ^= IsSmoothed.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSmoothed != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSmoothed);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSmoothed != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmootherDebug other) {
      if (other == null) {
        return;
      }
      if (other.IsSmoothed != false) {
        IsSmoothed = other.IsSmoothed;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSmoothed = input.ReadBool();
            break;
          }
          case 16: {
            type_ = (global::Apollo.PlanningInternal.SmootherDebug.Types.SmootherType) input.ReadEnum();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SmootherDebug message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SmootherType {
        [pbr::OriginalName("SMOOTHERTYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("SMOOTHER_NONE")] SmootherNone = 1,
        [pbr::OriginalName("SMOOTHER_CLOSE_STOP")] SmootherCloseStop = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// next ID: 29
  /// </summary>
  public sealed partial class PlanningData : pb::IMessage<PlanningData> {
    private static readonly pb::MessageParser<PlanningData> _parser = new pb::MessageParser<PlanningData>(() => new PlanningData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanningData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningData(PlanningData other) : this() {
      AdcPosition = other.adcPosition_ != null ? other.AdcPosition.Clone() : null;
      Chassis = other.chassis_ != null ? other.Chassis.Clone() : null;
      Routing = other.routing_ != null ? other.Routing.Clone() : null;
      InitPoint = other.initPoint_ != null ? other.InitPoint.Clone() : null;
      path_ = other.path_.Clone();
      speedPlan_ = other.speedPlan_.Clone();
      stGraph_ = other.stGraph_.Clone();
      slFrame_ = other.slFrame_.Clone();
      PredictionHeader = other.predictionHeader_ != null ? other.PredictionHeader.Clone() : null;
      SignalLight = other.signalLight_ != null ? other.SignalLight.Clone() : null;
      obstacle_ = other.obstacle_.Clone();
      referenceLine_ = other.referenceLine_.Clone();
      DpPolyGraph = other.dpPolyGraph_ != null ? other.DpPolyGraph.Clone() : null;
      LatticeStImage = other.latticeStImage_ != null ? other.LatticeStImage.Clone() : null;
      RelativeMap = other.relativeMap_ != null ? other.RelativeMap.Clone() : null;
      AutoTuningTrainingData = other.autoTuningTrainingData_ != null ? other.AutoTuningTrainingData.Clone() : null;
      frontClearDistance_ = other.frontClearDistance_;
      chart_ = other.chart_.Clone();
      Scenario = other.scenario_ != null ? other.Scenario.Clone() : null;
      OpenSpace = other.openSpace_ != null ? other.OpenSpace.Clone() : null;
      Smoother = other.smoother_ != null ? other.Smoother.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningData Clone() {
      return new PlanningData(this);
    }

    /// <summary>Field number for the "adc_position" field.</summary>
    public const int AdcPositionFieldNumber = 7;
    private global::Apollo.Localization.LocalizationEstimate adcPosition_;
    /// <summary>
    /// input
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.LocalizationEstimate AdcPosition {
      get { return adcPosition_; }
      set {
        adcPosition_ = value;
      }
    }

    /// <summary>Field number for the "chassis" field.</summary>
    public const int ChassisFieldNumber = 8;
    private global::Apollo.Canbus.Chassis chassis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis Chassis {
      get { return chassis_; }
      set {
        chassis_ = value;
      }
    }

    /// <summary>Field number for the "routing" field.</summary>
    public const int RoutingFieldNumber = 9;
    private global::Apollo.Routing.RoutingResponse routing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.RoutingResponse Routing {
      get { return routing_; }
      set {
        routing_ = value;
      }
    }

    /// <summary>Field number for the "init_point" field.</summary>
    public const int InitPointFieldNumber = 10;
    private global::Apollo.Common.TrajectoryPoint initPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.TrajectoryPoint InitPoint {
      get { return initPoint_; }
      set {
        initPoint_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Common.Path> _repeated_path_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Common.Path.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Path> path_ = new pbc::RepeatedField<global::Apollo.Common.Path>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Path> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "speed_plan" field.</summary>
    public const int SpeedPlanFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.SpeedPlan> _repeated_speedPlan_codec
        = pb::FieldCodec.ForMessage(106, global::Apollo.PlanningInternal.SpeedPlan.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.SpeedPlan> speedPlan_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.SpeedPlan>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.SpeedPlan> SpeedPlan {
      get { return speedPlan_; }
    }

    /// <summary>Field number for the "st_graph" field.</summary>
    public const int StGraphFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.STGraphDebug> _repeated_stGraph_codec
        = pb::FieldCodec.ForMessage(114, global::Apollo.PlanningInternal.STGraphDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.STGraphDebug> stGraph_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.STGraphDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.STGraphDebug> StGraph {
      get { return stGraph_; }
    }

    /// <summary>Field number for the "sl_frame" field.</summary>
    public const int SlFrameFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.SLFrameDebug> _repeated_slFrame_codec
        = pb::FieldCodec.ForMessage(122, global::Apollo.PlanningInternal.SLFrameDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.SLFrameDebug> slFrame_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.SLFrameDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.SLFrameDebug> SlFrame {
      get { return slFrame_; }
    }

    /// <summary>Field number for the "prediction_header" field.</summary>
    public const int PredictionHeaderFieldNumber = 16;
    private global::Apollo.Common.Header predictionHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header PredictionHeader {
      get { return predictionHeader_; }
      set {
        predictionHeader_ = value;
      }
    }

    /// <summary>Field number for the "signal_light" field.</summary>
    public const int SignalLightFieldNumber = 17;
    private global::Apollo.PlanningInternal.SignalLightDebug signalLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.SignalLightDebug SignalLight {
      get { return signalLight_; }
      set {
        signalLight_ = value;
      }
    }

    /// <summary>Field number for the "obstacle" field.</summary>
    public const int ObstacleFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.ObstacleDebug> _repeated_obstacle_codec
        = pb::FieldCodec.ForMessage(146, global::Apollo.PlanningInternal.ObstacleDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.ObstacleDebug> obstacle_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.ObstacleDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.ObstacleDebug> Obstacle {
      get { return obstacle_; }
    }

    /// <summary>Field number for the "reference_line" field.</summary>
    public const int ReferenceLineFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.ReferenceLineDebug> _repeated_referenceLine_codec
        = pb::FieldCodec.ForMessage(154, global::Apollo.PlanningInternal.ReferenceLineDebug.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.ReferenceLineDebug> referenceLine_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.ReferenceLineDebug>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.ReferenceLineDebug> ReferenceLine {
      get { return referenceLine_; }
    }

    /// <summary>Field number for the "dp_poly_graph" field.</summary>
    public const int DpPolyGraphFieldNumber = 20;
    private global::Apollo.PlanningInternal.DpPolyGraphDebug dpPolyGraph_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.DpPolyGraphDebug DpPolyGraph {
      get { return dpPolyGraph_; }
      set {
        dpPolyGraph_ = value;
      }
    }

    /// <summary>Field number for the "lattice_st_image" field.</summary>
    public const int LatticeStImageFieldNumber = 21;
    private global::Apollo.PlanningInternal.LatticeStTraining latticeStImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.LatticeStTraining LatticeStImage {
      get { return latticeStImage_; }
      set {
        latticeStImage_ = value;
      }
    }

    /// <summary>Field number for the "relative_map" field.</summary>
    public const int RelativeMapFieldNumber = 22;
    private global::Apollo.RelativeMap.MapMsg relativeMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.RelativeMap.MapMsg RelativeMap {
      get { return relativeMap_; }
      set {
        relativeMap_ = value;
      }
    }

    /// <summary>Field number for the "auto_tuning_training_data" field.</summary>
    public const int AutoTuningTrainingDataFieldNumber = 23;
    private global::Apollo.PlanningInternal.AutoTuningTrainingData autoTuningTrainingData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.AutoTuningTrainingData AutoTuningTrainingData {
      get { return autoTuningTrainingData_; }
      set {
        autoTuningTrainingData_ = value;
      }
    }

    /// <summary>Field number for the "front_clear_distance" field.</summary>
    public const int FrontClearDistanceFieldNumber = 24;
    private double frontClearDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrontClearDistance {
      get { return frontClearDistance_; }
      set {
        frontClearDistance_ = value;
      }
    }

    /// <summary>Field number for the "chart" field.</summary>
    public const int ChartFieldNumber = 25;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Chart> _repeated_chart_codec
        = pb::FieldCodec.ForMessage(202, global::Apollo.Dreamview.Chart.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Chart> chart_ = new pbc::RepeatedField<global::Apollo.Dreamview.Chart>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Chart> Chart {
      get { return chart_; }
    }

    /// <summary>Field number for the "scenario" field.</summary>
    public const int ScenarioFieldNumber = 26;
    private global::Apollo.PlanningInternal.ScenarioDebug scenario_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.ScenarioDebug Scenario {
      get { return scenario_; }
      set {
        scenario_ = value;
      }
    }

    /// <summary>Field number for the "open_space" field.</summary>
    public const int OpenSpaceFieldNumber = 27;
    private global::Apollo.PlanningInternal.OpenSpaceDebug openSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.OpenSpaceDebug OpenSpace {
      get { return openSpace_; }
      set {
        openSpace_ = value;
      }
    }

    /// <summary>Field number for the "smoother" field.</summary>
    public const int SmootherFieldNumber = 28;
    private global::Apollo.PlanningInternal.SmootherDebug smoother_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.SmootherDebug Smoother {
      get { return smoother_; }
      set {
        smoother_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanningData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanningData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AdcPosition, other.AdcPosition)) return false;
      if (!object.Equals(Chassis, other.Chassis)) return false;
      if (!object.Equals(Routing, other.Routing)) return false;
      if (!object.Equals(InitPoint, other.InitPoint)) return false;
      if(!path_.Equals(other.path_)) return false;
      if(!speedPlan_.Equals(other.speedPlan_)) return false;
      if(!stGraph_.Equals(other.stGraph_)) return false;
      if(!slFrame_.Equals(other.slFrame_)) return false;
      if (!object.Equals(PredictionHeader, other.PredictionHeader)) return false;
      if (!object.Equals(SignalLight, other.SignalLight)) return false;
      if(!obstacle_.Equals(other.obstacle_)) return false;
      if(!referenceLine_.Equals(other.referenceLine_)) return false;
      if (!object.Equals(DpPolyGraph, other.DpPolyGraph)) return false;
      if (!object.Equals(LatticeStImage, other.LatticeStImage)) return false;
      if (!object.Equals(RelativeMap, other.RelativeMap)) return false;
      if (!object.Equals(AutoTuningTrainingData, other.AutoTuningTrainingData)) return false;
      if (FrontClearDistance != other.FrontClearDistance) return false;
      if(!chart_.Equals(other.chart_)) return false;
      if (!object.Equals(Scenario, other.Scenario)) return false;
      if (!object.Equals(OpenSpace, other.OpenSpace)) return false;
      if (!object.Equals(Smoother, other.Smoother)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (adcPosition_ != null) hash ^= AdcPosition.GetHashCode();
      if (chassis_ != null) hash ^= Chassis.GetHashCode();
      if (routing_ != null) hash ^= Routing.GetHashCode();
      if (initPoint_ != null) hash ^= InitPoint.GetHashCode();
      hash ^= path_.GetHashCode();
      hash ^= speedPlan_.GetHashCode();
      hash ^= stGraph_.GetHashCode();
      hash ^= slFrame_.GetHashCode();
      if (predictionHeader_ != null) hash ^= PredictionHeader.GetHashCode();
      if (signalLight_ != null) hash ^= SignalLight.GetHashCode();
      hash ^= obstacle_.GetHashCode();
      hash ^= referenceLine_.GetHashCode();
      if (dpPolyGraph_ != null) hash ^= DpPolyGraph.GetHashCode();
      if (latticeStImage_ != null) hash ^= LatticeStImage.GetHashCode();
      if (relativeMap_ != null) hash ^= RelativeMap.GetHashCode();
      if (autoTuningTrainingData_ != null) hash ^= AutoTuningTrainingData.GetHashCode();
      if (FrontClearDistance != 0D) hash ^= FrontClearDistance.GetHashCode();
      hash ^= chart_.GetHashCode();
      if (scenario_ != null) hash ^= Scenario.GetHashCode();
      if (openSpace_ != null) hash ^= OpenSpace.GetHashCode();
      if (smoother_ != null) hash ^= Smoother.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      path_.WriteTo(output, _repeated_path_codec);
      if (adcPosition_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AdcPosition);
      }
      if (chassis_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Chassis);
      }
      if (routing_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Routing);
      }
      if (initPoint_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(InitPoint);
      }
      speedPlan_.WriteTo(output, _repeated_speedPlan_codec);
      stGraph_.WriteTo(output, _repeated_stGraph_codec);
      slFrame_.WriteTo(output, _repeated_slFrame_codec);
      if (predictionHeader_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(PredictionHeader);
      }
      if (signalLight_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(SignalLight);
      }
      obstacle_.WriteTo(output, _repeated_obstacle_codec);
      referenceLine_.WriteTo(output, _repeated_referenceLine_codec);
      if (dpPolyGraph_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(DpPolyGraph);
      }
      if (latticeStImage_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LatticeStImage);
      }
      if (relativeMap_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RelativeMap);
      }
      if (autoTuningTrainingData_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(AutoTuningTrainingData);
      }
      if (FrontClearDistance != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(FrontClearDistance);
      }
      chart_.WriteTo(output, _repeated_chart_codec);
      if (scenario_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Scenario);
      }
      if (openSpace_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(OpenSpace);
      }
      if (smoother_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Smoother);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (adcPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdcPosition);
      }
      if (chassis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chassis);
      }
      if (routing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Routing);
      }
      if (initPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitPoint);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      size += speedPlan_.CalculateSize(_repeated_speedPlan_codec);
      size += stGraph_.CalculateSize(_repeated_stGraph_codec);
      size += slFrame_.CalculateSize(_repeated_slFrame_codec);
      if (predictionHeader_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PredictionHeader);
      }
      if (signalLight_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SignalLight);
      }
      size += obstacle_.CalculateSize(_repeated_obstacle_codec);
      size += referenceLine_.CalculateSize(_repeated_referenceLine_codec);
      if (dpPolyGraph_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DpPolyGraph);
      }
      if (latticeStImage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LatticeStImage);
      }
      if (relativeMap_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RelativeMap);
      }
      if (autoTuningTrainingData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AutoTuningTrainingData);
      }
      if (FrontClearDistance != 0D) {
        size += 2 + 8;
      }
      size += chart_.CalculateSize(_repeated_chart_codec);
      if (scenario_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scenario);
      }
      if (openSpace_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenSpace);
      }
      if (smoother_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Smoother);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanningData other) {
      if (other == null) {
        return;
      }
      if (other.adcPosition_ != null) {
        if (adcPosition_ == null) {
          adcPosition_ = new global::Apollo.Localization.LocalizationEstimate();
        }
        AdcPosition.MergeFrom(other.AdcPosition);
      }
      if (other.chassis_ != null) {
        if (chassis_ == null) {
          chassis_ = new global::Apollo.Canbus.Chassis();
        }
        Chassis.MergeFrom(other.Chassis);
      }
      if (other.routing_ != null) {
        if (routing_ == null) {
          routing_ = new global::Apollo.Routing.RoutingResponse();
        }
        Routing.MergeFrom(other.Routing);
      }
      if (other.initPoint_ != null) {
        if (initPoint_ == null) {
          initPoint_ = new global::Apollo.Common.TrajectoryPoint();
        }
        InitPoint.MergeFrom(other.InitPoint);
      }
      path_.Add(other.path_);
      speedPlan_.Add(other.speedPlan_);
      stGraph_.Add(other.stGraph_);
      slFrame_.Add(other.slFrame_);
      if (other.predictionHeader_ != null) {
        if (predictionHeader_ == null) {
          predictionHeader_ = new global::Apollo.Common.Header();
        }
        PredictionHeader.MergeFrom(other.PredictionHeader);
      }
      if (other.signalLight_ != null) {
        if (signalLight_ == null) {
          signalLight_ = new global::Apollo.PlanningInternal.SignalLightDebug();
        }
        SignalLight.MergeFrom(other.SignalLight);
      }
      obstacle_.Add(other.obstacle_);
      referenceLine_.Add(other.referenceLine_);
      if (other.dpPolyGraph_ != null) {
        if (dpPolyGraph_ == null) {
          dpPolyGraph_ = new global::Apollo.PlanningInternal.DpPolyGraphDebug();
        }
        DpPolyGraph.MergeFrom(other.DpPolyGraph);
      }
      if (other.latticeStImage_ != null) {
        if (latticeStImage_ == null) {
          latticeStImage_ = new global::Apollo.PlanningInternal.LatticeStTraining();
        }
        LatticeStImage.MergeFrom(other.LatticeStImage);
      }
      if (other.relativeMap_ != null) {
        if (relativeMap_ == null) {
          relativeMap_ = new global::Apollo.RelativeMap.MapMsg();
        }
        RelativeMap.MergeFrom(other.RelativeMap);
      }
      if (other.autoTuningTrainingData_ != null) {
        if (autoTuningTrainingData_ == null) {
          autoTuningTrainingData_ = new global::Apollo.PlanningInternal.AutoTuningTrainingData();
        }
        AutoTuningTrainingData.MergeFrom(other.AutoTuningTrainingData);
      }
      if (other.FrontClearDistance != 0D) {
        FrontClearDistance = other.FrontClearDistance;
      }
      chart_.Add(other.chart_);
      if (other.scenario_ != null) {
        if (scenario_ == null) {
          scenario_ = new global::Apollo.PlanningInternal.ScenarioDebug();
        }
        Scenario.MergeFrom(other.Scenario);
      }
      if (other.openSpace_ != null) {
        if (openSpace_ == null) {
          openSpace_ = new global::Apollo.PlanningInternal.OpenSpaceDebug();
        }
        OpenSpace.MergeFrom(other.OpenSpace);
      }
      if (other.smoother_ != null) {
        if (smoother_ == null) {
          smoother_ = new global::Apollo.PlanningInternal.SmootherDebug();
        }
        Smoother.MergeFrom(other.Smoother);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 50: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 58: {
            if (adcPosition_ == null) {
              adcPosition_ = new global::Apollo.Localization.LocalizationEstimate();
            }
            input.ReadMessage(adcPosition_);
            break;
          }
          case 66: {
            if (chassis_ == null) {
              chassis_ = new global::Apollo.Canbus.Chassis();
            }
            input.ReadMessage(chassis_);
            break;
          }
          case 74: {
            if (routing_ == null) {
              routing_ = new global::Apollo.Routing.RoutingResponse();
            }
            input.ReadMessage(routing_);
            break;
          }
          case 82: {
            if (initPoint_ == null) {
              initPoint_ = new global::Apollo.Common.TrajectoryPoint();
            }
            input.ReadMessage(initPoint_);
            break;
          }
          case 106: {
            speedPlan_.AddEntriesFrom(input, _repeated_speedPlan_codec);
            break;
          }
          case 114: {
            stGraph_.AddEntriesFrom(input, _repeated_stGraph_codec);
            break;
          }
          case 122: {
            slFrame_.AddEntriesFrom(input, _repeated_slFrame_codec);
            break;
          }
          case 130: {
            if (predictionHeader_ == null) {
              predictionHeader_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(predictionHeader_);
            break;
          }
          case 138: {
            if (signalLight_ == null) {
              signalLight_ = new global::Apollo.PlanningInternal.SignalLightDebug();
            }
            input.ReadMessage(signalLight_);
            break;
          }
          case 146: {
            obstacle_.AddEntriesFrom(input, _repeated_obstacle_codec);
            break;
          }
          case 154: {
            referenceLine_.AddEntriesFrom(input, _repeated_referenceLine_codec);
            break;
          }
          case 162: {
            if (dpPolyGraph_ == null) {
              dpPolyGraph_ = new global::Apollo.PlanningInternal.DpPolyGraphDebug();
            }
            input.ReadMessage(dpPolyGraph_);
            break;
          }
          case 170: {
            if (latticeStImage_ == null) {
              latticeStImage_ = new global::Apollo.PlanningInternal.LatticeStTraining();
            }
            input.ReadMessage(latticeStImage_);
            break;
          }
          case 178: {
            if (relativeMap_ == null) {
              relativeMap_ = new global::Apollo.RelativeMap.MapMsg();
            }
            input.ReadMessage(relativeMap_);
            break;
          }
          case 186: {
            if (autoTuningTrainingData_ == null) {
              autoTuningTrainingData_ = new global::Apollo.PlanningInternal.AutoTuningTrainingData();
            }
            input.ReadMessage(autoTuningTrainingData_);
            break;
          }
          case 193: {
            FrontClearDistance = input.ReadDouble();
            break;
          }
          case 202: {
            chart_.AddEntriesFrom(input, _repeated_chart_codec);
            break;
          }
          case 210: {
            if (scenario_ == null) {
              scenario_ = new global::Apollo.PlanningInternal.ScenarioDebug();
            }
            input.ReadMessage(scenario_);
            break;
          }
          case 218: {
            if (openSpace_ == null) {
              openSpace_ = new global::Apollo.PlanningInternal.OpenSpaceDebug();
            }
            input.ReadMessage(openSpace_);
            break;
          }
          case 226: {
            if (smoother_ == null) {
              smoother_ = new global::Apollo.PlanningInternal.SmootherDebug();
            }
            input.ReadMessage(smoother_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LatticeStPixel : pb::IMessage<LatticeStPixel> {
    private static readonly pb::MessageParser<LatticeStPixel> _parser = new pb::MessageParser<LatticeStPixel>(() => new LatticeStPixel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatticeStPixel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatticeStPixel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatticeStPixel(LatticeStPixel other) : this() {
      s_ = other.s_;
      t_ = other.t_;
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatticeStPixel Clone() {
      return new LatticeStPixel(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private int s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 2;
    private int t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int T {
      get { return t_; }
      set {
        t_ = value;
      }
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 3;
    private uint r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 4;
    private uint g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 5;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatticeStPixel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatticeStPixel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (T != other.T) return false;
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0) hash ^= S.GetHashCode();
      if (T != 0) hash ^= T.GetHashCode();
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(S);
      }
      if (T != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(T);
      }
      if (R != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(S);
      }
      if (T != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(T);
      }
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatticeStPixel other) {
      if (other == null) {
        return;
      }
      if (other.S != 0) {
        S = other.S;
      }
      if (other.T != 0) {
        T = other.T;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            S = input.ReadInt32();
            break;
          }
          case 16: {
            T = input.ReadInt32();
            break;
          }
          case 24: {
            R = input.ReadUInt32();
            break;
          }
          case 32: {
            G = input.ReadUInt32();
            break;
          }
          case 40: {
            B = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LatticeStTraining : pb::IMessage<LatticeStTraining> {
    private static readonly pb::MessageParser<LatticeStTraining> _parser = new pb::MessageParser<LatticeStTraining>(() => new LatticeStTraining());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatticeStTraining> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatticeStTraining() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatticeStTraining(LatticeStTraining other) : this() {
      pixel_ = other.pixel_.Clone();
      timestamp_ = other.timestamp_;
      annotation_ = other.annotation_;
      numSGrids_ = other.numSGrids_;
      numTGrids_ = other.numTGrids_;
      sResolution_ = other.sResolution_;
      tResolution_ = other.tResolution_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatticeStTraining Clone() {
      return new LatticeStTraining(this);
    }

    /// <summary>Field number for the "pixel" field.</summary>
    public const int PixelFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.PlanningInternal.LatticeStPixel> _repeated_pixel_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.PlanningInternal.LatticeStPixel.Parser);
    private readonly pbc::RepeatedField<global::Apollo.PlanningInternal.LatticeStPixel> pixel_ = new pbc::RepeatedField<global::Apollo.PlanningInternal.LatticeStPixel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.PlanningInternal.LatticeStPixel> Pixel {
      get { return pixel_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 3;
    private string annotation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Annotation {
      get { return annotation_; }
      set {
        annotation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_s_grids" field.</summary>
    public const int NumSGridsFieldNumber = 4;
    private uint numSGrids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSGrids {
      get { return numSGrids_; }
      set {
        numSGrids_ = value;
      }
    }

    /// <summary>Field number for the "num_t_grids" field.</summary>
    public const int NumTGridsFieldNumber = 5;
    private uint numTGrids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTGrids {
      get { return numTGrids_; }
      set {
        numTGrids_ = value;
      }
    }

    /// <summary>Field number for the "s_resolution" field.</summary>
    public const int SResolutionFieldNumber = 6;
    private double sResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SResolution {
      get { return sResolution_; }
      set {
        sResolution_ = value;
      }
    }

    /// <summary>Field number for the "t_resolution" field.</summary>
    public const int TResolutionFieldNumber = 7;
    private double tResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TResolution {
      get { return tResolution_; }
      set {
        tResolution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatticeStTraining);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatticeStTraining other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pixel_.Equals(other.pixel_)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Annotation != other.Annotation) return false;
      if (NumSGrids != other.NumSGrids) return false;
      if (NumTGrids != other.NumTGrids) return false;
      if (SResolution != other.SResolution) return false;
      if (TResolution != other.TResolution) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pixel_.GetHashCode();
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      if (Annotation.Length != 0) hash ^= Annotation.GetHashCode();
      if (NumSGrids != 0) hash ^= NumSGrids.GetHashCode();
      if (NumTGrids != 0) hash ^= NumTGrids.GetHashCode();
      if (SResolution != 0D) hash ^= SResolution.GetHashCode();
      if (TResolution != 0D) hash ^= TResolution.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pixel_.WriteTo(output, _repeated_pixel_codec);
      if (Timestamp != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Timestamp);
      }
      if (Annotation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Annotation);
      }
      if (NumSGrids != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumSGrids);
      }
      if (NumTGrids != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumTGrids);
      }
      if (SResolution != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SResolution);
      }
      if (TResolution != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TResolution);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pixel_.CalculateSize(_repeated_pixel_codec);
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (Annotation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Annotation);
      }
      if (NumSGrids != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumSGrids);
      }
      if (NumTGrids != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTGrids);
      }
      if (SResolution != 0D) {
        size += 1 + 8;
      }
      if (TResolution != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatticeStTraining other) {
      if (other == null) {
        return;
      }
      pixel_.Add(other.pixel_);
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      if (other.Annotation.Length != 0) {
        Annotation = other.Annotation;
      }
      if (other.NumSGrids != 0) {
        NumSGrids = other.NumSGrids;
      }
      if (other.NumTGrids != 0) {
        NumTGrids = other.NumTGrids;
      }
      if (other.SResolution != 0D) {
        SResolution = other.SResolution;
      }
      if (other.TResolution != 0D) {
        TResolution = other.TResolution;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pixel_.AddEntriesFrom(input, _repeated_pixel_codec);
            break;
          }
          case 17: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 26: {
            Annotation = input.ReadString();
            break;
          }
          case 32: {
            NumSGrids = input.ReadUInt32();
            break;
          }
          case 40: {
            NumTGrids = input.ReadUInt32();
            break;
          }
          case 49: {
            SResolution = input.ReadDouble();
            break;
          }
          case 57: {
            TResolution = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CostComponents : pb::IMessage<CostComponents> {
    private static readonly pb::MessageParser<CostComponents> _parser = new pb::MessageParser<CostComponents>(() => new CostComponents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CostComponents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostComponents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostComponents(CostComponents other) : this() {
      costComponent_ = other.costComponent_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostComponents Clone() {
      return new CostComponents(this);
    }

    /// <summary>Field number for the "cost_component" field.</summary>
    public const int CostComponentFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_costComponent_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> costComponent_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> CostComponent {
      get { return costComponent_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CostComponents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CostComponents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!costComponent_.Equals(other.costComponent_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= costComponent_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      costComponent_.WriteTo(output, _repeated_costComponent_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += costComponent_.CalculateSize(_repeated_costComponent_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CostComponents other) {
      if (other == null) {
        return;
      }
      costComponent_.Add(other.costComponent_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 9: {
            costComponent_.AddEntriesFrom(input, _repeated_costComponent_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AutoTuningTrainingData : pb::IMessage<AutoTuningTrainingData> {
    private static readonly pb::MessageParser<AutoTuningTrainingData> _parser = new pb::MessageParser<AutoTuningTrainingData>(() => new AutoTuningTrainingData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoTuningTrainingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoTuningTrainingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoTuningTrainingData(AutoTuningTrainingData other) : this() {
      TeacherComponent = other.teacherComponent_ != null ? other.TeacherComponent.Clone() : null;
      StudentComponent = other.studentComponent_ != null ? other.StudentComponent.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoTuningTrainingData Clone() {
      return new AutoTuningTrainingData(this);
    }

    /// <summary>Field number for the "teacher_component" field.</summary>
    public const int TeacherComponentFieldNumber = 1;
    private global::Apollo.PlanningInternal.CostComponents teacherComponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.CostComponents TeacherComponent {
      get { return teacherComponent_; }
      set {
        teacherComponent_ = value;
      }
    }

    /// <summary>Field number for the "student_component" field.</summary>
    public const int StudentComponentFieldNumber = 2;
    private global::Apollo.PlanningInternal.CostComponents studentComponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.CostComponents StudentComponent {
      get { return studentComponent_; }
      set {
        studentComponent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoTuningTrainingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoTuningTrainingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeacherComponent, other.TeacherComponent)) return false;
      if (!object.Equals(StudentComponent, other.StudentComponent)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teacherComponent_ != null) hash ^= TeacherComponent.GetHashCode();
      if (studentComponent_ != null) hash ^= StudentComponent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teacherComponent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeacherComponent);
      }
      if (studentComponent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StudentComponent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teacherComponent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeacherComponent);
      }
      if (studentComponent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StudentComponent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoTuningTrainingData other) {
      if (other == null) {
        return;
      }
      if (other.teacherComponent_ != null) {
        if (teacherComponent_ == null) {
          teacherComponent_ = new global::Apollo.PlanningInternal.CostComponents();
        }
        TeacherComponent.MergeFrom(other.TeacherComponent);
      }
      if (other.studentComponent_ != null) {
        if (studentComponent_ == null) {
          studentComponent_ = new global::Apollo.PlanningInternal.CostComponents();
        }
        StudentComponent.MergeFrom(other.StudentComponent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teacherComponent_ == null) {
              teacherComponent_ = new global::Apollo.PlanningInternal.CostComponents();
            }
            input.ReadMessage(teacherComponent_);
            break;
          }
          case 18: {
            if (studentComponent_ == null) {
              studentComponent_ = new global::Apollo.PlanningInternal.CostComponents();
            }
            input.ReadMessage(studentComponent_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloudReferenceLineRequest : pb::IMessage<CloudReferenceLineRequest> {
    private static readonly pb::MessageParser<CloudReferenceLineRequest> _parser = new pb::MessageParser<CloudReferenceLineRequest>(() => new CloudReferenceLineRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudReferenceLineRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineRequest(CloudReferenceLineRequest other) : this() {
      laneSegment_ = other.laneSegment_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineRequest Clone() {
      return new CloudReferenceLineRequest(this);
    }

    /// <summary>Field number for the "lane_segment" field.</summary>
    public const int LaneSegmentFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Routing.LaneSegment> _repeated_laneSegment_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Routing.LaneSegment.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.LaneSegment> laneSegment_ = new pbc::RepeatedField<global::Apollo.Routing.LaneSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.LaneSegment> LaneSegment {
      get { return laneSegment_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudReferenceLineRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudReferenceLineRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!laneSegment_.Equals(other.laneSegment_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= laneSegment_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      laneSegment_.WriteTo(output, _repeated_laneSegment_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += laneSegment_.CalculateSize(_repeated_laneSegment_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudReferenceLineRequest other) {
      if (other == null) {
        return;
      }
      laneSegment_.Add(other.laneSegment_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            laneSegment_.AddEntriesFrom(input, _repeated_laneSegment_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloudReferenceLineRoutingRequest : pb::IMessage<CloudReferenceLineRoutingRequest> {
    private static readonly pb::MessageParser<CloudReferenceLineRoutingRequest> _parser = new pb::MessageParser<CloudReferenceLineRoutingRequest>(() => new CloudReferenceLineRoutingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudReferenceLineRoutingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineRoutingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineRoutingRequest(CloudReferenceLineRoutingRequest other) : this() {
      Routing = other.routing_ != null ? other.Routing.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineRoutingRequest Clone() {
      return new CloudReferenceLineRoutingRequest(this);
    }

    /// <summary>Field number for the "routing" field.</summary>
    public const int RoutingFieldNumber = 1;
    private global::Apollo.Routing.RoutingResponse routing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.RoutingResponse Routing {
      get { return routing_; }
      set {
        routing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudReferenceLineRoutingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudReferenceLineRoutingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Routing, other.Routing)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (routing_ != null) hash ^= Routing.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (routing_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Routing);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (routing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Routing);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudReferenceLineRoutingRequest other) {
      if (other == null) {
        return;
      }
      if (other.routing_ != null) {
        if (routing_ == null) {
          routing_ = new global::Apollo.Routing.RoutingResponse();
        }
        Routing.MergeFrom(other.Routing);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (routing_ == null) {
              routing_ = new global::Apollo.Routing.RoutingResponse();
            }
            input.ReadMessage(routing_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloudReferenceLineResponse : pb::IMessage<CloudReferenceLineResponse> {
    private static readonly pb::MessageParser<CloudReferenceLineResponse> _parser = new pb::MessageParser<CloudReferenceLineResponse>(() => new CloudReferenceLineResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudReferenceLineResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineResponse(CloudReferenceLineResponse other) : this() {
      segment_ = other.segment_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudReferenceLineResponse Clone() {
      return new CloudReferenceLineResponse(this);
    }

    /// <summary>Field number for the "segment" field.</summary>
    public const int SegmentFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.Path> _repeated_segment_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.Path.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Path> segment_ = new pbc::RepeatedField<global::Apollo.Common.Path>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Path> Segment {
      get { return segment_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudReferenceLineResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudReferenceLineResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segment_.Equals(other.segment_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segment_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      segment_.WriteTo(output, _repeated_segment_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segment_.CalculateSize(_repeated_segment_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudReferenceLineResponse other) {
      if (other == null) {
        return;
      }
      segment_.Add(other.segment_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            segment_.AddEntriesFrom(input, _repeated_segment_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
