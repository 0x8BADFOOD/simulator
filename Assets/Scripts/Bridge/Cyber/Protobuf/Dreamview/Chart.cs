// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/chart.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Dreamview {

  /// <summary>Holder for reflection information generated from modules/dreamview/proto/chart.proto</summary>
  public static partial class ChartReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/dreamview/proto/chart.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChartReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNtb2R1bGVzL2RyZWFtdmlldy9wcm90by9jaGFydC5wcm90bxIQYXBvbGxv",
            "LmRyZWFtdmlldxojbW9kdWxlcy9jb21tb24vcHJvdG8vZ2VvbWV0cnkucHJv",
            "dG8i6gEKB09wdGlvbnMSFgoObGVnZW5kX2Rpc3BsYXkYASABKAgSKQoBeBgC",
            "IAEoCzIeLmFwb2xsby5kcmVhbXZpZXcuT3B0aW9ucy5BeGlzEikKAXkYAyAB",
            "KAsyHi5hcG9sbG8uZHJlYW12aWV3Lk9wdGlvbnMuQXhpcxpxCgRBeGlzEgsK",
            "A21pbhgBIAEoARILCgNtYXgYAiABKAESFAoMbGFiZWxfc3RyaW5nGAMgASgJ",
            "EhMKC3dpbmRvd19zaXplGAQgASgBEhEKCXN0ZXBfc2l6ZRgFIAEoARIRCglt",
            "aWRfdmFsdWUYBiABKAEiqwEKBExpbmUSDQoFbGFiZWwYASABKAkSJQoFcG9p",
            "bnQYAiADKAsyFi5hcG9sbG8uY29tbW9uLlBvaW50MkQSOgoKcHJvcGVydGll",
            "cxgDIAMoCzImLmFwb2xsby5kcmVhbXZpZXcuTGluZS5Qcm9wZXJ0aWVzRW50",
            "cnkaMQoPUHJvcGVydGllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEisQEKB1BvbHlnb24SDQoFbGFiZWwYASABKAkSJQoFcG9pbnQY",
            "AiADKAsyFi5hcG9sbG8uY29tbW9uLlBvaW50MkQSPQoKcHJvcGVydGllcxgD",
            "IAMoCzIpLmFwb2xsby5kcmVhbXZpZXcuUG9seWdvbi5Qcm9wZXJ0aWVzRW50",
            "cnkaMQoPUHJvcGVydGllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEiSgoDQ2FyEg0KBWxhYmVsGAEgASgJEgkKAXgYAiABKAESCQoB",
            "eRgDIAEoARIPCgdoZWFkaW5nGAQgASgBEg0KBWNvbG9yGAUgASgJIrgBCgVD",
            "aGFydBINCgV0aXRsZRgBIAEoCRIqCgdvcHRpb25zGAIgASgLMhkuYXBvbGxv",
            "LmRyZWFtdmlldy5PcHRpb25zEiQKBGxpbmUYAyADKAsyFi5hcG9sbG8uZHJl",
            "YW12aWV3LkxpbmUSKgoHcG9seWdvbhgEIAMoCzIZLmFwb2xsby5kcmVhbXZp",
            "ZXcuUG9seWdvbhIiCgNjYXIYBSADKAsyFS5hcG9sbG8uZHJlYW12aWV3LkNh",
            "cmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Options), global::Apollo.Dreamview.Options.Parser, new[]{ "LegendDisplay", "X", "Y" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Options.Types.Axis), global::Apollo.Dreamview.Options.Types.Axis.Parser, new[]{ "Min", "Max", "LabelString", "WindowSize", "StepSize", "MidValue" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Line), global::Apollo.Dreamview.Line.Parser, new[]{ "Label", "Point", "Properties" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Polygon), global::Apollo.Dreamview.Polygon.Parser, new[]{ "Label", "Point", "Properties" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Car), global::Apollo.Dreamview.Car.Parser, new[]{ "Label", "X", "Y", "Heading", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Chart), global::Apollo.Dreamview.Chart.Parser, new[]{ "Title", "Options", "Line", "Polygon", "Car" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Options : pb::IMessage<Options> {
    private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Options> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.ChartReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Options() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Options(Options other) : this() {
      legendDisplay_ = other.legendDisplay_;
      X = other.x_ != null ? other.X.Clone() : null;
      Y = other.y_ != null ? other.Y.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Options Clone() {
      return new Options(this);
    }

    /// <summary>Field number for the "legend_display" field.</summary>
    public const int LegendDisplayFieldNumber = 1;
    private bool legendDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LegendDisplay {
      get { return legendDisplay_; }
      set {
        legendDisplay_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private global::Apollo.Dreamview.Options.Types.Axis x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Options.Types.Axis X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private global::Apollo.Dreamview.Options.Types.Axis y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Options.Types.Axis Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Options);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Options other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LegendDisplay != other.LegendDisplay) return false;
      if (!object.Equals(X, other.X)) return false;
      if (!object.Equals(Y, other.Y)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LegendDisplay != false) hash ^= LegendDisplay.GetHashCode();
      if (x_ != null) hash ^= X.GetHashCode();
      if (y_ != null) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LegendDisplay != false) {
        output.WriteRawTag(8);
        output.WriteBool(LegendDisplay);
      }
      if (x_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(X);
      }
      if (y_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LegendDisplay != false) {
        size += 1 + 1;
      }
      if (x_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(X);
      }
      if (y_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Options other) {
      if (other == null) {
        return;
      }
      if (other.LegendDisplay != false) {
        LegendDisplay = other.LegendDisplay;
      }
      if (other.x_ != null) {
        if (x_ == null) {
          x_ = new global::Apollo.Dreamview.Options.Types.Axis();
        }
        X.MergeFrom(other.X);
      }
      if (other.y_ != null) {
        if (y_ == null) {
          y_ = new global::Apollo.Dreamview.Options.Types.Axis();
        }
        Y.MergeFrom(other.Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LegendDisplay = input.ReadBool();
            break;
          }
          case 18: {
            if (x_ == null) {
              x_ = new global::Apollo.Dreamview.Options.Types.Axis();
            }
            input.ReadMessage(x_);
            break;
          }
          case 26: {
            if (y_ == null) {
              y_ = new global::Apollo.Dreamview.Options.Types.Axis();
            }
            input.ReadMessage(y_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Options message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Axis : pb::IMessage<Axis> {
        private static readonly pb::MessageParser<Axis> _parser = new pb::MessageParser<Axis>(() => new Axis());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Axis> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Dreamview.Options.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Axis() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Axis(Axis other) : this() {
          min_ = other.min_;
          max_ = other.max_;
          labelString_ = other.labelString_;
          windowSize_ = other.windowSize_;
          stepSize_ = other.stepSize_;
          midValue_ = other.midValue_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Axis Clone() {
          return new Axis(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private double min_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Min {
          get { return min_; }
          set {
            min_ = value;
          }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private double max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        /// <summary>Field number for the "label_string" field.</summary>
        public const int LabelStringFieldNumber = 3;
        private string labelString_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LabelString {
          get { return labelString_; }
          set {
            labelString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "window_size" field.</summary>
        public const int WindowSizeFieldNumber = 4;
        private double windowSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double WindowSize {
          get { return windowSize_; }
          set {
            windowSize_ = value;
          }
        }

        /// <summary>Field number for the "step_size" field.</summary>
        public const int StepSizeFieldNumber = 5;
        private double stepSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double StepSize {
          get { return stepSize_; }
          set {
            stepSize_ = value;
          }
        }

        /// <summary>Field number for the "mid_value" field.</summary>
        public const int MidValueFieldNumber = 6;
        private double midValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MidValue {
          get { return midValue_; }
          set {
            midValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Axis);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Axis other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Min != other.Min) return false;
          if (Max != other.Max) return false;
          if (LabelString != other.LabelString) return false;
          if (WindowSize != other.WindowSize) return false;
          if (StepSize != other.StepSize) return false;
          if (MidValue != other.MidValue) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Min != 0D) hash ^= Min.GetHashCode();
          if (Max != 0D) hash ^= Max.GetHashCode();
          if (LabelString.Length != 0) hash ^= LabelString.GetHashCode();
          if (WindowSize != 0D) hash ^= WindowSize.GetHashCode();
          if (StepSize != 0D) hash ^= StepSize.GetHashCode();
          if (MidValue != 0D) hash ^= MidValue.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Min != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Min);
          }
          if (Max != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Max);
          }
          if (LabelString.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LabelString);
          }
          if (WindowSize != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(WindowSize);
          }
          if (StepSize != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(StepSize);
          }
          if (MidValue != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(MidValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Min != 0D) {
            size += 1 + 8;
          }
          if (Max != 0D) {
            size += 1 + 8;
          }
          if (LabelString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LabelString);
          }
          if (WindowSize != 0D) {
            size += 1 + 8;
          }
          if (StepSize != 0D) {
            size += 1 + 8;
          }
          if (MidValue != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Axis other) {
          if (other == null) {
            return;
          }
          if (other.Min != 0D) {
            Min = other.Min;
          }
          if (other.Max != 0D) {
            Max = other.Max;
          }
          if (other.LabelString.Length != 0) {
            LabelString = other.LabelString;
          }
          if (other.WindowSize != 0D) {
            WindowSize = other.WindowSize;
          }
          if (other.StepSize != 0D) {
            StepSize = other.StepSize;
          }
          if (other.MidValue != 0D) {
            MidValue = other.MidValue;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                Min = input.ReadDouble();
                break;
              }
              case 17: {
                Max = input.ReadDouble();
                break;
              }
              case 26: {
                LabelString = input.ReadString();
                break;
              }
              case 33: {
                WindowSize = input.ReadDouble();
                break;
              }
              case 41: {
                StepSize = input.ReadDouble();
                break;
              }
              case 49: {
                MidValue = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Line : pb::IMessage<Line> {
    private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Line> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.ChartReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line(Line other) : this() {
      label_ = other.label_;
      point_ = other.point_.Clone();
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line Clone() {
      return new Line(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.Point2D> _repeated_point_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.Point2D.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Point2D> point_ = new pbc::RepeatedField<global::Apollo.Common.Point2D>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Point2D> Point {
      get { return point_; }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    /// <summary>
    /// If the 'color' property is undefined, a random one will be assigned.
    /// See http://www.chartjs.org/docs/latest/charts/line.html
    /// for all supported properties from chart.js
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Line);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Line other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if(!point_.Equals(other.point_)) return false;
      if (!Properties.Equals(other.Properties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= point_.GetHashCode();
      hash ^= Properties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      point_.WriteTo(output, _repeated_point_codec);
      properties_.WriteTo(output, _map_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += point_.CalculateSize(_repeated_point_codec);
      size += properties_.CalculateSize(_map_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Line other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      point_.Add(other.point_);
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 18: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
          case 26: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Polygon : pb::IMessage<Polygon> {
    private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.ChartReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon(Polygon other) : this() {
      label_ = other.label_;
      point_ = other.point_.Clone();
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon Clone() {
      return new Polygon(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Common.Point2D> _repeated_point_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Common.Point2D.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Point2D> point_ = new pbc::RepeatedField<global::Apollo.Common.Point2D>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Point2D> Point {
      get { return point_; }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    /// <summary>
    /// If the 'color' property is undefined, a random one will be assigned.
    /// See http://www.chartjs.org/docs/latest/charts/line.html
    /// for all supported properties from chart.js
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Polygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if(!point_.Equals(other.point_)) return false;
      if (!Properties.Equals(other.Properties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= point_.GetHashCode();
      hash ^= Properties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      point_.WriteTo(output, _repeated_point_codec);
      properties_.WriteTo(output, _map_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += point_.CalculateSize(_repeated_point_codec);
      size += properties_.CalculateSize(_map_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polygon other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      point_.Add(other.point_);
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 18: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
          case 26: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Car : pb::IMessage<Car> {
    private static readonly pb::MessageParser<Car> _parser = new pb::MessageParser<Car>(() => new Car());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Car> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.ChartReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Car() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Car(Car other) : this() {
      label_ = other.label_;
      x_ = other.x_;
      y_ = other.y_;
      heading_ = other.heading_;
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Car Clone() {
      return new Car(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 4;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Car);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Car other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Heading != other.Heading) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (X != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Y);
      }
      if (Heading != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Heading);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Car other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 17: {
            X = input.ReadDouble();
            break;
          }
          case 25: {
            Y = input.ReadDouble();
            break;
          }
          case 33: {
            Heading = input.ReadDouble();
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chart : pb::IMessage<Chart> {
    private static readonly pb::MessageParser<Chart> _parser = new pb::MessageParser<Chart>(() => new Chart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.ChartReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chart(Chart other) : this() {
      title_ = other.title_;
      Options = other.options_ != null ? other.Options.Clone() : null;
      line_ = other.line_.Clone();
      polygon_ = other.polygon_.Clone();
      car_ = other.car_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chart Clone() {
      return new Chart(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private global::Apollo.Dreamview.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Line> _repeated_line_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Dreamview.Line.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Line> line_ = new pbc::RepeatedField<global::Apollo.Dreamview.Line>();
    /// <summary>
    /// data sets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Line> Line {
      get { return line_; }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Polygon> _repeated_polygon_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Dreamview.Polygon.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Polygon> polygon_ = new pbc::RepeatedField<global::Apollo.Dreamview.Polygon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Polygon> Polygon {
      get { return polygon_; }
    }

    /// <summary>Field number for the "car" field.</summary>
    public const int CarFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Car> _repeated_car_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Dreamview.Car.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Car> car_ = new pbc::RepeatedField<global::Apollo.Dreamview.Car>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Car> Car {
      get { return car_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (!object.Equals(Options, other.Options)) return false;
      if(!line_.Equals(other.line_)) return false;
      if(!polygon_.Equals(other.polygon_)) return false;
      if(!car_.Equals(other.car_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      hash ^= line_.GetHashCode();
      hash ^= polygon_.GetHashCode();
      hash ^= car_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (options_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Options);
      }
      line_.WriteTo(output, _repeated_line_codec);
      polygon_.WriteTo(output, _repeated_polygon_codec);
      car_.WriteTo(output, _repeated_car_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      size += line_.CalculateSize(_repeated_line_codec);
      size += polygon_.CalculateSize(_repeated_polygon_codec);
      size += car_.CalculateSize(_repeated_car_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chart other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Apollo.Dreamview.Options();
        }
        Options.MergeFrom(other.Options);
      }
      line_.Add(other.line_);
      polygon_.Add(other.polygon_);
      car_.Add(other.car_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            if (options_ == null) {
              options_ = new global::Apollo.Dreamview.Options();
            }
            input.ReadMessage(options_);
            break;
          }
          case 26: {
            line_.AddEntriesFrom(input, _repeated_line_codec);
            break;
          }
          case 34: {
            polygon_.AddEntriesFrom(input, _repeated_polygon_codec);
            break;
          }
          case 42: {
            car_.AddEntriesFrom(input, _repeated_car_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
