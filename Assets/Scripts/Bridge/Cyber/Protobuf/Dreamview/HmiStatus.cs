// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_status.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Dreamview {

  /// <summary>Holder for reflection information generated from modules/dreamview/proto/hmi_status.proto</summary>
  public static partial class HmiStatusReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/dreamview/proto/hmi_status.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HmiStatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihtb2R1bGVzL2RyZWFtdmlldy9wcm90by9obWlfc3RhdHVzLnByb3RvEhBh",
            "cG9sbG8uZHJlYW12aWV3GiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFkZXIu",
            "cHJvdG8aKW1vZHVsZXMvbW9uaXRvci9wcm90by9zeXN0ZW1fc3RhdHVzLnBy",
            "b3RvIoMECglITUlTdGF0dXMSJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNv",
            "bW1vbi5IZWFkZXISDQoFbW9kZXMYAiADKAkSFAoMY3VycmVudF9tb2RlGAMg",
            "ASgJEgwKBG1hcHMYBCADKAkSEwoLY3VycmVudF9tYXAYBSABKAkSEAoIdmVo",
            "aWNsZXMYBiADKAkSFwoPY3VycmVudF92ZWhpY2xlGAcgASgJEjkKB21vZHVs",
            "ZXMYCCADKAsyKC5hcG9sbG8uZHJlYW12aWV3LkhNSVN0YXR1cy5Nb2R1bGVz",
            "RW50cnkSUgoUbW9uaXRvcmVkX2NvbXBvbmVudHMYCSADKAsyNC5hcG9sbG8u",
            "ZHJlYW12aWV3LkhNSVN0YXR1cy5Nb25pdG9yZWRDb21wb25lbnRzRW50cnkS",
            "FAoMZG9ja2VyX2ltYWdlGAogASgJEhMKC3V0bV96b25lX2lkGAsgASgFEhUK",
            "DXBhc3Nlbmdlcl9tc2cYDCABKAkaLgoMTW9kdWxlc0VudHJ5EgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoCDoCOAEaWwoYTW9uaXRvcmVkQ29tcG9uZW50",
            "c0VudHJ5EgsKA2tleRgBIAEoCRIuCgV2YWx1ZRgCIAEoCzIfLmFwb2xsby5t",
            "b25pdG9yLkNvbXBvbmVudFN0YXR1czoCOAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Monitor.SystemStatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.HMIStatus), global::Apollo.Dreamview.HMIStatus.Parser, new[]{ "Header", "Modes", "CurrentMode", "Maps", "CurrentMap", "Vehicles", "CurrentVehicle", "Modules", "MonitoredComponents", "DockerImage", "UtmZoneId", "PassengerMsg" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HMIStatus : pb::IMessage<HMIStatus> {
    private static readonly pb::MessageParser<HMIStatus> _parser = new pb::MessageParser<HMIStatus>(() => new HMIStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HMIStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiStatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIStatus(HMIStatus other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      modes_ = other.modes_.Clone();
      currentMode_ = other.currentMode_;
      maps_ = other.maps_.Clone();
      currentMap_ = other.currentMap_;
      vehicles_ = other.vehicles_.Clone();
      currentVehicle_ = other.currentVehicle_;
      modules_ = other.modules_.Clone();
      monitoredComponents_ = other.monitoredComponents_.Clone();
      dockerImage_ = other.dockerImage_;
      utmZoneId_ = other.utmZoneId_;
      passengerMsg_ = other.passengerMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIStatus Clone() {
      return new HMIStatus(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "modes" field.</summary>
    public const int ModesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_modes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> modes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Modes {
      get { return modes_; }
    }

    /// <summary>Field number for the "current_mode" field.</summary>
    public const int CurrentModeFieldNumber = 3;
    private string currentMode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentMode {
      get { return currentMode_; }
      set {
        currentMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_maps_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> maps_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Maps {
      get { return maps_; }
    }

    /// <summary>Field number for the "current_map" field.</summary>
    public const int CurrentMapFieldNumber = 5;
    private string currentMap_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentMap {
      get { return currentMap_; }
      set {
        currentMap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vehicles" field.</summary>
    public const int VehiclesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_vehicles_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> vehicles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Vehicles {
      get { return vehicles_; }
    }

    /// <summary>Field number for the "current_vehicle" field.</summary>
    public const int CurrentVehicleFieldNumber = 7;
    private string currentVehicle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentVehicle {
      get { return currentVehicle_; }
      set {
        currentVehicle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modules" field.</summary>
    public const int ModulesFieldNumber = 8;
    private static readonly pbc::MapField<string, bool>.Codec _map_modules_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 66);
    private readonly pbc::MapField<string, bool> modules_ = new pbc::MapField<string, bool>();
    /// <summary>
    /// {module_name: is_running_or_not}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> Modules {
      get { return modules_; }
    }

    /// <summary>Field number for the "monitored_components" field.</summary>
    public const int MonitoredComponentsFieldNumber = 9;
    private static readonly pbc::MapField<string, global::Apollo.Monitor.ComponentStatus>.Codec _map_monitoredComponents_codec
        = new pbc::MapField<string, global::Apollo.Monitor.ComponentStatus>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Apollo.Monitor.ComponentStatus.Parser), 74);
    private readonly pbc::MapField<string, global::Apollo.Monitor.ComponentStatus> monitoredComponents_ = new pbc::MapField<string, global::Apollo.Monitor.ComponentStatus>();
    /// <summary>
    /// {component_name: status}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Apollo.Monitor.ComponentStatus> MonitoredComponents {
      get { return monitoredComponents_; }
    }

    /// <summary>Field number for the "docker_image" field.</summary>
    public const int DockerImageFieldNumber = 10;
    private string dockerImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DockerImage {
      get { return dockerImage_; }
      set {
        dockerImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "utm_zone_id" field.</summary>
    public const int UtmZoneIdFieldNumber = 11;
    private int utmZoneId_;
    /// <summary>
    /// FLAGS_local_utm_zone_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UtmZoneId {
      get { return utmZoneId_; }
      set {
        utmZoneId_ = value;
      }
    }

    /// <summary>Field number for the "passenger_msg" field.</summary>
    public const int PassengerMsgFieldNumber = 12;
    private string passengerMsg_ = "";
    /// <summary>
    /// Message which will be read aloud to drivers and passengers through
    /// Dreamview.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassengerMsg {
      get { return passengerMsg_; }
      set {
        passengerMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HMIStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HMIStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!modes_.Equals(other.modes_)) return false;
      if (CurrentMode != other.CurrentMode) return false;
      if(!maps_.Equals(other.maps_)) return false;
      if (CurrentMap != other.CurrentMap) return false;
      if(!vehicles_.Equals(other.vehicles_)) return false;
      if (CurrentVehicle != other.CurrentVehicle) return false;
      if (!Modules.Equals(other.Modules)) return false;
      if (!MonitoredComponents.Equals(other.MonitoredComponents)) return false;
      if (DockerImage != other.DockerImage) return false;
      if (UtmZoneId != other.UtmZoneId) return false;
      if (PassengerMsg != other.PassengerMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= modes_.GetHashCode();
      if (CurrentMode.Length != 0) hash ^= CurrentMode.GetHashCode();
      hash ^= maps_.GetHashCode();
      if (CurrentMap.Length != 0) hash ^= CurrentMap.GetHashCode();
      hash ^= vehicles_.GetHashCode();
      if (CurrentVehicle.Length != 0) hash ^= CurrentVehicle.GetHashCode();
      hash ^= Modules.GetHashCode();
      hash ^= MonitoredComponents.GetHashCode();
      if (DockerImage.Length != 0) hash ^= DockerImage.GetHashCode();
      if (UtmZoneId != 0) hash ^= UtmZoneId.GetHashCode();
      if (PassengerMsg.Length != 0) hash ^= PassengerMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      modes_.WriteTo(output, _repeated_modes_codec);
      if (CurrentMode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrentMode);
      }
      maps_.WriteTo(output, _repeated_maps_codec);
      if (CurrentMap.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrentMap);
      }
      vehicles_.WriteTo(output, _repeated_vehicles_codec);
      if (CurrentVehicle.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentVehicle);
      }
      modules_.WriteTo(output, _map_modules_codec);
      monitoredComponents_.WriteTo(output, _map_monitoredComponents_codec);
      if (DockerImage.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DockerImage);
      }
      if (UtmZoneId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UtmZoneId);
      }
      if (PassengerMsg.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PassengerMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += modes_.CalculateSize(_repeated_modes_codec);
      if (CurrentMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentMode);
      }
      size += maps_.CalculateSize(_repeated_maps_codec);
      if (CurrentMap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentMap);
      }
      size += vehicles_.CalculateSize(_repeated_vehicles_codec);
      if (CurrentVehicle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentVehicle);
      }
      size += modules_.CalculateSize(_map_modules_codec);
      size += monitoredComponents_.CalculateSize(_map_monitoredComponents_codec);
      if (DockerImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DockerImage);
      }
      if (UtmZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UtmZoneId);
      }
      if (PassengerMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassengerMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HMIStatus other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      modes_.Add(other.modes_);
      if (other.CurrentMode.Length != 0) {
        CurrentMode = other.CurrentMode;
      }
      maps_.Add(other.maps_);
      if (other.CurrentMap.Length != 0) {
        CurrentMap = other.CurrentMap;
      }
      vehicles_.Add(other.vehicles_);
      if (other.CurrentVehicle.Length != 0) {
        CurrentVehicle = other.CurrentVehicle;
      }
      modules_.Add(other.modules_);
      monitoredComponents_.Add(other.monitoredComponents_);
      if (other.DockerImage.Length != 0) {
        DockerImage = other.DockerImage;
      }
      if (other.UtmZoneId != 0) {
        UtmZoneId = other.UtmZoneId;
      }
      if (other.PassengerMsg.Length != 0) {
        PassengerMsg = other.PassengerMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            modes_.AddEntriesFrom(input, _repeated_modes_codec);
            break;
          }
          case 26: {
            CurrentMode = input.ReadString();
            break;
          }
          case 34: {
            maps_.AddEntriesFrom(input, _repeated_maps_codec);
            break;
          }
          case 42: {
            CurrentMap = input.ReadString();
            break;
          }
          case 50: {
            vehicles_.AddEntriesFrom(input, _repeated_vehicles_codec);
            break;
          }
          case 58: {
            CurrentVehicle = input.ReadString();
            break;
          }
          case 66: {
            modules_.AddEntriesFrom(input, _map_modules_codec);
            break;
          }
          case 74: {
            monitoredComponents_.AddEntriesFrom(input, _map_monitoredComponents_codec);
            break;
          }
          case 82: {
            DockerImage = input.ReadString();
            break;
          }
          case 88: {
            UtmZoneId = input.ReadInt32();
            break;
          }
          case 98: {
            PassengerMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
