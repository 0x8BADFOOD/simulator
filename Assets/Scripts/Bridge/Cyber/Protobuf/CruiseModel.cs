// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/prediction/mlp_train/proto/cruise_model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from modules/tools/prediction/mlp_train/proto/cruise_model.proto</summary>
public static partial class CruiseModelReflection {

  #region Descriptor
  /// <summary>File descriptor for modules/tools/prediction/mlp_train/proto/cruise_model.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CruiseModelReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cjttb2R1bGVzL3Rvb2xzL3ByZWRpY3Rpb24vbWxwX3RyYWluL3Byb3RvL2Ny",
          "dWlzZV9tb2RlbC5wcm90byIuCg9UZW5zb3JQYXJhbWV0ZXISDAoEZGF0YRgB",
          "IAMoAhINCgVzaGFwZRgCIAMoBSJECg5JbnB1dFBhcmFtZXRlchITCgtpbnB1",
          "dF9zaGFwZRgBIAMoBRINCgVkdHlwZRgCIAEoCRIOCgZzcGFyc2UYAyABKAgi",
          "hAEKD0NvbnYxZFBhcmFtZXRlchINCgVzaGFwZRgBIAMoBRIQCgh1c2VfYmlh",
          "cxgCIAEoCBIgCgZrZXJuZWwYAyABKAsyEC5UZW5zb3JQYXJhbWV0ZXISHgoE",
          "YmlhcxgEIAEoCzIQLlRlbnNvclBhcmFtZXRlchIOCgZzdHJpZGUYBSABKAUi",
          "iAEKDkRlbnNlUGFyYW1ldGVyEg0KBXVuaXRzGAEgASgFEhIKCmFjdGl2YXRp",
          "b24YAiABKAkSEAoIdXNlX2JpYXMYAyABKAgSIQoHd2VpZ2h0cxgEIAEoCzIQ",
          "LlRlbnNvclBhcmFtZXRlchIeCgRiaWFzGAUgASgLMhAuVGVuc29yUGFyYW1l",
          "dGVyIikKE0FjdGl2YXRpb25QYXJhbWV0ZXISEgoKYWN0aXZhdGlvbhgBIAEo",
          "CSI5ChJNYXhQb29sMWRQYXJhbWV0ZXISEwoLa2VybmVsX3NpemUYASABKAUS",
          "DgoGc3RyaWRlGAIgASgFIjkKEkF2Z1Bvb2wxZFBhcmFtZXRlchITCgtrZXJu",
          "ZWxfc2l6ZRgBIAEoBRIOCgZzdHJpZGUYAiABKAUi3gEKGExhbmVGZWF0dXJl",
          "Q29udlBhcmFtZXRlchIiCghjb252MWRfMBgBIAEoCzIQLkNvbnYxZFBhcmFt",
          "ZXRlchIqCgxhY3RpdmF0aW9uXzEYAiABKAsyFC5BY3RpdmF0aW9uUGFyYW1l",
          "dGVyEiIKCGNvbnYxZF8yGAMgASgLMhAuQ29udjFkUGFyYW1ldGVyEioKDGFj",
          "dGl2YXRpb25fMxgEIAEoCzIULkFjdGl2YXRpb25QYXJhbWV0ZXISIgoIY29u",
          "djFkXzQYBSABKAsyEC5Db252MWRQYXJhbWV0ZXIitQEKFU9ic0ZlYXR1cmVG",
          "Q1BhcmFtZXRlchIhCghsaW5lYXJfMBgBIAEoCzIPLkRlbnNlUGFyYW1ldGVy",
          "EioKDGFjdGl2YXRpb25fMRgCIAEoCzIULkFjdGl2YXRpb25QYXJhbWV0ZXIS",
          "IQoIbGluZWFyXzMYAyABKAsyDy5EZW5zZVBhcmFtZXRlchIqCgxhY3RpdmF0",
          "aW9uXzQYBCABKAsyFC5BY3RpdmF0aW9uUGFyYW1ldGVyItACChFDbGFzc2lm",
          "eVBhcmFtZXRlchIhCghsaW5lYXJfMBgBIAEoCzIPLkRlbnNlUGFyYW1ldGVy",
          "EioKDGFjdGl2YXRpb25fMRgCIAEoCzIULkFjdGl2YXRpb25QYXJhbWV0ZXIS",
          "IQoIbGluZWFyXzMYAyABKAsyDy5EZW5zZVBhcmFtZXRlchIqCgxhY3RpdmF0",
          "aW9uXzQYBCABKAsyFC5BY3RpdmF0aW9uUGFyYW1ldGVyEiEKCGxpbmVhcl82",
          "GAUgASgLMg8uRGVuc2VQYXJhbWV0ZXISKgoMYWN0aXZhdGlvbl83GAYgASgL",
          "MhQuQWN0aXZhdGlvblBhcmFtZXRlchIhCghsaW5lYXJfORgHIAEoCzIPLkRl",
          "bnNlUGFyYW1ldGVyEisKDWFjdGl2YXRpb25fMTAYCCABKAsyFC5BY3RpdmF0",
          "aW9uUGFyYW1ldGVyIs8CChBSZWdyZXNzUGFyYW1ldGVyEiEKCGxpbmVhcl8w",
          "GAEgASgLMg8uRGVuc2VQYXJhbWV0ZXISKgoMYWN0aXZhdGlvbl8xGAIgASgL",
          "MhQuQWN0aXZhdGlvblBhcmFtZXRlchIhCghsaW5lYXJfMxgDIAEoCzIPLkRl",
          "bnNlUGFyYW1ldGVyEioKDGFjdGl2YXRpb25fNBgEIAEoCzIULkFjdGl2YXRp",
          "b25QYXJhbWV0ZXISIQoIbGluZWFyXzYYBSABKAsyDy5EZW5zZVBhcmFtZXRl",
          "chIqCgxhY3RpdmF0aW9uXzcYBiABKAsyFC5BY3RpdmF0aW9uUGFyYW1ldGVy",
          "EiEKCGxpbmVhcl85GAcgASgLMg8uRGVuc2VQYXJhbWV0ZXISKwoNYWN0aXZh",
          "dGlvbl8xMBgIIAEoCzIULkFjdGl2YXRpb25QYXJhbWV0ZXIirAIKFENydWlz",
          "ZU1vZGVsUGFyYW1ldGVyEjQKEWxhbmVfZmVhdHVyZV9jb252GAEgASgLMhku",
          "TGFuZUZlYXR1cmVDb252UGFyYW1ldGVyEjEKFGxhbmVfZmVhdHVyZV9tYXhw",
          "b29sGAIgASgLMhMuTWF4UG9vbDFkUGFyYW1ldGVyEjEKFGxhbmVfZmVhdHVy",
          "ZV9hdmdwb29sGAMgASgLMhMuQXZnUG9vbDFkUGFyYW1ldGVyEi4KDm9ic19m",
          "ZWF0dXJlX2ZjGAUgASgLMhYuT2JzRmVhdHVyZUZDUGFyYW1ldGVyEiQKCGNs",
          "YXNzaWZ5GAYgASgLMhIuQ2xhc3NpZnlQYXJhbWV0ZXISIgoHcmVncmVzcxgH",
          "IAEoCzIRLlJlZ3Jlc3NQYXJhbWV0ZXJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TensorParameter), global::TensorParameter.Parser, new[]{ "Data", "Shape" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputParameter), global::InputParameter.Parser, new[]{ "InputShape", "Dtype", "Sparse" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Conv1dParameter), global::Conv1dParameter.Parser, new[]{ "Shape", "UseBias", "Kernel", "Bias", "Stride" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DenseParameter), global::DenseParameter.Parser, new[]{ "Units", "Activation", "UseBias", "Weights", "Bias" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ActivationParameter), global::ActivationParameter.Parser, new[]{ "Activation" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MaxPool1dParameter), global::MaxPool1dParameter.Parser, new[]{ "KernelSize", "Stride" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AvgPool1dParameter), global::AvgPool1dParameter.Parser, new[]{ "KernelSize", "Stride" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LaneFeatureConvParameter), global::LaneFeatureConvParameter.Parser, new[]{ "Conv1D0", "Activation1", "Conv1D2", "Activation3", "Conv1D4" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObsFeatureFCParameter), global::ObsFeatureFCParameter.Parser, new[]{ "Linear0", "Activation1", "Linear3", "Activation4" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClassifyParameter), global::ClassifyParameter.Parser, new[]{ "Linear0", "Activation1", "Linear3", "Activation4", "Linear6", "Activation7", "Linear9", "Activation10" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegressParameter), global::RegressParameter.Parser, new[]{ "Linear0", "Activation1", "Linear3", "Activation4", "Linear6", "Activation7", "Linear9", "Activation10" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CruiseModelParameter), global::CruiseModelParameter.Parser, new[]{ "LaneFeatureConv", "LaneFeatureMaxpool", "LaneFeatureAvgpool", "ObsFeatureFc", "Classify", "Regress" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class TensorParameter : pb::IMessage<TensorParameter> {
  private static readonly pb::MessageParser<TensorParameter> _parser = new pb::MessageParser<TensorParameter>(() => new TensorParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TensorParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TensorParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TensorParameter(TensorParameter other) : this() {
    data_ = other.data_.Clone();
    shape_ = other.shape_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TensorParameter Clone() {
    return new TensorParameter(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pb::FieldCodec<float> _repeated_data_codec
      = pb::FieldCodec.ForFloat(10);
  private readonly pbc::RepeatedField<float> data_ = new pbc::RepeatedField<float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<float> Data {
    get { return data_; }
  }

  /// <summary>Field number for the "shape" field.</summary>
  public const int ShapeFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_shape_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> shape_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Shape {
    get { return shape_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TensorParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TensorParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!data_.Equals(other.data_)) return false;
    if(!shape_.Equals(other.shape_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= data_.GetHashCode();
    hash ^= shape_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    data_.WriteTo(output, _repeated_data_codec);
    shape_.WriteTo(output, _repeated_shape_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_repeated_data_codec);
    size += shape_.CalculateSize(_repeated_shape_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TensorParameter other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
    shape_.Add(other.shape_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 13: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
        case 18:
        case 16: {
          shape_.AddEntriesFrom(input, _repeated_shape_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class InputParameter : pb::IMessage<InputParameter> {
  private static readonly pb::MessageParser<InputParameter> _parser = new pb::MessageParser<InputParameter>(() => new InputParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputParameter(InputParameter other) : this() {
    inputShape_ = other.inputShape_.Clone();
    dtype_ = other.dtype_;
    sparse_ = other.sparse_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputParameter Clone() {
    return new InputParameter(this);
  }

  /// <summary>Field number for the "input_shape" field.</summary>
  public const int InputShapeFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_inputShape_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> inputShape_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> InputShape {
    get { return inputShape_; }
  }

  /// <summary>Field number for the "dtype" field.</summary>
  public const int DtypeFieldNumber = 2;
  private string dtype_ = "";
  /// <summary>
  /// data type of the input
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Dtype {
    get { return dtype_; }
    set {
      dtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sparse" field.</summary>
  public const int SparseFieldNumber = 3;
  private bool sparse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Sparse {
    get { return sparse_; }
    set {
      sparse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!inputShape_.Equals(other.inputShape_)) return false;
    if (Dtype != other.Dtype) return false;
    if (Sparse != other.Sparse) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= inputShape_.GetHashCode();
    if (Dtype.Length != 0) hash ^= Dtype.GetHashCode();
    if (Sparse != false) hash ^= Sparse.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    inputShape_.WriteTo(output, _repeated_inputShape_codec);
    if (Dtype.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Dtype);
    }
    if (Sparse != false) {
      output.WriteRawTag(24);
      output.WriteBool(Sparse);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += inputShape_.CalculateSize(_repeated_inputShape_codec);
    if (Dtype.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Dtype);
    }
    if (Sparse != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputParameter other) {
    if (other == null) {
      return;
    }
    inputShape_.Add(other.inputShape_);
    if (other.Dtype.Length != 0) {
      Dtype = other.Dtype;
    }
    if (other.Sparse != false) {
      Sparse = other.Sparse;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          inputShape_.AddEntriesFrom(input, _repeated_inputShape_codec);
          break;
        }
        case 18: {
          Dtype = input.ReadString();
          break;
        }
        case 24: {
          Sparse = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class Conv1dParameter : pb::IMessage<Conv1dParameter> {
  private static readonly pb::MessageParser<Conv1dParameter> _parser = new pb::MessageParser<Conv1dParameter>(() => new Conv1dParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Conv1dParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Conv1dParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Conv1dParameter(Conv1dParameter other) : this() {
    shape_ = other.shape_.Clone();
    useBias_ = other.useBias_;
    Kernel = other.kernel_ != null ? other.Kernel.Clone() : null;
    Bias = other.bias_ != null ? other.Bias.Clone() : null;
    stride_ = other.stride_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Conv1dParameter Clone() {
    return new Conv1dParameter(this);
  }

  /// <summary>Field number for the "shape" field.</summary>
  public const int ShapeFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_shape_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> shape_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Shape {
    get { return shape_; }
  }

  /// <summary>Field number for the "use_bias" field.</summary>
  public const int UseBiasFieldNumber = 2;
  private bool useBias_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseBias {
    get { return useBias_; }
    set {
      useBias_ = value;
    }
  }

  /// <summary>Field number for the "kernel" field.</summary>
  public const int KernelFieldNumber = 3;
  private global::TensorParameter kernel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TensorParameter Kernel {
    get { return kernel_; }
    set {
      kernel_ = value;
    }
  }

  /// <summary>Field number for the "bias" field.</summary>
  public const int BiasFieldNumber = 4;
  private global::TensorParameter bias_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TensorParameter Bias {
    get { return bias_; }
    set {
      bias_ = value;
    }
  }

  /// <summary>Field number for the "stride" field.</summary>
  public const int StrideFieldNumber = 5;
  private int stride_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stride {
    get { return stride_; }
    set {
      stride_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Conv1dParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Conv1dParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!shape_.Equals(other.shape_)) return false;
    if (UseBias != other.UseBias) return false;
    if (!object.Equals(Kernel, other.Kernel)) return false;
    if (!object.Equals(Bias, other.Bias)) return false;
    if (Stride != other.Stride) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= shape_.GetHashCode();
    if (UseBias != false) hash ^= UseBias.GetHashCode();
    if (kernel_ != null) hash ^= Kernel.GetHashCode();
    if (bias_ != null) hash ^= Bias.GetHashCode();
    if (Stride != 0) hash ^= Stride.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    shape_.WriteTo(output, _repeated_shape_codec);
    if (UseBias != false) {
      output.WriteRawTag(16);
      output.WriteBool(UseBias);
    }
    if (kernel_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Kernel);
    }
    if (bias_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Bias);
    }
    if (Stride != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Stride);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += shape_.CalculateSize(_repeated_shape_codec);
    if (UseBias != false) {
      size += 1 + 1;
    }
    if (kernel_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kernel);
    }
    if (bias_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bias);
    }
    if (Stride != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stride);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Conv1dParameter other) {
    if (other == null) {
      return;
    }
    shape_.Add(other.shape_);
    if (other.UseBias != false) {
      UseBias = other.UseBias;
    }
    if (other.kernel_ != null) {
      if (kernel_ == null) {
        kernel_ = new global::TensorParameter();
      }
      Kernel.MergeFrom(other.Kernel);
    }
    if (other.bias_ != null) {
      if (bias_ == null) {
        bias_ = new global::TensorParameter();
      }
      Bias.MergeFrom(other.Bias);
    }
    if (other.Stride != 0) {
      Stride = other.Stride;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          shape_.AddEntriesFrom(input, _repeated_shape_codec);
          break;
        }
        case 16: {
          UseBias = input.ReadBool();
          break;
        }
        case 26: {
          if (kernel_ == null) {
            kernel_ = new global::TensorParameter();
          }
          input.ReadMessage(kernel_);
          break;
        }
        case 34: {
          if (bias_ == null) {
            bias_ = new global::TensorParameter();
          }
          input.ReadMessage(bias_);
          break;
        }
        case 40: {
          Stride = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DenseParameter : pb::IMessage<DenseParameter> {
  private static readonly pb::MessageParser<DenseParameter> _parser = new pb::MessageParser<DenseParameter>(() => new DenseParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DenseParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DenseParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DenseParameter(DenseParameter other) : this() {
    units_ = other.units_;
    activation_ = other.activation_;
    useBias_ = other.useBias_;
    Weights = other.weights_ != null ? other.Weights.Clone() : null;
    Bias = other.bias_ != null ? other.Bias.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DenseParameter Clone() {
    return new DenseParameter(this);
  }

  /// <summary>Field number for the "units" field.</summary>
  public const int UnitsFieldNumber = 1;
  private int units_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Units {
    get { return units_; }
    set {
      units_ = value;
    }
  }

  /// <summary>Field number for the "activation" field.</summary>
  public const int ActivationFieldNumber = 2;
  private string activation_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Activation {
    get { return activation_; }
    set {
      activation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "use_bias" field.</summary>
  public const int UseBiasFieldNumber = 3;
  private bool useBias_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseBias {
    get { return useBias_; }
    set {
      useBias_ = value;
    }
  }

  /// <summary>Field number for the "weights" field.</summary>
  public const int WeightsFieldNumber = 4;
  private global::TensorParameter weights_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TensorParameter Weights {
    get { return weights_; }
    set {
      weights_ = value;
    }
  }

  /// <summary>Field number for the "bias" field.</summary>
  public const int BiasFieldNumber = 5;
  private global::TensorParameter bias_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TensorParameter Bias {
    get { return bias_; }
    set {
      bias_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DenseParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DenseParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Units != other.Units) return false;
    if (Activation != other.Activation) return false;
    if (UseBias != other.UseBias) return false;
    if (!object.Equals(Weights, other.Weights)) return false;
    if (!object.Equals(Bias, other.Bias)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Units != 0) hash ^= Units.GetHashCode();
    if (Activation.Length != 0) hash ^= Activation.GetHashCode();
    if (UseBias != false) hash ^= UseBias.GetHashCode();
    if (weights_ != null) hash ^= Weights.GetHashCode();
    if (bias_ != null) hash ^= Bias.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Units != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Units);
    }
    if (Activation.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Activation);
    }
    if (UseBias != false) {
      output.WriteRawTag(24);
      output.WriteBool(UseBias);
    }
    if (weights_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Weights);
    }
    if (bias_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Bias);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Units != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Units);
    }
    if (Activation.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Activation);
    }
    if (UseBias != false) {
      size += 1 + 1;
    }
    if (weights_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Weights);
    }
    if (bias_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bias);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DenseParameter other) {
    if (other == null) {
      return;
    }
    if (other.Units != 0) {
      Units = other.Units;
    }
    if (other.Activation.Length != 0) {
      Activation = other.Activation;
    }
    if (other.UseBias != false) {
      UseBias = other.UseBias;
    }
    if (other.weights_ != null) {
      if (weights_ == null) {
        weights_ = new global::TensorParameter();
      }
      Weights.MergeFrom(other.Weights);
    }
    if (other.bias_ != null) {
      if (bias_ == null) {
        bias_ = new global::TensorParameter();
      }
      Bias.MergeFrom(other.Bias);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Units = input.ReadInt32();
          break;
        }
        case 18: {
          Activation = input.ReadString();
          break;
        }
        case 24: {
          UseBias = input.ReadBool();
          break;
        }
        case 34: {
          if (weights_ == null) {
            weights_ = new global::TensorParameter();
          }
          input.ReadMessage(weights_);
          break;
        }
        case 42: {
          if (bias_ == null) {
            bias_ = new global::TensorParameter();
          }
          input.ReadMessage(bias_);
          break;
        }
      }
    }
  }

}

public sealed partial class ActivationParameter : pb::IMessage<ActivationParameter> {
  private static readonly pb::MessageParser<ActivationParameter> _parser = new pb::MessageParser<ActivationParameter>(() => new ActivationParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ActivationParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivationParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivationParameter(ActivationParameter other) : this() {
    activation_ = other.activation_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivationParameter Clone() {
    return new ActivationParameter(this);
  }

  /// <summary>Field number for the "activation" field.</summary>
  public const int ActivationFieldNumber = 1;
  private string activation_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Activation {
    get { return activation_; }
    set {
      activation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ActivationParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ActivationParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Activation != other.Activation) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Activation.Length != 0) hash ^= Activation.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Activation.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Activation);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Activation.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Activation);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ActivationParameter other) {
    if (other == null) {
      return;
    }
    if (other.Activation.Length != 0) {
      Activation = other.Activation;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Activation = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MaxPool1dParameter : pb::IMessage<MaxPool1dParameter> {
  private static readonly pb::MessageParser<MaxPool1dParameter> _parser = new pb::MessageParser<MaxPool1dParameter>(() => new MaxPool1dParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MaxPool1dParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaxPool1dParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaxPool1dParameter(MaxPool1dParameter other) : this() {
    kernelSize_ = other.kernelSize_;
    stride_ = other.stride_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaxPool1dParameter Clone() {
    return new MaxPool1dParameter(this);
  }

  /// <summary>Field number for the "kernel_size" field.</summary>
  public const int KernelSizeFieldNumber = 1;
  private int kernelSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KernelSize {
    get { return kernelSize_; }
    set {
      kernelSize_ = value;
    }
  }

  /// <summary>Field number for the "stride" field.</summary>
  public const int StrideFieldNumber = 2;
  private int stride_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stride {
    get { return stride_; }
    set {
      stride_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MaxPool1dParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MaxPool1dParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (KernelSize != other.KernelSize) return false;
    if (Stride != other.Stride) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (KernelSize != 0) hash ^= KernelSize.GetHashCode();
    if (Stride != 0) hash ^= Stride.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (KernelSize != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(KernelSize);
    }
    if (Stride != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Stride);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (KernelSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KernelSize);
    }
    if (Stride != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stride);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MaxPool1dParameter other) {
    if (other == null) {
      return;
    }
    if (other.KernelSize != 0) {
      KernelSize = other.KernelSize;
    }
    if (other.Stride != 0) {
      Stride = other.Stride;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          KernelSize = input.ReadInt32();
          break;
        }
        case 16: {
          Stride = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AvgPool1dParameter : pb::IMessage<AvgPool1dParameter> {
  private static readonly pb::MessageParser<AvgPool1dParameter> _parser = new pb::MessageParser<AvgPool1dParameter>(() => new AvgPool1dParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AvgPool1dParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AvgPool1dParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AvgPool1dParameter(AvgPool1dParameter other) : this() {
    kernelSize_ = other.kernelSize_;
    stride_ = other.stride_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AvgPool1dParameter Clone() {
    return new AvgPool1dParameter(this);
  }

  /// <summary>Field number for the "kernel_size" field.</summary>
  public const int KernelSizeFieldNumber = 1;
  private int kernelSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KernelSize {
    get { return kernelSize_; }
    set {
      kernelSize_ = value;
    }
  }

  /// <summary>Field number for the "stride" field.</summary>
  public const int StrideFieldNumber = 2;
  private int stride_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stride {
    get { return stride_; }
    set {
      stride_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AvgPool1dParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AvgPool1dParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (KernelSize != other.KernelSize) return false;
    if (Stride != other.Stride) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (KernelSize != 0) hash ^= KernelSize.GetHashCode();
    if (Stride != 0) hash ^= Stride.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (KernelSize != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(KernelSize);
    }
    if (Stride != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Stride);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (KernelSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KernelSize);
    }
    if (Stride != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stride);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AvgPool1dParameter other) {
    if (other == null) {
      return;
    }
    if (other.KernelSize != 0) {
      KernelSize = other.KernelSize;
    }
    if (other.Stride != 0) {
      Stride = other.Stride;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          KernelSize = input.ReadInt32();
          break;
        }
        case 16: {
          Stride = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LaneFeatureConvParameter : pb::IMessage<LaneFeatureConvParameter> {
  private static readonly pb::MessageParser<LaneFeatureConvParameter> _parser = new pb::MessageParser<LaneFeatureConvParameter>(() => new LaneFeatureConvParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LaneFeatureConvParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LaneFeatureConvParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LaneFeatureConvParameter(LaneFeatureConvParameter other) : this() {
    Conv1D0 = other.conv1D0_ != null ? other.Conv1D0.Clone() : null;
    Activation1 = other.activation1_ != null ? other.Activation1.Clone() : null;
    Conv1D2 = other.conv1D2_ != null ? other.Conv1D2.Clone() : null;
    Activation3 = other.activation3_ != null ? other.Activation3.Clone() : null;
    Conv1D4 = other.conv1D4_ != null ? other.Conv1D4.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LaneFeatureConvParameter Clone() {
    return new LaneFeatureConvParameter(this);
  }

  /// <summary>Field number for the "conv1d_0" field.</summary>
  public const int Conv1D0FieldNumber = 1;
  private global::Conv1dParameter conv1D0_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Conv1dParameter Conv1D0 {
    get { return conv1D0_; }
    set {
      conv1D0_ = value;
    }
  }

  /// <summary>Field number for the "activation_1" field.</summary>
  public const int Activation1FieldNumber = 2;
  private global::ActivationParameter activation1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation1 {
    get { return activation1_; }
    set {
      activation1_ = value;
    }
  }

  /// <summary>Field number for the "conv1d_2" field.</summary>
  public const int Conv1D2FieldNumber = 3;
  private global::Conv1dParameter conv1D2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Conv1dParameter Conv1D2 {
    get { return conv1D2_; }
    set {
      conv1D2_ = value;
    }
  }

  /// <summary>Field number for the "activation_3" field.</summary>
  public const int Activation3FieldNumber = 4;
  private global::ActivationParameter activation3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation3 {
    get { return activation3_; }
    set {
      activation3_ = value;
    }
  }

  /// <summary>Field number for the "conv1d_4" field.</summary>
  public const int Conv1D4FieldNumber = 5;
  private global::Conv1dParameter conv1D4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Conv1dParameter Conv1D4 {
    get { return conv1D4_; }
    set {
      conv1D4_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LaneFeatureConvParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LaneFeatureConvParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Conv1D0, other.Conv1D0)) return false;
    if (!object.Equals(Activation1, other.Activation1)) return false;
    if (!object.Equals(Conv1D2, other.Conv1D2)) return false;
    if (!object.Equals(Activation3, other.Activation3)) return false;
    if (!object.Equals(Conv1D4, other.Conv1D4)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (conv1D0_ != null) hash ^= Conv1D0.GetHashCode();
    if (activation1_ != null) hash ^= Activation1.GetHashCode();
    if (conv1D2_ != null) hash ^= Conv1D2.GetHashCode();
    if (activation3_ != null) hash ^= Activation3.GetHashCode();
    if (conv1D4_ != null) hash ^= Conv1D4.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (conv1D0_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Conv1D0);
    }
    if (activation1_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Activation1);
    }
    if (conv1D2_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Conv1D2);
    }
    if (activation3_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Activation3);
    }
    if (conv1D4_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Conv1D4);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (conv1D0_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conv1D0);
    }
    if (activation1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation1);
    }
    if (conv1D2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conv1D2);
    }
    if (activation3_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation3);
    }
    if (conv1D4_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conv1D4);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LaneFeatureConvParameter other) {
    if (other == null) {
      return;
    }
    if (other.conv1D0_ != null) {
      if (conv1D0_ == null) {
        conv1D0_ = new global::Conv1dParameter();
      }
      Conv1D0.MergeFrom(other.Conv1D0);
    }
    if (other.activation1_ != null) {
      if (activation1_ == null) {
        activation1_ = new global::ActivationParameter();
      }
      Activation1.MergeFrom(other.Activation1);
    }
    if (other.conv1D2_ != null) {
      if (conv1D2_ == null) {
        conv1D2_ = new global::Conv1dParameter();
      }
      Conv1D2.MergeFrom(other.Conv1D2);
    }
    if (other.activation3_ != null) {
      if (activation3_ == null) {
        activation3_ = new global::ActivationParameter();
      }
      Activation3.MergeFrom(other.Activation3);
    }
    if (other.conv1D4_ != null) {
      if (conv1D4_ == null) {
        conv1D4_ = new global::Conv1dParameter();
      }
      Conv1D4.MergeFrom(other.Conv1D4);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conv1D0_ == null) {
            conv1D0_ = new global::Conv1dParameter();
          }
          input.ReadMessage(conv1D0_);
          break;
        }
        case 18: {
          if (activation1_ == null) {
            activation1_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation1_);
          break;
        }
        case 26: {
          if (conv1D2_ == null) {
            conv1D2_ = new global::Conv1dParameter();
          }
          input.ReadMessage(conv1D2_);
          break;
        }
        case 34: {
          if (activation3_ == null) {
            activation3_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation3_);
          break;
        }
        case 42: {
          if (conv1D4_ == null) {
            conv1D4_ = new global::Conv1dParameter();
          }
          input.ReadMessage(conv1D4_);
          break;
        }
      }
    }
  }

}

public sealed partial class ObsFeatureFCParameter : pb::IMessage<ObsFeatureFCParameter> {
  private static readonly pb::MessageParser<ObsFeatureFCParameter> _parser = new pb::MessageParser<ObsFeatureFCParameter>(() => new ObsFeatureFCParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObsFeatureFCParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObsFeatureFCParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObsFeatureFCParameter(ObsFeatureFCParameter other) : this() {
    Linear0 = other.linear0_ != null ? other.Linear0.Clone() : null;
    Activation1 = other.activation1_ != null ? other.Activation1.Clone() : null;
    Linear3 = other.linear3_ != null ? other.Linear3.Clone() : null;
    Activation4 = other.activation4_ != null ? other.Activation4.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObsFeatureFCParameter Clone() {
    return new ObsFeatureFCParameter(this);
  }

  /// <summary>Field number for the "linear_0" field.</summary>
  public const int Linear0FieldNumber = 1;
  private global::DenseParameter linear0_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear0 {
    get { return linear0_; }
    set {
      linear0_ = value;
    }
  }

  /// <summary>Field number for the "activation_1" field.</summary>
  public const int Activation1FieldNumber = 2;
  private global::ActivationParameter activation1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation1 {
    get { return activation1_; }
    set {
      activation1_ = value;
    }
  }

  /// <summary>Field number for the "linear_3" field.</summary>
  public const int Linear3FieldNumber = 3;
  private global::DenseParameter linear3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear3 {
    get { return linear3_; }
    set {
      linear3_ = value;
    }
  }

  /// <summary>Field number for the "activation_4" field.</summary>
  public const int Activation4FieldNumber = 4;
  private global::ActivationParameter activation4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation4 {
    get { return activation4_; }
    set {
      activation4_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObsFeatureFCParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObsFeatureFCParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Linear0, other.Linear0)) return false;
    if (!object.Equals(Activation1, other.Activation1)) return false;
    if (!object.Equals(Linear3, other.Linear3)) return false;
    if (!object.Equals(Activation4, other.Activation4)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (linear0_ != null) hash ^= Linear0.GetHashCode();
    if (activation1_ != null) hash ^= Activation1.GetHashCode();
    if (linear3_ != null) hash ^= Linear3.GetHashCode();
    if (activation4_ != null) hash ^= Activation4.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (linear0_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Linear0);
    }
    if (activation1_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Activation1);
    }
    if (linear3_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Linear3);
    }
    if (activation4_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Activation4);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (linear0_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear0);
    }
    if (activation1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation1);
    }
    if (linear3_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear3);
    }
    if (activation4_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation4);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObsFeatureFCParameter other) {
    if (other == null) {
      return;
    }
    if (other.linear0_ != null) {
      if (linear0_ == null) {
        linear0_ = new global::DenseParameter();
      }
      Linear0.MergeFrom(other.Linear0);
    }
    if (other.activation1_ != null) {
      if (activation1_ == null) {
        activation1_ = new global::ActivationParameter();
      }
      Activation1.MergeFrom(other.Activation1);
    }
    if (other.linear3_ != null) {
      if (linear3_ == null) {
        linear3_ = new global::DenseParameter();
      }
      Linear3.MergeFrom(other.Linear3);
    }
    if (other.activation4_ != null) {
      if (activation4_ == null) {
        activation4_ = new global::ActivationParameter();
      }
      Activation4.MergeFrom(other.Activation4);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (linear0_ == null) {
            linear0_ = new global::DenseParameter();
          }
          input.ReadMessage(linear0_);
          break;
        }
        case 18: {
          if (activation1_ == null) {
            activation1_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation1_);
          break;
        }
        case 26: {
          if (linear3_ == null) {
            linear3_ = new global::DenseParameter();
          }
          input.ReadMessage(linear3_);
          break;
        }
        case 34: {
          if (activation4_ == null) {
            activation4_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation4_);
          break;
        }
      }
    }
  }

}

public sealed partial class ClassifyParameter : pb::IMessage<ClassifyParameter> {
  private static readonly pb::MessageParser<ClassifyParameter> _parser = new pb::MessageParser<ClassifyParameter>(() => new ClassifyParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClassifyParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClassifyParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClassifyParameter(ClassifyParameter other) : this() {
    Linear0 = other.linear0_ != null ? other.Linear0.Clone() : null;
    Activation1 = other.activation1_ != null ? other.Activation1.Clone() : null;
    Linear3 = other.linear3_ != null ? other.Linear3.Clone() : null;
    Activation4 = other.activation4_ != null ? other.Activation4.Clone() : null;
    Linear6 = other.linear6_ != null ? other.Linear6.Clone() : null;
    Activation7 = other.activation7_ != null ? other.Activation7.Clone() : null;
    Linear9 = other.linear9_ != null ? other.Linear9.Clone() : null;
    Activation10 = other.activation10_ != null ? other.Activation10.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClassifyParameter Clone() {
    return new ClassifyParameter(this);
  }

  /// <summary>Field number for the "linear_0" field.</summary>
  public const int Linear0FieldNumber = 1;
  private global::DenseParameter linear0_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear0 {
    get { return linear0_; }
    set {
      linear0_ = value;
    }
  }

  /// <summary>Field number for the "activation_1" field.</summary>
  public const int Activation1FieldNumber = 2;
  private global::ActivationParameter activation1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation1 {
    get { return activation1_; }
    set {
      activation1_ = value;
    }
  }

  /// <summary>Field number for the "linear_3" field.</summary>
  public const int Linear3FieldNumber = 3;
  private global::DenseParameter linear3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear3 {
    get { return linear3_; }
    set {
      linear3_ = value;
    }
  }

  /// <summary>Field number for the "activation_4" field.</summary>
  public const int Activation4FieldNumber = 4;
  private global::ActivationParameter activation4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation4 {
    get { return activation4_; }
    set {
      activation4_ = value;
    }
  }

  /// <summary>Field number for the "linear_6" field.</summary>
  public const int Linear6FieldNumber = 5;
  private global::DenseParameter linear6_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear6 {
    get { return linear6_; }
    set {
      linear6_ = value;
    }
  }

  /// <summary>Field number for the "activation_7" field.</summary>
  public const int Activation7FieldNumber = 6;
  private global::ActivationParameter activation7_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation7 {
    get { return activation7_; }
    set {
      activation7_ = value;
    }
  }

  /// <summary>Field number for the "linear_9" field.</summary>
  public const int Linear9FieldNumber = 7;
  private global::DenseParameter linear9_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear9 {
    get { return linear9_; }
    set {
      linear9_ = value;
    }
  }

  /// <summary>Field number for the "activation_10" field.</summary>
  public const int Activation10FieldNumber = 8;
  private global::ActivationParameter activation10_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation10 {
    get { return activation10_; }
    set {
      activation10_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClassifyParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClassifyParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Linear0, other.Linear0)) return false;
    if (!object.Equals(Activation1, other.Activation1)) return false;
    if (!object.Equals(Linear3, other.Linear3)) return false;
    if (!object.Equals(Activation4, other.Activation4)) return false;
    if (!object.Equals(Linear6, other.Linear6)) return false;
    if (!object.Equals(Activation7, other.Activation7)) return false;
    if (!object.Equals(Linear9, other.Linear9)) return false;
    if (!object.Equals(Activation10, other.Activation10)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (linear0_ != null) hash ^= Linear0.GetHashCode();
    if (activation1_ != null) hash ^= Activation1.GetHashCode();
    if (linear3_ != null) hash ^= Linear3.GetHashCode();
    if (activation4_ != null) hash ^= Activation4.GetHashCode();
    if (linear6_ != null) hash ^= Linear6.GetHashCode();
    if (activation7_ != null) hash ^= Activation7.GetHashCode();
    if (linear9_ != null) hash ^= Linear9.GetHashCode();
    if (activation10_ != null) hash ^= Activation10.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (linear0_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Linear0);
    }
    if (activation1_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Activation1);
    }
    if (linear3_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Linear3);
    }
    if (activation4_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Activation4);
    }
    if (linear6_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Linear6);
    }
    if (activation7_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Activation7);
    }
    if (linear9_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Linear9);
    }
    if (activation10_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Activation10);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (linear0_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear0);
    }
    if (activation1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation1);
    }
    if (linear3_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear3);
    }
    if (activation4_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation4);
    }
    if (linear6_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear6);
    }
    if (activation7_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation7);
    }
    if (linear9_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear9);
    }
    if (activation10_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation10);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClassifyParameter other) {
    if (other == null) {
      return;
    }
    if (other.linear0_ != null) {
      if (linear0_ == null) {
        linear0_ = new global::DenseParameter();
      }
      Linear0.MergeFrom(other.Linear0);
    }
    if (other.activation1_ != null) {
      if (activation1_ == null) {
        activation1_ = new global::ActivationParameter();
      }
      Activation1.MergeFrom(other.Activation1);
    }
    if (other.linear3_ != null) {
      if (linear3_ == null) {
        linear3_ = new global::DenseParameter();
      }
      Linear3.MergeFrom(other.Linear3);
    }
    if (other.activation4_ != null) {
      if (activation4_ == null) {
        activation4_ = new global::ActivationParameter();
      }
      Activation4.MergeFrom(other.Activation4);
    }
    if (other.linear6_ != null) {
      if (linear6_ == null) {
        linear6_ = new global::DenseParameter();
      }
      Linear6.MergeFrom(other.Linear6);
    }
    if (other.activation7_ != null) {
      if (activation7_ == null) {
        activation7_ = new global::ActivationParameter();
      }
      Activation7.MergeFrom(other.Activation7);
    }
    if (other.linear9_ != null) {
      if (linear9_ == null) {
        linear9_ = new global::DenseParameter();
      }
      Linear9.MergeFrom(other.Linear9);
    }
    if (other.activation10_ != null) {
      if (activation10_ == null) {
        activation10_ = new global::ActivationParameter();
      }
      Activation10.MergeFrom(other.Activation10);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (linear0_ == null) {
            linear0_ = new global::DenseParameter();
          }
          input.ReadMessage(linear0_);
          break;
        }
        case 18: {
          if (activation1_ == null) {
            activation1_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation1_);
          break;
        }
        case 26: {
          if (linear3_ == null) {
            linear3_ = new global::DenseParameter();
          }
          input.ReadMessage(linear3_);
          break;
        }
        case 34: {
          if (activation4_ == null) {
            activation4_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation4_);
          break;
        }
        case 42: {
          if (linear6_ == null) {
            linear6_ = new global::DenseParameter();
          }
          input.ReadMessage(linear6_);
          break;
        }
        case 50: {
          if (activation7_ == null) {
            activation7_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation7_);
          break;
        }
        case 58: {
          if (linear9_ == null) {
            linear9_ = new global::DenseParameter();
          }
          input.ReadMessage(linear9_);
          break;
        }
        case 66: {
          if (activation10_ == null) {
            activation10_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation10_);
          break;
        }
      }
    }
  }

}

public sealed partial class RegressParameter : pb::IMessage<RegressParameter> {
  private static readonly pb::MessageParser<RegressParameter> _parser = new pb::MessageParser<RegressParameter>(() => new RegressParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegressParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegressParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegressParameter(RegressParameter other) : this() {
    Linear0 = other.linear0_ != null ? other.Linear0.Clone() : null;
    Activation1 = other.activation1_ != null ? other.Activation1.Clone() : null;
    Linear3 = other.linear3_ != null ? other.Linear3.Clone() : null;
    Activation4 = other.activation4_ != null ? other.Activation4.Clone() : null;
    Linear6 = other.linear6_ != null ? other.Linear6.Clone() : null;
    Activation7 = other.activation7_ != null ? other.Activation7.Clone() : null;
    Linear9 = other.linear9_ != null ? other.Linear9.Clone() : null;
    Activation10 = other.activation10_ != null ? other.Activation10.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegressParameter Clone() {
    return new RegressParameter(this);
  }

  /// <summary>Field number for the "linear_0" field.</summary>
  public const int Linear0FieldNumber = 1;
  private global::DenseParameter linear0_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear0 {
    get { return linear0_; }
    set {
      linear0_ = value;
    }
  }

  /// <summary>Field number for the "activation_1" field.</summary>
  public const int Activation1FieldNumber = 2;
  private global::ActivationParameter activation1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation1 {
    get { return activation1_; }
    set {
      activation1_ = value;
    }
  }

  /// <summary>Field number for the "linear_3" field.</summary>
  public const int Linear3FieldNumber = 3;
  private global::DenseParameter linear3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear3 {
    get { return linear3_; }
    set {
      linear3_ = value;
    }
  }

  /// <summary>Field number for the "activation_4" field.</summary>
  public const int Activation4FieldNumber = 4;
  private global::ActivationParameter activation4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation4 {
    get { return activation4_; }
    set {
      activation4_ = value;
    }
  }

  /// <summary>Field number for the "linear_6" field.</summary>
  public const int Linear6FieldNumber = 5;
  private global::DenseParameter linear6_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear6 {
    get { return linear6_; }
    set {
      linear6_ = value;
    }
  }

  /// <summary>Field number for the "activation_7" field.</summary>
  public const int Activation7FieldNumber = 6;
  private global::ActivationParameter activation7_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation7 {
    get { return activation7_; }
    set {
      activation7_ = value;
    }
  }

  /// <summary>Field number for the "linear_9" field.</summary>
  public const int Linear9FieldNumber = 7;
  private global::DenseParameter linear9_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DenseParameter Linear9 {
    get { return linear9_; }
    set {
      linear9_ = value;
    }
  }

  /// <summary>Field number for the "activation_10" field.</summary>
  public const int Activation10FieldNumber = 8;
  private global::ActivationParameter activation10_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivationParameter Activation10 {
    get { return activation10_; }
    set {
      activation10_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegressParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegressParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Linear0, other.Linear0)) return false;
    if (!object.Equals(Activation1, other.Activation1)) return false;
    if (!object.Equals(Linear3, other.Linear3)) return false;
    if (!object.Equals(Activation4, other.Activation4)) return false;
    if (!object.Equals(Linear6, other.Linear6)) return false;
    if (!object.Equals(Activation7, other.Activation7)) return false;
    if (!object.Equals(Linear9, other.Linear9)) return false;
    if (!object.Equals(Activation10, other.Activation10)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (linear0_ != null) hash ^= Linear0.GetHashCode();
    if (activation1_ != null) hash ^= Activation1.GetHashCode();
    if (linear3_ != null) hash ^= Linear3.GetHashCode();
    if (activation4_ != null) hash ^= Activation4.GetHashCode();
    if (linear6_ != null) hash ^= Linear6.GetHashCode();
    if (activation7_ != null) hash ^= Activation7.GetHashCode();
    if (linear9_ != null) hash ^= Linear9.GetHashCode();
    if (activation10_ != null) hash ^= Activation10.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (linear0_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Linear0);
    }
    if (activation1_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Activation1);
    }
    if (linear3_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Linear3);
    }
    if (activation4_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Activation4);
    }
    if (linear6_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Linear6);
    }
    if (activation7_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Activation7);
    }
    if (linear9_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Linear9);
    }
    if (activation10_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Activation10);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (linear0_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear0);
    }
    if (activation1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation1);
    }
    if (linear3_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear3);
    }
    if (activation4_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation4);
    }
    if (linear6_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear6);
    }
    if (activation7_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation7);
    }
    if (linear9_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear9);
    }
    if (activation10_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activation10);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegressParameter other) {
    if (other == null) {
      return;
    }
    if (other.linear0_ != null) {
      if (linear0_ == null) {
        linear0_ = new global::DenseParameter();
      }
      Linear0.MergeFrom(other.Linear0);
    }
    if (other.activation1_ != null) {
      if (activation1_ == null) {
        activation1_ = new global::ActivationParameter();
      }
      Activation1.MergeFrom(other.Activation1);
    }
    if (other.linear3_ != null) {
      if (linear3_ == null) {
        linear3_ = new global::DenseParameter();
      }
      Linear3.MergeFrom(other.Linear3);
    }
    if (other.activation4_ != null) {
      if (activation4_ == null) {
        activation4_ = new global::ActivationParameter();
      }
      Activation4.MergeFrom(other.Activation4);
    }
    if (other.linear6_ != null) {
      if (linear6_ == null) {
        linear6_ = new global::DenseParameter();
      }
      Linear6.MergeFrom(other.Linear6);
    }
    if (other.activation7_ != null) {
      if (activation7_ == null) {
        activation7_ = new global::ActivationParameter();
      }
      Activation7.MergeFrom(other.Activation7);
    }
    if (other.linear9_ != null) {
      if (linear9_ == null) {
        linear9_ = new global::DenseParameter();
      }
      Linear9.MergeFrom(other.Linear9);
    }
    if (other.activation10_ != null) {
      if (activation10_ == null) {
        activation10_ = new global::ActivationParameter();
      }
      Activation10.MergeFrom(other.Activation10);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (linear0_ == null) {
            linear0_ = new global::DenseParameter();
          }
          input.ReadMessage(linear0_);
          break;
        }
        case 18: {
          if (activation1_ == null) {
            activation1_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation1_);
          break;
        }
        case 26: {
          if (linear3_ == null) {
            linear3_ = new global::DenseParameter();
          }
          input.ReadMessage(linear3_);
          break;
        }
        case 34: {
          if (activation4_ == null) {
            activation4_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation4_);
          break;
        }
        case 42: {
          if (linear6_ == null) {
            linear6_ = new global::DenseParameter();
          }
          input.ReadMessage(linear6_);
          break;
        }
        case 50: {
          if (activation7_ == null) {
            activation7_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation7_);
          break;
        }
        case 58: {
          if (linear9_ == null) {
            linear9_ = new global::DenseParameter();
          }
          input.ReadMessage(linear9_);
          break;
        }
        case 66: {
          if (activation10_ == null) {
            activation10_ = new global::ActivationParameter();
          }
          input.ReadMessage(activation10_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// next id = 
/// </summary>
public sealed partial class CruiseModelParameter : pb::IMessage<CruiseModelParameter> {
  private static readonly pb::MessageParser<CruiseModelParameter> _parser = new pb::MessageParser<CruiseModelParameter>(() => new CruiseModelParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CruiseModelParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CruiseModelReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CruiseModelParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CruiseModelParameter(CruiseModelParameter other) : this() {
    LaneFeatureConv = other.laneFeatureConv_ != null ? other.LaneFeatureConv.Clone() : null;
    LaneFeatureMaxpool = other.laneFeatureMaxpool_ != null ? other.LaneFeatureMaxpool.Clone() : null;
    LaneFeatureAvgpool = other.laneFeatureAvgpool_ != null ? other.LaneFeatureAvgpool.Clone() : null;
    ObsFeatureFc = other.obsFeatureFc_ != null ? other.ObsFeatureFc.Clone() : null;
    Classify = other.classify_ != null ? other.Classify.Clone() : null;
    Regress = other.regress_ != null ? other.Regress.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CruiseModelParameter Clone() {
    return new CruiseModelParameter(this);
  }

  /// <summary>Field number for the "lane_feature_conv" field.</summary>
  public const int LaneFeatureConvFieldNumber = 1;
  private global::LaneFeatureConvParameter laneFeatureConv_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LaneFeatureConvParameter LaneFeatureConv {
    get { return laneFeatureConv_; }
    set {
      laneFeatureConv_ = value;
    }
  }

  /// <summary>Field number for the "lane_feature_maxpool" field.</summary>
  public const int LaneFeatureMaxpoolFieldNumber = 2;
  private global::MaxPool1dParameter laneFeatureMaxpool_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxPool1dParameter LaneFeatureMaxpool {
    get { return laneFeatureMaxpool_; }
    set {
      laneFeatureMaxpool_ = value;
    }
  }

  /// <summary>Field number for the "lane_feature_avgpool" field.</summary>
  public const int LaneFeatureAvgpoolFieldNumber = 3;
  private global::AvgPool1dParameter laneFeatureAvgpool_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AvgPool1dParameter LaneFeatureAvgpool {
    get { return laneFeatureAvgpool_; }
    set {
      laneFeatureAvgpool_ = value;
    }
  }

  /// <summary>Field number for the "obs_feature_fc" field.</summary>
  public const int ObsFeatureFcFieldNumber = 5;
  private global::ObsFeatureFCParameter obsFeatureFc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ObsFeatureFCParameter ObsFeatureFc {
    get { return obsFeatureFc_; }
    set {
      obsFeatureFc_ = value;
    }
  }

  /// <summary>Field number for the "classify" field.</summary>
  public const int ClassifyFieldNumber = 6;
  private global::ClassifyParameter classify_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClassifyParameter Classify {
    get { return classify_; }
    set {
      classify_ = value;
    }
  }

  /// <summary>Field number for the "regress" field.</summary>
  public const int RegressFieldNumber = 7;
  private global::RegressParameter regress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RegressParameter Regress {
    get { return regress_; }
    set {
      regress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CruiseModelParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CruiseModelParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LaneFeatureConv, other.LaneFeatureConv)) return false;
    if (!object.Equals(LaneFeatureMaxpool, other.LaneFeatureMaxpool)) return false;
    if (!object.Equals(LaneFeatureAvgpool, other.LaneFeatureAvgpool)) return false;
    if (!object.Equals(ObsFeatureFc, other.ObsFeatureFc)) return false;
    if (!object.Equals(Classify, other.Classify)) return false;
    if (!object.Equals(Regress, other.Regress)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (laneFeatureConv_ != null) hash ^= LaneFeatureConv.GetHashCode();
    if (laneFeatureMaxpool_ != null) hash ^= LaneFeatureMaxpool.GetHashCode();
    if (laneFeatureAvgpool_ != null) hash ^= LaneFeatureAvgpool.GetHashCode();
    if (obsFeatureFc_ != null) hash ^= ObsFeatureFc.GetHashCode();
    if (classify_ != null) hash ^= Classify.GetHashCode();
    if (regress_ != null) hash ^= Regress.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (laneFeatureConv_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(LaneFeatureConv);
    }
    if (laneFeatureMaxpool_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(LaneFeatureMaxpool);
    }
    if (laneFeatureAvgpool_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LaneFeatureAvgpool);
    }
    if (obsFeatureFc_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ObsFeatureFc);
    }
    if (classify_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Classify);
    }
    if (regress_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Regress);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (laneFeatureConv_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneFeatureConv);
    }
    if (laneFeatureMaxpool_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneFeatureMaxpool);
    }
    if (laneFeatureAvgpool_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneFeatureAvgpool);
    }
    if (obsFeatureFc_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObsFeatureFc);
    }
    if (classify_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Classify);
    }
    if (regress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Regress);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CruiseModelParameter other) {
    if (other == null) {
      return;
    }
    if (other.laneFeatureConv_ != null) {
      if (laneFeatureConv_ == null) {
        laneFeatureConv_ = new global::LaneFeatureConvParameter();
      }
      LaneFeatureConv.MergeFrom(other.LaneFeatureConv);
    }
    if (other.laneFeatureMaxpool_ != null) {
      if (laneFeatureMaxpool_ == null) {
        laneFeatureMaxpool_ = new global::MaxPool1dParameter();
      }
      LaneFeatureMaxpool.MergeFrom(other.LaneFeatureMaxpool);
    }
    if (other.laneFeatureAvgpool_ != null) {
      if (laneFeatureAvgpool_ == null) {
        laneFeatureAvgpool_ = new global::AvgPool1dParameter();
      }
      LaneFeatureAvgpool.MergeFrom(other.LaneFeatureAvgpool);
    }
    if (other.obsFeatureFc_ != null) {
      if (obsFeatureFc_ == null) {
        obsFeatureFc_ = new global::ObsFeatureFCParameter();
      }
      ObsFeatureFc.MergeFrom(other.ObsFeatureFc);
    }
    if (other.classify_ != null) {
      if (classify_ == null) {
        classify_ = new global::ClassifyParameter();
      }
      Classify.MergeFrom(other.Classify);
    }
    if (other.regress_ != null) {
      if (regress_ == null) {
        regress_ = new global::RegressParameter();
      }
      Regress.MergeFrom(other.Regress);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (laneFeatureConv_ == null) {
            laneFeatureConv_ = new global::LaneFeatureConvParameter();
          }
          input.ReadMessage(laneFeatureConv_);
          break;
        }
        case 18: {
          if (laneFeatureMaxpool_ == null) {
            laneFeatureMaxpool_ = new global::MaxPool1dParameter();
          }
          input.ReadMessage(laneFeatureMaxpool_);
          break;
        }
        case 26: {
          if (laneFeatureAvgpool_ == null) {
            laneFeatureAvgpool_ = new global::AvgPool1dParameter();
          }
          input.ReadMessage(laneFeatureAvgpool_);
          break;
        }
        case 42: {
          if (obsFeatureFc_ == null) {
            obsFeatureFc_ = new global::ObsFeatureFCParameter();
          }
          input.ReadMessage(obsFeatureFc_);
          break;
        }
        case 50: {
          if (classify_ == null) {
            classify_ = new global::ClassifyParameter();
          }
          input.ReadMessage(classify_);
          break;
        }
        case 58: {
          if (regress_ == null) {
            regress_ = new global::RegressParameter();
          }
          input.ReadMessage(regress_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
