// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.RelativeMap {

  /// <summary>Holder for reflection information generated from modules/map/relative_map/proto/navigation.proto</summary>
  public static partial class NavigationReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/map/relative_map/proto/navigation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NavigationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb2R1bGVzL21hcC9yZWxhdGl2ZV9tYXAvcHJvdG8vbmF2aWdhdGlvbi5w",
            "cm90bxITYXBvbGxvLnJlbGF0aXZlX21hcBohbW9kdWxlcy9jb21tb24vcHJv",
            "dG8vaGVhZGVyLnByb3RvGiRtb2R1bGVzL2NvbW1vbi9wcm90by9wbmNfcG9p",
            "bnQucHJvdG8aLW1vZHVsZXMvbG9jYWxpemF0aW9uL3Byb3RvL2xvY2FsaXph",
            "dGlvbi5wcm90bxobbW9kdWxlcy9tYXAvcHJvdG8vbWFwLnByb3RvGjJtb2R1",
            "bGVzL3BlcmNlcHRpb24vcHJvdG8vcGVyY2VwdGlvbl9vYnN0YWNsZS5wcm90",
            "byJKCg5OYXZpZ2F0aW9uUGF0aBIhCgRwYXRoGAEgASgLMhMuYXBvbGxvLmNv",
            "bW1vbi5QYXRoEhUKDXBhdGhfcHJpb3JpdHkYAiABKA0idQoOTmF2aWdhdGlv",
            "bkluZm8SJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFkZXIS",
            "PAoPbmF2aWdhdGlvbl9wYXRoGAIgAygLMiMuYXBvbGxvLnJlbGF0aXZlX21h",
            "cC5OYXZpZ2F0aW9uUGF0aCLtAgoGTWFwTXNnEiUKBmhlYWRlchgBIAEoCzIV",
            "LmFwb2xsby5jb21tb24uSGVhZGVyEiAKBWhkbWFwGAIgASgLMhEuYXBvbGxv",
            "LmhkbWFwLk1hcBJICg9uYXZpZ2F0aW9uX3BhdGgYAyADKAsyLy5hcG9sbG8u",
            "cmVsYXRpdmVfbWFwLk1hcE1zZy5OYXZpZ2F0aW9uUGF0aEVudHJ5EjMKC2xh",
            "bmVfbWFya2VyGAQgASgLMh4uYXBvbGxvLnBlcmNlcHRpb24uTGFuZU1hcmtl",
            "cnMSPwoMbG9jYWxpemF0aW9uGAUgASgLMikuYXBvbGxvLmxvY2FsaXphdGlv",
            "bi5Mb2NhbGl6YXRpb25Fc3RpbWF0ZRpaChNOYXZpZ2F0aW9uUGF0aEVudHJ5",
            "EgsKA2tleRgBIAEoCRIyCgV2YWx1ZRgCIAEoCzIjLmFwb2xsby5yZWxhdGl2",
            "ZV9tYXAuTmF2aWdhdGlvblBhdGg6AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.PncPointReflection.Descriptor, global::Apollo.Localization.LocalizationReflection.Descriptor, global::Apollo.Hdmap.MapReflection.Descriptor, global::Apollo.Perception.PerceptionObstacleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.RelativeMap.NavigationPath), global::Apollo.RelativeMap.NavigationPath.Parser, new[]{ "Path", "PathPriority" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.RelativeMap.NavigationInfo), global::Apollo.RelativeMap.NavigationInfo.Parser, new[]{ "Header", "NavigationPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.RelativeMap.MapMsg), global::Apollo.RelativeMap.MapMsg.Parser, new[]{ "Header", "Hdmap", "NavigationPath", "LaneMarker", "Localization" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NavigationPath : pb::IMessage<NavigationPath> {
    private static readonly pb::MessageParser<NavigationPath> _parser = new pb::MessageParser<NavigationPath>(() => new NavigationPath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavigationPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.RelativeMap.NavigationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationPath(NavigationPath other) : this() {
      Path = other.path_ != null ? other.Path.Clone() : null;
      pathPriority_ = other.pathPriority_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationPath Clone() {
      return new NavigationPath(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private global::Apollo.Common.Path path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Path Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "path_priority" field.</summary>
    public const int PathPriorityFieldNumber = 2;
    private uint pathPriority_;
    /// <summary>
    /// highest = 0 which can directly reach destination; change lane indicator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PathPriority {
      get { return pathPriority_; }
      set {
        pathPriority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavigationPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavigationPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Path, other.Path)) return false;
      if (PathPriority != other.PathPriority) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (path_ != null) hash ^= Path.GetHashCode();
      if (PathPriority != 0) hash ^= PathPriority.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (path_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Path);
      }
      if (PathPriority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PathPriority);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (PathPriority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PathPriority);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavigationPath other) {
      if (other == null) {
        return;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::Apollo.Common.Path();
        }
        Path.MergeFrom(other.Path);
      }
      if (other.PathPriority != 0) {
        PathPriority = other.PathPriority;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (path_ == null) {
              path_ = new global::Apollo.Common.Path();
            }
            input.ReadMessage(path_);
            break;
          }
          case 16: {
            PathPriority = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavigationInfo : pb::IMessage<NavigationInfo> {
    private static readonly pb::MessageParser<NavigationInfo> _parser = new pb::MessageParser<NavigationInfo>(() => new NavigationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavigationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.RelativeMap.NavigationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationInfo(NavigationInfo other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      navigationPath_ = other.navigationPath_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationInfo Clone() {
      return new NavigationInfo(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "navigation_path" field.</summary>
    public const int NavigationPathFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.RelativeMap.NavigationPath> _repeated_navigationPath_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.RelativeMap.NavigationPath.Parser);
    private readonly pbc::RepeatedField<global::Apollo.RelativeMap.NavigationPath> navigationPath_ = new pbc::RepeatedField<global::Apollo.RelativeMap.NavigationPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.RelativeMap.NavigationPath> NavigationPath {
      get { return navigationPath_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavigationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavigationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!navigationPath_.Equals(other.navigationPath_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= navigationPath_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      navigationPath_.WriteTo(output, _repeated_navigationPath_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += navigationPath_.CalculateSize(_repeated_navigationPath_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavigationInfo other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      navigationPath_.Add(other.navigationPath_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            navigationPath_.AddEntriesFrom(input, _repeated_navigationPath_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The map message in transmission format.
  /// </summary>
  public sealed partial class MapMsg : pb::IMessage<MapMsg> {
    private static readonly pb::MessageParser<MapMsg> _parser = new pb::MessageParser<MapMsg>(() => new MapMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.RelativeMap.NavigationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMsg(MapMsg other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      Hdmap = other.hdmap_ != null ? other.Hdmap.Clone() : null;
      navigationPath_ = other.navigationPath_.Clone();
      LaneMarker = other.laneMarker_ != null ? other.LaneMarker.Clone() : null;
      Localization = other.localization_ != null ? other.Localization.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMsg Clone() {
      return new MapMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "hdmap" field.</summary>
    public const int HdmapFieldNumber = 2;
    private global::Apollo.Hdmap.Map hdmap_;
    /// <summary>
    /// Coordination: FLU
    /// x: Forward
    /// y: Left
    /// z: Up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Map Hdmap {
      get { return hdmap_; }
      set {
        hdmap_ = value;
      }
    }

    /// <summary>Field number for the "navigation_path" field.</summary>
    public const int NavigationPathFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Apollo.RelativeMap.NavigationPath>.Codec _map_navigationPath_codec
        = new pbc::MapField<string, global::Apollo.RelativeMap.NavigationPath>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Apollo.RelativeMap.NavigationPath.Parser), 26);
    private readonly pbc::MapField<string, global::Apollo.RelativeMap.NavigationPath> navigationPath_ = new pbc::MapField<string, global::Apollo.RelativeMap.NavigationPath>();
    /// <summary>
    /// key: type string; the lane id in Map
    /// value: Navigation path; the reference line of the lane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Apollo.RelativeMap.NavigationPath> NavigationPath {
      get { return navigationPath_; }
    }

    /// <summary>Field number for the "lane_marker" field.</summary>
    public const int LaneMarkerFieldNumber = 4;
    private global::Apollo.Perception.LaneMarkers laneMarker_;
    /// <summary>
    /// lane marker info from perception
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.LaneMarkers LaneMarker {
      get { return laneMarker_; }
      set {
        laneMarker_ = value;
      }
    }

    /// <summary>Field number for the "localization" field.</summary>
    public const int LocalizationFieldNumber = 5;
    private global::Apollo.Localization.LocalizationEstimate localization_;
    /// <summary>
    /// localization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.LocalizationEstimate Localization {
      get { return localization_; }
      set {
        localization_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Hdmap, other.Hdmap)) return false;
      if (!NavigationPath.Equals(other.NavigationPath)) return false;
      if (!object.Equals(LaneMarker, other.LaneMarker)) return false;
      if (!object.Equals(Localization, other.Localization)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (hdmap_ != null) hash ^= Hdmap.GetHashCode();
      hash ^= NavigationPath.GetHashCode();
      if (laneMarker_ != null) hash ^= LaneMarker.GetHashCode();
      if (localization_ != null) hash ^= Localization.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (hdmap_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Hdmap);
      }
      navigationPath_.WriteTo(output, _map_navigationPath_codec);
      if (laneMarker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LaneMarker);
      }
      if (localization_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Localization);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (hdmap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdmap);
      }
      size += navigationPath_.CalculateSize(_map_navigationPath_codec);
      if (laneMarker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneMarker);
      }
      if (localization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Localization);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.hdmap_ != null) {
        if (hdmap_ == null) {
          hdmap_ = new global::Apollo.Hdmap.Map();
        }
        Hdmap.MergeFrom(other.Hdmap);
      }
      navigationPath_.Add(other.navigationPath_);
      if (other.laneMarker_ != null) {
        if (laneMarker_ == null) {
          laneMarker_ = new global::Apollo.Perception.LaneMarkers();
        }
        LaneMarker.MergeFrom(other.LaneMarker);
      }
      if (other.localization_ != null) {
        if (localization_ == null) {
          localization_ = new global::Apollo.Localization.LocalizationEstimate();
        }
        Localization.MergeFrom(other.Localization);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (hdmap_ == null) {
              hdmap_ = new global::Apollo.Hdmap.Map();
            }
            input.ReadMessage(hdmap_);
            break;
          }
          case 26: {
            navigationPath_.AddEntriesFrom(input, _map_navigationPath_codec);
            break;
          }
          case 34: {
            if (laneMarker_ == null) {
              laneMarker_ = new global::Apollo.Perception.LaneMarkers();
            }
            input.ReadMessage(laneMarker_);
            break;
          }
          case 42: {
            if (localization_ == null) {
              localization_ = new global::Apollo.Localization.LocalizationEstimate();
            }
            input.ReadMessage(localization_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
