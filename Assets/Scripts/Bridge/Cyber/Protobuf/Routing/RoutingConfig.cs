// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Routing {

  /// <summary>Holder for reflection information generated from modules/routing/proto/routing_config.proto</summary>
  public static partial class RoutingConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/routing/proto/routing_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoutingConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciptb2R1bGVzL3JvdXRpbmcvcHJvdG8vcm91dGluZ19jb25maWcucHJvdG8S",
            "DmFwb2xsby5yb3V0aW5nIqcBCg1Sb3V0aW5nQ29uZmlnEhIKCmJhc2Vfc3Bl",
            "ZWQYASABKAESGQoRbGVmdF90dXJuX3BlbmFsdHkYAiABKAESGgoScmlnaHRf",
            "dHVybl9wZW5hbHR5GAMgASgBEhUKDXV0dXJuX3BlbmFsdHkYBCABKAESFgoO",
            "Y2hhbmdlX3BlbmFsdHkYBSABKAESHAoUYmFzZV9jaGFuZ2luZ19sZW5ndGgY",
            "BiABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.RoutingConfig), global::Apollo.Routing.RoutingConfig.Parser, new[]{ "BaseSpeed", "LeftTurnPenalty", "RightTurnPenalty", "UturnPenalty", "ChangePenalty", "BaseChangingLength" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoutingConfig : pb::IMessage<RoutingConfig> {
    private static readonly pb::MessageParser<RoutingConfig> _parser = new pb::MessageParser<RoutingConfig>(() => new RoutingConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingConfig(RoutingConfig other) : this() {
      baseSpeed_ = other.baseSpeed_;
      leftTurnPenalty_ = other.leftTurnPenalty_;
      rightTurnPenalty_ = other.rightTurnPenalty_;
      uturnPenalty_ = other.uturnPenalty_;
      changePenalty_ = other.changePenalty_;
      baseChangingLength_ = other.baseChangingLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingConfig Clone() {
      return new RoutingConfig(this);
    }

    /// <summary>Field number for the "base_speed" field.</summary>
    public const int BaseSpeedFieldNumber = 1;
    private double baseSpeed_;
    /// <summary>
    /// base speed for node creator 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseSpeed {
      get { return baseSpeed_; }
      set {
        baseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "left_turn_penalty" field.</summary>
    public const int LeftTurnPenaltyFieldNumber = 2;
    private double leftTurnPenalty_;
    /// <summary>
    /// left turn penalty for node creater 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeftTurnPenalty {
      get { return leftTurnPenalty_; }
      set {
        leftTurnPenalty_ = value;
      }
    }

    /// <summary>Field number for the "right_turn_penalty" field.</summary>
    public const int RightTurnPenaltyFieldNumber = 3;
    private double rightTurnPenalty_;
    /// <summary>
    /// right turn penalty for node creater 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RightTurnPenalty {
      get { return rightTurnPenalty_; }
      set {
        rightTurnPenalty_ = value;
      }
    }

    /// <summary>Field number for the "uturn_penalty" field.</summary>
    public const int UturnPenaltyFieldNumber = 4;
    private double uturnPenalty_;
    /// <summary>
    /// left turn penalty for node creater 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UturnPenalty {
      get { return uturnPenalty_; }
      set {
        uturnPenalty_ = value;
      }
    }

    /// <summary>Field number for the "change_penalty" field.</summary>
    public const int ChangePenaltyFieldNumber = 5;
    private double changePenalty_;
    /// <summary>
    /// change penalty for edge creater 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ChangePenalty {
      get { return changePenalty_; }
      set {
        changePenalty_ = value;
      }
    }

    /// <summary>Field number for the "base_changing_length" field.</summary>
    public const int BaseChangingLengthFieldNumber = 6;
    private double baseChangingLength_;
    /// <summary>
    /// base change length penalty for edge creater 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseChangingLength {
      get { return baseChangingLength_; }
      set {
        baseChangingLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseSpeed != other.BaseSpeed) return false;
      if (LeftTurnPenalty != other.LeftTurnPenalty) return false;
      if (RightTurnPenalty != other.RightTurnPenalty) return false;
      if (UturnPenalty != other.UturnPenalty) return false;
      if (ChangePenalty != other.ChangePenalty) return false;
      if (BaseChangingLength != other.BaseChangingLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseSpeed != 0D) hash ^= BaseSpeed.GetHashCode();
      if (LeftTurnPenalty != 0D) hash ^= LeftTurnPenalty.GetHashCode();
      if (RightTurnPenalty != 0D) hash ^= RightTurnPenalty.GetHashCode();
      if (UturnPenalty != 0D) hash ^= UturnPenalty.GetHashCode();
      if (ChangePenalty != 0D) hash ^= ChangePenalty.GetHashCode();
      if (BaseChangingLength != 0D) hash ^= BaseChangingLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BaseSpeed);
      }
      if (LeftTurnPenalty != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LeftTurnPenalty);
      }
      if (RightTurnPenalty != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RightTurnPenalty);
      }
      if (UturnPenalty != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(UturnPenalty);
      }
      if (ChangePenalty != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ChangePenalty);
      }
      if (BaseChangingLength != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(BaseChangingLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseSpeed != 0D) {
        size += 1 + 8;
      }
      if (LeftTurnPenalty != 0D) {
        size += 1 + 8;
      }
      if (RightTurnPenalty != 0D) {
        size += 1 + 8;
      }
      if (UturnPenalty != 0D) {
        size += 1 + 8;
      }
      if (ChangePenalty != 0D) {
        size += 1 + 8;
      }
      if (BaseChangingLength != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingConfig other) {
      if (other == null) {
        return;
      }
      if (other.BaseSpeed != 0D) {
        BaseSpeed = other.BaseSpeed;
      }
      if (other.LeftTurnPenalty != 0D) {
        LeftTurnPenalty = other.LeftTurnPenalty;
      }
      if (other.RightTurnPenalty != 0D) {
        RightTurnPenalty = other.RightTurnPenalty;
      }
      if (other.UturnPenalty != 0D) {
        UturnPenalty = other.UturnPenalty;
      }
      if (other.ChangePenalty != 0D) {
        ChangePenalty = other.ChangePenalty;
      }
      if (other.BaseChangingLength != 0D) {
        BaseChangingLength = other.BaseChangingLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            BaseSpeed = input.ReadDouble();
            break;
          }
          case 17: {
            LeftTurnPenalty = input.ReadDouble();
            break;
          }
          case 25: {
            RightTurnPenalty = input.ReadDouble();
            break;
          }
          case 33: {
            UturnPenalty = input.ReadDouble();
            break;
          }
          case 41: {
            ChangePenalty = input.ReadDouble();
            break;
          }
          case 49: {
            BaseChangingLength = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
