// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/topo_graph.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Routing {

  /// <summary>Holder for reflection information generated from modules/routing/proto/topo_graph.proto</summary>
  public static partial class TopoGraphReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/routing/proto/topo_graph.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TopoGraphReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZtb2R1bGVzL3JvdXRpbmcvcHJvdG8vdG9wb19ncmFwaC5wcm90bxIOYXBv",
            "bGxvLnJvdXRpbmcaJG1vZHVsZXMvbWFwL3Byb3RvL21hcF9nZW9tZXRyeS5w",
            "cm90byIXCgpDdXJ2ZVBvaW50EgkKAXMYASABKAEiYAoKQ3VydmVSYW5nZRIp",
            "CgVzdGFydBgBIAEoCzIaLmFwb2xsby5yb3V0aW5nLkN1cnZlUG9pbnQSJwoD",
            "ZW5kGAIgASgLMhouYXBvbGxvLnJvdXRpbmcuQ3VydmVQb2ludCLjAQoETm9k",
            "ZRIPCgdsYW5lX2lkGAEgASgJEg4KBmxlbmd0aBgCIAEoARIsCghsZWZ0X291",
            "dBgDIAMoCzIaLmFwb2xsby5yb3V0aW5nLkN1cnZlUmFuZ2USLQoJcmlnaHRf",
            "b3V0GAQgAygLMhouYXBvbGxvLnJvdXRpbmcuQ3VydmVSYW5nZRIMCgRjb3N0",
            "GAUgASgBEioKDWNlbnRyYWxfY3VydmUYBiABKAsyEy5hcG9sbG8uaGRtYXAu",
            "Q3VydmUSEgoKaXNfdmlydHVhbBgHIAEoCBIPCgdyb2FkX2lkGAggASgJIq0B",
            "CgRFZGdlEhQKDGZyb21fbGFuZV9pZBgBIAEoCRISCgp0b19sYW5lX2lkGAIg",
            "ASgJEgwKBGNvc3QYAyABKAESOgoOZGlyZWN0aW9uX3R5cGUYBCABKA4yIi5h",
            "cG9sbG8ucm91dGluZy5FZGdlLkRpcmVjdGlvblR5cGUiMQoNRGlyZWN0aW9u",
            "VHlwZRILCgdGT1JXQVJEEAASCAoETEVGVBABEgkKBVJJR0hUEAIifgoFR3Jh",
            "cGgSFQoNaGRtYXBfdmVyc2lvbhgBIAEoCRIWCg5oZG1hcF9kaXN0cmljdBgC",
            "IAEoCRIiCgRub2RlGAMgAygLMhQuYXBvbGxvLnJvdXRpbmcuTm9kZRIiCgRl",
            "ZGdlGAQgAygLMhQuYXBvbGxvLnJvdXRpbmcuRWRnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Hdmap.MapGeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.CurvePoint), global::Apollo.Routing.CurvePoint.Parser, new[]{ "S" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.CurveRange), global::Apollo.Routing.CurveRange.Parser, new[]{ "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.Node), global::Apollo.Routing.Node.Parser, new[]{ "LaneId", "Length", "LeftOut", "RightOut", "Cost", "CentralCurve", "IsVirtual", "RoadId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.Edge), global::Apollo.Routing.Edge.Parser, new[]{ "FromLaneId", "ToLaneId", "Cost", "DirectionType" }, null, new[]{ typeof(global::Apollo.Routing.Edge.Types.DirectionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.Graph), global::Apollo.Routing.Graph.Parser, new[]{ "HdmapVersion", "HdmapDistrict", "Node", "Edge" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CurvePoint : pb::IMessage<CurvePoint> {
    private static readonly pb::MessageParser<CurvePoint> _parser = new pb::MessageParser<CurvePoint>(() => new CurvePoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurvePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.TopoGraphReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurvePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurvePoint(CurvePoint other) : this() {
      s_ = other.s_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurvePoint Clone() {
      return new CurvePoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurvePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurvePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0D) hash ^= S.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(S);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurvePoint other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            S = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurveRange : pb::IMessage<CurveRange> {
    private static readonly pb::MessageParser<CurveRange> _parser = new pb::MessageParser<CurveRange>(() => new CurveRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurveRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.TopoGraphReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurveRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurveRange(CurveRange other) : this() {
      Start = other.start_ != null ? other.Start.Clone() : null;
      End = other.end_ != null ? other.End.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurveRange Clone() {
      return new CurveRange(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private global::Apollo.Routing.CurvePoint start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.CurvePoint Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private global::Apollo.Routing.CurvePoint end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.CurvePoint End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurveRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurveRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (start_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurveRange other) {
      if (other == null) {
        return;
      }
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Apollo.Routing.CurvePoint();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          end_ = new global::Apollo.Routing.CurvePoint();
        }
        End.MergeFrom(other.End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (start_ == null) {
              start_ = new global::Apollo.Routing.CurvePoint();
            }
            input.ReadMessage(start_);
            break;
          }
          case 18: {
            if (end_ == null) {
              end_ = new global::Apollo.Routing.CurvePoint();
            }
            input.ReadMessage(end_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.TopoGraphReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      laneId_ = other.laneId_;
      length_ = other.length_;
      leftOut_ = other.leftOut_.Clone();
      rightOut_ = other.rightOut_.Clone();
      cost_ = other.cost_;
      CentralCurve = other.centralCurve_ != null ? other.CentralCurve.Clone() : null;
      isVirtual_ = other.isVirtual_;
      roadId_ = other.roadId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private string laneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneId {
      get { return laneId_; }
      set {
        laneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "left_out" field.</summary>
    public const int LeftOutFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Routing.CurveRange> _repeated_leftOut_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Routing.CurveRange.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.CurveRange> leftOut_ = new pbc::RepeatedField<global::Apollo.Routing.CurveRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.CurveRange> LeftOut {
      get { return leftOut_; }
    }

    /// <summary>Field number for the "right_out" field.</summary>
    public const int RightOutFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Routing.CurveRange> _repeated_rightOut_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Routing.CurveRange.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.CurveRange> rightOut_ = new pbc::RepeatedField<global::Apollo.Routing.CurveRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.CurveRange> RightOut {
      get { return rightOut_; }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 5;
    private double cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "central_curve" field.</summary>
    public const int CentralCurveFieldNumber = 6;
    private global::Apollo.Hdmap.Curve centralCurve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Curve CentralCurve {
      get { return centralCurve_; }
      set {
        centralCurve_ = value;
      }
    }

    /// <summary>Field number for the "is_virtual" field.</summary>
    public const int IsVirtualFieldNumber = 7;
    private bool isVirtual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVirtual {
      get { return isVirtual_; }
      set {
        isVirtual_ = value;
      }
    }

    /// <summary>Field number for the "road_id" field.</summary>
    public const int RoadIdFieldNumber = 8;
    private string roadId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoadId {
      get { return roadId_; }
      set {
        roadId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if (Length != other.Length) return false;
      if(!leftOut_.Equals(other.leftOut_)) return false;
      if(!rightOut_.Equals(other.rightOut_)) return false;
      if (Cost != other.Cost) return false;
      if (!object.Equals(CentralCurve, other.CentralCurve)) return false;
      if (IsVirtual != other.IsVirtual) return false;
      if (RoadId != other.RoadId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneId.Length != 0) hash ^= LaneId.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      hash ^= leftOut_.GetHashCode();
      hash ^= rightOut_.GetHashCode();
      if (Cost != 0D) hash ^= Cost.GetHashCode();
      if (centralCurve_ != null) hash ^= CentralCurve.GetHashCode();
      if (IsVirtual != false) hash ^= IsVirtual.GetHashCode();
      if (RoadId.Length != 0) hash ^= RoadId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LaneId);
      }
      if (Length != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Length);
      }
      leftOut_.WriteTo(output, _repeated_leftOut_codec);
      rightOut_.WriteTo(output, _repeated_rightOut_codec);
      if (Cost != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Cost);
      }
      if (centralCurve_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CentralCurve);
      }
      if (IsVirtual != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsVirtual);
      }
      if (RoadId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RoadId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneId);
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      size += leftOut_.CalculateSize(_repeated_leftOut_codec);
      size += rightOut_.CalculateSize(_repeated_rightOut_codec);
      if (Cost != 0D) {
        size += 1 + 8;
      }
      if (centralCurve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CentralCurve);
      }
      if (IsVirtual != false) {
        size += 1 + 1;
      }
      if (RoadId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoadId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.LaneId.Length != 0) {
        LaneId = other.LaneId;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      leftOut_.Add(other.leftOut_);
      rightOut_.Add(other.rightOut_);
      if (other.Cost != 0D) {
        Cost = other.Cost;
      }
      if (other.centralCurve_ != null) {
        if (centralCurve_ == null) {
          centralCurve_ = new global::Apollo.Hdmap.Curve();
        }
        CentralCurve.MergeFrom(other.CentralCurve);
      }
      if (other.IsVirtual != false) {
        IsVirtual = other.IsVirtual;
      }
      if (other.RoadId.Length != 0) {
        RoadId = other.RoadId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LaneId = input.ReadString();
            break;
          }
          case 17: {
            Length = input.ReadDouble();
            break;
          }
          case 26: {
            leftOut_.AddEntriesFrom(input, _repeated_leftOut_codec);
            break;
          }
          case 34: {
            rightOut_.AddEntriesFrom(input, _repeated_rightOut_codec);
            break;
          }
          case 41: {
            Cost = input.ReadDouble();
            break;
          }
          case 50: {
            if (centralCurve_ == null) {
              centralCurve_ = new global::Apollo.Hdmap.Curve();
            }
            input.ReadMessage(centralCurve_);
            break;
          }
          case 56: {
            IsVirtual = input.ReadBool();
            break;
          }
          case 66: {
            RoadId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Edge : pb::IMessage<Edge> {
    private static readonly pb::MessageParser<Edge> _parser = new pb::MessageParser<Edge>(() => new Edge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Edge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.TopoGraphReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Edge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Edge(Edge other) : this() {
      fromLaneId_ = other.fromLaneId_;
      toLaneId_ = other.toLaneId_;
      cost_ = other.cost_;
      directionType_ = other.directionType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Edge Clone() {
      return new Edge(this);
    }

    /// <summary>Field number for the "from_lane_id" field.</summary>
    public const int FromLaneIdFieldNumber = 1;
    private string fromLaneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromLaneId {
      get { return fromLaneId_; }
      set {
        fromLaneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_lane_id" field.</summary>
    public const int ToLaneIdFieldNumber = 2;
    private string toLaneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToLaneId {
      get { return toLaneId_; }
      set {
        toLaneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private double cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "direction_type" field.</summary>
    public const int DirectionTypeFieldNumber = 4;
    private global::Apollo.Routing.Edge.Types.DirectionType directionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.Edge.Types.DirectionType DirectionType {
      get { return directionType_; }
      set {
        directionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Edge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Edge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromLaneId != other.FromLaneId) return false;
      if (ToLaneId != other.ToLaneId) return false;
      if (Cost != other.Cost) return false;
      if (DirectionType != other.DirectionType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromLaneId.Length != 0) hash ^= FromLaneId.GetHashCode();
      if (ToLaneId.Length != 0) hash ^= ToLaneId.GetHashCode();
      if (Cost != 0D) hash ^= Cost.GetHashCode();
      if (DirectionType != 0) hash ^= DirectionType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromLaneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromLaneId);
      }
      if (ToLaneId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToLaneId);
      }
      if (Cost != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Cost);
      }
      if (DirectionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DirectionType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromLaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromLaneId);
      }
      if (ToLaneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToLaneId);
      }
      if (Cost != 0D) {
        size += 1 + 8;
      }
      if (DirectionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DirectionType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Edge other) {
      if (other == null) {
        return;
      }
      if (other.FromLaneId.Length != 0) {
        FromLaneId = other.FromLaneId;
      }
      if (other.ToLaneId.Length != 0) {
        ToLaneId = other.ToLaneId;
      }
      if (other.Cost != 0D) {
        Cost = other.Cost;
      }
      if (other.DirectionType != 0) {
        DirectionType = other.DirectionType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FromLaneId = input.ReadString();
            break;
          }
          case 18: {
            ToLaneId = input.ReadString();
            break;
          }
          case 25: {
            Cost = input.ReadDouble();
            break;
          }
          case 32: {
            directionType_ = (global::Apollo.Routing.Edge.Types.DirectionType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Edge message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DirectionType {
        [pbr::OriginalName("FORWARD")] Forward = 0,
        [pbr::OriginalName("LEFT")] Left = 1,
        [pbr::OriginalName("RIGHT")] Right = 2,
      }

    }
    #endregion

  }

  public sealed partial class Graph : pb::IMessage<Graph> {
    private static readonly pb::MessageParser<Graph> _parser = new pb::MessageParser<Graph>(() => new Graph());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Graph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.TopoGraphReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Graph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Graph(Graph other) : this() {
      hdmapVersion_ = other.hdmapVersion_;
      hdmapDistrict_ = other.hdmapDistrict_;
      node_ = other.node_.Clone();
      edge_ = other.edge_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Graph Clone() {
      return new Graph(this);
    }

    /// <summary>Field number for the "hdmap_version" field.</summary>
    public const int HdmapVersionFieldNumber = 1;
    private string hdmapVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HdmapVersion {
      get { return hdmapVersion_; }
      set {
        hdmapVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hdmap_district" field.</summary>
    public const int HdmapDistrictFieldNumber = 2;
    private string hdmapDistrict_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HdmapDistrict {
      get { return hdmapDistrict_; }
      set {
        hdmapDistrict_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Routing.Node> _repeated_node_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Routing.Node.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.Node> node_ = new pbc::RepeatedField<global::Apollo.Routing.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.Node> Node {
      get { return node_; }
    }

    /// <summary>Field number for the "edge" field.</summary>
    public const int EdgeFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Routing.Edge> _repeated_edge_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Routing.Edge.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.Edge> edge_ = new pbc::RepeatedField<global::Apollo.Routing.Edge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.Edge> Edge {
      get { return edge_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Graph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Graph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HdmapVersion != other.HdmapVersion) return false;
      if (HdmapDistrict != other.HdmapDistrict) return false;
      if(!node_.Equals(other.node_)) return false;
      if(!edge_.Equals(other.edge_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HdmapVersion.Length != 0) hash ^= HdmapVersion.GetHashCode();
      if (HdmapDistrict.Length != 0) hash ^= HdmapDistrict.GetHashCode();
      hash ^= node_.GetHashCode();
      hash ^= edge_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HdmapVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HdmapVersion);
      }
      if (HdmapDistrict.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HdmapDistrict);
      }
      node_.WriteTo(output, _repeated_node_codec);
      edge_.WriteTo(output, _repeated_edge_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HdmapVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HdmapVersion);
      }
      if (HdmapDistrict.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HdmapDistrict);
      }
      size += node_.CalculateSize(_repeated_node_codec);
      size += edge_.CalculateSize(_repeated_edge_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Graph other) {
      if (other == null) {
        return;
      }
      if (other.HdmapVersion.Length != 0) {
        HdmapVersion = other.HdmapVersion;
      }
      if (other.HdmapDistrict.Length != 0) {
        HdmapDistrict = other.HdmapDistrict;
      }
      node_.Add(other.node_);
      edge_.Add(other.edge_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HdmapVersion = input.ReadString();
            break;
          }
          case 18: {
            HdmapDistrict = input.ReadString();
            break;
          }
          case 26: {
            node_.AddEntriesFrom(input, _repeated_node_codec);
            break;
          }
          case 34: {
            edge_.AddEntriesFrom(input, _repeated_edge_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
