// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_geometry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Hdmap {

  /// <summary>Holder for reflection information generated from modules/map/proto/map_geometry.proto</summary>
  public static partial class MapGeometryReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/map/proto/map_geometry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapGeometryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRtb2R1bGVzL21hcC9wcm90by9tYXBfZ2VvbWV0cnkucHJvdG8SDGFwb2xs",
            "by5oZG1hcBojbW9kdWxlcy9jb21tb24vcHJvdG8vZ2VvbWV0cnkucHJvdG8i",
            "MQoHUG9seWdvbhImCgVwb2ludBgBIAMoCzIXLmFwb2xsby5jb21tb24uUG9p",
            "bnRFTlUiNQoLTGluZVNlZ21lbnQSJgoFcG9pbnQYASADKAsyFy5hcG9sbG8u",
            "Y29tbW9uLlBvaW50RU5VIqwBCgxDdXJ2ZVNlZ21lbnQSMQoMbGluZV9zZWdt",
            "ZW50GAEgASgLMhkuYXBvbGxvLmhkbWFwLkxpbmVTZWdtZW50SAASCQoBcxgG",
            "IAEoARIvCg5zdGFydF9wb3NpdGlvbhgHIAEoCzIXLmFwb2xsby5jb21tb24u",
            "UG9pbnRFTlUSDwoHaGVhZGluZxgIIAEoARIOCgZsZW5ndGgYCSABKAFCDAoK",
            "Y3VydmVfdHlwZSI0CgVDdXJ2ZRIrCgdzZWdtZW50GAEgAygLMhouYXBvbGxv",
            "LmhkbWFwLkN1cnZlU2VnbWVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.Polygon), global::Apollo.Hdmap.Polygon.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.LineSegment), global::Apollo.Hdmap.LineSegment.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.CurveSegment), global::Apollo.Hdmap.CurveSegment.Parser, new[]{ "LineSegment", "S", "StartPosition", "Heading", "Length" }, new[]{ "CurveType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.Curve), global::Apollo.Hdmap.Curve.Parser, new[]{ "Segment" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Polygon, not necessary convex.
  /// </summary>
  public sealed partial class Polygon : pb::IMessage<Polygon> {
    private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapGeometryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon(Polygon other) : this() {
      point_ = other.point_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon Clone() {
      return new Polygon(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.PointENU> _repeated_point_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.PointENU.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.PointENU> point_ = new pbc::RepeatedField<global::Apollo.Common.PointENU>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.PointENU> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Polygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polygon other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Straight line segment.
  /// </summary>
  public sealed partial class LineSegment : pb::IMessage<LineSegment> {
    private static readonly pb::MessageParser<LineSegment> _parser = new pb::MessageParser<LineSegment>(() => new LineSegment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LineSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapGeometryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineSegment(LineSegment other) : this() {
      point_ = other.point_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineSegment Clone() {
      return new LineSegment(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.PointENU> _repeated_point_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.PointENU.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.PointENU> point_ = new pbc::RepeatedField<global::Apollo.Common.PointENU>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.PointENU> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LineSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LineSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LineSegment other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generalization of a line.
  /// </summary>
  public sealed partial class CurveSegment : pb::IMessage<CurveSegment> {
    private static readonly pb::MessageParser<CurveSegment> _parser = new pb::MessageParser<CurveSegment>(() => new CurveSegment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurveSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapGeometryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurveSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurveSegment(CurveSegment other) : this() {
      s_ = other.s_;
      StartPosition = other.startPosition_ != null ? other.StartPosition.Clone() : null;
      heading_ = other.heading_;
      length_ = other.length_;
      switch (other.CurveTypeCase) {
        case CurveTypeOneofCase.LineSegment:
          LineSegment = other.LineSegment.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurveSegment Clone() {
      return new CurveSegment(this);
    }

    /// <summary>Field number for the "line_segment" field.</summary>
    public const int LineSegmentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.LineSegment LineSegment {
      get { return curveTypeCase_ == CurveTypeOneofCase.LineSegment ? (global::Apollo.Hdmap.LineSegment) curveType_ : null; }
      set {
        curveType_ = value;
        curveTypeCase_ = value == null ? CurveTypeOneofCase.None : CurveTypeOneofCase.LineSegment;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 6;
    private double s_;
    /// <summary>
    /// start position (s-coordinate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "start_position" field.</summary>
    public const int StartPositionFieldNumber = 7;
    private global::Apollo.Common.PointENU startPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU StartPosition {
      get { return startPosition_; }
      set {
        startPosition_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 8;
    private double heading_;
    /// <summary>
    /// start orientation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 9;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    private object curveType_;
    /// <summary>Enum of possible cases for the "curve_type" oneof.</summary>
    public enum CurveTypeOneofCase {
      None = 0,
      LineSegment = 1,
    }
    private CurveTypeOneofCase curveTypeCase_ = CurveTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurveTypeOneofCase CurveTypeCase {
      get { return curveTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurveType() {
      curveTypeCase_ = CurveTypeOneofCase.None;
      curveType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurveSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurveSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LineSegment, other.LineSegment)) return false;
      if (S != other.S) return false;
      if (!object.Equals(StartPosition, other.StartPosition)) return false;
      if (Heading != other.Heading) return false;
      if (Length != other.Length) return false;
      if (CurveTypeCase != other.CurveTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (curveTypeCase_ == CurveTypeOneofCase.LineSegment) hash ^= LineSegment.GetHashCode();
      if (S != 0D) hash ^= S.GetHashCode();
      if (startPosition_ != null) hash ^= StartPosition.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      hash ^= (int) curveTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (curveTypeCase_ == CurveTypeOneofCase.LineSegment) {
        output.WriteRawTag(10);
        output.WriteMessage(LineSegment);
      }
      if (S != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(S);
      }
      if (startPosition_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartPosition);
      }
      if (Heading != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Heading);
      }
      if (Length != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Length);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (curveTypeCase_ == CurveTypeOneofCase.LineSegment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LineSegment);
      }
      if (S != 0D) {
        size += 1 + 8;
      }
      if (startPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPosition);
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurveSegment other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.startPosition_ != null) {
        if (startPosition_ == null) {
          startPosition_ = new global::Apollo.Common.PointENU();
        }
        StartPosition.MergeFrom(other.StartPosition);
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      switch (other.CurveTypeCase) {
        case CurveTypeOneofCase.LineSegment:
          LineSegment = other.LineSegment;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Apollo.Hdmap.LineSegment subBuilder = new global::Apollo.Hdmap.LineSegment();
            if (curveTypeCase_ == CurveTypeOneofCase.LineSegment) {
              subBuilder.MergeFrom(LineSegment);
            }
            input.ReadMessage(subBuilder);
            LineSegment = subBuilder;
            break;
          }
          case 49: {
            S = input.ReadDouble();
            break;
          }
          case 58: {
            if (startPosition_ == null) {
              startPosition_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(startPosition_);
            break;
          }
          case 65: {
            Heading = input.ReadDouble();
            break;
          }
          case 73: {
            Length = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An object similar to a line but that need not be straight.
  /// </summary>
  public sealed partial class Curve : pb::IMessage<Curve> {
    private static readonly pb::MessageParser<Curve> _parser = new pb::MessageParser<Curve>(() => new Curve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Curve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapGeometryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curve(Curve other) : this() {
      segment_ = other.segment_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curve Clone() {
      return new Curve(this);
    }

    /// <summary>Field number for the "segment" field.</summary>
    public const int SegmentFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Hdmap.CurveSegment> _repeated_segment_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Hdmap.CurveSegment.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Hdmap.CurveSegment> segment_ = new pbc::RepeatedField<global::Apollo.Hdmap.CurveSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Hdmap.CurveSegment> Segment {
      get { return segment_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Curve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Curve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segment_.Equals(other.segment_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segment_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      segment_.WriteTo(output, _repeated_segment_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segment_.CalculateSize(_repeated_segment_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Curve other) {
      if (other == null) {
        return;
      }
      segment_.Add(other.segment_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            segment_.AddEntriesFrom(input, _repeated_segment_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
