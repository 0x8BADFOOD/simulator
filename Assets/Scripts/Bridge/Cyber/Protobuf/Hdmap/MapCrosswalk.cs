// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_crosswalk.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Hdmap {

  /// <summary>Holder for reflection information generated from modules/map/proto/map_crosswalk.proto</summary>
  public static partial class MapCrosswalkReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/map/proto/map_crosswalk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapCrosswalkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVtb2R1bGVzL21hcC9wcm90by9tYXBfY3Jvc3N3YWxrLnByb3RvEgxhcG9s",
            "bG8uaGRtYXAaJG1vZHVsZXMvbWFwL3Byb3RvL21hcF9nZW9tZXRyeS5wcm90",
            "bxoebW9kdWxlcy9tYXAvcHJvdG8vbWFwX2lkLnByb3RvIncKCUNyb3Nzd2Fs",
            "axIcCgJpZBgBIAEoCzIQLmFwb2xsby5oZG1hcC5JZBImCgdwb2x5Z29uGAIg",
            "ASgLMhUuYXBvbGxvLmhkbWFwLlBvbHlnb24SJAoKb3ZlcmxhcF9pZBgDIAMo",
            "CzIQLmFwb2xsby5oZG1hcC5JZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Hdmap.MapGeometryReflection.Descriptor, global::Apollo.Hdmap.MapIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.Crosswalk), global::Apollo.Hdmap.Crosswalk.Parser, new[]{ "Id", "Polygon", "OverlapId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Crosswalk is a place designated for pedestrians to cross a road.
  /// </summary>
  public sealed partial class Crosswalk : pb::IMessage<Crosswalk> {
    private static readonly pb::MessageParser<Crosswalk> _parser = new pb::MessageParser<Crosswalk>(() => new Crosswalk());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Crosswalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapCrosswalkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Crosswalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Crosswalk(Crosswalk other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      Polygon = other.polygon_ != null ? other.Polygon.Clone() : null;
      overlapId_ = other.overlapId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Crosswalk Clone() {
      return new Crosswalk(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Apollo.Hdmap.Id id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Id Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::Apollo.Hdmap.Polygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Polygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    /// <summary>Field number for the "overlap_id" field.</summary>
    public const int OverlapIdFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Hdmap.Id> _repeated_overlapId_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Hdmap.Id.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Hdmap.Id> overlapId_ = new pbc::RepeatedField<global::Apollo.Hdmap.Id>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Hdmap.Id> OverlapId {
      get { return overlapId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Crosswalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Crosswalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      if(!overlapId_.Equals(other.overlapId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      hash ^= overlapId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      overlapId_.WriteTo(output, _repeated_overlapId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      size += overlapId_.CalculateSize(_repeated_overlapId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Crosswalk other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::Apollo.Hdmap.Id();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          polygon_ = new global::Apollo.Hdmap.Polygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      overlapId_.Add(other.overlapId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::Apollo.Hdmap.Id();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              polygon_ = new global::Apollo.Hdmap.Polygon();
            }
            input.ReadMessage(polygon_);
            break;
          }
          case 26: {
            overlapId_.AddEntriesFrom(input, _repeated_overlapId_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
