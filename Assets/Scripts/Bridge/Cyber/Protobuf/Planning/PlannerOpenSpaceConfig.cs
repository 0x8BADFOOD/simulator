// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planner_open_space_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/planner_open_space_config.proto</summary>
  public static partial class PlannerOpenSpaceConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/planner_open_space_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlannerOpenSpaceConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BsYW5uZXJfb3Blbl9zcGFjZV9j",
            "b25maWcucHJvdG8SD2Fwb2xsby5wbGFubmluZyL/AwoWUGxhbm5lck9wZW5T",
            "cGFjZUNvbmZpZxIuCgpyb2lfY29uZmlnGAEgASgLMhouYXBvbGxvLnBsYW5u",
            "aW5nLlJPSUNvbmZpZxI7ChF3YXJtX3N0YXJ0X2NvbmZpZxgCIAEoCzIgLmFw",
            "b2xsby5wbGFubmluZy5XYXJtU3RhcnRDb25maWcSVQofZHVhbF92YXJpYWJs",
            "ZV93YXJtX3N0YXJ0X2NvbmZpZxgDIAEoCzIsLmFwb2xsby5wbGFubmluZy5E",
            "dWFsVmFyaWFibGVXYXJtU3RhcnRDb25maWcSSQoYZGlzdGFuY2VfYXBwcm9h",
            "Y2hfY29uZmlnGAQgASgLMicuYXBvbGxvLnBsYW5uaW5nLkRpc3RhbmNlQXBw",
            "cm9hY2hDb25maWcSTwobdHJhamVjdG9yeV9wYXJ0aXRpb25fY29uZmlnGAUg",
            "ASgLMiouYXBvbGxvLnBsYW5uaW5nLlRyYWplY3RvcnlQYXJ0aXRpb25Db25m",
            "aWcSDwoHZGVsdGFfdBgGIAEoAhInCh9tYXhfcG9zaXRpb25fZXJyb3JfdG9f",
            "ZW5kX3BvaW50GAcgASgBEiQKHG1heF90aGV0YV9lcnJvcl90b19lbmRfcG9p",
            "bnQYCCABKAESJQodaXNfbmVhcl9kZXN0aW5hdGlvbl90aHJlc2hvbGQYCSAB",
            "KAEiYQoJUk9JQ29uZmlnEh4KFnJvaV9sb25naXR1ZGluYWxfcmFuZ2UYASAB",
            "KAESGwoTcGFya2luZ19zdGFydF9yYW5nZRgCIAEoARIXCg9wYXJraW5nX2lu",
            "d2FyZHMYAyABKAgixgIKD1dhcm1TdGFydENvbmZpZxIaChJ4eV9ncmlkX3Jl",
            "c29sdXRpb24YASABKAESGwoTcGhpX2dyaWRfcmVzb2x1dGlvbhgCIAEoARIV",
            "Cg1uZXh0X25vZGVfbnVtGAMgASgEEhEKCXN0ZXBfc2l6ZRgEIAEoARIcChR0",
            "cmFqX2ZvcndhcmRfcGVuYWx0eRgFIAEoARIZChF0cmFqX2JhY2tfcGVuYWx0",
            "eRgGIAEoARIgChh0cmFqX2dlYXJfc3dpdGNoX3BlbmFsdHkYByABKAESGgoS",
            "dHJhal9zdGVlcl9wZW5hbHR5GAggASgBEiEKGXRyYWpfc3RlZXJfY2hhbmdl",
            "X3BlbmFsdHkYCSABKAESIQoZZ3JpZF9hX3N0YXJfeHlfcmVzb2x1dGlvbhgP",
            "IAEoARITCgtub2RlX3JhZGl1cxgQIAEoASJjChtEdWFsVmFyaWFibGVXYXJt",
            "U3RhcnRDb25maWcSEAoId2VpZ2h0X2QYASABKAESMgoMaXBvcHRfY29uZmln",
            "GAIgASgLMhwuYXBvbGxvLnBsYW5uaW5nLklwb3B0Q29uZmlnIt4EChZEaXN0",
            "YW5jZUFwcHJvYWNoQ29uZmlnEhQKDHdlaWdodF9zdGVlchgBIAEoARIQCgh3",
            "ZWlnaHRfYRgCIAEoARIZChF3ZWlnaHRfc3RlZXJfcmF0ZRgDIAEoARIVCg13",
            "ZWlnaHRfYV9yYXRlGAQgASgBEhAKCHdlaWdodF94GAUgASgBEhAKCHdlaWdo",
            "dF95GAYgASgBEhIKCndlaWdodF9waGkYByABKAESEAoId2VpZ2h0X3YYCCAB",
            "KAESHgoWd2VpZ2h0X3N0ZWVyX3N0aXRjaGluZxgJIAEoARIaChJ3ZWlnaHRf",
            "YV9zdGl0Y2hpbmcYCiABKAESHwoXd2VpZ2h0X2ZpcnN0X29yZGVyX3RpbWUY",
            "CyABKAESIAoYd2VpZ2h0X3NlY29uZF9vcmRlcl90aW1lGAwgASgBEhsKE21p",
            "bl9zYWZldHlfZGlzdGFuY2UYDSABKAESGQoRbWF4X3NwZWVkX2ZvcndhcmQY",
            "DiABKAESGQoRbWF4X3NwZWVkX3JldmVyc2UYDyABKAESIAoYbWF4X2FjY2Vs",
            "ZXJhdGlvbl9mb3J3YXJkGBAgASgBEiAKGG1heF9hY2NlbGVyYXRpb25fcmV2",
            "ZXJzZRgRIAEoARIfChdtaW5fdGltZV9zYW1wbGVfc2NhbGluZxgSIAEoARIf",
            "ChdtYXhfdGltZV9zYW1wbGVfc2NhbGluZxgTIAEoARIUCgx1c2VfZml4X3Rp",
            "bWUYFCABKAgSMgoMaXBvcHRfY29uZmlnGBUgASgLMhwuYXBvbGxvLnBsYW5u",
            "aW5nLklwb3B0Q29uZmlnIt0CCgtJcG9wdENvbmZpZxIZChFpcG9wdF9wcmlu",
            "dF9sZXZlbBgBIAEoBRIZChFtdW1wc19tZW1fcGVyY2VudBgCIAEoBRIUCgxt",
            "dW1wc19waXZ0b2wYAyABKAESFgoOaXBvcHRfbWF4X2l0ZXIYBCABKAUSEQoJ",
            "aXBvcHRfdG9sGAUgASgBEigKIGlwb3B0X2FjY2VwdGFibGVfY29uc3RyX3Zp",
            "b2xfdG9sGAYgASgBEiYKHmlwb3B0X21pbl9oZXNzaWFuX3BlcnR1cmJhdGlv",
            "bhgHIAEoARIrCiNpcG9wdF9qYWNvYmlhbl9yZWd1bGFyaXphdGlvbl92YWx1",
            "ZRgIIAEoARIlCh1pcG9wdF9wcmludF90aW1pbmdfc3RhdGlzdGljcxgJIAEo",
            "CRIZChFpcG9wdF9hbHBoYV9mb3JfeRgKIAEoCRIWCg5pcG9wdF9yZWNhbGNf",
            "eRgLIAEoCSLaAQoZVHJhamVjdG9yeVBhcnRpdGlvbkNvbmZpZxIfChdpbnRl",
            "cnBvbGF0ZWRfcGllY2VzX251bRgBIAEoBBIiChppbml0aWFsX2dlYXJfY2hl",
            "Y2tfaG9yaXpvbhgCIAEoBBIfChdoZWFkaW5nX3NlYXJjaGluZ19yYW5nZRgD",
            "IAEoARIiChpnZWFyX3NoaWZ0X3BlcmlvZF9kdXJhdGlvbhgEIAEoARIYChBn",
            "ZWFyX3NoaWZ0X21heF90GAUgASgBEhkKEWdlYXJfc2hpZnRfdW5pdF90GAYg",
            "ASgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PlannerOpenSpaceConfig), global::Apollo.Planning.PlannerOpenSpaceConfig.Parser, new[]{ "RoiConfig", "WarmStartConfig", "DualVariableWarmStartConfig", "DistanceApproachConfig", "TrajectoryPartitionConfig", "DeltaT", "MaxPositionErrorToEndPoint", "MaxThetaErrorToEndPoint", "IsNearDestinationThreshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ROIConfig), global::Apollo.Planning.ROIConfig.Parser, new[]{ "RoiLongitudinalRange", "ParkingStartRange", "ParkingInwards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.WarmStartConfig), global::Apollo.Planning.WarmStartConfig.Parser, new[]{ "XyGridResolution", "PhiGridResolution", "NextNodeNum", "StepSize", "TrajForwardPenalty", "TrajBackPenalty", "TrajGearSwitchPenalty", "TrajSteerPenalty", "TrajSteerChangePenalty", "GridAStarXyResolution", "NodeRadius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.DualVariableWarmStartConfig), global::Apollo.Planning.DualVariableWarmStartConfig.Parser, new[]{ "WeightD", "IpoptConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.DistanceApproachConfig), global::Apollo.Planning.DistanceApproachConfig.Parser, new[]{ "WeightSteer", "WeightA", "WeightSteerRate", "WeightARate", "WeightX", "WeightY", "WeightPhi", "WeightV", "WeightSteerStitching", "WeightAStitching", "WeightFirstOrderTime", "WeightSecondOrderTime", "MinSafetyDistance", "MaxSpeedForward", "MaxSpeedReverse", "MaxAccelerationForward", "MaxAccelerationReverse", "MinTimeSampleScaling", "MaxTimeSampleScaling", "UseFixTime", "IpoptConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.IpoptConfig), global::Apollo.Planning.IpoptConfig.Parser, new[]{ "IpoptPrintLevel", "MumpsMemPercent", "MumpsPivtol", "IpoptMaxIter", "IpoptTol", "IpoptAcceptableConstrViolTol", "IpoptMinHessianPerturbation", "IpoptJacobianRegularizationValue", "IpoptPrintTimingStatistics", "IpoptAlphaForY", "IpoptRecalcY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.TrajectoryPartitionConfig), global::Apollo.Planning.TrajectoryPartitionConfig.Parser, new[]{ "InterpolatedPiecesNum", "InitialGearCheckHorizon", "HeadingSearchingRange", "GearShiftPeriodDuration", "GearShiftMaxT", "GearShiftUnitT" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlannerOpenSpaceConfig : pb::IMessage<PlannerOpenSpaceConfig> {
    private static readonly pb::MessageParser<PlannerOpenSpaceConfig> _parser = new pb::MessageParser<PlannerOpenSpaceConfig>(() => new PlannerOpenSpaceConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlannerOpenSpaceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerOpenSpaceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerOpenSpaceConfig(PlannerOpenSpaceConfig other) : this() {
      RoiConfig = other.roiConfig_ != null ? other.RoiConfig.Clone() : null;
      WarmStartConfig = other.warmStartConfig_ != null ? other.WarmStartConfig.Clone() : null;
      DualVariableWarmStartConfig = other.dualVariableWarmStartConfig_ != null ? other.DualVariableWarmStartConfig.Clone() : null;
      DistanceApproachConfig = other.distanceApproachConfig_ != null ? other.DistanceApproachConfig.Clone() : null;
      TrajectoryPartitionConfig = other.trajectoryPartitionConfig_ != null ? other.TrajectoryPartitionConfig.Clone() : null;
      deltaT_ = other.deltaT_;
      maxPositionErrorToEndPoint_ = other.maxPositionErrorToEndPoint_;
      maxThetaErrorToEndPoint_ = other.maxThetaErrorToEndPoint_;
      isNearDestinationThreshold_ = other.isNearDestinationThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerOpenSpaceConfig Clone() {
      return new PlannerOpenSpaceConfig(this);
    }

    /// <summary>Field number for the "roi_config" field.</summary>
    public const int RoiConfigFieldNumber = 1;
    private global::Apollo.Planning.ROIConfig roiConfig_;
    /// <summary>
    /// Open Space ROIConfig
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ROIConfig RoiConfig {
      get { return roiConfig_; }
      set {
        roiConfig_ = value;
      }
    }

    /// <summary>Field number for the "warm_start_config" field.</summary>
    public const int WarmStartConfigFieldNumber = 2;
    private global::Apollo.Planning.WarmStartConfig warmStartConfig_;
    /// <summary>
    /// Hybrid A Star Warm Start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.WarmStartConfig WarmStartConfig {
      get { return warmStartConfig_; }
      set {
        warmStartConfig_ = value;
      }
    }

    /// <summary>Field number for the "dual_variable_warm_start_config" field.</summary>
    public const int DualVariableWarmStartConfigFieldNumber = 3;
    private global::Apollo.Planning.DualVariableWarmStartConfig dualVariableWarmStartConfig_;
    /// <summary>
    /// Dual Variable Warm Start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DualVariableWarmStartConfig DualVariableWarmStartConfig {
      get { return dualVariableWarmStartConfig_; }
      set {
        dualVariableWarmStartConfig_ = value;
      }
    }

    /// <summary>Field number for the "distance_approach_config" field.</summary>
    public const int DistanceApproachConfigFieldNumber = 4;
    private global::Apollo.Planning.DistanceApproachConfig distanceApproachConfig_;
    /// <summary>
    /// Distance Approach Configs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DistanceApproachConfig DistanceApproachConfig {
      get { return distanceApproachConfig_; }
      set {
        distanceApproachConfig_ = value;
      }
    }

    /// <summary>Field number for the "trajectory_partition_config" field.</summary>
    public const int TrajectoryPartitionConfigFieldNumber = 5;
    private global::Apollo.Planning.TrajectoryPartitionConfig trajectoryPartitionConfig_;
    /// <summary>
    /// Trajectory PartitionConfig Configs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.TrajectoryPartitionConfig TrajectoryPartitionConfig {
      get { return trajectoryPartitionConfig_; }
      set {
        trajectoryPartitionConfig_ = value;
      }
    }

    /// <summary>Field number for the "delta_t" field.</summary>
    public const int DeltaTFieldNumber = 6;
    private float deltaT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeltaT {
      get { return deltaT_; }
      set {
        deltaT_ = value;
      }
    }

    /// <summary>Field number for the "max_position_error_to_end_point" field.</summary>
    public const int MaxPositionErrorToEndPointFieldNumber = 7;
    private double maxPositionErrorToEndPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxPositionErrorToEndPoint {
      get { return maxPositionErrorToEndPoint_; }
      set {
        maxPositionErrorToEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "max_theta_error_to_end_point" field.</summary>
    public const int MaxThetaErrorToEndPointFieldNumber = 8;
    private double maxThetaErrorToEndPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxThetaErrorToEndPoint {
      get { return maxThetaErrorToEndPoint_; }
      set {
        maxThetaErrorToEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "is_near_destination_threshold" field.</summary>
    public const int IsNearDestinationThresholdFieldNumber = 9;
    private double isNearDestinationThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IsNearDestinationThreshold {
      get { return isNearDestinationThreshold_; }
      set {
        isNearDestinationThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlannerOpenSpaceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlannerOpenSpaceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoiConfig, other.RoiConfig)) return false;
      if (!object.Equals(WarmStartConfig, other.WarmStartConfig)) return false;
      if (!object.Equals(DualVariableWarmStartConfig, other.DualVariableWarmStartConfig)) return false;
      if (!object.Equals(DistanceApproachConfig, other.DistanceApproachConfig)) return false;
      if (!object.Equals(TrajectoryPartitionConfig, other.TrajectoryPartitionConfig)) return false;
      if (DeltaT != other.DeltaT) return false;
      if (MaxPositionErrorToEndPoint != other.MaxPositionErrorToEndPoint) return false;
      if (MaxThetaErrorToEndPoint != other.MaxThetaErrorToEndPoint) return false;
      if (IsNearDestinationThreshold != other.IsNearDestinationThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roiConfig_ != null) hash ^= RoiConfig.GetHashCode();
      if (warmStartConfig_ != null) hash ^= WarmStartConfig.GetHashCode();
      if (dualVariableWarmStartConfig_ != null) hash ^= DualVariableWarmStartConfig.GetHashCode();
      if (distanceApproachConfig_ != null) hash ^= DistanceApproachConfig.GetHashCode();
      if (trajectoryPartitionConfig_ != null) hash ^= TrajectoryPartitionConfig.GetHashCode();
      if (DeltaT != 0F) hash ^= DeltaT.GetHashCode();
      if (MaxPositionErrorToEndPoint != 0D) hash ^= MaxPositionErrorToEndPoint.GetHashCode();
      if (MaxThetaErrorToEndPoint != 0D) hash ^= MaxThetaErrorToEndPoint.GetHashCode();
      if (IsNearDestinationThreshold != 0D) hash ^= IsNearDestinationThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roiConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoiConfig);
      }
      if (warmStartConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WarmStartConfig);
      }
      if (dualVariableWarmStartConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DualVariableWarmStartConfig);
      }
      if (distanceApproachConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DistanceApproachConfig);
      }
      if (trajectoryPartitionConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TrajectoryPartitionConfig);
      }
      if (DeltaT != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DeltaT);
      }
      if (MaxPositionErrorToEndPoint != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MaxPositionErrorToEndPoint);
      }
      if (MaxThetaErrorToEndPoint != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(MaxThetaErrorToEndPoint);
      }
      if (IsNearDestinationThreshold != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(IsNearDestinationThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roiConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoiConfig);
      }
      if (warmStartConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarmStartConfig);
      }
      if (dualVariableWarmStartConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DualVariableWarmStartConfig);
      }
      if (distanceApproachConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistanceApproachConfig);
      }
      if (trajectoryPartitionConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrajectoryPartitionConfig);
      }
      if (DeltaT != 0F) {
        size += 1 + 4;
      }
      if (MaxPositionErrorToEndPoint != 0D) {
        size += 1 + 8;
      }
      if (MaxThetaErrorToEndPoint != 0D) {
        size += 1 + 8;
      }
      if (IsNearDestinationThreshold != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlannerOpenSpaceConfig other) {
      if (other == null) {
        return;
      }
      if (other.roiConfig_ != null) {
        if (roiConfig_ == null) {
          roiConfig_ = new global::Apollo.Planning.ROIConfig();
        }
        RoiConfig.MergeFrom(other.RoiConfig);
      }
      if (other.warmStartConfig_ != null) {
        if (warmStartConfig_ == null) {
          warmStartConfig_ = new global::Apollo.Planning.WarmStartConfig();
        }
        WarmStartConfig.MergeFrom(other.WarmStartConfig);
      }
      if (other.dualVariableWarmStartConfig_ != null) {
        if (dualVariableWarmStartConfig_ == null) {
          dualVariableWarmStartConfig_ = new global::Apollo.Planning.DualVariableWarmStartConfig();
        }
        DualVariableWarmStartConfig.MergeFrom(other.DualVariableWarmStartConfig);
      }
      if (other.distanceApproachConfig_ != null) {
        if (distanceApproachConfig_ == null) {
          distanceApproachConfig_ = new global::Apollo.Planning.DistanceApproachConfig();
        }
        DistanceApproachConfig.MergeFrom(other.DistanceApproachConfig);
      }
      if (other.trajectoryPartitionConfig_ != null) {
        if (trajectoryPartitionConfig_ == null) {
          trajectoryPartitionConfig_ = new global::Apollo.Planning.TrajectoryPartitionConfig();
        }
        TrajectoryPartitionConfig.MergeFrom(other.TrajectoryPartitionConfig);
      }
      if (other.DeltaT != 0F) {
        DeltaT = other.DeltaT;
      }
      if (other.MaxPositionErrorToEndPoint != 0D) {
        MaxPositionErrorToEndPoint = other.MaxPositionErrorToEndPoint;
      }
      if (other.MaxThetaErrorToEndPoint != 0D) {
        MaxThetaErrorToEndPoint = other.MaxThetaErrorToEndPoint;
      }
      if (other.IsNearDestinationThreshold != 0D) {
        IsNearDestinationThreshold = other.IsNearDestinationThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roiConfig_ == null) {
              roiConfig_ = new global::Apollo.Planning.ROIConfig();
            }
            input.ReadMessage(roiConfig_);
            break;
          }
          case 18: {
            if (warmStartConfig_ == null) {
              warmStartConfig_ = new global::Apollo.Planning.WarmStartConfig();
            }
            input.ReadMessage(warmStartConfig_);
            break;
          }
          case 26: {
            if (dualVariableWarmStartConfig_ == null) {
              dualVariableWarmStartConfig_ = new global::Apollo.Planning.DualVariableWarmStartConfig();
            }
            input.ReadMessage(dualVariableWarmStartConfig_);
            break;
          }
          case 34: {
            if (distanceApproachConfig_ == null) {
              distanceApproachConfig_ = new global::Apollo.Planning.DistanceApproachConfig();
            }
            input.ReadMessage(distanceApproachConfig_);
            break;
          }
          case 42: {
            if (trajectoryPartitionConfig_ == null) {
              trajectoryPartitionConfig_ = new global::Apollo.Planning.TrajectoryPartitionConfig();
            }
            input.ReadMessage(trajectoryPartitionConfig_);
            break;
          }
          case 53: {
            DeltaT = input.ReadFloat();
            break;
          }
          case 57: {
            MaxPositionErrorToEndPoint = input.ReadDouble();
            break;
          }
          case 65: {
            MaxThetaErrorToEndPoint = input.ReadDouble();
            break;
          }
          case 73: {
            IsNearDestinationThreshold = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ROIConfig : pb::IMessage<ROIConfig> {
    private static readonly pb::MessageParser<ROIConfig> _parser = new pb::MessageParser<ROIConfig>(() => new ROIConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ROIConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIConfig(ROIConfig other) : this() {
      roiLongitudinalRange_ = other.roiLongitudinalRange_;
      parkingStartRange_ = other.parkingStartRange_;
      parkingInwards_ = other.parkingInwards_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIConfig Clone() {
      return new ROIConfig(this);
    }

    /// <summary>Field number for the "roi_longitudinal_range" field.</summary>
    public const int RoiLongitudinalRangeFieldNumber = 1;
    private double roiLongitudinalRange_;
    /// <summary>
    /// longitudinal range of parking roi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RoiLongitudinalRange {
      get { return roiLongitudinalRange_; }
      set {
        roiLongitudinalRange_ = value;
      }
    }

    /// <summary>Field number for the "parking_start_range" field.</summary>
    public const int ParkingStartRangeFieldNumber = 2;
    private double parkingStartRange_;
    /// <summary>
    /// parking spot range detection threadhold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ParkingStartRange {
      get { return parkingStartRange_; }
      set {
        parkingStartRange_ = value;
      }
    }

    /// <summary>Field number for the "parking_inwards" field.</summary>
    public const int ParkingInwardsFieldNumber = 3;
    private bool parkingInwards_;
    /// <summary>
    /// Parking orientation for reverse parking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ParkingInwards {
      get { return parkingInwards_; }
      set {
        parkingInwards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ROIConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ROIConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoiLongitudinalRange != other.RoiLongitudinalRange) return false;
      if (ParkingStartRange != other.ParkingStartRange) return false;
      if (ParkingInwards != other.ParkingInwards) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoiLongitudinalRange != 0D) hash ^= RoiLongitudinalRange.GetHashCode();
      if (ParkingStartRange != 0D) hash ^= ParkingStartRange.GetHashCode();
      if (ParkingInwards != false) hash ^= ParkingInwards.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoiLongitudinalRange != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(RoiLongitudinalRange);
      }
      if (ParkingStartRange != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ParkingStartRange);
      }
      if (ParkingInwards != false) {
        output.WriteRawTag(24);
        output.WriteBool(ParkingInwards);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoiLongitudinalRange != 0D) {
        size += 1 + 8;
      }
      if (ParkingStartRange != 0D) {
        size += 1 + 8;
      }
      if (ParkingInwards != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ROIConfig other) {
      if (other == null) {
        return;
      }
      if (other.RoiLongitudinalRange != 0D) {
        RoiLongitudinalRange = other.RoiLongitudinalRange;
      }
      if (other.ParkingStartRange != 0D) {
        ParkingStartRange = other.ParkingStartRange;
      }
      if (other.ParkingInwards != false) {
        ParkingInwards = other.ParkingInwards;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            RoiLongitudinalRange = input.ReadDouble();
            break;
          }
          case 17: {
            ParkingStartRange = input.ReadDouble();
            break;
          }
          case 24: {
            ParkingInwards = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WarmStartConfig : pb::IMessage<WarmStartConfig> {
    private static readonly pb::MessageParser<WarmStartConfig> _parser = new pb::MessageParser<WarmStartConfig>(() => new WarmStartConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarmStartConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarmStartConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarmStartConfig(WarmStartConfig other) : this() {
      xyGridResolution_ = other.xyGridResolution_;
      phiGridResolution_ = other.phiGridResolution_;
      nextNodeNum_ = other.nextNodeNum_;
      stepSize_ = other.stepSize_;
      trajForwardPenalty_ = other.trajForwardPenalty_;
      trajBackPenalty_ = other.trajBackPenalty_;
      trajGearSwitchPenalty_ = other.trajGearSwitchPenalty_;
      trajSteerPenalty_ = other.trajSteerPenalty_;
      trajSteerChangePenalty_ = other.trajSteerChangePenalty_;
      gridAStarXyResolution_ = other.gridAStarXyResolution_;
      nodeRadius_ = other.nodeRadius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarmStartConfig Clone() {
      return new WarmStartConfig(this);
    }

    /// <summary>Field number for the "xy_grid_resolution" field.</summary>
    public const int XyGridResolutionFieldNumber = 1;
    private double xyGridResolution_;
    /// <summary>
    /// Hybrid a star for warm start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XyGridResolution {
      get { return xyGridResolution_; }
      set {
        xyGridResolution_ = value;
      }
    }

    /// <summary>Field number for the "phi_grid_resolution" field.</summary>
    public const int PhiGridResolutionFieldNumber = 2;
    private double phiGridResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PhiGridResolution {
      get { return phiGridResolution_; }
      set {
        phiGridResolution_ = value;
      }
    }

    /// <summary>Field number for the "next_node_num" field.</summary>
    public const int NextNodeNumFieldNumber = 3;
    private ulong nextNodeNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NextNodeNum {
      get { return nextNodeNum_; }
      set {
        nextNodeNum_ = value;
      }
    }

    /// <summary>Field number for the "step_size" field.</summary>
    public const int StepSizeFieldNumber = 4;
    private double stepSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StepSize {
      get { return stepSize_; }
      set {
        stepSize_ = value;
      }
    }

    /// <summary>Field number for the "traj_forward_penalty" field.</summary>
    public const int TrajForwardPenaltyFieldNumber = 5;
    private double trajForwardPenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrajForwardPenalty {
      get { return trajForwardPenalty_; }
      set {
        trajForwardPenalty_ = value;
      }
    }

    /// <summary>Field number for the "traj_back_penalty" field.</summary>
    public const int TrajBackPenaltyFieldNumber = 6;
    private double trajBackPenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrajBackPenalty {
      get { return trajBackPenalty_; }
      set {
        trajBackPenalty_ = value;
      }
    }

    /// <summary>Field number for the "traj_gear_switch_penalty" field.</summary>
    public const int TrajGearSwitchPenaltyFieldNumber = 7;
    private double trajGearSwitchPenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrajGearSwitchPenalty {
      get { return trajGearSwitchPenalty_; }
      set {
        trajGearSwitchPenalty_ = value;
      }
    }

    /// <summary>Field number for the "traj_steer_penalty" field.</summary>
    public const int TrajSteerPenaltyFieldNumber = 8;
    private double trajSteerPenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrajSteerPenalty {
      get { return trajSteerPenalty_; }
      set {
        trajSteerPenalty_ = value;
      }
    }

    /// <summary>Field number for the "traj_steer_change_penalty" field.</summary>
    public const int TrajSteerChangePenaltyFieldNumber = 9;
    private double trajSteerChangePenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrajSteerChangePenalty {
      get { return trajSteerChangePenalty_; }
      set {
        trajSteerChangePenalty_ = value;
      }
    }

    /// <summary>Field number for the "grid_a_star_xy_resolution" field.</summary>
    public const int GridAStarXyResolutionFieldNumber = 15;
    private double gridAStarXyResolution_;
    /// <summary>
    /// Grid a star for heuristic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GridAStarXyResolution {
      get { return gridAStarXyResolution_; }
      set {
        gridAStarXyResolution_ = value;
      }
    }

    /// <summary>Field number for the "node_radius" field.</summary>
    public const int NodeRadiusFieldNumber = 16;
    private double nodeRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NodeRadius {
      get { return nodeRadius_; }
      set {
        nodeRadius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarmStartConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarmStartConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XyGridResolution != other.XyGridResolution) return false;
      if (PhiGridResolution != other.PhiGridResolution) return false;
      if (NextNodeNum != other.NextNodeNum) return false;
      if (StepSize != other.StepSize) return false;
      if (TrajForwardPenalty != other.TrajForwardPenalty) return false;
      if (TrajBackPenalty != other.TrajBackPenalty) return false;
      if (TrajGearSwitchPenalty != other.TrajGearSwitchPenalty) return false;
      if (TrajSteerPenalty != other.TrajSteerPenalty) return false;
      if (TrajSteerChangePenalty != other.TrajSteerChangePenalty) return false;
      if (GridAStarXyResolution != other.GridAStarXyResolution) return false;
      if (NodeRadius != other.NodeRadius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XyGridResolution != 0D) hash ^= XyGridResolution.GetHashCode();
      if (PhiGridResolution != 0D) hash ^= PhiGridResolution.GetHashCode();
      if (NextNodeNum != 0UL) hash ^= NextNodeNum.GetHashCode();
      if (StepSize != 0D) hash ^= StepSize.GetHashCode();
      if (TrajForwardPenalty != 0D) hash ^= TrajForwardPenalty.GetHashCode();
      if (TrajBackPenalty != 0D) hash ^= TrajBackPenalty.GetHashCode();
      if (TrajGearSwitchPenalty != 0D) hash ^= TrajGearSwitchPenalty.GetHashCode();
      if (TrajSteerPenalty != 0D) hash ^= TrajSteerPenalty.GetHashCode();
      if (TrajSteerChangePenalty != 0D) hash ^= TrajSteerChangePenalty.GetHashCode();
      if (GridAStarXyResolution != 0D) hash ^= GridAStarXyResolution.GetHashCode();
      if (NodeRadius != 0D) hash ^= NodeRadius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XyGridResolution != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(XyGridResolution);
      }
      if (PhiGridResolution != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PhiGridResolution);
      }
      if (NextNodeNum != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NextNodeNum);
      }
      if (StepSize != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(StepSize);
      }
      if (TrajForwardPenalty != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(TrajForwardPenalty);
      }
      if (TrajBackPenalty != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TrajBackPenalty);
      }
      if (TrajGearSwitchPenalty != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TrajGearSwitchPenalty);
      }
      if (TrajSteerPenalty != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TrajSteerPenalty);
      }
      if (TrajSteerChangePenalty != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TrajSteerChangePenalty);
      }
      if (GridAStarXyResolution != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(GridAStarXyResolution);
      }
      if (NodeRadius != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(NodeRadius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XyGridResolution != 0D) {
        size += 1 + 8;
      }
      if (PhiGridResolution != 0D) {
        size += 1 + 8;
      }
      if (NextNodeNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NextNodeNum);
      }
      if (StepSize != 0D) {
        size += 1 + 8;
      }
      if (TrajForwardPenalty != 0D) {
        size += 1 + 8;
      }
      if (TrajBackPenalty != 0D) {
        size += 1 + 8;
      }
      if (TrajGearSwitchPenalty != 0D) {
        size += 1 + 8;
      }
      if (TrajSteerPenalty != 0D) {
        size += 1 + 8;
      }
      if (TrajSteerChangePenalty != 0D) {
        size += 1 + 8;
      }
      if (GridAStarXyResolution != 0D) {
        size += 1 + 8;
      }
      if (NodeRadius != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarmStartConfig other) {
      if (other == null) {
        return;
      }
      if (other.XyGridResolution != 0D) {
        XyGridResolution = other.XyGridResolution;
      }
      if (other.PhiGridResolution != 0D) {
        PhiGridResolution = other.PhiGridResolution;
      }
      if (other.NextNodeNum != 0UL) {
        NextNodeNum = other.NextNodeNum;
      }
      if (other.StepSize != 0D) {
        StepSize = other.StepSize;
      }
      if (other.TrajForwardPenalty != 0D) {
        TrajForwardPenalty = other.TrajForwardPenalty;
      }
      if (other.TrajBackPenalty != 0D) {
        TrajBackPenalty = other.TrajBackPenalty;
      }
      if (other.TrajGearSwitchPenalty != 0D) {
        TrajGearSwitchPenalty = other.TrajGearSwitchPenalty;
      }
      if (other.TrajSteerPenalty != 0D) {
        TrajSteerPenalty = other.TrajSteerPenalty;
      }
      if (other.TrajSteerChangePenalty != 0D) {
        TrajSteerChangePenalty = other.TrajSteerChangePenalty;
      }
      if (other.GridAStarXyResolution != 0D) {
        GridAStarXyResolution = other.GridAStarXyResolution;
      }
      if (other.NodeRadius != 0D) {
        NodeRadius = other.NodeRadius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            XyGridResolution = input.ReadDouble();
            break;
          }
          case 17: {
            PhiGridResolution = input.ReadDouble();
            break;
          }
          case 24: {
            NextNodeNum = input.ReadUInt64();
            break;
          }
          case 33: {
            StepSize = input.ReadDouble();
            break;
          }
          case 41: {
            TrajForwardPenalty = input.ReadDouble();
            break;
          }
          case 49: {
            TrajBackPenalty = input.ReadDouble();
            break;
          }
          case 57: {
            TrajGearSwitchPenalty = input.ReadDouble();
            break;
          }
          case 65: {
            TrajSteerPenalty = input.ReadDouble();
            break;
          }
          case 73: {
            TrajSteerChangePenalty = input.ReadDouble();
            break;
          }
          case 121: {
            GridAStarXyResolution = input.ReadDouble();
            break;
          }
          case 129: {
            NodeRadius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DualVariableWarmStartConfig : pb::IMessage<DualVariableWarmStartConfig> {
    private static readonly pb::MessageParser<DualVariableWarmStartConfig> _parser = new pb::MessageParser<DualVariableWarmStartConfig>(() => new DualVariableWarmStartConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DualVariableWarmStartConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DualVariableWarmStartConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DualVariableWarmStartConfig(DualVariableWarmStartConfig other) : this() {
      weightD_ = other.weightD_;
      IpoptConfig = other.ipoptConfig_ != null ? other.IpoptConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DualVariableWarmStartConfig Clone() {
      return new DualVariableWarmStartConfig(this);
    }

    /// <summary>Field number for the "weight_d" field.</summary>
    public const int WeightDFieldNumber = 1;
    private double weightD_;
    /// <summary>
    /// Dual variable Warm Start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightD {
      get { return weightD_; }
      set {
        weightD_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_config" field.</summary>
    public const int IpoptConfigFieldNumber = 2;
    private global::Apollo.Planning.IpoptConfig ipoptConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.IpoptConfig IpoptConfig {
      get { return ipoptConfig_; }
      set {
        ipoptConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DualVariableWarmStartConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DualVariableWarmStartConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeightD != other.WeightD) return false;
      if (!object.Equals(IpoptConfig, other.IpoptConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeightD != 0D) hash ^= WeightD.GetHashCode();
      if (ipoptConfig_ != null) hash ^= IpoptConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeightD != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(WeightD);
      }
      if (ipoptConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IpoptConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeightD != 0D) {
        size += 1 + 8;
      }
      if (ipoptConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IpoptConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DualVariableWarmStartConfig other) {
      if (other == null) {
        return;
      }
      if (other.WeightD != 0D) {
        WeightD = other.WeightD;
      }
      if (other.ipoptConfig_ != null) {
        if (ipoptConfig_ == null) {
          ipoptConfig_ = new global::Apollo.Planning.IpoptConfig();
        }
        IpoptConfig.MergeFrom(other.IpoptConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            WeightD = input.ReadDouble();
            break;
          }
          case 18: {
            if (ipoptConfig_ == null) {
              ipoptConfig_ = new global::Apollo.Planning.IpoptConfig();
            }
            input.ReadMessage(ipoptConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DistanceApproachConfig : pb::IMessage<DistanceApproachConfig> {
    private static readonly pb::MessageParser<DistanceApproachConfig> _parser = new pb::MessageParser<DistanceApproachConfig>(() => new DistanceApproachConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistanceApproachConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistanceApproachConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistanceApproachConfig(DistanceApproachConfig other) : this() {
      weightSteer_ = other.weightSteer_;
      weightA_ = other.weightA_;
      weightSteerRate_ = other.weightSteerRate_;
      weightARate_ = other.weightARate_;
      weightX_ = other.weightX_;
      weightY_ = other.weightY_;
      weightPhi_ = other.weightPhi_;
      weightV_ = other.weightV_;
      weightSteerStitching_ = other.weightSteerStitching_;
      weightAStitching_ = other.weightAStitching_;
      weightFirstOrderTime_ = other.weightFirstOrderTime_;
      weightSecondOrderTime_ = other.weightSecondOrderTime_;
      minSafetyDistance_ = other.minSafetyDistance_;
      maxSpeedForward_ = other.maxSpeedForward_;
      maxSpeedReverse_ = other.maxSpeedReverse_;
      maxAccelerationForward_ = other.maxAccelerationForward_;
      maxAccelerationReverse_ = other.maxAccelerationReverse_;
      minTimeSampleScaling_ = other.minTimeSampleScaling_;
      maxTimeSampleScaling_ = other.maxTimeSampleScaling_;
      useFixTime_ = other.useFixTime_;
      IpoptConfig = other.ipoptConfig_ != null ? other.IpoptConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistanceApproachConfig Clone() {
      return new DistanceApproachConfig(this);
    }

    /// <summary>Field number for the "weight_steer" field.</summary>
    public const int WeightSteerFieldNumber = 1;
    private double weightSteer_;
    /// <summary>
    /// Distance approach weight configs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightSteer {
      get { return weightSteer_; }
      set {
        weightSteer_ = value;
      }
    }

    /// <summary>Field number for the "weight_a" field.</summary>
    public const int WeightAFieldNumber = 2;
    private double weightA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightA {
      get { return weightA_; }
      set {
        weightA_ = value;
      }
    }

    /// <summary>Field number for the "weight_steer_rate" field.</summary>
    public const int WeightSteerRateFieldNumber = 3;
    private double weightSteerRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightSteerRate {
      get { return weightSteerRate_; }
      set {
        weightSteerRate_ = value;
      }
    }

    /// <summary>Field number for the "weight_a_rate" field.</summary>
    public const int WeightARateFieldNumber = 4;
    private double weightARate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightARate {
      get { return weightARate_; }
      set {
        weightARate_ = value;
      }
    }

    /// <summary>Field number for the "weight_x" field.</summary>
    public const int WeightXFieldNumber = 5;
    private double weightX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightX {
      get { return weightX_; }
      set {
        weightX_ = value;
      }
    }

    /// <summary>Field number for the "weight_y" field.</summary>
    public const int WeightYFieldNumber = 6;
    private double weightY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightY {
      get { return weightY_; }
      set {
        weightY_ = value;
      }
    }

    /// <summary>Field number for the "weight_phi" field.</summary>
    public const int WeightPhiFieldNumber = 7;
    private double weightPhi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightPhi {
      get { return weightPhi_; }
      set {
        weightPhi_ = value;
      }
    }

    /// <summary>Field number for the "weight_v" field.</summary>
    public const int WeightVFieldNumber = 8;
    private double weightV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightV {
      get { return weightV_; }
      set {
        weightV_ = value;
      }
    }

    /// <summary>Field number for the "weight_steer_stitching" field.</summary>
    public const int WeightSteerStitchingFieldNumber = 9;
    private double weightSteerStitching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightSteerStitching {
      get { return weightSteerStitching_; }
      set {
        weightSteerStitching_ = value;
      }
    }

    /// <summary>Field number for the "weight_a_stitching" field.</summary>
    public const int WeightAStitchingFieldNumber = 10;
    private double weightAStitching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightAStitching {
      get { return weightAStitching_; }
      set {
        weightAStitching_ = value;
      }
    }

    /// <summary>Field number for the "weight_first_order_time" field.</summary>
    public const int WeightFirstOrderTimeFieldNumber = 11;
    private double weightFirstOrderTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightFirstOrderTime {
      get { return weightFirstOrderTime_; }
      set {
        weightFirstOrderTime_ = value;
      }
    }

    /// <summary>Field number for the "weight_second_order_time" field.</summary>
    public const int WeightSecondOrderTimeFieldNumber = 12;
    private double weightSecondOrderTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightSecondOrderTime {
      get { return weightSecondOrderTime_; }
      set {
        weightSecondOrderTime_ = value;
      }
    }

    /// <summary>Field number for the "min_safety_distance" field.</summary>
    public const int MinSafetyDistanceFieldNumber = 13;
    private double minSafetyDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinSafetyDistance {
      get { return minSafetyDistance_; }
      set {
        minSafetyDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_speed_forward" field.</summary>
    public const int MaxSpeedForwardFieldNumber = 14;
    private double maxSpeedForward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSpeedForward {
      get { return maxSpeedForward_; }
      set {
        maxSpeedForward_ = value;
      }
    }

    /// <summary>Field number for the "max_speed_reverse" field.</summary>
    public const int MaxSpeedReverseFieldNumber = 15;
    private double maxSpeedReverse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSpeedReverse {
      get { return maxSpeedReverse_; }
      set {
        maxSpeedReverse_ = value;
      }
    }

    /// <summary>Field number for the "max_acceleration_forward" field.</summary>
    public const int MaxAccelerationForwardFieldNumber = 16;
    private double maxAccelerationForward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAccelerationForward {
      get { return maxAccelerationForward_; }
      set {
        maxAccelerationForward_ = value;
      }
    }

    /// <summary>Field number for the "max_acceleration_reverse" field.</summary>
    public const int MaxAccelerationReverseFieldNumber = 17;
    private double maxAccelerationReverse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAccelerationReverse {
      get { return maxAccelerationReverse_; }
      set {
        maxAccelerationReverse_ = value;
      }
    }

    /// <summary>Field number for the "min_time_sample_scaling" field.</summary>
    public const int MinTimeSampleScalingFieldNumber = 18;
    private double minTimeSampleScaling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinTimeSampleScaling {
      get { return minTimeSampleScaling_; }
      set {
        minTimeSampleScaling_ = value;
      }
    }

    /// <summary>Field number for the "max_time_sample_scaling" field.</summary>
    public const int MaxTimeSampleScalingFieldNumber = 19;
    private double maxTimeSampleScaling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxTimeSampleScaling {
      get { return maxTimeSampleScaling_; }
      set {
        maxTimeSampleScaling_ = value;
      }
    }

    /// <summary>Field number for the "use_fix_time" field.</summary>
    public const int UseFixTimeFieldNumber = 20;
    private bool useFixTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFixTime {
      get { return useFixTime_; }
      set {
        useFixTime_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_config" field.</summary>
    public const int IpoptConfigFieldNumber = 21;
    private global::Apollo.Planning.IpoptConfig ipoptConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.IpoptConfig IpoptConfig {
      get { return ipoptConfig_; }
      set {
        ipoptConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistanceApproachConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistanceApproachConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeightSteer != other.WeightSteer) return false;
      if (WeightA != other.WeightA) return false;
      if (WeightSteerRate != other.WeightSteerRate) return false;
      if (WeightARate != other.WeightARate) return false;
      if (WeightX != other.WeightX) return false;
      if (WeightY != other.WeightY) return false;
      if (WeightPhi != other.WeightPhi) return false;
      if (WeightV != other.WeightV) return false;
      if (WeightSteerStitching != other.WeightSteerStitching) return false;
      if (WeightAStitching != other.WeightAStitching) return false;
      if (WeightFirstOrderTime != other.WeightFirstOrderTime) return false;
      if (WeightSecondOrderTime != other.WeightSecondOrderTime) return false;
      if (MinSafetyDistance != other.MinSafetyDistance) return false;
      if (MaxSpeedForward != other.MaxSpeedForward) return false;
      if (MaxSpeedReverse != other.MaxSpeedReverse) return false;
      if (MaxAccelerationForward != other.MaxAccelerationForward) return false;
      if (MaxAccelerationReverse != other.MaxAccelerationReverse) return false;
      if (MinTimeSampleScaling != other.MinTimeSampleScaling) return false;
      if (MaxTimeSampleScaling != other.MaxTimeSampleScaling) return false;
      if (UseFixTime != other.UseFixTime) return false;
      if (!object.Equals(IpoptConfig, other.IpoptConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeightSteer != 0D) hash ^= WeightSteer.GetHashCode();
      if (WeightA != 0D) hash ^= WeightA.GetHashCode();
      if (WeightSteerRate != 0D) hash ^= WeightSteerRate.GetHashCode();
      if (WeightARate != 0D) hash ^= WeightARate.GetHashCode();
      if (WeightX != 0D) hash ^= WeightX.GetHashCode();
      if (WeightY != 0D) hash ^= WeightY.GetHashCode();
      if (WeightPhi != 0D) hash ^= WeightPhi.GetHashCode();
      if (WeightV != 0D) hash ^= WeightV.GetHashCode();
      if (WeightSteerStitching != 0D) hash ^= WeightSteerStitching.GetHashCode();
      if (WeightAStitching != 0D) hash ^= WeightAStitching.GetHashCode();
      if (WeightFirstOrderTime != 0D) hash ^= WeightFirstOrderTime.GetHashCode();
      if (WeightSecondOrderTime != 0D) hash ^= WeightSecondOrderTime.GetHashCode();
      if (MinSafetyDistance != 0D) hash ^= MinSafetyDistance.GetHashCode();
      if (MaxSpeedForward != 0D) hash ^= MaxSpeedForward.GetHashCode();
      if (MaxSpeedReverse != 0D) hash ^= MaxSpeedReverse.GetHashCode();
      if (MaxAccelerationForward != 0D) hash ^= MaxAccelerationForward.GetHashCode();
      if (MaxAccelerationReverse != 0D) hash ^= MaxAccelerationReverse.GetHashCode();
      if (MinTimeSampleScaling != 0D) hash ^= MinTimeSampleScaling.GetHashCode();
      if (MaxTimeSampleScaling != 0D) hash ^= MaxTimeSampleScaling.GetHashCode();
      if (UseFixTime != false) hash ^= UseFixTime.GetHashCode();
      if (ipoptConfig_ != null) hash ^= IpoptConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeightSteer != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(WeightSteer);
      }
      if (WeightA != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(WeightA);
      }
      if (WeightSteerRate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(WeightSteerRate);
      }
      if (WeightARate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(WeightARate);
      }
      if (WeightX != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WeightX);
      }
      if (WeightY != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(WeightY);
      }
      if (WeightPhi != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WeightPhi);
      }
      if (WeightV != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WeightV);
      }
      if (WeightSteerStitching != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(WeightSteerStitching);
      }
      if (WeightAStitching != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(WeightAStitching);
      }
      if (WeightFirstOrderTime != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(WeightFirstOrderTime);
      }
      if (WeightSecondOrderTime != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(WeightSecondOrderTime);
      }
      if (MinSafetyDistance != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(MinSafetyDistance);
      }
      if (MaxSpeedForward != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(MaxSpeedForward);
      }
      if (MaxSpeedReverse != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(MaxSpeedReverse);
      }
      if (MaxAccelerationForward != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(MaxAccelerationForward);
      }
      if (MaxAccelerationReverse != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(MaxAccelerationReverse);
      }
      if (MinTimeSampleScaling != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(MinTimeSampleScaling);
      }
      if (MaxTimeSampleScaling != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(MaxTimeSampleScaling);
      }
      if (UseFixTime != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(UseFixTime);
      }
      if (ipoptConfig_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IpoptConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeightSteer != 0D) {
        size += 1 + 8;
      }
      if (WeightA != 0D) {
        size += 1 + 8;
      }
      if (WeightSteerRate != 0D) {
        size += 1 + 8;
      }
      if (WeightARate != 0D) {
        size += 1 + 8;
      }
      if (WeightX != 0D) {
        size += 1 + 8;
      }
      if (WeightY != 0D) {
        size += 1 + 8;
      }
      if (WeightPhi != 0D) {
        size += 1 + 8;
      }
      if (WeightV != 0D) {
        size += 1 + 8;
      }
      if (WeightSteerStitching != 0D) {
        size += 1 + 8;
      }
      if (WeightAStitching != 0D) {
        size += 1 + 8;
      }
      if (WeightFirstOrderTime != 0D) {
        size += 1 + 8;
      }
      if (WeightSecondOrderTime != 0D) {
        size += 1 + 8;
      }
      if (MinSafetyDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxSpeedForward != 0D) {
        size += 1 + 8;
      }
      if (MaxSpeedReverse != 0D) {
        size += 1 + 8;
      }
      if (MaxAccelerationForward != 0D) {
        size += 2 + 8;
      }
      if (MaxAccelerationReverse != 0D) {
        size += 2 + 8;
      }
      if (MinTimeSampleScaling != 0D) {
        size += 2 + 8;
      }
      if (MaxTimeSampleScaling != 0D) {
        size += 2 + 8;
      }
      if (UseFixTime != false) {
        size += 2 + 1;
      }
      if (ipoptConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IpoptConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistanceApproachConfig other) {
      if (other == null) {
        return;
      }
      if (other.WeightSteer != 0D) {
        WeightSteer = other.WeightSteer;
      }
      if (other.WeightA != 0D) {
        WeightA = other.WeightA;
      }
      if (other.WeightSteerRate != 0D) {
        WeightSteerRate = other.WeightSteerRate;
      }
      if (other.WeightARate != 0D) {
        WeightARate = other.WeightARate;
      }
      if (other.WeightX != 0D) {
        WeightX = other.WeightX;
      }
      if (other.WeightY != 0D) {
        WeightY = other.WeightY;
      }
      if (other.WeightPhi != 0D) {
        WeightPhi = other.WeightPhi;
      }
      if (other.WeightV != 0D) {
        WeightV = other.WeightV;
      }
      if (other.WeightSteerStitching != 0D) {
        WeightSteerStitching = other.WeightSteerStitching;
      }
      if (other.WeightAStitching != 0D) {
        WeightAStitching = other.WeightAStitching;
      }
      if (other.WeightFirstOrderTime != 0D) {
        WeightFirstOrderTime = other.WeightFirstOrderTime;
      }
      if (other.WeightSecondOrderTime != 0D) {
        WeightSecondOrderTime = other.WeightSecondOrderTime;
      }
      if (other.MinSafetyDistance != 0D) {
        MinSafetyDistance = other.MinSafetyDistance;
      }
      if (other.MaxSpeedForward != 0D) {
        MaxSpeedForward = other.MaxSpeedForward;
      }
      if (other.MaxSpeedReverse != 0D) {
        MaxSpeedReverse = other.MaxSpeedReverse;
      }
      if (other.MaxAccelerationForward != 0D) {
        MaxAccelerationForward = other.MaxAccelerationForward;
      }
      if (other.MaxAccelerationReverse != 0D) {
        MaxAccelerationReverse = other.MaxAccelerationReverse;
      }
      if (other.MinTimeSampleScaling != 0D) {
        MinTimeSampleScaling = other.MinTimeSampleScaling;
      }
      if (other.MaxTimeSampleScaling != 0D) {
        MaxTimeSampleScaling = other.MaxTimeSampleScaling;
      }
      if (other.UseFixTime != false) {
        UseFixTime = other.UseFixTime;
      }
      if (other.ipoptConfig_ != null) {
        if (ipoptConfig_ == null) {
          ipoptConfig_ = new global::Apollo.Planning.IpoptConfig();
        }
        IpoptConfig.MergeFrom(other.IpoptConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            WeightSteer = input.ReadDouble();
            break;
          }
          case 17: {
            WeightA = input.ReadDouble();
            break;
          }
          case 25: {
            WeightSteerRate = input.ReadDouble();
            break;
          }
          case 33: {
            WeightARate = input.ReadDouble();
            break;
          }
          case 41: {
            WeightX = input.ReadDouble();
            break;
          }
          case 49: {
            WeightY = input.ReadDouble();
            break;
          }
          case 57: {
            WeightPhi = input.ReadDouble();
            break;
          }
          case 65: {
            WeightV = input.ReadDouble();
            break;
          }
          case 73: {
            WeightSteerStitching = input.ReadDouble();
            break;
          }
          case 81: {
            WeightAStitching = input.ReadDouble();
            break;
          }
          case 89: {
            WeightFirstOrderTime = input.ReadDouble();
            break;
          }
          case 97: {
            WeightSecondOrderTime = input.ReadDouble();
            break;
          }
          case 105: {
            MinSafetyDistance = input.ReadDouble();
            break;
          }
          case 113: {
            MaxSpeedForward = input.ReadDouble();
            break;
          }
          case 121: {
            MaxSpeedReverse = input.ReadDouble();
            break;
          }
          case 129: {
            MaxAccelerationForward = input.ReadDouble();
            break;
          }
          case 137: {
            MaxAccelerationReverse = input.ReadDouble();
            break;
          }
          case 145: {
            MinTimeSampleScaling = input.ReadDouble();
            break;
          }
          case 153: {
            MaxTimeSampleScaling = input.ReadDouble();
            break;
          }
          case 160: {
            UseFixTime = input.ReadBool();
            break;
          }
          case 170: {
            if (ipoptConfig_ == null) {
              ipoptConfig_ = new global::Apollo.Planning.IpoptConfig();
            }
            input.ReadMessage(ipoptConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IpoptConfig : pb::IMessage<IpoptConfig> {
    private static readonly pb::MessageParser<IpoptConfig> _parser = new pb::MessageParser<IpoptConfig>(() => new IpoptConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IpoptConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IpoptConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IpoptConfig(IpoptConfig other) : this() {
      ipoptPrintLevel_ = other.ipoptPrintLevel_;
      mumpsMemPercent_ = other.mumpsMemPercent_;
      mumpsPivtol_ = other.mumpsPivtol_;
      ipoptMaxIter_ = other.ipoptMaxIter_;
      ipoptTol_ = other.ipoptTol_;
      ipoptAcceptableConstrViolTol_ = other.ipoptAcceptableConstrViolTol_;
      ipoptMinHessianPerturbation_ = other.ipoptMinHessianPerturbation_;
      ipoptJacobianRegularizationValue_ = other.ipoptJacobianRegularizationValue_;
      ipoptPrintTimingStatistics_ = other.ipoptPrintTimingStatistics_;
      ipoptAlphaForY_ = other.ipoptAlphaForY_;
      ipoptRecalcY_ = other.ipoptRecalcY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IpoptConfig Clone() {
      return new IpoptConfig(this);
    }

    /// <summary>Field number for the "ipopt_print_level" field.</summary>
    public const int IpoptPrintLevelFieldNumber = 1;
    private int ipoptPrintLevel_;
    /// <summary>
    /// Ipopt configs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IpoptPrintLevel {
      get { return ipoptPrintLevel_; }
      set {
        ipoptPrintLevel_ = value;
      }
    }

    /// <summary>Field number for the "mumps_mem_percent" field.</summary>
    public const int MumpsMemPercentFieldNumber = 2;
    private int mumpsMemPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MumpsMemPercent {
      get { return mumpsMemPercent_; }
      set {
        mumpsMemPercent_ = value;
      }
    }

    /// <summary>Field number for the "mumps_pivtol" field.</summary>
    public const int MumpsPivtolFieldNumber = 3;
    private double mumpsPivtol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MumpsPivtol {
      get { return mumpsPivtol_; }
      set {
        mumpsPivtol_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_max_iter" field.</summary>
    public const int IpoptMaxIterFieldNumber = 4;
    private int ipoptMaxIter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IpoptMaxIter {
      get { return ipoptMaxIter_; }
      set {
        ipoptMaxIter_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_tol" field.</summary>
    public const int IpoptTolFieldNumber = 5;
    private double ipoptTol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpoptTol {
      get { return ipoptTol_; }
      set {
        ipoptTol_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_acceptable_constr_viol_tol" field.</summary>
    public const int IpoptAcceptableConstrViolTolFieldNumber = 6;
    private double ipoptAcceptableConstrViolTol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpoptAcceptableConstrViolTol {
      get { return ipoptAcceptableConstrViolTol_; }
      set {
        ipoptAcceptableConstrViolTol_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_min_hessian_perturbation" field.</summary>
    public const int IpoptMinHessianPerturbationFieldNumber = 7;
    private double ipoptMinHessianPerturbation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpoptMinHessianPerturbation {
      get { return ipoptMinHessianPerturbation_; }
      set {
        ipoptMinHessianPerturbation_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_jacobian_regularization_value" field.</summary>
    public const int IpoptJacobianRegularizationValueFieldNumber = 8;
    private double ipoptJacobianRegularizationValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpoptJacobianRegularizationValue {
      get { return ipoptJacobianRegularizationValue_; }
      set {
        ipoptJacobianRegularizationValue_ = value;
      }
    }

    /// <summary>Field number for the "ipopt_print_timing_statistics" field.</summary>
    public const int IpoptPrintTimingStatisticsFieldNumber = 9;
    private string ipoptPrintTimingStatistics_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpoptPrintTimingStatistics {
      get { return ipoptPrintTimingStatistics_; }
      set {
        ipoptPrintTimingStatistics_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipopt_alpha_for_y" field.</summary>
    public const int IpoptAlphaForYFieldNumber = 10;
    private string ipoptAlphaForY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpoptAlphaForY {
      get { return ipoptAlphaForY_; }
      set {
        ipoptAlphaForY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipopt_recalc_y" field.</summary>
    public const int IpoptRecalcYFieldNumber = 11;
    private string ipoptRecalcY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpoptRecalcY {
      get { return ipoptRecalcY_; }
      set {
        ipoptRecalcY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IpoptConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IpoptConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpoptPrintLevel != other.IpoptPrintLevel) return false;
      if (MumpsMemPercent != other.MumpsMemPercent) return false;
      if (MumpsPivtol != other.MumpsPivtol) return false;
      if (IpoptMaxIter != other.IpoptMaxIter) return false;
      if (IpoptTol != other.IpoptTol) return false;
      if (IpoptAcceptableConstrViolTol != other.IpoptAcceptableConstrViolTol) return false;
      if (IpoptMinHessianPerturbation != other.IpoptMinHessianPerturbation) return false;
      if (IpoptJacobianRegularizationValue != other.IpoptJacobianRegularizationValue) return false;
      if (IpoptPrintTimingStatistics != other.IpoptPrintTimingStatistics) return false;
      if (IpoptAlphaForY != other.IpoptAlphaForY) return false;
      if (IpoptRecalcY != other.IpoptRecalcY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpoptPrintLevel != 0) hash ^= IpoptPrintLevel.GetHashCode();
      if (MumpsMemPercent != 0) hash ^= MumpsMemPercent.GetHashCode();
      if (MumpsPivtol != 0D) hash ^= MumpsPivtol.GetHashCode();
      if (IpoptMaxIter != 0) hash ^= IpoptMaxIter.GetHashCode();
      if (IpoptTol != 0D) hash ^= IpoptTol.GetHashCode();
      if (IpoptAcceptableConstrViolTol != 0D) hash ^= IpoptAcceptableConstrViolTol.GetHashCode();
      if (IpoptMinHessianPerturbation != 0D) hash ^= IpoptMinHessianPerturbation.GetHashCode();
      if (IpoptJacobianRegularizationValue != 0D) hash ^= IpoptJacobianRegularizationValue.GetHashCode();
      if (IpoptPrintTimingStatistics.Length != 0) hash ^= IpoptPrintTimingStatistics.GetHashCode();
      if (IpoptAlphaForY.Length != 0) hash ^= IpoptAlphaForY.GetHashCode();
      if (IpoptRecalcY.Length != 0) hash ^= IpoptRecalcY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpoptPrintLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IpoptPrintLevel);
      }
      if (MumpsMemPercent != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MumpsMemPercent);
      }
      if (MumpsPivtol != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MumpsPivtol);
      }
      if (IpoptMaxIter != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IpoptMaxIter);
      }
      if (IpoptTol != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(IpoptTol);
      }
      if (IpoptAcceptableConstrViolTol != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(IpoptAcceptableConstrViolTol);
      }
      if (IpoptMinHessianPerturbation != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(IpoptMinHessianPerturbation);
      }
      if (IpoptJacobianRegularizationValue != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(IpoptJacobianRegularizationValue);
      }
      if (IpoptPrintTimingStatistics.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IpoptPrintTimingStatistics);
      }
      if (IpoptAlphaForY.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(IpoptAlphaForY);
      }
      if (IpoptRecalcY.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IpoptRecalcY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpoptPrintLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IpoptPrintLevel);
      }
      if (MumpsMemPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MumpsMemPercent);
      }
      if (MumpsPivtol != 0D) {
        size += 1 + 8;
      }
      if (IpoptMaxIter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IpoptMaxIter);
      }
      if (IpoptTol != 0D) {
        size += 1 + 8;
      }
      if (IpoptAcceptableConstrViolTol != 0D) {
        size += 1 + 8;
      }
      if (IpoptMinHessianPerturbation != 0D) {
        size += 1 + 8;
      }
      if (IpoptJacobianRegularizationValue != 0D) {
        size += 1 + 8;
      }
      if (IpoptPrintTimingStatistics.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpoptPrintTimingStatistics);
      }
      if (IpoptAlphaForY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpoptAlphaForY);
      }
      if (IpoptRecalcY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpoptRecalcY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IpoptConfig other) {
      if (other == null) {
        return;
      }
      if (other.IpoptPrintLevel != 0) {
        IpoptPrintLevel = other.IpoptPrintLevel;
      }
      if (other.MumpsMemPercent != 0) {
        MumpsMemPercent = other.MumpsMemPercent;
      }
      if (other.MumpsPivtol != 0D) {
        MumpsPivtol = other.MumpsPivtol;
      }
      if (other.IpoptMaxIter != 0) {
        IpoptMaxIter = other.IpoptMaxIter;
      }
      if (other.IpoptTol != 0D) {
        IpoptTol = other.IpoptTol;
      }
      if (other.IpoptAcceptableConstrViolTol != 0D) {
        IpoptAcceptableConstrViolTol = other.IpoptAcceptableConstrViolTol;
      }
      if (other.IpoptMinHessianPerturbation != 0D) {
        IpoptMinHessianPerturbation = other.IpoptMinHessianPerturbation;
      }
      if (other.IpoptJacobianRegularizationValue != 0D) {
        IpoptJacobianRegularizationValue = other.IpoptJacobianRegularizationValue;
      }
      if (other.IpoptPrintTimingStatistics.Length != 0) {
        IpoptPrintTimingStatistics = other.IpoptPrintTimingStatistics;
      }
      if (other.IpoptAlphaForY.Length != 0) {
        IpoptAlphaForY = other.IpoptAlphaForY;
      }
      if (other.IpoptRecalcY.Length != 0) {
        IpoptRecalcY = other.IpoptRecalcY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IpoptPrintLevel = input.ReadInt32();
            break;
          }
          case 16: {
            MumpsMemPercent = input.ReadInt32();
            break;
          }
          case 25: {
            MumpsPivtol = input.ReadDouble();
            break;
          }
          case 32: {
            IpoptMaxIter = input.ReadInt32();
            break;
          }
          case 41: {
            IpoptTol = input.ReadDouble();
            break;
          }
          case 49: {
            IpoptAcceptableConstrViolTol = input.ReadDouble();
            break;
          }
          case 57: {
            IpoptMinHessianPerturbation = input.ReadDouble();
            break;
          }
          case 65: {
            IpoptJacobianRegularizationValue = input.ReadDouble();
            break;
          }
          case 74: {
            IpoptPrintTimingStatistics = input.ReadString();
            break;
          }
          case 82: {
            IpoptAlphaForY = input.ReadString();
            break;
          }
          case 90: {
            IpoptRecalcY = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrajectoryPartitionConfig : pb::IMessage<TrajectoryPartitionConfig> {
    private static readonly pb::MessageParser<TrajectoryPartitionConfig> _parser = new pb::MessageParser<TrajectoryPartitionConfig>(() => new TrajectoryPartitionConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryPartitionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPartitionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPartitionConfig(TrajectoryPartitionConfig other) : this() {
      interpolatedPiecesNum_ = other.interpolatedPiecesNum_;
      initialGearCheckHorizon_ = other.initialGearCheckHorizon_;
      headingSearchingRange_ = other.headingSearchingRange_;
      gearShiftPeriodDuration_ = other.gearShiftPeriodDuration_;
      gearShiftMaxT_ = other.gearShiftMaxT_;
      gearShiftUnitT_ = other.gearShiftUnitT_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPartitionConfig Clone() {
      return new TrajectoryPartitionConfig(this);
    }

    /// <summary>Field number for the "interpolated_pieces_num" field.</summary>
    public const int InterpolatedPiecesNumFieldNumber = 1;
    private ulong interpolatedPiecesNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InterpolatedPiecesNum {
      get { return interpolatedPiecesNum_; }
      set {
        interpolatedPiecesNum_ = value;
      }
    }

    /// <summary>Field number for the "initial_gear_check_horizon" field.</summary>
    public const int InitialGearCheckHorizonFieldNumber = 2;
    private ulong initialGearCheckHorizon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InitialGearCheckHorizon {
      get { return initialGearCheckHorizon_; }
      set {
        initialGearCheckHorizon_ = value;
      }
    }

    /// <summary>Field number for the "heading_searching_range" field.</summary>
    public const int HeadingSearchingRangeFieldNumber = 3;
    private double headingSearchingRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingSearchingRange {
      get { return headingSearchingRange_; }
      set {
        headingSearchingRange_ = value;
      }
    }

    /// <summary>Field number for the "gear_shift_period_duration" field.</summary>
    public const int GearShiftPeriodDurationFieldNumber = 4;
    private double gearShiftPeriodDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GearShiftPeriodDuration {
      get { return gearShiftPeriodDuration_; }
      set {
        gearShiftPeriodDuration_ = value;
      }
    }

    /// <summary>Field number for the "gear_shift_max_t" field.</summary>
    public const int GearShiftMaxTFieldNumber = 5;
    private double gearShiftMaxT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GearShiftMaxT {
      get { return gearShiftMaxT_; }
      set {
        gearShiftMaxT_ = value;
      }
    }

    /// <summary>Field number for the "gear_shift_unit_t" field.</summary>
    public const int GearShiftUnitTFieldNumber = 6;
    private double gearShiftUnitT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GearShiftUnitT {
      get { return gearShiftUnitT_; }
      set {
        gearShiftUnitT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryPartitionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryPartitionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InterpolatedPiecesNum != other.InterpolatedPiecesNum) return false;
      if (InitialGearCheckHorizon != other.InitialGearCheckHorizon) return false;
      if (HeadingSearchingRange != other.HeadingSearchingRange) return false;
      if (GearShiftPeriodDuration != other.GearShiftPeriodDuration) return false;
      if (GearShiftMaxT != other.GearShiftMaxT) return false;
      if (GearShiftUnitT != other.GearShiftUnitT) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InterpolatedPiecesNum != 0UL) hash ^= InterpolatedPiecesNum.GetHashCode();
      if (InitialGearCheckHorizon != 0UL) hash ^= InitialGearCheckHorizon.GetHashCode();
      if (HeadingSearchingRange != 0D) hash ^= HeadingSearchingRange.GetHashCode();
      if (GearShiftPeriodDuration != 0D) hash ^= GearShiftPeriodDuration.GetHashCode();
      if (GearShiftMaxT != 0D) hash ^= GearShiftMaxT.GetHashCode();
      if (GearShiftUnitT != 0D) hash ^= GearShiftUnitT.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InterpolatedPiecesNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InterpolatedPiecesNum);
      }
      if (InitialGearCheckHorizon != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(InitialGearCheckHorizon);
      }
      if (HeadingSearchingRange != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(HeadingSearchingRange);
      }
      if (GearShiftPeriodDuration != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GearShiftPeriodDuration);
      }
      if (GearShiftMaxT != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(GearShiftMaxT);
      }
      if (GearShiftUnitT != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(GearShiftUnitT);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InterpolatedPiecesNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InterpolatedPiecesNum);
      }
      if (InitialGearCheckHorizon != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InitialGearCheckHorizon);
      }
      if (HeadingSearchingRange != 0D) {
        size += 1 + 8;
      }
      if (GearShiftPeriodDuration != 0D) {
        size += 1 + 8;
      }
      if (GearShiftMaxT != 0D) {
        size += 1 + 8;
      }
      if (GearShiftUnitT != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryPartitionConfig other) {
      if (other == null) {
        return;
      }
      if (other.InterpolatedPiecesNum != 0UL) {
        InterpolatedPiecesNum = other.InterpolatedPiecesNum;
      }
      if (other.InitialGearCheckHorizon != 0UL) {
        InitialGearCheckHorizon = other.InitialGearCheckHorizon;
      }
      if (other.HeadingSearchingRange != 0D) {
        HeadingSearchingRange = other.HeadingSearchingRange;
      }
      if (other.GearShiftPeriodDuration != 0D) {
        GearShiftPeriodDuration = other.GearShiftPeriodDuration;
      }
      if (other.GearShiftMaxT != 0D) {
        GearShiftMaxT = other.GearShiftMaxT;
      }
      if (other.GearShiftUnitT != 0D) {
        GearShiftUnitT = other.GearShiftUnitT;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InterpolatedPiecesNum = input.ReadUInt64();
            break;
          }
          case 16: {
            InitialGearCheckHorizon = input.ReadUInt64();
            break;
          }
          case 25: {
            HeadingSearchingRange = input.ReadDouble();
            break;
          }
          case 33: {
            GearShiftPeriodDuration = input.ReadDouble();
            break;
          }
          case 41: {
            GearShiftMaxT = input.ReadDouble();
            break;
          }
          case 49: {
            GearShiftUnitT = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
