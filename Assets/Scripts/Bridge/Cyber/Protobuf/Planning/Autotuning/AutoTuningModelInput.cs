// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_model_input.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning.Autotuning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/auto_tuning_model_input.proto</summary>
  public static partial class AutoTuningModelInputReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/auto_tuning_model_input.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AutoTuningModelInputReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL2F1dG9fdHVuaW5nX21vZGVsX2lu",
            "cHV0LnByb3RvEhphcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZyL5BAoUUGF0",
            "aFBvaW50d2lzZUZlYXR1cmUSCQoBbBgBIAEoARIKCgJkbBgCIAEoARILCgNk",
            "ZGwYAyABKAESDQoFa2FwcGEYBCABKAESVwoNb2JzdGFjbGVfaW5mbxgFIAMo",
            "CzJALmFwb2xsby5wbGFubmluZy5hdXRvdHVuaW5nLlBhdGhQb2ludHdpc2VG",
            "ZWF0dXJlLk9ic3RhY2xlRmVhdHVyZRJgChJsZWZ0X2JvdW5kX2ZlYXR1cmUY",
            "BiABKAsyRC5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5QYXRoUG9pbnR3",
            "aXNlRmVhdHVyZS5Cb3VuZFJlbGF0ZWRGZWF0dXJlEmEKE3JpZ2h0X2JvdW5k",
            "X2ZlYXR1cmUYByABKAsyRC5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5Q",
            "YXRoUG9pbnR3aXNlRmVhdHVyZS5Cb3VuZFJlbGF0ZWRGZWF0dXJlGisKD09i",
            "c3RhY2xlRmVhdHVyZRIYChBsYXRlcmFsX2Rpc3RhbmNlGAEgASgBGuIBChNC",
            "b3VuZFJlbGF0ZWRGZWF0dXJlEhYKDmJvdW5kX2Rpc3RhbmNlGAEgASgBEmwK",
            "D2Nyb3NzYWJsZV9sZXZlbBgCIAEoDjJTLmFwb2xsby5wbGFubmluZy5hdXRv",
            "dHVuaW5nLlBhdGhQb2ludHdpc2VGZWF0dXJlLkJvdW5kUmVsYXRlZEZlYXR1",
            "cmUuQ3Jvc3NhYmxlTGV2ZWwiRQoOQ3Jvc3NhYmxlTGV2ZWwSDgoKQ1JPU1Nf",
            "RlJFRRAAEg4KCkNST1NTX0FCTEUQARITCg9DUk9TU19GT1JCSURERU4QAiLo",
            "BwoVU3BlZWRQb2ludHdpc2VGZWF0dXJlEgkKAXMYASABKAESCQoBdBgCIAEo",
            "ARIJCgF2GAMgASgBEhMKC3NwZWVkX2xpbWl0GAQgASgBEgsKA2FjYxgFIAEo",
            "ARIMCgRqZXJrGAYgASgBEl0KEmZvbGxvd19vYnNfZmVhdHVyZRgHIAMoCzJB",
            "LmFwb2xsby5wbGFubmluZy5hdXRvdHVuaW5nLlNwZWVkUG9pbnR3aXNlRmVh",
            "dHVyZS5PYnN0YWNsZUZlYXR1cmUSXwoUb3ZlcnRha2Vfb2JzX2ZlYXR1cmUY",
            "CCADKAsyQS5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5TcGVlZFBvaW50",
            "d2lzZUZlYXR1cmUuT2JzdGFjbGVGZWF0dXJlElwKEW51ZGdlX29ic19mZWF0",
            "dXJlGAkgAygLMkEuYXBvbGxvLnBsYW5uaW5nLmF1dG90dW5pbmcuU3BlZWRQ",
            "b2ludHdpc2VGZWF0dXJlLk9ic3RhY2xlRmVhdHVyZRJbChBzdG9wX29ic19m",
            "ZWF0dXJlGAogAygLMkEuYXBvbGxvLnBsYW5uaW5nLmF1dG90dW5pbmcuU3Bl",
            "ZWRQb2ludHdpc2VGZWF0dXJlLk9ic3RhY2xlRmVhdHVyZRIXCg9jb2xsaXNp",
            "b25fdGltZXMYCyABKAUSXgoTdmlydHVhbF9vYnNfZmVhdHVyZRgMIAMoCzJB",
            "LmFwb2xsby5wbGFubmluZy5hdXRvdHVuaW5nLlNwZWVkUG9pbnR3aXNlRmVh",
            "dHVyZS5PYnN0YWNsZUZlYXR1cmUSEwoLbGF0ZXJhbF9hY2MYDSABKAESGgoS",
            "cGF0aF9jdXJ2YXR1cmVfYWJzGA4gASgBEmUKGnNpZGVwYXNzX2Zyb250X29i",
            "c19mZWF0dXJlGA8gAygLMkEuYXBvbGxvLnBsYW5uaW5nLmF1dG90dW5pbmcu",
            "U3BlZWRQb2ludHdpc2VGZWF0dXJlLk9ic3RhY2xlRmVhdHVyZRJkChlzaWRl",
            "cGFzc19yZWFyX29ic19mZWF0dXJlGBAgAygLMkEuYXBvbGxvLnBsYW5uaW5n",
            "LmF1dG90dW5pbmcuU3BlZWRQb2ludHdpc2VGZWF0dXJlLk9ic3RhY2xlRmVh",
            "dHVyZRqLAQoPT2JzdGFjbGVGZWF0dXJlEh0KFWxvbmdpdHVkaW5hbF9kaXN0",
            "YW5jZRgBIAEoARIWCg5vYnN0YWNsZV9zcGVlZBgCIAEoARIYChBsYXRlcmFs",
            "X2Rpc3RhbmNlGAMgASgBEhMKC3Byb2JhYmlsaXR5GAQgASgBEhIKCnJlbGF0",
            "aXZlX3YYBSABKAEiugEKGlRyYWplY3RvcnlQb2ludHdpc2VGZWF0dXJlEkwK",
            "EnBhdGhfaW5wdXRfZmVhdHVyZRgBIAEoCzIwLmFwb2xsby5wbGFubmluZy5h",
            "dXRvdHVuaW5nLlBhdGhQb2ludHdpc2VGZWF0dXJlEk4KE3NwZWVkX2lucHV0",
            "X2ZlYXR1cmUYAiABKAsyMS5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5T",
            "cGVlZFBvaW50d2lzZUZlYXR1cmUiYgoRVHJhamVjdG9yeUZlYXR1cmUSTQoN",
            "cG9pbnRfZmVhdHVyZRgBIAMoCzI2LmFwb2xsby5wbGFubmluZy5hdXRvdHVu",
            "aW5nLlRyYWplY3RvcnlQb2ludHdpc2VGZWF0dXJlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.PathPointwiseFeature), global::Apollo.Planning.Autotuning.PathPointwiseFeature.Parser, new[]{ "L", "Dl", "Ddl", "Kappa", "ObstacleInfo", "LeftBoundFeature", "RightBoundFeature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.ObstacleFeature), global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.ObstacleFeature.Parser, new[]{ "LateralDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature), global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature.Parser, new[]{ "BoundDistance", "CrossableLevel" }, null, new[]{ typeof(global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature.Types.CrossableLevel) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.SpeedPointwiseFeature), global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Parser, new[]{ "S", "T", "V", "SpeedLimit", "Acc", "Jerk", "FollowObsFeature", "OvertakeObsFeature", "NudgeObsFeature", "StopObsFeature", "CollisionTimes", "VirtualObsFeature", "LateralAcc", "PathCurvatureAbs", "SidepassFrontObsFeature", "SidepassRearObsFeature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature), global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser, new[]{ "LongitudinalDistance", "ObstacleSpeed", "LateralDistance", "Probability", "RelativeV" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.TrajectoryPointwiseFeature), global::Apollo.Planning.Autotuning.TrajectoryPointwiseFeature.Parser, new[]{ "PathInputFeature", "SpeedInputFeature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.TrajectoryFeature), global::Apollo.Planning.Autotuning.TrajectoryFeature.Parser, new[]{ "PointFeature" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PathPointwiseFeature : pb::IMessage<PathPointwiseFeature> {
    private static readonly pb::MessageParser<PathPointwiseFeature> _parser = new pb::MessageParser<PathPointwiseFeature>(() => new PathPointwiseFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPointwiseFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningModelInputReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointwiseFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointwiseFeature(PathPointwiseFeature other) : this() {
      l_ = other.l_;
      dl_ = other.dl_;
      ddl_ = other.ddl_;
      kappa_ = other.kappa_;
      obstacleInfo_ = other.obstacleInfo_.Clone();
      LeftBoundFeature = other.leftBoundFeature_ != null ? other.LeftBoundFeature.Clone() : null;
      RightBoundFeature = other.rightBoundFeature_ != null ? other.RightBoundFeature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointwiseFeature Clone() {
      return new PathPointwiseFeature(this);
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 1;
    private double l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    /// <summary>Field number for the "dl" field.</summary>
    public const int DlFieldNumber = 2;
    private double dl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Dl {
      get { return dl_; }
      set {
        dl_ = value;
      }
    }

    /// <summary>Field number for the "ddl" field.</summary>
    public const int DdlFieldNumber = 3;
    private double ddl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ddl {
      get { return ddl_; }
      set {
        ddl_ = value;
      }
    }

    /// <summary>Field number for the "kappa" field.</summary>
    public const int KappaFieldNumber = 4;
    private double kappa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Kappa {
      get { return kappa_; }
      set {
        kappa_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_info" field.</summary>
    public const int ObstacleInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.ObstacleFeature> _repeated_obstacleInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.ObstacleFeature> obstacleInfo_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.ObstacleFeature> ObstacleInfo {
      get { return obstacleInfo_; }
    }

    /// <summary>Field number for the "left_bound_feature" field.</summary>
    public const int LeftBoundFeatureFieldNumber = 6;
    private global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature leftBoundFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature LeftBoundFeature {
      get { return leftBoundFeature_; }
      set {
        leftBoundFeature_ = value;
      }
    }

    /// <summary>Field number for the "right_bound_feature" field.</summary>
    public const int RightBoundFeatureFieldNumber = 7;
    private global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature rightBoundFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature RightBoundFeature {
      get { return rightBoundFeature_; }
      set {
        rightBoundFeature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPointwiseFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPointwiseFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (L != other.L) return false;
      if (Dl != other.Dl) return false;
      if (Ddl != other.Ddl) return false;
      if (Kappa != other.Kappa) return false;
      if(!obstacleInfo_.Equals(other.obstacleInfo_)) return false;
      if (!object.Equals(LeftBoundFeature, other.LeftBoundFeature)) return false;
      if (!object.Equals(RightBoundFeature, other.RightBoundFeature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L != 0D) hash ^= L.GetHashCode();
      if (Dl != 0D) hash ^= Dl.GetHashCode();
      if (Ddl != 0D) hash ^= Ddl.GetHashCode();
      if (Kappa != 0D) hash ^= Kappa.GetHashCode();
      hash ^= obstacleInfo_.GetHashCode();
      if (leftBoundFeature_ != null) hash ^= LeftBoundFeature.GetHashCode();
      if (rightBoundFeature_ != null) hash ^= RightBoundFeature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(L);
      }
      if (Dl != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Dl);
      }
      if (Ddl != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Ddl);
      }
      if (Kappa != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Kappa);
      }
      obstacleInfo_.WriteTo(output, _repeated_obstacleInfo_codec);
      if (leftBoundFeature_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LeftBoundFeature);
      }
      if (rightBoundFeature_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RightBoundFeature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L != 0D) {
        size += 1 + 8;
      }
      if (Dl != 0D) {
        size += 1 + 8;
      }
      if (Ddl != 0D) {
        size += 1 + 8;
      }
      if (Kappa != 0D) {
        size += 1 + 8;
      }
      size += obstacleInfo_.CalculateSize(_repeated_obstacleInfo_codec);
      if (leftBoundFeature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftBoundFeature);
      }
      if (rightBoundFeature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightBoundFeature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPointwiseFeature other) {
      if (other == null) {
        return;
      }
      if (other.L != 0D) {
        L = other.L;
      }
      if (other.Dl != 0D) {
        Dl = other.Dl;
      }
      if (other.Ddl != 0D) {
        Ddl = other.Ddl;
      }
      if (other.Kappa != 0D) {
        Kappa = other.Kappa;
      }
      obstacleInfo_.Add(other.obstacleInfo_);
      if (other.leftBoundFeature_ != null) {
        if (leftBoundFeature_ == null) {
          leftBoundFeature_ = new global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature();
        }
        LeftBoundFeature.MergeFrom(other.LeftBoundFeature);
      }
      if (other.rightBoundFeature_ != null) {
        if (rightBoundFeature_ == null) {
          rightBoundFeature_ = new global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature();
        }
        RightBoundFeature.MergeFrom(other.RightBoundFeature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            L = input.ReadDouble();
            break;
          }
          case 17: {
            Dl = input.ReadDouble();
            break;
          }
          case 25: {
            Ddl = input.ReadDouble();
            break;
          }
          case 33: {
            Kappa = input.ReadDouble();
            break;
          }
          case 42: {
            obstacleInfo_.AddEntriesFrom(input, _repeated_obstacleInfo_codec);
            break;
          }
          case 50: {
            if (leftBoundFeature_ == null) {
              leftBoundFeature_ = new global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature();
            }
            input.ReadMessage(leftBoundFeature_);
            break;
          }
          case 58: {
            if (rightBoundFeature_ == null) {
              rightBoundFeature_ = new global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature();
            }
            input.ReadMessage(rightBoundFeature_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PathPointwiseFeature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ObstacleFeature : pb::IMessage<ObstacleFeature> {
        private static readonly pb::MessageParser<ObstacleFeature> _parser = new pb::MessageParser<ObstacleFeature>(() => new ObstacleFeature());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObstacleFeature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.Autotuning.PathPointwiseFeature.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleFeature() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleFeature(ObstacleFeature other) : this() {
          lateralDistance_ = other.lateralDistance_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleFeature Clone() {
          return new ObstacleFeature(this);
        }

        /// <summary>Field number for the "lateral_distance" field.</summary>
        public const int LateralDistanceFieldNumber = 1;
        private double lateralDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LateralDistance {
          get { return lateralDistance_; }
          set {
            lateralDistance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ObstacleFeature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObstacleFeature other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LateralDistance != other.LateralDistance) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LateralDistance != 0D) hash ^= LateralDistance.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LateralDistance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(LateralDistance);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LateralDistance != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObstacleFeature other) {
          if (other == null) {
            return;
          }
          if (other.LateralDistance != 0D) {
            LateralDistance = other.LateralDistance;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                LateralDistance = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BoundRelatedFeature : pb::IMessage<BoundRelatedFeature> {
        private static readonly pb::MessageParser<BoundRelatedFeature> _parser = new pb::MessageParser<BoundRelatedFeature>(() => new BoundRelatedFeature());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BoundRelatedFeature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.Autotuning.PathPointwiseFeature.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoundRelatedFeature() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoundRelatedFeature(BoundRelatedFeature other) : this() {
          boundDistance_ = other.boundDistance_;
          crossableLevel_ = other.crossableLevel_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoundRelatedFeature Clone() {
          return new BoundRelatedFeature(this);
        }

        /// <summary>Field number for the "bound_distance" field.</summary>
        public const int BoundDistanceFieldNumber = 1;
        private double boundDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double BoundDistance {
          get { return boundDistance_; }
          set {
            boundDistance_ = value;
          }
        }

        /// <summary>Field number for the "crossable_level" field.</summary>
        public const int CrossableLevelFieldNumber = 2;
        private global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature.Types.CrossableLevel crossableLevel_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature.Types.CrossableLevel CrossableLevel {
          get { return crossableLevel_; }
          set {
            crossableLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BoundRelatedFeature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BoundRelatedFeature other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BoundDistance != other.BoundDistance) return false;
          if (CrossableLevel != other.CrossableLevel) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BoundDistance != 0D) hash ^= BoundDistance.GetHashCode();
          if (CrossableLevel != 0) hash ^= CrossableLevel.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BoundDistance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(BoundDistance);
          }
          if (CrossableLevel != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) CrossableLevel);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BoundDistance != 0D) {
            size += 1 + 8;
          }
          if (CrossableLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CrossableLevel);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BoundRelatedFeature other) {
          if (other == null) {
            return;
          }
          if (other.BoundDistance != 0D) {
            BoundDistance = other.BoundDistance;
          }
          if (other.CrossableLevel != 0) {
            CrossableLevel = other.CrossableLevel;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                BoundDistance = input.ReadDouble();
                break;
              }
              case 16: {
                crossableLevel_ = (global::Apollo.Planning.Autotuning.PathPointwiseFeature.Types.BoundRelatedFeature.Types.CrossableLevel) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the BoundRelatedFeature message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CrossableLevel {
            [pbr::OriginalName("CROSS_FREE")] CrossFree = 0,
            [pbr::OriginalName("CROSS_ABLE")] CrossAble = 1,
            [pbr::OriginalName("CROSS_FORBIDDEN")] CrossForbidden = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class SpeedPointwiseFeature : pb::IMessage<SpeedPointwiseFeature> {
    private static readonly pb::MessageParser<SpeedPointwiseFeature> _parser = new pb::MessageParser<SpeedPointwiseFeature>(() => new SpeedPointwiseFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedPointwiseFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningModelInputReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPointwiseFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPointwiseFeature(SpeedPointwiseFeature other) : this() {
      s_ = other.s_;
      t_ = other.t_;
      v_ = other.v_;
      speedLimit_ = other.speedLimit_;
      acc_ = other.acc_;
      jerk_ = other.jerk_;
      followObsFeature_ = other.followObsFeature_.Clone();
      overtakeObsFeature_ = other.overtakeObsFeature_.Clone();
      nudgeObsFeature_ = other.nudgeObsFeature_.Clone();
      stopObsFeature_ = other.stopObsFeature_.Clone();
      collisionTimes_ = other.collisionTimes_;
      virtualObsFeature_ = other.virtualObsFeature_.Clone();
      lateralAcc_ = other.lateralAcc_;
      pathCurvatureAbs_ = other.pathCurvatureAbs_;
      sidepassFrontObsFeature_ = other.sidepassFrontObsFeature_.Clone();
      sidepassRearObsFeature_ = other.sidepassRearObsFeature_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPointwiseFeature Clone() {
      return new SpeedPointwiseFeature(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 2;
    private double t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double T {
      get { return t_; }
      set {
        t_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 3;
    private double v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 4;
    private double speedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    /// <summary>Field number for the "acc" field.</summary>
    public const int AccFieldNumber = 5;
    private double acc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Acc {
      get { return acc_; }
      set {
        acc_ = value;
      }
    }

    /// <summary>Field number for the "jerk" field.</summary>
    public const int JerkFieldNumber = 6;
    private double jerk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Jerk {
      get { return jerk_; }
      set {
        jerk_ = value;
      }
    }

    /// <summary>Field number for the "follow_obs_feature" field.</summary>
    public const int FollowObsFeatureFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> _repeated_followObsFeature_codec
        = pb::FieldCodec.ForMessage(58, global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> followObsFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> FollowObsFeature {
      get { return followObsFeature_; }
    }

    /// <summary>Field number for the "overtake_obs_feature" field.</summary>
    public const int OvertakeObsFeatureFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> _repeated_overtakeObsFeature_codec
        = pb::FieldCodec.ForMessage(66, global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> overtakeObsFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> OvertakeObsFeature {
      get { return overtakeObsFeature_; }
    }

    /// <summary>Field number for the "nudge_obs_feature" field.</summary>
    public const int NudgeObsFeatureFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> _repeated_nudgeObsFeature_codec
        = pb::FieldCodec.ForMessage(74, global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> nudgeObsFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> NudgeObsFeature {
      get { return nudgeObsFeature_; }
    }

    /// <summary>Field number for the "stop_obs_feature" field.</summary>
    public const int StopObsFeatureFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> _repeated_stopObsFeature_codec
        = pb::FieldCodec.ForMessage(82, global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> stopObsFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> StopObsFeature {
      get { return stopObsFeature_; }
    }

    /// <summary>Field number for the "collision_times" field.</summary>
    public const int CollisionTimesFieldNumber = 11;
    private int collisionTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionTimes {
      get { return collisionTimes_; }
      set {
        collisionTimes_ = value;
      }
    }

    /// <summary>Field number for the "virtual_obs_feature" field.</summary>
    public const int VirtualObsFeatureFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> _repeated_virtualObsFeature_codec
        = pb::FieldCodec.ForMessage(98, global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> virtualObsFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> VirtualObsFeature {
      get { return virtualObsFeature_; }
    }

    /// <summary>Field number for the "lateral_acc" field.</summary>
    public const int LateralAccFieldNumber = 13;
    private double lateralAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralAcc {
      get { return lateralAcc_; }
      set {
        lateralAcc_ = value;
      }
    }

    /// <summary>Field number for the "path_curvature_abs" field.</summary>
    public const int PathCurvatureAbsFieldNumber = 14;
    private double pathCurvatureAbs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathCurvatureAbs {
      get { return pathCurvatureAbs_; }
      set {
        pathCurvatureAbs_ = value;
      }
    }

    /// <summary>Field number for the "sidepass_front_obs_feature" field.</summary>
    public const int SidepassFrontObsFeatureFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> _repeated_sidepassFrontObsFeature_codec
        = pb::FieldCodec.ForMessage(122, global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> sidepassFrontObsFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> SidepassFrontObsFeature {
      get { return sidepassFrontObsFeature_; }
    }

    /// <summary>Field number for the "sidepass_rear_obs_feature" field.</summary>
    public const int SidepassRearObsFeatureFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> _repeated_sidepassRearObsFeature_codec
        = pb::FieldCodec.ForMessage(130, global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> sidepassRearObsFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Types.ObstacleFeature> SidepassRearObsFeature {
      get { return sidepassRearObsFeature_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedPointwiseFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedPointwiseFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (T != other.T) return false;
      if (V != other.V) return false;
      if (SpeedLimit != other.SpeedLimit) return false;
      if (Acc != other.Acc) return false;
      if (Jerk != other.Jerk) return false;
      if(!followObsFeature_.Equals(other.followObsFeature_)) return false;
      if(!overtakeObsFeature_.Equals(other.overtakeObsFeature_)) return false;
      if(!nudgeObsFeature_.Equals(other.nudgeObsFeature_)) return false;
      if(!stopObsFeature_.Equals(other.stopObsFeature_)) return false;
      if (CollisionTimes != other.CollisionTimes) return false;
      if(!virtualObsFeature_.Equals(other.virtualObsFeature_)) return false;
      if (LateralAcc != other.LateralAcc) return false;
      if (PathCurvatureAbs != other.PathCurvatureAbs) return false;
      if(!sidepassFrontObsFeature_.Equals(other.sidepassFrontObsFeature_)) return false;
      if(!sidepassRearObsFeature_.Equals(other.sidepassRearObsFeature_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0D) hash ^= S.GetHashCode();
      if (T != 0D) hash ^= T.GetHashCode();
      if (V != 0D) hash ^= V.GetHashCode();
      if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
      if (Acc != 0D) hash ^= Acc.GetHashCode();
      if (Jerk != 0D) hash ^= Jerk.GetHashCode();
      hash ^= followObsFeature_.GetHashCode();
      hash ^= overtakeObsFeature_.GetHashCode();
      hash ^= nudgeObsFeature_.GetHashCode();
      hash ^= stopObsFeature_.GetHashCode();
      if (CollisionTimes != 0) hash ^= CollisionTimes.GetHashCode();
      hash ^= virtualObsFeature_.GetHashCode();
      if (LateralAcc != 0D) hash ^= LateralAcc.GetHashCode();
      if (PathCurvatureAbs != 0D) hash ^= PathCurvatureAbs.GetHashCode();
      hash ^= sidepassFrontObsFeature_.GetHashCode();
      hash ^= sidepassRearObsFeature_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(S);
      }
      if (T != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(T);
      }
      if (V != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(V);
      }
      if (SpeedLimit != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SpeedLimit);
      }
      if (Acc != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Acc);
      }
      if (Jerk != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Jerk);
      }
      followObsFeature_.WriteTo(output, _repeated_followObsFeature_codec);
      overtakeObsFeature_.WriteTo(output, _repeated_overtakeObsFeature_codec);
      nudgeObsFeature_.WriteTo(output, _repeated_nudgeObsFeature_codec);
      stopObsFeature_.WriteTo(output, _repeated_stopObsFeature_codec);
      if (CollisionTimes != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CollisionTimes);
      }
      virtualObsFeature_.WriteTo(output, _repeated_virtualObsFeature_codec);
      if (LateralAcc != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(LateralAcc);
      }
      if (PathCurvatureAbs != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(PathCurvatureAbs);
      }
      sidepassFrontObsFeature_.WriteTo(output, _repeated_sidepassFrontObsFeature_codec);
      sidepassRearObsFeature_.WriteTo(output, _repeated_sidepassRearObsFeature_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0D) {
        size += 1 + 8;
      }
      if (T != 0D) {
        size += 1 + 8;
      }
      if (V != 0D) {
        size += 1 + 8;
      }
      if (SpeedLimit != 0D) {
        size += 1 + 8;
      }
      if (Acc != 0D) {
        size += 1 + 8;
      }
      if (Jerk != 0D) {
        size += 1 + 8;
      }
      size += followObsFeature_.CalculateSize(_repeated_followObsFeature_codec);
      size += overtakeObsFeature_.CalculateSize(_repeated_overtakeObsFeature_codec);
      size += nudgeObsFeature_.CalculateSize(_repeated_nudgeObsFeature_codec);
      size += stopObsFeature_.CalculateSize(_repeated_stopObsFeature_codec);
      if (CollisionTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionTimes);
      }
      size += virtualObsFeature_.CalculateSize(_repeated_virtualObsFeature_codec);
      if (LateralAcc != 0D) {
        size += 1 + 8;
      }
      if (PathCurvatureAbs != 0D) {
        size += 1 + 8;
      }
      size += sidepassFrontObsFeature_.CalculateSize(_repeated_sidepassFrontObsFeature_codec);
      size += sidepassRearObsFeature_.CalculateSize(_repeated_sidepassRearObsFeature_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedPointwiseFeature other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.T != 0D) {
        T = other.T;
      }
      if (other.V != 0D) {
        V = other.V;
      }
      if (other.SpeedLimit != 0D) {
        SpeedLimit = other.SpeedLimit;
      }
      if (other.Acc != 0D) {
        Acc = other.Acc;
      }
      if (other.Jerk != 0D) {
        Jerk = other.Jerk;
      }
      followObsFeature_.Add(other.followObsFeature_);
      overtakeObsFeature_.Add(other.overtakeObsFeature_);
      nudgeObsFeature_.Add(other.nudgeObsFeature_);
      stopObsFeature_.Add(other.stopObsFeature_);
      if (other.CollisionTimes != 0) {
        CollisionTimes = other.CollisionTimes;
      }
      virtualObsFeature_.Add(other.virtualObsFeature_);
      if (other.LateralAcc != 0D) {
        LateralAcc = other.LateralAcc;
      }
      if (other.PathCurvatureAbs != 0D) {
        PathCurvatureAbs = other.PathCurvatureAbs;
      }
      sidepassFrontObsFeature_.Add(other.sidepassFrontObsFeature_);
      sidepassRearObsFeature_.Add(other.sidepassRearObsFeature_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            S = input.ReadDouble();
            break;
          }
          case 17: {
            T = input.ReadDouble();
            break;
          }
          case 25: {
            V = input.ReadDouble();
            break;
          }
          case 33: {
            SpeedLimit = input.ReadDouble();
            break;
          }
          case 41: {
            Acc = input.ReadDouble();
            break;
          }
          case 49: {
            Jerk = input.ReadDouble();
            break;
          }
          case 58: {
            followObsFeature_.AddEntriesFrom(input, _repeated_followObsFeature_codec);
            break;
          }
          case 66: {
            overtakeObsFeature_.AddEntriesFrom(input, _repeated_overtakeObsFeature_codec);
            break;
          }
          case 74: {
            nudgeObsFeature_.AddEntriesFrom(input, _repeated_nudgeObsFeature_codec);
            break;
          }
          case 82: {
            stopObsFeature_.AddEntriesFrom(input, _repeated_stopObsFeature_codec);
            break;
          }
          case 88: {
            CollisionTimes = input.ReadInt32();
            break;
          }
          case 98: {
            virtualObsFeature_.AddEntriesFrom(input, _repeated_virtualObsFeature_codec);
            break;
          }
          case 105: {
            LateralAcc = input.ReadDouble();
            break;
          }
          case 113: {
            PathCurvatureAbs = input.ReadDouble();
            break;
          }
          case 122: {
            sidepassFrontObsFeature_.AddEntriesFrom(input, _repeated_sidepassFrontObsFeature_codec);
            break;
          }
          case 130: {
            sidepassRearObsFeature_.AddEntriesFrom(input, _repeated_sidepassRearObsFeature_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SpeedPointwiseFeature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ObstacleFeature : pb::IMessage<ObstacleFeature> {
        private static readonly pb::MessageParser<ObstacleFeature> _parser = new pb::MessageParser<ObstacleFeature>(() => new ObstacleFeature());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObstacleFeature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.Autotuning.SpeedPointwiseFeature.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleFeature() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleFeature(ObstacleFeature other) : this() {
          longitudinalDistance_ = other.longitudinalDistance_;
          obstacleSpeed_ = other.obstacleSpeed_;
          lateralDistance_ = other.lateralDistance_;
          probability_ = other.probability_;
          relativeV_ = other.relativeV_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleFeature Clone() {
          return new ObstacleFeature(this);
        }

        /// <summary>Field number for the "longitudinal_distance" field.</summary>
        public const int LongitudinalDistanceFieldNumber = 1;
        private double longitudinalDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LongitudinalDistance {
          get { return longitudinalDistance_; }
          set {
            longitudinalDistance_ = value;
          }
        }

        /// <summary>Field number for the "obstacle_speed" field.</summary>
        public const int ObstacleSpeedFieldNumber = 2;
        private double obstacleSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double ObstacleSpeed {
          get { return obstacleSpeed_; }
          set {
            obstacleSpeed_ = value;
          }
        }

        /// <summary>Field number for the "lateral_distance" field.</summary>
        public const int LateralDistanceFieldNumber = 3;
        private double lateralDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LateralDistance {
          get { return lateralDistance_; }
          set {
            lateralDistance_ = value;
          }
        }

        /// <summary>Field number for the "probability" field.</summary>
        public const int ProbabilityFieldNumber = 4;
        private double probability_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Probability {
          get { return probability_; }
          set {
            probability_ = value;
          }
        }

        /// <summary>Field number for the "relative_v" field.</summary>
        public const int RelativeVFieldNumber = 5;
        private double relativeV_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RelativeV {
          get { return relativeV_; }
          set {
            relativeV_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ObstacleFeature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObstacleFeature other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LongitudinalDistance != other.LongitudinalDistance) return false;
          if (ObstacleSpeed != other.ObstacleSpeed) return false;
          if (LateralDistance != other.LateralDistance) return false;
          if (Probability != other.Probability) return false;
          if (RelativeV != other.RelativeV) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LongitudinalDistance != 0D) hash ^= LongitudinalDistance.GetHashCode();
          if (ObstacleSpeed != 0D) hash ^= ObstacleSpeed.GetHashCode();
          if (LateralDistance != 0D) hash ^= LateralDistance.GetHashCode();
          if (Probability != 0D) hash ^= Probability.GetHashCode();
          if (RelativeV != 0D) hash ^= RelativeV.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LongitudinalDistance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(LongitudinalDistance);
          }
          if (ObstacleSpeed != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(ObstacleSpeed);
          }
          if (LateralDistance != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(LateralDistance);
          }
          if (Probability != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Probability);
          }
          if (RelativeV != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(RelativeV);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LongitudinalDistance != 0D) {
            size += 1 + 8;
          }
          if (ObstacleSpeed != 0D) {
            size += 1 + 8;
          }
          if (LateralDistance != 0D) {
            size += 1 + 8;
          }
          if (Probability != 0D) {
            size += 1 + 8;
          }
          if (RelativeV != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObstacleFeature other) {
          if (other == null) {
            return;
          }
          if (other.LongitudinalDistance != 0D) {
            LongitudinalDistance = other.LongitudinalDistance;
          }
          if (other.ObstacleSpeed != 0D) {
            ObstacleSpeed = other.ObstacleSpeed;
          }
          if (other.LateralDistance != 0D) {
            LateralDistance = other.LateralDistance;
          }
          if (other.Probability != 0D) {
            Probability = other.Probability;
          }
          if (other.RelativeV != 0D) {
            RelativeV = other.RelativeV;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                LongitudinalDistance = input.ReadDouble();
                break;
              }
              case 17: {
                ObstacleSpeed = input.ReadDouble();
                break;
              }
              case 25: {
                LateralDistance = input.ReadDouble();
                break;
              }
              case 33: {
                Probability = input.ReadDouble();
                break;
              }
              case 41: {
                RelativeV = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TrajectoryPointwiseFeature : pb::IMessage<TrajectoryPointwiseFeature> {
    private static readonly pb::MessageParser<TrajectoryPointwiseFeature> _parser = new pb::MessageParser<TrajectoryPointwiseFeature>(() => new TrajectoryPointwiseFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryPointwiseFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningModelInputReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPointwiseFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPointwiseFeature(TrajectoryPointwiseFeature other) : this() {
      PathInputFeature = other.pathInputFeature_ != null ? other.PathInputFeature.Clone() : null;
      SpeedInputFeature = other.speedInputFeature_ != null ? other.SpeedInputFeature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPointwiseFeature Clone() {
      return new TrajectoryPointwiseFeature(this);
    }

    /// <summary>Field number for the "path_input_feature" field.</summary>
    public const int PathInputFeatureFieldNumber = 1;
    private global::Apollo.Planning.Autotuning.PathPointwiseFeature pathInputFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.Autotuning.PathPointwiseFeature PathInputFeature {
      get { return pathInputFeature_; }
      set {
        pathInputFeature_ = value;
      }
    }

    /// <summary>Field number for the "speed_input_feature" field.</summary>
    public const int SpeedInputFeatureFieldNumber = 2;
    private global::Apollo.Planning.Autotuning.SpeedPointwiseFeature speedInputFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.Autotuning.SpeedPointwiseFeature SpeedInputFeature {
      get { return speedInputFeature_; }
      set {
        speedInputFeature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryPointwiseFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryPointwiseFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PathInputFeature, other.PathInputFeature)) return false;
      if (!object.Equals(SpeedInputFeature, other.SpeedInputFeature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pathInputFeature_ != null) hash ^= PathInputFeature.GetHashCode();
      if (speedInputFeature_ != null) hash ^= SpeedInputFeature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pathInputFeature_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PathInputFeature);
      }
      if (speedInputFeature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SpeedInputFeature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pathInputFeature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathInputFeature);
      }
      if (speedInputFeature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedInputFeature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryPointwiseFeature other) {
      if (other == null) {
        return;
      }
      if (other.pathInputFeature_ != null) {
        if (pathInputFeature_ == null) {
          pathInputFeature_ = new global::Apollo.Planning.Autotuning.PathPointwiseFeature();
        }
        PathInputFeature.MergeFrom(other.PathInputFeature);
      }
      if (other.speedInputFeature_ != null) {
        if (speedInputFeature_ == null) {
          speedInputFeature_ = new global::Apollo.Planning.Autotuning.SpeedPointwiseFeature();
        }
        SpeedInputFeature.MergeFrom(other.SpeedInputFeature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pathInputFeature_ == null) {
              pathInputFeature_ = new global::Apollo.Planning.Autotuning.PathPointwiseFeature();
            }
            input.ReadMessage(pathInputFeature_);
            break;
          }
          case 18: {
            if (speedInputFeature_ == null) {
              speedInputFeature_ = new global::Apollo.Planning.Autotuning.SpeedPointwiseFeature();
            }
            input.ReadMessage(speedInputFeature_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrajectoryFeature : pb::IMessage<TrajectoryFeature> {
    private static readonly pb::MessageParser<TrajectoryFeature> _parser = new pb::MessageParser<TrajectoryFeature>(() => new TrajectoryFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningModelInputReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryFeature(TrajectoryFeature other) : this() {
      pointFeature_ = other.pointFeature_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryFeature Clone() {
      return new TrajectoryFeature(this);
    }

    /// <summary>Field number for the "point_feature" field.</summary>
    public const int PointFeatureFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.TrajectoryPointwiseFeature> _repeated_pointFeature_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Planning.Autotuning.TrajectoryPointwiseFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.TrajectoryPointwiseFeature> pointFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.TrajectoryPointwiseFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.TrajectoryPointwiseFeature> PointFeature {
      get { return pointFeature_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pointFeature_.Equals(other.pointFeature_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pointFeature_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pointFeature_.WriteTo(output, _repeated_pointFeature_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pointFeature_.CalculateSize(_repeated_pointFeature_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryFeature other) {
      if (other == null) {
        return;
      }
      pointFeature_.Add(other.pointFeature_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pointFeature_.AddEntriesFrom(input, _repeated_pointFeature_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
