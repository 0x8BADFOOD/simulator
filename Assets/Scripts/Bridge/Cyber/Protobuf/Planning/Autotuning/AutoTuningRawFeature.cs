// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_raw_feature.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning.Autotuning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/auto_tuning_raw_feature.proto</summary>
  public static partial class AutoTuningRawFeatureReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/auto_tuning_raw_feature.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AutoTuningRawFeatureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL2F1dG9fdHVuaW5nX3Jhd19mZWF0",
            "dXJlLnByb3RvEhphcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZxokbW9kdWxl",
            "cy9jb21tb24vcHJvdG8vcG5jX3BvaW50LnByb3RvIn8KE1BhdGhQb2ludFJh",
            "d0ZlYXR1cmUSMQoPY2FydGVzaWFuX2Nvb3JkGAEgASgLMhguYXBvbGxvLmNv",
            "bW1vbi5QYXRoUG9pbnQSNQoMZnJlbmV0X2Nvb3JkGAIgASgLMh8uYXBvbGxv",
            "LmNvbW1vbi5GcmVuZXRGcmFtZVBvaW50IokIChRTcGVlZFBvaW50UmF3RmVh",
            "dHVyZRIJCgFzGAEgASgBEgkKAXQYAiABKAESCQoBdhgDIAEoARIJCgFhGAQg",
            "ASgBEgkKAWoYBSABKAESEwoLc3BlZWRfbGltaXQYBiABKAESVgoGZm9sbG93",
            "GAogAygLMkYuYXBvbGxvLnBsYW5uaW5nLmF1dG90dW5pbmcuU3BlZWRQb2lu",
            "dFJhd0ZlYXR1cmUuT2JqZWN0RGVjaXNpb25GZWF0dXJlElgKCG92ZXJ0YWtl",
            "GAsgAygLMkYuYXBvbGxvLnBsYW5uaW5nLmF1dG90dW5pbmcuU3BlZWRQb2lu",
            "dFJhd0ZlYXR1cmUuT2JqZWN0RGVjaXNpb25GZWF0dXJlEmAKEHZpcnR1YWxf",
            "ZGVjaXNpb24YDSADKAsyRi5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5T",
            "cGVlZFBvaW50UmF3RmVhdHVyZS5PYmplY3REZWNpc2lvbkZlYXR1cmUSVAoE",
            "c3RvcBgOIAMoCzJGLmFwb2xsby5wbGFubmluZy5hdXRvdHVuaW5nLlNwZWVk",
            "UG9pbnRSYXdGZWF0dXJlLk9iamVjdERlY2lzaW9uRmVhdHVyZRJZCgljb2xs",
            "aXNpb24YDyADKAsyRi5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5TcGVl",
            "ZFBvaW50UmF3RmVhdHVyZS5PYmplY3REZWNpc2lvbkZlYXR1cmUSVQoFbnVk",
            "Z2UYDCADKAsyRi5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5TcGVlZFBv",
            "aW50UmF3RmVhdHVyZS5PYmplY3REZWNpc2lvbkZlYXR1cmUSXgoOc2lkZXBh",
            "c3NfZnJvbnQYECADKAsyRi5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5T",
            "cGVlZFBvaW50UmF3RmVhdHVyZS5PYmplY3REZWNpc2lvbkZlYXR1cmUSXQoN",
            "c2lkZXBhc3NfcmVhchgRIAMoCzJGLmFwb2xsby5wbGFubmluZy5hdXRvdHVu",
            "aW5nLlNwZWVkUG9pbnRSYXdGZWF0dXJlLk9iamVjdERlY2lzaW9uRmVhdHVy",
            "ZRJaCgprZWVwX2NsZWFyGBIgAygLMkYuYXBvbGxvLnBsYW5uaW5nLmF1dG90",
            "dW5pbmcuU3BlZWRQb2ludFJhd0ZlYXR1cmUuT2JqZWN0RGVjaXNpb25GZWF0",
            "dXJlGm4KFU9iamVjdERlY2lzaW9uRmVhdHVyZRIKCgJpZBgBIAEoBRISCgpy",
            "ZWxhdGl2ZV9zGAIgASgBEhIKCnJlbGF0aXZlX2wYAyABKAESEgoKcmVsYXRp",
            "dmVfdhgEIAEoARINCgVzcGVlZBgFIAEoASLbBAoRT2JzdGFjbGVTVFJhd0Rh",
            "dGESVgoQb2JzdGFjbGVfc3RfZGF0YRgBIAMoCzI8LmFwb2xsby5wbGFubmlu",
            "Zy5hdXRvdHVuaW5nLk9ic3RhY2xlU1RSYXdEYXRhLk9ic3RhY2xlU1REYXRh",
            "ElcKEW9ic3RhY2xlX3N0X251ZGdlGAIgAygLMjwuYXBvbGxvLnBsYW5uaW5n",
            "LmF1dG90dW5pbmcuT2JzdGFjbGVTVFJhd0RhdGEuT2JzdGFjbGVTVERhdGES",
            "WgoUb2JzdGFjbGVfc3Rfc2lkZXBhc3MYAyADKAsyPC5hcG9sbG8ucGxhbm5p",
            "bmcuYXV0b3R1bmluZy5PYnN0YWNsZVNUUmF3RGF0YS5PYnN0YWNsZVNURGF0",
            "YRpFCgtTVFBvaW50UGFpchIPCgdzX2xvd2VyGAEgASgBEg8KB3NfdXBwZXIY",
            "AiABKAESCQoBdBgDIAEoARIJCgFsGAQgASgBGvEBCg5PYnN0YWNsZVNURGF0",
            "YRIKCgJpZBgBIAEoBRINCgVzcGVlZBgCIAEoARISCgppc192aXJ0dWFsGAMg",
            "ASgIEhMKC3Byb2JhYmlsaXR5GAQgASgBEkoKB3BvbHlnb24YCCADKAsyOS5h",
            "cG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5PYnN0YWNsZVNUUmF3RGF0YS5T",
            "VFBvaW50UGFpchJPCgxkaXN0cmlidXRpb24YCSADKAsyOS5hcG9sbG8ucGxh",
            "bm5pbmcuYXV0b3R1bmluZy5PYnN0YWNsZVNUUmF3RGF0YS5TVFBvaW50UGFp",
            "ciKrAQoZVHJhamVjdG9yeVBvaW50UmF3RmVhdHVyZRJFCgxwYXRoX2ZlYXR1",
            "cmUYASABKAsyLy5hcG9sbG8ucGxhbm5pbmcuYXV0b3R1bmluZy5QYXRoUG9p",
            "bnRSYXdGZWF0dXJlEkcKDXNwZWVkX2ZlYXR1cmUYAiABKAsyMC5hcG9sbG8u",
            "cGxhbm5pbmcuYXV0b3R1bmluZy5TcGVlZFBvaW50UmF3RmVhdHVyZSKoAQoU",
            "VHJhamVjdG9yeVJhd0ZlYXR1cmUSTAoNcG9pbnRfZmVhdHVyZRgBIAMoCzI1",
            "LmFwb2xsby5wbGFubmluZy5hdXRvdHVuaW5nLlRyYWplY3RvcnlQb2ludFJh",
            "d0ZlYXR1cmUSQgoLc3RfcmF3X2RhdGEYAiABKAsyLS5hcG9sbG8ucGxhbm5p",
            "bmcuYXV0b3R1bmluZy5PYnN0YWNsZVNUUmF3RGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.PncPointReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.PathPointRawFeature), global::Apollo.Planning.Autotuning.PathPointRawFeature.Parser, new[]{ "CartesianCoord", "FrenetCoord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.SpeedPointRawFeature), global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Parser, new[]{ "S", "T", "V", "A", "J", "SpeedLimit", "Follow", "Overtake", "VirtualDecision", "Stop", "Collision", "Nudge", "SidepassFront", "SidepassRear", "KeepClear" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature), global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser, new[]{ "Id", "RelativeS", "RelativeL", "RelativeV", "Speed" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.ObstacleSTRawData), global::Apollo.Planning.Autotuning.ObstacleSTRawData.Parser, new[]{ "ObstacleStData", "ObstacleStNudge", "ObstacleStSidepass" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair), global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair.Parser, new[]{ "SLower", "SUpper", "T", "L" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData), global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData.Parser, new[]{ "Id", "Speed", "IsVirtual", "Probability", "Polygon", "Distribution" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.TrajectoryPointRawFeature), global::Apollo.Planning.Autotuning.TrajectoryPointRawFeature.Parser, new[]{ "PathFeature", "SpeedFeature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.Autotuning.TrajectoryRawFeature), global::Apollo.Planning.Autotuning.TrajectoryRawFeature.Parser, new[]{ "PointFeature", "StRawData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PathPointRawFeature : pb::IMessage<PathPointRawFeature> {
    private static readonly pb::MessageParser<PathPointRawFeature> _parser = new pb::MessageParser<PathPointRawFeature>(() => new PathPointRawFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPointRawFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningRawFeatureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointRawFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointRawFeature(PathPointRawFeature other) : this() {
      CartesianCoord = other.cartesianCoord_ != null ? other.CartesianCoord.Clone() : null;
      FrenetCoord = other.frenetCoord_ != null ? other.FrenetCoord.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPointRawFeature Clone() {
      return new PathPointRawFeature(this);
    }

    /// <summary>Field number for the "cartesian_coord" field.</summary>
    public const int CartesianCoordFieldNumber = 1;
    private global::Apollo.Common.PathPoint cartesianCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PathPoint CartesianCoord {
      get { return cartesianCoord_; }
      set {
        cartesianCoord_ = value;
      }
    }

    /// <summary>Field number for the "frenet_coord" field.</summary>
    public const int FrenetCoordFieldNumber = 2;
    private global::Apollo.Common.FrenetFramePoint frenetCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.FrenetFramePoint FrenetCoord {
      get { return frenetCoord_; }
      set {
        frenetCoord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPointRawFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPointRawFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CartesianCoord, other.CartesianCoord)) return false;
      if (!object.Equals(FrenetCoord, other.FrenetCoord)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cartesianCoord_ != null) hash ^= CartesianCoord.GetHashCode();
      if (frenetCoord_ != null) hash ^= FrenetCoord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cartesianCoord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CartesianCoord);
      }
      if (frenetCoord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrenetCoord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cartesianCoord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CartesianCoord);
      }
      if (frenetCoord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrenetCoord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPointRawFeature other) {
      if (other == null) {
        return;
      }
      if (other.cartesianCoord_ != null) {
        if (cartesianCoord_ == null) {
          cartesianCoord_ = new global::Apollo.Common.PathPoint();
        }
        CartesianCoord.MergeFrom(other.CartesianCoord);
      }
      if (other.frenetCoord_ != null) {
        if (frenetCoord_ == null) {
          frenetCoord_ = new global::Apollo.Common.FrenetFramePoint();
        }
        FrenetCoord.MergeFrom(other.FrenetCoord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cartesianCoord_ == null) {
              cartesianCoord_ = new global::Apollo.Common.PathPoint();
            }
            input.ReadMessage(cartesianCoord_);
            break;
          }
          case 18: {
            if (frenetCoord_ == null) {
              frenetCoord_ = new global::Apollo.Common.FrenetFramePoint();
            }
            input.ReadMessage(frenetCoord_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedPointRawFeature : pb::IMessage<SpeedPointRawFeature> {
    private static readonly pb::MessageParser<SpeedPointRawFeature> _parser = new pb::MessageParser<SpeedPointRawFeature>(() => new SpeedPointRawFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedPointRawFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningRawFeatureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPointRawFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPointRawFeature(SpeedPointRawFeature other) : this() {
      s_ = other.s_;
      t_ = other.t_;
      v_ = other.v_;
      a_ = other.a_;
      j_ = other.j_;
      speedLimit_ = other.speedLimit_;
      follow_ = other.follow_.Clone();
      overtake_ = other.overtake_.Clone();
      virtualDecision_ = other.virtualDecision_.Clone();
      stop_ = other.stop_.Clone();
      collision_ = other.collision_.Clone();
      nudge_ = other.nudge_.Clone();
      sidepassFront_ = other.sidepassFront_.Clone();
      sidepassRear_ = other.sidepassRear_.Clone();
      keepClear_ = other.keepClear_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPointRawFeature Clone() {
      return new SpeedPointRawFeature(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private double s_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 2;
    private double t_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double T {
      get { return t_; }
      set {
        t_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 3;
    private double v_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private double a_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 5;
    private double j_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double J {
      get { return j_; }
      set {
        j_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 6;
    private double speedLimit_;
    /// <summary>
    /// speed limit with curvature adj 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    /// <summary>Field number for the "follow" field.</summary>
    public const int FollowFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_follow_codec
        = pb::FieldCodec.ForMessage(82, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> follow_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> Follow {
      get { return follow_; }
    }

    /// <summary>Field number for the "overtake" field.</summary>
    public const int OvertakeFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_overtake_codec
        = pb::FieldCodec.ForMessage(90, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> overtake_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> Overtake {
      get { return overtake_; }
    }

    /// <summary>Field number for the "virtual_decision" field.</summary>
    public const int VirtualDecisionFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_virtualDecision_codec
        = pb::FieldCodec.ForMessage(106, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> virtualDecision_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> VirtualDecision {
      get { return virtualDecision_; }
    }

    /// <summary>Field number for the "stop" field.</summary>
    public const int StopFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_stop_codec
        = pb::FieldCodec.ForMessage(114, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> stop_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> Stop {
      get { return stop_; }
    }

    /// <summary>Field number for the "collision" field.</summary>
    public const int CollisionFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_collision_codec
        = pb::FieldCodec.ForMessage(122, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> collision_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> Collision {
      get { return collision_; }
    }

    /// <summary>Field number for the "nudge" field.</summary>
    public const int NudgeFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_nudge_codec
        = pb::FieldCodec.ForMessage(98, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> nudge_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> Nudge {
      get { return nudge_; }
    }

    /// <summary>Field number for the "sidepass_front" field.</summary>
    public const int SidepassFrontFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_sidepassFront_codec
        = pb::FieldCodec.ForMessage(130, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> sidepassFront_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> SidepassFront {
      get { return sidepassFront_; }
    }

    /// <summary>Field number for the "sidepass_rear" field.</summary>
    public const int SidepassRearFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_sidepassRear_codec
        = pb::FieldCodec.ForMessage(138, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> sidepassRear_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> SidepassRear {
      get { return sidepassRear_; }
    }

    /// <summary>Field number for the "keep_clear" field.</summary>
    public const int KeepClearFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> _repeated_keepClear_codec
        = pb::FieldCodec.ForMessage(146, global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> keepClear_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Types.ObjectDecisionFeature> KeepClear {
      get { return keepClear_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedPointRawFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedPointRawFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (T != other.T) return false;
      if (V != other.V) return false;
      if (A != other.A) return false;
      if (J != other.J) return false;
      if (SpeedLimit != other.SpeedLimit) return false;
      if(!follow_.Equals(other.follow_)) return false;
      if(!overtake_.Equals(other.overtake_)) return false;
      if(!virtualDecision_.Equals(other.virtualDecision_)) return false;
      if(!stop_.Equals(other.stop_)) return false;
      if(!collision_.Equals(other.collision_)) return false;
      if(!nudge_.Equals(other.nudge_)) return false;
      if(!sidepassFront_.Equals(other.sidepassFront_)) return false;
      if(!sidepassRear_.Equals(other.sidepassRear_)) return false;
      if(!keepClear_.Equals(other.keepClear_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0D) hash ^= S.GetHashCode();
      if (T != 0D) hash ^= T.GetHashCode();
      if (V != 0D) hash ^= V.GetHashCode();
      if (A != 0D) hash ^= A.GetHashCode();
      if (J != 0D) hash ^= J.GetHashCode();
      if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
      hash ^= follow_.GetHashCode();
      hash ^= overtake_.GetHashCode();
      hash ^= virtualDecision_.GetHashCode();
      hash ^= stop_.GetHashCode();
      hash ^= collision_.GetHashCode();
      hash ^= nudge_.GetHashCode();
      hash ^= sidepassFront_.GetHashCode();
      hash ^= sidepassRear_.GetHashCode();
      hash ^= keepClear_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(S);
      }
      if (T != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(T);
      }
      if (V != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(V);
      }
      if (A != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(A);
      }
      if (J != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(J);
      }
      if (SpeedLimit != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SpeedLimit);
      }
      follow_.WriteTo(output, _repeated_follow_codec);
      overtake_.WriteTo(output, _repeated_overtake_codec);
      nudge_.WriteTo(output, _repeated_nudge_codec);
      virtualDecision_.WriteTo(output, _repeated_virtualDecision_codec);
      stop_.WriteTo(output, _repeated_stop_codec);
      collision_.WriteTo(output, _repeated_collision_codec);
      sidepassFront_.WriteTo(output, _repeated_sidepassFront_codec);
      sidepassRear_.WriteTo(output, _repeated_sidepassRear_codec);
      keepClear_.WriteTo(output, _repeated_keepClear_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0D) {
        size += 1 + 8;
      }
      if (T != 0D) {
        size += 1 + 8;
      }
      if (V != 0D) {
        size += 1 + 8;
      }
      if (A != 0D) {
        size += 1 + 8;
      }
      if (J != 0D) {
        size += 1 + 8;
      }
      if (SpeedLimit != 0D) {
        size += 1 + 8;
      }
      size += follow_.CalculateSize(_repeated_follow_codec);
      size += overtake_.CalculateSize(_repeated_overtake_codec);
      size += virtualDecision_.CalculateSize(_repeated_virtualDecision_codec);
      size += stop_.CalculateSize(_repeated_stop_codec);
      size += collision_.CalculateSize(_repeated_collision_codec);
      size += nudge_.CalculateSize(_repeated_nudge_codec);
      size += sidepassFront_.CalculateSize(_repeated_sidepassFront_codec);
      size += sidepassRear_.CalculateSize(_repeated_sidepassRear_codec);
      size += keepClear_.CalculateSize(_repeated_keepClear_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedPointRawFeature other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.T != 0D) {
        T = other.T;
      }
      if (other.V != 0D) {
        V = other.V;
      }
      if (other.A != 0D) {
        A = other.A;
      }
      if (other.J != 0D) {
        J = other.J;
      }
      if (other.SpeedLimit != 0D) {
        SpeedLimit = other.SpeedLimit;
      }
      follow_.Add(other.follow_);
      overtake_.Add(other.overtake_);
      virtualDecision_.Add(other.virtualDecision_);
      stop_.Add(other.stop_);
      collision_.Add(other.collision_);
      nudge_.Add(other.nudge_);
      sidepassFront_.Add(other.sidepassFront_);
      sidepassRear_.Add(other.sidepassRear_);
      keepClear_.Add(other.keepClear_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            S = input.ReadDouble();
            break;
          }
          case 17: {
            T = input.ReadDouble();
            break;
          }
          case 25: {
            V = input.ReadDouble();
            break;
          }
          case 33: {
            A = input.ReadDouble();
            break;
          }
          case 41: {
            J = input.ReadDouble();
            break;
          }
          case 49: {
            SpeedLimit = input.ReadDouble();
            break;
          }
          case 82: {
            follow_.AddEntriesFrom(input, _repeated_follow_codec);
            break;
          }
          case 90: {
            overtake_.AddEntriesFrom(input, _repeated_overtake_codec);
            break;
          }
          case 98: {
            nudge_.AddEntriesFrom(input, _repeated_nudge_codec);
            break;
          }
          case 106: {
            virtualDecision_.AddEntriesFrom(input, _repeated_virtualDecision_codec);
            break;
          }
          case 114: {
            stop_.AddEntriesFrom(input, _repeated_stop_codec);
            break;
          }
          case 122: {
            collision_.AddEntriesFrom(input, _repeated_collision_codec);
            break;
          }
          case 130: {
            sidepassFront_.AddEntriesFrom(input, _repeated_sidepassFront_codec);
            break;
          }
          case 138: {
            sidepassRear_.AddEntriesFrom(input, _repeated_sidepassRear_codec);
            break;
          }
          case 146: {
            keepClear_.AddEntriesFrom(input, _repeated_keepClear_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SpeedPointRawFeature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ObjectDecisionFeature : pb::IMessage<ObjectDecisionFeature> {
        private static readonly pb::MessageParser<ObjectDecisionFeature> _parser = new pb::MessageParser<ObjectDecisionFeature>(() => new ObjectDecisionFeature());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObjectDecisionFeature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.Autotuning.SpeedPointRawFeature.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObjectDecisionFeature() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObjectDecisionFeature(ObjectDecisionFeature other) : this() {
          id_ = other.id_;
          relativeS_ = other.relativeS_;
          relativeL_ = other.relativeL_;
          relativeV_ = other.relativeV_;
          speed_ = other.speed_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObjectDecisionFeature Clone() {
          return new ObjectDecisionFeature(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        /// <summary>
        /// obstacle id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "relative_s" field.</summary>
        public const int RelativeSFieldNumber = 2;
        private double relativeS_;
        /// <summary>
        /// relative to eog, s_obs - s_host 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RelativeS {
          get { return relativeS_; }
          set {
            relativeS_ = value;
          }
        }

        /// <summary>Field number for the "relative_l" field.</summary>
        public const int RelativeLFieldNumber = 3;
        private double relativeL_;
        /// <summary>
        /// relative to ego, l_obs - l_host 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RelativeL {
          get { return relativeL_; }
          set {
            relativeL_ = value;
          }
        }

        /// <summary>Field number for the "relative_v" field.</summary>
        public const int RelativeVFieldNumber = 4;
        private double relativeV_;
        /// <summary>
        /// relative to ego, v_obs - v_host 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RelativeV {
          get { return relativeV_; }
          set {
            relativeV_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 5;
        private double speed_;
        /// <summary>
        /// speed 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ObjectDecisionFeature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObjectDecisionFeature other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (RelativeS != other.RelativeS) return false;
          if (RelativeL != other.RelativeL) return false;
          if (RelativeV != other.RelativeV) return false;
          if (Speed != other.Speed) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (RelativeS != 0D) hash ^= RelativeS.GetHashCode();
          if (RelativeL != 0D) hash ^= RelativeL.GetHashCode();
          if (RelativeV != 0D) hash ^= RelativeV.GetHashCode();
          if (Speed != 0D) hash ^= Speed.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (RelativeS != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(RelativeS);
          }
          if (RelativeL != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(RelativeL);
          }
          if (RelativeV != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(RelativeV);
          }
          if (Speed != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Speed);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (RelativeS != 0D) {
            size += 1 + 8;
          }
          if (RelativeL != 0D) {
            size += 1 + 8;
          }
          if (RelativeV != 0D) {
            size += 1 + 8;
          }
          if (Speed != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObjectDecisionFeature other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.RelativeS != 0D) {
            RelativeS = other.RelativeS;
          }
          if (other.RelativeL != 0D) {
            RelativeL = other.RelativeL;
          }
          if (other.RelativeV != 0D) {
            RelativeV = other.RelativeV;
          }
          if (other.Speed != 0D) {
            Speed = other.Speed;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 17: {
                RelativeS = input.ReadDouble();
                break;
              }
              case 25: {
                RelativeL = input.ReadDouble();
                break;
              }
              case 33: {
                RelativeV = input.ReadDouble();
                break;
              }
              case 41: {
                Speed = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// caputuring the obstacle raw distance information from surrounding environment
  /// based on ST graph
  /// </summary>
  public sealed partial class ObstacleSTRawData : pb::IMessage<ObstacleSTRawData> {
    private static readonly pb::MessageParser<ObstacleSTRawData> _parser = new pb::MessageParser<ObstacleSTRawData>(() => new ObstacleSTRawData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObstacleSTRawData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningRawFeatureReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleSTRawData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleSTRawData(ObstacleSTRawData other) : this() {
      obstacleStData_ = other.obstacleStData_.Clone();
      obstacleStNudge_ = other.obstacleStNudge_.Clone();
      obstacleStSidepass_ = other.obstacleStSidepass_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleSTRawData Clone() {
      return new ObstacleSTRawData(this);
    }

    /// <summary>Field number for the "obstacle_st_data" field.</summary>
    public const int ObstacleStDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> _repeated_obstacleStData_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> obstacleStData_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> ObstacleStData {
      get { return obstacleStData_; }
    }

    /// <summary>Field number for the "obstacle_st_nudge" field.</summary>
    public const int ObstacleStNudgeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> _repeated_obstacleStNudge_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> obstacleStNudge_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> ObstacleStNudge {
      get { return obstacleStNudge_; }
    }

    /// <summary>Field number for the "obstacle_st_sidepass" field.</summary>
    public const int ObstacleStSidepassFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> _repeated_obstacleStSidepass_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> obstacleStSidepass_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.ObstacleSTData> ObstacleStSidepass {
      get { return obstacleStSidepass_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObstacleSTRawData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObstacleSTRawData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!obstacleStData_.Equals(other.obstacleStData_)) return false;
      if(!obstacleStNudge_.Equals(other.obstacleStNudge_)) return false;
      if(!obstacleStSidepass_.Equals(other.obstacleStSidepass_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= obstacleStData_.GetHashCode();
      hash ^= obstacleStNudge_.GetHashCode();
      hash ^= obstacleStSidepass_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      obstacleStData_.WriteTo(output, _repeated_obstacleStData_codec);
      obstacleStNudge_.WriteTo(output, _repeated_obstacleStNudge_codec);
      obstacleStSidepass_.WriteTo(output, _repeated_obstacleStSidepass_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += obstacleStData_.CalculateSize(_repeated_obstacleStData_codec);
      size += obstacleStNudge_.CalculateSize(_repeated_obstacleStNudge_codec);
      size += obstacleStSidepass_.CalculateSize(_repeated_obstacleStSidepass_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObstacleSTRawData other) {
      if (other == null) {
        return;
      }
      obstacleStData_.Add(other.obstacleStData_);
      obstacleStNudge_.Add(other.obstacleStNudge_);
      obstacleStSidepass_.Add(other.obstacleStSidepass_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            obstacleStData_.AddEntriesFrom(input, _repeated_obstacleStData_codec);
            break;
          }
          case 18: {
            obstacleStNudge_.AddEntriesFrom(input, _repeated_obstacleStNudge_codec);
            break;
          }
          case 26: {
            obstacleStSidepass_.AddEntriesFrom(input, _repeated_obstacleStSidepass_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ObstacleSTRawData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class STPointPair : pb::IMessage<STPointPair> {
        private static readonly pb::MessageParser<STPointPair> _parser = new pb::MessageParser<STPointPair>(() => new STPointPair());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<STPointPair> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.Autotuning.ObstacleSTRawData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STPointPair() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STPointPair(STPointPair other) : this() {
          sLower_ = other.sLower_;
          sUpper_ = other.sUpper_;
          t_ = other.t_;
          l_ = other.l_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public STPointPair Clone() {
          return new STPointPair(this);
        }

        /// <summary>Field number for the "s_lower" field.</summary>
        public const int SLowerFieldNumber = 1;
        private double sLower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double SLower {
          get { return sLower_; }
          set {
            sLower_ = value;
          }
        }

        /// <summary>Field number for the "s_upper" field.</summary>
        public const int SUpperFieldNumber = 2;
        private double sUpper_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double SUpper {
          get { return sUpper_; }
          set {
            sUpper_ = value;
          }
        }

        /// <summary>Field number for the "t" field.</summary>
        public const int TFieldNumber = 3;
        private double t_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double T {
          get { return t_; }
          set {
            t_ = value;
          }
        }

        /// <summary>Field number for the "l" field.</summary>
        public const int LFieldNumber = 4;
        private double l_;
        /// <summary>
        /// filled when nudging
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double L {
          get { return l_; }
          set {
            l_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as STPointPair);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(STPointPair other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SLower != other.SLower) return false;
          if (SUpper != other.SUpper) return false;
          if (T != other.T) return false;
          if (L != other.L) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SLower != 0D) hash ^= SLower.GetHashCode();
          if (SUpper != 0D) hash ^= SUpper.GetHashCode();
          if (T != 0D) hash ^= T.GetHashCode();
          if (L != 0D) hash ^= L.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SLower != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(SLower);
          }
          if (SUpper != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(SUpper);
          }
          if (T != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(T);
          }
          if (L != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(L);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SLower != 0D) {
            size += 1 + 8;
          }
          if (SUpper != 0D) {
            size += 1 + 8;
          }
          if (T != 0D) {
            size += 1 + 8;
          }
          if (L != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(STPointPair other) {
          if (other == null) {
            return;
          }
          if (other.SLower != 0D) {
            SLower = other.SLower;
          }
          if (other.SUpper != 0D) {
            SUpper = other.SUpper;
          }
          if (other.T != 0D) {
            T = other.T;
          }
          if (other.L != 0D) {
            L = other.L;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                SLower = input.ReadDouble();
                break;
              }
              case 17: {
                SUpper = input.ReadDouble();
                break;
              }
              case 25: {
                T = input.ReadDouble();
                break;
              }
              case 33: {
                L = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ObstacleSTData : pb::IMessage<ObstacleSTData> {
        private static readonly pb::MessageParser<ObstacleSTData> _parser = new pb::MessageParser<ObstacleSTData>(() => new ObstacleSTData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObstacleSTData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.Autotuning.ObstacleSTRawData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleSTData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleSTData(ObstacleSTData other) : this() {
          id_ = other.id_;
          speed_ = other.speed_;
          isVirtual_ = other.isVirtual_;
          probability_ = other.probability_;
          polygon_ = other.polygon_.Clone();
          distribution_ = other.distribution_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObstacleSTData Clone() {
          return new ObstacleSTData(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 2;
        private double speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        /// <summary>Field number for the "is_virtual" field.</summary>
        public const int IsVirtualFieldNumber = 3;
        private bool isVirtual_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsVirtual {
          get { return isVirtual_; }
          set {
            isVirtual_ = value;
          }
        }

        /// <summary>Field number for the "probability" field.</summary>
        public const int ProbabilityFieldNumber = 4;
        private double probability_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Probability {
          get { return probability_; }
          set {
            probability_ = value;
          }
        }

        /// <summary>Field number for the "polygon" field.</summary>
        public const int PolygonFieldNumber = 8;
        private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair> _repeated_polygon_codec
            = pb::FieldCodec.ForMessage(66, global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair.Parser);
        private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair> polygon_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair> Polygon {
          get { return polygon_; }
        }

        /// <summary>Field number for the "distribution" field.</summary>
        public const int DistributionFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair> _repeated_distribution_codec
            = pb::FieldCodec.ForMessage(74, global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair.Parser);
        private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair> distribution_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Apollo.Planning.Autotuning.ObstacleSTRawData.Types.STPointPair> Distribution {
          get { return distribution_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ObstacleSTData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObstacleSTData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Speed != other.Speed) return false;
          if (IsVirtual != other.IsVirtual) return false;
          if (Probability != other.Probability) return false;
          if(!polygon_.Equals(other.polygon_)) return false;
          if(!distribution_.Equals(other.distribution_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Speed != 0D) hash ^= Speed.GetHashCode();
          if (IsVirtual != false) hash ^= IsVirtual.GetHashCode();
          if (Probability != 0D) hash ^= Probability.GetHashCode();
          hash ^= polygon_.GetHashCode();
          hash ^= distribution_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Speed != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Speed);
          }
          if (IsVirtual != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsVirtual);
          }
          if (Probability != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Probability);
          }
          polygon_.WriteTo(output, _repeated_polygon_codec);
          distribution_.WriteTo(output, _repeated_distribution_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Speed != 0D) {
            size += 1 + 8;
          }
          if (IsVirtual != false) {
            size += 1 + 1;
          }
          if (Probability != 0D) {
            size += 1 + 8;
          }
          size += polygon_.CalculateSize(_repeated_polygon_codec);
          size += distribution_.CalculateSize(_repeated_distribution_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObstacleSTData other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Speed != 0D) {
            Speed = other.Speed;
          }
          if (other.IsVirtual != false) {
            IsVirtual = other.IsVirtual;
          }
          if (other.Probability != 0D) {
            Probability = other.Probability;
          }
          polygon_.Add(other.polygon_);
          distribution_.Add(other.distribution_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 17: {
                Speed = input.ReadDouble();
                break;
              }
              case 24: {
                IsVirtual = input.ReadBool();
                break;
              }
              case 33: {
                Probability = input.ReadDouble();
                break;
              }
              case 66: {
                polygon_.AddEntriesFrom(input, _repeated_polygon_codec);
                break;
              }
              case 74: {
                distribution_.AddEntriesFrom(input, _repeated_distribution_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TrajectoryPointRawFeature : pb::IMessage<TrajectoryPointRawFeature> {
    private static readonly pb::MessageParser<TrajectoryPointRawFeature> _parser = new pb::MessageParser<TrajectoryPointRawFeature>(() => new TrajectoryPointRawFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryPointRawFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningRawFeatureReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPointRawFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPointRawFeature(TrajectoryPointRawFeature other) : this() {
      PathFeature = other.pathFeature_ != null ? other.PathFeature.Clone() : null;
      SpeedFeature = other.speedFeature_ != null ? other.SpeedFeature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPointRawFeature Clone() {
      return new TrajectoryPointRawFeature(this);
    }

    /// <summary>Field number for the "path_feature" field.</summary>
    public const int PathFeatureFieldNumber = 1;
    private global::Apollo.Planning.Autotuning.PathPointRawFeature pathFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.Autotuning.PathPointRawFeature PathFeature {
      get { return pathFeature_; }
      set {
        pathFeature_ = value;
      }
    }

    /// <summary>Field number for the "speed_feature" field.</summary>
    public const int SpeedFeatureFieldNumber = 2;
    private global::Apollo.Planning.Autotuning.SpeedPointRawFeature speedFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.Autotuning.SpeedPointRawFeature SpeedFeature {
      get { return speedFeature_; }
      set {
        speedFeature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryPointRawFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryPointRawFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PathFeature, other.PathFeature)) return false;
      if (!object.Equals(SpeedFeature, other.SpeedFeature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pathFeature_ != null) hash ^= PathFeature.GetHashCode();
      if (speedFeature_ != null) hash ^= SpeedFeature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pathFeature_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PathFeature);
      }
      if (speedFeature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SpeedFeature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pathFeature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathFeature);
      }
      if (speedFeature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedFeature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryPointRawFeature other) {
      if (other == null) {
        return;
      }
      if (other.pathFeature_ != null) {
        if (pathFeature_ == null) {
          pathFeature_ = new global::Apollo.Planning.Autotuning.PathPointRawFeature();
        }
        PathFeature.MergeFrom(other.PathFeature);
      }
      if (other.speedFeature_ != null) {
        if (speedFeature_ == null) {
          speedFeature_ = new global::Apollo.Planning.Autotuning.SpeedPointRawFeature();
        }
        SpeedFeature.MergeFrom(other.SpeedFeature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pathFeature_ == null) {
              pathFeature_ = new global::Apollo.Planning.Autotuning.PathPointRawFeature();
            }
            input.ReadMessage(pathFeature_);
            break;
          }
          case 18: {
            if (speedFeature_ == null) {
              speedFeature_ = new global::Apollo.Planning.Autotuning.SpeedPointRawFeature();
            }
            input.ReadMessage(speedFeature_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrajectoryRawFeature : pb::IMessage<TrajectoryRawFeature> {
    private static readonly pb::MessageParser<TrajectoryRawFeature> _parser = new pb::MessageParser<TrajectoryRawFeature>(() => new TrajectoryRawFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryRawFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.Autotuning.AutoTuningRawFeatureReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryRawFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryRawFeature(TrajectoryRawFeature other) : this() {
      pointFeature_ = other.pointFeature_.Clone();
      StRawData = other.stRawData_ != null ? other.StRawData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryRawFeature Clone() {
      return new TrajectoryRawFeature(this);
    }

    /// <summary>Field number for the "point_feature" field.</summary>
    public const int PointFeatureFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.Autotuning.TrajectoryPointRawFeature> _repeated_pointFeature_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Planning.Autotuning.TrajectoryPointRawFeature.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.Autotuning.TrajectoryPointRawFeature> pointFeature_ = new pbc::RepeatedField<global::Apollo.Planning.Autotuning.TrajectoryPointRawFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.Autotuning.TrajectoryPointRawFeature> PointFeature {
      get { return pointFeature_; }
    }

    /// <summary>Field number for the "st_raw_data" field.</summary>
    public const int StRawDataFieldNumber = 2;
    private global::Apollo.Planning.Autotuning.ObstacleSTRawData stRawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.Autotuning.ObstacleSTRawData StRawData {
      get { return stRawData_; }
      set {
        stRawData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryRawFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryRawFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pointFeature_.Equals(other.pointFeature_)) return false;
      if (!object.Equals(StRawData, other.StRawData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pointFeature_.GetHashCode();
      if (stRawData_ != null) hash ^= StRawData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pointFeature_.WriteTo(output, _repeated_pointFeature_codec);
      if (stRawData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StRawData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pointFeature_.CalculateSize(_repeated_pointFeature_codec);
      if (stRawData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StRawData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryRawFeature other) {
      if (other == null) {
        return;
      }
      pointFeature_.Add(other.pointFeature_);
      if (other.stRawData_ != null) {
        if (stRawData_ == null) {
          stRawData_ = new global::Apollo.Planning.Autotuning.ObstacleSTRawData();
        }
        StRawData.MergeFrom(other.StRawData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pointFeature_.AddEntriesFrom(input, _repeated_pointFeature_codec);
            break;
          }
          case 18: {
            if (stRawData_ == null) {
              stRawData_ = new global::Apollo.Planning.Autotuning.ObstacleSTRawData();
            }
            input.ReadMessage(stRawData_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
