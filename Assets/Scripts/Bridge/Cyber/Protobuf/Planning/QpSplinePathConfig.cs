// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_spline_path_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/qp_spline_path_config.proto</summary>
  public static partial class QpSplinePathConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/qp_spline_path_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QpSplinePathConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3FwX3NwbGluZV9wYXRoX2NvbmZp",
            "Zy5wcm90bxIPYXBvbGxvLnBsYW5uaW5nIr8EChJRcFNwbGluZVBhdGhDb25m",
            "aWcSFAoMc3BsaW5lX29yZGVyGAEgASgNEhkKEW1heF9zcGxpbmVfbGVuZ3Ro",
            "GAIgASgBEh8KF21heF9jb25zdHJhaW50X2ludGVydmFsGAMgASgBEhcKD3Rp",
            "bWVfcmVzb2x1dGlvbhgEIAEoARIdChVyZWd1bGFyaXphdGlvbl93ZWlnaHQY",
            "BSABKAESIgoaZmlyc3Rfc3BsaW5lX3dlaWdodF9mYWN0b3IYBiABKAESGQoR",
            "ZGVyaXZhdGl2ZV93ZWlnaHQYByABKAESIAoYc2Vjb25kX2Rlcml2YXRpdmVf",
            "d2VpZ2h0GAggASgBEh8KF3RoaXJkX2Rlcml2YXRpdmVfd2VpZ2h0GAkgASgB",
            "Eh0KFXJlZmVyZW5jZV9saW5lX3dlaWdodBgKIAEoARISCgpudW1fb3V0cHV0",
            "GAsgASgNEiQKHGNyb3NzX2xhbmVfbGF0ZXJhbF9leHRlbnNpb24YDCABKAES",
            "KQohY3Jvc3NfbGFuZV9sb25naXR1ZGluYWxfZXh0ZW5zaW9uGA0gASgBEhsK",
            "E2hpc3RvcnlfcGF0aF93ZWlnaHQYDiABKAESGQoRbGFuZV9jaGFuZ2VfbWlk",
            "X2wYDyABKAESIwobcG9pbnRfY29uc3RyYWludF9zX3Bvc2l0aW9uGBAgASgB",
            "EiEKGWxhbmVfY2hhbmdlX2xhdGVyYWxfc2hpZnQYESABKAESGQoRdXR1cm5f",
            "c3BlZWRfbGltaXQYEiABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QpSplinePathConfig), global::Apollo.Planning.QpSplinePathConfig.Parser, new[]{ "SplineOrder", "MaxSplineLength", "MaxConstraintInterval", "TimeResolution", "RegularizationWeight", "FirstSplineWeightFactor", "DerivativeWeight", "SecondDerivativeWeight", "ThirdDerivativeWeight", "ReferenceLineWeight", "NumOutput", "CrossLaneLateralExtension", "CrossLaneLongitudinalExtension", "HistoryPathWeight", "LaneChangeMidL", "PointConstraintSPosition", "LaneChangeLateralShift", "UturnSpeedLimit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QpSplinePathConfig : pb::IMessage<QpSplinePathConfig> {
    private static readonly pb::MessageParser<QpSplinePathConfig> _parser = new pb::MessageParser<QpSplinePathConfig>(() => new QpSplinePathConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QpSplinePathConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpSplinePathConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplinePathConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplinePathConfig(QpSplinePathConfig other) : this() {
      splineOrder_ = other.splineOrder_;
      maxSplineLength_ = other.maxSplineLength_;
      maxConstraintInterval_ = other.maxConstraintInterval_;
      timeResolution_ = other.timeResolution_;
      regularizationWeight_ = other.regularizationWeight_;
      firstSplineWeightFactor_ = other.firstSplineWeightFactor_;
      derivativeWeight_ = other.derivativeWeight_;
      secondDerivativeWeight_ = other.secondDerivativeWeight_;
      thirdDerivativeWeight_ = other.thirdDerivativeWeight_;
      referenceLineWeight_ = other.referenceLineWeight_;
      numOutput_ = other.numOutput_;
      crossLaneLateralExtension_ = other.crossLaneLateralExtension_;
      crossLaneLongitudinalExtension_ = other.crossLaneLongitudinalExtension_;
      historyPathWeight_ = other.historyPathWeight_;
      laneChangeMidL_ = other.laneChangeMidL_;
      pointConstraintSPosition_ = other.pointConstraintSPosition_;
      laneChangeLateralShift_ = other.laneChangeLateralShift_;
      uturnSpeedLimit_ = other.uturnSpeedLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplinePathConfig Clone() {
      return new QpSplinePathConfig(this);
    }

    /// <summary>Field number for the "spline_order" field.</summary>
    public const int SplineOrderFieldNumber = 1;
    private uint splineOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SplineOrder {
      get { return splineOrder_; }
      set {
        splineOrder_ = value;
      }
    }

    /// <summary>Field number for the "max_spline_length" field.</summary>
    public const int MaxSplineLengthFieldNumber = 2;
    private double maxSplineLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSplineLength {
      get { return maxSplineLength_; }
      set {
        maxSplineLength_ = value;
      }
    }

    /// <summary>Field number for the "max_constraint_interval" field.</summary>
    public const int MaxConstraintIntervalFieldNumber = 3;
    private double maxConstraintInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxConstraintInterval {
      get { return maxConstraintInterval_; }
      set {
        maxConstraintInterval_ = value;
      }
    }

    /// <summary>Field number for the "time_resolution" field.</summary>
    public const int TimeResolutionFieldNumber = 4;
    private double timeResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeResolution {
      get { return timeResolution_; }
      set {
        timeResolution_ = value;
      }
    }

    /// <summary>Field number for the "regularization_weight" field.</summary>
    public const int RegularizationWeightFieldNumber = 5;
    private double regularizationWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RegularizationWeight {
      get { return regularizationWeight_; }
      set {
        regularizationWeight_ = value;
      }
    }

    /// <summary>Field number for the "first_spline_weight_factor" field.</summary>
    public const int FirstSplineWeightFactorFieldNumber = 6;
    private double firstSplineWeightFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FirstSplineWeightFactor {
      get { return firstSplineWeightFactor_; }
      set {
        firstSplineWeightFactor_ = value;
      }
    }

    /// <summary>Field number for the "derivative_weight" field.</summary>
    public const int DerivativeWeightFieldNumber = 7;
    private double derivativeWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DerivativeWeight {
      get { return derivativeWeight_; }
      set {
        derivativeWeight_ = value;
      }
    }

    /// <summary>Field number for the "second_derivative_weight" field.</summary>
    public const int SecondDerivativeWeightFieldNumber = 8;
    private double secondDerivativeWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SecondDerivativeWeight {
      get { return secondDerivativeWeight_; }
      set {
        secondDerivativeWeight_ = value;
      }
    }

    /// <summary>Field number for the "third_derivative_weight" field.</summary>
    public const int ThirdDerivativeWeightFieldNumber = 9;
    private double thirdDerivativeWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThirdDerivativeWeight {
      get { return thirdDerivativeWeight_; }
      set {
        thirdDerivativeWeight_ = value;
      }
    }

    /// <summary>Field number for the "reference_line_weight" field.</summary>
    public const int ReferenceLineWeightFieldNumber = 10;
    private double referenceLineWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReferenceLineWeight {
      get { return referenceLineWeight_; }
      set {
        referenceLineWeight_ = value;
      }
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 11;
    private uint numOutput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "cross_lane_lateral_extension" field.</summary>
    public const int CrossLaneLateralExtensionFieldNumber = 12;
    private double crossLaneLateralExtension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CrossLaneLateralExtension {
      get { return crossLaneLateralExtension_; }
      set {
        crossLaneLateralExtension_ = value;
      }
    }

    /// <summary>Field number for the "cross_lane_longitudinal_extension" field.</summary>
    public const int CrossLaneLongitudinalExtensionFieldNumber = 13;
    private double crossLaneLongitudinalExtension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CrossLaneLongitudinalExtension {
      get { return crossLaneLongitudinalExtension_; }
      set {
        crossLaneLongitudinalExtension_ = value;
      }
    }

    /// <summary>Field number for the "history_path_weight" field.</summary>
    public const int HistoryPathWeightFieldNumber = 14;
    private double historyPathWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HistoryPathWeight {
      get { return historyPathWeight_; }
      set {
        historyPathWeight_ = value;
      }
    }

    /// <summary>Field number for the "lane_change_mid_l" field.</summary>
    public const int LaneChangeMidLFieldNumber = 15;
    private double laneChangeMidL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneChangeMidL {
      get { return laneChangeMidL_; }
      set {
        laneChangeMidL_ = value;
      }
    }

    /// <summary>Field number for the "point_constraint_s_position" field.</summary>
    public const int PointConstraintSPositionFieldNumber = 16;
    private double pointConstraintSPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointConstraintSPosition {
      get { return pointConstraintSPosition_; }
      set {
        pointConstraintSPosition_ = value;
      }
    }

    /// <summary>Field number for the "lane_change_lateral_shift" field.</summary>
    public const int LaneChangeLateralShiftFieldNumber = 17;
    private double laneChangeLateralShift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneChangeLateralShift {
      get { return laneChangeLateralShift_; }
      set {
        laneChangeLateralShift_ = value;
      }
    }

    /// <summary>Field number for the "uturn_speed_limit" field.</summary>
    public const int UturnSpeedLimitFieldNumber = 18;
    private double uturnSpeedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UturnSpeedLimit {
      get { return uturnSpeedLimit_; }
      set {
        uturnSpeedLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QpSplinePathConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QpSplinePathConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SplineOrder != other.SplineOrder) return false;
      if (MaxSplineLength != other.MaxSplineLength) return false;
      if (MaxConstraintInterval != other.MaxConstraintInterval) return false;
      if (TimeResolution != other.TimeResolution) return false;
      if (RegularizationWeight != other.RegularizationWeight) return false;
      if (FirstSplineWeightFactor != other.FirstSplineWeightFactor) return false;
      if (DerivativeWeight != other.DerivativeWeight) return false;
      if (SecondDerivativeWeight != other.SecondDerivativeWeight) return false;
      if (ThirdDerivativeWeight != other.ThirdDerivativeWeight) return false;
      if (ReferenceLineWeight != other.ReferenceLineWeight) return false;
      if (NumOutput != other.NumOutput) return false;
      if (CrossLaneLateralExtension != other.CrossLaneLateralExtension) return false;
      if (CrossLaneLongitudinalExtension != other.CrossLaneLongitudinalExtension) return false;
      if (HistoryPathWeight != other.HistoryPathWeight) return false;
      if (LaneChangeMidL != other.LaneChangeMidL) return false;
      if (PointConstraintSPosition != other.PointConstraintSPosition) return false;
      if (LaneChangeLateralShift != other.LaneChangeLateralShift) return false;
      if (UturnSpeedLimit != other.UturnSpeedLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SplineOrder != 0) hash ^= SplineOrder.GetHashCode();
      if (MaxSplineLength != 0D) hash ^= MaxSplineLength.GetHashCode();
      if (MaxConstraintInterval != 0D) hash ^= MaxConstraintInterval.GetHashCode();
      if (TimeResolution != 0D) hash ^= TimeResolution.GetHashCode();
      if (RegularizationWeight != 0D) hash ^= RegularizationWeight.GetHashCode();
      if (FirstSplineWeightFactor != 0D) hash ^= FirstSplineWeightFactor.GetHashCode();
      if (DerivativeWeight != 0D) hash ^= DerivativeWeight.GetHashCode();
      if (SecondDerivativeWeight != 0D) hash ^= SecondDerivativeWeight.GetHashCode();
      if (ThirdDerivativeWeight != 0D) hash ^= ThirdDerivativeWeight.GetHashCode();
      if (ReferenceLineWeight != 0D) hash ^= ReferenceLineWeight.GetHashCode();
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (CrossLaneLateralExtension != 0D) hash ^= CrossLaneLateralExtension.GetHashCode();
      if (CrossLaneLongitudinalExtension != 0D) hash ^= CrossLaneLongitudinalExtension.GetHashCode();
      if (HistoryPathWeight != 0D) hash ^= HistoryPathWeight.GetHashCode();
      if (LaneChangeMidL != 0D) hash ^= LaneChangeMidL.GetHashCode();
      if (PointConstraintSPosition != 0D) hash ^= PointConstraintSPosition.GetHashCode();
      if (LaneChangeLateralShift != 0D) hash ^= LaneChangeLateralShift.GetHashCode();
      if (UturnSpeedLimit != 0D) hash ^= UturnSpeedLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SplineOrder != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SplineOrder);
      }
      if (MaxSplineLength != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MaxSplineLength);
      }
      if (MaxConstraintInterval != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxConstraintInterval);
      }
      if (TimeResolution != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TimeResolution);
      }
      if (RegularizationWeight != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RegularizationWeight);
      }
      if (FirstSplineWeightFactor != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(FirstSplineWeightFactor);
      }
      if (DerivativeWeight != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(DerivativeWeight);
      }
      if (SecondDerivativeWeight != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SecondDerivativeWeight);
      }
      if (ThirdDerivativeWeight != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ThirdDerivativeWeight);
      }
      if (ReferenceLineWeight != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ReferenceLineWeight);
      }
      if (NumOutput != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NumOutput);
      }
      if (CrossLaneLateralExtension != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(CrossLaneLateralExtension);
      }
      if (CrossLaneLongitudinalExtension != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(CrossLaneLongitudinalExtension);
      }
      if (HistoryPathWeight != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(HistoryPathWeight);
      }
      if (LaneChangeMidL != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(LaneChangeMidL);
      }
      if (PointConstraintSPosition != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(PointConstraintSPosition);
      }
      if (LaneChangeLateralShift != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(LaneChangeLateralShift);
      }
      if (UturnSpeedLimit != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(UturnSpeedLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SplineOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SplineOrder);
      }
      if (MaxSplineLength != 0D) {
        size += 1 + 8;
      }
      if (MaxConstraintInterval != 0D) {
        size += 1 + 8;
      }
      if (TimeResolution != 0D) {
        size += 1 + 8;
      }
      if (RegularizationWeight != 0D) {
        size += 1 + 8;
      }
      if (FirstSplineWeightFactor != 0D) {
        size += 1 + 8;
      }
      if (DerivativeWeight != 0D) {
        size += 1 + 8;
      }
      if (SecondDerivativeWeight != 0D) {
        size += 1 + 8;
      }
      if (ThirdDerivativeWeight != 0D) {
        size += 1 + 8;
      }
      if (ReferenceLineWeight != 0D) {
        size += 1 + 8;
      }
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (CrossLaneLateralExtension != 0D) {
        size += 1 + 8;
      }
      if (CrossLaneLongitudinalExtension != 0D) {
        size += 1 + 8;
      }
      if (HistoryPathWeight != 0D) {
        size += 1 + 8;
      }
      if (LaneChangeMidL != 0D) {
        size += 1 + 8;
      }
      if (PointConstraintSPosition != 0D) {
        size += 2 + 8;
      }
      if (LaneChangeLateralShift != 0D) {
        size += 2 + 8;
      }
      if (UturnSpeedLimit != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QpSplinePathConfig other) {
      if (other == null) {
        return;
      }
      if (other.SplineOrder != 0) {
        SplineOrder = other.SplineOrder;
      }
      if (other.MaxSplineLength != 0D) {
        MaxSplineLength = other.MaxSplineLength;
      }
      if (other.MaxConstraintInterval != 0D) {
        MaxConstraintInterval = other.MaxConstraintInterval;
      }
      if (other.TimeResolution != 0D) {
        TimeResolution = other.TimeResolution;
      }
      if (other.RegularizationWeight != 0D) {
        RegularizationWeight = other.RegularizationWeight;
      }
      if (other.FirstSplineWeightFactor != 0D) {
        FirstSplineWeightFactor = other.FirstSplineWeightFactor;
      }
      if (other.DerivativeWeight != 0D) {
        DerivativeWeight = other.DerivativeWeight;
      }
      if (other.SecondDerivativeWeight != 0D) {
        SecondDerivativeWeight = other.SecondDerivativeWeight;
      }
      if (other.ThirdDerivativeWeight != 0D) {
        ThirdDerivativeWeight = other.ThirdDerivativeWeight;
      }
      if (other.ReferenceLineWeight != 0D) {
        ReferenceLineWeight = other.ReferenceLineWeight;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.CrossLaneLateralExtension != 0D) {
        CrossLaneLateralExtension = other.CrossLaneLateralExtension;
      }
      if (other.CrossLaneLongitudinalExtension != 0D) {
        CrossLaneLongitudinalExtension = other.CrossLaneLongitudinalExtension;
      }
      if (other.HistoryPathWeight != 0D) {
        HistoryPathWeight = other.HistoryPathWeight;
      }
      if (other.LaneChangeMidL != 0D) {
        LaneChangeMidL = other.LaneChangeMidL;
      }
      if (other.PointConstraintSPosition != 0D) {
        PointConstraintSPosition = other.PointConstraintSPosition;
      }
      if (other.LaneChangeLateralShift != 0D) {
        LaneChangeLateralShift = other.LaneChangeLateralShift;
      }
      if (other.UturnSpeedLimit != 0D) {
        UturnSpeedLimit = other.UturnSpeedLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SplineOrder = input.ReadUInt32();
            break;
          }
          case 17: {
            MaxSplineLength = input.ReadDouble();
            break;
          }
          case 25: {
            MaxConstraintInterval = input.ReadDouble();
            break;
          }
          case 33: {
            TimeResolution = input.ReadDouble();
            break;
          }
          case 41: {
            RegularizationWeight = input.ReadDouble();
            break;
          }
          case 49: {
            FirstSplineWeightFactor = input.ReadDouble();
            break;
          }
          case 57: {
            DerivativeWeight = input.ReadDouble();
            break;
          }
          case 65: {
            SecondDerivativeWeight = input.ReadDouble();
            break;
          }
          case 73: {
            ThirdDerivativeWeight = input.ReadDouble();
            break;
          }
          case 81: {
            ReferenceLineWeight = input.ReadDouble();
            break;
          }
          case 88: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 97: {
            CrossLaneLateralExtension = input.ReadDouble();
            break;
          }
          case 105: {
            CrossLaneLongitudinalExtension = input.ReadDouble();
            break;
          }
          case 113: {
            HistoryPathWeight = input.ReadDouble();
            break;
          }
          case 121: {
            LaneChangeMidL = input.ReadDouble();
            break;
          }
          case 129: {
            PointConstraintSPosition = input.ReadDouble();
            break;
          }
          case 137: {
            LaneChangeLateralShift = input.ReadDouble();
            break;
          }
          case 145: {
            UturnSpeedLimit = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
