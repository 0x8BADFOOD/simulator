// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_structure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/lattice_structure.proto</summary>
  public static partial class LatticeStructureReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/lattice_structure.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LatticeStructureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5tb2R1bGVzL3BsYW5uaW5nL3Byb3RvL2xhdHRpY2Vfc3RydWN0dXJlLnBy",
            "b3RvEg9hcG9sbG8ucGxhbm5pbmciOgoNUGF0aFRpbWVQb2ludBIJCgF0GAEg",
            "ASgBEgkKAXMYAiABKAESEwoLb2JzdGFjbGVfaWQYBCABKAkiVQoLU2FtcGxl",
            "UG9pbnQSNwoPcGF0aF90aW1lX3BvaW50GAEgASgLMh4uYXBvbGxvLnBsYW5u",
            "aW5nLlBhdGhUaW1lUG9pbnQSDQoFcmVmX3YYAiABKAEiywIKEFBhdGhUaW1l",
            "T2JzdGFjbGUSEwoLb2JzdGFjbGVfaWQYASABKAkSMwoLYm90dG9tX2xlZnQY",
            "AiABKAsyHi5hcG9sbG8ucGxhbm5pbmcuUGF0aFRpbWVQb2ludBIyCgp1cHBl",
            "cl9sZWZ0GAMgASgLMh4uYXBvbGxvLnBsYW5uaW5nLlBhdGhUaW1lUG9pbnQS",
            "MwoLdXBwZXJfcmlnaHQYBCABKAsyHi5hcG9sbG8ucGxhbm5pbmcuUGF0aFRp",
            "bWVQb2ludBI0Cgxib3R0b21fcmlnaHQYBSABKAsyHi5hcG9sbG8ucGxhbm5p",
            "bmcuUGF0aFRpbWVQb2ludBISCgp0aW1lX2xvd2VyGAYgASgBEhIKCnRpbWVf",
            "dXBwZXIYByABKAESEgoKcGF0aF9sb3dlchgIIAEoARISCgpwYXRoX3VwcGVy",
            "GAkgASgBImEKCVN0b3BQb2ludBIJCgFzGAEgASgBEi0KBHR5cGUYAiABKA4y",
            "Hy5hcG9sbG8ucGxhbm5pbmcuU3RvcFBvaW50LlR5cGUiGgoEVHlwZRIICgRI",
            "QVJEEAASCAoEU09GVBABIlYKDlBsYW5uaW5nVGFyZ2V0Ei4KCnN0b3BfcG9p",
            "bnQYASABKAsyGi5hcG9sbG8ucGxhbm5pbmcuU3RvcFBvaW50EhQKDGNydWlz",
            "ZV9zcGVlZBgCIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PathTimePoint), global::Apollo.Planning.PathTimePoint.Parser, new[]{ "T", "S", "ObstacleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.SamplePoint), global::Apollo.Planning.SamplePoint.Parser, new[]{ "PathTimePoint", "RefV" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PathTimeObstacle), global::Apollo.Planning.PathTimeObstacle.Parser, new[]{ "ObstacleId", "BottomLeft", "UpperLeft", "UpperRight", "BottomRight", "TimeLower", "TimeUpper", "PathLower", "PathUpper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.StopPoint), global::Apollo.Planning.StopPoint.Parser, new[]{ "S", "Type" }, null, new[]{ typeof(global::Apollo.Planning.StopPoint.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PlanningTarget), global::Apollo.Planning.PlanningTarget.Parser, new[]{ "StopPoint", "CruiseSpeed" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PathTimePoint : pb::IMessage<PathTimePoint> {
    private static readonly pb::MessageParser<PathTimePoint> _parser = new pb::MessageParser<PathTimePoint>(() => new PathTimePoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathTimePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.LatticeStructureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathTimePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathTimePoint(PathTimePoint other) : this() {
      t_ = other.t_;
      s_ = other.s_;
      obstacleId_ = other.obstacleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathTimePoint Clone() {
      return new PathTimePoint(this);
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 1;
    private double t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double T {
      get { return t_; }
      set {
        t_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 2;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_id" field.</summary>
    public const int ObstacleIdFieldNumber = 4;
    private string obstacleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstacleId {
      get { return obstacleId_; }
      set {
        obstacleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathTimePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathTimePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (T != other.T) return false;
      if (S != other.S) return false;
      if (ObstacleId != other.ObstacleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (T != 0D) hash ^= T.GetHashCode();
      if (S != 0D) hash ^= S.GetHashCode();
      if (ObstacleId.Length != 0) hash ^= ObstacleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (T != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(T);
      }
      if (S != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(S);
      }
      if (ObstacleId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ObstacleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (T != 0D) {
        size += 1 + 8;
      }
      if (S != 0D) {
        size += 1 + 8;
      }
      if (ObstacleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstacleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathTimePoint other) {
      if (other == null) {
        return;
      }
      if (other.T != 0D) {
        T = other.T;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.ObstacleId.Length != 0) {
        ObstacleId = other.ObstacleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            T = input.ReadDouble();
            break;
          }
          case 17: {
            S = input.ReadDouble();
            break;
          }
          case 34: {
            ObstacleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SamplePoint : pb::IMessage<SamplePoint> {
    private static readonly pb::MessageParser<SamplePoint> _parser = new pb::MessageParser<SamplePoint>(() => new SamplePoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SamplePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.LatticeStructureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamplePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamplePoint(SamplePoint other) : this() {
      PathTimePoint = other.pathTimePoint_ != null ? other.PathTimePoint.Clone() : null;
      refV_ = other.refV_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamplePoint Clone() {
      return new SamplePoint(this);
    }

    /// <summary>Field number for the "path_time_point" field.</summary>
    public const int PathTimePointFieldNumber = 1;
    private global::Apollo.Planning.PathTimePoint pathTimePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PathTimePoint PathTimePoint {
      get { return pathTimePoint_; }
      set {
        pathTimePoint_ = value;
      }
    }

    /// <summary>Field number for the "ref_v" field.</summary>
    public const int RefVFieldNumber = 2;
    private double refV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefV {
      get { return refV_; }
      set {
        refV_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SamplePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SamplePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PathTimePoint, other.PathTimePoint)) return false;
      if (RefV != other.RefV) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pathTimePoint_ != null) hash ^= PathTimePoint.GetHashCode();
      if (RefV != 0D) hash ^= RefV.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pathTimePoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PathTimePoint);
      }
      if (RefV != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RefV);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pathTimePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathTimePoint);
      }
      if (RefV != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SamplePoint other) {
      if (other == null) {
        return;
      }
      if (other.pathTimePoint_ != null) {
        if (pathTimePoint_ == null) {
          pathTimePoint_ = new global::Apollo.Planning.PathTimePoint();
        }
        PathTimePoint.MergeFrom(other.PathTimePoint);
      }
      if (other.RefV != 0D) {
        RefV = other.RefV;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pathTimePoint_ == null) {
              pathTimePoint_ = new global::Apollo.Planning.PathTimePoint();
            }
            input.ReadMessage(pathTimePoint_);
            break;
          }
          case 17: {
            RefV = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PathTimeObstacle : pb::IMessage<PathTimeObstacle> {
    private static readonly pb::MessageParser<PathTimeObstacle> _parser = new pb::MessageParser<PathTimeObstacle>(() => new PathTimeObstacle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathTimeObstacle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.LatticeStructureReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathTimeObstacle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathTimeObstacle(PathTimeObstacle other) : this() {
      obstacleId_ = other.obstacleId_;
      BottomLeft = other.bottomLeft_ != null ? other.BottomLeft.Clone() : null;
      UpperLeft = other.upperLeft_ != null ? other.UpperLeft.Clone() : null;
      UpperRight = other.upperRight_ != null ? other.UpperRight.Clone() : null;
      BottomRight = other.bottomRight_ != null ? other.BottomRight.Clone() : null;
      timeLower_ = other.timeLower_;
      timeUpper_ = other.timeUpper_;
      pathLower_ = other.pathLower_;
      pathUpper_ = other.pathUpper_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathTimeObstacle Clone() {
      return new PathTimeObstacle(this);
    }

    /// <summary>Field number for the "obstacle_id" field.</summary>
    public const int ObstacleIdFieldNumber = 1;
    private string obstacleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstacleId {
      get { return obstacleId_; }
      set {
        obstacleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bottom_left" field.</summary>
    public const int BottomLeftFieldNumber = 2;
    private global::Apollo.Planning.PathTimePoint bottomLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PathTimePoint BottomLeft {
      get { return bottomLeft_; }
      set {
        bottomLeft_ = value;
      }
    }

    /// <summary>Field number for the "upper_left" field.</summary>
    public const int UpperLeftFieldNumber = 3;
    private global::Apollo.Planning.PathTimePoint upperLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PathTimePoint UpperLeft {
      get { return upperLeft_; }
      set {
        upperLeft_ = value;
      }
    }

    /// <summary>Field number for the "upper_right" field.</summary>
    public const int UpperRightFieldNumber = 4;
    private global::Apollo.Planning.PathTimePoint upperRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PathTimePoint UpperRight {
      get { return upperRight_; }
      set {
        upperRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_right" field.</summary>
    public const int BottomRightFieldNumber = 5;
    private global::Apollo.Planning.PathTimePoint bottomRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PathTimePoint BottomRight {
      get { return bottomRight_; }
      set {
        bottomRight_ = value;
      }
    }

    /// <summary>Field number for the "time_lower" field.</summary>
    public const int TimeLowerFieldNumber = 6;
    private double timeLower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeLower {
      get { return timeLower_; }
      set {
        timeLower_ = value;
      }
    }

    /// <summary>Field number for the "time_upper" field.</summary>
    public const int TimeUpperFieldNumber = 7;
    private double timeUpper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeUpper {
      get { return timeUpper_; }
      set {
        timeUpper_ = value;
      }
    }

    /// <summary>Field number for the "path_lower" field.</summary>
    public const int PathLowerFieldNumber = 8;
    private double pathLower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathLower {
      get { return pathLower_; }
      set {
        pathLower_ = value;
      }
    }

    /// <summary>Field number for the "path_upper" field.</summary>
    public const int PathUpperFieldNumber = 9;
    private double pathUpper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathUpper {
      get { return pathUpper_; }
      set {
        pathUpper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathTimeObstacle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathTimeObstacle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObstacleId != other.ObstacleId) return false;
      if (!object.Equals(BottomLeft, other.BottomLeft)) return false;
      if (!object.Equals(UpperLeft, other.UpperLeft)) return false;
      if (!object.Equals(UpperRight, other.UpperRight)) return false;
      if (!object.Equals(BottomRight, other.BottomRight)) return false;
      if (TimeLower != other.TimeLower) return false;
      if (TimeUpper != other.TimeUpper) return false;
      if (PathLower != other.PathLower) return false;
      if (PathUpper != other.PathUpper) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObstacleId.Length != 0) hash ^= ObstacleId.GetHashCode();
      if (bottomLeft_ != null) hash ^= BottomLeft.GetHashCode();
      if (upperLeft_ != null) hash ^= UpperLeft.GetHashCode();
      if (upperRight_ != null) hash ^= UpperRight.GetHashCode();
      if (bottomRight_ != null) hash ^= BottomRight.GetHashCode();
      if (TimeLower != 0D) hash ^= TimeLower.GetHashCode();
      if (TimeUpper != 0D) hash ^= TimeUpper.GetHashCode();
      if (PathLower != 0D) hash ^= PathLower.GetHashCode();
      if (PathUpper != 0D) hash ^= PathUpper.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObstacleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObstacleId);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BottomLeft);
      }
      if (upperLeft_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpperLeft);
      }
      if (upperRight_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpperRight);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BottomRight);
      }
      if (TimeLower != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TimeLower);
      }
      if (TimeUpper != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TimeUpper);
      }
      if (PathLower != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PathLower);
      }
      if (PathUpper != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PathUpper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObstacleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstacleId);
      }
      if (bottomLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomLeft);
      }
      if (upperLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpperLeft);
      }
      if (upperRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpperRight);
      }
      if (bottomRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRight);
      }
      if (TimeLower != 0D) {
        size += 1 + 8;
      }
      if (TimeUpper != 0D) {
        size += 1 + 8;
      }
      if (PathLower != 0D) {
        size += 1 + 8;
      }
      if (PathUpper != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathTimeObstacle other) {
      if (other == null) {
        return;
      }
      if (other.ObstacleId.Length != 0) {
        ObstacleId = other.ObstacleId;
      }
      if (other.bottomLeft_ != null) {
        if (bottomLeft_ == null) {
          bottomLeft_ = new global::Apollo.Planning.PathTimePoint();
        }
        BottomLeft.MergeFrom(other.BottomLeft);
      }
      if (other.upperLeft_ != null) {
        if (upperLeft_ == null) {
          upperLeft_ = new global::Apollo.Planning.PathTimePoint();
        }
        UpperLeft.MergeFrom(other.UpperLeft);
      }
      if (other.upperRight_ != null) {
        if (upperRight_ == null) {
          upperRight_ = new global::Apollo.Planning.PathTimePoint();
        }
        UpperRight.MergeFrom(other.UpperRight);
      }
      if (other.bottomRight_ != null) {
        if (bottomRight_ == null) {
          bottomRight_ = new global::Apollo.Planning.PathTimePoint();
        }
        BottomRight.MergeFrom(other.BottomRight);
      }
      if (other.TimeLower != 0D) {
        TimeLower = other.TimeLower;
      }
      if (other.TimeUpper != 0D) {
        TimeUpper = other.TimeUpper;
      }
      if (other.PathLower != 0D) {
        PathLower = other.PathLower;
      }
      if (other.PathUpper != 0D) {
        PathUpper = other.PathUpper;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ObstacleId = input.ReadString();
            break;
          }
          case 18: {
            if (bottomLeft_ == null) {
              bottomLeft_ = new global::Apollo.Planning.PathTimePoint();
            }
            input.ReadMessage(bottomLeft_);
            break;
          }
          case 26: {
            if (upperLeft_ == null) {
              upperLeft_ = new global::Apollo.Planning.PathTimePoint();
            }
            input.ReadMessage(upperLeft_);
            break;
          }
          case 34: {
            if (upperRight_ == null) {
              upperRight_ = new global::Apollo.Planning.PathTimePoint();
            }
            input.ReadMessage(upperRight_);
            break;
          }
          case 42: {
            if (bottomRight_ == null) {
              bottomRight_ = new global::Apollo.Planning.PathTimePoint();
            }
            input.ReadMessage(bottomRight_);
            break;
          }
          case 49: {
            TimeLower = input.ReadDouble();
            break;
          }
          case 57: {
            TimeUpper = input.ReadDouble();
            break;
          }
          case 65: {
            PathLower = input.ReadDouble();
            break;
          }
          case 73: {
            PathUpper = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopPoint : pb::IMessage<StopPoint> {
    private static readonly pb::MessageParser<StopPoint> _parser = new pb::MessageParser<StopPoint>(() => new StopPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.LatticeStructureReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoint(StopPoint other) : this() {
      s_ = other.s_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoint Clone() {
      return new StopPoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Apollo.Planning.StopPoint.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StopPoint.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (S != 0D) hash ^= S.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(S);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (S != 0D) {
        size += 1 + 8;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopPoint other) {
      if (other == null) {
        return;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            S = input.ReadDouble();
            break;
          }
          case 16: {
            type_ = (global::Apollo.Planning.StopPoint.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StopPoint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("HARD")] Hard = 0,
        [pbr::OriginalName("SOFT")] Soft = 1,
      }

    }
    #endregion

  }

  public sealed partial class PlanningTarget : pb::IMessage<PlanningTarget> {
    private static readonly pb::MessageParser<PlanningTarget> _parser = new pb::MessageParser<PlanningTarget>(() => new PlanningTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanningTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.LatticeStructureReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningTarget(PlanningTarget other) : this() {
      StopPoint = other.stopPoint_ != null ? other.StopPoint.Clone() : null;
      cruiseSpeed_ = other.cruiseSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningTarget Clone() {
      return new PlanningTarget(this);
    }

    /// <summary>Field number for the "stop_point" field.</summary>
    public const int StopPointFieldNumber = 1;
    private global::Apollo.Planning.StopPoint stopPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StopPoint StopPoint {
      get { return stopPoint_; }
      set {
        stopPoint_ = value;
      }
    }

    /// <summary>Field number for the "cruise_speed" field.</summary>
    public const int CruiseSpeedFieldNumber = 2;
    private double cruiseSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CruiseSpeed {
      get { return cruiseSpeed_; }
      set {
        cruiseSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanningTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanningTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StopPoint, other.StopPoint)) return false;
      if (CruiseSpeed != other.CruiseSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stopPoint_ != null) hash ^= StopPoint.GetHashCode();
      if (CruiseSpeed != 0D) hash ^= CruiseSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stopPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StopPoint);
      }
      if (CruiseSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CruiseSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stopPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopPoint);
      }
      if (CruiseSpeed != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanningTarget other) {
      if (other == null) {
        return;
      }
      if (other.stopPoint_ != null) {
        if (stopPoint_ == null) {
          stopPoint_ = new global::Apollo.Planning.StopPoint();
        }
        StopPoint.MergeFrom(other.StopPoint);
      }
      if (other.CruiseSpeed != 0D) {
        CruiseSpeed = other.CruiseSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stopPoint_ == null) {
              stopPoint_ = new global::Apollo.Planning.StopPoint();
            }
            input.ReadMessage(stopPoint_);
            break;
          }
          case 17: {
            CruiseSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
