// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/waypoint_sampler_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/waypoint_sampler_config.proto</summary>
  public static partial class WaypointSamplerConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/waypoint_sampler_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WaypointSamplerConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3dheXBvaW50X3NhbXBsZXJfY29u",
            "ZmlnLnByb3RvEg9hcG9sbG8ucGxhbm5pbmci8AEKFVdheXBvaW50U2FtcGxl",
            "ckNvbmZpZxIkChxzYW1wbGVfcG9pbnRzX251bV9lYWNoX2xldmVsGAEgASgN",
            "EhcKD3N0ZXBfbGVuZ3RoX21heBgCIAEoARIXCg9zdGVwX2xlbmd0aF9taW4Y",
            "AyABKAESHQoVbGF0ZXJhbF9zYW1wbGVfb2Zmc2V0GAQgASgBEhwKFGxhdGVy",
            "YWxfYWRqdXN0X2NvZWZmGAUgASgBEhkKEXNpZGVwYXNzX2Rpc3RhbmNlGAYg",
            "ASgBEicKH25hdmlnYXRvcl9zYW1wbGVfbnVtX2VhY2hfbGV2ZWwYByABKA1i",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.WaypointSamplerConfig), global::Apollo.Planning.WaypointSamplerConfig.Parser, new[]{ "SamplePointsNumEachLevel", "StepLengthMax", "StepLengthMin", "LateralSampleOffset", "LateralAdjustCoeff", "SidepassDistance", "NavigatorSampleNumEachLevel" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WaypointSamplerConfig : pb::IMessage<WaypointSamplerConfig> {
    private static readonly pb::MessageParser<WaypointSamplerConfig> _parser = new pb::MessageParser<WaypointSamplerConfig>(() => new WaypointSamplerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaypointSamplerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.WaypointSamplerConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaypointSamplerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaypointSamplerConfig(WaypointSamplerConfig other) : this() {
      samplePointsNumEachLevel_ = other.samplePointsNumEachLevel_;
      stepLengthMax_ = other.stepLengthMax_;
      stepLengthMin_ = other.stepLengthMin_;
      lateralSampleOffset_ = other.lateralSampleOffset_;
      lateralAdjustCoeff_ = other.lateralAdjustCoeff_;
      sidepassDistance_ = other.sidepassDistance_;
      navigatorSampleNumEachLevel_ = other.navigatorSampleNumEachLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaypointSamplerConfig Clone() {
      return new WaypointSamplerConfig(this);
    }

    /// <summary>Field number for the "sample_points_num_each_level" field.</summary>
    public const int SamplePointsNumEachLevelFieldNumber = 1;
    private uint samplePointsNumEachLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SamplePointsNumEachLevel {
      get { return samplePointsNumEachLevel_; }
      set {
        samplePointsNumEachLevel_ = value;
      }
    }

    /// <summary>Field number for the "step_length_max" field.</summary>
    public const int StepLengthMaxFieldNumber = 2;
    private double stepLengthMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StepLengthMax {
      get { return stepLengthMax_; }
      set {
        stepLengthMax_ = value;
      }
    }

    /// <summary>Field number for the "step_length_min" field.</summary>
    public const int StepLengthMinFieldNumber = 3;
    private double stepLengthMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StepLengthMin {
      get { return stepLengthMin_; }
      set {
        stepLengthMin_ = value;
      }
    }

    /// <summary>Field number for the "lateral_sample_offset" field.</summary>
    public const int LateralSampleOffsetFieldNumber = 4;
    private double lateralSampleOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralSampleOffset {
      get { return lateralSampleOffset_; }
      set {
        lateralSampleOffset_ = value;
      }
    }

    /// <summary>Field number for the "lateral_adjust_coeff" field.</summary>
    public const int LateralAdjustCoeffFieldNumber = 5;
    private double lateralAdjustCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralAdjustCoeff {
      get { return lateralAdjustCoeff_; }
      set {
        lateralAdjustCoeff_ = value;
      }
    }

    /// <summary>Field number for the "sidepass_distance" field.</summary>
    public const int SidepassDistanceFieldNumber = 6;
    private double sidepassDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SidepassDistance {
      get { return sidepassDistance_; }
      set {
        sidepassDistance_ = value;
      }
    }

    /// <summary>Field number for the "navigator_sample_num_each_level" field.</summary>
    public const int NavigatorSampleNumEachLevelFieldNumber = 7;
    private uint navigatorSampleNumEachLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NavigatorSampleNumEachLevel {
      get { return navigatorSampleNumEachLevel_; }
      set {
        navigatorSampleNumEachLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaypointSamplerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaypointSamplerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SamplePointsNumEachLevel != other.SamplePointsNumEachLevel) return false;
      if (StepLengthMax != other.StepLengthMax) return false;
      if (StepLengthMin != other.StepLengthMin) return false;
      if (LateralSampleOffset != other.LateralSampleOffset) return false;
      if (LateralAdjustCoeff != other.LateralAdjustCoeff) return false;
      if (SidepassDistance != other.SidepassDistance) return false;
      if (NavigatorSampleNumEachLevel != other.NavigatorSampleNumEachLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SamplePointsNumEachLevel != 0) hash ^= SamplePointsNumEachLevel.GetHashCode();
      if (StepLengthMax != 0D) hash ^= StepLengthMax.GetHashCode();
      if (StepLengthMin != 0D) hash ^= StepLengthMin.GetHashCode();
      if (LateralSampleOffset != 0D) hash ^= LateralSampleOffset.GetHashCode();
      if (LateralAdjustCoeff != 0D) hash ^= LateralAdjustCoeff.GetHashCode();
      if (SidepassDistance != 0D) hash ^= SidepassDistance.GetHashCode();
      if (NavigatorSampleNumEachLevel != 0) hash ^= NavigatorSampleNumEachLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SamplePointsNumEachLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SamplePointsNumEachLevel);
      }
      if (StepLengthMax != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StepLengthMax);
      }
      if (StepLengthMin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(StepLengthMin);
      }
      if (LateralSampleOffset != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LateralSampleOffset);
      }
      if (LateralAdjustCoeff != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LateralAdjustCoeff);
      }
      if (SidepassDistance != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SidepassDistance);
      }
      if (NavigatorSampleNumEachLevel != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NavigatorSampleNumEachLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SamplePointsNumEachLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SamplePointsNumEachLevel);
      }
      if (StepLengthMax != 0D) {
        size += 1 + 8;
      }
      if (StepLengthMin != 0D) {
        size += 1 + 8;
      }
      if (LateralSampleOffset != 0D) {
        size += 1 + 8;
      }
      if (LateralAdjustCoeff != 0D) {
        size += 1 + 8;
      }
      if (SidepassDistance != 0D) {
        size += 1 + 8;
      }
      if (NavigatorSampleNumEachLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NavigatorSampleNumEachLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaypointSamplerConfig other) {
      if (other == null) {
        return;
      }
      if (other.SamplePointsNumEachLevel != 0) {
        SamplePointsNumEachLevel = other.SamplePointsNumEachLevel;
      }
      if (other.StepLengthMax != 0D) {
        StepLengthMax = other.StepLengthMax;
      }
      if (other.StepLengthMin != 0D) {
        StepLengthMin = other.StepLengthMin;
      }
      if (other.LateralSampleOffset != 0D) {
        LateralSampleOffset = other.LateralSampleOffset;
      }
      if (other.LateralAdjustCoeff != 0D) {
        LateralAdjustCoeff = other.LateralAdjustCoeff;
      }
      if (other.SidepassDistance != 0D) {
        SidepassDistance = other.SidepassDistance;
      }
      if (other.NavigatorSampleNumEachLevel != 0) {
        NavigatorSampleNumEachLevel = other.NavigatorSampleNumEachLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SamplePointsNumEachLevel = input.ReadUInt32();
            break;
          }
          case 17: {
            StepLengthMax = input.ReadDouble();
            break;
          }
          case 25: {
            StepLengthMin = input.ReadDouble();
            break;
          }
          case 33: {
            LateralSampleOffset = input.ReadDouble();
            break;
          }
          case 41: {
            LateralAdjustCoeff = input.ReadDouble();
            break;
          }
          case 49: {
            SidepassDistance = input.ReadDouble();
            break;
          }
          case 56: {
            NavigatorSampleNumEachLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
