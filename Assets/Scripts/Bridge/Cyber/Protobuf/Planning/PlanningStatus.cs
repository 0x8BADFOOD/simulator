// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_status.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/planning_status.proto</summary>
  public static partial class PlanningStatusReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/planning_status.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlanningStatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BsYW5uaW5nX3N0YXR1cy5wcm90",
            "bxIPYXBvbGxvLnBsYW5uaW5nGiNtb2R1bGVzL3JvdXRpbmcvcHJvdG8vcm91",
            "dGluZy5wcm90bxolbW9kdWxlcy9wbGFubmluZy9wcm90by9kZWNpc2lvbi5w",
            "cm90bxombW9kdWxlcy9jb21tb24vcHJvdG8vZHJpdmVfc3RhdGUucHJvdG8a",
            "I21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21ldHJ5LnByb3RvItEBChBDaGFu",
            "Z2VMYW5lU3RhdHVzEjgKBnN0YXR1cxgBIAEoDjIoLmFwb2xsby5wbGFubmlu",
            "Zy5DaGFuZ2VMYW5lU3RhdHVzLlN0YXR1cxIPCgdwYXRoX2lkGAIgASgJEhEK",
            "CXRpbWVzdGFtcBgDIAEoASJfCgZTdGF0dXMSEAoMU1RBVFVTX0RVTU1ZEAAS",
            "EgoOSU5fQ0hBTkdFX0xBTkUQARIWChJDSEFOR0VfTEFORV9GQUlMRUQQAhIX",
            "ChNDSEFOR0VfTEFORV9TVUNDRVNTEAMiQAoIU3RvcFRpbWUSEwoLb2JzdGFj",
            "bGVfaWQYASABKAkSHwoXb2JzdGFjbGVfc3RvcF90aW1lc3RhbXAYAiABKAEi",
            "cQoPQ3Jvc3N3YWxrU3RhdHVzEhQKDGNyb3Nzd2Fsa19pZBgBIAEoCRIsCglz",
            "dG9wX3RpbWUYAiADKAsyGS5hcG9sbG8ucGxhbm5pbmcuU3RvcFRpbWUSGgoS",
            "ZmluaXNoZWRfY3Jvc3N3YWxrGAMgAygJItoDCg5QdWxsT3ZlclN0YXR1cxIU",
            "Cgxpbl9wdWxsX292ZXIYASABKAgSNgoGc3RhdHVzGAIgASgOMiYuYXBvbGxv",
            "LnBsYW5uaW5nLlB1bGxPdmVyU3RhdHVzLlN0YXR1cxIyChFpbmxhbmVfZGVz",
            "dF9wb2ludBgDIAEoCzIXLmFwb2xsby5jb21tb24uUG9pbnRFTlUSLAoLc3Rh",
            "cnRfcG9pbnQYBCABKAsyFy5hcG9sbG8uY29tbW9uLlBvaW50RU5VEisKCnN0",
            "b3BfcG9pbnQYBSABKAsyFy5hcG9sbG8uY29tbW9uLlBvaW50RU5VEhoKEnN0",
            "b3BfcG9pbnRfaGVhZGluZxgGIAEoARI2CgZyZWFzb24YByABKA4yJi5hcG9s",
            "bG8ucGxhbm5pbmcuUHVsbE92ZXJTdGF0dXMuUmVhc29uEhcKD3N0YXR1c19z",
            "ZXRfdGltZRgIIAEoASIrCgZSZWFzb24SEAoMUkVBU09OX0RVTU1ZEAASDwoL",
            "REVTVElOQVRJT04QASJRCgZTdGF0dXMSEAoMU1RBVFVTX0RVTU1ZEAASCwoH",
            "VU5LTk9XThABEhAKDElOX09QRVJBVElPThACEggKBERPTkUQAxIMCghESVNB",
            "QkxFRBAEIn8KD1Jlcm91dGluZ1N0YXR1cxIbChNsYXN0X3Jlcm91dGluZ190",
            "aW1lGAEgASgBEhYKDm5lZWRfcmVyb3V0aW5nGAIgASgIEjcKD3JvdXRpbmdf",
            "cmVxdWVzdBgDIAEoCzIeLmFwb2xsby5yb3V0aW5nLlJvdXRpbmdSZXF1ZXN0",
            "IoYBChBSaWdodE9mV2F5U3RhdHVzEkEKCGp1bmN0aW9uGAEgAygLMi8uYXBv",
            "bGxvLnBsYW5uaW5nLlJpZ2h0T2ZXYXlTdGF0dXMuSnVuY3Rpb25FbnRyeRov",
            "Cg1KdW5jdGlvbkVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCDoC",
            "OAEi7gEKDlNpZGVQYXNzU3RhdHVzEjYKBnN0YXR1cxgBIAEoDjImLmFwb2xs",
            "by5wbGFubmluZy5TaWRlUGFzc1N0YXR1cy5TdGF0dXMSFwoPd2FpdF9zdGFy",
            "dF90aW1lGAIgASgBEhgKEHBhc3Nfb2JzdGFjbGVfaWQYAyABKAkSNwoJcGFz",
            "c19zaWRlGAQgASgOMiQuYXBvbGxvLnBsYW5uaW5nLk9iamVjdFNpZGVQYXNz",
            "LlR5cGUiOAoGU3RhdHVzEgsKB1VOS05PV04QABIJCgVEUklWRRABEggKBFdB",
            "SVQQAhIMCghTSURFUEFTUxADItUCCg5TdG9wU2lnblN0YXR1cxIUCgxzdG9w",
            "X3NpZ25faWQYASABKAkSNgoGc3RhdHVzGAIgASgOMiYuYXBvbGxvLnBsYW5u",
            "aW5nLlN0b3BTaWduU3RhdHVzLlN0YXR1cxIXCg9zdG9wX3N0YXJ0X3RpbWUY",
            "AyABKAESTgoTbGFuZV93YXRjaF92ZWhpY2xlcxgEIAMoCzIxLmFwb2xsby5w",
            "bGFubmluZy5TdG9wU2lnblN0YXR1cy5MYW5lV2F0Y2hWZWhpY2xlcxo8ChFM",
            "YW5lV2F0Y2hWZWhpY2xlcxIPCgdsYW5lX2lkGAEgASgJEhYKDndhdGNoX3Zl",
            "aGljbGVzGAIgAygJIk4KBlN0YXR1cxILCgdVTktOT1dOEAASCQoFRFJJVkUQ",
            "ARIICgRTVE9QEAISCAoEV0FJVBADEgkKBUNSRUVQEAQSDQoJU1RPUF9ET05F",
            "EAUiMwoRRGVzdGluYXRpb25TdGF0dXMSHgoWaGFzX3Bhc3NlZF9kZXN0aW5h",
            "dGlvbhgBIAEoCCL0AwoOUGxhbm5pbmdTdGF0dXMSNgoLY2hhbmdlX2xhbmUY",
            "ASABKAsyIS5hcG9sbG8ucGxhbm5pbmcuQ2hhbmdlTGFuZVN0YXR1cxIzCglj",
            "cm9zc3dhbGsYAiABKAsyIC5hcG9sbG8ucGxhbm5pbmcuQ3Jvc3N3YWxrU3Rh",
            "dHVzEjIKDWVuZ2FnZV9hZHZpY2UYAyABKAsyGy5hcG9sbG8uY29tbW9uLkVu",
            "Z2FnZUFkdmljZRIzCglyZXJvdXRpbmcYBCABKAsyIC5hcG9sbG8ucGxhbm5p",
            "bmcuUmVyb3V0aW5nU3RhdHVzEjcKDHJpZ2h0X29mX3dheRgFIAEoCzIhLmFw",
            "b2xsby5wbGFubmluZy5SaWdodE9mV2F5U3RhdHVzEjIKCXNpZGVfcGFzcxgG",
            "IAEoCzIfLmFwb2xsby5wbGFubmluZy5TaWRlUGFzc1N0YXR1cxIyCglzdG9w",
            "X3NpZ24YByABKAsyHy5hcG9sbG8ucGxhbm5pbmcuU3RvcFNpZ25TdGF0dXMS",
            "NwoLZGVzdGluYXRpb24YCCABKAsyIi5hcG9sbG8ucGxhbm5pbmcuRGVzdGlu",
            "YXRpb25TdGF0dXMSMgoJcHVsbF9vdmVyGAkgASgLMh8uYXBvbGxvLnBsYW5u",
            "aW5nLlB1bGxPdmVyU3RhdHVzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Routing.RoutingReflection.Descriptor, global::Apollo.Planning.DecisionReflection.Descriptor, global::Apollo.Common.DriveStateReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ChangeLaneStatus), global::Apollo.Planning.ChangeLaneStatus.Parser, new[]{ "Status", "PathId", "Timestamp" }, null, new[]{ typeof(global::Apollo.Planning.ChangeLaneStatus.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.StopTime), global::Apollo.Planning.StopTime.Parser, new[]{ "ObstacleId", "ObstacleStopTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.CrosswalkStatus), global::Apollo.Planning.CrosswalkStatus.Parser, new[]{ "CrosswalkId", "StopTime", "FinishedCrosswalk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PullOverStatus), global::Apollo.Planning.PullOverStatus.Parser, new[]{ "InPullOver", "Status", "InlaneDestPoint", "StartPoint", "StopPoint", "StopPointHeading", "Reason", "StatusSetTime" }, null, new[]{ typeof(global::Apollo.Planning.PullOverStatus.Types.Reason), typeof(global::Apollo.Planning.PullOverStatus.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ReroutingStatus), global::Apollo.Planning.ReroutingStatus.Parser, new[]{ "LastReroutingTime", "NeedRerouting", "RoutingRequest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.RightOfWayStatus), global::Apollo.Planning.RightOfWayStatus.Parser, new[]{ "Junction" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.SidePassStatus), global::Apollo.Planning.SidePassStatus.Parser, new[]{ "Status", "WaitStartTime", "PassObstacleId", "PassSide" }, null, new[]{ typeof(global::Apollo.Planning.SidePassStatus.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.StopSignStatus), global::Apollo.Planning.StopSignStatus.Parser, new[]{ "StopSignId", "Status", "StopStartTime", "LaneWatchVehicles" }, null, new[]{ typeof(global::Apollo.Planning.StopSignStatus.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.StopSignStatus.Types.LaneWatchVehicles), global::Apollo.Planning.StopSignStatus.Types.LaneWatchVehicles.Parser, new[]{ "LaneId", "WatchVehicles" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.DestinationStatus), global::Apollo.Planning.DestinationStatus.Parser, new[]{ "HasPassedDestination" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PlanningStatus), global::Apollo.Planning.PlanningStatus.Parser, new[]{ "ChangeLane", "Crosswalk", "EngageAdvice", "Rerouting", "RightOfWay", "SidePass", "StopSign", "Destination", "PullOver" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChangeLaneStatus : pb::IMessage<ChangeLaneStatus> {
    private static readonly pb::MessageParser<ChangeLaneStatus> _parser = new pb::MessageParser<ChangeLaneStatus>(() => new ChangeLaneStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeLaneStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLaneStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLaneStatus(ChangeLaneStatus other) : this() {
      status_ = other.status_;
      pathId_ = other.pathId_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLaneStatus Clone() {
      return new ChangeLaneStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Apollo.Planning.ChangeLaneStatus.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ChangeLaneStatus.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "path_id" field.</summary>
    public const int PathIdFieldNumber = 2;
    private string pathId_ = "";
    /// <summary>
    /// the id of the route segment that the vehicle is driving on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathId {
      get { return pathId_; }
      set {
        pathId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private double timestamp_;
    /// <summary>
    /// the time stamp when the state started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeLaneStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeLaneStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (PathId != other.PathId) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (PathId.Length != 0) hash ^= PathId.GetHashCode();
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (PathId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PathId);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (PathId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathId);
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeLaneStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.PathId.Length != 0) {
        PathId = other.PathId;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Apollo.Planning.ChangeLaneStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            PathId = input.ReadString();
            break;
          }
          case 25: {
            Timestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChangeLaneStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_DUMMY")] Dummy = 0,
        /// <summary>
        /// during change lane state
        /// </summary>
        [pbr::OriginalName("IN_CHANGE_LANE")] InChangeLane = 1,
        /// <summary>
        /// change lane failed
        /// </summary>
        [pbr::OriginalName("CHANGE_LANE_FAILED")] ChangeLaneFailed = 2,
        /// <summary>
        /// change lane failed
        /// </summary>
        [pbr::OriginalName("CHANGE_LANE_SUCCESS")] ChangeLaneSuccess = 3,
      }

    }
    #endregion

  }

  public sealed partial class StopTime : pb::IMessage<StopTime> {
    private static readonly pb::MessageParser<StopTime> _parser = new pb::MessageParser<StopTime>(() => new StopTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopTime(StopTime other) : this() {
      obstacleId_ = other.obstacleId_;
      obstacleStopTimestamp_ = other.obstacleStopTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopTime Clone() {
      return new StopTime(this);
    }

    /// <summary>Field number for the "obstacle_id" field.</summary>
    public const int ObstacleIdFieldNumber = 1;
    private string obstacleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstacleId {
      get { return obstacleId_; }
      set {
        obstacleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "obstacle_stop_timestamp" field.</summary>
    public const int ObstacleStopTimestampFieldNumber = 2;
    private double obstacleStopTimestamp_;
    /// <summary>
    /// the timestamp when start stopping for the crosswalk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleStopTimestamp {
      get { return obstacleStopTimestamp_; }
      set {
        obstacleStopTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObstacleId != other.ObstacleId) return false;
      if (ObstacleStopTimestamp != other.ObstacleStopTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObstacleId.Length != 0) hash ^= ObstacleId.GetHashCode();
      if (ObstacleStopTimestamp != 0D) hash ^= ObstacleStopTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObstacleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObstacleId);
      }
      if (ObstacleStopTimestamp != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ObstacleStopTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObstacleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstacleId);
      }
      if (ObstacleStopTimestamp != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopTime other) {
      if (other == null) {
        return;
      }
      if (other.ObstacleId.Length != 0) {
        ObstacleId = other.ObstacleId;
      }
      if (other.ObstacleStopTimestamp != 0D) {
        ObstacleStopTimestamp = other.ObstacleStopTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ObstacleId = input.ReadString();
            break;
          }
          case 17: {
            ObstacleStopTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrosswalkStatus : pb::IMessage<CrosswalkStatus> {
    private static readonly pb::MessageParser<CrosswalkStatus> _parser = new pb::MessageParser<CrosswalkStatus>(() => new CrosswalkStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrosswalkStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrosswalkStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrosswalkStatus(CrosswalkStatus other) : this() {
      crosswalkId_ = other.crosswalkId_;
      stopTime_ = other.stopTime_.Clone();
      finishedCrosswalk_ = other.finishedCrosswalk_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrosswalkStatus Clone() {
      return new CrosswalkStatus(this);
    }

    /// <summary>Field number for the "crosswalk_id" field.</summary>
    public const int CrosswalkIdFieldNumber = 1;
    private string crosswalkId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrosswalkId {
      get { return crosswalkId_; }
      set {
        crosswalkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stop_time" field.</summary>
    public const int StopTimeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Planning.StopTime> _repeated_stopTime_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Planning.StopTime.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.StopTime> stopTime_ = new pbc::RepeatedField<global::Apollo.Planning.StopTime>();
    /// <summary>
    /// the timestamp when start stopping for the crosswalk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.StopTime> StopTime {
      get { return stopTime_; }
    }

    /// <summary>Field number for the "finished_crosswalk" field.</summary>
    public const int FinishedCrosswalkFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_finishedCrosswalk_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> finishedCrosswalk_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FinishedCrosswalk {
      get { return finishedCrosswalk_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrosswalkStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrosswalkStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CrosswalkId != other.CrosswalkId) return false;
      if(!stopTime_.Equals(other.stopTime_)) return false;
      if(!finishedCrosswalk_.Equals(other.finishedCrosswalk_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CrosswalkId.Length != 0) hash ^= CrosswalkId.GetHashCode();
      hash ^= stopTime_.GetHashCode();
      hash ^= finishedCrosswalk_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CrosswalkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CrosswalkId);
      }
      stopTime_.WriteTo(output, _repeated_stopTime_codec);
      finishedCrosswalk_.WriteTo(output, _repeated_finishedCrosswalk_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CrosswalkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CrosswalkId);
      }
      size += stopTime_.CalculateSize(_repeated_stopTime_codec);
      size += finishedCrosswalk_.CalculateSize(_repeated_finishedCrosswalk_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrosswalkStatus other) {
      if (other == null) {
        return;
      }
      if (other.CrosswalkId.Length != 0) {
        CrosswalkId = other.CrosswalkId;
      }
      stopTime_.Add(other.stopTime_);
      finishedCrosswalk_.Add(other.finishedCrosswalk_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CrosswalkId = input.ReadString();
            break;
          }
          case 18: {
            stopTime_.AddEntriesFrom(input, _repeated_stopTime_codec);
            break;
          }
          case 26: {
            finishedCrosswalk_.AddEntriesFrom(input, _repeated_finishedCrosswalk_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PullOverStatus : pb::IMessage<PullOverStatus> {
    private static readonly pb::MessageParser<PullOverStatus> _parser = new pb::MessageParser<PullOverStatus>(() => new PullOverStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PullOverStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullOverStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullOverStatus(PullOverStatus other) : this() {
      inPullOver_ = other.inPullOver_;
      status_ = other.status_;
      InlaneDestPoint = other.inlaneDestPoint_ != null ? other.InlaneDestPoint.Clone() : null;
      StartPoint = other.startPoint_ != null ? other.StartPoint.Clone() : null;
      StopPoint = other.stopPoint_ != null ? other.StopPoint.Clone() : null;
      stopPointHeading_ = other.stopPointHeading_;
      reason_ = other.reason_;
      statusSetTime_ = other.statusSetTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullOverStatus Clone() {
      return new PullOverStatus(this);
    }

    /// <summary>Field number for the "in_pull_over" field.</summary>
    public const int InPullOverFieldNumber = 1;
    private bool inPullOver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InPullOver {
      get { return inPullOver_; }
      set {
        inPullOver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Apollo.Planning.PullOverStatus.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PullOverStatus.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "inlane_dest_point" field.</summary>
    public const int InlaneDestPointFieldNumber = 3;
    private global::Apollo.Common.PointENU inlaneDestPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU InlaneDestPoint {
      get { return inlaneDestPoint_; }
      set {
        inlaneDestPoint_ = value;
      }
    }

    /// <summary>Field number for the "start_point" field.</summary>
    public const int StartPointFieldNumber = 4;
    private global::Apollo.Common.PointENU startPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU StartPoint {
      get { return startPoint_; }
      set {
        startPoint_ = value;
      }
    }

    /// <summary>Field number for the "stop_point" field.</summary>
    public const int StopPointFieldNumber = 5;
    private global::Apollo.Common.PointENU stopPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU StopPoint {
      get { return stopPoint_; }
      set {
        stopPoint_ = value;
      }
    }

    /// <summary>Field number for the "stop_point_heading" field.</summary>
    public const int StopPointHeadingFieldNumber = 6;
    private double stopPointHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPointHeading {
      get { return stopPointHeading_; }
      set {
        stopPointHeading_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 7;
    private global::Apollo.Planning.PullOverStatus.Types.Reason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PullOverStatus.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "status_set_time" field.</summary>
    public const int StatusSetTimeFieldNumber = 8;
    private double statusSetTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StatusSetTime {
      get { return statusSetTime_; }
      set {
        statusSetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PullOverStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PullOverStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InPullOver != other.InPullOver) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(InlaneDestPoint, other.InlaneDestPoint)) return false;
      if (!object.Equals(StartPoint, other.StartPoint)) return false;
      if (!object.Equals(StopPoint, other.StopPoint)) return false;
      if (StopPointHeading != other.StopPointHeading) return false;
      if (Reason != other.Reason) return false;
      if (StatusSetTime != other.StatusSetTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InPullOver != false) hash ^= InPullOver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (inlaneDestPoint_ != null) hash ^= InlaneDestPoint.GetHashCode();
      if (startPoint_ != null) hash ^= StartPoint.GetHashCode();
      if (stopPoint_ != null) hash ^= StopPoint.GetHashCode();
      if (StopPointHeading != 0D) hash ^= StopPointHeading.GetHashCode();
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (StatusSetTime != 0D) hash ^= StatusSetTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InPullOver != false) {
        output.WriteRawTag(8);
        output.WriteBool(InPullOver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (inlaneDestPoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InlaneDestPoint);
      }
      if (startPoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartPoint);
      }
      if (stopPoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StopPoint);
      }
      if (StopPointHeading != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(StopPointHeading);
      }
      if (Reason != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Reason);
      }
      if (StatusSetTime != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(StatusSetTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InPullOver != false) {
        size += 1 + 1;
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (inlaneDestPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InlaneDestPoint);
      }
      if (startPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPoint);
      }
      if (stopPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopPoint);
      }
      if (StopPointHeading != 0D) {
        size += 1 + 8;
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (StatusSetTime != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PullOverStatus other) {
      if (other == null) {
        return;
      }
      if (other.InPullOver != false) {
        InPullOver = other.InPullOver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.inlaneDestPoint_ != null) {
        if (inlaneDestPoint_ == null) {
          inlaneDestPoint_ = new global::Apollo.Common.PointENU();
        }
        InlaneDestPoint.MergeFrom(other.InlaneDestPoint);
      }
      if (other.startPoint_ != null) {
        if (startPoint_ == null) {
          startPoint_ = new global::Apollo.Common.PointENU();
        }
        StartPoint.MergeFrom(other.StartPoint);
      }
      if (other.stopPoint_ != null) {
        if (stopPoint_ == null) {
          stopPoint_ = new global::Apollo.Common.PointENU();
        }
        StopPoint.MergeFrom(other.StopPoint);
      }
      if (other.StopPointHeading != 0D) {
        StopPointHeading = other.StopPointHeading;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      if (other.StatusSetTime != 0D) {
        StatusSetTime = other.StatusSetTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InPullOver = input.ReadBool();
            break;
          }
          case 16: {
            status_ = (global::Apollo.Planning.PullOverStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            if (inlaneDestPoint_ == null) {
              inlaneDestPoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(inlaneDestPoint_);
            break;
          }
          case 34: {
            if (startPoint_ == null) {
              startPoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(startPoint_);
            break;
          }
          case 42: {
            if (stopPoint_ == null) {
              stopPoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(stopPoint_);
            break;
          }
          case 49: {
            StopPointHeading = input.ReadDouble();
            break;
          }
          case 56: {
            reason_ = (global::Apollo.Planning.PullOverStatus.Types.Reason) input.ReadEnum();
            break;
          }
          case 65: {
            StatusSetTime = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PullOverStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("REASON_DUMMY")] Dummy = 0,
        /// <summary>
        /// upon arriving destination
        /// </summary>
        [pbr::OriginalName("DESTINATION")] Destination = 1,
      }

      public enum Status {
        [pbr::OriginalName("STATUS_DUMMY")] Dummy = 0,
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("IN_OPERATION")] InOperation = 2,
        [pbr::OriginalName("DONE")] Done = 3,
        [pbr::OriginalName("DISABLED")] Disabled = 4,
      }

    }
    #endregion

  }

  public sealed partial class ReroutingStatus : pb::IMessage<ReroutingStatus> {
    private static readonly pb::MessageParser<ReroutingStatus> _parser = new pb::MessageParser<ReroutingStatus>(() => new ReroutingStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReroutingStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReroutingStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReroutingStatus(ReroutingStatus other) : this() {
      lastReroutingTime_ = other.lastReroutingTime_;
      needRerouting_ = other.needRerouting_;
      RoutingRequest = other.routingRequest_ != null ? other.RoutingRequest.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReroutingStatus Clone() {
      return new ReroutingStatus(this);
    }

    /// <summary>Field number for the "last_rerouting_time" field.</summary>
    public const int LastReroutingTimeFieldNumber = 1;
    private double lastReroutingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastReroutingTime {
      get { return lastReroutingTime_; }
      set {
        lastReroutingTime_ = value;
      }
    }

    /// <summary>Field number for the "need_rerouting" field.</summary>
    public const int NeedReroutingFieldNumber = 2;
    private bool needRerouting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedRerouting {
      get { return needRerouting_; }
      set {
        needRerouting_ = value;
      }
    }

    /// <summary>Field number for the "routing_request" field.</summary>
    public const int RoutingRequestFieldNumber = 3;
    private global::Apollo.Routing.RoutingRequest routingRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.RoutingRequest RoutingRequest {
      get { return routingRequest_; }
      set {
        routingRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReroutingStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReroutingStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastReroutingTime != other.LastReroutingTime) return false;
      if (NeedRerouting != other.NeedRerouting) return false;
      if (!object.Equals(RoutingRequest, other.RoutingRequest)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastReroutingTime != 0D) hash ^= LastReroutingTime.GetHashCode();
      if (NeedRerouting != false) hash ^= NeedRerouting.GetHashCode();
      if (routingRequest_ != null) hash ^= RoutingRequest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastReroutingTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LastReroutingTime);
      }
      if (NeedRerouting != false) {
        output.WriteRawTag(16);
        output.WriteBool(NeedRerouting);
      }
      if (routingRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoutingRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastReroutingTime != 0D) {
        size += 1 + 8;
      }
      if (NeedRerouting != false) {
        size += 1 + 1;
      }
      if (routingRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoutingRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReroutingStatus other) {
      if (other == null) {
        return;
      }
      if (other.LastReroutingTime != 0D) {
        LastReroutingTime = other.LastReroutingTime;
      }
      if (other.NeedRerouting != false) {
        NeedRerouting = other.NeedRerouting;
      }
      if (other.routingRequest_ != null) {
        if (routingRequest_ == null) {
          routingRequest_ = new global::Apollo.Routing.RoutingRequest();
        }
        RoutingRequest.MergeFrom(other.RoutingRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LastReroutingTime = input.ReadDouble();
            break;
          }
          case 16: {
            NeedRerouting = input.ReadBool();
            break;
          }
          case 26: {
            if (routingRequest_ == null) {
              routingRequest_ = new global::Apollo.Routing.RoutingRequest();
            }
            input.ReadMessage(routingRequest_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RightOfWayStatus : pb::IMessage<RightOfWayStatus> {
    private static readonly pb::MessageParser<RightOfWayStatus> _parser = new pb::MessageParser<RightOfWayStatus>(() => new RightOfWayStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RightOfWayStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RightOfWayStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RightOfWayStatus(RightOfWayStatus other) : this() {
      junction_ = other.junction_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RightOfWayStatus Clone() {
      return new RightOfWayStatus(this);
    }

    /// <summary>Field number for the "junction" field.</summary>
    public const int JunctionFieldNumber = 1;
    private static readonly pbc::MapField<string, bool>.Codec _map_junction_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 10);
    private readonly pbc::MapField<string, bool> junction_ = new pbc::MapField<string, bool>();
    /// <summary>
    /// whether the vehicle has right of way in junction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> Junction {
      get { return junction_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RightOfWayStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RightOfWayStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Junction.Equals(other.Junction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Junction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      junction_.WriteTo(output, _map_junction_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += junction_.CalculateSize(_map_junction_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RightOfWayStatus other) {
      if (other == null) {
        return;
      }
      junction_.Add(other.junction_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            junction_.AddEntriesFrom(input, _map_junction_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SidePassStatus : pb::IMessage<SidePassStatus> {
    private static readonly pb::MessageParser<SidePassStatus> _parser = new pb::MessageParser<SidePassStatus>(() => new SidePassStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SidePassStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SidePassStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SidePassStatus(SidePassStatus other) : this() {
      status_ = other.status_;
      waitStartTime_ = other.waitStartTime_;
      passObstacleId_ = other.passObstacleId_;
      passSide_ = other.passSide_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SidePassStatus Clone() {
      return new SidePassStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Apollo.Planning.SidePassStatus.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.SidePassStatus.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "wait_start_time" field.</summary>
    public const int WaitStartTimeFieldNumber = 2;
    private double waitStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WaitStartTime {
      get { return waitStartTime_; }
      set {
        waitStartTime_ = value;
      }
    }

    /// <summary>Field number for the "pass_obstacle_id" field.</summary>
    public const int PassObstacleIdFieldNumber = 3;
    private string passObstacleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassObstacleId {
      get { return passObstacleId_; }
      set {
        passObstacleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pass_side" field.</summary>
    public const int PassSideFieldNumber = 4;
    private global::Apollo.Planning.ObjectSidePass.Types.Type passSide_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectSidePass.Types.Type PassSide {
      get { return passSide_; }
      set {
        passSide_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SidePassStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SidePassStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (WaitStartTime != other.WaitStartTime) return false;
      if (PassObstacleId != other.PassObstacleId) return false;
      if (PassSide != other.PassSide) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (WaitStartTime != 0D) hash ^= WaitStartTime.GetHashCode();
      if (PassObstacleId.Length != 0) hash ^= PassObstacleId.GetHashCode();
      if (PassSide != 0) hash ^= PassSide.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (WaitStartTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(WaitStartTime);
      }
      if (PassObstacleId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PassObstacleId);
      }
      if (PassSide != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PassSide);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (WaitStartTime != 0D) {
        size += 1 + 8;
      }
      if (PassObstacleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassObstacleId);
      }
      if (PassSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PassSide);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SidePassStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.WaitStartTime != 0D) {
        WaitStartTime = other.WaitStartTime;
      }
      if (other.PassObstacleId.Length != 0) {
        PassObstacleId = other.PassObstacleId;
      }
      if (other.PassSide != 0) {
        PassSide = other.PassSide;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Apollo.Planning.SidePassStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 17: {
            WaitStartTime = input.ReadDouble();
            break;
          }
          case 26: {
            PassObstacleId = input.ReadString();
            break;
          }
          case 32: {
            passSide_ = (global::Apollo.Planning.ObjectSidePass.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SidePassStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// a sidepass sequence includes:
      /// driving -> wait -> sidepass -> driving
      /// </summary>
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("DRIVE")] Drive = 1,
        [pbr::OriginalName("WAIT")] Wait = 2,
        [pbr::OriginalName("SIDEPASS")] Sidepass = 3,
      }

    }
    #endregion

  }

  public sealed partial class StopSignStatus : pb::IMessage<StopSignStatus> {
    private static readonly pb::MessageParser<StopSignStatus> _parser = new pb::MessageParser<StopSignStatus>(() => new StopSignStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopSignStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopSignStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopSignStatus(StopSignStatus other) : this() {
      stopSignId_ = other.stopSignId_;
      status_ = other.status_;
      stopStartTime_ = other.stopStartTime_;
      laneWatchVehicles_ = other.laneWatchVehicles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopSignStatus Clone() {
      return new StopSignStatus(this);
    }

    /// <summary>Field number for the "stop_sign_id" field.</summary>
    public const int StopSignIdFieldNumber = 1;
    private string stopSignId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopSignId {
      get { return stopSignId_; }
      set {
        stopSignId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Apollo.Planning.StopSignStatus.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StopSignStatus.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "stop_start_time" field.</summary>
    public const int StopStartTimeFieldNumber = 3;
    private double stopStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopStartTime {
      get { return stopStartTime_; }
      set {
        stopStartTime_ = value;
      }
    }

    /// <summary>Field number for the "lane_watch_vehicles" field.</summary>
    public const int LaneWatchVehiclesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Planning.StopSignStatus.Types.LaneWatchVehicles> _repeated_laneWatchVehicles_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Planning.StopSignStatus.Types.LaneWatchVehicles.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.StopSignStatus.Types.LaneWatchVehicles> laneWatchVehicles_ = new pbc::RepeatedField<global::Apollo.Planning.StopSignStatus.Types.LaneWatchVehicles>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.StopSignStatus.Types.LaneWatchVehicles> LaneWatchVehicles {
      get { return laneWatchVehicles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopSignStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopSignStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StopSignId != other.StopSignId) return false;
      if (Status != other.Status) return false;
      if (StopStartTime != other.StopStartTime) return false;
      if(!laneWatchVehicles_.Equals(other.laneWatchVehicles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StopSignId.Length != 0) hash ^= StopSignId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StopStartTime != 0D) hash ^= StopStartTime.GetHashCode();
      hash ^= laneWatchVehicles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StopSignId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StopSignId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (StopStartTime != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(StopStartTime);
      }
      laneWatchVehicles_.WriteTo(output, _repeated_laneWatchVehicles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StopSignId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopSignId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (StopStartTime != 0D) {
        size += 1 + 8;
      }
      size += laneWatchVehicles_.CalculateSize(_repeated_laneWatchVehicles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopSignStatus other) {
      if (other == null) {
        return;
      }
      if (other.StopSignId.Length != 0) {
        StopSignId = other.StopSignId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StopStartTime != 0D) {
        StopStartTime = other.StopStartTime;
      }
      laneWatchVehicles_.Add(other.laneWatchVehicles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StopSignId = input.ReadString();
            break;
          }
          case 16: {
            status_ = (global::Apollo.Planning.StopSignStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 25: {
            StopStartTime = input.ReadDouble();
            break;
          }
          case 34: {
            laneWatchVehicles_.AddEntriesFrom(input, _repeated_laneWatchVehicles_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StopSignStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("DRIVE")] Drive = 1,
        [pbr::OriginalName("STOP")] Stop = 2,
        [pbr::OriginalName("WAIT")] Wait = 3,
        [pbr::OriginalName("CREEP")] Creep = 4,
        [pbr::OriginalName("STOP_DONE")] StopDone = 5,
      }

      public sealed partial class LaneWatchVehicles : pb::IMessage<LaneWatchVehicles> {
        private static readonly pb::MessageParser<LaneWatchVehicles> _parser = new pb::MessageParser<LaneWatchVehicles>(() => new LaneWatchVehicles());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LaneWatchVehicles> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.StopSignStatus.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LaneWatchVehicles() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LaneWatchVehicles(LaneWatchVehicles other) : this() {
          laneId_ = other.laneId_;
          watchVehicles_ = other.watchVehicles_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LaneWatchVehicles Clone() {
          return new LaneWatchVehicles(this);
        }

        /// <summary>Field number for the "lane_id" field.</summary>
        public const int LaneIdFieldNumber = 1;
        private string laneId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LaneId {
          get { return laneId_; }
          set {
            laneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "watch_vehicles" field.</summary>
        public const int WatchVehiclesFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_watchVehicles_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> watchVehicles_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> WatchVehicles {
          get { return watchVehicles_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LaneWatchVehicles);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LaneWatchVehicles other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LaneId != other.LaneId) return false;
          if(!watchVehicles_.Equals(other.watchVehicles_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LaneId.Length != 0) hash ^= LaneId.GetHashCode();
          hash ^= watchVehicles_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LaneId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LaneId);
          }
          watchVehicles_.WriteTo(output, _repeated_watchVehicles_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LaneId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneId);
          }
          size += watchVehicles_.CalculateSize(_repeated_watchVehicles_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LaneWatchVehicles other) {
          if (other == null) {
            return;
          }
          if (other.LaneId.Length != 0) {
            LaneId = other.LaneId;
          }
          watchVehicles_.Add(other.watchVehicles_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                LaneId = input.ReadString();
                break;
              }
              case 18: {
                watchVehicles_.AddEntriesFrom(input, _repeated_watchVehicles_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DestinationStatus : pb::IMessage<DestinationStatus> {
    private static readonly pb::MessageParser<DestinationStatus> _parser = new pb::MessageParser<DestinationStatus>(() => new DestinationStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestinationStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationStatus(DestinationStatus other) : this() {
      hasPassedDestination_ = other.hasPassedDestination_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationStatus Clone() {
      return new DestinationStatus(this);
    }

    /// <summary>Field number for the "has_passed_destination" field.</summary>
    public const int HasPassedDestinationFieldNumber = 1;
    private bool hasPassedDestination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassedDestination {
      get { return hasPassedDestination_; }
      set {
        hasPassedDestination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestinationStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestinationStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HasPassedDestination != other.HasPassedDestination) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPassedDestination != false) hash ^= HasPassedDestination.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPassedDestination != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasPassedDestination);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPassedDestination != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestinationStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasPassedDestination != false) {
        HasPassedDestination = other.HasPassedDestination;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HasPassedDestination = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlanningStatus : pb::IMessage<PlanningStatus> {
    private static readonly pb::MessageParser<PlanningStatus> _parser = new pb::MessageParser<PlanningStatus>(() => new PlanningStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanningStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningStatusReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningStatus(PlanningStatus other) : this() {
      ChangeLane = other.changeLane_ != null ? other.ChangeLane.Clone() : null;
      Crosswalk = other.crosswalk_ != null ? other.Crosswalk.Clone() : null;
      EngageAdvice = other.engageAdvice_ != null ? other.EngageAdvice.Clone() : null;
      Rerouting = other.rerouting_ != null ? other.Rerouting.Clone() : null;
      RightOfWay = other.rightOfWay_ != null ? other.RightOfWay.Clone() : null;
      SidePass = other.sidePass_ != null ? other.SidePass.Clone() : null;
      StopSign = other.stopSign_ != null ? other.StopSign.Clone() : null;
      Destination = other.destination_ != null ? other.Destination.Clone() : null;
      PullOver = other.pullOver_ != null ? other.PullOver.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningStatus Clone() {
      return new PlanningStatus(this);
    }

    /// <summary>Field number for the "change_lane" field.</summary>
    public const int ChangeLaneFieldNumber = 1;
    private global::Apollo.Planning.ChangeLaneStatus changeLane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ChangeLaneStatus ChangeLane {
      get { return changeLane_; }
      set {
        changeLane_ = value;
      }
    }

    /// <summary>Field number for the "crosswalk" field.</summary>
    public const int CrosswalkFieldNumber = 2;
    private global::Apollo.Planning.CrosswalkStatus crosswalk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.CrosswalkStatus Crosswalk {
      get { return crosswalk_; }
      set {
        crosswalk_ = value;
      }
    }

    /// <summary>Field number for the "engage_advice" field.</summary>
    public const int EngageAdviceFieldNumber = 3;
    private global::Apollo.Common.EngageAdvice engageAdvice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.EngageAdvice EngageAdvice {
      get { return engageAdvice_; }
      set {
        engageAdvice_ = value;
      }
    }

    /// <summary>Field number for the "rerouting" field.</summary>
    public const int ReroutingFieldNumber = 4;
    private global::Apollo.Planning.ReroutingStatus rerouting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ReroutingStatus Rerouting {
      get { return rerouting_; }
      set {
        rerouting_ = value;
      }
    }

    /// <summary>Field number for the "right_of_way" field.</summary>
    public const int RightOfWayFieldNumber = 5;
    private global::Apollo.Planning.RightOfWayStatus rightOfWay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.RightOfWayStatus RightOfWay {
      get { return rightOfWay_; }
      set {
        rightOfWay_ = value;
      }
    }

    /// <summary>Field number for the "side_pass" field.</summary>
    public const int SidePassFieldNumber = 6;
    private global::Apollo.Planning.SidePassStatus sidePass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.SidePassStatus SidePass {
      get { return sidePass_; }
      set {
        sidePass_ = value;
      }
    }

    /// <summary>Field number for the "stop_sign" field.</summary>
    public const int StopSignFieldNumber = 7;
    private global::Apollo.Planning.StopSignStatus stopSign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StopSignStatus StopSign {
      get { return stopSign_; }
      set {
        stopSign_ = value;
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 8;
    private global::Apollo.Planning.DestinationStatus destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DestinationStatus Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    /// <summary>Field number for the "pull_over" field.</summary>
    public const int PullOverFieldNumber = 9;
    private global::Apollo.Planning.PullOverStatus pullOver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PullOverStatus PullOver {
      get { return pullOver_; }
      set {
        pullOver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanningStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanningStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChangeLane, other.ChangeLane)) return false;
      if (!object.Equals(Crosswalk, other.Crosswalk)) return false;
      if (!object.Equals(EngageAdvice, other.EngageAdvice)) return false;
      if (!object.Equals(Rerouting, other.Rerouting)) return false;
      if (!object.Equals(RightOfWay, other.RightOfWay)) return false;
      if (!object.Equals(SidePass, other.SidePass)) return false;
      if (!object.Equals(StopSign, other.StopSign)) return false;
      if (!object.Equals(Destination, other.Destination)) return false;
      if (!object.Equals(PullOver, other.PullOver)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (changeLane_ != null) hash ^= ChangeLane.GetHashCode();
      if (crosswalk_ != null) hash ^= Crosswalk.GetHashCode();
      if (engageAdvice_ != null) hash ^= EngageAdvice.GetHashCode();
      if (rerouting_ != null) hash ^= Rerouting.GetHashCode();
      if (rightOfWay_ != null) hash ^= RightOfWay.GetHashCode();
      if (sidePass_ != null) hash ^= SidePass.GetHashCode();
      if (stopSign_ != null) hash ^= StopSign.GetHashCode();
      if (destination_ != null) hash ^= Destination.GetHashCode();
      if (pullOver_ != null) hash ^= PullOver.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (changeLane_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChangeLane);
      }
      if (crosswalk_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Crosswalk);
      }
      if (engageAdvice_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EngageAdvice);
      }
      if (rerouting_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rerouting);
      }
      if (rightOfWay_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RightOfWay);
      }
      if (sidePass_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SidePass);
      }
      if (stopSign_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StopSign);
      }
      if (destination_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Destination);
      }
      if (pullOver_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PullOver);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (changeLane_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeLane);
      }
      if (crosswalk_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crosswalk);
      }
      if (engageAdvice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EngageAdvice);
      }
      if (rerouting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rerouting);
      }
      if (rightOfWay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightOfWay);
      }
      if (sidePass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SidePass);
      }
      if (stopSign_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopSign);
      }
      if (destination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
      }
      if (pullOver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PullOver);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanningStatus other) {
      if (other == null) {
        return;
      }
      if (other.changeLane_ != null) {
        if (changeLane_ == null) {
          changeLane_ = new global::Apollo.Planning.ChangeLaneStatus();
        }
        ChangeLane.MergeFrom(other.ChangeLane);
      }
      if (other.crosswalk_ != null) {
        if (crosswalk_ == null) {
          crosswalk_ = new global::Apollo.Planning.CrosswalkStatus();
        }
        Crosswalk.MergeFrom(other.Crosswalk);
      }
      if (other.engageAdvice_ != null) {
        if (engageAdvice_ == null) {
          engageAdvice_ = new global::Apollo.Common.EngageAdvice();
        }
        EngageAdvice.MergeFrom(other.EngageAdvice);
      }
      if (other.rerouting_ != null) {
        if (rerouting_ == null) {
          rerouting_ = new global::Apollo.Planning.ReroutingStatus();
        }
        Rerouting.MergeFrom(other.Rerouting);
      }
      if (other.rightOfWay_ != null) {
        if (rightOfWay_ == null) {
          rightOfWay_ = new global::Apollo.Planning.RightOfWayStatus();
        }
        RightOfWay.MergeFrom(other.RightOfWay);
      }
      if (other.sidePass_ != null) {
        if (sidePass_ == null) {
          sidePass_ = new global::Apollo.Planning.SidePassStatus();
        }
        SidePass.MergeFrom(other.SidePass);
      }
      if (other.stopSign_ != null) {
        if (stopSign_ == null) {
          stopSign_ = new global::Apollo.Planning.StopSignStatus();
        }
        StopSign.MergeFrom(other.StopSign);
      }
      if (other.destination_ != null) {
        if (destination_ == null) {
          destination_ = new global::Apollo.Planning.DestinationStatus();
        }
        Destination.MergeFrom(other.Destination);
      }
      if (other.pullOver_ != null) {
        if (pullOver_ == null) {
          pullOver_ = new global::Apollo.Planning.PullOverStatus();
        }
        PullOver.MergeFrom(other.PullOver);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (changeLane_ == null) {
              changeLane_ = new global::Apollo.Planning.ChangeLaneStatus();
            }
            input.ReadMessage(changeLane_);
            break;
          }
          case 18: {
            if (crosswalk_ == null) {
              crosswalk_ = new global::Apollo.Planning.CrosswalkStatus();
            }
            input.ReadMessage(crosswalk_);
            break;
          }
          case 26: {
            if (engageAdvice_ == null) {
              engageAdvice_ = new global::Apollo.Common.EngageAdvice();
            }
            input.ReadMessage(engageAdvice_);
            break;
          }
          case 34: {
            if (rerouting_ == null) {
              rerouting_ = new global::Apollo.Planning.ReroutingStatus();
            }
            input.ReadMessage(rerouting_);
            break;
          }
          case 42: {
            if (rightOfWay_ == null) {
              rightOfWay_ = new global::Apollo.Planning.RightOfWayStatus();
            }
            input.ReadMessage(rightOfWay_);
            break;
          }
          case 50: {
            if (sidePass_ == null) {
              sidePass_ = new global::Apollo.Planning.SidePassStatus();
            }
            input.ReadMessage(sidePass_);
            break;
          }
          case 58: {
            if (stopSign_ == null) {
              stopSign_ = new global::Apollo.Planning.StopSignStatus();
            }
            input.ReadMessage(stopSign_);
            break;
          }
          case 66: {
            if (destination_ == null) {
              destination_ = new global::Apollo.Planning.DestinationStatus();
            }
            input.ReadMessage(destination_);
            break;
          }
          case 74: {
            if (pullOver_ == null) {
              pullOver_ = new global::Apollo.Planning.PullOverStatus();
            }
            input.ReadMessage(pullOver_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
