// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_speed_decider_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/navi_speed_decider_config.proto</summary>
  public static partial class NaviSpeedDeciderConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/navi_speed_decider_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NaviSpeedDeciderConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL25hdmlfc3BlZWRfZGVjaWRlcl9j",
            "b25maWcucHJvdG8SD2Fwb2xsby5wbGFubmluZyKIBAoWTmF2aVNwZWVkRGVj",
            "aWRlckNvbmZpZxIXCg9wcmVmZXJyZWRfYWNjZWwYASABKAESFwoPcHJlZmVy",
            "cmVkX2RlY2VsGAIgASgBEhYKDnByZWZlcnJlZF9qZXJrGAMgASgBEhEKCW1h",
            "eF9hY2NlbBgEIAEoARIRCgltYXhfZGVjZWwYBSABKAESFwoPb2JzdGFjbGVf",
            "YnVmZmVyGAYgASgBEhoKEnNhZmVfZGlzdGFuY2VfYmFzZRgHIAEoARIbChNz",
            "YWZlX2Rpc3RhbmNlX3JhdGlvGAggASgBEh0KFWZvbGxvd2luZ19hY2NlbF9y",
            "YXRpbxgJIAEoARIgChhzb2Z0X2NlbnRyaWNfYWNjZWxfbGltaXQYCiABKAES",
            "IAoYaGFyZF9jZW50cmljX2FjY2VsX2xpbWl0GAsgASgBEhgKEGhhcmRfc3Bl",
            "ZWRfbGltaXQYDCABKAESGAoQaGFyZF9hY2NlbF9saW1pdBgNIAEoARIYChBl",
            "bmFibGVfc2FmZV9wYXRoGA4gASgIEiMKG2VuYWJsZV9wbGFubmluZ19zdGFy",
            "dF9wb2ludBgPIAEoCBImCh5lbmFibGVfYWNjZWxfYXV0b19jb21wZW5zYXRp",
            "b24YECABKAgSFQoNa2FwcGFfcHJldmlldxgRIAEoARIXCg9rYXBwYV90aHJl",
            "c2hvbGQYEiABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.NaviSpeedDeciderConfig), global::Apollo.Planning.NaviSpeedDeciderConfig.Parser, new[]{ "PreferredAccel", "PreferredDecel", "PreferredJerk", "MaxAccel", "MaxDecel", "ObstacleBuffer", "SafeDistanceBase", "SafeDistanceRatio", "FollowingAccelRatio", "SoftCentricAccelLimit", "HardCentricAccelLimit", "HardSpeedLimit", "HardAccelLimit", "EnableSafePath", "EnablePlanningStartPoint", "EnableAccelAutoCompensation", "KappaPreview", "KappaThreshold" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NaviSpeedDeciderConfig : pb::IMessage<NaviSpeedDeciderConfig> {
    private static readonly pb::MessageParser<NaviSpeedDeciderConfig> _parser = new pb::MessageParser<NaviSpeedDeciderConfig>(() => new NaviSpeedDeciderConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NaviSpeedDeciderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.NaviSpeedDeciderConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviSpeedDeciderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviSpeedDeciderConfig(NaviSpeedDeciderConfig other) : this() {
      preferredAccel_ = other.preferredAccel_;
      preferredDecel_ = other.preferredDecel_;
      preferredJerk_ = other.preferredJerk_;
      maxAccel_ = other.maxAccel_;
      maxDecel_ = other.maxDecel_;
      obstacleBuffer_ = other.obstacleBuffer_;
      safeDistanceBase_ = other.safeDistanceBase_;
      safeDistanceRatio_ = other.safeDistanceRatio_;
      followingAccelRatio_ = other.followingAccelRatio_;
      softCentricAccelLimit_ = other.softCentricAccelLimit_;
      hardCentricAccelLimit_ = other.hardCentricAccelLimit_;
      hardSpeedLimit_ = other.hardSpeedLimit_;
      hardAccelLimit_ = other.hardAccelLimit_;
      enableSafePath_ = other.enableSafePath_;
      enablePlanningStartPoint_ = other.enablePlanningStartPoint_;
      enableAccelAutoCompensation_ = other.enableAccelAutoCompensation_;
      kappaPreview_ = other.kappaPreview_;
      kappaThreshold_ = other.kappaThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviSpeedDeciderConfig Clone() {
      return new NaviSpeedDeciderConfig(this);
    }

    /// <summary>Field number for the "preferred_accel" field.</summary>
    public const int PreferredAccelFieldNumber = 1;
    private double preferredAccel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreferredAccel {
      get { return preferredAccel_; }
      set {
        preferredAccel_ = value;
      }
    }

    /// <summary>Field number for the "preferred_decel" field.</summary>
    public const int PreferredDecelFieldNumber = 2;
    private double preferredDecel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreferredDecel {
      get { return preferredDecel_; }
      set {
        preferredDecel_ = value;
      }
    }

    /// <summary>Field number for the "preferred_jerk" field.</summary>
    public const int PreferredJerkFieldNumber = 3;
    private double preferredJerk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreferredJerk {
      get { return preferredJerk_; }
      set {
        preferredJerk_ = value;
      }
    }

    /// <summary>Field number for the "max_accel" field.</summary>
    public const int MaxAccelFieldNumber = 4;
    private double maxAccel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAccel {
      get { return maxAccel_; }
      set {
        maxAccel_ = value;
      }
    }

    /// <summary>Field number for the "max_decel" field.</summary>
    public const int MaxDecelFieldNumber = 5;
    private double maxDecel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxDecel {
      get { return maxDecel_; }
      set {
        maxDecel_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_buffer" field.</summary>
    public const int ObstacleBufferFieldNumber = 6;
    private double obstacleBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleBuffer {
      get { return obstacleBuffer_; }
      set {
        obstacleBuffer_ = value;
      }
    }

    /// <summary>Field number for the "safe_distance_base" field.</summary>
    public const int SafeDistanceBaseFieldNumber = 7;
    private double safeDistanceBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SafeDistanceBase {
      get { return safeDistanceBase_; }
      set {
        safeDistanceBase_ = value;
      }
    }

    /// <summary>Field number for the "safe_distance_ratio" field.</summary>
    public const int SafeDistanceRatioFieldNumber = 8;
    private double safeDistanceRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SafeDistanceRatio {
      get { return safeDistanceRatio_; }
      set {
        safeDistanceRatio_ = value;
      }
    }

    /// <summary>Field number for the "following_accel_ratio" field.</summary>
    public const int FollowingAccelRatioFieldNumber = 9;
    private double followingAccelRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FollowingAccelRatio {
      get { return followingAccelRatio_; }
      set {
        followingAccelRatio_ = value;
      }
    }

    /// <summary>Field number for the "soft_centric_accel_limit" field.</summary>
    public const int SoftCentricAccelLimitFieldNumber = 10;
    private double softCentricAccelLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SoftCentricAccelLimit {
      get { return softCentricAccelLimit_; }
      set {
        softCentricAccelLimit_ = value;
      }
    }

    /// <summary>Field number for the "hard_centric_accel_limit" field.</summary>
    public const int HardCentricAccelLimitFieldNumber = 11;
    private double hardCentricAccelLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HardCentricAccelLimit {
      get { return hardCentricAccelLimit_; }
      set {
        hardCentricAccelLimit_ = value;
      }
    }

    /// <summary>Field number for the "hard_speed_limit" field.</summary>
    public const int HardSpeedLimitFieldNumber = 12;
    private double hardSpeedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HardSpeedLimit {
      get { return hardSpeedLimit_; }
      set {
        hardSpeedLimit_ = value;
      }
    }

    /// <summary>Field number for the "hard_accel_limit" field.</summary>
    public const int HardAccelLimitFieldNumber = 13;
    private double hardAccelLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HardAccelLimit {
      get { return hardAccelLimit_; }
      set {
        hardAccelLimit_ = value;
      }
    }

    /// <summary>Field number for the "enable_safe_path" field.</summary>
    public const int EnableSafePathFieldNumber = 14;
    private bool enableSafePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableSafePath {
      get { return enableSafePath_; }
      set {
        enableSafePath_ = value;
      }
    }

    /// <summary>Field number for the "enable_planning_start_point" field.</summary>
    public const int EnablePlanningStartPointFieldNumber = 15;
    private bool enablePlanningStartPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnablePlanningStartPoint {
      get { return enablePlanningStartPoint_; }
      set {
        enablePlanningStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "enable_accel_auto_compensation" field.</summary>
    public const int EnableAccelAutoCompensationFieldNumber = 16;
    private bool enableAccelAutoCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableAccelAutoCompensation {
      get { return enableAccelAutoCompensation_; }
      set {
        enableAccelAutoCompensation_ = value;
      }
    }

    /// <summary>Field number for the "kappa_preview" field.</summary>
    public const int KappaPreviewFieldNumber = 17;
    private double kappaPreview_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double KappaPreview {
      get { return kappaPreview_; }
      set {
        kappaPreview_ = value;
      }
    }

    /// <summary>Field number for the "kappa_threshold" field.</summary>
    public const int KappaThresholdFieldNumber = 18;
    private double kappaThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double KappaThreshold {
      get { return kappaThreshold_; }
      set {
        kappaThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NaviSpeedDeciderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NaviSpeedDeciderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PreferredAccel != other.PreferredAccel) return false;
      if (PreferredDecel != other.PreferredDecel) return false;
      if (PreferredJerk != other.PreferredJerk) return false;
      if (MaxAccel != other.MaxAccel) return false;
      if (MaxDecel != other.MaxDecel) return false;
      if (ObstacleBuffer != other.ObstacleBuffer) return false;
      if (SafeDistanceBase != other.SafeDistanceBase) return false;
      if (SafeDistanceRatio != other.SafeDistanceRatio) return false;
      if (FollowingAccelRatio != other.FollowingAccelRatio) return false;
      if (SoftCentricAccelLimit != other.SoftCentricAccelLimit) return false;
      if (HardCentricAccelLimit != other.HardCentricAccelLimit) return false;
      if (HardSpeedLimit != other.HardSpeedLimit) return false;
      if (HardAccelLimit != other.HardAccelLimit) return false;
      if (EnableSafePath != other.EnableSafePath) return false;
      if (EnablePlanningStartPoint != other.EnablePlanningStartPoint) return false;
      if (EnableAccelAutoCompensation != other.EnableAccelAutoCompensation) return false;
      if (KappaPreview != other.KappaPreview) return false;
      if (KappaThreshold != other.KappaThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PreferredAccel != 0D) hash ^= PreferredAccel.GetHashCode();
      if (PreferredDecel != 0D) hash ^= PreferredDecel.GetHashCode();
      if (PreferredJerk != 0D) hash ^= PreferredJerk.GetHashCode();
      if (MaxAccel != 0D) hash ^= MaxAccel.GetHashCode();
      if (MaxDecel != 0D) hash ^= MaxDecel.GetHashCode();
      if (ObstacleBuffer != 0D) hash ^= ObstacleBuffer.GetHashCode();
      if (SafeDistanceBase != 0D) hash ^= SafeDistanceBase.GetHashCode();
      if (SafeDistanceRatio != 0D) hash ^= SafeDistanceRatio.GetHashCode();
      if (FollowingAccelRatio != 0D) hash ^= FollowingAccelRatio.GetHashCode();
      if (SoftCentricAccelLimit != 0D) hash ^= SoftCentricAccelLimit.GetHashCode();
      if (HardCentricAccelLimit != 0D) hash ^= HardCentricAccelLimit.GetHashCode();
      if (HardSpeedLimit != 0D) hash ^= HardSpeedLimit.GetHashCode();
      if (HardAccelLimit != 0D) hash ^= HardAccelLimit.GetHashCode();
      if (EnableSafePath != false) hash ^= EnableSafePath.GetHashCode();
      if (EnablePlanningStartPoint != false) hash ^= EnablePlanningStartPoint.GetHashCode();
      if (EnableAccelAutoCompensation != false) hash ^= EnableAccelAutoCompensation.GetHashCode();
      if (KappaPreview != 0D) hash ^= KappaPreview.GetHashCode();
      if (KappaThreshold != 0D) hash ^= KappaThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PreferredAccel != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PreferredAccel);
      }
      if (PreferredDecel != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PreferredDecel);
      }
      if (PreferredJerk != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PreferredJerk);
      }
      if (MaxAccel != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxAccel);
      }
      if (MaxDecel != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MaxDecel);
      }
      if (ObstacleBuffer != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ObstacleBuffer);
      }
      if (SafeDistanceBase != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(SafeDistanceBase);
      }
      if (SafeDistanceRatio != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SafeDistanceRatio);
      }
      if (FollowingAccelRatio != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(FollowingAccelRatio);
      }
      if (SoftCentricAccelLimit != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(SoftCentricAccelLimit);
      }
      if (HardCentricAccelLimit != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(HardCentricAccelLimit);
      }
      if (HardSpeedLimit != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(HardSpeedLimit);
      }
      if (HardAccelLimit != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(HardAccelLimit);
      }
      if (EnableSafePath != false) {
        output.WriteRawTag(112);
        output.WriteBool(EnableSafePath);
      }
      if (EnablePlanningStartPoint != false) {
        output.WriteRawTag(120);
        output.WriteBool(EnablePlanningStartPoint);
      }
      if (EnableAccelAutoCompensation != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(EnableAccelAutoCompensation);
      }
      if (KappaPreview != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(KappaPreview);
      }
      if (KappaThreshold != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(KappaThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PreferredAccel != 0D) {
        size += 1 + 8;
      }
      if (PreferredDecel != 0D) {
        size += 1 + 8;
      }
      if (PreferredJerk != 0D) {
        size += 1 + 8;
      }
      if (MaxAccel != 0D) {
        size += 1 + 8;
      }
      if (MaxDecel != 0D) {
        size += 1 + 8;
      }
      if (ObstacleBuffer != 0D) {
        size += 1 + 8;
      }
      if (SafeDistanceBase != 0D) {
        size += 1 + 8;
      }
      if (SafeDistanceRatio != 0D) {
        size += 1 + 8;
      }
      if (FollowingAccelRatio != 0D) {
        size += 1 + 8;
      }
      if (SoftCentricAccelLimit != 0D) {
        size += 1 + 8;
      }
      if (HardCentricAccelLimit != 0D) {
        size += 1 + 8;
      }
      if (HardSpeedLimit != 0D) {
        size += 1 + 8;
      }
      if (HardAccelLimit != 0D) {
        size += 1 + 8;
      }
      if (EnableSafePath != false) {
        size += 1 + 1;
      }
      if (EnablePlanningStartPoint != false) {
        size += 1 + 1;
      }
      if (EnableAccelAutoCompensation != false) {
        size += 2 + 1;
      }
      if (KappaPreview != 0D) {
        size += 2 + 8;
      }
      if (KappaThreshold != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NaviSpeedDeciderConfig other) {
      if (other == null) {
        return;
      }
      if (other.PreferredAccel != 0D) {
        PreferredAccel = other.PreferredAccel;
      }
      if (other.PreferredDecel != 0D) {
        PreferredDecel = other.PreferredDecel;
      }
      if (other.PreferredJerk != 0D) {
        PreferredJerk = other.PreferredJerk;
      }
      if (other.MaxAccel != 0D) {
        MaxAccel = other.MaxAccel;
      }
      if (other.MaxDecel != 0D) {
        MaxDecel = other.MaxDecel;
      }
      if (other.ObstacleBuffer != 0D) {
        ObstacleBuffer = other.ObstacleBuffer;
      }
      if (other.SafeDistanceBase != 0D) {
        SafeDistanceBase = other.SafeDistanceBase;
      }
      if (other.SafeDistanceRatio != 0D) {
        SafeDistanceRatio = other.SafeDistanceRatio;
      }
      if (other.FollowingAccelRatio != 0D) {
        FollowingAccelRatio = other.FollowingAccelRatio;
      }
      if (other.SoftCentricAccelLimit != 0D) {
        SoftCentricAccelLimit = other.SoftCentricAccelLimit;
      }
      if (other.HardCentricAccelLimit != 0D) {
        HardCentricAccelLimit = other.HardCentricAccelLimit;
      }
      if (other.HardSpeedLimit != 0D) {
        HardSpeedLimit = other.HardSpeedLimit;
      }
      if (other.HardAccelLimit != 0D) {
        HardAccelLimit = other.HardAccelLimit;
      }
      if (other.EnableSafePath != false) {
        EnableSafePath = other.EnableSafePath;
      }
      if (other.EnablePlanningStartPoint != false) {
        EnablePlanningStartPoint = other.EnablePlanningStartPoint;
      }
      if (other.EnableAccelAutoCompensation != false) {
        EnableAccelAutoCompensation = other.EnableAccelAutoCompensation;
      }
      if (other.KappaPreview != 0D) {
        KappaPreview = other.KappaPreview;
      }
      if (other.KappaThreshold != 0D) {
        KappaThreshold = other.KappaThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PreferredAccel = input.ReadDouble();
            break;
          }
          case 17: {
            PreferredDecel = input.ReadDouble();
            break;
          }
          case 25: {
            PreferredJerk = input.ReadDouble();
            break;
          }
          case 33: {
            MaxAccel = input.ReadDouble();
            break;
          }
          case 41: {
            MaxDecel = input.ReadDouble();
            break;
          }
          case 49: {
            ObstacleBuffer = input.ReadDouble();
            break;
          }
          case 57: {
            SafeDistanceBase = input.ReadDouble();
            break;
          }
          case 65: {
            SafeDistanceRatio = input.ReadDouble();
            break;
          }
          case 73: {
            FollowingAccelRatio = input.ReadDouble();
            break;
          }
          case 81: {
            SoftCentricAccelLimit = input.ReadDouble();
            break;
          }
          case 89: {
            HardCentricAccelLimit = input.ReadDouble();
            break;
          }
          case 97: {
            HardSpeedLimit = input.ReadDouble();
            break;
          }
          case 105: {
            HardAccelLimit = input.ReadDouble();
            break;
          }
          case 112: {
            EnableSafePath = input.ReadBool();
            break;
          }
          case 120: {
            EnablePlanningStartPoint = input.ReadBool();
            break;
          }
          case 128: {
            EnableAccelAutoCompensation = input.ReadBool();
            break;
          }
          case 137: {
            KappaPreview = input.ReadDouble();
            break;
          }
          case 145: {
            KappaThreshold = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
