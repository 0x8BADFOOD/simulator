// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/decision.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/decision.proto</summary>
  public static partial class DecisionReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/decision.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DecisionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL2RlY2lzaW9uLnByb3RvEg9hcG9s",
            "bG8ucGxhbm5pbmcaI21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21ldHJ5LnBy",
            "b3RvGiltb2R1bGVzL2NvbW1vbi9wcm90by92ZWhpY2xlX3NpZ25hbC5wcm90",
            "bxojbW9kdWxlcy9yb3V0aW5nL3Byb3RvL3JvdXRpbmcucHJvdG8iTQoKVGFy",
            "Z2V0TGFuZRIKCgJpZBgBIAEoCRIPCgdzdGFydF9zGAIgASgBEg0KBWVuZF9z",
            "GAMgASgBEhMKC3NwZWVkX2xpbWl0GAQgASgBIg4KDE9iamVjdElnbm9yZSK0",
            "AQoKT2JqZWN0U3RvcBI0CgtyZWFzb25fY29kZRgBIAEoDjIfLmFwb2xsby5w",
            "bGFubmluZy5TdG9wUmVhc29uQ29kZRISCgpkaXN0YW5jZV9zGAIgASgBEisK",
            "CnN0b3BfcG9pbnQYAyABKAsyFy5hcG9sbG8uY29tbW9uLlBvaW50RU5VEhQK",
            "DHN0b3BfaGVhZGluZxgEIAEoARIZChF3YWl0X2Zvcl9vYnN0YWNsZRgFIAMo",
            "CSKZAQoLT2JqZWN0TnVkZ2USLwoEdHlwZRgBIAEoDjIhLmFwb2xsby5wbGFu",
            "bmluZy5PYmplY3ROdWRnZS5UeXBlEhIKCmRpc3RhbmNlX2wYAiABKAEiRQoE",
            "VHlwZRIOCgpUWVBFX0RVTU1ZEAASDgoKTEVGVF9OVURHRRABEg8KC1JJR0hU",
            "X05VREdFEAISDAoITk9fTlVER0UQAyJ7CgtPYmplY3RZaWVsZBISCgpkaXN0",
            "YW5jZV9zGAEgASgBEiwKC2ZlbmNlX3BvaW50GAIgASgLMhcuYXBvbGxvLmNv",
            "bW1vbi5Qb2ludEVOVRIVCg1mZW5jZV9oZWFkaW5nGAMgASgBEhMKC3RpbWVf",
            "YnVmZmVyGAQgASgBImcKDE9iamVjdEZvbGxvdxISCgpkaXN0YW5jZV9zGAEg",
            "ASgBEiwKC2ZlbmNlX3BvaW50GAIgASgLMhcuYXBvbGxvLmNvbW1vbi5Qb2lu",
            "dEVOVRIVCg1mZW5jZV9oZWFkaW5nGAMgASgBIn4KDk9iamVjdE92ZXJ0YWtl",
            "EhIKCmRpc3RhbmNlX3MYASABKAESLAoLZmVuY2VfcG9pbnQYAiABKAsyFy5h",
            "cG9sbG8uY29tbW9uLlBvaW50RU5VEhUKDWZlbmNlX2hlYWRpbmcYAyABKAES",
            "EwoLdGltZV9idWZmZXIYBCABKAEicQoOT2JqZWN0U2lkZVBhc3MSMgoEdHlw",
            "ZRgBIAEoDjIkLmFwb2xsby5wbGFubmluZy5PYmplY3RTaWRlUGFzcy5UeXBl",
            "IisKBFR5cGUSDgoKVFlQRV9EVU1NWRAAEggKBExFRlQQARIJCgVSSUdIVBAC",
            "Ig0KC09iamVjdEF2b2lkIvMCChJPYmplY3REZWNpc2lvblR5cGUSLwoGaWdu",
            "b3JlGAEgASgLMh0uYXBvbGxvLnBsYW5uaW5nLk9iamVjdElnbm9yZUgAEisK",
            "BHN0b3AYAiABKAsyGy5hcG9sbG8ucGxhbm5pbmcuT2JqZWN0U3RvcEgAEi8K",
            "BmZvbGxvdxgDIAEoCzIdLmFwb2xsby5wbGFubmluZy5PYmplY3RGb2xsb3dI",
            "ABItCgV5aWVsZBgEIAEoCzIcLmFwb2xsby5wbGFubmluZy5PYmplY3RZaWVs",
            "ZEgAEjMKCG92ZXJ0YWtlGAUgASgLMh8uYXBvbGxvLnBsYW5uaW5nLk9iamVj",
            "dE92ZXJ0YWtlSAASLQoFbnVkZ2UYBiABKAsyHC5hcG9sbG8ucGxhbm5pbmcu",
            "T2JqZWN0TnVkZ2VIABItCgVhdm9pZBgHIAEoCzIcLmFwb2xsby5wbGFubmlu",
            "Zy5PYmplY3RBdm9pZEgAQgwKCm9iamVjdF90YWcicQoOT2JqZWN0RGVjaXNp",
            "b24SCgoCaWQYASABKAkSFQoNcGVyY2VwdGlvbl9pZBgCIAEoBRI8Cg9vYmpl",
            "Y3RfZGVjaXNpb24YAyADKAsyIy5hcG9sbG8ucGxhbm5pbmcuT2JqZWN0RGVj",
            "aXNpb25UeXBlIkQKD09iamVjdERlY2lzaW9ucxIxCghkZWNpc2lvbhgBIAMo",
            "CzIfLmFwb2xsby5wbGFubmluZy5PYmplY3REZWNpc2lvbiLNAQoITWFpblN0",
            "b3ASNAoLcmVhc29uX2NvZGUYASABKA4yHy5hcG9sbG8ucGxhbm5pbmcuU3Rv",
            "cFJlYXNvbkNvZGUSDgoGcmVhc29uGAIgASgJEisKCnN0b3BfcG9pbnQYAyAB",
            "KAsyFy5hcG9sbG8uY29tbW9uLlBvaW50RU5VEhQKDHN0b3BfaGVhZGluZxgE",
            "IAEoARI4ChBjaGFuZ2VfbGFuZV90eXBlGAUgASgOMh4uYXBvbGxvLnJvdXRp",
            "bmcuQ2hhbmdlTGFuZVR5cGUiGAoWRW1lcmdlbmN5U3RvcEhhcmRCcmFrZSIb",
            "ChlFbWVyZ2VuY3lTdG9wQ3J1aXNlVG9TdG9wIrUDChFNYWluRW1lcmdlbmN5",
            "U3RvcBJCCgtyZWFzb25fY29kZRgBIAEoDjItLmFwb2xsby5wbGFubmluZy5N",
            "YWluRW1lcmdlbmN5U3RvcC5SZWFzb25Db2RlEg4KBnJlYXNvbhgCIAEoCRI9",
            "CgpoYXJkX2JyYWtlGAMgASgLMicuYXBvbGxvLnBsYW5uaW5nLkVtZXJnZW5j",
            "eVN0b3BIYXJkQnJha2VIABJECg5jcnVpc2VfdG9fc3RvcBgEIAEoCzIqLmFw",
            "b2xsby5wbGFubmluZy5FbWVyZ2VuY3lTdG9wQ3J1aXNlVG9TdG9wSAAivgEK",
            "ClJlYXNvbkNvZGUSFAoQUkVBU09OQ09ERV9EVU1NWRAAEh0KGUVTVE9QX1JF",
            "QVNPTl9JTlRFUk5BTF9FUlIQARIaChZFU1RPUF9SRUFTT05fQ09MTElTSU9O",
            "EAISHQoZRVNUT1BfUkVBU09OX1NUX0ZJTkRfUEFUSBADEiEKHUVTVE9QX1JF",
            "QVNPTl9TVF9NQUtFX0RFQ0lTSU9OEAQSHQoZRVNUT1BfUkVBU09OX1NFTlNP",
            "Ul9FUlJPUhAFQgYKBHRhc2siRgoKTWFpbkNydWlzZRI4ChBjaGFuZ2VfbGFu",
            "ZV90eXBlGAEgASgOMh4uYXBvbGxvLnJvdXRpbmcuQ2hhbmdlTGFuZVR5cGUi",
            "jwIKDk1haW5DaGFuZ2VMYW5lEjIKBHR5cGUYASABKA4yJC5hcG9sbG8ucGxh",
            "bm5pbmcuTWFpbkNoYW5nZUxhbmUuVHlwZRIxCgxkZWZhdWx0X2xhbmUYAiAD",
            "KAsyGy5hcG9sbG8ucGxhbm5pbmcuVGFyZ2V0TGFuZRI0ChFkZWZhdWx0X2xh",
            "bmVfc3RvcBgDIAEoCzIZLmFwb2xsby5wbGFubmluZy5NYWluU3RvcBIzChB0",
            "YXJnZXRfbGFuZV9zdG9wGAQgASgLMhkuYXBvbGxvLnBsYW5uaW5nLk1haW5T",
            "dG9wIisKBFR5cGUSDgoKVFlQRV9EVU1NWRAAEggKBExFRlQQARIJCgVSSUdI",
            "VBACIlgKE01haW5NaXNzaW9uQ29tcGxldGUSKwoKc3RvcF9wb2ludBgBIAEo",
            "CzIXLmFwb2xsby5jb21tb24uUG9pbnRFTlUSFAoMc3RvcF9oZWFkaW5nGAIg",
            "ASgBIh4KDE1haW5Ob3RSZWFkeRIOCgZyZWFzb24YASABKAkiDQoLTWFpblBh",
            "cmtpbmcitgMKDE1haW5EZWNpc2lvbhItCgZjcnVpc2UYASABKAsyGy5hcG9s",
            "bG8ucGxhbm5pbmcuTWFpbkNydWlzZUgAEikKBHN0b3AYAiABKAsyGS5hcG9s",
            "bG8ucGxhbm5pbmcuTWFpblN0b3BIABIzCgVlc3RvcBgDIAEoCzIiLmFwb2xs",
            "by5wbGFubmluZy5NYWluRW1lcmdlbmN5U3RvcEgAEjYKC2NoYW5nZV9sYW5l",
            "GAQgASgLMh8uYXBvbGxvLnBsYW5uaW5nLk1haW5DaGFuZ2VMYW5lSAASQAoQ",
            "bWlzc2lvbl9jb21wbGV0ZRgGIAEoCzIkLmFwb2xsby5wbGFubmluZy5NYWlu",
            "TWlzc2lvbkNvbXBsZXRlSAASMgoJbm90X3JlYWR5GAcgASgLMh0uYXBvbGxv",
            "LnBsYW5uaW5nLk1haW5Ob3RSZWFkeUgAEi8KB3BhcmtpbmcYCCABKAsyHC5h",
            "cG9sbG8ucGxhbm5pbmcuTWFpblBhcmtpbmdIABIwCgt0YXJnZXRfbGFuZRgF",
            "IAMoCzIbLmFwb2xsby5wbGFubmluZy5UYXJnZXRMYW5lQgYKBHRhc2sitwEK",
            "DkRlY2lzaW9uUmVzdWx0EjQKDW1haW5fZGVjaXNpb24YASABKAsyHS5hcG9s",
            "bG8ucGxhbm5pbmcuTWFpbkRlY2lzaW9uEjkKD29iamVjdF9kZWNpc2lvbhgC",
            "IAEoCzIgLmFwb2xsby5wbGFubmluZy5PYmplY3REZWNpc2lvbnMSNAoOdmVo",
            "aWNsZV9zaWduYWwYAyABKAsyHC5hcG9sbG8uY29tbW9uLlZlaGljbGVTaWdu",
            "YWwq0AMKDlN0b3BSZWFzb25Db2RlEhgKFFNUT1BSRUFTT05DT0RFX0RVTU1Z",
            "EAASHAoYU1RPUF9SRUFTT05fSEVBRF9WRUhJQ0xFEAESGwoXU1RPUF9SRUFT",
            "T05fREVTVElOQVRJT04QAhIaChZTVE9QX1JFQVNPTl9QRURFU1RSSUFOEAMS",
            "GAoUU1RPUF9SRUFTT05fT0JTVEFDTEUQBBIaChZTVE9QX1JFQVNPTl9QUkVQ",
            "QVJLSU5HEAUSFgoSU1RPUF9SRUFTT05fU0lHTkFMEGQSGQoVU1RPUF9SRUFT",
            "T05fU1RPUF9TSUdOEGUSGgoWU1RPUF9SRUFTT05fWUlFTERfU0lHThBmEhoK",
            "FlNUT1BfUkVBU09OX0NMRUFSX1pPTkUQZxIZChVTVE9QX1JFQVNPTl9DUk9T",
            "U1dBTEsQaBIXChNTVE9QX1JFQVNPTl9DUkVFUEVSEGkSHQoZU1RPUF9SRUFT",
            "T05fUkVGRVJFTkNFX0VORBBqEh0KGVNUT1BfUkVBU09OX1lFTExPV19TSUdO",
            "QUwQaxIZChVTVE9QX1JFQVNPTl9QVUxMX09WRVIQbBIfChtTVE9QX1JFQVNP",
            "Tl9TSURFUEFTU19TQUZFVFkQbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Common.VehicleSignalReflection.Descriptor, global::Apollo.Routing.RoutingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Planning.StopReasonCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.TargetLane), global::Apollo.Planning.TargetLane.Parser, new[]{ "Id", "StartS", "EndS", "SpeedLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectIgnore), global::Apollo.Planning.ObjectIgnore.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectStop), global::Apollo.Planning.ObjectStop.Parser, new[]{ "ReasonCode", "DistanceS", "StopPoint", "StopHeading", "WaitForObstacle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectNudge), global::Apollo.Planning.ObjectNudge.Parser, new[]{ "Type", "DistanceL" }, null, new[]{ typeof(global::Apollo.Planning.ObjectNudge.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectYield), global::Apollo.Planning.ObjectYield.Parser, new[]{ "DistanceS", "FencePoint", "FenceHeading", "TimeBuffer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectFollow), global::Apollo.Planning.ObjectFollow.Parser, new[]{ "DistanceS", "FencePoint", "FenceHeading" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectOvertake), global::Apollo.Planning.ObjectOvertake.Parser, new[]{ "DistanceS", "FencePoint", "FenceHeading", "TimeBuffer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectSidePass), global::Apollo.Planning.ObjectSidePass.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Apollo.Planning.ObjectSidePass.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectAvoid), global::Apollo.Planning.ObjectAvoid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectDecisionType), global::Apollo.Planning.ObjectDecisionType.Parser, new[]{ "Ignore", "Stop", "Follow", "Yield", "Overtake", "Nudge", "Avoid" }, new[]{ "ObjectTag" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectDecision), global::Apollo.Planning.ObjectDecision.Parser, new[]{ "Id", "PerceptionId", "ObjectDecision_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ObjectDecisions), global::Apollo.Planning.ObjectDecisions.Parser, new[]{ "Decision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainStop), global::Apollo.Planning.MainStop.Parser, new[]{ "ReasonCode", "Reason", "StopPoint", "StopHeading", "ChangeLaneType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.EmergencyStopHardBrake), global::Apollo.Planning.EmergencyStopHardBrake.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.EmergencyStopCruiseToStop), global::Apollo.Planning.EmergencyStopCruiseToStop.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainEmergencyStop), global::Apollo.Planning.MainEmergencyStop.Parser, new[]{ "ReasonCode", "Reason", "HardBrake", "CruiseToStop" }, new[]{ "Task" }, new[]{ typeof(global::Apollo.Planning.MainEmergencyStop.Types.ReasonCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainCruise), global::Apollo.Planning.MainCruise.Parser, new[]{ "ChangeLaneType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainChangeLane), global::Apollo.Planning.MainChangeLane.Parser, new[]{ "Type", "DefaultLane", "DefaultLaneStop", "TargetLaneStop" }, null, new[]{ typeof(global::Apollo.Planning.MainChangeLane.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainMissionComplete), global::Apollo.Planning.MainMissionComplete.Parser, new[]{ "StopPoint", "StopHeading" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainNotReady), global::Apollo.Planning.MainNotReady.Parser, new[]{ "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainParking), global::Apollo.Planning.MainParking.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MainDecision), global::Apollo.Planning.MainDecision.Parser, new[]{ "Cruise", "Stop", "Estop", "ChangeLane", "MissionComplete", "NotReady", "Parking", "TargetLane" }, new[]{ "Task" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.DecisionResult), global::Apollo.Planning.DecisionResult.Parser, new[]{ "MainDecision", "ObjectDecision", "VehicleSignal" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum StopReasonCode {
    [pbr::OriginalName("STOPREASONCODE_DUMMY")] Dummy = 0,
    [pbr::OriginalName("STOP_REASON_HEAD_VEHICLE")] StopReasonHeadVehicle = 1,
    [pbr::OriginalName("STOP_REASON_DESTINATION")] StopReasonDestination = 2,
    [pbr::OriginalName("STOP_REASON_PEDESTRIAN")] StopReasonPedestrian = 3,
    [pbr::OriginalName("STOP_REASON_OBSTACLE")] StopReasonObstacle = 4,
    [pbr::OriginalName("STOP_REASON_PREPARKING")] StopReasonPreparking = 5,
    /// <summary>
    /// only for red signal
    /// </summary>
    [pbr::OriginalName("STOP_REASON_SIGNAL")] StopReasonSignal = 100,
    [pbr::OriginalName("STOP_REASON_STOP_SIGN")] StopReasonStopSign = 101,
    [pbr::OriginalName("STOP_REASON_YIELD_SIGN")] StopReasonYieldSign = 102,
    [pbr::OriginalName("STOP_REASON_CLEAR_ZONE")] StopReasonClearZone = 103,
    [pbr::OriginalName("STOP_REASON_CROSSWALK")] StopReasonCrosswalk = 104,
    [pbr::OriginalName("STOP_REASON_CREEPER")] StopReasonCreeper = 105,
    /// <summary>
    /// end of the reference_line
    /// </summary>
    [pbr::OriginalName("STOP_REASON_REFERENCE_END")] StopReasonReferenceEnd = 106,
    /// <summary>
    /// yellow signal
    /// </summary>
    [pbr::OriginalName("STOP_REASON_YELLOW_SIGNAL")] StopReasonYellowSignal = 107,
    /// <summary>
    /// pull over
    /// </summary>
    [pbr::OriginalName("STOP_REASON_PULL_OVER")] StopReasonPullOver = 108,
    [pbr::OriginalName("STOP_REASON_SIDEPASS_SAFETY")] StopReasonSidepassSafety = 109,
  }

  #endregion

  #region Messages
  public sealed partial class TargetLane : pb::IMessage<TargetLane> {
    private static readonly pb::MessageParser<TargetLane> _parser = new pb::MessageParser<TargetLane>(() => new TargetLane());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetLane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetLane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetLane(TargetLane other) : this() {
      id_ = other.id_;
      startS_ = other.startS_;
      endS_ = other.endS_;
      speedLimit_ = other.speedLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetLane Clone() {
      return new TargetLane(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// lane id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_s" field.</summary>
    public const int StartSFieldNumber = 2;
    private double startS_;
    /// <summary>
    /// in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartS {
      get { return startS_; }
      set {
        startS_ = value;
      }
    }

    /// <summary>Field number for the "end_s" field.</summary>
    public const int EndSFieldNumber = 3;
    private double endS_;
    /// <summary>
    /// in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EndS {
      get { return endS_; }
      set {
        endS_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 4;
    private double speedLimit_;
    /// <summary>
    /// in m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetLane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetLane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StartS != other.StartS) return false;
      if (EndS != other.EndS) return false;
      if (SpeedLimit != other.SpeedLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (StartS != 0D) hash ^= StartS.GetHashCode();
      if (EndS != 0D) hash ^= EndS.GetHashCode();
      if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (StartS != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StartS);
      }
      if (EndS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(EndS);
      }
      if (SpeedLimit != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SpeedLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (StartS != 0D) {
        size += 1 + 8;
      }
      if (EndS != 0D) {
        size += 1 + 8;
      }
      if (SpeedLimit != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetLane other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.StartS != 0D) {
        StartS = other.StartS;
      }
      if (other.EndS != 0D) {
        EndS = other.EndS;
      }
      if (other.SpeedLimit != 0D) {
        SpeedLimit = other.SpeedLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 17: {
            StartS = input.ReadDouble();
            break;
          }
          case 25: {
            EndS = input.ReadDouble();
            break;
          }
          case 33: {
            SpeedLimit = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectIgnore : pb::IMessage<ObjectIgnore> {
    private static readonly pb::MessageParser<ObjectIgnore> _parser = new pb::MessageParser<ObjectIgnore>(() => new ObjectIgnore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectIgnore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIgnore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIgnore(ObjectIgnore other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIgnore Clone() {
      return new ObjectIgnore(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectIgnore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectIgnore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectIgnore other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ObjectStop : pb::IMessage<ObjectStop> {
    private static readonly pb::MessageParser<ObjectStop> _parser = new pb::MessageParser<ObjectStop>(() => new ObjectStop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectStop(ObjectStop other) : this() {
      reasonCode_ = other.reasonCode_;
      distanceS_ = other.distanceS_;
      StopPoint = other.stopPoint_ != null ? other.StopPoint.Clone() : null;
      stopHeading_ = other.stopHeading_;
      waitForObstacle_ = other.waitForObstacle_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectStop Clone() {
      return new ObjectStop(this);
    }

    /// <summary>Field number for the "reason_code" field.</summary>
    public const int ReasonCodeFieldNumber = 1;
    private global::Apollo.Planning.StopReasonCode reasonCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StopReasonCode ReasonCode {
      get { return reasonCode_; }
      set {
        reasonCode_ = value;
      }
    }

    /// <summary>Field number for the "distance_s" field.</summary>
    public const int DistanceSFieldNumber = 2;
    private double distanceS_;
    /// <summary>
    /// in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceS {
      get { return distanceS_; }
      set {
        distanceS_ = value;
      }
    }

    /// <summary>Field number for the "stop_point" field.</summary>
    public const int StopPointFieldNumber = 3;
    private global::Apollo.Common.PointENU stopPoint_;
    /// <summary>
    /// When stopped, the front center of vehicle should be at this point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU StopPoint {
      get { return stopPoint_; }
      set {
        stopPoint_ = value;
      }
    }

    /// <summary>Field number for the "stop_heading" field.</summary>
    public const int StopHeadingFieldNumber = 4;
    private double stopHeading_;
    /// <summary>
    /// When stopped, the heading of the vehicle should be stop_heading.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopHeading {
      get { return stopHeading_; }
      set {
        stopHeading_ = value;
      }
    }

    /// <summary>Field number for the "wait_for_obstacle" field.</summary>
    public const int WaitForObstacleFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_waitForObstacle_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> waitForObstacle_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WaitForObstacle {
      get { return waitForObstacle_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReasonCode != other.ReasonCode) return false;
      if (DistanceS != other.DistanceS) return false;
      if (!object.Equals(StopPoint, other.StopPoint)) return false;
      if (StopHeading != other.StopHeading) return false;
      if(!waitForObstacle_.Equals(other.waitForObstacle_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReasonCode != 0) hash ^= ReasonCode.GetHashCode();
      if (DistanceS != 0D) hash ^= DistanceS.GetHashCode();
      if (stopPoint_ != null) hash ^= StopPoint.GetHashCode();
      if (StopHeading != 0D) hash ^= StopHeading.GetHashCode();
      hash ^= waitForObstacle_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReasonCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReasonCode);
      }
      if (DistanceS != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DistanceS);
      }
      if (stopPoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StopPoint);
      }
      if (StopHeading != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(StopHeading);
      }
      waitForObstacle_.WriteTo(output, _repeated_waitForObstacle_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReasonCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReasonCode);
      }
      if (DistanceS != 0D) {
        size += 1 + 8;
      }
      if (stopPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopPoint);
      }
      if (StopHeading != 0D) {
        size += 1 + 8;
      }
      size += waitForObstacle_.CalculateSize(_repeated_waitForObstacle_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectStop other) {
      if (other == null) {
        return;
      }
      if (other.ReasonCode != 0) {
        ReasonCode = other.ReasonCode;
      }
      if (other.DistanceS != 0D) {
        DistanceS = other.DistanceS;
      }
      if (other.stopPoint_ != null) {
        if (stopPoint_ == null) {
          stopPoint_ = new global::Apollo.Common.PointENU();
        }
        StopPoint.MergeFrom(other.StopPoint);
      }
      if (other.StopHeading != 0D) {
        StopHeading = other.StopHeading;
      }
      waitForObstacle_.Add(other.waitForObstacle_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reasonCode_ = (global::Apollo.Planning.StopReasonCode) input.ReadEnum();
            break;
          }
          case 17: {
            DistanceS = input.ReadDouble();
            break;
          }
          case 26: {
            if (stopPoint_ == null) {
              stopPoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(stopPoint_);
            break;
          }
          case 33: {
            StopHeading = input.ReadDouble();
            break;
          }
          case 42: {
            waitForObstacle_.AddEntriesFrom(input, _repeated_waitForObstacle_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// dodge the obstacle in lateral direction when driving
  /// </summary>
  public sealed partial class ObjectNudge : pb::IMessage<ObjectNudge> {
    private static readonly pb::MessageParser<ObjectNudge> _parser = new pb::MessageParser<ObjectNudge>(() => new ObjectNudge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectNudge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectNudge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectNudge(ObjectNudge other) : this() {
      type_ = other.type_;
      distanceL_ = other.distanceL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectNudge Clone() {
      return new ObjectNudge(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apollo.Planning.ObjectNudge.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectNudge.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "distance_l" field.</summary>
    public const int DistanceLFieldNumber = 2;
    private double distanceL_;
    /// <summary>
    /// minimum lateral distance in meters. positive if type = LEFT_NUDGE
    /// negative if type = RIGHT_NUDGE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceL {
      get { return distanceL_; }
      set {
        distanceL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectNudge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectNudge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (DistanceL != other.DistanceL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DistanceL != 0D) hash ^= DistanceL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (DistanceL != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DistanceL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (DistanceL != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectNudge other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DistanceL != 0D) {
        DistanceL = other.DistanceL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apollo.Planning.ObjectNudge.Types.Type) input.ReadEnum();
            break;
          }
          case 17: {
            DistanceL = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ObjectNudge message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_DUMMY")] Dummy = 0,
        /// <summary>
        /// drive from the left side of the obstacle
        /// </summary>
        [pbr::OriginalName("LEFT_NUDGE")] LeftNudge = 1,
        /// <summary>
        /// drive from the right side of the obstacle
        /// </summary>
        [pbr::OriginalName("RIGHT_NUDGE")] RightNudge = 2,
        /// <summary>
        /// No nudge is set.
        /// </summary>
        [pbr::OriginalName("NO_NUDGE")] NoNudge = 3,
      }

    }
    #endregion

  }

  public sealed partial class ObjectYield : pb::IMessage<ObjectYield> {
    private static readonly pb::MessageParser<ObjectYield> _parser = new pb::MessageParser<ObjectYield>(() => new ObjectYield());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectYield> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectYield() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectYield(ObjectYield other) : this() {
      distanceS_ = other.distanceS_;
      FencePoint = other.fencePoint_ != null ? other.FencePoint.Clone() : null;
      fenceHeading_ = other.fenceHeading_;
      timeBuffer_ = other.timeBuffer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectYield Clone() {
      return new ObjectYield(this);
    }

    /// <summary>Field number for the "distance_s" field.</summary>
    public const int DistanceSFieldNumber = 1;
    private double distanceS_;
    /// <summary>
    /// minimum longitudinal distance in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceS {
      get { return distanceS_; }
      set {
        distanceS_ = value;
      }
    }

    /// <summary>Field number for the "fence_point" field.</summary>
    public const int FencePointFieldNumber = 2;
    private global::Apollo.Common.PointENU fencePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU FencePoint {
      get { return fencePoint_; }
      set {
        fencePoint_ = value;
      }
    }

    /// <summary>Field number for the "fence_heading" field.</summary>
    public const int FenceHeadingFieldNumber = 3;
    private double fenceHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FenceHeading {
      get { return fenceHeading_; }
      set {
        fenceHeading_ = value;
      }
    }

    /// <summary>Field number for the "time_buffer" field.</summary>
    public const int TimeBufferFieldNumber = 4;
    private double timeBuffer_;
    /// <summary>
    /// minimum time buffer  after the
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeBuffer {
      get { return timeBuffer_; }
      set {
        timeBuffer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectYield);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectYield other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistanceS != other.DistanceS) return false;
      if (!object.Equals(FencePoint, other.FencePoint)) return false;
      if (FenceHeading != other.FenceHeading) return false;
      if (TimeBuffer != other.TimeBuffer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistanceS != 0D) hash ^= DistanceS.GetHashCode();
      if (fencePoint_ != null) hash ^= FencePoint.GetHashCode();
      if (FenceHeading != 0D) hash ^= FenceHeading.GetHashCode();
      if (TimeBuffer != 0D) hash ^= TimeBuffer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistanceS != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DistanceS);
      }
      if (fencePoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FencePoint);
      }
      if (FenceHeading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FenceHeading);
      }
      if (TimeBuffer != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TimeBuffer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistanceS != 0D) {
        size += 1 + 8;
      }
      if (fencePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FencePoint);
      }
      if (FenceHeading != 0D) {
        size += 1 + 8;
      }
      if (TimeBuffer != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectYield other) {
      if (other == null) {
        return;
      }
      if (other.DistanceS != 0D) {
        DistanceS = other.DistanceS;
      }
      if (other.fencePoint_ != null) {
        if (fencePoint_ == null) {
          fencePoint_ = new global::Apollo.Common.PointENU();
        }
        FencePoint.MergeFrom(other.FencePoint);
      }
      if (other.FenceHeading != 0D) {
        FenceHeading = other.FenceHeading;
      }
      if (other.TimeBuffer != 0D) {
        TimeBuffer = other.TimeBuffer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            DistanceS = input.ReadDouble();
            break;
          }
          case 18: {
            if (fencePoint_ == null) {
              fencePoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(fencePoint_);
            break;
          }
          case 25: {
            FenceHeading = input.ReadDouble();
            break;
          }
          case 33: {
            TimeBuffer = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectFollow : pb::IMessage<ObjectFollow> {
    private static readonly pb::MessageParser<ObjectFollow> _parser = new pb::MessageParser<ObjectFollow>(() => new ObjectFollow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectFollow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectFollow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectFollow(ObjectFollow other) : this() {
      distanceS_ = other.distanceS_;
      FencePoint = other.fencePoint_ != null ? other.FencePoint.Clone() : null;
      fenceHeading_ = other.fenceHeading_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectFollow Clone() {
      return new ObjectFollow(this);
    }

    /// <summary>Field number for the "distance_s" field.</summary>
    public const int DistanceSFieldNumber = 1;
    private double distanceS_;
    /// <summary>
    /// minimum longitudinal distance in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceS {
      get { return distanceS_; }
      set {
        distanceS_ = value;
      }
    }

    /// <summary>Field number for the "fence_point" field.</summary>
    public const int FencePointFieldNumber = 2;
    private global::Apollo.Common.PointENU fencePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU FencePoint {
      get { return fencePoint_; }
      set {
        fencePoint_ = value;
      }
    }

    /// <summary>Field number for the "fence_heading" field.</summary>
    public const int FenceHeadingFieldNumber = 3;
    private double fenceHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FenceHeading {
      get { return fenceHeading_; }
      set {
        fenceHeading_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectFollow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectFollow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistanceS != other.DistanceS) return false;
      if (!object.Equals(FencePoint, other.FencePoint)) return false;
      if (FenceHeading != other.FenceHeading) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistanceS != 0D) hash ^= DistanceS.GetHashCode();
      if (fencePoint_ != null) hash ^= FencePoint.GetHashCode();
      if (FenceHeading != 0D) hash ^= FenceHeading.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistanceS != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DistanceS);
      }
      if (fencePoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FencePoint);
      }
      if (FenceHeading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FenceHeading);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistanceS != 0D) {
        size += 1 + 8;
      }
      if (fencePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FencePoint);
      }
      if (FenceHeading != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectFollow other) {
      if (other == null) {
        return;
      }
      if (other.DistanceS != 0D) {
        DistanceS = other.DistanceS;
      }
      if (other.fencePoint_ != null) {
        if (fencePoint_ == null) {
          fencePoint_ = new global::Apollo.Common.PointENU();
        }
        FencePoint.MergeFrom(other.FencePoint);
      }
      if (other.FenceHeading != 0D) {
        FenceHeading = other.FenceHeading;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            DistanceS = input.ReadDouble();
            break;
          }
          case 18: {
            if (fencePoint_ == null) {
              fencePoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(fencePoint_);
            break;
          }
          case 25: {
            FenceHeading = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectOvertake : pb::IMessage<ObjectOvertake> {
    private static readonly pb::MessageParser<ObjectOvertake> _parser = new pb::MessageParser<ObjectOvertake>(() => new ObjectOvertake());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectOvertake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectOvertake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectOvertake(ObjectOvertake other) : this() {
      distanceS_ = other.distanceS_;
      FencePoint = other.fencePoint_ != null ? other.FencePoint.Clone() : null;
      fenceHeading_ = other.fenceHeading_;
      timeBuffer_ = other.timeBuffer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectOvertake Clone() {
      return new ObjectOvertake(this);
    }

    /// <summary>Field number for the "distance_s" field.</summary>
    public const int DistanceSFieldNumber = 1;
    private double distanceS_;
    /// <summary>
    /// minimum longitudinal distance in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceS {
      get { return distanceS_; }
      set {
        distanceS_ = value;
      }
    }

    /// <summary>Field number for the "fence_point" field.</summary>
    public const int FencePointFieldNumber = 2;
    private global::Apollo.Common.PointENU fencePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU FencePoint {
      get { return fencePoint_; }
      set {
        fencePoint_ = value;
      }
    }

    /// <summary>Field number for the "fence_heading" field.</summary>
    public const int FenceHeadingFieldNumber = 3;
    private double fenceHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FenceHeading {
      get { return fenceHeading_; }
      set {
        fenceHeading_ = value;
      }
    }

    /// <summary>Field number for the "time_buffer" field.</summary>
    public const int TimeBufferFieldNumber = 4;
    private double timeBuffer_;
    /// <summary>
    /// minimum time buffer  before the
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeBuffer {
      get { return timeBuffer_; }
      set {
        timeBuffer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectOvertake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectOvertake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistanceS != other.DistanceS) return false;
      if (!object.Equals(FencePoint, other.FencePoint)) return false;
      if (FenceHeading != other.FenceHeading) return false;
      if (TimeBuffer != other.TimeBuffer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistanceS != 0D) hash ^= DistanceS.GetHashCode();
      if (fencePoint_ != null) hash ^= FencePoint.GetHashCode();
      if (FenceHeading != 0D) hash ^= FenceHeading.GetHashCode();
      if (TimeBuffer != 0D) hash ^= TimeBuffer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistanceS != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DistanceS);
      }
      if (fencePoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FencePoint);
      }
      if (FenceHeading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FenceHeading);
      }
      if (TimeBuffer != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TimeBuffer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistanceS != 0D) {
        size += 1 + 8;
      }
      if (fencePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FencePoint);
      }
      if (FenceHeading != 0D) {
        size += 1 + 8;
      }
      if (TimeBuffer != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectOvertake other) {
      if (other == null) {
        return;
      }
      if (other.DistanceS != 0D) {
        DistanceS = other.DistanceS;
      }
      if (other.fencePoint_ != null) {
        if (fencePoint_ == null) {
          fencePoint_ = new global::Apollo.Common.PointENU();
        }
        FencePoint.MergeFrom(other.FencePoint);
      }
      if (other.FenceHeading != 0D) {
        FenceHeading = other.FenceHeading;
      }
      if (other.TimeBuffer != 0D) {
        TimeBuffer = other.TimeBuffer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            DistanceS = input.ReadDouble();
            break;
          }
          case 18: {
            if (fencePoint_ == null) {
              fencePoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(fencePoint_);
            break;
          }
          case 25: {
            FenceHeading = input.ReadDouble();
            break;
          }
          case 33: {
            TimeBuffer = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectSidePass : pb::IMessage<ObjectSidePass> {
    private static readonly pb::MessageParser<ObjectSidePass> _parser = new pb::MessageParser<ObjectSidePass>(() => new ObjectSidePass());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectSidePass> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectSidePass() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectSidePass(ObjectSidePass other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectSidePass Clone() {
      return new ObjectSidePass(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apollo.Planning.ObjectSidePass.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectSidePass.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectSidePass);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectSidePass other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectSidePass other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apollo.Planning.ObjectSidePass.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ObjectSidePass message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("LEFT")] Left = 1,
        [pbr::OriginalName("RIGHT")] Right = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// unified object decision while estop
  /// </summary>
  public sealed partial class ObjectAvoid : pb::IMessage<ObjectAvoid> {
    private static readonly pb::MessageParser<ObjectAvoid> _parser = new pb::MessageParser<ObjectAvoid>(() => new ObjectAvoid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectAvoid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAvoid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAvoid(ObjectAvoid other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAvoid Clone() {
      return new ObjectAvoid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectAvoid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectAvoid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectAvoid other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ObjectDecisionType : pb::IMessage<ObjectDecisionType> {
    private static readonly pb::MessageParser<ObjectDecisionType> _parser = new pb::MessageParser<ObjectDecisionType>(() => new ObjectDecisionType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDecisionType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecisionType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecisionType(ObjectDecisionType other) : this() {
      switch (other.ObjectTagCase) {
        case ObjectTagOneofCase.Ignore:
          Ignore = other.Ignore.Clone();
          break;
        case ObjectTagOneofCase.Stop:
          Stop = other.Stop.Clone();
          break;
        case ObjectTagOneofCase.Follow:
          Follow = other.Follow.Clone();
          break;
        case ObjectTagOneofCase.Yield:
          Yield = other.Yield.Clone();
          break;
        case ObjectTagOneofCase.Overtake:
          Overtake = other.Overtake.Clone();
          break;
        case ObjectTagOneofCase.Nudge:
          Nudge = other.Nudge.Clone();
          break;
        case ObjectTagOneofCase.Avoid:
          Avoid = other.Avoid.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecisionType Clone() {
      return new ObjectDecisionType(this);
    }

    /// <summary>Field number for the "ignore" field.</summary>
    public const int IgnoreFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectIgnore Ignore {
      get { return objectTagCase_ == ObjectTagOneofCase.Ignore ? (global::Apollo.Planning.ObjectIgnore) objectTag_ : null; }
      set {
        objectTag_ = value;
        objectTagCase_ = value == null ? ObjectTagOneofCase.None : ObjectTagOneofCase.Ignore;
      }
    }

    /// <summary>Field number for the "stop" field.</summary>
    public const int StopFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectStop Stop {
      get { return objectTagCase_ == ObjectTagOneofCase.Stop ? (global::Apollo.Planning.ObjectStop) objectTag_ : null; }
      set {
        objectTag_ = value;
        objectTagCase_ = value == null ? ObjectTagOneofCase.None : ObjectTagOneofCase.Stop;
      }
    }

    /// <summary>Field number for the "follow" field.</summary>
    public const int FollowFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectFollow Follow {
      get { return objectTagCase_ == ObjectTagOneofCase.Follow ? (global::Apollo.Planning.ObjectFollow) objectTag_ : null; }
      set {
        objectTag_ = value;
        objectTagCase_ = value == null ? ObjectTagOneofCase.None : ObjectTagOneofCase.Follow;
      }
    }

    /// <summary>Field number for the "yield" field.</summary>
    public const int YieldFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectYield Yield {
      get { return objectTagCase_ == ObjectTagOneofCase.Yield ? (global::Apollo.Planning.ObjectYield) objectTag_ : null; }
      set {
        objectTag_ = value;
        objectTagCase_ = value == null ? ObjectTagOneofCase.None : ObjectTagOneofCase.Yield;
      }
    }

    /// <summary>Field number for the "overtake" field.</summary>
    public const int OvertakeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectOvertake Overtake {
      get { return objectTagCase_ == ObjectTagOneofCase.Overtake ? (global::Apollo.Planning.ObjectOvertake) objectTag_ : null; }
      set {
        objectTag_ = value;
        objectTagCase_ = value == null ? ObjectTagOneofCase.None : ObjectTagOneofCase.Overtake;
      }
    }

    /// <summary>Field number for the "nudge" field.</summary>
    public const int NudgeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectNudge Nudge {
      get { return objectTagCase_ == ObjectTagOneofCase.Nudge ? (global::Apollo.Planning.ObjectNudge) objectTag_ : null; }
      set {
        objectTag_ = value;
        objectTagCase_ = value == null ? ObjectTagOneofCase.None : ObjectTagOneofCase.Nudge;
      }
    }

    /// <summary>Field number for the "avoid" field.</summary>
    public const int AvoidFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectAvoid Avoid {
      get { return objectTagCase_ == ObjectTagOneofCase.Avoid ? (global::Apollo.Planning.ObjectAvoid) objectTag_ : null; }
      set {
        objectTag_ = value;
        objectTagCase_ = value == null ? ObjectTagOneofCase.None : ObjectTagOneofCase.Avoid;
      }
    }

    private object objectTag_;
    /// <summary>Enum of possible cases for the "object_tag" oneof.</summary>
    public enum ObjectTagOneofCase {
      None = 0,
      Ignore = 1,
      Stop = 2,
      Follow = 3,
      Yield = 4,
      Overtake = 5,
      Nudge = 6,
      Avoid = 7,
    }
    private ObjectTagOneofCase objectTagCase_ = ObjectTagOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTagOneofCase ObjectTagCase {
      get { return objectTagCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectTag() {
      objectTagCase_ = ObjectTagOneofCase.None;
      objectTag_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDecisionType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDecisionType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ignore, other.Ignore)) return false;
      if (!object.Equals(Stop, other.Stop)) return false;
      if (!object.Equals(Follow, other.Follow)) return false;
      if (!object.Equals(Yield, other.Yield)) return false;
      if (!object.Equals(Overtake, other.Overtake)) return false;
      if (!object.Equals(Nudge, other.Nudge)) return false;
      if (!object.Equals(Avoid, other.Avoid)) return false;
      if (ObjectTagCase != other.ObjectTagCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectTagCase_ == ObjectTagOneofCase.Ignore) hash ^= Ignore.GetHashCode();
      if (objectTagCase_ == ObjectTagOneofCase.Stop) hash ^= Stop.GetHashCode();
      if (objectTagCase_ == ObjectTagOneofCase.Follow) hash ^= Follow.GetHashCode();
      if (objectTagCase_ == ObjectTagOneofCase.Yield) hash ^= Yield.GetHashCode();
      if (objectTagCase_ == ObjectTagOneofCase.Overtake) hash ^= Overtake.GetHashCode();
      if (objectTagCase_ == ObjectTagOneofCase.Nudge) hash ^= Nudge.GetHashCode();
      if (objectTagCase_ == ObjectTagOneofCase.Avoid) hash ^= Avoid.GetHashCode();
      hash ^= (int) objectTagCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectTagCase_ == ObjectTagOneofCase.Ignore) {
        output.WriteRawTag(10);
        output.WriteMessage(Ignore);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Stop) {
        output.WriteRawTag(18);
        output.WriteMessage(Stop);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Follow) {
        output.WriteRawTag(26);
        output.WriteMessage(Follow);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Yield) {
        output.WriteRawTag(34);
        output.WriteMessage(Yield);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Overtake) {
        output.WriteRawTag(42);
        output.WriteMessage(Overtake);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Nudge) {
        output.WriteRawTag(50);
        output.WriteMessage(Nudge);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Avoid) {
        output.WriteRawTag(58);
        output.WriteMessage(Avoid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectTagCase_ == ObjectTagOneofCase.Ignore) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ignore);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Stop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stop);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Follow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Follow);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Yield) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Yield);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Overtake) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Overtake);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Nudge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nudge);
      }
      if (objectTagCase_ == ObjectTagOneofCase.Avoid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avoid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDecisionType other) {
      if (other == null) {
        return;
      }
      switch (other.ObjectTagCase) {
        case ObjectTagOneofCase.Ignore:
          Ignore = other.Ignore;
          break;
        case ObjectTagOneofCase.Stop:
          Stop = other.Stop;
          break;
        case ObjectTagOneofCase.Follow:
          Follow = other.Follow;
          break;
        case ObjectTagOneofCase.Yield:
          Yield = other.Yield;
          break;
        case ObjectTagOneofCase.Overtake:
          Overtake = other.Overtake;
          break;
        case ObjectTagOneofCase.Nudge:
          Nudge = other.Nudge;
          break;
        case ObjectTagOneofCase.Avoid:
          Avoid = other.Avoid;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Apollo.Planning.ObjectIgnore subBuilder = new global::Apollo.Planning.ObjectIgnore();
            if (objectTagCase_ == ObjectTagOneofCase.Ignore) {
              subBuilder.MergeFrom(Ignore);
            }
            input.ReadMessage(subBuilder);
            Ignore = subBuilder;
            break;
          }
          case 18: {
            global::Apollo.Planning.ObjectStop subBuilder = new global::Apollo.Planning.ObjectStop();
            if (objectTagCase_ == ObjectTagOneofCase.Stop) {
              subBuilder.MergeFrom(Stop);
            }
            input.ReadMessage(subBuilder);
            Stop = subBuilder;
            break;
          }
          case 26: {
            global::Apollo.Planning.ObjectFollow subBuilder = new global::Apollo.Planning.ObjectFollow();
            if (objectTagCase_ == ObjectTagOneofCase.Follow) {
              subBuilder.MergeFrom(Follow);
            }
            input.ReadMessage(subBuilder);
            Follow = subBuilder;
            break;
          }
          case 34: {
            global::Apollo.Planning.ObjectYield subBuilder = new global::Apollo.Planning.ObjectYield();
            if (objectTagCase_ == ObjectTagOneofCase.Yield) {
              subBuilder.MergeFrom(Yield);
            }
            input.ReadMessage(subBuilder);
            Yield = subBuilder;
            break;
          }
          case 42: {
            global::Apollo.Planning.ObjectOvertake subBuilder = new global::Apollo.Planning.ObjectOvertake();
            if (objectTagCase_ == ObjectTagOneofCase.Overtake) {
              subBuilder.MergeFrom(Overtake);
            }
            input.ReadMessage(subBuilder);
            Overtake = subBuilder;
            break;
          }
          case 50: {
            global::Apollo.Planning.ObjectNudge subBuilder = new global::Apollo.Planning.ObjectNudge();
            if (objectTagCase_ == ObjectTagOneofCase.Nudge) {
              subBuilder.MergeFrom(Nudge);
            }
            input.ReadMessage(subBuilder);
            Nudge = subBuilder;
            break;
          }
          case 58: {
            global::Apollo.Planning.ObjectAvoid subBuilder = new global::Apollo.Planning.ObjectAvoid();
            if (objectTagCase_ == ObjectTagOneofCase.Avoid) {
              subBuilder.MergeFrom(Avoid);
            }
            input.ReadMessage(subBuilder);
            Avoid = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectDecision : pb::IMessage<ObjectDecision> {
    private static readonly pb::MessageParser<ObjectDecision> _parser = new pb::MessageParser<ObjectDecision>(() => new ObjectDecision());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDecision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecision(ObjectDecision other) : this() {
      id_ = other.id_;
      perceptionId_ = other.perceptionId_;
      objectDecision_ = other.objectDecision_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecision Clone() {
      return new ObjectDecision(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "perception_id" field.</summary>
    public const int PerceptionIdFieldNumber = 2;
    private int perceptionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PerceptionId {
      get { return perceptionId_; }
      set {
        perceptionId_ = value;
      }
    }

    /// <summary>Field number for the "object_decision" field.</summary>
    public const int ObjectDecision_FieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Planning.ObjectDecisionType> _repeated_objectDecision_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Planning.ObjectDecisionType.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.ObjectDecisionType> objectDecision_ = new pbc::RepeatedField<global::Apollo.Planning.ObjectDecisionType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.ObjectDecisionType> ObjectDecision_ {
      get { return objectDecision_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDecision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDecision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PerceptionId != other.PerceptionId) return false;
      if(!objectDecision_.Equals(other.objectDecision_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PerceptionId != 0) hash ^= PerceptionId.GetHashCode();
      hash ^= objectDecision_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (PerceptionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PerceptionId);
      }
      objectDecision_.WriteTo(output, _repeated_objectDecision_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PerceptionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PerceptionId);
      }
      size += objectDecision_.CalculateSize(_repeated_objectDecision_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDecision other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PerceptionId != 0) {
        PerceptionId = other.PerceptionId;
      }
      objectDecision_.Add(other.objectDecision_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            PerceptionId = input.ReadInt32();
            break;
          }
          case 26: {
            objectDecision_.AddEntriesFrom(input, _repeated_objectDecision_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectDecisions : pb::IMessage<ObjectDecisions> {
    private static readonly pb::MessageParser<ObjectDecisions> _parser = new pb::MessageParser<ObjectDecisions>(() => new ObjectDecisions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDecisions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecisions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecisions(ObjectDecisions other) : this() {
      decision_ = other.decision_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDecisions Clone() {
      return new ObjectDecisions(this);
    }

    /// <summary>Field number for the "decision" field.</summary>
    public const int DecisionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.ObjectDecision> _repeated_decision_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Planning.ObjectDecision.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.ObjectDecision> decision_ = new pbc::RepeatedField<global::Apollo.Planning.ObjectDecision>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.ObjectDecision> Decision {
      get { return decision_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDecisions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDecisions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decision_.Equals(other.decision_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decision_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decision_.WriteTo(output, _repeated_decision_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decision_.CalculateSize(_repeated_decision_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDecisions other) {
      if (other == null) {
        return;
      }
      decision_.Add(other.decision_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            decision_.AddEntriesFrom(input, _repeated_decision_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainStop : pb::IMessage<MainStop> {
    private static readonly pb::MessageParser<MainStop> _parser = new pb::MessageParser<MainStop>(() => new MainStop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainStop(MainStop other) : this() {
      reasonCode_ = other.reasonCode_;
      reason_ = other.reason_;
      StopPoint = other.stopPoint_ != null ? other.StopPoint.Clone() : null;
      stopHeading_ = other.stopHeading_;
      changeLaneType_ = other.changeLaneType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainStop Clone() {
      return new MainStop(this);
    }

    /// <summary>Field number for the "reason_code" field.</summary>
    public const int ReasonCodeFieldNumber = 1;
    private global::Apollo.Planning.StopReasonCode reasonCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StopReasonCode ReasonCode {
      get { return reasonCode_; }
      set {
        reasonCode_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stop_point" field.</summary>
    public const int StopPointFieldNumber = 3;
    private global::Apollo.Common.PointENU stopPoint_;
    /// <summary>
    /// When stopped, the front center of vehicle should be at this point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU StopPoint {
      get { return stopPoint_; }
      set {
        stopPoint_ = value;
      }
    }

    /// <summary>Field number for the "stop_heading" field.</summary>
    public const int StopHeadingFieldNumber = 4;
    private double stopHeading_;
    /// <summary>
    /// When stopped, the heading of the vehicle should be stop_heading.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopHeading {
      get { return stopHeading_; }
      set {
        stopHeading_ = value;
      }
    }

    /// <summary>Field number for the "change_lane_type" field.</summary>
    public const int ChangeLaneTypeFieldNumber = 5;
    private global::Apollo.Routing.ChangeLaneType changeLaneType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.ChangeLaneType ChangeLaneType {
      get { return changeLaneType_; }
      set {
        changeLaneType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReasonCode != other.ReasonCode) return false;
      if (Reason != other.Reason) return false;
      if (!object.Equals(StopPoint, other.StopPoint)) return false;
      if (StopHeading != other.StopHeading) return false;
      if (ChangeLaneType != other.ChangeLaneType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReasonCode != 0) hash ^= ReasonCode.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (stopPoint_ != null) hash ^= StopPoint.GetHashCode();
      if (StopHeading != 0D) hash ^= StopHeading.GetHashCode();
      if (ChangeLaneType != 0) hash ^= ChangeLaneType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReasonCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReasonCode);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (stopPoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StopPoint);
      }
      if (StopHeading != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(StopHeading);
      }
      if (ChangeLaneType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ChangeLaneType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReasonCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReasonCode);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (stopPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopPoint);
      }
      if (StopHeading != 0D) {
        size += 1 + 8;
      }
      if (ChangeLaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeLaneType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainStop other) {
      if (other == null) {
        return;
      }
      if (other.ReasonCode != 0) {
        ReasonCode = other.ReasonCode;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.stopPoint_ != null) {
        if (stopPoint_ == null) {
          stopPoint_ = new global::Apollo.Common.PointENU();
        }
        StopPoint.MergeFrom(other.StopPoint);
      }
      if (other.StopHeading != 0D) {
        StopHeading = other.StopHeading;
      }
      if (other.ChangeLaneType != 0) {
        ChangeLaneType = other.ChangeLaneType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reasonCode_ = (global::Apollo.Planning.StopReasonCode) input.ReadEnum();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            if (stopPoint_ == null) {
              stopPoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(stopPoint_);
            break;
          }
          case 33: {
            StopHeading = input.ReadDouble();
            break;
          }
          case 40: {
            changeLaneType_ = (global::Apollo.Routing.ChangeLaneType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmergencyStopHardBrake : pb::IMessage<EmergencyStopHardBrake> {
    private static readonly pb::MessageParser<EmergencyStopHardBrake> _parser = new pb::MessageParser<EmergencyStopHardBrake>(() => new EmergencyStopHardBrake());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmergencyStopHardBrake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmergencyStopHardBrake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmergencyStopHardBrake(EmergencyStopHardBrake other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmergencyStopHardBrake Clone() {
      return new EmergencyStopHardBrake(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmergencyStopHardBrake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmergencyStopHardBrake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmergencyStopHardBrake other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EmergencyStopCruiseToStop : pb::IMessage<EmergencyStopCruiseToStop> {
    private static readonly pb::MessageParser<EmergencyStopCruiseToStop> _parser = new pb::MessageParser<EmergencyStopCruiseToStop>(() => new EmergencyStopCruiseToStop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmergencyStopCruiseToStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmergencyStopCruiseToStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmergencyStopCruiseToStop(EmergencyStopCruiseToStop other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmergencyStopCruiseToStop Clone() {
      return new EmergencyStopCruiseToStop(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmergencyStopCruiseToStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmergencyStopCruiseToStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmergencyStopCruiseToStop other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MainEmergencyStop : pb::IMessage<MainEmergencyStop> {
    private static readonly pb::MessageParser<MainEmergencyStop> _parser = new pb::MessageParser<MainEmergencyStop>(() => new MainEmergencyStop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainEmergencyStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainEmergencyStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainEmergencyStop(MainEmergencyStop other) : this() {
      reasonCode_ = other.reasonCode_;
      reason_ = other.reason_;
      switch (other.TaskCase) {
        case TaskOneofCase.HardBrake:
          HardBrake = other.HardBrake.Clone();
          break;
        case TaskOneofCase.CruiseToStop:
          CruiseToStop = other.CruiseToStop.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainEmergencyStop Clone() {
      return new MainEmergencyStop(this);
    }

    /// <summary>Field number for the "reason_code" field.</summary>
    public const int ReasonCodeFieldNumber = 1;
    private global::Apollo.Planning.MainEmergencyStop.Types.ReasonCode reasonCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainEmergencyStop.Types.ReasonCode ReasonCode {
      get { return reasonCode_; }
      set {
        reasonCode_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hard_brake" field.</summary>
    public const int HardBrakeFieldNumber = 3;
    /// <summary>
    /// hard brake
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.EmergencyStopHardBrake HardBrake {
      get { return taskCase_ == TaskOneofCase.HardBrake ? (global::Apollo.Planning.EmergencyStopHardBrake) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.HardBrake;
      }
    }

    /// <summary>Field number for the "cruise_to_stop" field.</summary>
    public const int CruiseToStopFieldNumber = 4;
    /// <summary>
    /// cruise to stop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.EmergencyStopCruiseToStop CruiseToStop {
      get { return taskCase_ == TaskOneofCase.CruiseToStop ? (global::Apollo.Planning.EmergencyStopCruiseToStop) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.CruiseToStop;
      }
    }

    private object task_;
    /// <summary>Enum of possible cases for the "task" oneof.</summary>
    public enum TaskOneofCase {
      None = 0,
      HardBrake = 3,
      CruiseToStop = 4,
    }
    private TaskOneofCase taskCase_ = TaskOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskOneofCase TaskCase {
      get { return taskCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTask() {
      taskCase_ = TaskOneofCase.None;
      task_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainEmergencyStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainEmergencyStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReasonCode != other.ReasonCode) return false;
      if (Reason != other.Reason) return false;
      if (!object.Equals(HardBrake, other.HardBrake)) return false;
      if (!object.Equals(CruiseToStop, other.CruiseToStop)) return false;
      if (TaskCase != other.TaskCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReasonCode != 0) hash ^= ReasonCode.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (taskCase_ == TaskOneofCase.HardBrake) hash ^= HardBrake.GetHashCode();
      if (taskCase_ == TaskOneofCase.CruiseToStop) hash ^= CruiseToStop.GetHashCode();
      hash ^= (int) taskCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReasonCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReasonCode);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (taskCase_ == TaskOneofCase.HardBrake) {
        output.WriteRawTag(26);
        output.WriteMessage(HardBrake);
      }
      if (taskCase_ == TaskOneofCase.CruiseToStop) {
        output.WriteRawTag(34);
        output.WriteMessage(CruiseToStop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReasonCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReasonCode);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (taskCase_ == TaskOneofCase.HardBrake) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HardBrake);
      }
      if (taskCase_ == TaskOneofCase.CruiseToStop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CruiseToStop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainEmergencyStop other) {
      if (other == null) {
        return;
      }
      if (other.ReasonCode != 0) {
        ReasonCode = other.ReasonCode;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      switch (other.TaskCase) {
        case TaskOneofCase.HardBrake:
          HardBrake = other.HardBrake;
          break;
        case TaskOneofCase.CruiseToStop:
          CruiseToStop = other.CruiseToStop;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reasonCode_ = (global::Apollo.Planning.MainEmergencyStop.Types.ReasonCode) input.ReadEnum();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            global::Apollo.Planning.EmergencyStopHardBrake subBuilder = new global::Apollo.Planning.EmergencyStopHardBrake();
            if (taskCase_ == TaskOneofCase.HardBrake) {
              subBuilder.MergeFrom(HardBrake);
            }
            input.ReadMessage(subBuilder);
            HardBrake = subBuilder;
            break;
          }
          case 34: {
            global::Apollo.Planning.EmergencyStopCruiseToStop subBuilder = new global::Apollo.Planning.EmergencyStopCruiseToStop();
            if (taskCase_ == TaskOneofCase.CruiseToStop) {
              subBuilder.MergeFrom(CruiseToStop);
            }
            input.ReadMessage(subBuilder);
            CruiseToStop = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MainEmergencyStop message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Unexpected event happened, human driver is  to take over
      /// </summary>
      public enum ReasonCode {
        [pbr::OriginalName("REASONCODE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("ESTOP_REASON_INTERNAL_ERR")] EstopReasonInternalErr = 1,
        [pbr::OriginalName("ESTOP_REASON_COLLISION")] EstopReasonCollision = 2,
        [pbr::OriginalName("ESTOP_REASON_ST_FIND_PATH")] EstopReasonStFindPath = 3,
        [pbr::OriginalName("ESTOP_REASON_ST_MAKE_DECISION")] EstopReasonStMakeDecision = 4,
        [pbr::OriginalName("ESTOP_REASON_SENSOR_ERROR")] EstopReasonSensorError = 5,
      }

    }
    #endregion

  }

  public sealed partial class MainCruise : pb::IMessage<MainCruise> {
    private static readonly pb::MessageParser<MainCruise> _parser = new pb::MessageParser<MainCruise>(() => new MainCruise());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainCruise> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainCruise() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainCruise(MainCruise other) : this() {
      changeLaneType_ = other.changeLaneType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainCruise Clone() {
      return new MainCruise(this);
    }

    /// <summary>Field number for the "change_lane_type" field.</summary>
    public const int ChangeLaneTypeFieldNumber = 1;
    private global::Apollo.Routing.ChangeLaneType changeLaneType_ = 0;
    /// <summary>
    /// cruise current lane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.ChangeLaneType ChangeLaneType {
      get { return changeLaneType_; }
      set {
        changeLaneType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainCruise);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainCruise other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangeLaneType != other.ChangeLaneType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangeLaneType != 0) hash ^= ChangeLaneType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangeLaneType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChangeLaneType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangeLaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeLaneType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainCruise other) {
      if (other == null) {
        return;
      }
      if (other.ChangeLaneType != 0) {
        ChangeLaneType = other.ChangeLaneType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            changeLaneType_ = (global::Apollo.Routing.ChangeLaneType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message is deprecated
  /// </summary>
  public sealed partial class MainChangeLane : pb::IMessage<MainChangeLane> {
    private static readonly pb::MessageParser<MainChangeLane> _parser = new pb::MessageParser<MainChangeLane>(() => new MainChangeLane());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainChangeLane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainChangeLane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainChangeLane(MainChangeLane other) : this() {
      type_ = other.type_;
      defaultLane_ = other.defaultLane_.Clone();
      DefaultLaneStop = other.defaultLaneStop_ != null ? other.DefaultLaneStop.Clone() : null;
      TargetLaneStop = other.targetLaneStop_ != null ? other.TargetLaneStop.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainChangeLane Clone() {
      return new MainChangeLane(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apollo.Planning.MainChangeLane.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainChangeLane.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "default_lane" field.</summary>
    public const int DefaultLaneFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Planning.TargetLane> _repeated_defaultLane_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Planning.TargetLane.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.TargetLane> defaultLane_ = new pbc::RepeatedField<global::Apollo.Planning.TargetLane>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.TargetLane> DefaultLane {
      get { return defaultLane_; }
    }

    /// <summary>Field number for the "default_lane_stop" field.</summary>
    public const int DefaultLaneStopFieldNumber = 3;
    private global::Apollo.Planning.MainStop defaultLaneStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainStop DefaultLaneStop {
      get { return defaultLaneStop_; }
      set {
        defaultLaneStop_ = value;
      }
    }

    /// <summary>Field number for the "target_lane_stop" field.</summary>
    public const int TargetLaneStopFieldNumber = 4;
    private global::Apollo.Planning.MainStop targetLaneStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainStop TargetLaneStop {
      get { return targetLaneStop_; }
      set {
        targetLaneStop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainChangeLane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainChangeLane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!defaultLane_.Equals(other.defaultLane_)) return false;
      if (!object.Equals(DefaultLaneStop, other.DefaultLaneStop)) return false;
      if (!object.Equals(TargetLaneStop, other.TargetLaneStop)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= defaultLane_.GetHashCode();
      if (defaultLaneStop_ != null) hash ^= DefaultLaneStop.GetHashCode();
      if (targetLaneStop_ != null) hash ^= TargetLaneStop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      defaultLane_.WriteTo(output, _repeated_defaultLane_codec);
      if (defaultLaneStop_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultLaneStop);
      }
      if (targetLaneStop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TargetLaneStop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += defaultLane_.CalculateSize(_repeated_defaultLane_codec);
      if (defaultLaneStop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultLaneStop);
      }
      if (targetLaneStop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetLaneStop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainChangeLane other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      defaultLane_.Add(other.defaultLane_);
      if (other.defaultLaneStop_ != null) {
        if (defaultLaneStop_ == null) {
          defaultLaneStop_ = new global::Apollo.Planning.MainStop();
        }
        DefaultLaneStop.MergeFrom(other.DefaultLaneStop);
      }
      if (other.targetLaneStop_ != null) {
        if (targetLaneStop_ == null) {
          targetLaneStop_ = new global::Apollo.Planning.MainStop();
        }
        TargetLaneStop.MergeFrom(other.TargetLaneStop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apollo.Planning.MainChangeLane.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            defaultLane_.AddEntriesFrom(input, _repeated_defaultLane_codec);
            break;
          }
          case 26: {
            if (defaultLaneStop_ == null) {
              defaultLaneStop_ = new global::Apollo.Planning.MainStop();
            }
            input.ReadMessage(defaultLaneStop_);
            break;
          }
          case 34: {
            if (targetLaneStop_ == null) {
              targetLaneStop_ = new global::Apollo.Planning.MainStop();
            }
            input.ReadMessage(targetLaneStop_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MainChangeLane message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("LEFT")] Left = 1,
        [pbr::OriginalName("RIGHT")] Right = 2,
      }

    }
    #endregion

  }

  public sealed partial class MainMissionComplete : pb::IMessage<MainMissionComplete> {
    private static readonly pb::MessageParser<MainMissionComplete> _parser = new pb::MessageParser<MainMissionComplete>(() => new MainMissionComplete());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainMissionComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainMissionComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainMissionComplete(MainMissionComplete other) : this() {
      StopPoint = other.stopPoint_ != null ? other.StopPoint.Clone() : null;
      stopHeading_ = other.stopHeading_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainMissionComplete Clone() {
      return new MainMissionComplete(this);
    }

    /// <summary>Field number for the "stop_point" field.</summary>
    public const int StopPointFieldNumber = 1;
    private global::Apollo.Common.PointENU stopPoint_;
    /// <summary>
    /// arrived at routing destination
    /// When stopped, the front center of vehicle should be at this point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU StopPoint {
      get { return stopPoint_; }
      set {
        stopPoint_ = value;
      }
    }

    /// <summary>Field number for the "stop_heading" field.</summary>
    public const int StopHeadingFieldNumber = 2;
    private double stopHeading_;
    /// <summary>
    /// When stopped, the heading of the vehicle should be stop_heading.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopHeading {
      get { return stopHeading_; }
      set {
        stopHeading_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainMissionComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainMissionComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StopPoint, other.StopPoint)) return false;
      if (StopHeading != other.StopHeading) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stopPoint_ != null) hash ^= StopPoint.GetHashCode();
      if (StopHeading != 0D) hash ^= StopHeading.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stopPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StopPoint);
      }
      if (StopHeading != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StopHeading);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stopPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopPoint);
      }
      if (StopHeading != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainMissionComplete other) {
      if (other == null) {
        return;
      }
      if (other.stopPoint_ != null) {
        if (stopPoint_ == null) {
          stopPoint_ = new global::Apollo.Common.PointENU();
        }
        StopPoint.MergeFrom(other.StopPoint);
      }
      if (other.StopHeading != 0D) {
        StopHeading = other.StopHeading;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stopPoint_ == null) {
              stopPoint_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(stopPoint_);
            break;
          }
          case 17: {
            StopHeading = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainNotReady : pb::IMessage<MainNotReady> {
    private static readonly pb::MessageParser<MainNotReady> _parser = new pb::MessageParser<MainNotReady>(() => new MainNotReady());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainNotReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainNotReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainNotReady(MainNotReady other) : this() {
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainNotReady Clone() {
      return new MainNotReady(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private string reason_ = "";
    /// <summary>
    /// decision system is not ready.
    /// e.g. wait for routing data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainNotReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainNotReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainNotReady other) {
      if (other == null) {
        return;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainParking : pb::IMessage<MainParking> {
    private static readonly pb::MessageParser<MainParking> _parser = new pb::MessageParser<MainParking>(() => new MainParking());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainParking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainParking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainParking(MainParking other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainParking Clone() {
      return new MainParking(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainParking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainParking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainParking other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MainDecision : pb::IMessage<MainDecision> {
    private static readonly pb::MessageParser<MainDecision> _parser = new pb::MessageParser<MainDecision>(() => new MainDecision());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainDecision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainDecision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainDecision(MainDecision other) : this() {
      targetLane_ = other.targetLane_.Clone();
      switch (other.TaskCase) {
        case TaskOneofCase.Cruise:
          Cruise = other.Cruise.Clone();
          break;
        case TaskOneofCase.Stop:
          Stop = other.Stop.Clone();
          break;
        case TaskOneofCase.Estop:
          Estop = other.Estop.Clone();
          break;
        case TaskOneofCase.ChangeLane:
          ChangeLane = other.ChangeLane.Clone();
          break;
        case TaskOneofCase.MissionComplete:
          MissionComplete = other.MissionComplete.Clone();
          break;
        case TaskOneofCase.NotReady:
          NotReady = other.NotReady.Clone();
          break;
        case TaskOneofCase.Parking:
          Parking = other.Parking.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainDecision Clone() {
      return new MainDecision(this);
    }

    /// <summary>Field number for the "cruise" field.</summary>
    public const int CruiseFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainCruise Cruise {
      get { return taskCase_ == TaskOneofCase.Cruise ? (global::Apollo.Planning.MainCruise) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.Cruise;
      }
    }

    /// <summary>Field number for the "stop" field.</summary>
    public const int StopFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainStop Stop {
      get { return taskCase_ == TaskOneofCase.Stop ? (global::Apollo.Planning.MainStop) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.Stop;
      }
    }

    /// <summary>Field number for the "estop" field.</summary>
    public const int EstopFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainEmergencyStop Estop {
      get { return taskCase_ == TaskOneofCase.Estop ? (global::Apollo.Planning.MainEmergencyStop) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.Estop;
      }
    }

    /// <summary>Field number for the "change_lane" field.</summary>
    public const int ChangeLaneFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainChangeLane ChangeLane {
      get { return taskCase_ == TaskOneofCase.ChangeLane ? (global::Apollo.Planning.MainChangeLane) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.ChangeLane;
      }
    }

    /// <summary>Field number for the "mission_complete" field.</summary>
    public const int MissionCompleteFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainMissionComplete MissionComplete {
      get { return taskCase_ == TaskOneofCase.MissionComplete ? (global::Apollo.Planning.MainMissionComplete) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.MissionComplete;
      }
    }

    /// <summary>Field number for the "not_ready" field.</summary>
    public const int NotReadyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainNotReady NotReady {
      get { return taskCase_ == TaskOneofCase.NotReady ? (global::Apollo.Planning.MainNotReady) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.NotReady;
      }
    }

    /// <summary>Field number for the "parking" field.</summary>
    public const int ParkingFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainParking Parking {
      get { return taskCase_ == TaskOneofCase.Parking ? (global::Apollo.Planning.MainParking) task_ : null; }
      set {
        task_ = value;
        taskCase_ = value == null ? TaskOneofCase.None : TaskOneofCase.Parking;
      }
    }

    /// <summary>Field number for the "target_lane" field.</summary>
    public const int TargetLaneFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Planning.TargetLane> _repeated_targetLane_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Planning.TargetLane.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.TargetLane> targetLane_ = new pbc::RepeatedField<global::Apollo.Planning.TargetLane>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.TargetLane> TargetLane {
      get { return targetLane_; }
    }

    private object task_;
    /// <summary>Enum of possible cases for the "task" oneof.</summary>
    public enum TaskOneofCase {
      None = 0,
      Cruise = 1,
      Stop = 2,
      Estop = 3,
      ChangeLane = 4,
      MissionComplete = 6,
      NotReady = 7,
      Parking = 8,
    }
    private TaskOneofCase taskCase_ = TaskOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskOneofCase TaskCase {
      get { return taskCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTask() {
      taskCase_ = TaskOneofCase.None;
      task_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainDecision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainDecision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Cruise, other.Cruise)) return false;
      if (!object.Equals(Stop, other.Stop)) return false;
      if (!object.Equals(Estop, other.Estop)) return false;
      if (!object.Equals(ChangeLane, other.ChangeLane)) return false;
      if (!object.Equals(MissionComplete, other.MissionComplete)) return false;
      if (!object.Equals(NotReady, other.NotReady)) return false;
      if (!object.Equals(Parking, other.Parking)) return false;
      if(!targetLane_.Equals(other.targetLane_)) return false;
      if (TaskCase != other.TaskCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (taskCase_ == TaskOneofCase.Cruise) hash ^= Cruise.GetHashCode();
      if (taskCase_ == TaskOneofCase.Stop) hash ^= Stop.GetHashCode();
      if (taskCase_ == TaskOneofCase.Estop) hash ^= Estop.GetHashCode();
      if (taskCase_ == TaskOneofCase.ChangeLane) hash ^= ChangeLane.GetHashCode();
      if (taskCase_ == TaskOneofCase.MissionComplete) hash ^= MissionComplete.GetHashCode();
      if (taskCase_ == TaskOneofCase.NotReady) hash ^= NotReady.GetHashCode();
      if (taskCase_ == TaskOneofCase.Parking) hash ^= Parking.GetHashCode();
      hash ^= targetLane_.GetHashCode();
      hash ^= (int) taskCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (taskCase_ == TaskOneofCase.Cruise) {
        output.WriteRawTag(10);
        output.WriteMessage(Cruise);
      }
      if (taskCase_ == TaskOneofCase.Stop) {
        output.WriteRawTag(18);
        output.WriteMessage(Stop);
      }
      if (taskCase_ == TaskOneofCase.Estop) {
        output.WriteRawTag(26);
        output.WriteMessage(Estop);
      }
      if (taskCase_ == TaskOneofCase.ChangeLane) {
        output.WriteRawTag(34);
        output.WriteMessage(ChangeLane);
      }
      targetLane_.WriteTo(output, _repeated_targetLane_codec);
      if (taskCase_ == TaskOneofCase.MissionComplete) {
        output.WriteRawTag(50);
        output.WriteMessage(MissionComplete);
      }
      if (taskCase_ == TaskOneofCase.NotReady) {
        output.WriteRawTag(58);
        output.WriteMessage(NotReady);
      }
      if (taskCase_ == TaskOneofCase.Parking) {
        output.WriteRawTag(66);
        output.WriteMessage(Parking);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (taskCase_ == TaskOneofCase.Cruise) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cruise);
      }
      if (taskCase_ == TaskOneofCase.Stop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stop);
      }
      if (taskCase_ == TaskOneofCase.Estop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Estop);
      }
      if (taskCase_ == TaskOneofCase.ChangeLane) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeLane);
      }
      if (taskCase_ == TaskOneofCase.MissionComplete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissionComplete);
      }
      if (taskCase_ == TaskOneofCase.NotReady) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotReady);
      }
      if (taskCase_ == TaskOneofCase.Parking) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parking);
      }
      size += targetLane_.CalculateSize(_repeated_targetLane_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainDecision other) {
      if (other == null) {
        return;
      }
      targetLane_.Add(other.targetLane_);
      switch (other.TaskCase) {
        case TaskOneofCase.Cruise:
          Cruise = other.Cruise;
          break;
        case TaskOneofCase.Stop:
          Stop = other.Stop;
          break;
        case TaskOneofCase.Estop:
          Estop = other.Estop;
          break;
        case TaskOneofCase.ChangeLane:
          ChangeLane = other.ChangeLane;
          break;
        case TaskOneofCase.MissionComplete:
          MissionComplete = other.MissionComplete;
          break;
        case TaskOneofCase.NotReady:
          NotReady = other.NotReady;
          break;
        case TaskOneofCase.Parking:
          Parking = other.Parking;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Apollo.Planning.MainCruise subBuilder = new global::Apollo.Planning.MainCruise();
            if (taskCase_ == TaskOneofCase.Cruise) {
              subBuilder.MergeFrom(Cruise);
            }
            input.ReadMessage(subBuilder);
            Cruise = subBuilder;
            break;
          }
          case 18: {
            global::Apollo.Planning.MainStop subBuilder = new global::Apollo.Planning.MainStop();
            if (taskCase_ == TaskOneofCase.Stop) {
              subBuilder.MergeFrom(Stop);
            }
            input.ReadMessage(subBuilder);
            Stop = subBuilder;
            break;
          }
          case 26: {
            global::Apollo.Planning.MainEmergencyStop subBuilder = new global::Apollo.Planning.MainEmergencyStop();
            if (taskCase_ == TaskOneofCase.Estop) {
              subBuilder.MergeFrom(Estop);
            }
            input.ReadMessage(subBuilder);
            Estop = subBuilder;
            break;
          }
          case 34: {
            global::Apollo.Planning.MainChangeLane subBuilder = new global::Apollo.Planning.MainChangeLane();
            if (taskCase_ == TaskOneofCase.ChangeLane) {
              subBuilder.MergeFrom(ChangeLane);
            }
            input.ReadMessage(subBuilder);
            ChangeLane = subBuilder;
            break;
          }
          case 42: {
            targetLane_.AddEntriesFrom(input, _repeated_targetLane_codec);
            break;
          }
          case 50: {
            global::Apollo.Planning.MainMissionComplete subBuilder = new global::Apollo.Planning.MainMissionComplete();
            if (taskCase_ == TaskOneofCase.MissionComplete) {
              subBuilder.MergeFrom(MissionComplete);
            }
            input.ReadMessage(subBuilder);
            MissionComplete = subBuilder;
            break;
          }
          case 58: {
            global::Apollo.Planning.MainNotReady subBuilder = new global::Apollo.Planning.MainNotReady();
            if (taskCase_ == TaskOneofCase.NotReady) {
              subBuilder.MergeFrom(NotReady);
            }
            input.ReadMessage(subBuilder);
            NotReady = subBuilder;
            break;
          }
          case 66: {
            global::Apollo.Planning.MainParking subBuilder = new global::Apollo.Planning.MainParking();
            if (taskCase_ == TaskOneofCase.Parking) {
              subBuilder.MergeFrom(Parking);
            }
            input.ReadMessage(subBuilder);
            Parking = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecisionResult : pb::IMessage<DecisionResult> {
    private static readonly pb::MessageParser<DecisionResult> _parser = new pb::MessageParser<DecisionResult>(() => new DecisionResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecisionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DecisionReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecisionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecisionResult(DecisionResult other) : this() {
      MainDecision = other.mainDecision_ != null ? other.MainDecision.Clone() : null;
      ObjectDecision = other.objectDecision_ != null ? other.ObjectDecision.Clone() : null;
      VehicleSignal = other.vehicleSignal_ != null ? other.VehicleSignal.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecisionResult Clone() {
      return new DecisionResult(this);
    }

    /// <summary>Field number for the "main_decision" field.</summary>
    public const int MainDecisionFieldNumber = 1;
    private global::Apollo.Planning.MainDecision mainDecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MainDecision MainDecision {
      get { return mainDecision_; }
      set {
        mainDecision_ = value;
      }
    }

    /// <summary>Field number for the "object_decision" field.</summary>
    public const int ObjectDecisionFieldNumber = 2;
    private global::Apollo.Planning.ObjectDecisions objectDecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ObjectDecisions ObjectDecision {
      get { return objectDecision_; }
      set {
        objectDecision_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_signal" field.</summary>
    public const int VehicleSignalFieldNumber = 3;
    private global::Apollo.Common.VehicleSignal vehicleSignal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.VehicleSignal VehicleSignal {
      get { return vehicleSignal_; }
      set {
        vehicleSignal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecisionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecisionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MainDecision, other.MainDecision)) return false;
      if (!object.Equals(ObjectDecision, other.ObjectDecision)) return false;
      if (!object.Equals(VehicleSignal, other.VehicleSignal)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mainDecision_ != null) hash ^= MainDecision.GetHashCode();
      if (objectDecision_ != null) hash ^= ObjectDecision.GetHashCode();
      if (vehicleSignal_ != null) hash ^= VehicleSignal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mainDecision_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MainDecision);
      }
      if (objectDecision_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObjectDecision);
      }
      if (vehicleSignal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(VehicleSignal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mainDecision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainDecision);
      }
      if (objectDecision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectDecision);
      }
      if (vehicleSignal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VehicleSignal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecisionResult other) {
      if (other == null) {
        return;
      }
      if (other.mainDecision_ != null) {
        if (mainDecision_ == null) {
          mainDecision_ = new global::Apollo.Planning.MainDecision();
        }
        MainDecision.MergeFrom(other.MainDecision);
      }
      if (other.objectDecision_ != null) {
        if (objectDecision_ == null) {
          objectDecision_ = new global::Apollo.Planning.ObjectDecisions();
        }
        ObjectDecision.MergeFrom(other.ObjectDecision);
      }
      if (other.vehicleSignal_ != null) {
        if (vehicleSignal_ == null) {
          vehicleSignal_ = new global::Apollo.Common.VehicleSignal();
        }
        VehicleSignal.MergeFrom(other.VehicleSignal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mainDecision_ == null) {
              mainDecision_ = new global::Apollo.Planning.MainDecision();
            }
            input.ReadMessage(mainDecision_);
            break;
          }
          case 18: {
            if (objectDecision_ == null) {
              objectDecision_ = new global::Apollo.Planning.ObjectDecisions();
            }
            input.ReadMessage(objectDecision_);
            break;
          }
          case 26: {
            if (vehicleSignal_ == null) {
              vehicleSignal_ = new global::Apollo.Common.VehicleSignal();
            }
            input.ReadMessage(vehicleSignal_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
