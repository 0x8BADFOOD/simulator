// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_piecewise_jerk_path_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/qp_piecewise_jerk_path_config.proto</summary>
  public static partial class QpPiecewiseJerkPathConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/qp_piecewise_jerk_path_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QpPiecewiseJerkPathConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjptb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3FwX3BpZWNld2lzZV9qZXJrX3Bh",
            "dGhfY29uZmlnLnByb3RvEg9hcG9sbG8ucGxhbm5pbmciqQIKGVFwUGllY2V3",
            "aXNlSmVya1BhdGhDb25maWcSFwoPcGF0aF9yZXNvbHV0aW9uGAEgASgBEhIK",
            "CnFwX2RlbHRhX3MYAiABKAESGwoTbWluX2xvb2tfYWhlYWRfdGltZRgDIAEo",
            "ARIfChdtaW5fbG9va19haGVhZF9kaXN0YW5jZRgEIAEoARIWCg5sYXRlcmFs",
            "X2J1ZmZlchgFIAEoARIeChZwYXRoX291dHB1dF9yZXNvbHV0aW9uGAYgASgB",
            "EhAKCGxfd2VpZ2h0GAcgASgBEhEKCWRsX3dlaWdodBgIIAEoARISCgpkZGxf",
            "d2VpZ2h0GAkgASgBEhMKC2RkZGxfd2VpZ2h0GAogASgBEhsKE2d1aWRpbmdf",
            "bGluZV93ZWlnaHQYCyABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QpPiecewiseJerkPathConfig), global::Apollo.Planning.QpPiecewiseJerkPathConfig.Parser, new[]{ "PathResolution", "QpDeltaS", "MinLookAheadTime", "MinLookAheadDistance", "LateralBuffer", "PathOutputResolution", "LWeight", "DlWeight", "DdlWeight", "DddlWeight", "GuidingLineWeight" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QpPiecewiseJerkPathConfig : pb::IMessage<QpPiecewiseJerkPathConfig> {
    private static readonly pb::MessageParser<QpPiecewiseJerkPathConfig> _parser = new pb::MessageParser<QpPiecewiseJerkPathConfig>(() => new QpPiecewiseJerkPathConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QpPiecewiseJerkPathConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpPiecewiseJerkPathConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpPiecewiseJerkPathConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpPiecewiseJerkPathConfig(QpPiecewiseJerkPathConfig other) : this() {
      pathResolution_ = other.pathResolution_;
      qpDeltaS_ = other.qpDeltaS_;
      minLookAheadTime_ = other.minLookAheadTime_;
      minLookAheadDistance_ = other.minLookAheadDistance_;
      lateralBuffer_ = other.lateralBuffer_;
      pathOutputResolution_ = other.pathOutputResolution_;
      lWeight_ = other.lWeight_;
      dlWeight_ = other.dlWeight_;
      ddlWeight_ = other.ddlWeight_;
      dddlWeight_ = other.dddlWeight_;
      guidingLineWeight_ = other.guidingLineWeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpPiecewiseJerkPathConfig Clone() {
      return new QpPiecewiseJerkPathConfig(this);
    }

    /// <summary>Field number for the "path_resolution" field.</summary>
    public const int PathResolutionFieldNumber = 1;
    private double pathResolution_;
    /// <summary>
    /// meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathResolution {
      get { return pathResolution_; }
      set {
        pathResolution_ = value;
      }
    }

    /// <summary>Field number for the "qp_delta_s" field.</summary>
    public const int QpDeltaSFieldNumber = 2;
    private double qpDeltaS_;
    /// <summary>
    /// meteres
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double QpDeltaS {
      get { return qpDeltaS_; }
      set {
        qpDeltaS_ = value;
      }
    }

    /// <summary>Field number for the "min_look_ahead_time" field.</summary>
    public const int MinLookAheadTimeFieldNumber = 3;
    private double minLookAheadTime_;
    /// <summary>
    /// seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinLookAheadTime {
      get { return minLookAheadTime_; }
      set {
        minLookAheadTime_ = value;
      }
    }

    /// <summary>Field number for the "min_look_ahead_distance" field.</summary>
    public const int MinLookAheadDistanceFieldNumber = 4;
    private double minLookAheadDistance_;
    /// <summary>
    /// meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinLookAheadDistance {
      get { return minLookAheadDistance_; }
      set {
        minLookAheadDistance_ = value;
      }
    }

    /// <summary>Field number for the "lateral_buffer" field.</summary>
    public const int LateralBufferFieldNumber = 5;
    private double lateralBuffer_;
    /// <summary>
    /// meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralBuffer {
      get { return lateralBuffer_; }
      set {
        lateralBuffer_ = value;
      }
    }

    /// <summary>Field number for the "path_output_resolution" field.</summary>
    public const int PathOutputResolutionFieldNumber = 6;
    private double pathOutputResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathOutputResolution {
      get { return pathOutputResolution_; }
      set {
        pathOutputResolution_ = value;
      }
    }

    /// <summary>Field number for the "l_weight" field.</summary>
    public const int LWeightFieldNumber = 7;
    private double lWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LWeight {
      get { return lWeight_; }
      set {
        lWeight_ = value;
      }
    }

    /// <summary>Field number for the "dl_weight" field.</summary>
    public const int DlWeightFieldNumber = 8;
    private double dlWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DlWeight {
      get { return dlWeight_; }
      set {
        dlWeight_ = value;
      }
    }

    /// <summary>Field number for the "ddl_weight" field.</summary>
    public const int DdlWeightFieldNumber = 9;
    private double ddlWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DdlWeight {
      get { return ddlWeight_; }
      set {
        ddlWeight_ = value;
      }
    }

    /// <summary>Field number for the "dddl_weight" field.</summary>
    public const int DddlWeightFieldNumber = 10;
    private double dddlWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DddlWeight {
      get { return dddlWeight_; }
      set {
        dddlWeight_ = value;
      }
    }

    /// <summary>Field number for the "guiding_line_weight" field.</summary>
    public const int GuidingLineWeightFieldNumber = 11;
    private double guidingLineWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GuidingLineWeight {
      get { return guidingLineWeight_; }
      set {
        guidingLineWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QpPiecewiseJerkPathConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QpPiecewiseJerkPathConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathResolution != other.PathResolution) return false;
      if (QpDeltaS != other.QpDeltaS) return false;
      if (MinLookAheadTime != other.MinLookAheadTime) return false;
      if (MinLookAheadDistance != other.MinLookAheadDistance) return false;
      if (LateralBuffer != other.LateralBuffer) return false;
      if (PathOutputResolution != other.PathOutputResolution) return false;
      if (LWeight != other.LWeight) return false;
      if (DlWeight != other.DlWeight) return false;
      if (DdlWeight != other.DdlWeight) return false;
      if (DddlWeight != other.DddlWeight) return false;
      if (GuidingLineWeight != other.GuidingLineWeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PathResolution != 0D) hash ^= PathResolution.GetHashCode();
      if (QpDeltaS != 0D) hash ^= QpDeltaS.GetHashCode();
      if (MinLookAheadTime != 0D) hash ^= MinLookAheadTime.GetHashCode();
      if (MinLookAheadDistance != 0D) hash ^= MinLookAheadDistance.GetHashCode();
      if (LateralBuffer != 0D) hash ^= LateralBuffer.GetHashCode();
      if (PathOutputResolution != 0D) hash ^= PathOutputResolution.GetHashCode();
      if (LWeight != 0D) hash ^= LWeight.GetHashCode();
      if (DlWeight != 0D) hash ^= DlWeight.GetHashCode();
      if (DdlWeight != 0D) hash ^= DdlWeight.GetHashCode();
      if (DddlWeight != 0D) hash ^= DddlWeight.GetHashCode();
      if (GuidingLineWeight != 0D) hash ^= GuidingLineWeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PathResolution != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PathResolution);
      }
      if (QpDeltaS != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(QpDeltaS);
      }
      if (MinLookAheadTime != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MinLookAheadTime);
      }
      if (MinLookAheadDistance != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MinLookAheadDistance);
      }
      if (LateralBuffer != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LateralBuffer);
      }
      if (PathOutputResolution != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PathOutputResolution);
      }
      if (LWeight != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(LWeight);
      }
      if (DlWeight != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DlWeight);
      }
      if (DdlWeight != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(DdlWeight);
      }
      if (DddlWeight != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(DddlWeight);
      }
      if (GuidingLineWeight != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(GuidingLineWeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PathResolution != 0D) {
        size += 1 + 8;
      }
      if (QpDeltaS != 0D) {
        size += 1 + 8;
      }
      if (MinLookAheadTime != 0D) {
        size += 1 + 8;
      }
      if (MinLookAheadDistance != 0D) {
        size += 1 + 8;
      }
      if (LateralBuffer != 0D) {
        size += 1 + 8;
      }
      if (PathOutputResolution != 0D) {
        size += 1 + 8;
      }
      if (LWeight != 0D) {
        size += 1 + 8;
      }
      if (DlWeight != 0D) {
        size += 1 + 8;
      }
      if (DdlWeight != 0D) {
        size += 1 + 8;
      }
      if (DddlWeight != 0D) {
        size += 1 + 8;
      }
      if (GuidingLineWeight != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QpPiecewiseJerkPathConfig other) {
      if (other == null) {
        return;
      }
      if (other.PathResolution != 0D) {
        PathResolution = other.PathResolution;
      }
      if (other.QpDeltaS != 0D) {
        QpDeltaS = other.QpDeltaS;
      }
      if (other.MinLookAheadTime != 0D) {
        MinLookAheadTime = other.MinLookAheadTime;
      }
      if (other.MinLookAheadDistance != 0D) {
        MinLookAheadDistance = other.MinLookAheadDistance;
      }
      if (other.LateralBuffer != 0D) {
        LateralBuffer = other.LateralBuffer;
      }
      if (other.PathOutputResolution != 0D) {
        PathOutputResolution = other.PathOutputResolution;
      }
      if (other.LWeight != 0D) {
        LWeight = other.LWeight;
      }
      if (other.DlWeight != 0D) {
        DlWeight = other.DlWeight;
      }
      if (other.DdlWeight != 0D) {
        DdlWeight = other.DdlWeight;
      }
      if (other.DddlWeight != 0D) {
        DddlWeight = other.DddlWeight;
      }
      if (other.GuidingLineWeight != 0D) {
        GuidingLineWeight = other.GuidingLineWeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PathResolution = input.ReadDouble();
            break;
          }
          case 17: {
            QpDeltaS = input.ReadDouble();
            break;
          }
          case 25: {
            MinLookAheadTime = input.ReadDouble();
            break;
          }
          case 33: {
            MinLookAheadDistance = input.ReadDouble();
            break;
          }
          case 41: {
            LateralBuffer = input.ReadDouble();
            break;
          }
          case 49: {
            PathOutputResolution = input.ReadDouble();
            break;
          }
          case 57: {
            LWeight = input.ReadDouble();
            break;
          }
          case 65: {
            DlWeight = input.ReadDouble();
            break;
          }
          case 73: {
            DdlWeight = input.ReadDouble();
            break;
          }
          case 81: {
            DddlWeight = input.ReadDouble();
            break;
          }
          case 89: {
            GuidingLineWeight = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
