// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/navigator/dbmap/proto/dbmap.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Dbmap {

  /// <summary>Holder for reflection information generated from modules/tools/navigator/dbmap/proto/dbmap.proto</summary>
  public static partial class DbmapReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/tools/navigator/dbmap/proto/dbmap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DbmapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb2R1bGVzL3Rvb2xzL25hdmlnYXRvci9kYm1hcC9wcm90by9kYm1hcC5w",
            "cm90bxIMYXBvbGxvLmRibWFwIkYKB0RCUG9pbnQSCQoBeBgBIAEoARIJCgF5",
            "GAIgASgBEgkKAXoYAyABKAESCQoBcxgEIAEoARIPCgdoZWFkaW5nGAUgASgB",
            "Ii4KBkRCTGluZRIkCgVwb2ludBgBIAMoCzIVLmFwb2xsby5kYm1hcC5EQlBv",
            "aW50Im8KEkRCTmVpZ2hib3VyU2VnbWVudBIPCgdzdGFydF9zGAEgASgBEg0K",
            "BWVuZF9zGAIgASgBEg8KB3BhdGhfaWQYAyABKAkSFAoMcGF0aF9zdGFydF9z",
            "GAQgASgBEhIKCnBhdGhfZW5kX3MYBSABKAEiRAoPREJOZWlnaGJvdXJQYXRo",
            "EjEKB3NlZ21lbnQYASADKAsyIC5hcG9sbG8uZGJtYXAuREJOZWlnaGJvdXJT",
            "ZWdtZW50Iq0CCgZEQlBhdGgSCgoCaWQYASABKAkSIgoEcGF0aBgCIAMoCzIU",
            "LmFwb2xsby5kYm1hcC5EQkxpbmUSKgoMbGVmdF9ib3VuZGF5GAMgAygLMhQu",
            "YXBvbGxvLmRibWFwLkRCTGluZRIrCg1yaWdodF9ib3VuZGF5GAQgAygLMhQu",
            "YXBvbGxvLmRibWFwLkRCTGluZRIwCglsZWZ0X3BhdGgYBSADKAsyHS5hcG9s",
            "bG8uZGJtYXAuREJOZWlnaGJvdXJQYXRoEjEKCnJpZ2h0X3BhdGgYBiADKAsy",
            "HS5hcG9sbG8uZGJtYXAuREJOZWlnaGJvdXJQYXRoEjUKDmR1cGxpY2F0ZV9w",
            "YXRoGAcgAygLMh0uYXBvbGxvLmRibWFwLkRCTmVpZ2hib3VyUGF0aCIsCgVE",
            "Qk1hcBIjCgVwYXRocxgBIAMoCzIULmFwb2xsby5kYm1hcC5EQlBhdGhiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dbmap.DBPoint), global::Apollo.Dbmap.DBPoint.Parser, new[]{ "X", "Y", "Z", "S", "Heading" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dbmap.DBLine), global::Apollo.Dbmap.DBLine.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dbmap.DBNeighbourSegment), global::Apollo.Dbmap.DBNeighbourSegment.Parser, new[]{ "StartS", "EndS", "PathId", "PathStartS", "PathEndS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dbmap.DBNeighbourPath), global::Apollo.Dbmap.DBNeighbourPath.Parser, new[]{ "Segment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dbmap.DBPath), global::Apollo.Dbmap.DBPath.Parser, new[]{ "Id", "Path", "LeftBounday", "RightBounday", "LeftPath", "RightPath", "DuplicatePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dbmap.DBMap), global::Apollo.Dbmap.DBMap.Parser, new[]{ "Paths" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DBPoint : pb::IMessage<DBPoint> {
    private static readonly pb::MessageParser<DBPoint> _parser = new pb::MessageParser<DBPoint>(() => new DBPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dbmap.DbmapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBPoint(DBPoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      s_ = other.s_;
      heading_ = other.heading_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBPoint Clone() {
      return new DBPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 4;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 5;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (S != other.S) return false;
      if (Heading != other.Heading) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      if (S != 0D) hash ^= S.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (S != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(S);
      }
      if (Heading != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Heading);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (S != 0D) {
        size += 1 + 8;
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBPoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            S = input.ReadDouble();
            break;
          }
          case 41: {
            Heading = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DBLine : pb::IMessage<DBLine> {
    private static readonly pb::MessageParser<DBLine> _parser = new pb::MessageParser<DBLine>(() => new DBLine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dbmap.DbmapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBLine(DBLine other) : this() {
      point_ = other.point_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBLine Clone() {
      return new DBLine(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBPoint> _repeated_point_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Dbmap.DBPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBPoint> point_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBPoint> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBLine other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DBNeighbourSegment : pb::IMessage<DBNeighbourSegment> {
    private static readonly pb::MessageParser<DBNeighbourSegment> _parser = new pb::MessageParser<DBNeighbourSegment>(() => new DBNeighbourSegment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBNeighbourSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dbmap.DbmapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBNeighbourSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBNeighbourSegment(DBNeighbourSegment other) : this() {
      startS_ = other.startS_;
      endS_ = other.endS_;
      pathId_ = other.pathId_;
      pathStartS_ = other.pathStartS_;
      pathEndS_ = other.pathEndS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBNeighbourSegment Clone() {
      return new DBNeighbourSegment(this);
    }

    /// <summary>Field number for the "start_s" field.</summary>
    public const int StartSFieldNumber = 1;
    private double startS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartS {
      get { return startS_; }
      set {
        startS_ = value;
      }
    }

    /// <summary>Field number for the "end_s" field.</summary>
    public const int EndSFieldNumber = 2;
    private double endS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EndS {
      get { return endS_; }
      set {
        endS_ = value;
      }
    }

    /// <summary>Field number for the "path_id" field.</summary>
    public const int PathIdFieldNumber = 3;
    private string pathId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathId {
      get { return pathId_; }
      set {
        pathId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path_start_s" field.</summary>
    public const int PathStartSFieldNumber = 4;
    private double pathStartS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathStartS {
      get { return pathStartS_; }
      set {
        pathStartS_ = value;
      }
    }

    /// <summary>Field number for the "path_end_s" field.</summary>
    public const int PathEndSFieldNumber = 5;
    private double pathEndS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathEndS {
      get { return pathEndS_; }
      set {
        pathEndS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBNeighbourSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBNeighbourSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartS != other.StartS) return false;
      if (EndS != other.EndS) return false;
      if (PathId != other.PathId) return false;
      if (PathStartS != other.PathStartS) return false;
      if (PathEndS != other.PathEndS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartS != 0D) hash ^= StartS.GetHashCode();
      if (EndS != 0D) hash ^= EndS.GetHashCode();
      if (PathId.Length != 0) hash ^= PathId.GetHashCode();
      if (PathStartS != 0D) hash ^= PathStartS.GetHashCode();
      if (PathEndS != 0D) hash ^= PathEndS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartS != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(StartS);
      }
      if (EndS != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(EndS);
      }
      if (PathId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PathId);
      }
      if (PathStartS != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PathStartS);
      }
      if (PathEndS != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PathEndS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartS != 0D) {
        size += 1 + 8;
      }
      if (EndS != 0D) {
        size += 1 + 8;
      }
      if (PathId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathId);
      }
      if (PathStartS != 0D) {
        size += 1 + 8;
      }
      if (PathEndS != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBNeighbourSegment other) {
      if (other == null) {
        return;
      }
      if (other.StartS != 0D) {
        StartS = other.StartS;
      }
      if (other.EndS != 0D) {
        EndS = other.EndS;
      }
      if (other.PathId.Length != 0) {
        PathId = other.PathId;
      }
      if (other.PathStartS != 0D) {
        PathStartS = other.PathStartS;
      }
      if (other.PathEndS != 0D) {
        PathEndS = other.PathEndS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            StartS = input.ReadDouble();
            break;
          }
          case 17: {
            EndS = input.ReadDouble();
            break;
          }
          case 26: {
            PathId = input.ReadString();
            break;
          }
          case 33: {
            PathStartS = input.ReadDouble();
            break;
          }
          case 41: {
            PathEndS = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DBNeighbourPath : pb::IMessage<DBNeighbourPath> {
    private static readonly pb::MessageParser<DBNeighbourPath> _parser = new pb::MessageParser<DBNeighbourPath>(() => new DBNeighbourPath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBNeighbourPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dbmap.DbmapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBNeighbourPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBNeighbourPath(DBNeighbourPath other) : this() {
      segment_ = other.segment_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBNeighbourPath Clone() {
      return new DBNeighbourPath(this);
    }

    /// <summary>Field number for the "segment" field.</summary>
    public const int SegmentFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBNeighbourSegment> _repeated_segment_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Dbmap.DBNeighbourSegment.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourSegment> segment_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourSegment> Segment {
      get { return segment_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBNeighbourPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBNeighbourPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segment_.Equals(other.segment_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segment_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      segment_.WriteTo(output, _repeated_segment_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segment_.CalculateSize(_repeated_segment_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBNeighbourPath other) {
      if (other == null) {
        return;
      }
      segment_.Add(other.segment_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            segment_.AddEntriesFrom(input, _repeated_segment_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DBPath : pb::IMessage<DBPath> {
    private static readonly pb::MessageParser<DBPath> _parser = new pb::MessageParser<DBPath>(() => new DBPath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dbmap.DbmapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBPath(DBPath other) : this() {
      id_ = other.id_;
      path_ = other.path_.Clone();
      leftBounday_ = other.leftBounday_.Clone();
      rightBounday_ = other.rightBounday_.Clone();
      leftPath_ = other.leftPath_.Clone();
      rightPath_ = other.rightPath_.Clone();
      duplicatePath_ = other.duplicatePath_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBPath Clone() {
      return new DBPath(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBLine> _repeated_path_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Dbmap.DBLine.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBLine> path_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBLine> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "left_bounday" field.</summary>
    public const int LeftBoundayFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBLine> _repeated_leftBounday_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Dbmap.DBLine.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBLine> leftBounday_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBLine> LeftBounday {
      get { return leftBounday_; }
    }

    /// <summary>Field number for the "right_bounday" field.</summary>
    public const int RightBoundayFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBLine> _repeated_rightBounday_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Dbmap.DBLine.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBLine> rightBounday_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBLine> RightBounday {
      get { return rightBounday_; }
    }

    /// <summary>Field number for the "left_path" field.</summary>
    public const int LeftPathFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBNeighbourPath> _repeated_leftPath_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Dbmap.DBNeighbourPath.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath> leftPath_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath> LeftPath {
      get { return leftPath_; }
    }

    /// <summary>Field number for the "right_path" field.</summary>
    public const int RightPathFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBNeighbourPath> _repeated_rightPath_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Dbmap.DBNeighbourPath.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath> rightPath_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath> RightPath {
      get { return rightPath_; }
    }

    /// <summary>Field number for the "duplicate_path" field.</summary>
    public const int DuplicatePathFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBNeighbourPath> _repeated_duplicatePath_codec
        = pb::FieldCodec.ForMessage(58, global::Apollo.Dbmap.DBNeighbourPath.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath> duplicatePath_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBNeighbourPath> DuplicatePath {
      get { return duplicatePath_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!path_.Equals(other.path_)) return false;
      if(!leftBounday_.Equals(other.leftBounday_)) return false;
      if(!rightBounday_.Equals(other.rightBounday_)) return false;
      if(!leftPath_.Equals(other.leftPath_)) return false;
      if(!rightPath_.Equals(other.rightPath_)) return false;
      if(!duplicatePath_.Equals(other.duplicatePath_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= path_.GetHashCode();
      hash ^= leftBounday_.GetHashCode();
      hash ^= rightBounday_.GetHashCode();
      hash ^= leftPath_.GetHashCode();
      hash ^= rightPath_.GetHashCode();
      hash ^= duplicatePath_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      path_.WriteTo(output, _repeated_path_codec);
      leftBounday_.WriteTo(output, _repeated_leftBounday_codec);
      rightBounday_.WriteTo(output, _repeated_rightBounday_codec);
      leftPath_.WriteTo(output, _repeated_leftPath_codec);
      rightPath_.WriteTo(output, _repeated_rightPath_codec);
      duplicatePath_.WriteTo(output, _repeated_duplicatePath_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      size += leftBounday_.CalculateSize(_repeated_leftBounday_codec);
      size += rightBounday_.CalculateSize(_repeated_rightBounday_codec);
      size += leftPath_.CalculateSize(_repeated_leftPath_codec);
      size += rightPath_.CalculateSize(_repeated_rightPath_codec);
      size += duplicatePath_.CalculateSize(_repeated_duplicatePath_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBPath other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      path_.Add(other.path_);
      leftBounday_.Add(other.leftBounday_);
      rightBounday_.Add(other.rightBounday_);
      leftPath_.Add(other.leftPath_);
      rightPath_.Add(other.rightPath_);
      duplicatePath_.Add(other.duplicatePath_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 26: {
            leftBounday_.AddEntriesFrom(input, _repeated_leftBounday_codec);
            break;
          }
          case 34: {
            rightBounday_.AddEntriesFrom(input, _repeated_rightBounday_codec);
            break;
          }
          case 42: {
            leftPath_.AddEntriesFrom(input, _repeated_leftPath_codec);
            break;
          }
          case 50: {
            rightPath_.AddEntriesFrom(input, _repeated_rightPath_codec);
            break;
          }
          case 58: {
            duplicatePath_.AddEntriesFrom(input, _repeated_duplicatePath_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DBMap : pb::IMessage<DBMap> {
    private static readonly pb::MessageParser<DBMap> _parser = new pb::MessageParser<DBMap>(() => new DBMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dbmap.DbmapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBMap(DBMap other) : this() {
      paths_ = other.paths_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBMap Clone() {
      return new DBMap(this);
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Dbmap.DBPath> _repeated_paths_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Dbmap.DBPath.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dbmap.DBPath> paths_ = new pbc::RepeatedField<global::Apollo.Dbmap.DBPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dbmap.DBPath> Paths {
      get { return paths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paths_.Equals(other.paths_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paths_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paths_.WriteTo(output, _repeated_paths_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paths_.CalculateSize(_repeated_paths_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBMap other) {
      if (other == null) {
        return;
      }
      paths_.Add(other.paths_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
