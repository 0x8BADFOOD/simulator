// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_traffic_light.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.V2X {

  /// <summary>Holder for reflection information generated from modules/v2x/proto/v2x_traffic_light.proto</summary>
  public static partial class V2XTrafficLightReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/v2x/proto/v2x_traffic_light.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static V2XTrafficLightReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciltb2R1bGVzL3YyeC9wcm90by92MnhfdHJhZmZpY19saWdodC5wcm90bxIK",
            "YXBvbGxvLnYyeBohbW9kdWxlcy9jb21tb24vcHJvdG8vaGVhZGVyLnByb3Rv",
            "ItgCChJTaW5nbGVUcmFmZmljTGlnaHQSMwoFY29sb3IYASABKA4yJC5hcG9s",
            "bG8udjJ4LlNpbmdsZVRyYWZmaWNMaWdodC5Db2xvchI+ChF0cmFmZmljbGln",
            "aHRfdHlwZRgCIAMoDjIjLmFwb2xsby52MnguU2luZ2xlVHJhZmZpY0xpZ2h0",
            "LlR5cGUSCgoCaWQYAyABKAkSHgoWY29sb3JfcmVtYWluaW5nX3RpbWVfcxgE",
            "IAEoBRIYChByaWdodF90dXJuX2xpZ2h0GAUgASgIIlAKBUNvbG9yEgsKB1VO",
            "S05PV04QABIHCgNSRUQQARIKCgZZRUxMT1cQAhIJCgVHUkVFThADEgkKBUJM",
            "QUNLEAQSDwoLRkxBU0hfR1JFRU4QBSI1CgRUeXBlEgwKCFNUUkFJR0hUEAAS",
            "CAoETEVGVBABEgkKBVJJR0hUEAISCgoGVV9UVVJOEAMieQoXQ3VycmVudExh",
            "bmVUcmFmZmljTGlnaHQSDwoHZ3BzX3hfbRgBIAEoARIPCgdncHNfeV9tGAIg",
            "ASgBEjwKFHNpbmdsZV90cmFmZmljX2xpZ2h0GAMgAygLMh4uYXBvbGxvLnYy",
            "eC5TaW5nbGVUcmFmZmljTGlnaHQipgEKHEludGVyc2VjdGlvblRyYWZmaWNM",
            "aWdodERhdGESJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFk",
            "ZXISRgoZY3VycmVudF9sYW5lX3RyYWZmaWNsaWdodBgCIAEoCzIjLmFwb2xs",
            "by52MnguQ3VycmVudExhbmVUcmFmZmljTGlnaHQSFwoPaW50ZXJzZWN0aW9u",
            "X2lkGAMgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.V2X.SingleTrafficLight), global::Apollo.V2X.SingleTrafficLight.Parser, new[]{ "Color", "TrafficlightType", "Id", "ColorRemainingTimeS", "RightTurnLight" }, null, new[]{ typeof(global::Apollo.V2X.SingleTrafficLight.Types.Color), typeof(global::Apollo.V2X.SingleTrafficLight.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.V2X.CurrentLaneTrafficLight), global::Apollo.V2X.CurrentLaneTrafficLight.Parser, new[]{ "GpsXM", "GpsYM", "SingleTrafficLight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.V2X.IntersectionTrafficLightData), global::Apollo.V2X.IntersectionTrafficLightData.Parser, new[]{ "Header", "CurrentLaneTrafficlight", "IntersectionId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SingleTrafficLight : pb::IMessage<SingleTrafficLight> {
    private static readonly pb::MessageParser<SingleTrafficLight> _parser = new pb::MessageParser<SingleTrafficLight>(() => new SingleTrafficLight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleTrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.V2X.V2XTrafficLightReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTrafficLight(SingleTrafficLight other) : this() {
      color_ = other.color_;
      trafficlightType_ = other.trafficlightType_.Clone();
      id_ = other.id_;
      colorRemainingTimeS_ = other.colorRemainingTimeS_;
      rightTurnLight_ = other.rightTurnLight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTrafficLight Clone() {
      return new SingleTrafficLight(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Apollo.V2X.SingleTrafficLight.Types.Color color_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.V2X.SingleTrafficLight.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "trafficlight_type" field.</summary>
    public const int TrafficlightTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.V2X.SingleTrafficLight.Types.Type> _repeated_trafficlightType_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Apollo.V2X.SingleTrafficLight.Types.Type) x);
    private readonly pbc::RepeatedField<global::Apollo.V2X.SingleTrafficLight.Types.Type> trafficlightType_ = new pbc::RepeatedField<global::Apollo.V2X.SingleTrafficLight.Types.Type>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.V2X.SingleTrafficLight.Types.Type> TrafficlightType {
      get { return trafficlightType_; }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// Traffic light string-ID in the map data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color_remaining_time_s" field.</summary>
    public const int ColorRemainingTimeSFieldNumber = 4;
    private int colorRemainingTimeS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorRemainingTimeS {
      get { return colorRemainingTimeS_; }
      set {
        colorRemainingTimeS_ = value;
      }
    }

    /// <summary>Field number for the "right_turn_light" field.</summary>
    public const int RightTurnLightFieldNumber = 5;
    private bool rightTurnLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RightTurnLight {
      get { return rightTurnLight_; }
      set {
        rightTurnLight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleTrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleTrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if(!trafficlightType_.Equals(other.trafficlightType_)) return false;
      if (Id != other.Id) return false;
      if (ColorRemainingTimeS != other.ColorRemainingTimeS) return false;
      if (RightTurnLight != other.RightTurnLight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color != 0) hash ^= Color.GetHashCode();
      hash ^= trafficlightType_.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ColorRemainingTimeS != 0) hash ^= ColorRemainingTimeS.GetHashCode();
      if (RightTurnLight != false) hash ^= RightTurnLight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Color);
      }
      trafficlightType_.WriteTo(output, _repeated_trafficlightType_codec);
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (ColorRemainingTimeS != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ColorRemainingTimeS);
      }
      if (RightTurnLight != false) {
        output.WriteRawTag(40);
        output.WriteBool(RightTurnLight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      size += trafficlightType_.CalculateSize(_repeated_trafficlightType_codec);
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ColorRemainingTimeS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorRemainingTimeS);
      }
      if (RightTurnLight != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleTrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      trafficlightType_.Add(other.trafficlightType_);
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ColorRemainingTimeS != 0) {
        ColorRemainingTimeS = other.ColorRemainingTimeS;
      }
      if (other.RightTurnLight != false) {
        RightTurnLight = other.RightTurnLight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            color_ = (global::Apollo.V2X.SingleTrafficLight.Types.Color) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            trafficlightType_.AddEntriesFrom(input, _repeated_trafficlightType_codec);
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
          case 32: {
            ColorRemainingTimeS = input.ReadInt32();
            break;
          }
          case 40: {
            RightTurnLight = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SingleTrafficLight message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Color {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("RED")] Red = 1,
        [pbr::OriginalName("YELLOW")] Yellow = 2,
        [pbr::OriginalName("GREEN")] Green = 3,
        [pbr::OriginalName("BLACK")] Black = 4,
        [pbr::OriginalName("FLASH_GREEN")] FlashGreen = 5,
      }

      public enum Type {
        [pbr::OriginalName("STRAIGHT")] Straight = 0,
        [pbr::OriginalName("LEFT")] Left = 1,
        [pbr::OriginalName("RIGHT")] Right = 2,
        [pbr::OriginalName("U_TURN")] UTurn = 3,
      }

    }
    #endregion

  }

  public sealed partial class CurrentLaneTrafficLight : pb::IMessage<CurrentLaneTrafficLight> {
    private static readonly pb::MessageParser<CurrentLaneTrafficLight> _parser = new pb::MessageParser<CurrentLaneTrafficLight>(() => new CurrentLaneTrafficLight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentLaneTrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.V2X.V2XTrafficLightReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentLaneTrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentLaneTrafficLight(CurrentLaneTrafficLight other) : this() {
      gpsXM_ = other.gpsXM_;
      gpsYM_ = other.gpsYM_;
      singleTrafficLight_ = other.singleTrafficLight_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentLaneTrafficLight Clone() {
      return new CurrentLaneTrafficLight(this);
    }

    /// <summary>Field number for the "gps_x_m" field.</summary>
    public const int GpsXMFieldNumber = 1;
    private double gpsXM_;
    /// <summary>
    /// Feature points of lane in the map reference frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GpsXM {
      get { return gpsXM_; }
      set {
        gpsXM_ = value;
      }
    }

    /// <summary>Field number for the "gps_y_m" field.</summary>
    public const int GpsYMFieldNumber = 2;
    private double gpsYM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GpsYM {
      get { return gpsYM_; }
      set {
        gpsYM_ = value;
      }
    }

    /// <summary>Field number for the "single_traffic_light" field.</summary>
    public const int SingleTrafficLightFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.V2X.SingleTrafficLight> _repeated_singleTrafficLight_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.V2X.SingleTrafficLight.Parser);
    private readonly pbc::RepeatedField<global::Apollo.V2X.SingleTrafficLight> singleTrafficLight_ = new pbc::RepeatedField<global::Apollo.V2X.SingleTrafficLight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.V2X.SingleTrafficLight> SingleTrafficLight {
      get { return singleTrafficLight_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentLaneTrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentLaneTrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GpsXM != other.GpsXM) return false;
      if (GpsYM != other.GpsYM) return false;
      if(!singleTrafficLight_.Equals(other.singleTrafficLight_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GpsXM != 0D) hash ^= GpsXM.GetHashCode();
      if (GpsYM != 0D) hash ^= GpsYM.GetHashCode();
      hash ^= singleTrafficLight_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GpsXM != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(GpsXM);
      }
      if (GpsYM != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(GpsYM);
      }
      singleTrafficLight_.WriteTo(output, _repeated_singleTrafficLight_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GpsXM != 0D) {
        size += 1 + 8;
      }
      if (GpsYM != 0D) {
        size += 1 + 8;
      }
      size += singleTrafficLight_.CalculateSize(_repeated_singleTrafficLight_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentLaneTrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.GpsXM != 0D) {
        GpsXM = other.GpsXM;
      }
      if (other.GpsYM != 0D) {
        GpsYM = other.GpsYM;
      }
      singleTrafficLight_.Add(other.singleTrafficLight_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            GpsXM = input.ReadDouble();
            break;
          }
          case 17: {
            GpsYM = input.ReadDouble();
            break;
          }
          case 26: {
            singleTrafficLight_.AddEntriesFrom(input, _repeated_singleTrafficLight_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntersectionTrafficLightData : pb::IMessage<IntersectionTrafficLightData> {
    private static readonly pb::MessageParser<IntersectionTrafficLightData> _parser = new pb::MessageParser<IntersectionTrafficLightData>(() => new IntersectionTrafficLightData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntersectionTrafficLightData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.V2X.V2XTrafficLightReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntersectionTrafficLightData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntersectionTrafficLightData(IntersectionTrafficLightData other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      CurrentLaneTrafficlight = other.currentLaneTrafficlight_ != null ? other.CurrentLaneTrafficlight.Clone() : null;
      intersectionId_ = other.intersectionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntersectionTrafficLightData Clone() {
      return new IntersectionTrafficLightData(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "current_lane_trafficlight" field.</summary>
    public const int CurrentLaneTrafficlightFieldNumber = 2;
    private global::Apollo.V2X.CurrentLaneTrafficLight currentLaneTrafficlight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.V2X.CurrentLaneTrafficLight CurrentLaneTrafficlight {
      get { return currentLaneTrafficlight_; }
      set {
        currentLaneTrafficlight_ = value;
      }
    }

    /// <summary>Field number for the "intersection_id" field.</summary>
    public const int IntersectionIdFieldNumber = 3;
    private int intersectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntersectionId {
      get { return intersectionId_; }
      set {
        intersectionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntersectionTrafficLightData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntersectionTrafficLightData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(CurrentLaneTrafficlight, other.CurrentLaneTrafficlight)) return false;
      if (IntersectionId != other.IntersectionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (currentLaneTrafficlight_ != null) hash ^= CurrentLaneTrafficlight.GetHashCode();
      if (IntersectionId != 0) hash ^= IntersectionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (currentLaneTrafficlight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentLaneTrafficlight);
      }
      if (IntersectionId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IntersectionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (currentLaneTrafficlight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentLaneTrafficlight);
      }
      if (IntersectionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntersectionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntersectionTrafficLightData other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.currentLaneTrafficlight_ != null) {
        if (currentLaneTrafficlight_ == null) {
          currentLaneTrafficlight_ = new global::Apollo.V2X.CurrentLaneTrafficLight();
        }
        CurrentLaneTrafficlight.MergeFrom(other.CurrentLaneTrafficlight);
      }
      if (other.IntersectionId != 0) {
        IntersectionId = other.IntersectionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (currentLaneTrafficlight_ == null) {
              currentLaneTrafficlight_ = new global::Apollo.V2X.CurrentLaneTrafficLight();
            }
            input.ReadMessage(currentLaneTrafficlight_);
            break;
          }
          case 24: {
            IntersectionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
