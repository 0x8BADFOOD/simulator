// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/relative_map_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.RelativeMap {

  /// <summary>Holder for reflection information generated from modules/map/relative_map/proto/relative_map_config.proto</summary>
  public static partial class RelativeMapConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/map/relative_map/proto/relative_map_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RelativeMapConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhtb2R1bGVzL21hcC9yZWxhdGl2ZV9tYXAvcHJvdG8vcmVsYXRpdmVfbWFw",
            "X2NvbmZpZy5wcm90bxITYXBvbGxvLnJlbGF0aXZlX21hcCJqChJNYXBHZW5l",
            "cmF0aW9uUGFyYW0SGgoSZGVmYXVsdF9sZWZ0X3dpZHRoGAEgASgBEhsKE2Rl",
            "ZmF1bHRfcmlnaHRfd2lkdGgYAiABKAESGwoTZGVmYXVsdF9zcGVlZF9saW1p",
            "dBgDIAEoASKTBAoUTmF2aWdhdGlvbkxhbmVDb25maWcSHwoXbWluX2xhbmVf",
            "bWFya2VyX3F1YWxpdHkYASABKAESSQoLbGFuZV9zb3VyY2UYAiABKA4yNC5h",
            "cG9sbG8ucmVsYXRpdmVfbWFwLk5hdmlnYXRpb25MYW5lQ29uZmlnLkxhbmVT",
            "b3VyY2USJAocbWF4X2xlbl9mcm9tX25hdmlnYXRpb25fbGluZRgDIAEoARIj",
            "ChttaW5fbGVuX2Zvcl9uYXZpZ2F0aW9uX2xhbmUYBCABKAESIwobbWF4X2xl",
            "bl9mb3JfbmF2aWdhdGlvbl9sYW5lGAUgASgBEioKInJhdGlvX25hdmlnYXRp",
            "b25fbGFuZV9sZW5fdG9fc3BlZWQYBiABKAESJwofbWF4X2Rpc3RhbmNlX3Rv",
            "X25hdmlnYXRpb25fbGluZRgHIAEoARIpCiFtaW5fdmlld19yYW5nZV90b191",
            "c2VfbGFuZV9tYXJrZXIYCCABKAESGwoTbWluX2xhbmVfaGFsZl93aWR0aBgJ",
            "IAEoARIbChNtYXhfbGFuZV9oYWxmX3dpZHRoGAogASgBEhoKEmxhbmVfbWFy",
            "a2VyX3dlaWdodBgLIAEoASJJCgpMYW5lU291cmNlEhQKEExBTkVTT1VSQ0Vf",
            "RFVNTVkQABIOCgpQRVJDRVBUSU9OEAESFQoRT0ZGTElORV9HRU5FUkFURUQQ",
            "AiKTAQoRUmVsYXRpdmVNYXBDb25maWcSOgoJbWFwX3BhcmFtGAEgASgLMicu",
            "YXBvbGxvLnJlbGF0aXZlX21hcC5NYXBHZW5lcmF0aW9uUGFyYW0SQgoPbmF2",
            "aWdhdGlvbl9sYW5lGAIgASgLMikuYXBvbGxvLnJlbGF0aXZlX21hcC5OYXZp",
            "Z2F0aW9uTGFuZUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.RelativeMap.MapGenerationParam), global::Apollo.RelativeMap.MapGenerationParam.Parser, new[]{ "DefaultLeftWidth", "DefaultRightWidth", "DefaultSpeedLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.RelativeMap.NavigationLaneConfig), global::Apollo.RelativeMap.NavigationLaneConfig.Parser, new[]{ "MinLaneMarkerQuality", "LaneSource", "MaxLenFromNavigationLine", "MinLenForNavigationLane", "MaxLenForNavigationLane", "RatioNavigationLaneLenToSpeed", "MaxDistanceToNavigationLine", "MinViewRangeToUseLaneMarker", "MinLaneHalfWidth", "MaxLaneHalfWidth", "LaneMarkerWeight" }, null, new[]{ typeof(global::Apollo.RelativeMap.NavigationLaneConfig.Types.LaneSource) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.RelativeMap.RelativeMapConfig), global::Apollo.RelativeMap.RelativeMapConfig.Parser, new[]{ "MapParam", "NavigationLane" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MapGenerationParam : pb::IMessage<MapGenerationParam> {
    private static readonly pb::MessageParser<MapGenerationParam> _parser = new pb::MessageParser<MapGenerationParam>(() => new MapGenerationParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapGenerationParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.RelativeMap.RelativeMapConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapGenerationParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapGenerationParam(MapGenerationParam other) : this() {
      defaultLeftWidth_ = other.defaultLeftWidth_;
      defaultRightWidth_ = other.defaultRightWidth_;
      defaultSpeedLimit_ = other.defaultSpeedLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapGenerationParam Clone() {
      return new MapGenerationParam(this);
    }

    /// <summary>Field number for the "default_left_width" field.</summary>
    public const int DefaultLeftWidthFieldNumber = 1;
    private double defaultLeftWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DefaultLeftWidth {
      get { return defaultLeftWidth_; }
      set {
        defaultLeftWidth_ = value;
      }
    }

    /// <summary>Field number for the "default_right_width" field.</summary>
    public const int DefaultRightWidthFieldNumber = 2;
    private double defaultRightWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DefaultRightWidth {
      get { return defaultRightWidth_; }
      set {
        defaultRightWidth_ = value;
      }
    }

    /// <summary>Field number for the "default_speed_limit" field.</summary>
    public const int DefaultSpeedLimitFieldNumber = 3;
    private double defaultSpeedLimit_;
    /// <summary>
    /// default is 65mph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DefaultSpeedLimit {
      get { return defaultSpeedLimit_; }
      set {
        defaultSpeedLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapGenerationParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapGenerationParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefaultLeftWidth != other.DefaultLeftWidth) return false;
      if (DefaultRightWidth != other.DefaultRightWidth) return false;
      if (DefaultSpeedLimit != other.DefaultSpeedLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefaultLeftWidth != 0D) hash ^= DefaultLeftWidth.GetHashCode();
      if (DefaultRightWidth != 0D) hash ^= DefaultRightWidth.GetHashCode();
      if (DefaultSpeedLimit != 0D) hash ^= DefaultSpeedLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefaultLeftWidth != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DefaultLeftWidth);
      }
      if (DefaultRightWidth != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DefaultRightWidth);
      }
      if (DefaultSpeedLimit != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(DefaultSpeedLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefaultLeftWidth != 0D) {
        size += 1 + 8;
      }
      if (DefaultRightWidth != 0D) {
        size += 1 + 8;
      }
      if (DefaultSpeedLimit != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapGenerationParam other) {
      if (other == null) {
        return;
      }
      if (other.DefaultLeftWidth != 0D) {
        DefaultLeftWidth = other.DefaultLeftWidth;
      }
      if (other.DefaultRightWidth != 0D) {
        DefaultRightWidth = other.DefaultRightWidth;
      }
      if (other.DefaultSpeedLimit != 0D) {
        DefaultSpeedLimit = other.DefaultSpeedLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            DefaultLeftWidth = input.ReadDouble();
            break;
          }
          case 17: {
            DefaultRightWidth = input.ReadDouble();
            break;
          }
          case 25: {
            DefaultSpeedLimit = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavigationLaneConfig : pb::IMessage<NavigationLaneConfig> {
    private static readonly pb::MessageParser<NavigationLaneConfig> _parser = new pb::MessageParser<NavigationLaneConfig>(() => new NavigationLaneConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavigationLaneConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.RelativeMap.RelativeMapConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationLaneConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationLaneConfig(NavigationLaneConfig other) : this() {
      minLaneMarkerQuality_ = other.minLaneMarkerQuality_;
      laneSource_ = other.laneSource_;
      maxLenFromNavigationLine_ = other.maxLenFromNavigationLine_;
      minLenForNavigationLane_ = other.minLenForNavigationLane_;
      maxLenForNavigationLane_ = other.maxLenForNavigationLane_;
      ratioNavigationLaneLenToSpeed_ = other.ratioNavigationLaneLenToSpeed_;
      maxDistanceToNavigationLine_ = other.maxDistanceToNavigationLine_;
      minViewRangeToUseLaneMarker_ = other.minViewRangeToUseLaneMarker_;
      minLaneHalfWidth_ = other.minLaneHalfWidth_;
      maxLaneHalfWidth_ = other.maxLaneHalfWidth_;
      laneMarkerWeight_ = other.laneMarkerWeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationLaneConfig Clone() {
      return new NavigationLaneConfig(this);
    }

    /// <summary>Field number for the "min_lane_marker_quality" field.</summary>
    public const int MinLaneMarkerQualityFieldNumber = 1;
    private double minLaneMarkerQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinLaneMarkerQuality {
      get { return minLaneMarkerQuality_; }
      set {
        minLaneMarkerQuality_ = value;
      }
    }

    /// <summary>Field number for the "lane_source" field.</summary>
    public const int LaneSourceFieldNumber = 2;
    private global::Apollo.RelativeMap.NavigationLaneConfig.Types.LaneSource laneSource_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.RelativeMap.NavigationLaneConfig.Types.LaneSource LaneSource {
      get { return laneSource_; }
      set {
        laneSource_ = value;
      }
    }

    /// <summary>Field number for the "max_len_from_navigation_line" field.</summary>
    public const int MaxLenFromNavigationLineFieldNumber = 3;
    private double maxLenFromNavigationLine_;
    /// <summary>
    /// max navigation path length from navigation line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxLenFromNavigationLine {
      get { return maxLenFromNavigationLine_; }
      set {
        maxLenFromNavigationLine_ = value;
      }
    }

    /// <summary>Field number for the "min_len_for_navigation_lane" field.</summary>
    public const int MinLenForNavigationLaneFieldNumber = 4;
    private double minLenForNavigationLane_;
    /// <summary>
    /// min generated navigation lane length
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinLenForNavigationLane {
      get { return minLenForNavigationLane_; }
      set {
        minLenForNavigationLane_ = value;
      }
    }

    /// <summary>Field number for the "max_len_for_navigation_lane" field.</summary>
    public const int MaxLenForNavigationLaneFieldNumber = 5;
    private double maxLenForNavigationLane_;
    /// <summary>
    /// max generated navigation lane length
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxLenForNavigationLane {
      get { return maxLenForNavigationLane_; }
      set {
        maxLenForNavigationLane_ = value;
      }
    }

    /// <summary>Field number for the "ratio_navigation_lane_len_to_speed" field.</summary>
    public const int RatioNavigationLaneLenToSpeedFieldNumber = 6;
    private double ratioNavigationLaneLenToSpeed_;
    /// <summary>
    /// navigation lane length to adv speed ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RatioNavigationLaneLenToSpeed {
      get { return ratioNavigationLaneLenToSpeed_; }
      set {
        ratioNavigationLaneLenToSpeed_ = value;
      }
    }

    /// <summary>Field number for the "max_distance_to_navigation_line" field.</summary>
    public const int MaxDistanceToNavigationLineFieldNumber = 7;
    private double maxDistanceToNavigationLine_;
    /// <summary>
    /// max distance to navigation line in navigation mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxDistanceToNavigationLine {
      get { return maxDistanceToNavigationLine_; }
      set {
        maxDistanceToNavigationLine_ = value;
      }
    }

    /// <summary>Field number for the "min_view_range_to_use_lane_marker" field.</summary>
    public const int MinViewRangeToUseLaneMarkerFieldNumber = 8;
    private double minViewRangeToUseLaneMarker_;
    /// <summary>
    /// min view range to use lane_marker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinViewRangeToUseLaneMarker {
      get { return minViewRangeToUseLaneMarker_; }
      set {
        minViewRangeToUseLaneMarker_ = value;
      }
    }

    /// <summary>Field number for the "min_lane_half_width" field.</summary>
    public const int MinLaneHalfWidthFieldNumber = 9;
    private double minLaneHalfWidth_;
    /// <summary>
    /// min lane half width in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinLaneHalfWidth {
      get { return minLaneHalfWidth_; }
      set {
        minLaneHalfWidth_ = value;
      }
    }

    /// <summary>Field number for the "max_lane_half_width" field.</summary>
    public const int MaxLaneHalfWidthFieldNumber = 10;
    private double maxLaneHalfWidth_;
    /// <summary>
    /// max lane half width in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxLaneHalfWidth {
      get { return maxLaneHalfWidth_; }
      set {
        maxLaneHalfWidth_ = value;
      }
    }

    /// <summary>Field number for the "lane_marker_weight" field.</summary>
    public const int LaneMarkerWeightFieldNumber = 11;
    private double laneMarkerWeight_;
    /// <summary>
    /// weight based on the lane marking detection result when the navigation line
    /// is generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneMarkerWeight {
      get { return laneMarkerWeight_; }
      set {
        laneMarkerWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavigationLaneConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavigationLaneConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinLaneMarkerQuality != other.MinLaneMarkerQuality) return false;
      if (LaneSource != other.LaneSource) return false;
      if (MaxLenFromNavigationLine != other.MaxLenFromNavigationLine) return false;
      if (MinLenForNavigationLane != other.MinLenForNavigationLane) return false;
      if (MaxLenForNavigationLane != other.MaxLenForNavigationLane) return false;
      if (RatioNavigationLaneLenToSpeed != other.RatioNavigationLaneLenToSpeed) return false;
      if (MaxDistanceToNavigationLine != other.MaxDistanceToNavigationLine) return false;
      if (MinViewRangeToUseLaneMarker != other.MinViewRangeToUseLaneMarker) return false;
      if (MinLaneHalfWidth != other.MinLaneHalfWidth) return false;
      if (MaxLaneHalfWidth != other.MaxLaneHalfWidth) return false;
      if (LaneMarkerWeight != other.LaneMarkerWeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinLaneMarkerQuality != 0D) hash ^= MinLaneMarkerQuality.GetHashCode();
      if (LaneSource != 0) hash ^= LaneSource.GetHashCode();
      if (MaxLenFromNavigationLine != 0D) hash ^= MaxLenFromNavigationLine.GetHashCode();
      if (MinLenForNavigationLane != 0D) hash ^= MinLenForNavigationLane.GetHashCode();
      if (MaxLenForNavigationLane != 0D) hash ^= MaxLenForNavigationLane.GetHashCode();
      if (RatioNavigationLaneLenToSpeed != 0D) hash ^= RatioNavigationLaneLenToSpeed.GetHashCode();
      if (MaxDistanceToNavigationLine != 0D) hash ^= MaxDistanceToNavigationLine.GetHashCode();
      if (MinViewRangeToUseLaneMarker != 0D) hash ^= MinViewRangeToUseLaneMarker.GetHashCode();
      if (MinLaneHalfWidth != 0D) hash ^= MinLaneHalfWidth.GetHashCode();
      if (MaxLaneHalfWidth != 0D) hash ^= MaxLaneHalfWidth.GetHashCode();
      if (LaneMarkerWeight != 0D) hash ^= LaneMarkerWeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinLaneMarkerQuality != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MinLaneMarkerQuality);
      }
      if (LaneSource != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LaneSource);
      }
      if (MaxLenFromNavigationLine != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxLenFromNavigationLine);
      }
      if (MinLenForNavigationLane != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MinLenForNavigationLane);
      }
      if (MaxLenForNavigationLane != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MaxLenForNavigationLane);
      }
      if (RatioNavigationLaneLenToSpeed != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RatioNavigationLaneLenToSpeed);
      }
      if (MaxDistanceToNavigationLine != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MaxDistanceToNavigationLine);
      }
      if (MinViewRangeToUseLaneMarker != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(MinViewRangeToUseLaneMarker);
      }
      if (MinLaneHalfWidth != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MinLaneHalfWidth);
      }
      if (MaxLaneHalfWidth != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MaxLaneHalfWidth);
      }
      if (LaneMarkerWeight != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(LaneMarkerWeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinLaneMarkerQuality != 0D) {
        size += 1 + 8;
      }
      if (LaneSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LaneSource);
      }
      if (MaxLenFromNavigationLine != 0D) {
        size += 1 + 8;
      }
      if (MinLenForNavigationLane != 0D) {
        size += 1 + 8;
      }
      if (MaxLenForNavigationLane != 0D) {
        size += 1 + 8;
      }
      if (RatioNavigationLaneLenToSpeed != 0D) {
        size += 1 + 8;
      }
      if (MaxDistanceToNavigationLine != 0D) {
        size += 1 + 8;
      }
      if (MinViewRangeToUseLaneMarker != 0D) {
        size += 1 + 8;
      }
      if (MinLaneHalfWidth != 0D) {
        size += 1 + 8;
      }
      if (MaxLaneHalfWidth != 0D) {
        size += 1 + 8;
      }
      if (LaneMarkerWeight != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavigationLaneConfig other) {
      if (other == null) {
        return;
      }
      if (other.MinLaneMarkerQuality != 0D) {
        MinLaneMarkerQuality = other.MinLaneMarkerQuality;
      }
      if (other.LaneSource != 0) {
        LaneSource = other.LaneSource;
      }
      if (other.MaxLenFromNavigationLine != 0D) {
        MaxLenFromNavigationLine = other.MaxLenFromNavigationLine;
      }
      if (other.MinLenForNavigationLane != 0D) {
        MinLenForNavigationLane = other.MinLenForNavigationLane;
      }
      if (other.MaxLenForNavigationLane != 0D) {
        MaxLenForNavigationLane = other.MaxLenForNavigationLane;
      }
      if (other.RatioNavigationLaneLenToSpeed != 0D) {
        RatioNavigationLaneLenToSpeed = other.RatioNavigationLaneLenToSpeed;
      }
      if (other.MaxDistanceToNavigationLine != 0D) {
        MaxDistanceToNavigationLine = other.MaxDistanceToNavigationLine;
      }
      if (other.MinViewRangeToUseLaneMarker != 0D) {
        MinViewRangeToUseLaneMarker = other.MinViewRangeToUseLaneMarker;
      }
      if (other.MinLaneHalfWidth != 0D) {
        MinLaneHalfWidth = other.MinLaneHalfWidth;
      }
      if (other.MaxLaneHalfWidth != 0D) {
        MaxLaneHalfWidth = other.MaxLaneHalfWidth;
      }
      if (other.LaneMarkerWeight != 0D) {
        LaneMarkerWeight = other.LaneMarkerWeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MinLaneMarkerQuality = input.ReadDouble();
            break;
          }
          case 16: {
            laneSource_ = (global::Apollo.RelativeMap.NavigationLaneConfig.Types.LaneSource) input.ReadEnum();
            break;
          }
          case 25: {
            MaxLenFromNavigationLine = input.ReadDouble();
            break;
          }
          case 33: {
            MinLenForNavigationLane = input.ReadDouble();
            break;
          }
          case 41: {
            MaxLenForNavigationLane = input.ReadDouble();
            break;
          }
          case 49: {
            RatioNavigationLaneLenToSpeed = input.ReadDouble();
            break;
          }
          case 57: {
            MaxDistanceToNavigationLine = input.ReadDouble();
            break;
          }
          case 65: {
            MinViewRangeToUseLaneMarker = input.ReadDouble();
            break;
          }
          case 73: {
            MinLaneHalfWidth = input.ReadDouble();
            break;
          }
          case 81: {
            MaxLaneHalfWidth = input.ReadDouble();
            break;
          }
          case 89: {
            LaneMarkerWeight = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NavigationLaneConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LaneSource {
        [pbr::OriginalName("LANESOURCE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("PERCEPTION")] Perception = 1,
        [pbr::OriginalName("OFFLINE_GENERATED")] OfflineGenerated = 2,
      }

    }
    #endregion

  }

  public sealed partial class RelativeMapConfig : pb::IMessage<RelativeMapConfig> {
    private static readonly pb::MessageParser<RelativeMapConfig> _parser = new pb::MessageParser<RelativeMapConfig>(() => new RelativeMapConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RelativeMapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.RelativeMap.RelativeMapConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelativeMapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelativeMapConfig(RelativeMapConfig other) : this() {
      MapParam = other.mapParam_ != null ? other.MapParam.Clone() : null;
      NavigationLane = other.navigationLane_ != null ? other.NavigationLane.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelativeMapConfig Clone() {
      return new RelativeMapConfig(this);
    }

    /// <summary>Field number for the "map_param" field.</summary>
    public const int MapParamFieldNumber = 1;
    private global::Apollo.RelativeMap.MapGenerationParam mapParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.RelativeMap.MapGenerationParam MapParam {
      get { return mapParam_; }
      set {
        mapParam_ = value;
      }
    }

    /// <summary>Field number for the "navigation_lane" field.</summary>
    public const int NavigationLaneFieldNumber = 2;
    private global::Apollo.RelativeMap.NavigationLaneConfig navigationLane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.RelativeMap.NavigationLaneConfig NavigationLane {
      get { return navigationLane_; }
      set {
        navigationLane_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RelativeMapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RelativeMapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapParam, other.MapParam)) return false;
      if (!object.Equals(NavigationLane, other.NavigationLane)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapParam_ != null) hash ^= MapParam.GetHashCode();
      if (navigationLane_ != null) hash ^= NavigationLane.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapParam_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapParam);
      }
      if (navigationLane_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NavigationLane);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapParam);
      }
      if (navigationLane_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavigationLane);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RelativeMapConfig other) {
      if (other == null) {
        return;
      }
      if (other.mapParam_ != null) {
        if (mapParam_ == null) {
          mapParam_ = new global::Apollo.RelativeMap.MapGenerationParam();
        }
        MapParam.MergeFrom(other.MapParam);
      }
      if (other.navigationLane_ != null) {
        if (navigationLane_ == null) {
          navigationLane_ = new global::Apollo.RelativeMap.NavigationLaneConfig();
        }
        NavigationLane.MergeFrom(other.NavigationLane);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mapParam_ == null) {
              mapParam_ = new global::Apollo.RelativeMap.MapGenerationParam();
            }
            input.ReadMessage(mapParam_);
            break;
          }
          case 18: {
            if (navigationLane_ == null) {
              navigationLane_ = new global::Apollo.RelativeMap.NavigationLaneConfig();
            }
            input.ReadMessage(navigationLane_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
