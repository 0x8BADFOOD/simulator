// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/conti_radar.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers {

  /// <summary>Holder for reflection information generated from modules/drivers/proto/conti_radar.proto</summary>
  public static partial class ContiRadarReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/proto/conti_radar.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContiRadarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cidtb2R1bGVzL2RyaXZlcnMvcHJvdG8vY29udGlfcmFkYXIucHJvdG8SDmFw",
            "b2xsby5kcml2ZXJzGiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFkZXIucHJv",
            "dG8aPm1vZHVsZXMvZHJpdmVycy9yYWRhci9jb250aV9yYWRhci9wcm90by9j",
            "b250aV9yYWRhcl9jb25mLnByb3RvImMKFUNsdXN0ZXJMaXN0U3RhdHVzXzYw",
            "MBIMCgRuZWFyGAEgASgFEgsKA2ZhchgCIAEoBRIUCgxtZWFzX2NvdW50ZXIY",
            "AyABKAUSGQoRaW50ZXJmYWNlX3ZlcnNpb24YBCABKAUiXAoUT2JqZWN0TGlz",
            "dFN0YXR1c182MEESEwoLbm9mX29iamVjdHMYASABKAUSFAoMbWVhc19jb3Vu",
            "dGVyGAIgASgFEhkKEWludGVyZmFjZV92ZXJzaW9uGAMgASgFIuYBCg5SYWRh",
            "clN0YXRlXzIwMRIUCgxtYXhfZGlzdGFuY2UYASABKA0SEwoLcmFkYXJfcG93",
            "ZXIYAiABKA0SOwoLb3V0cHV0X3R5cGUYAyABKA4yJi5hcG9sbG8uZHJpdmVy",
            "cy5jb250aV9yYWRhci5PdXRwdXRUeXBlEj8KDXJjc190aHJlc2hvbGQYBCAB",
            "KA4yKC5hcG9sbG8uZHJpdmVycy5jb250aV9yYWRhci5SY3NUaHJlc2hvbGQS",
            "FAoMc2VuZF9xdWFsaXR5GAUgASgIEhUKDXNlbmRfZXh0X2luZm8YBiABKAgi",
            "wQQKDUNvbnRpUmFkYXJPYnMSJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNv",
            "bW1vbi5IZWFkZXISFgoOY2x1c3Rlcm9ydHJhY2sYAiABKAgSEwoLb2JzdGFj",
            "bGVfaWQYAyABKAUSFgoObG9uZ2l0dWRlX2Rpc3QYBCABKAESFAoMbGF0ZXJh",
            "bF9kaXN0GAUgASgBEhUKDWxvbmdpdHVkZV92ZWwYBiABKAESEwoLbGF0ZXJh",
            "bF92ZWwYByABKAESCwoDcmNzGAggASgBEg8KB2R5bnByb3AYCSABKAUSGgoS",
            "bG9uZ2l0dWRlX2Rpc3Rfcm1zGAogASgBEhgKEGxhdGVyYWxfZGlzdF9ybXMY",
            "CyABKAESGQoRbG9uZ2l0dWRlX3ZlbF9ybXMYDCABKAESFwoPbGF0ZXJhbF92",
            "ZWxfcm1zGA0gASgBEhEKCXByb2JleGlzdBgOIAEoARISCgptZWFzX3N0YXRl",
            "GA8gASgFEhcKD2xvbmdpdHVkZV9hY2NlbBgQIAEoARIVCg1sYXRlcmFsX2Fj",
            "Y2VsGBEgASgBEhcKD29yaXRhdGlvbl9hbmdsZRgSIAEoARIbChNsb25naXR1",
            "ZGVfYWNjZWxfcm1zGBMgASgBEhkKEWxhdGVyYWxfYWNjZWxfcm1zGBQgASgB",
            "EhsKE29yaXRhdGlvbl9hbmdsZV9ybXMYFSABKAESDgoGbGVuZ3RoGBYgASgB",
            "Eg0KBXdpZHRoGBcgASgBEhYKDm9ic3RhY2xlX2NsYXNzGBggASgFIp8CCgpD",
            "b250aVJhZGFyEiUKBmhlYWRlchgBIAEoCzIVLmFwb2xsby5jb21tb24uSGVh",
            "ZGVyEi8KCGNvbnRpb2JzGAIgAygLMh0uYXBvbGxvLmRyaXZlcnMuQ29udGlS",
            "YWRhck9icxIzCgtyYWRhcl9zdGF0ZRgDIAEoCzIeLmFwb2xsby5kcml2ZXJz",
            "LlJhZGFyU3RhdGVfMjAxEkIKE2NsdXN0ZXJfbGlzdF9zdGF0dXMYBCABKAsy",
            "JS5hcG9sbG8uZHJpdmVycy5DbHVzdGVyTGlzdFN0YXR1c182MDASQAoSb2Jq",
            "ZWN0X2xpc3Rfc3RhdHVzGAUgASgLMiQuYXBvbGxvLmRyaXZlcnMuT2JqZWN0",
            "TGlzdFN0YXR1c182MEFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Drivers.Conti_Radar.ContiRadarConfReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.ClusterListStatus_600), global::Apollo.Drivers.ClusterListStatus_600.Parser, new[]{ "Near", "Far", "MeasCounter", "InterfaceVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.ObjectListStatus_60A), global::Apollo.Drivers.ObjectListStatus_60A.Parser, new[]{ "NofObjects", "MeasCounter", "InterfaceVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.RadarState_201), global::Apollo.Drivers.RadarState_201.Parser, new[]{ "MaxDistance", "RadarPower", "OutputType", "RcsThreshold", "SendQuality", "SendExtInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.ContiRadarObs), global::Apollo.Drivers.ContiRadarObs.Parser, new[]{ "Header", "Clusterortrack", "ObstacleId", "LongitudeDist", "LateralDist", "LongitudeVel", "LateralVel", "Rcs", "Dynprop", "LongitudeDistRms", "LateralDistRms", "LongitudeVelRms", "LateralVelRms", "Probexist", "MeasState", "LongitudeAccel", "LateralAccel", "OritationAngle", "LongitudeAccelRms", "LateralAccelRms", "OritationAngleRms", "Length", "Width", "ObstacleClass" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.ContiRadar), global::Apollo.Drivers.ContiRadar.Parser, new[]{ "Header", "Contiobs", "RadarState", "ClusterListStatus", "ObjectListStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClusterListStatus_600 : pb::IMessage<ClusterListStatus_600> {
    private static readonly pb::MessageParser<ClusterListStatus_600> _parser = new pb::MessageParser<ClusterListStatus_600>(() => new ClusterListStatus_600());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterListStatus_600> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.ContiRadarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterListStatus_600() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterListStatus_600(ClusterListStatus_600 other) : this() {
      near_ = other.near_;
      far_ = other.far_;
      measCounter_ = other.measCounter_;
      interfaceVersion_ = other.interfaceVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterListStatus_600 Clone() {
      return new ClusterListStatus_600(this);
    }

    /// <summary>Field number for the "near" field.</summary>
    public const int NearFieldNumber = 1;
    private int near_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Near {
      get { return near_; }
      set {
        near_ = value;
      }
    }

    /// <summary>Field number for the "far" field.</summary>
    public const int FarFieldNumber = 2;
    private int far_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Far {
      get { return far_; }
      set {
        far_ = value;
      }
    }

    /// <summary>Field number for the "meas_counter" field.</summary>
    public const int MeasCounterFieldNumber = 3;
    private int measCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeasCounter {
      get { return measCounter_; }
      set {
        measCounter_ = value;
      }
    }

    /// <summary>Field number for the "interface_version" field.</summary>
    public const int InterfaceVersionFieldNumber = 4;
    private int interfaceVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InterfaceVersion {
      get { return interfaceVersion_; }
      set {
        interfaceVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterListStatus_600);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterListStatus_600 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Near != other.Near) return false;
      if (Far != other.Far) return false;
      if (MeasCounter != other.MeasCounter) return false;
      if (InterfaceVersion != other.InterfaceVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Near != 0) hash ^= Near.GetHashCode();
      if (Far != 0) hash ^= Far.GetHashCode();
      if (MeasCounter != 0) hash ^= MeasCounter.GetHashCode();
      if (InterfaceVersion != 0) hash ^= InterfaceVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Near != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Near);
      }
      if (Far != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Far);
      }
      if (MeasCounter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MeasCounter);
      }
      if (InterfaceVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InterfaceVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Near != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Near);
      }
      if (Far != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Far);
      }
      if (MeasCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeasCounter);
      }
      if (InterfaceVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterfaceVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterListStatus_600 other) {
      if (other == null) {
        return;
      }
      if (other.Near != 0) {
        Near = other.Near;
      }
      if (other.Far != 0) {
        Far = other.Far;
      }
      if (other.MeasCounter != 0) {
        MeasCounter = other.MeasCounter;
      }
      if (other.InterfaceVersion != 0) {
        InterfaceVersion = other.InterfaceVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Near = input.ReadInt32();
            break;
          }
          case 16: {
            Far = input.ReadInt32();
            break;
          }
          case 24: {
            MeasCounter = input.ReadInt32();
            break;
          }
          case 32: {
            InterfaceVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectListStatus_60A : pb::IMessage<ObjectListStatus_60A> {
    private static readonly pb::MessageParser<ObjectListStatus_60A> _parser = new pb::MessageParser<ObjectListStatus_60A>(() => new ObjectListStatus_60A());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectListStatus_60A> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.ContiRadarReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectListStatus_60A() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectListStatus_60A(ObjectListStatus_60A other) : this() {
      nofObjects_ = other.nofObjects_;
      measCounter_ = other.measCounter_;
      interfaceVersion_ = other.interfaceVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectListStatus_60A Clone() {
      return new ObjectListStatus_60A(this);
    }

    /// <summary>Field number for the "nof_objects" field.</summary>
    public const int NofObjectsFieldNumber = 1;
    private int nofObjects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NofObjects {
      get { return nofObjects_; }
      set {
        nofObjects_ = value;
      }
    }

    /// <summary>Field number for the "meas_counter" field.</summary>
    public const int MeasCounterFieldNumber = 2;
    private int measCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeasCounter {
      get { return measCounter_; }
      set {
        measCounter_ = value;
      }
    }

    /// <summary>Field number for the "interface_version" field.</summary>
    public const int InterfaceVersionFieldNumber = 3;
    private int interfaceVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InterfaceVersion {
      get { return interfaceVersion_; }
      set {
        interfaceVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectListStatus_60A);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectListStatus_60A other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NofObjects != other.NofObjects) return false;
      if (MeasCounter != other.MeasCounter) return false;
      if (InterfaceVersion != other.InterfaceVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NofObjects != 0) hash ^= NofObjects.GetHashCode();
      if (MeasCounter != 0) hash ^= MeasCounter.GetHashCode();
      if (InterfaceVersion != 0) hash ^= InterfaceVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NofObjects != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NofObjects);
      }
      if (MeasCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MeasCounter);
      }
      if (InterfaceVersion != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InterfaceVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NofObjects != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NofObjects);
      }
      if (MeasCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeasCounter);
      }
      if (InterfaceVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterfaceVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectListStatus_60A other) {
      if (other == null) {
        return;
      }
      if (other.NofObjects != 0) {
        NofObjects = other.NofObjects;
      }
      if (other.MeasCounter != 0) {
        MeasCounter = other.MeasCounter;
      }
      if (other.InterfaceVersion != 0) {
        InterfaceVersion = other.InterfaceVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NofObjects = input.ReadInt32();
            break;
          }
          case 16: {
            MeasCounter = input.ReadInt32();
            break;
          }
          case 24: {
            InterfaceVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RadarState_201 : pb::IMessage<RadarState_201> {
    private static readonly pb::MessageParser<RadarState_201> _parser = new pb::MessageParser<RadarState_201>(() => new RadarState_201());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RadarState_201> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.ContiRadarReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarState_201() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarState_201(RadarState_201 other) : this() {
      maxDistance_ = other.maxDistance_;
      radarPower_ = other.radarPower_;
      outputType_ = other.outputType_;
      rcsThreshold_ = other.rcsThreshold_;
      sendQuality_ = other.sendQuality_;
      sendExtInfo_ = other.sendExtInfo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarState_201 Clone() {
      return new RadarState_201(this);
    }

    /// <summary>Field number for the "max_distance" field.</summary>
    public const int MaxDistanceFieldNumber = 1;
    private uint maxDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxDistance {
      get { return maxDistance_; }
      set {
        maxDistance_ = value;
      }
    }

    /// <summary>Field number for the "radar_power" field.</summary>
    public const int RadarPowerFieldNumber = 2;
    private uint radarPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadarPower {
      get { return radarPower_; }
      set {
        radarPower_ = value;
      }
    }

    /// <summary>Field number for the "output_type" field.</summary>
    public const int OutputTypeFieldNumber = 3;
    private global::Apollo.Drivers.Conti_Radar.OutputType outputType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Conti_Radar.OutputType OutputType {
      get { return outputType_; }
      set {
        outputType_ = value;
      }
    }

    /// <summary>Field number for the "rcs_threshold" field.</summary>
    public const int RcsThresholdFieldNumber = 4;
    private global::Apollo.Drivers.Conti_Radar.RcsThreshold rcsThreshold_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Conti_Radar.RcsThreshold RcsThreshold {
      get { return rcsThreshold_; }
      set {
        rcsThreshold_ = value;
      }
    }

    /// <summary>Field number for the "send_quality" field.</summary>
    public const int SendQualityFieldNumber = 5;
    private bool sendQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendQuality {
      get { return sendQuality_; }
      set {
        sendQuality_ = value;
      }
    }

    /// <summary>Field number for the "send_ext_info" field.</summary>
    public const int SendExtInfoFieldNumber = 6;
    private bool sendExtInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendExtInfo {
      get { return sendExtInfo_; }
      set {
        sendExtInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RadarState_201);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RadarState_201 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxDistance != other.MaxDistance) return false;
      if (RadarPower != other.RadarPower) return false;
      if (OutputType != other.OutputType) return false;
      if (RcsThreshold != other.RcsThreshold) return false;
      if (SendQuality != other.SendQuality) return false;
      if (SendExtInfo != other.SendExtInfo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxDistance != 0) hash ^= MaxDistance.GetHashCode();
      if (RadarPower != 0) hash ^= RadarPower.GetHashCode();
      if (OutputType != 0) hash ^= OutputType.GetHashCode();
      if (RcsThreshold != 0) hash ^= RcsThreshold.GetHashCode();
      if (SendQuality != false) hash ^= SendQuality.GetHashCode();
      if (SendExtInfo != false) hash ^= SendExtInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxDistance != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxDistance);
      }
      if (RadarPower != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RadarPower);
      }
      if (OutputType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OutputType);
      }
      if (RcsThreshold != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RcsThreshold);
      }
      if (SendQuality != false) {
        output.WriteRawTag(40);
        output.WriteBool(SendQuality);
      }
      if (SendExtInfo != false) {
        output.WriteRawTag(48);
        output.WriteBool(SendExtInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDistance);
      }
      if (RadarPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadarPower);
      }
      if (OutputType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputType);
      }
      if (RcsThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RcsThreshold);
      }
      if (SendQuality != false) {
        size += 1 + 1;
      }
      if (SendExtInfo != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RadarState_201 other) {
      if (other == null) {
        return;
      }
      if (other.MaxDistance != 0) {
        MaxDistance = other.MaxDistance;
      }
      if (other.RadarPower != 0) {
        RadarPower = other.RadarPower;
      }
      if (other.OutputType != 0) {
        OutputType = other.OutputType;
      }
      if (other.RcsThreshold != 0) {
        RcsThreshold = other.RcsThreshold;
      }
      if (other.SendQuality != false) {
        SendQuality = other.SendQuality;
      }
      if (other.SendExtInfo != false) {
        SendExtInfo = other.SendExtInfo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxDistance = input.ReadUInt32();
            break;
          }
          case 16: {
            RadarPower = input.ReadUInt32();
            break;
          }
          case 24: {
            outputType_ = (global::Apollo.Drivers.Conti_Radar.OutputType) input.ReadEnum();
            break;
          }
          case 32: {
            rcsThreshold_ = (global::Apollo.Drivers.Conti_Radar.RcsThreshold) input.ReadEnum();
            break;
          }
          case 40: {
            SendQuality = input.ReadBool();
            break;
          }
          case 48: {
            SendExtInfo = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///                x axis  ^
  ///                        | longitude_dist
  ///                        |
  ///                        |
  ///                        |
  ///          lateral_dist  |
  ///          y axis        |
  ///        &lt;----------------
  ///        ooooooooooooo   //radar front surface
  /// </summary>
  public sealed partial class ContiRadarObs : pb::IMessage<ContiRadarObs> {
    private static readonly pb::MessageParser<ContiRadarObs> _parser = new pb::MessageParser<ContiRadarObs>(() => new ContiRadarObs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContiRadarObs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.ContiRadarReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadarObs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadarObs(ContiRadarObs other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      clusterortrack_ = other.clusterortrack_;
      obstacleId_ = other.obstacleId_;
      longitudeDist_ = other.longitudeDist_;
      lateralDist_ = other.lateralDist_;
      longitudeVel_ = other.longitudeVel_;
      lateralVel_ = other.lateralVel_;
      rcs_ = other.rcs_;
      dynprop_ = other.dynprop_;
      longitudeDistRms_ = other.longitudeDistRms_;
      lateralDistRms_ = other.lateralDistRms_;
      longitudeVelRms_ = other.longitudeVelRms_;
      lateralVelRms_ = other.lateralVelRms_;
      probexist_ = other.probexist_;
      measState_ = other.measState_;
      longitudeAccel_ = other.longitudeAccel_;
      lateralAccel_ = other.lateralAccel_;
      oritationAngle_ = other.oritationAngle_;
      longitudeAccelRms_ = other.longitudeAccelRms_;
      lateralAccelRms_ = other.lateralAccelRms_;
      oritationAngleRms_ = other.oritationAngleRms_;
      length_ = other.length_;
      width_ = other.width_;
      obstacleClass_ = other.obstacleClass_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadarObs Clone() {
      return new ContiRadarObs(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "clusterortrack" field.</summary>
    public const int ClusterortrackFieldNumber = 2;
    private bool clusterortrack_;
    /// <summary>
    /// 0 = track, 1 = cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clusterortrack {
      get { return clusterortrack_; }
      set {
        clusterortrack_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_id" field.</summary>
    public const int ObstacleIdFieldNumber = 3;
    private int obstacleId_;
    /// <summary>
    /// obstacle Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleId {
      get { return obstacleId_; }
      set {
        obstacleId_ = value;
      }
    }

    /// <summary>Field number for the "longitude_dist" field.</summary>
    public const int LongitudeDistFieldNumber = 4;
    private double longitudeDist_;
    /// <summary>
    /// longitude distance to the radar; (+) = forward; unit = m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeDist {
      get { return longitudeDist_; }
      set {
        longitudeDist_ = value;
      }
    }

    /// <summary>Field number for the "lateral_dist" field.</summary>
    public const int LateralDistFieldNumber = 5;
    private double lateralDist_;
    /// <summary>
    /// lateral distance to the radar; (+) = left; unit = m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralDist {
      get { return lateralDist_; }
      set {
        lateralDist_ = value;
      }
    }

    /// <summary>Field number for the "longitude_vel" field.</summary>
    public const int LongitudeVelFieldNumber = 6;
    private double longitudeVel_;
    /// <summary>
    /// longitude velocity to the radar; (+) = forward; unit = m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeVel {
      get { return longitudeVel_; }
      set {
        longitudeVel_ = value;
      }
    }

    /// <summary>Field number for the "lateral_vel" field.</summary>
    public const int LateralVelFieldNumber = 7;
    private double lateralVel_;
    /// <summary>
    /// lateral velocity to the radar; (+) = left; unit = m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralVel {
      get { return lateralVel_; }
      set {
        lateralVel_ = value;
      }
    }

    /// <summary>Field number for the "rcs" field.</summary>
    public const int RcsFieldNumber = 8;
    private double rcs_;
    /// <summary>
    /// obstacle Radar Cross-Section; unit = dBsm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rcs {
      get { return rcs_; }
      set {
        rcs_ = value;
      }
    }

    /// <summary>Field number for the "dynprop" field.</summary>
    public const int DynpropFieldNumber = 9;
    private int dynprop_;
    /// <summary>
    /// 0 = moving, 1 = stationary, 2 = oncoming, 3 = stationary candidate
    /// 4 = unknown, 5 = crossing stationary, 6 = crossing moving, 7 = stopped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dynprop {
      get { return dynprop_; }
      set {
        dynprop_ = value;
      }
    }

    /// <summary>Field number for the "longitude_dist_rms" field.</summary>
    public const int LongitudeDistRmsFieldNumber = 10;
    private double longitudeDistRms_;
    /// <summary>
    /// longitude distance standard deviation to the radar; (+) = forward; unit = m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeDistRms {
      get { return longitudeDistRms_; }
      set {
        longitudeDistRms_ = value;
      }
    }

    /// <summary>Field number for the "lateral_dist_rms" field.</summary>
    public const int LateralDistRmsFieldNumber = 11;
    private double lateralDistRms_;
    /// <summary>
    /// lateral distance standard deviation to the radar; (+) = left; unit = m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralDistRms {
      get { return lateralDistRms_; }
      set {
        lateralDistRms_ = value;
      }
    }

    /// <summary>Field number for the "longitude_vel_rms" field.</summary>
    public const int LongitudeVelRmsFieldNumber = 12;
    private double longitudeVelRms_;
    /// <summary>
    /// longitude velocity standard deviation to the radar; (+) = forward; unit =
    /// m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeVelRms {
      get { return longitudeVelRms_; }
      set {
        longitudeVelRms_ = value;
      }
    }

    /// <summary>Field number for the "lateral_vel_rms" field.</summary>
    public const int LateralVelRmsFieldNumber = 13;
    private double lateralVelRms_;
    /// <summary>
    /// lateral velocity standard deviation to the radar; (+) = left; unit = m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralVelRms {
      get { return lateralVelRms_; }
      set {
        lateralVelRms_ = value;
      }
    }

    /// <summary>Field number for the "probexist" field.</summary>
    public const int ProbexistFieldNumber = 14;
    private double probexist_;
    /// <summary>
    /// obstacle probability of existence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Probexist {
      get { return probexist_; }
      set {
        probexist_ = value;
      }
    }

    /// <summary>Field number for the "meas_state" field.</summary>
    public const int MeasStateFieldNumber = 15;
    private int measState_;
    /// <summary>
    /// The following is only valid for the track object message
    /// 0 = deleted, 1 = new, 2 = measured, 3 = predicted, 4 = deleted for, 5 = new
    /// from merge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeasState {
      get { return measState_; }
      set {
        measState_ = value;
      }
    }

    /// <summary>Field number for the "longitude_accel" field.</summary>
    public const int LongitudeAccelFieldNumber = 16;
    private double longitudeAccel_;
    /// <summary>
    /// longitude acceleration to the radar; (+) = forward; unit = m/s2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeAccel {
      get { return longitudeAccel_; }
      set {
        longitudeAccel_ = value;
      }
    }

    /// <summary>Field number for the "lateral_accel" field.</summary>
    public const int LateralAccelFieldNumber = 17;
    private double lateralAccel_;
    /// <summary>
    /// lateral acceleration to the radar; (+) = left; unit = m/s2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralAccel {
      get { return lateralAccel_; }
      set {
        lateralAccel_ = value;
      }
    }

    /// <summary>Field number for the "oritation_angle" field.</summary>
    public const int OritationAngleFieldNumber = 18;
    private double oritationAngle_;
    /// <summary>
    /// orientation angle to the radar; (+) = counterclockwise; unit = degree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OritationAngle {
      get { return oritationAngle_; }
      set {
        oritationAngle_ = value;
      }
    }

    /// <summary>Field number for the "longitude_accel_rms" field.</summary>
    public const int LongitudeAccelRmsFieldNumber = 19;
    private double longitudeAccelRms_;
    /// <summary>
    /// longitude acceleration standard deviation to the radar; (+) = forward; unit
    /// = m/s2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeAccelRms {
      get { return longitudeAccelRms_; }
      set {
        longitudeAccelRms_ = value;
      }
    }

    /// <summary>Field number for the "lateral_accel_rms" field.</summary>
    public const int LateralAccelRmsFieldNumber = 20;
    private double lateralAccelRms_;
    /// <summary>
    /// lateral acceleration standard deviation to the radar; (+) = left; unit =
    /// m/s2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralAccelRms {
      get { return lateralAccelRms_; }
      set {
        lateralAccelRms_ = value;
      }
    }

    /// <summary>Field number for the "oritation_angle_rms" field.</summary>
    public const int OritationAngleRmsFieldNumber = 21;
    private double oritationAngleRms_;
    /// <summary>
    /// orientation angle standard deviation to the radar; (+) = counterclockwise;
    /// unit = degree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OritationAngleRms {
      get { return oritationAngleRms_; }
      set {
        oritationAngleRms_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 22;
    private double length_;
    /// <summary>
    /// obstacle length; unit = m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 23;
    private double width_;
    /// <summary>
    /// obstacle width; unit = m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_class" field.</summary>
    public const int ObstacleClassFieldNumber = 24;
    private int obstacleClass_;
    /// <summary>
    /// 0: point; 1: car; 2: truck; 3: pedestrian; 4: motorcycle; 5: bicycle; 6:
    /// wide; 7: unknown
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleClass {
      get { return obstacleClass_; }
      set {
        obstacleClass_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContiRadarObs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContiRadarObs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Clusterortrack != other.Clusterortrack) return false;
      if (ObstacleId != other.ObstacleId) return false;
      if (LongitudeDist != other.LongitudeDist) return false;
      if (LateralDist != other.LateralDist) return false;
      if (LongitudeVel != other.LongitudeVel) return false;
      if (LateralVel != other.LateralVel) return false;
      if (Rcs != other.Rcs) return false;
      if (Dynprop != other.Dynprop) return false;
      if (LongitudeDistRms != other.LongitudeDistRms) return false;
      if (LateralDistRms != other.LateralDistRms) return false;
      if (LongitudeVelRms != other.LongitudeVelRms) return false;
      if (LateralVelRms != other.LateralVelRms) return false;
      if (Probexist != other.Probexist) return false;
      if (MeasState != other.MeasState) return false;
      if (LongitudeAccel != other.LongitudeAccel) return false;
      if (LateralAccel != other.LateralAccel) return false;
      if (OritationAngle != other.OritationAngle) return false;
      if (LongitudeAccelRms != other.LongitudeAccelRms) return false;
      if (LateralAccelRms != other.LateralAccelRms) return false;
      if (OritationAngleRms != other.OritationAngleRms) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (ObstacleClass != other.ObstacleClass) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Clusterortrack != false) hash ^= Clusterortrack.GetHashCode();
      if (ObstacleId != 0) hash ^= ObstacleId.GetHashCode();
      if (LongitudeDist != 0D) hash ^= LongitudeDist.GetHashCode();
      if (LateralDist != 0D) hash ^= LateralDist.GetHashCode();
      if (LongitudeVel != 0D) hash ^= LongitudeVel.GetHashCode();
      if (LateralVel != 0D) hash ^= LateralVel.GetHashCode();
      if (Rcs != 0D) hash ^= Rcs.GetHashCode();
      if (Dynprop != 0) hash ^= Dynprop.GetHashCode();
      if (LongitudeDistRms != 0D) hash ^= LongitudeDistRms.GetHashCode();
      if (LateralDistRms != 0D) hash ^= LateralDistRms.GetHashCode();
      if (LongitudeVelRms != 0D) hash ^= LongitudeVelRms.GetHashCode();
      if (LateralVelRms != 0D) hash ^= LateralVelRms.GetHashCode();
      if (Probexist != 0D) hash ^= Probexist.GetHashCode();
      if (MeasState != 0) hash ^= MeasState.GetHashCode();
      if (LongitudeAccel != 0D) hash ^= LongitudeAccel.GetHashCode();
      if (LateralAccel != 0D) hash ^= LateralAccel.GetHashCode();
      if (OritationAngle != 0D) hash ^= OritationAngle.GetHashCode();
      if (LongitudeAccelRms != 0D) hash ^= LongitudeAccelRms.GetHashCode();
      if (LateralAccelRms != 0D) hash ^= LateralAccelRms.GetHashCode();
      if (OritationAngleRms != 0D) hash ^= OritationAngleRms.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (ObstacleClass != 0) hash ^= ObstacleClass.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Clusterortrack != false) {
        output.WriteRawTag(16);
        output.WriteBool(Clusterortrack);
      }
      if (ObstacleId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ObstacleId);
      }
      if (LongitudeDist != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LongitudeDist);
      }
      if (LateralDist != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LateralDist);
      }
      if (LongitudeVel != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LongitudeVel);
      }
      if (LateralVel != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(LateralVel);
      }
      if (Rcs != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Rcs);
      }
      if (Dynprop != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Dynprop);
      }
      if (LongitudeDistRms != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(LongitudeDistRms);
      }
      if (LateralDistRms != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(LateralDistRms);
      }
      if (LongitudeVelRms != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(LongitudeVelRms);
      }
      if (LateralVelRms != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(LateralVelRms);
      }
      if (Probexist != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Probexist);
      }
      if (MeasState != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MeasState);
      }
      if (LongitudeAccel != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(LongitudeAccel);
      }
      if (LateralAccel != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(LateralAccel);
      }
      if (OritationAngle != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(OritationAngle);
      }
      if (LongitudeAccelRms != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(LongitudeAccelRms);
      }
      if (LateralAccelRms != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(LateralAccelRms);
      }
      if (OritationAngleRms != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(OritationAngleRms);
      }
      if (Length != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(Width);
      }
      if (ObstacleClass != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(ObstacleClass);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Clusterortrack != false) {
        size += 1 + 1;
      }
      if (ObstacleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleId);
      }
      if (LongitudeDist != 0D) {
        size += 1 + 8;
      }
      if (LateralDist != 0D) {
        size += 1 + 8;
      }
      if (LongitudeVel != 0D) {
        size += 1 + 8;
      }
      if (LateralVel != 0D) {
        size += 1 + 8;
      }
      if (Rcs != 0D) {
        size += 1 + 8;
      }
      if (Dynprop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dynprop);
      }
      if (LongitudeDistRms != 0D) {
        size += 1 + 8;
      }
      if (LateralDistRms != 0D) {
        size += 1 + 8;
      }
      if (LongitudeVelRms != 0D) {
        size += 1 + 8;
      }
      if (LateralVelRms != 0D) {
        size += 1 + 8;
      }
      if (Probexist != 0D) {
        size += 1 + 8;
      }
      if (MeasState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeasState);
      }
      if (LongitudeAccel != 0D) {
        size += 2 + 8;
      }
      if (LateralAccel != 0D) {
        size += 2 + 8;
      }
      if (OritationAngle != 0D) {
        size += 2 + 8;
      }
      if (LongitudeAccelRms != 0D) {
        size += 2 + 8;
      }
      if (LateralAccelRms != 0D) {
        size += 2 + 8;
      }
      if (OritationAngleRms != 0D) {
        size += 2 + 8;
      }
      if (Length != 0D) {
        size += 2 + 8;
      }
      if (Width != 0D) {
        size += 2 + 8;
      }
      if (ObstacleClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ObstacleClass);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContiRadarObs other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Clusterortrack != false) {
        Clusterortrack = other.Clusterortrack;
      }
      if (other.ObstacleId != 0) {
        ObstacleId = other.ObstacleId;
      }
      if (other.LongitudeDist != 0D) {
        LongitudeDist = other.LongitudeDist;
      }
      if (other.LateralDist != 0D) {
        LateralDist = other.LateralDist;
      }
      if (other.LongitudeVel != 0D) {
        LongitudeVel = other.LongitudeVel;
      }
      if (other.LateralVel != 0D) {
        LateralVel = other.LateralVel;
      }
      if (other.Rcs != 0D) {
        Rcs = other.Rcs;
      }
      if (other.Dynprop != 0) {
        Dynprop = other.Dynprop;
      }
      if (other.LongitudeDistRms != 0D) {
        LongitudeDistRms = other.LongitudeDistRms;
      }
      if (other.LateralDistRms != 0D) {
        LateralDistRms = other.LateralDistRms;
      }
      if (other.LongitudeVelRms != 0D) {
        LongitudeVelRms = other.LongitudeVelRms;
      }
      if (other.LateralVelRms != 0D) {
        LateralVelRms = other.LateralVelRms;
      }
      if (other.Probexist != 0D) {
        Probexist = other.Probexist;
      }
      if (other.MeasState != 0) {
        MeasState = other.MeasState;
      }
      if (other.LongitudeAccel != 0D) {
        LongitudeAccel = other.LongitudeAccel;
      }
      if (other.LateralAccel != 0D) {
        LateralAccel = other.LateralAccel;
      }
      if (other.OritationAngle != 0D) {
        OritationAngle = other.OritationAngle;
      }
      if (other.LongitudeAccelRms != 0D) {
        LongitudeAccelRms = other.LongitudeAccelRms;
      }
      if (other.LateralAccelRms != 0D) {
        LateralAccelRms = other.LateralAccelRms;
      }
      if (other.OritationAngleRms != 0D) {
        OritationAngleRms = other.OritationAngleRms;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.ObstacleClass != 0) {
        ObstacleClass = other.ObstacleClass;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            Clusterortrack = input.ReadBool();
            break;
          }
          case 24: {
            ObstacleId = input.ReadInt32();
            break;
          }
          case 33: {
            LongitudeDist = input.ReadDouble();
            break;
          }
          case 41: {
            LateralDist = input.ReadDouble();
            break;
          }
          case 49: {
            LongitudeVel = input.ReadDouble();
            break;
          }
          case 57: {
            LateralVel = input.ReadDouble();
            break;
          }
          case 65: {
            Rcs = input.ReadDouble();
            break;
          }
          case 72: {
            Dynprop = input.ReadInt32();
            break;
          }
          case 81: {
            LongitudeDistRms = input.ReadDouble();
            break;
          }
          case 89: {
            LateralDistRms = input.ReadDouble();
            break;
          }
          case 97: {
            LongitudeVelRms = input.ReadDouble();
            break;
          }
          case 105: {
            LateralVelRms = input.ReadDouble();
            break;
          }
          case 113: {
            Probexist = input.ReadDouble();
            break;
          }
          case 120: {
            MeasState = input.ReadInt32();
            break;
          }
          case 129: {
            LongitudeAccel = input.ReadDouble();
            break;
          }
          case 137: {
            LateralAccel = input.ReadDouble();
            break;
          }
          case 145: {
            OritationAngle = input.ReadDouble();
            break;
          }
          case 153: {
            LongitudeAccelRms = input.ReadDouble();
            break;
          }
          case 161: {
            LateralAccelRms = input.ReadDouble();
            break;
          }
          case 169: {
            OritationAngleRms = input.ReadDouble();
            break;
          }
          case 177: {
            Length = input.ReadDouble();
            break;
          }
          case 185: {
            Width = input.ReadDouble();
            break;
          }
          case 192: {
            ObstacleClass = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContiRadar : pb::IMessage<ContiRadar> {
    private static readonly pb::MessageParser<ContiRadar> _parser = new pb::MessageParser<ContiRadar>(() => new ContiRadar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContiRadar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.ContiRadarReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadar(ContiRadar other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      contiobs_ = other.contiobs_.Clone();
      RadarState = other.radarState_ != null ? other.RadarState.Clone() : null;
      ClusterListStatus = other.clusterListStatus_ != null ? other.ClusterListStatus.Clone() : null;
      ObjectListStatus = other.objectListStatus_ != null ? other.ObjectListStatus.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContiRadar Clone() {
      return new ContiRadar(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "contiobs" field.</summary>
    public const int ContiobsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.ContiRadarObs> _repeated_contiobs_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Drivers.ContiRadarObs.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.ContiRadarObs> contiobs_ = new pbc::RepeatedField<global::Apollo.Drivers.ContiRadarObs>();
    /// <summary>
    /// conti radar obstacle array
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.ContiRadarObs> Contiobs {
      get { return contiobs_; }
    }

    /// <summary>Field number for the "radar_state" field.</summary>
    public const int RadarStateFieldNumber = 3;
    private global::Apollo.Drivers.RadarState_201 radarState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.RadarState_201 RadarState {
      get { return radarState_; }
      set {
        radarState_ = value;
      }
    }

    /// <summary>Field number for the "cluster_list_status" field.</summary>
    public const int ClusterListStatusFieldNumber = 4;
    private global::Apollo.Drivers.ClusterListStatus_600 clusterListStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.ClusterListStatus_600 ClusterListStatus {
      get { return clusterListStatus_; }
      set {
        clusterListStatus_ = value;
      }
    }

    /// <summary>Field number for the "object_list_status" field.</summary>
    public const int ObjectListStatusFieldNumber = 5;
    private global::Apollo.Drivers.ObjectListStatus_60A objectListStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.ObjectListStatus_60A ObjectListStatus {
      get { return objectListStatus_; }
      set {
        objectListStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContiRadar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContiRadar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!contiobs_.Equals(other.contiobs_)) return false;
      if (!object.Equals(RadarState, other.RadarState)) return false;
      if (!object.Equals(ClusterListStatus, other.ClusterListStatus)) return false;
      if (!object.Equals(ObjectListStatus, other.ObjectListStatus)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= contiobs_.GetHashCode();
      if (radarState_ != null) hash ^= RadarState.GetHashCode();
      if (clusterListStatus_ != null) hash ^= ClusterListStatus.GetHashCode();
      if (objectListStatus_ != null) hash ^= ObjectListStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      contiobs_.WriteTo(output, _repeated_contiobs_codec);
      if (radarState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RadarState);
      }
      if (clusterListStatus_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClusterListStatus);
      }
      if (objectListStatus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ObjectListStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += contiobs_.CalculateSize(_repeated_contiobs_codec);
      if (radarState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RadarState);
      }
      if (clusterListStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClusterListStatus);
      }
      if (objectListStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectListStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContiRadar other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      contiobs_.Add(other.contiobs_);
      if (other.radarState_ != null) {
        if (radarState_ == null) {
          radarState_ = new global::Apollo.Drivers.RadarState_201();
        }
        RadarState.MergeFrom(other.RadarState);
      }
      if (other.clusterListStatus_ != null) {
        if (clusterListStatus_ == null) {
          clusterListStatus_ = new global::Apollo.Drivers.ClusterListStatus_600();
        }
        ClusterListStatus.MergeFrom(other.ClusterListStatus);
      }
      if (other.objectListStatus_ != null) {
        if (objectListStatus_ == null) {
          objectListStatus_ = new global::Apollo.Drivers.ObjectListStatus_60A();
        }
        ObjectListStatus.MergeFrom(other.ObjectListStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            contiobs_.AddEntriesFrom(input, _repeated_contiobs_codec);
            break;
          }
          case 26: {
            if (radarState_ == null) {
              radarState_ = new global::Apollo.Drivers.RadarState_201();
            }
            input.ReadMessage(radarState_);
            break;
          }
          case 34: {
            if (clusterListStatus_ == null) {
              clusterListStatus_ = new global::Apollo.Drivers.ClusterListStatus_600();
            }
            input.ReadMessage(clusterListStatus_);
            break;
          }
          case 42: {
            if (objectListStatus_ == null) {
              objectListStatus_ = new global::Apollo.Drivers.ObjectListStatus_60A();
            }
            input.ReadMessage(objectListStatus_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
