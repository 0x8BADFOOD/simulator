// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_raw_observation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Gnss {

  /// <summary>Holder for reflection information generated from modules/drivers/gnss/proto/gnss_raw_observation.proto</summary>
  public static partial class GnssRawObservationReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/gnss/proto/gnss_raw_observation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GnssRawObservationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVtb2R1bGVzL2RyaXZlcnMvZ25zcy9wcm90by9nbnNzX3Jhd19vYnNlcnZh",
            "dGlvbi5wcm90bxITYXBvbGxvLmRyaXZlcnMuZ25zcyL2AQoPQmFuZE9ic2Vy",
            "dmF0aW9uEjAKB2JhbmRfaWQYASABKA4yHy5hcG9sbG8uZHJpdmVycy5nbnNz",
            "Lkduc3NCYW5kSUQSFwoPZnJlcXVlbmN5X3ZhbHVlGAIgASgBEjQKC3BzZXVk",
            "b190eXBlGAMgASgOMh8uYXBvbGxvLmRyaXZlcnMuZ25zcy5Qc2V1ZG9UeXBl",
            "EhQKDHBzZXVkb19yYW5nZRgEIAEoARIVCg1jYXJyaWVyX3BoYXNlGAUgASgB",
            "EhcKD2xvc3NfbG9ja19pbmRleBgGIAEoDRIPCgdkb3BwbGVyGAcgASgBEgsK",
            "A3NuchgIIAEoAiKlAQoUU2F0ZWxsaXRlT2JzZXJ2YXRpb24SDwoHc2F0X3By",
            "bhgBIAEoDRIuCgdzYXRfc3lzGAIgASgOMh0uYXBvbGxvLmRyaXZlcnMuZ25z",
            "cy5HbnNzVHlwZRIUCgxiYW5kX29ic19udW0YAyABKA0SNgoIYmFuZF9vYnMY",
            "BCADKAsyJC5hcG9sbG8uZHJpdmVycy5nbnNzLkJhbmRPYnNlcnZhdGlvbiKu",
            "AgoQRXBvY2hPYnNlcnZhdGlvbhITCgtyZWNlaXZlcl9pZBgBIAEoDRI5Cg5n",
            "bnNzX3RpbWVfdHlwZRgCIAEoDjIhLmFwb2xsby5kcml2ZXJzLmduc3MuR25z",
            "c1RpbWVUeXBlEhEKCWduc3Nfd2VlaxgDIAEoDRIVCg1nbnNzX3NlY29uZF9z",
            "GAQgASgBEhIKCnBvc2l0aW9uX3gYBSABKAESEgoKcG9zaXRpb25feRgGIAEo",
            "ARISCgpwb3NpdGlvbl96GAcgASgBEhMKC2hlYWx0aF9mbGFnGAggASgNEhMK",
            "C3NhdF9vYnNfbnVtGAkgASgNEjoKB3NhdF9vYnMYCiADKAsyKS5hcG9sbG8u",
            "ZHJpdmVycy5nbnNzLlNhdGVsbGl0ZU9ic2VydmF0aW9uIpQFCgxLZXBwbGVy",
            "T3JiaXQSMAoJZ25zc190eXBlGAEgASgOMh0uYXBvbGxvLmRyaXZlcnMuZ25z",
            "cy5HbnNzVHlwZRIPCgdzYXRfcHJuGAIgASgNEjkKDmduc3NfdGltZV90eXBl",
            "GAMgASgOMiEuYXBvbGxvLmRyaXZlcnMuZ25zcy5HbnNzVGltZVR5cGUSDAoE",
            "eWVhchgEIAEoDRINCgVtb250aBgFIAEoDRILCgNkYXkYBiABKA0SDAoEaG91",
            "chgHIAEoDRIOCgZtaW51dGUYCCABKA0SEAoIc2Vjb25kX3MYCSABKAESEAoI",
            "d2Vla19udW0YCiABKA0SEAoIcmVzZXJ2ZWQYCyABKAESCwoDYWYwGAwgASgB",
            "EgsKA2FmMRgNIAEoARILCgNhZjIYDiABKAESDAoEaW9kZRgPIAEoARIOCgZk",
            "ZWx0YW4YECABKAESCgoCbTAYESABKAESCQoBZRgSIAEoARINCgVyb290YRgT",
            "IAEoARILCgN0b2UYFCABKAESCwoDdG9jGBUgASgBEgsKA2NpYxgWIAEoARIL",
            "CgNjcmMYFyABKAESCwoDY2lzGBggASgBEgsKA2NycxgZIAEoARILCgNjdWMY",
            "GiABKAESCwoDY3VzGBsgASgBEg4KBm9tZWdhMBgcIAEoARINCgVvbWVnYRgd",
            "IAEoARIKCgJpMBgeIAEoARIQCghvbWVnYWRvdBgfIAEoARIMCgRpZG90GCAg",
            "ASgBEhgKEGNvZGVzb25MMmNoYW5uZWwYISABKAESEwoLTDJQZGF0YWZsYWcY",
            "IiABKA0SEAoIYWNjdXJhY3kYIyABKA0SDgoGaGVhbHRoGCQgASgNEgsKA3Rn",
            "ZBglIAEoARIMCgRpb2RjGCYgASgBItgECgxHbG9uYXNzT3JiaXQSMAoJZ25z",
            "c190eXBlGAEgASgOMh0uYXBvbGxvLmRyaXZlcnMuZ25zcy5HbnNzVHlwZRIQ",
            "CghzbG90X3BybhgCIAEoDRI5Cg5nbnNzX3RpbWVfdHlwZRgDIAEoDjIhLmFw",
            "b2xsby5kcml2ZXJzLmduc3MuR25zc1RpbWVUeXBlEgsKA3RvZRgEIAEoARIM",
            "CgR5ZWFyGAUgASgNEg0KBW1vbnRoGAYgASgNEgsKA2RheRgHIAEoDRIMCgRo",
            "b3VyGAggASgNEg4KBm1pbnV0ZRgJIAEoDRIQCghzZWNvbmRfcxgKIAEoARIU",
            "CgxmcmVxdWVuY3lfbm8YCyABKAUSEAoId2Vla19udW0YDCABKA0SFQoNd2Vl",
            "a19zZWNvbmRfcxgNIAEoARIKCgJ0axgOIAEoARIUCgxjbG9ja19vZmZzZXQY",
            "DyABKAESEwoLY2xvY2tfZHJpZnQYECABKAESDgoGaGVhbHRoGBEgASgNEhIK",
            "CnBvc2l0aW9uX3gYEiABKAESEgoKcG9zaXRpb25feRgTIAEoARISCgpwb3Np",
            "dGlvbl96GBQgASgBEhIKCnZlbG9jaXR5X3gYFSABKAESEgoKdmVsb2NpdHlf",
            "eRgWIAEoARISCgp2ZWxvY2l0eV96GBcgASgBEhQKDGFjY2VsZXJhdGVfeBgY",
            "IAEoARIUCgxhY2NlbGVyYXRlX3kYGSABKAESFAoMYWNjZWxlcmF0ZV96GBog",
            "ASgBEhEKCWluZm9yX2FnZRgbIAEoARIPCgdzYXRfcHJuGBwgASgNIrUBCg1H",
            "bnNzRXBoZW1lcmlzEjAKCWduc3NfdHlwZRgBIAEoDjIdLmFwb2xsby5kcml2",
            "ZXJzLmduc3MuR25zc1R5cGUSOAoNa2VwcGxlcl9vcmJpdBgCIAEoCzIhLmFw",
            "b2xsby5kcml2ZXJzLmduc3MuS2VwcGxlck9yYml0EjgKDWdsb25hc3Nfb3Ji",
            "aXQYAyABKAsyIS5hcG9sbG8uZHJpdmVycy5nbnNzLkdsb25hc3NPcmJpdCqK",
            "AQoKR25zc0JhbmRJRBIQCgxCQU5EX1VOS05PV04QABIKCgZHUFNfTDEQARIK",
            "CgZHUFNfTDIQAhIKCgZHUFNfTDUQAxIKCgZCRFNfQjEQBBIKCgZCRFNfQjIQ",
            "BRIKCgZCRFNfQjMQBhIKCgZHTE9fRzEQBxIKCgZHTE9fRzIQCBIKCgZHTE9f",
            "RzMQCSpYCgxHbnNzVGltZVR5cGUSEAoMVElNRV9VTktOT1dOEAASDAoIR1BT",
            "X1RJTUUQARIMCghCRFNfVElNRRACEgwKCEdMT19USU1FEAMSDAoIR0FMX1RJ",
            "TUUQBCpPCghHbnNzVHlwZRIPCgtTWVNfVU5LTk9XThAAEgsKB0dQU19TWVMQ",
            "ARILCgdCRFNfU1lTEAISCwoHR0xPX1NZUxADEgsKB0dBTF9TWVMQBCpCCgpQ",
            "c2V1ZG9UeXBlEhAKDENPREVfVU5LTk9XThAAEg4KCkNPUlNFX0NPREUQARIS",
            "Cg5QUkVDSVNJT05fQ09ERRACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Drivers.Gnss.GnssBandID), typeof(global::Apollo.Drivers.Gnss.GnssTimeType), typeof(global::Apollo.Drivers.Gnss.GnssType), typeof(global::Apollo.Drivers.Gnss.PseudoType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.BandObservation), global::Apollo.Drivers.Gnss.BandObservation.Parser, new[]{ "BandId", "FrequencyValue", "PseudoType", "PseudoRange", "CarrierPhase", "LossLockIndex", "Doppler", "Snr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.SatelliteObservation), global::Apollo.Drivers.Gnss.SatelliteObservation.Parser, new[]{ "SatPrn", "SatSys", "BandObsNum", "BandObs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.EpochObservation), global::Apollo.Drivers.Gnss.EpochObservation.Parser, new[]{ "ReceiverId", "GnssTimeType", "GnssWeek", "GnssSecondS", "PositionX", "PositionY", "PositionZ", "HealthFlag", "SatObsNum", "SatObs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.KepplerOrbit), global::Apollo.Drivers.Gnss.KepplerOrbit.Parser, new[]{ "GnssType", "SatPrn", "GnssTimeType", "Year", "Month", "Day", "Hour", "Minute", "SecondS", "WeekNum", "Reserved", "Af0", "Af1", "Af2", "Iode", "Deltan", "M0", "E", "Roota", "Toe", "Toc", "Cic", "Crc", "Cis", "Crs", "Cuc", "Cus", "Omega0", "Omega", "I0", "Omegadot", "Idot", "CodesonL2Channel", "L2Pdataflag", "Accuracy", "Health", "Tgd", "Iodc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.GlonassOrbit), global::Apollo.Drivers.Gnss.GlonassOrbit.Parser, new[]{ "GnssType", "SlotPrn", "GnssTimeType", "Toe", "Year", "Month", "Day", "Hour", "Minute", "SecondS", "FrequencyNo", "WeekNum", "WeekSecondS", "Tk", "ClockOffset", "ClockDrift", "Health", "PositionX", "PositionY", "PositionZ", "VelocityX", "VelocityY", "VelocityZ", "AccelerateX", "AccelerateY", "AccelerateZ", "InforAge", "SatPrn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.GnssEphemeris), global::Apollo.Drivers.Gnss.GnssEphemeris.Parser, new[]{ "GnssType", "KepplerOrbit", "GlonassOrbit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// pre-defined GNSS band frequency ID
  /// </summary>
  public enum GnssBandID {
    [pbr::OriginalName("BAND_UNKNOWN")] BandUnknown = 0,
    [pbr::OriginalName("GPS_L1")] GpsL1 = 1,
    [pbr::OriginalName("GPS_L2")] GpsL2 = 2,
    [pbr::OriginalName("GPS_L5")] GpsL5 = 3,
    [pbr::OriginalName("BDS_B1")] BdsB1 = 4,
    [pbr::OriginalName("BDS_B2")] BdsB2 = 5,
    [pbr::OriginalName("BDS_B3")] BdsB3 = 6,
    [pbr::OriginalName("GLO_G1")] GloG1 = 7,
    [pbr::OriginalName("GLO_G2")] GloG2 = 8,
    [pbr::OriginalName("GLO_G3")] GloG3 = 9,
  }

  /// <summary>
  /// observation and ephemeris related system time type
  /// </summary>
  public enum GnssTimeType {
    [pbr::OriginalName("TIME_UNKNOWN")] TimeUnknown = 0,
    [pbr::OriginalName("GPS_TIME")] GpsTime = 1,
    [pbr::OriginalName("BDS_TIME")] BdsTime = 2,
    [pbr::OriginalName("GLO_TIME")] GloTime = 3,
    [pbr::OriginalName("GAL_TIME")] GalTime = 4,
  }

  /// <summary>
  /// observation and ephemeris related system type
  /// </summary>
  public enum GnssType {
    [pbr::OriginalName("SYS_UNKNOWN")] SysUnknown = 0,
    [pbr::OriginalName("GPS_SYS")] GpsSys = 1,
    [pbr::OriginalName("BDS_SYS")] BdsSys = 2,
    [pbr::OriginalName("GLO_SYS")] GloSys = 3,
    [pbr::OriginalName("GAL_SYS")] GalSys = 4,
  }

  /// <summary>
  /// type of pseudo-range
  /// </summary>
  public enum PseudoType {
    [pbr::OriginalName("CODE_UNKNOWN")] CodeUnknown = 0,
    [pbr::OriginalName("CORSE_CODE")] CorseCode = 1,
    [pbr::OriginalName("PRECISION_CODE")] PrecisionCode = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// This message defines one band observation of a certain satellite
  /// </summary>
  public sealed partial class BandObservation : pb::IMessage<BandObservation> {
    private static readonly pb::MessageParser<BandObservation> _parser = new pb::MessageParser<BandObservation>(() => new BandObservation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BandObservation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssRawObservationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandObservation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandObservation(BandObservation other) : this() {
      bandId_ = other.bandId_;
      frequencyValue_ = other.frequencyValue_;
      pseudoType_ = other.pseudoType_;
      pseudoRange_ = other.pseudoRange_;
      carrierPhase_ = other.carrierPhase_;
      lossLockIndex_ = other.lossLockIndex_;
      doppler_ = other.doppler_;
      snr_ = other.snr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandObservation Clone() {
      return new BandObservation(this);
    }

    /// <summary>Field number for the "band_id" field.</summary>
    public const int BandIdFieldNumber = 1;
    private global::Apollo.Drivers.Gnss.GnssBandID bandId_ = 0;
    /// <summary>
    /// observation on a certain frequency band
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssBandID BandId {
      get { return bandId_; }
      set {
        bandId_ = value;
      }
    }

    /// <summary>Field number for the "frequency_value" field.</summary>
    public const int FrequencyValueFieldNumber = 2;
    private double frequencyValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrequencyValue {
      get { return frequencyValue_; }
      set {
        frequencyValue_ = value;
      }
    }

    /// <summary>Field number for the "pseudo_type" field.</summary>
    public const int PseudoTypeFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.PseudoType pseudoType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.PseudoType PseudoType {
      get { return pseudoType_; }
      set {
        pseudoType_ = value;
      }
    }

    /// <summary>Field number for the "pseudo_range" field.</summary>
    public const int PseudoRangeFieldNumber = 4;
    private double pseudoRange_;
    /// <summary>
    /// unit in meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PseudoRange {
      get { return pseudoRange_; }
      set {
        pseudoRange_ = value;
      }
    }

    /// <summary>Field number for the "carrier_phase" field.</summary>
    public const int CarrierPhaseFieldNumber = 5;
    private double carrierPhase_;
    /// <summary>
    /// unit in cycle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CarrierPhase {
      get { return carrierPhase_; }
      set {
        carrierPhase_ = value;
      }
    }

    /// <summary>Field number for the "loss_lock_index" field.</summary>
    public const int LossLockIndexFieldNumber = 6;
    private uint lossLockIndex_;
    /// <summary>
    /// Indicator of losing tracking of the signal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LossLockIndex {
      get { return lossLockIndex_; }
      set {
        lossLockIndex_ = value;
      }
    }

    /// <summary>Field number for the "doppler" field.</summary>
    public const int DopplerFieldNumber = 7;
    private double doppler_;
    /// <summary>
    /// unit in /s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Doppler {
      get { return doppler_; }
      set {
        doppler_ = value;
      }
    }

    /// <summary>Field number for the "snr" field.</summary>
    public const int SnrFieldNumber = 8;
    private float snr_;
    /// <summary>
    /// Signal strength: signal noise ratio or carrier noise ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Snr {
      get { return snr_; }
      set {
        snr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BandObservation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BandObservation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BandId != other.BandId) return false;
      if (FrequencyValue != other.FrequencyValue) return false;
      if (PseudoType != other.PseudoType) return false;
      if (PseudoRange != other.PseudoRange) return false;
      if (CarrierPhase != other.CarrierPhase) return false;
      if (LossLockIndex != other.LossLockIndex) return false;
      if (Doppler != other.Doppler) return false;
      if (Snr != other.Snr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BandId != 0) hash ^= BandId.GetHashCode();
      if (FrequencyValue != 0D) hash ^= FrequencyValue.GetHashCode();
      if (PseudoType != 0) hash ^= PseudoType.GetHashCode();
      if (PseudoRange != 0D) hash ^= PseudoRange.GetHashCode();
      if (CarrierPhase != 0D) hash ^= CarrierPhase.GetHashCode();
      if (LossLockIndex != 0) hash ^= LossLockIndex.GetHashCode();
      if (Doppler != 0D) hash ^= Doppler.GetHashCode();
      if (Snr != 0F) hash ^= Snr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BandId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BandId);
      }
      if (FrequencyValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FrequencyValue);
      }
      if (PseudoType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PseudoType);
      }
      if (PseudoRange != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PseudoRange);
      }
      if (CarrierPhase != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CarrierPhase);
      }
      if (LossLockIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LossLockIndex);
      }
      if (Doppler != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Doppler);
      }
      if (Snr != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Snr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BandId);
      }
      if (FrequencyValue != 0D) {
        size += 1 + 8;
      }
      if (PseudoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PseudoType);
      }
      if (PseudoRange != 0D) {
        size += 1 + 8;
      }
      if (CarrierPhase != 0D) {
        size += 1 + 8;
      }
      if (LossLockIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LossLockIndex);
      }
      if (Doppler != 0D) {
        size += 1 + 8;
      }
      if (Snr != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BandObservation other) {
      if (other == null) {
        return;
      }
      if (other.BandId != 0) {
        BandId = other.BandId;
      }
      if (other.FrequencyValue != 0D) {
        FrequencyValue = other.FrequencyValue;
      }
      if (other.PseudoType != 0) {
        PseudoType = other.PseudoType;
      }
      if (other.PseudoRange != 0D) {
        PseudoRange = other.PseudoRange;
      }
      if (other.CarrierPhase != 0D) {
        CarrierPhase = other.CarrierPhase;
      }
      if (other.LossLockIndex != 0) {
        LossLockIndex = other.LossLockIndex;
      }
      if (other.Doppler != 0D) {
        Doppler = other.Doppler;
      }
      if (other.Snr != 0F) {
        Snr = other.Snr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bandId_ = (global::Apollo.Drivers.Gnss.GnssBandID) input.ReadEnum();
            break;
          }
          case 17: {
            FrequencyValue = input.ReadDouble();
            break;
          }
          case 24: {
            pseudoType_ = (global::Apollo.Drivers.Gnss.PseudoType) input.ReadEnum();
            break;
          }
          case 33: {
            PseudoRange = input.ReadDouble();
            break;
          }
          case 41: {
            CarrierPhase = input.ReadDouble();
            break;
          }
          case 48: {
            LossLockIndex = input.ReadUInt32();
            break;
          }
          case 57: {
            Doppler = input.ReadDouble();
            break;
          }
          case 69: {
            Snr = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message defines one satellite observation of a certain epoch
  /// </summary>
  public sealed partial class SatelliteObservation : pb::IMessage<SatelliteObservation> {
    private static readonly pb::MessageParser<SatelliteObservation> _parser = new pb::MessageParser<SatelliteObservation>(() => new SatelliteObservation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SatelliteObservation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssRawObservationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteObservation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteObservation(SatelliteObservation other) : this() {
      satPrn_ = other.satPrn_;
      satSys_ = other.satSys_;
      bandObsNum_ = other.bandObsNum_;
      bandObs_ = other.bandObs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteObservation Clone() {
      return new SatelliteObservation(this);
    }

    /// <summary>Field number for the "sat_prn" field.</summary>
    public const int SatPrnFieldNumber = 1;
    private uint satPrn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SatPrn {
      get { return satPrn_; }
      set {
        satPrn_ = value;
      }
    }

    /// <summary>Field number for the "sat_sys" field.</summary>
    public const int SatSysFieldNumber = 2;
    private global::Apollo.Drivers.Gnss.GnssType satSys_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssType SatSys {
      get { return satSys_; }
      set {
        satSys_ = value;
      }
    }

    /// <summary>Field number for the "band_obs_num" field.</summary>
    public const int BandObsNumFieldNumber = 3;
    private uint bandObsNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BandObsNum {
      get { return bandObsNum_; }
      set {
        bandObsNum_ = value;
      }
    }

    /// <summary>Field number for the "band_obs" field.</summary>
    public const int BandObsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Gnss.BandObservation> _repeated_bandObs_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Drivers.Gnss.BandObservation.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Gnss.BandObservation> bandObs_ = new pbc::RepeatedField<global::Apollo.Drivers.Gnss.BandObservation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Gnss.BandObservation> BandObs {
      get { return bandObs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SatelliteObservation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SatelliteObservation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatPrn != other.SatPrn) return false;
      if (SatSys != other.SatSys) return false;
      if (BandObsNum != other.BandObsNum) return false;
      if(!bandObs_.Equals(other.bandObs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatPrn != 0) hash ^= SatPrn.GetHashCode();
      if (SatSys != 0) hash ^= SatSys.GetHashCode();
      if (BandObsNum != 0) hash ^= BandObsNum.GetHashCode();
      hash ^= bandObs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SatPrn != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SatPrn);
      }
      if (SatSys != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SatSys);
      }
      if (BandObsNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BandObsNum);
      }
      bandObs_.WriteTo(output, _repeated_bandObs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatPrn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SatPrn);
      }
      if (SatSys != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SatSys);
      }
      if (BandObsNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BandObsNum);
      }
      size += bandObs_.CalculateSize(_repeated_bandObs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SatelliteObservation other) {
      if (other == null) {
        return;
      }
      if (other.SatPrn != 0) {
        SatPrn = other.SatPrn;
      }
      if (other.SatSys != 0) {
        SatSys = other.SatSys;
      }
      if (other.BandObsNum != 0) {
        BandObsNum = other.BandObsNum;
      }
      bandObs_.Add(other.bandObs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SatPrn = input.ReadUInt32();
            break;
          }
          case 16: {
            satSys_ = (global::Apollo.Drivers.Gnss.GnssType) input.ReadEnum();
            break;
          }
          case 24: {
            BandObsNum = input.ReadUInt32();
            break;
          }
          case 34: {
            bandObs_.AddEntriesFrom(input, _repeated_bandObs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message defines one epoch observation on a certain time of a receiver
  /// </summary>
  public sealed partial class EpochObservation : pb::IMessage<EpochObservation> {
    private static readonly pb::MessageParser<EpochObservation> _parser = new pb::MessageParser<EpochObservation>(() => new EpochObservation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EpochObservation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssRawObservationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpochObservation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpochObservation(EpochObservation other) : this() {
      receiverId_ = other.receiverId_;
      gnssTimeType_ = other.gnssTimeType_;
      gnssWeek_ = other.gnssWeek_;
      gnssSecondS_ = other.gnssSecondS_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      positionZ_ = other.positionZ_;
      healthFlag_ = other.healthFlag_;
      satObsNum_ = other.satObsNum_;
      satObs_ = other.satObs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpochObservation Clone() {
      return new EpochObservation(this);
    }

    /// <summary>Field number for the "receiver_id" field.</summary>
    public const int ReceiverIdFieldNumber = 1;
    private uint receiverId_;
    /// <summary>
    /// Unique id to a certain receiver
    /// 0 for rover, otherwise for baser, supporting multi-baser mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReceiverId {
      get { return receiverId_; }
      set {
        receiverId_ = value;
      }
    }

    /// <summary>Field number for the "gnss_time_type" field.</summary>
    public const int GnssTimeTypeFieldNumber = 2;
    private global::Apollo.Drivers.Gnss.GnssTimeType gnssTimeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssTimeType GnssTimeType {
      get { return gnssTimeType_; }
      set {
        gnssTimeType_ = value;
      }
    }

    /// <summary>Field number for the "gnss_week" field.</summary>
    public const int GnssWeekFieldNumber = 3;
    private uint gnssWeek_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GnssWeek {
      get { return gnssWeek_; }
      set {
        gnssWeek_ = value;
      }
    }

    /// <summary>Field number for the "gnss_second_s" field.</summary>
    public const int GnssSecondSFieldNumber = 4;
    private double gnssSecondS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GnssSecondS {
      get { return gnssSecondS_; }
      set {
        gnssSecondS_ = value;
      }
    }

    /// <summary>Field number for the "position_x" field.</summary>
    public const int PositionXFieldNumber = 5;
    private double positionX_;
    /// <summary>
    /// Baser observation should be bound with coordinates
    /// unit in meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "position_y" field.</summary>
    public const int PositionYFieldNumber = 6;
    private double positionY_;
    /// <summary>
    /// unit in meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "position_z" field.</summary>
    public const int PositionZFieldNumber = 7;
    private double positionZ_;
    /// <summary>
    /// unit in meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "health_flag" field.</summary>
    public const int HealthFlagFieldNumber = 8;
    private uint healthFlag_;
    /// <summary>
    /// Health indicator: 0 for healthy while 1 for bad observation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HealthFlag {
      get { return healthFlag_; }
      set {
        healthFlag_ = value;
      }
    }

    /// <summary>Field number for the "sat_obs_num" field.</summary>
    public const int SatObsNumFieldNumber = 9;
    private uint satObsNum_;
    /// <summary>
    /// Number of observed satellites
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SatObsNum {
      get { return satObsNum_; }
      set {
        satObsNum_ = value;
      }
    }

    /// <summary>Field number for the "sat_obs" field.</summary>
    public const int SatObsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Gnss.SatelliteObservation> _repeated_satObs_codec
        = pb::FieldCodec.ForMessage(82, global::Apollo.Drivers.Gnss.SatelliteObservation.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Gnss.SatelliteObservation> satObs_ = new pbc::RepeatedField<global::Apollo.Drivers.Gnss.SatelliteObservation>();
    /// <summary>
    /// Group of observed satellite observation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Gnss.SatelliteObservation> SatObs {
      get { return satObs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EpochObservation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EpochObservation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiverId != other.ReceiverId) return false;
      if (GnssTimeType != other.GnssTimeType) return false;
      if (GnssWeek != other.GnssWeek) return false;
      if (GnssSecondS != other.GnssSecondS) return false;
      if (PositionX != other.PositionX) return false;
      if (PositionY != other.PositionY) return false;
      if (PositionZ != other.PositionZ) return false;
      if (HealthFlag != other.HealthFlag) return false;
      if (SatObsNum != other.SatObsNum) return false;
      if(!satObs_.Equals(other.satObs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiverId != 0) hash ^= ReceiverId.GetHashCode();
      if (GnssTimeType != 0) hash ^= GnssTimeType.GetHashCode();
      if (GnssWeek != 0) hash ^= GnssWeek.GetHashCode();
      if (GnssSecondS != 0D) hash ^= GnssSecondS.GetHashCode();
      if (PositionX != 0D) hash ^= PositionX.GetHashCode();
      if (PositionY != 0D) hash ^= PositionY.GetHashCode();
      if (PositionZ != 0D) hash ^= PositionZ.GetHashCode();
      if (HealthFlag != 0) hash ^= HealthFlag.GetHashCode();
      if (SatObsNum != 0) hash ^= SatObsNum.GetHashCode();
      hash ^= satObs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReceiverId);
      }
      if (GnssTimeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GnssTimeType);
      }
      if (GnssWeek != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GnssWeek);
      }
      if (GnssSecondS != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GnssSecondS);
      }
      if (PositionX != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PositionX);
      }
      if (PositionY != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PositionY);
      }
      if (PositionZ != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PositionZ);
      }
      if (HealthFlag != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HealthFlag);
      }
      if (SatObsNum != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SatObsNum);
      }
      satObs_.WriteTo(output, _repeated_satObs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiverId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReceiverId);
      }
      if (GnssTimeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssTimeType);
      }
      if (GnssWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GnssWeek);
      }
      if (GnssSecondS != 0D) {
        size += 1 + 8;
      }
      if (PositionX != 0D) {
        size += 1 + 8;
      }
      if (PositionY != 0D) {
        size += 1 + 8;
      }
      if (PositionZ != 0D) {
        size += 1 + 8;
      }
      if (HealthFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HealthFlag);
      }
      if (SatObsNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SatObsNum);
      }
      size += satObs_.CalculateSize(_repeated_satObs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EpochObservation other) {
      if (other == null) {
        return;
      }
      if (other.ReceiverId != 0) {
        ReceiverId = other.ReceiverId;
      }
      if (other.GnssTimeType != 0) {
        GnssTimeType = other.GnssTimeType;
      }
      if (other.GnssWeek != 0) {
        GnssWeek = other.GnssWeek;
      }
      if (other.GnssSecondS != 0D) {
        GnssSecondS = other.GnssSecondS;
      }
      if (other.PositionX != 0D) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0D) {
        PositionY = other.PositionY;
      }
      if (other.PositionZ != 0D) {
        PositionZ = other.PositionZ;
      }
      if (other.HealthFlag != 0) {
        HealthFlag = other.HealthFlag;
      }
      if (other.SatObsNum != 0) {
        SatObsNum = other.SatObsNum;
      }
      satObs_.Add(other.satObs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceiverId = input.ReadUInt32();
            break;
          }
          case 16: {
            gnssTimeType_ = (global::Apollo.Drivers.Gnss.GnssTimeType) input.ReadEnum();
            break;
          }
          case 24: {
            GnssWeek = input.ReadUInt32();
            break;
          }
          case 33: {
            GnssSecondS = input.ReadDouble();
            break;
          }
          case 41: {
            PositionX = input.ReadDouble();
            break;
          }
          case 49: {
            PositionY = input.ReadDouble();
            break;
          }
          case 57: {
            PositionZ = input.ReadDouble();
            break;
          }
          case 64: {
            HealthFlag = input.ReadUInt32();
            break;
          }
          case 72: {
            SatObsNum = input.ReadUInt32();
            break;
          }
          case 82: {
            satObs_.AddEntriesFrom(input, _repeated_satObs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message defines main six keppler orbit parameters and perturbations,
  /// designed for gps, beidou, (also supporting gnss, galileo)
  /// </summary>
  public sealed partial class KepplerOrbit : pb::IMessage<KepplerOrbit> {
    private static readonly pb::MessageParser<KepplerOrbit> _parser = new pb::MessageParser<KepplerOrbit>(() => new KepplerOrbit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KepplerOrbit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssRawObservationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KepplerOrbit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KepplerOrbit(KepplerOrbit other) : this() {
      gnssType_ = other.gnssType_;
      satPrn_ = other.satPrn_;
      gnssTimeType_ = other.gnssTimeType_;
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      hour_ = other.hour_;
      minute_ = other.minute_;
      secondS_ = other.secondS_;
      weekNum_ = other.weekNum_;
      reserved_ = other.reserved_;
      af0_ = other.af0_;
      af1_ = other.af1_;
      af2_ = other.af2_;
      iode_ = other.iode_;
      deltan_ = other.deltan_;
      m0_ = other.m0_;
      e_ = other.e_;
      roota_ = other.roota_;
      toe_ = other.toe_;
      toc_ = other.toc_;
      cic_ = other.cic_;
      crc_ = other.crc_;
      cis_ = other.cis_;
      crs_ = other.crs_;
      cuc_ = other.cuc_;
      cus_ = other.cus_;
      omega0_ = other.omega0_;
      omega_ = other.omega_;
      i0_ = other.i0_;
      omegadot_ = other.omegadot_;
      idot_ = other.idot_;
      codesonL2Channel_ = other.codesonL2Channel_;
      l2Pdataflag_ = other.l2Pdataflag_;
      accuracy_ = other.accuracy_;
      health_ = other.health_;
      tgd_ = other.tgd_;
      iodc_ = other.iodc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KepplerOrbit Clone() {
      return new KepplerOrbit(this);
    }

    /// <summary>Field number for the "gnss_type" field.</summary>
    public const int GnssTypeFieldNumber = 1;
    private global::Apollo.Drivers.Gnss.GnssType gnssType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssType GnssType {
      get { return gnssType_; }
      set {
        gnssType_ = value;
      }
    }

    /// <summary>Field number for the "sat_prn" field.</summary>
    public const int SatPrnFieldNumber = 2;
    private uint satPrn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SatPrn {
      get { return satPrn_; }
      set {
        satPrn_ = value;
      }
    }

    /// <summary>Field number for the "gnss_time_type" field.</summary>
    public const int GnssTimeTypeFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.GnssTimeType gnssTimeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssTimeType GnssTimeType {
      get { return gnssTimeType_; }
      set {
        gnssTimeType_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 4;
    private uint year_;
    /// <summary>
    /// TOC: time of clock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 5;
    private uint month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 6;
    private uint day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 7;
    private uint hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "minute" field.</summary>
    public const int MinuteFieldNumber = 8;
    private uint minute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "second_s" field.</summary>
    public const int SecondSFieldNumber = 9;
    private double secondS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SecondS {
      get { return secondS_; }
      set {
        secondS_ = value;
      }
    }

    /// <summary>Field number for the "week_num" field.</summary>
    public const int WeekNumFieldNumber = 10;
    private uint weekNum_;
    /// <summary>
    /// GNSS week number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekNum {
      get { return weekNum_; }
      set {
        weekNum_ = value;
      }
    }

    /// <summary>Field number for the "reserved" field.</summary>
    public const int ReservedFieldNumber = 11;
    private double reserved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Reserved {
      get { return reserved_; }
      set {
        reserved_ = value;
      }
    }

    /// <summary>Field number for the "af0" field.</summary>
    public const int Af0FieldNumber = 12;
    private double af0_;
    /// <summary>
    /// clock correction(sec)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Af0 {
      get { return af0_; }
      set {
        af0_ = value;
      }
    }

    /// <summary>Field number for the "af1" field.</summary>
    public const int Af1FieldNumber = 13;
    private double af1_;
    /// <summary>
    /// clock correction(sec/sec)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Af1 {
      get { return af1_; }
      set {
        af1_ = value;
      }
    }

    /// <summary>Field number for the "af2" field.</summary>
    public const int Af2FieldNumber = 14;
    private double af2_;
    /// <summary>
    /// clock correction(sec/sec2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Af2 {
      get { return af2_; }
      set {
        af2_ = value;
      }
    }

    /// <summary>Field number for the "iode" field.</summary>
    public const int IodeFieldNumber = 15;
    private double iode_;
    /// <summary>
    /// Issue Of Data, Ephemeris in subframes 2 and 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Iode {
      get { return iode_; }
      set {
        iode_ = value;
      }
    }

    /// <summary>Field number for the "deltan" field.</summary>
    public const int DeltanFieldNumber = 16;
    private double deltan_;
    /// <summary>
    /// mean anomaly correction semi-circles per sec*pi = rads
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Deltan {
      get { return deltan_; }
      set {
        deltan_ = value;
      }
    }

    /// <summary>Field number for the "m0" field.</summary>
    public const int M0FieldNumber = 17;
    private double m0_;
    /// <summary>
    /// mean anomaly at ref time semi-circles*pi = rads
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double M0 {
      get { return m0_; }
      set {
        m0_ = value;
      }
    }

    /// <summary>Field number for the "e" field.</summary>
    public const int EFieldNumber = 18;
    private double e_;
    /// <summary>
    /// eccentricity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double E {
      get { return e_; }
      set {
        e_ = value;
      }
    }

    /// <summary>Field number for the "roota" field.</summary>
    public const int RootaFieldNumber = 19;
    private double roota_;
    /// <summary>
    /// sqr root a ( meters 1/2 )
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roota {
      get { return roota_; }
      set {
        roota_ = value;
      }
    }

    /// <summary>Field number for the "toe" field.</summary>
    public const int ToeFieldNumber = 20;
    private double toe_;
    /// <summary>
    /// ref time (sec) of ephemeris
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Toe {
      get { return toe_; }
      set {
        toe_ = value;
      }
    }

    /// <summary>Field number for the "toc" field.</summary>
    public const int TocFieldNumber = 21;
    private double toc_;
    /// <summary>
    /// ref time (sec) of clock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Toc {
      get { return toc_; }
      set {
        toc_ = value;
      }
    }

    /// <summary>Field number for the "cic" field.</summary>
    public const int CicFieldNumber = 22;
    private double cic_;
    /// <summary>
    /// harmonic correction term(rads)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cic {
      get { return cic_; }
      set {
        cic_ = value;
      }
    }

    /// <summary>Field number for the "crc" field.</summary>
    public const int CrcFieldNumber = 23;
    private double crc_;
    /// <summary>
    /// harmonic correction term(meters)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Crc {
      get { return crc_; }
      set {
        crc_ = value;
      }
    }

    /// <summary>Field number for the "cis" field.</summary>
    public const int CisFieldNumber = 24;
    private double cis_;
    /// <summary>
    /// harmonic correction term(rads)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cis {
      get { return cis_; }
      set {
        cis_ = value;
      }
    }

    /// <summary>Field number for the "crs" field.</summary>
    public const int CrsFieldNumber = 25;
    private double crs_;
    /// <summary>
    /// harmonic correction term(meters)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Crs {
      get { return crs_; }
      set {
        crs_ = value;
      }
    }

    /// <summary>Field number for the "cuc" field.</summary>
    public const int CucFieldNumber = 26;
    private double cuc_;
    /// <summary>
    /// harmonic correction term(rads)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cuc {
      get { return cuc_; }
      set {
        cuc_ = value;
      }
    }

    /// <summary>Field number for the "cus" field.</summary>
    public const int CusFieldNumber = 27;
    private double cus_;
    /// <summary>
    /// harmonic correction term(rads)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cus {
      get { return cus_; }
      set {
        cus_ = value;
      }
    }

    /// <summary>Field number for the "omega0" field.</summary>
    public const int Omega0FieldNumber = 28;
    private double omega0_;
    /// <summary>
    /// longitude  of ascending node semi-circles*pi = rads
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Omega0 {
      get { return omega0_; }
      set {
        omega0_ = value;
      }
    }

    /// <summary>Field number for the "omega" field.</summary>
    public const int OmegaFieldNumber = 29;
    private double omega_;
    /// <summary>
    /// argument of perigee semi-circles*pi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Omega {
      get { return omega_; }
      set {
        omega_ = value;
      }
    }

    /// <summary>Field number for the "i0" field.</summary>
    public const int I0FieldNumber = 30;
    private double i0_;
    /// <summary>
    /// inclination angle at ref time semi-circles*pi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double I0 {
      get { return i0_; }
      set {
        i0_ = value;
      }
    }

    /// <summary>Field number for the "omegadot" field.</summary>
    public const int OmegadotFieldNumber = 31;
    private double omegadot_;
    /// <summary>
    /// rate of right ascension semi-circles/sec*pi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Omegadot {
      get { return omegadot_; }
      set {
        omegadot_ = value;
      }
    }

    /// <summary>Field number for the "idot" field.</summary>
    public const int IdotFieldNumber = 32;
    private double idot_;
    /// <summary>
    /// rate of inclination semi-circles/sec*pi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Idot {
      get { return idot_; }
      set {
        idot_ = value;
      }
    }

    /// <summary>Field number for the "codesonL2channel" field.</summary>
    public const int CodesonL2ChannelFieldNumber = 33;
    private double codesonL2Channel_;
    /// <summary>
    /// pseudo range codes on L2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CodesonL2Channel {
      get { return codesonL2Channel_; }
      set {
        codesonL2Channel_ = value;
      }
    }

    /// <summary>Field number for the "L2Pdataflag" field.</summary>
    public const int L2PdataflagFieldNumber = 34;
    private uint l2Pdataflag_;
    /// <summary>
    /// data flag of L2P
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint L2Pdataflag {
      get { return l2Pdataflag_; }
      set {
        l2Pdataflag_ = value;
      }
    }

    /// <summary>Field number for the "accuracy" field.</summary>
    public const int AccuracyFieldNumber = 35;
    private uint accuracy_;
    /// <summary>
    /// user range accuracy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Accuracy {
      get { return accuracy_; }
      set {
        accuracy_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 36;
    private uint health_;
    /// <summary>
    /// satellite health: 0=good,1=bad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "tgd" field.</summary>
    public const int TgdFieldNumber = 37;
    private double tgd_;
    /// <summary>
    /// group delay (s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tgd {
      get { return tgd_; }
      set {
        tgd_ = value;
      }
    }

    /// <summary>Field number for the "iodc" field.</summary>
    public const int IodcFieldNumber = 38;
    private double iodc_;
    /// <summary>
    /// Issue Of Data, Clock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Iodc {
      get { return iodc_; }
      set {
        iodc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KepplerOrbit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KepplerOrbit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GnssType != other.GnssType) return false;
      if (SatPrn != other.SatPrn) return false;
      if (GnssTimeType != other.GnssTimeType) return false;
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (Hour != other.Hour) return false;
      if (Minute != other.Minute) return false;
      if (SecondS != other.SecondS) return false;
      if (WeekNum != other.WeekNum) return false;
      if (Reserved != other.Reserved) return false;
      if (Af0 != other.Af0) return false;
      if (Af1 != other.Af1) return false;
      if (Af2 != other.Af2) return false;
      if (Iode != other.Iode) return false;
      if (Deltan != other.Deltan) return false;
      if (M0 != other.M0) return false;
      if (E != other.E) return false;
      if (Roota != other.Roota) return false;
      if (Toe != other.Toe) return false;
      if (Toc != other.Toc) return false;
      if (Cic != other.Cic) return false;
      if (Crc != other.Crc) return false;
      if (Cis != other.Cis) return false;
      if (Crs != other.Crs) return false;
      if (Cuc != other.Cuc) return false;
      if (Cus != other.Cus) return false;
      if (Omega0 != other.Omega0) return false;
      if (Omega != other.Omega) return false;
      if (I0 != other.I0) return false;
      if (Omegadot != other.Omegadot) return false;
      if (Idot != other.Idot) return false;
      if (CodesonL2Channel != other.CodesonL2Channel) return false;
      if (L2Pdataflag != other.L2Pdataflag) return false;
      if (Accuracy != other.Accuracy) return false;
      if (Health != other.Health) return false;
      if (Tgd != other.Tgd) return false;
      if (Iodc != other.Iodc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GnssType != 0) hash ^= GnssType.GetHashCode();
      if (SatPrn != 0) hash ^= SatPrn.GetHashCode();
      if (GnssTimeType != 0) hash ^= GnssTimeType.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (SecondS != 0D) hash ^= SecondS.GetHashCode();
      if (WeekNum != 0) hash ^= WeekNum.GetHashCode();
      if (Reserved != 0D) hash ^= Reserved.GetHashCode();
      if (Af0 != 0D) hash ^= Af0.GetHashCode();
      if (Af1 != 0D) hash ^= Af1.GetHashCode();
      if (Af2 != 0D) hash ^= Af2.GetHashCode();
      if (Iode != 0D) hash ^= Iode.GetHashCode();
      if (Deltan != 0D) hash ^= Deltan.GetHashCode();
      if (M0 != 0D) hash ^= M0.GetHashCode();
      if (E != 0D) hash ^= E.GetHashCode();
      if (Roota != 0D) hash ^= Roota.GetHashCode();
      if (Toe != 0D) hash ^= Toe.GetHashCode();
      if (Toc != 0D) hash ^= Toc.GetHashCode();
      if (Cic != 0D) hash ^= Cic.GetHashCode();
      if (Crc != 0D) hash ^= Crc.GetHashCode();
      if (Cis != 0D) hash ^= Cis.GetHashCode();
      if (Crs != 0D) hash ^= Crs.GetHashCode();
      if (Cuc != 0D) hash ^= Cuc.GetHashCode();
      if (Cus != 0D) hash ^= Cus.GetHashCode();
      if (Omega0 != 0D) hash ^= Omega0.GetHashCode();
      if (Omega != 0D) hash ^= Omega.GetHashCode();
      if (I0 != 0D) hash ^= I0.GetHashCode();
      if (Omegadot != 0D) hash ^= Omegadot.GetHashCode();
      if (Idot != 0D) hash ^= Idot.GetHashCode();
      if (CodesonL2Channel != 0D) hash ^= CodesonL2Channel.GetHashCode();
      if (L2Pdataflag != 0) hash ^= L2Pdataflag.GetHashCode();
      if (Accuracy != 0) hash ^= Accuracy.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Tgd != 0D) hash ^= Tgd.GetHashCode();
      if (Iodc != 0D) hash ^= Iodc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GnssType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GnssType);
      }
      if (SatPrn != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SatPrn);
      }
      if (GnssTimeType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GnssTimeType);
      }
      if (Year != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Day);
      }
      if (Hour != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Hour);
      }
      if (Minute != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Minute);
      }
      if (SecondS != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SecondS);
      }
      if (WeekNum != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(WeekNum);
      }
      if (Reserved != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Reserved);
      }
      if (Af0 != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Af0);
      }
      if (Af1 != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Af1);
      }
      if (Af2 != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Af2);
      }
      if (Iode != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Iode);
      }
      if (Deltan != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(Deltan);
      }
      if (M0 != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(M0);
      }
      if (E != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(E);
      }
      if (Roota != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Roota);
      }
      if (Toe != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Toe);
      }
      if (Toc != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Toc);
      }
      if (Cic != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Cic);
      }
      if (Crc != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(Crc);
      }
      if (Cis != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(Cis);
      }
      if (Crs != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(Crs);
      }
      if (Cuc != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(Cuc);
      }
      if (Cus != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(Cus);
      }
      if (Omega0 != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(Omega0);
      }
      if (Omega != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(Omega);
      }
      if (I0 != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(I0);
      }
      if (Omegadot != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(Omegadot);
      }
      if (Idot != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(Idot);
      }
      if (CodesonL2Channel != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(CodesonL2Channel);
      }
      if (L2Pdataflag != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(L2Pdataflag);
      }
      if (Accuracy != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(Accuracy);
      }
      if (Health != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Health);
      }
      if (Tgd != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(Tgd);
      }
      if (Iodc != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(Iodc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GnssType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssType);
      }
      if (SatPrn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SatPrn);
      }
      if (GnssTimeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssTimeType);
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Day);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hour);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minute);
      }
      if (SecondS != 0D) {
        size += 1 + 8;
      }
      if (WeekNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekNum);
      }
      if (Reserved != 0D) {
        size += 1 + 8;
      }
      if (Af0 != 0D) {
        size += 1 + 8;
      }
      if (Af1 != 0D) {
        size += 1 + 8;
      }
      if (Af2 != 0D) {
        size += 1 + 8;
      }
      if (Iode != 0D) {
        size += 1 + 8;
      }
      if (Deltan != 0D) {
        size += 2 + 8;
      }
      if (M0 != 0D) {
        size += 2 + 8;
      }
      if (E != 0D) {
        size += 2 + 8;
      }
      if (Roota != 0D) {
        size += 2 + 8;
      }
      if (Toe != 0D) {
        size += 2 + 8;
      }
      if (Toc != 0D) {
        size += 2 + 8;
      }
      if (Cic != 0D) {
        size += 2 + 8;
      }
      if (Crc != 0D) {
        size += 2 + 8;
      }
      if (Cis != 0D) {
        size += 2 + 8;
      }
      if (Crs != 0D) {
        size += 2 + 8;
      }
      if (Cuc != 0D) {
        size += 2 + 8;
      }
      if (Cus != 0D) {
        size += 2 + 8;
      }
      if (Omega0 != 0D) {
        size += 2 + 8;
      }
      if (Omega != 0D) {
        size += 2 + 8;
      }
      if (I0 != 0D) {
        size += 2 + 8;
      }
      if (Omegadot != 0D) {
        size += 2 + 8;
      }
      if (Idot != 0D) {
        size += 2 + 8;
      }
      if (CodesonL2Channel != 0D) {
        size += 2 + 8;
      }
      if (L2Pdataflag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(L2Pdataflag);
      }
      if (Accuracy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Accuracy);
      }
      if (Health != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Health);
      }
      if (Tgd != 0D) {
        size += 2 + 8;
      }
      if (Iodc != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KepplerOrbit other) {
      if (other == null) {
        return;
      }
      if (other.GnssType != 0) {
        GnssType = other.GnssType;
      }
      if (other.SatPrn != 0) {
        SatPrn = other.SatPrn;
      }
      if (other.GnssTimeType != 0) {
        GnssTimeType = other.GnssTimeType;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.SecondS != 0D) {
        SecondS = other.SecondS;
      }
      if (other.WeekNum != 0) {
        WeekNum = other.WeekNum;
      }
      if (other.Reserved != 0D) {
        Reserved = other.Reserved;
      }
      if (other.Af0 != 0D) {
        Af0 = other.Af0;
      }
      if (other.Af1 != 0D) {
        Af1 = other.Af1;
      }
      if (other.Af2 != 0D) {
        Af2 = other.Af2;
      }
      if (other.Iode != 0D) {
        Iode = other.Iode;
      }
      if (other.Deltan != 0D) {
        Deltan = other.Deltan;
      }
      if (other.M0 != 0D) {
        M0 = other.M0;
      }
      if (other.E != 0D) {
        E = other.E;
      }
      if (other.Roota != 0D) {
        Roota = other.Roota;
      }
      if (other.Toe != 0D) {
        Toe = other.Toe;
      }
      if (other.Toc != 0D) {
        Toc = other.Toc;
      }
      if (other.Cic != 0D) {
        Cic = other.Cic;
      }
      if (other.Crc != 0D) {
        Crc = other.Crc;
      }
      if (other.Cis != 0D) {
        Cis = other.Cis;
      }
      if (other.Crs != 0D) {
        Crs = other.Crs;
      }
      if (other.Cuc != 0D) {
        Cuc = other.Cuc;
      }
      if (other.Cus != 0D) {
        Cus = other.Cus;
      }
      if (other.Omega0 != 0D) {
        Omega0 = other.Omega0;
      }
      if (other.Omega != 0D) {
        Omega = other.Omega;
      }
      if (other.I0 != 0D) {
        I0 = other.I0;
      }
      if (other.Omegadot != 0D) {
        Omegadot = other.Omegadot;
      }
      if (other.Idot != 0D) {
        Idot = other.Idot;
      }
      if (other.CodesonL2Channel != 0D) {
        CodesonL2Channel = other.CodesonL2Channel;
      }
      if (other.L2Pdataflag != 0) {
        L2Pdataflag = other.L2Pdataflag;
      }
      if (other.Accuracy != 0) {
        Accuracy = other.Accuracy;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Tgd != 0D) {
        Tgd = other.Tgd;
      }
      if (other.Iodc != 0D) {
        Iodc = other.Iodc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            gnssType_ = (global::Apollo.Drivers.Gnss.GnssType) input.ReadEnum();
            break;
          }
          case 16: {
            SatPrn = input.ReadUInt32();
            break;
          }
          case 24: {
            gnssTimeType_ = (global::Apollo.Drivers.Gnss.GnssTimeType) input.ReadEnum();
            break;
          }
          case 32: {
            Year = input.ReadUInt32();
            break;
          }
          case 40: {
            Month = input.ReadUInt32();
            break;
          }
          case 48: {
            Day = input.ReadUInt32();
            break;
          }
          case 56: {
            Hour = input.ReadUInt32();
            break;
          }
          case 64: {
            Minute = input.ReadUInt32();
            break;
          }
          case 73: {
            SecondS = input.ReadDouble();
            break;
          }
          case 80: {
            WeekNum = input.ReadUInt32();
            break;
          }
          case 89: {
            Reserved = input.ReadDouble();
            break;
          }
          case 97: {
            Af0 = input.ReadDouble();
            break;
          }
          case 105: {
            Af1 = input.ReadDouble();
            break;
          }
          case 113: {
            Af2 = input.ReadDouble();
            break;
          }
          case 121: {
            Iode = input.ReadDouble();
            break;
          }
          case 129: {
            Deltan = input.ReadDouble();
            break;
          }
          case 137: {
            M0 = input.ReadDouble();
            break;
          }
          case 145: {
            E = input.ReadDouble();
            break;
          }
          case 153: {
            Roota = input.ReadDouble();
            break;
          }
          case 161: {
            Toe = input.ReadDouble();
            break;
          }
          case 169: {
            Toc = input.ReadDouble();
            break;
          }
          case 177: {
            Cic = input.ReadDouble();
            break;
          }
          case 185: {
            Crc = input.ReadDouble();
            break;
          }
          case 193: {
            Cis = input.ReadDouble();
            break;
          }
          case 201: {
            Crs = input.ReadDouble();
            break;
          }
          case 209: {
            Cuc = input.ReadDouble();
            break;
          }
          case 217: {
            Cus = input.ReadDouble();
            break;
          }
          case 225: {
            Omega0 = input.ReadDouble();
            break;
          }
          case 233: {
            Omega = input.ReadDouble();
            break;
          }
          case 241: {
            I0 = input.ReadDouble();
            break;
          }
          case 249: {
            Omegadot = input.ReadDouble();
            break;
          }
          case 257: {
            Idot = input.ReadDouble();
            break;
          }
          case 265: {
            CodesonL2Channel = input.ReadDouble();
            break;
          }
          case 272: {
            L2Pdataflag = input.ReadUInt32();
            break;
          }
          case 280: {
            Accuracy = input.ReadUInt32();
            break;
          }
          case 288: {
            Health = input.ReadUInt32();
            break;
          }
          case 297: {
            Tgd = input.ReadDouble();
            break;
          }
          case 305: {
            Iodc = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message defines orbit parameters of GLONASS
  /// </summary>
  public sealed partial class GlonassOrbit : pb::IMessage<GlonassOrbit> {
    private static readonly pb::MessageParser<GlonassOrbit> _parser = new pb::MessageParser<GlonassOrbit>(() => new GlonassOrbit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlonassOrbit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssRawObservationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlonassOrbit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlonassOrbit(GlonassOrbit other) : this() {
      gnssType_ = other.gnssType_;
      slotPrn_ = other.slotPrn_;
      gnssTimeType_ = other.gnssTimeType_;
      toe_ = other.toe_;
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      hour_ = other.hour_;
      minute_ = other.minute_;
      secondS_ = other.secondS_;
      frequencyNo_ = other.frequencyNo_;
      weekNum_ = other.weekNum_;
      weekSecondS_ = other.weekSecondS_;
      tk_ = other.tk_;
      clockOffset_ = other.clockOffset_;
      clockDrift_ = other.clockDrift_;
      health_ = other.health_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      positionZ_ = other.positionZ_;
      velocityX_ = other.velocityX_;
      velocityY_ = other.velocityY_;
      velocityZ_ = other.velocityZ_;
      accelerateX_ = other.accelerateX_;
      accelerateY_ = other.accelerateY_;
      accelerateZ_ = other.accelerateZ_;
      inforAge_ = other.inforAge_;
      satPrn_ = other.satPrn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlonassOrbit Clone() {
      return new GlonassOrbit(this);
    }

    /// <summary>Field number for the "gnss_type" field.</summary>
    public const int GnssTypeFieldNumber = 1;
    private global::Apollo.Drivers.Gnss.GnssType gnssType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssType GnssType {
      get { return gnssType_; }
      set {
        gnssType_ = value;
      }
    }

    /// <summary>Field number for the "slot_prn" field.</summary>
    public const int SlotPrnFieldNumber = 2;
    private uint slotPrn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotPrn {
      get { return slotPrn_; }
      set {
        slotPrn_ = value;
      }
    }

    /// <summary>Field number for the "gnss_time_type" field.</summary>
    public const int GnssTimeTypeFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.GnssTimeType gnssTimeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssTimeType GnssTimeType {
      get { return gnssTimeType_; }
      set {
        gnssTimeType_ = value;
      }
    }

    /// <summary>Field number for the "toe" field.</summary>
    public const int ToeFieldNumber = 4;
    private double toe_;
    /// <summary>
    /// refer to GLONASS time and toc == toe
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Toe {
      get { return toe_; }
      set {
        toe_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 5;
    private uint year_;
    /// <summary>
    /// must convert toe to UTC(+0) format and fulfill year, month...second_s,etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 6;
    private uint month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 7;
    private uint day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 8;
    private uint hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "minute" field.</summary>
    public const int MinuteFieldNumber = 9;
    private uint minute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "second_s" field.</summary>
    public const int SecondSFieldNumber = 10;
    private double secondS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SecondS {
      get { return secondS_; }
      set {
        secondS_ = value;
      }
    }

    /// <summary>Field number for the "frequency_no" field.</summary>
    public const int FrequencyNoFieldNumber = 11;
    private int frequencyNo_;
    /// <summary>
    /// unit in meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrequencyNo {
      get { return frequencyNo_; }
      set {
        frequencyNo_ = value;
      }
    }

    /// <summary>Field number for the "week_num" field.</summary>
    public const int WeekNumFieldNumber = 12;
    private uint weekNum_;
    /// <summary>
    /// GNSS week number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekNum {
      get { return weekNum_; }
      set {
        weekNum_ = value;
      }
    }

    /// <summary>Field number for the "week_second_s" field.</summary>
    public const int WeekSecondSFieldNumber = 13;
    private double weekSecondS_;
    /// <summary>
    /// GNSS week second in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeekSecondS {
      get { return weekSecondS_; }
      set {
        weekSecondS_ = value;
      }
    }

    /// <summary>Field number for the "tk" field.</summary>
    public const int TkFieldNumber = 14;
    private double tk_;
    /// <summary>
    /// frame broadcasted time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tk {
      get { return tk_; }
      set {
        tk_ = value;
      }
    }

    /// <summary>Field number for the "clock_offset" field.</summary>
    public const int ClockOffsetFieldNumber = 15;
    private double clockOffset_;
    /// <summary>
    /// clock correction(sec/sec),warning: set clock_offset = -TauN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClockOffset {
      get { return clockOffset_; }
      set {
        clockOffset_ = value;
      }
    }

    /// <summary>Field number for the "clock_drift" field.</summary>
    public const int ClockDriftFieldNumber = 16;
    private double clockDrift_;
    /// <summary>
    /// clock correction(sec/sec2),warning: set clock_drift = +GammaN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClockDrift {
      get { return clockDrift_; }
      set {
        clockDrift_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 17;
    private uint health_;
    /// <summary>
    /// Satellite health : 0=good,1=bad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "position_x" field.</summary>
    public const int PositionXFieldNumber = 18;
    private double positionX_;
    /// <summary>
    /// unit in meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "position_y" field.</summary>
    public const int PositionYFieldNumber = 19;
    private double positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "position_z" field.</summary>
    public const int PositionZFieldNumber = 20;
    private double positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "velocity_x" field.</summary>
    public const int VelocityXFieldNumber = 21;
    private double velocityX_;
    /// <summary>
    /// unit in m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "velocity_y" field.</summary>
    public const int VelocityYFieldNumber = 22;
    private double velocityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    /// <summary>Field number for the "velocity_z" field.</summary>
    public const int VelocityZFieldNumber = 23;
    private double velocityZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityZ {
      get { return velocityZ_; }
      set {
        velocityZ_ = value;
      }
    }

    /// <summary>Field number for the "accelerate_x" field.</summary>
    public const int AccelerateXFieldNumber = 24;
    private double accelerateX_;
    /// <summary>
    /// unit in m/s2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerateX {
      get { return accelerateX_; }
      set {
        accelerateX_ = value;
      }
    }

    /// <summary>Field number for the "accelerate_y" field.</summary>
    public const int AccelerateYFieldNumber = 25;
    private double accelerateY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerateY {
      get { return accelerateY_; }
      set {
        accelerateY_ = value;
      }
    }

    /// <summary>Field number for the "accelerate_z" field.</summary>
    public const int AccelerateZFieldNumber = 26;
    private double accelerateZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerateZ {
      get { return accelerateZ_; }
      set {
        accelerateZ_ = value;
      }
    }

    /// <summary>Field number for the "infor_age" field.</summary>
    public const int InforAgeFieldNumber = 27;
    private double inforAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InforAge {
      get { return inforAge_; }
      set {
        inforAge_ = value;
      }
    }

    /// <summary>Field number for the "sat_prn" field.</summary>
    public const int SatPrnFieldNumber = 28;
    private uint satPrn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SatPrn {
      get { return satPrn_; }
      set {
        satPrn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlonassOrbit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlonassOrbit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GnssType != other.GnssType) return false;
      if (SlotPrn != other.SlotPrn) return false;
      if (GnssTimeType != other.GnssTimeType) return false;
      if (Toe != other.Toe) return false;
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (Hour != other.Hour) return false;
      if (Minute != other.Minute) return false;
      if (SecondS != other.SecondS) return false;
      if (FrequencyNo != other.FrequencyNo) return false;
      if (WeekNum != other.WeekNum) return false;
      if (WeekSecondS != other.WeekSecondS) return false;
      if (Tk != other.Tk) return false;
      if (ClockOffset != other.ClockOffset) return false;
      if (ClockDrift != other.ClockDrift) return false;
      if (Health != other.Health) return false;
      if (PositionX != other.PositionX) return false;
      if (PositionY != other.PositionY) return false;
      if (PositionZ != other.PositionZ) return false;
      if (VelocityX != other.VelocityX) return false;
      if (VelocityY != other.VelocityY) return false;
      if (VelocityZ != other.VelocityZ) return false;
      if (AccelerateX != other.AccelerateX) return false;
      if (AccelerateY != other.AccelerateY) return false;
      if (AccelerateZ != other.AccelerateZ) return false;
      if (InforAge != other.InforAge) return false;
      if (SatPrn != other.SatPrn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GnssType != 0) hash ^= GnssType.GetHashCode();
      if (SlotPrn != 0) hash ^= SlotPrn.GetHashCode();
      if (GnssTimeType != 0) hash ^= GnssTimeType.GetHashCode();
      if (Toe != 0D) hash ^= Toe.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (SecondS != 0D) hash ^= SecondS.GetHashCode();
      if (FrequencyNo != 0) hash ^= FrequencyNo.GetHashCode();
      if (WeekNum != 0) hash ^= WeekNum.GetHashCode();
      if (WeekSecondS != 0D) hash ^= WeekSecondS.GetHashCode();
      if (Tk != 0D) hash ^= Tk.GetHashCode();
      if (ClockOffset != 0D) hash ^= ClockOffset.GetHashCode();
      if (ClockDrift != 0D) hash ^= ClockDrift.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (PositionX != 0D) hash ^= PositionX.GetHashCode();
      if (PositionY != 0D) hash ^= PositionY.GetHashCode();
      if (PositionZ != 0D) hash ^= PositionZ.GetHashCode();
      if (VelocityX != 0D) hash ^= VelocityX.GetHashCode();
      if (VelocityY != 0D) hash ^= VelocityY.GetHashCode();
      if (VelocityZ != 0D) hash ^= VelocityZ.GetHashCode();
      if (AccelerateX != 0D) hash ^= AccelerateX.GetHashCode();
      if (AccelerateY != 0D) hash ^= AccelerateY.GetHashCode();
      if (AccelerateZ != 0D) hash ^= AccelerateZ.GetHashCode();
      if (InforAge != 0D) hash ^= InforAge.GetHashCode();
      if (SatPrn != 0) hash ^= SatPrn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GnssType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GnssType);
      }
      if (SlotPrn != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotPrn);
      }
      if (GnssTimeType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GnssTimeType);
      }
      if (Toe != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Toe);
      }
      if (Year != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Day);
      }
      if (Hour != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Hour);
      }
      if (Minute != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Minute);
      }
      if (SecondS != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(SecondS);
      }
      if (FrequencyNo != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FrequencyNo);
      }
      if (WeekNum != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(WeekNum);
      }
      if (WeekSecondS != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(WeekSecondS);
      }
      if (Tk != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Tk);
      }
      if (ClockOffset != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(ClockOffset);
      }
      if (ClockDrift != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(ClockDrift);
      }
      if (Health != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Health);
      }
      if (PositionX != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(PositionX);
      }
      if (PositionY != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(PositionY);
      }
      if (PositionZ != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(PositionZ);
      }
      if (VelocityX != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(VelocityX);
      }
      if (VelocityY != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(VelocityY);
      }
      if (VelocityZ != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(VelocityZ);
      }
      if (AccelerateX != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(AccelerateX);
      }
      if (AccelerateY != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(AccelerateY);
      }
      if (AccelerateZ != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(AccelerateZ);
      }
      if (InforAge != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(InforAge);
      }
      if (SatPrn != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(SatPrn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GnssType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssType);
      }
      if (SlotPrn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotPrn);
      }
      if (GnssTimeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssTimeType);
      }
      if (Toe != 0D) {
        size += 1 + 8;
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Day);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hour);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minute);
      }
      if (SecondS != 0D) {
        size += 1 + 8;
      }
      if (FrequencyNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrequencyNo);
      }
      if (WeekNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekNum);
      }
      if (WeekSecondS != 0D) {
        size += 1 + 8;
      }
      if (Tk != 0D) {
        size += 1 + 8;
      }
      if (ClockOffset != 0D) {
        size += 1 + 8;
      }
      if (ClockDrift != 0D) {
        size += 2 + 8;
      }
      if (Health != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Health);
      }
      if (PositionX != 0D) {
        size += 2 + 8;
      }
      if (PositionY != 0D) {
        size += 2 + 8;
      }
      if (PositionZ != 0D) {
        size += 2 + 8;
      }
      if (VelocityX != 0D) {
        size += 2 + 8;
      }
      if (VelocityY != 0D) {
        size += 2 + 8;
      }
      if (VelocityZ != 0D) {
        size += 2 + 8;
      }
      if (AccelerateX != 0D) {
        size += 2 + 8;
      }
      if (AccelerateY != 0D) {
        size += 2 + 8;
      }
      if (AccelerateZ != 0D) {
        size += 2 + 8;
      }
      if (InforAge != 0D) {
        size += 2 + 8;
      }
      if (SatPrn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SatPrn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlonassOrbit other) {
      if (other == null) {
        return;
      }
      if (other.GnssType != 0) {
        GnssType = other.GnssType;
      }
      if (other.SlotPrn != 0) {
        SlotPrn = other.SlotPrn;
      }
      if (other.GnssTimeType != 0) {
        GnssTimeType = other.GnssTimeType;
      }
      if (other.Toe != 0D) {
        Toe = other.Toe;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.SecondS != 0D) {
        SecondS = other.SecondS;
      }
      if (other.FrequencyNo != 0) {
        FrequencyNo = other.FrequencyNo;
      }
      if (other.WeekNum != 0) {
        WeekNum = other.WeekNum;
      }
      if (other.WeekSecondS != 0D) {
        WeekSecondS = other.WeekSecondS;
      }
      if (other.Tk != 0D) {
        Tk = other.Tk;
      }
      if (other.ClockOffset != 0D) {
        ClockOffset = other.ClockOffset;
      }
      if (other.ClockDrift != 0D) {
        ClockDrift = other.ClockDrift;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.PositionX != 0D) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0D) {
        PositionY = other.PositionY;
      }
      if (other.PositionZ != 0D) {
        PositionZ = other.PositionZ;
      }
      if (other.VelocityX != 0D) {
        VelocityX = other.VelocityX;
      }
      if (other.VelocityY != 0D) {
        VelocityY = other.VelocityY;
      }
      if (other.VelocityZ != 0D) {
        VelocityZ = other.VelocityZ;
      }
      if (other.AccelerateX != 0D) {
        AccelerateX = other.AccelerateX;
      }
      if (other.AccelerateY != 0D) {
        AccelerateY = other.AccelerateY;
      }
      if (other.AccelerateZ != 0D) {
        AccelerateZ = other.AccelerateZ;
      }
      if (other.InforAge != 0D) {
        InforAge = other.InforAge;
      }
      if (other.SatPrn != 0) {
        SatPrn = other.SatPrn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            gnssType_ = (global::Apollo.Drivers.Gnss.GnssType) input.ReadEnum();
            break;
          }
          case 16: {
            SlotPrn = input.ReadUInt32();
            break;
          }
          case 24: {
            gnssTimeType_ = (global::Apollo.Drivers.Gnss.GnssTimeType) input.ReadEnum();
            break;
          }
          case 33: {
            Toe = input.ReadDouble();
            break;
          }
          case 40: {
            Year = input.ReadUInt32();
            break;
          }
          case 48: {
            Month = input.ReadUInt32();
            break;
          }
          case 56: {
            Day = input.ReadUInt32();
            break;
          }
          case 64: {
            Hour = input.ReadUInt32();
            break;
          }
          case 72: {
            Minute = input.ReadUInt32();
            break;
          }
          case 81: {
            SecondS = input.ReadDouble();
            break;
          }
          case 88: {
            FrequencyNo = input.ReadInt32();
            break;
          }
          case 96: {
            WeekNum = input.ReadUInt32();
            break;
          }
          case 105: {
            WeekSecondS = input.ReadDouble();
            break;
          }
          case 113: {
            Tk = input.ReadDouble();
            break;
          }
          case 121: {
            ClockOffset = input.ReadDouble();
            break;
          }
          case 129: {
            ClockDrift = input.ReadDouble();
            break;
          }
          case 136: {
            Health = input.ReadUInt32();
            break;
          }
          case 145: {
            PositionX = input.ReadDouble();
            break;
          }
          case 153: {
            PositionY = input.ReadDouble();
            break;
          }
          case 161: {
            PositionZ = input.ReadDouble();
            break;
          }
          case 169: {
            VelocityX = input.ReadDouble();
            break;
          }
          case 177: {
            VelocityY = input.ReadDouble();
            break;
          }
          case 185: {
            VelocityZ = input.ReadDouble();
            break;
          }
          case 193: {
            AccelerateX = input.ReadDouble();
            break;
          }
          case 201: {
            AccelerateY = input.ReadDouble();
            break;
          }
          case 209: {
            AccelerateZ = input.ReadDouble();
            break;
          }
          case 217: {
            InforAge = input.ReadDouble();
            break;
          }
          case 224: {
            SatPrn = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message encapsulates keppler orbit message and glonass message
  /// </summary>
  public sealed partial class GnssEphemeris : pb::IMessage<GnssEphemeris> {
    private static readonly pb::MessageParser<GnssEphemeris> _parser = new pb::MessageParser<GnssEphemeris>(() => new GnssEphemeris());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GnssEphemeris> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssRawObservationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssEphemeris() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssEphemeris(GnssEphemeris other) : this() {
      gnssType_ = other.gnssType_;
      KepplerOrbit = other.kepplerOrbit_ != null ? other.KepplerOrbit.Clone() : null;
      GlonassOrbit = other.glonassOrbit_ != null ? other.GlonassOrbit.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssEphemeris Clone() {
      return new GnssEphemeris(this);
    }

    /// <summary>Field number for the "gnss_type" field.</summary>
    public const int GnssTypeFieldNumber = 1;
    private global::Apollo.Drivers.Gnss.GnssType gnssType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssType GnssType {
      get { return gnssType_; }
      set {
        gnssType_ = value;
      }
    }

    /// <summary>Field number for the "keppler_orbit" field.</summary>
    public const int KepplerOrbitFieldNumber = 2;
    private global::Apollo.Drivers.Gnss.KepplerOrbit kepplerOrbit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.KepplerOrbit KepplerOrbit {
      get { return kepplerOrbit_; }
      set {
        kepplerOrbit_ = value;
      }
    }

    /// <summary>Field number for the "glonass_orbit" field.</summary>
    public const int GlonassOrbitFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.GlonassOrbit glonassOrbit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GlonassOrbit GlonassOrbit {
      get { return glonassOrbit_; }
      set {
        glonassOrbit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GnssEphemeris);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GnssEphemeris other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GnssType != other.GnssType) return false;
      if (!object.Equals(KepplerOrbit, other.KepplerOrbit)) return false;
      if (!object.Equals(GlonassOrbit, other.GlonassOrbit)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GnssType != 0) hash ^= GnssType.GetHashCode();
      if (kepplerOrbit_ != null) hash ^= KepplerOrbit.GetHashCode();
      if (glonassOrbit_ != null) hash ^= GlonassOrbit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GnssType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GnssType);
      }
      if (kepplerOrbit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KepplerOrbit);
      }
      if (glonassOrbit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GlonassOrbit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GnssType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GnssType);
      }
      if (kepplerOrbit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KepplerOrbit);
      }
      if (glonassOrbit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlonassOrbit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GnssEphemeris other) {
      if (other == null) {
        return;
      }
      if (other.GnssType != 0) {
        GnssType = other.GnssType;
      }
      if (other.kepplerOrbit_ != null) {
        if (kepplerOrbit_ == null) {
          kepplerOrbit_ = new global::Apollo.Drivers.Gnss.KepplerOrbit();
        }
        KepplerOrbit.MergeFrom(other.KepplerOrbit);
      }
      if (other.glonassOrbit_ != null) {
        if (glonassOrbit_ == null) {
          glonassOrbit_ = new global::Apollo.Drivers.Gnss.GlonassOrbit();
        }
        GlonassOrbit.MergeFrom(other.GlonassOrbit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            gnssType_ = (global::Apollo.Drivers.Gnss.GnssType) input.ReadEnum();
            break;
          }
          case 18: {
            if (kepplerOrbit_ == null) {
              kepplerOrbit_ = new global::Apollo.Drivers.Gnss.KepplerOrbit();
            }
            input.ReadMessage(kepplerOrbit_);
            break;
          }
          case 26: {
            if (glonassOrbit_ == null) {
              glonassOrbit_ = new global::Apollo.Drivers.Gnss.GlonassOrbit();
            }
            input.ReadMessage(glonassOrbit_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
