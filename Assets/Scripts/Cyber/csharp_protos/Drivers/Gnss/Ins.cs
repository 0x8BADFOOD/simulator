// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/ins.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Gnss {

  /// <summary>Holder for reflection information generated from modules/drivers/gnss/proto/ins.proto</summary>
  public static partial class InsReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/gnss/proto/ins.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRtb2R1bGVzL2RyaXZlcnMvZ25zcy9wcm90by9pbnMucHJvdG8SE2Fwb2xs",
            "by5kcml2ZXJzLmduc3MaIW1vZHVsZXMvY29tbW9uL3Byb3RvL2hlYWRlci5w",
            "cm90bxojbW9kdWxlcy9jb21tb24vcHJvdG8vZ2VvbWV0cnkucHJvdG8iVgoH",
            "SW5zU3RhdBIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRl",
            "chISCgppbnNfc3RhdHVzGAIgASgNEhAKCHBvc190eXBlGAMgASgNIsIECgNJ",
            "bnMSJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFkZXISGAoQ",
            "bWVhc3VyZW1lbnRfdGltZRgCIAEoARIrCgR0eXBlGAMgASgOMh0uYXBvbGxv",
            "LmRyaXZlcnMuZ25zcy5JbnMuVHlwZRIpCghwb3NpdGlvbhgEIAEoCzIXLmFw",
            "b2xsby5jb21tb24uUG9pbnRMTEgSLAoMZXVsZXJfYW5nbGVzGAUgASgLMhYu",
            "YXBvbGxvLmNvbW1vbi5Qb2ludDNEEi8KD2xpbmVhcl92ZWxvY2l0eRgGIAEo",
            "CzIWLmFwb2xsby5jb21tb24uUG9pbnQzRBIwChBhbmd1bGFyX3ZlbG9jaXR5",
            "GAcgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNEEjMKE2xpbmVhcl9hY2Nl",
            "bGVyYXRpb24YCCABKAsyFi5hcG9sbG8uY29tbW9uLlBvaW50M0QSGwoTcG9z",
            "aXRpb25fY292YXJpYW5jZRgJIAMoAhIfChdldWxlcl9hbmdsZXNfY292YXJp",
            "YW5jZRgKIAMoAhIiChpsaW5lYXJfdmVsb2NpdHlfY292YXJpYW5jZRgLIAMo",
            "AhIjChthbmd1bGFyX3ZlbG9jaXR5X2NvdmFyaWFuY2UYDCADKAISJgoebGlu",
            "ZWFyX2FjY2VsZXJhdGlvbl9jb3ZhcmlhbmNlGA0gAygCIi0KBFR5cGUSCwoH",
            "SU5WQUxJRBAAEg4KCkNPTlZFUkdJTkcQARIICgRHT09EEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.InsStat), global::Apollo.Drivers.Gnss.InsStat.Parser, new[]{ "Header", "InsStatus", "PosType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Ins), global::Apollo.Drivers.Gnss.Ins.Parser, new[]{ "Header", "MeasurementTime", "Type", "Position", "EulerAngles", "LinearVelocity", "AngularVelocity", "LinearAcceleration", "PositionCovariance", "EulerAnglesCovariance", "LinearVelocityCovariance", "AngularVelocityCovariance", "LinearAccelerationCovariance" }, null, new[]{ typeof(global::Apollo.Drivers.Gnss.Ins.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InsStat : pb::IMessage<InsStat> {
    private static readonly pb::MessageParser<InsStat> _parser = new pb::MessageParser<InsStat>(() => new InsStat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.InsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsStat(InsStat other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      insStatus_ = other.insStatus_;
      posType_ = other.posType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsStat Clone() {
      return new InsStat(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ins_status" field.</summary>
    public const int InsStatusFieldNumber = 2;
    private uint insStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsStatus {
      get { return insStatus_; }
      set {
        insStatus_ = value;
      }
    }

    /// <summary>Field number for the "pos_type" field.</summary>
    public const int PosTypeFieldNumber = 3;
    private uint posType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (InsStatus != other.InsStatus) return false;
      if (PosType != other.PosType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (InsStatus != 0) hash ^= InsStatus.GetHashCode();
      if (PosType != 0) hash ^= PosType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (InsStatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InsStatus);
      }
      if (PosType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (InsStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsStatus);
      }
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsStat other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.InsStatus != 0) {
        InsStatus = other.InsStatus;
      }
      if (other.PosType != 0) {
        PosType = other.PosType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            InsStatus = input.ReadUInt32();
            break;
          }
          case 24: {
            PosType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Solution from a inertial navigation system (INS), which usually fuses GNSS
  /// and IMU measurements.
  /// </summary>
  public sealed partial class Ins : pb::IMessage<Ins> {
    private static readonly pb::MessageParser<Ins> _parser = new pb::MessageParser<Ins>(() => new Ins());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ins> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.InsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ins() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ins(Ins other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      measurementTime_ = other.measurementTime_;
      type_ = other.type_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      EulerAngles = other.eulerAngles_ != null ? other.EulerAngles.Clone() : null;
      LinearVelocity = other.linearVelocity_ != null ? other.LinearVelocity.Clone() : null;
      AngularVelocity = other.angularVelocity_ != null ? other.AngularVelocity.Clone() : null;
      LinearAcceleration = other.linearAcceleration_ != null ? other.LinearAcceleration.Clone() : null;
      positionCovariance_ = other.positionCovariance_.Clone();
      eulerAnglesCovariance_ = other.eulerAnglesCovariance_.Clone();
      linearVelocityCovariance_ = other.linearVelocityCovariance_.Clone();
      angularVelocityCovariance_ = other.angularVelocityCovariance_.Clone();
      linearAccelerationCovariance_ = other.linearAccelerationCovariance_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ins Clone() {
      return new Ins(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 2;
    private double measurementTime_;
    /// <summary>
    /// The time of position measurement, seconds since the GPS epoch (01/06/1980).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.Ins.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Ins.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Apollo.Common.PointLLH position_;
    /// <summary>
    /// Position of the IMU.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointLLH Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "euler_angles" field.</summary>
    public const int EulerAnglesFieldNumber = 5;
    private global::Apollo.Common.Point3D eulerAngles_;
    /// <summary>
    /// Roll/pitch/yaw in radians.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D EulerAngles {
      get { return eulerAngles_; }
      set {
        eulerAngles_ = value;
      }
    }

    /// <summary>Field number for the "linear_velocity" field.</summary>
    public const int LinearVelocityFieldNumber = 6;
    private global::Apollo.Common.Point3D linearVelocity_;
    /// <summary>
    /// East/north/up in meters per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearVelocity {
      get { return linearVelocity_; }
      set {
        linearVelocity_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 7;
    private global::Apollo.Common.Point3D angularVelocity_;
    /// <summary>
    /// Around forward/left/up axes in radians per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "linear_acceleration" field.</summary>
    public const int LinearAccelerationFieldNumber = 8;
    private global::Apollo.Common.Point3D linearAcceleration_;
    /// <summary>
    /// Forward/left/up in meters per square second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearAcceleration {
      get { return linearAcceleration_; }
      set {
        linearAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "position_covariance" field.</summary>
    public const int PositionCovarianceFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_positionCovariance_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> positionCovariance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 3-by-3 covariance matrix, in m^2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PositionCovariance {
      get { return positionCovariance_; }
    }

    /// <summary>Field number for the "euler_angles_covariance" field.</summary>
    public const int EulerAnglesCovarianceFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_eulerAnglesCovariance_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> eulerAnglesCovariance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 3-by-3 covariance matrix, in rad^2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> EulerAnglesCovariance {
      get { return eulerAnglesCovariance_; }
    }

    /// <summary>Field number for the "linear_velocity_covariance" field.</summary>
    public const int LinearVelocityCovarianceFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_linearVelocityCovariance_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> linearVelocityCovariance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 3-by-3 covariance matrix, in m^2/s^2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LinearVelocityCovariance {
      get { return linearVelocityCovariance_; }
    }

    /// <summary>Field number for the "angular_velocity_covariance" field.</summary>
    public const int AngularVelocityCovarianceFieldNumber = 12;
    private static readonly pb::FieldCodec<float> _repeated_angularVelocityCovariance_codec
        = pb::FieldCodec.ForFloat(98);
    private readonly pbc::RepeatedField<float> angularVelocityCovariance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 3-by-3 covariance matrix, in rad^2/s^2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AngularVelocityCovariance {
      get { return angularVelocityCovariance_; }
    }

    /// <summary>Field number for the "linear_acceleration_covariance" field.</summary>
    public const int LinearAccelerationCovarianceFieldNumber = 13;
    private static readonly pb::FieldCodec<float> _repeated_linearAccelerationCovariance_codec
        = pb::FieldCodec.ForFloat(106);
    private readonly pbc::RepeatedField<float> linearAccelerationCovariance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 3-by-3 covariance matrix, in m^2/s^4.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LinearAccelerationCovariance {
      get { return linearAccelerationCovariance_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ins);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ins other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(EulerAngles, other.EulerAngles)) return false;
      if (!object.Equals(LinearVelocity, other.LinearVelocity)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (!object.Equals(LinearAcceleration, other.LinearAcceleration)) return false;
      if(!positionCovariance_.Equals(other.positionCovariance_)) return false;
      if(!eulerAnglesCovariance_.Equals(other.eulerAnglesCovariance_)) return false;
      if(!linearVelocityCovariance_.Equals(other.linearVelocityCovariance_)) return false;
      if(!angularVelocityCovariance_.Equals(other.angularVelocityCovariance_)) return false;
      if(!linearAccelerationCovariance_.Equals(other.linearAccelerationCovariance_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (eulerAngles_ != null) hash ^= EulerAngles.GetHashCode();
      if (linearVelocity_ != null) hash ^= LinearVelocity.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (linearAcceleration_ != null) hash ^= LinearAcceleration.GetHashCode();
      hash ^= positionCovariance_.GetHashCode();
      hash ^= eulerAnglesCovariance_.GetHashCode();
      hash ^= linearVelocityCovariance_.GetHashCode();
      hash ^= angularVelocityCovariance_.GetHashCode();
      hash ^= linearAccelerationCovariance_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MeasurementTime);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (eulerAngles_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EulerAngles);
      }
      if (linearVelocity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LinearVelocity);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AngularVelocity);
      }
      if (linearAcceleration_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LinearAcceleration);
      }
      positionCovariance_.WriteTo(output, _repeated_positionCovariance_codec);
      eulerAnglesCovariance_.WriteTo(output, _repeated_eulerAnglesCovariance_codec);
      linearVelocityCovariance_.WriteTo(output, _repeated_linearVelocityCovariance_codec);
      angularVelocityCovariance_.WriteTo(output, _repeated_angularVelocityCovariance_codec);
      linearAccelerationCovariance_.WriteTo(output, _repeated_linearAccelerationCovariance_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (eulerAngles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EulerAngles);
      }
      if (linearVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearVelocity);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (linearAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearAcceleration);
      }
      size += positionCovariance_.CalculateSize(_repeated_positionCovariance_codec);
      size += eulerAnglesCovariance_.CalculateSize(_repeated_eulerAnglesCovariance_codec);
      size += linearVelocityCovariance_.CalculateSize(_repeated_linearVelocityCovariance_codec);
      size += angularVelocityCovariance_.CalculateSize(_repeated_angularVelocityCovariance_codec);
      size += linearAccelerationCovariance_.CalculateSize(_repeated_linearAccelerationCovariance_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ins other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.PointLLH();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.eulerAngles_ != null) {
        if (eulerAngles_ == null) {
          eulerAngles_ = new global::Apollo.Common.Point3D();
        }
        EulerAngles.MergeFrom(other.EulerAngles);
      }
      if (other.linearVelocity_ != null) {
        if (linearVelocity_ == null) {
          linearVelocity_ = new global::Apollo.Common.Point3D();
        }
        LinearVelocity.MergeFrom(other.LinearVelocity);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::Apollo.Common.Point3D();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      if (other.linearAcceleration_ != null) {
        if (linearAcceleration_ == null) {
          linearAcceleration_ = new global::Apollo.Common.Point3D();
        }
        LinearAcceleration.MergeFrom(other.LinearAcceleration);
      }
      positionCovariance_.Add(other.positionCovariance_);
      eulerAnglesCovariance_.Add(other.eulerAnglesCovariance_);
      linearVelocityCovariance_.Add(other.linearVelocityCovariance_);
      angularVelocityCovariance_.Add(other.angularVelocityCovariance_);
      linearAccelerationCovariance_.Add(other.linearAccelerationCovariance_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 24: {
            type_ = (global::Apollo.Drivers.Gnss.Ins.Types.Type) input.ReadEnum();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.PointLLH();
            }
            input.ReadMessage(position_);
            break;
          }
          case 42: {
            if (eulerAngles_ == null) {
              eulerAngles_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(eulerAngles_);
            break;
          }
          case 50: {
            if (linearVelocity_ == null) {
              linearVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearVelocity_);
            break;
          }
          case 58: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
          case 66: {
            if (linearAcceleration_ == null) {
              linearAcceleration_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearAcceleration_);
            break;
          }
          case 74:
          case 77: {
            positionCovariance_.AddEntriesFrom(input, _repeated_positionCovariance_codec);
            break;
          }
          case 82:
          case 85: {
            eulerAnglesCovariance_.AddEntriesFrom(input, _repeated_eulerAnglesCovariance_codec);
            break;
          }
          case 90:
          case 93: {
            linearVelocityCovariance_.AddEntriesFrom(input, _repeated_linearVelocityCovariance_codec);
            break;
          }
          case 98:
          case 101: {
            angularVelocityCovariance_.AddEntriesFrom(input, _repeated_angularVelocityCovariance_codec);
            break;
          }
          case 106:
          case 109: {
            linearAccelerationCovariance_.AddEntriesFrom(input, _repeated_linearAccelerationCovariance_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Ins message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// INS solution type.
      /// </summary>
      public enum Type {
        /// <summary>
        /// Do NOT use.
        /// Invalid solution due to insufficient observations, no initial GNSS, ...
        /// </summary>
        [pbr::OriginalName("INVALID")] Invalid = 0,
        /// <summary>
        /// Use with caution. The covariance matrix may be unavailable or incorrect.
        /// High-variance result due to aligning, insufficient vehicle dynamics, ...
        /// </summary>
        [pbr::OriginalName("CONVERGING")] Converging = 1,
        /// <summary>
        /// Safe to use. The INS has fully converged.
        /// </summary>
        [pbr::OriginalName("GOOD")] Good = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
