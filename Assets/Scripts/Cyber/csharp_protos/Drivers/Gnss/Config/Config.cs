// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Gnss.Config {

  /// <summary>Holder for reflection information generated from modules/drivers/gnss/proto/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/gnss/proto/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cidtb2R1bGVzL2RyaXZlcnMvZ25zcy9wcm90by9jb25maWcucHJvdG8SGmFw",
            "b2xsby5kcml2ZXJzLmduc3MuY29uZmlnIrUFCgZTdHJlYW0SOQoGZm9ybWF0",
            "GAEgASgOMikuYXBvbGxvLmRyaXZlcnMuZ25zcy5jb25maWcuU3RyZWFtLkZv",
            "cm1hdBI7CgZzZXJpYWwYAiABKAsyKS5hcG9sbG8uZHJpdmVycy5nbnNzLmNv",
            "bmZpZy5TdHJlYW0uU2VyaWFsSAASNQoDdGNwGAMgASgLMiYuYXBvbGxvLmRy",
            "aXZlcnMuZ25zcy5jb25maWcuU3RyZWFtLlRjcEgAEjUKA3VkcBgEIAEoCzIm",
            "LmFwb2xsby5kcml2ZXJzLmduc3MuY29uZmlnLlN0cmVhbS5VZHBIABI5CgVu",
            "dHJpcBgFIAEoCzIoLmFwb2xsby5kcml2ZXJzLmduc3MuY29uZmlnLlN0cmVh",
            "bS5OdHJpcEgAEhUKDXB1c2hfbG9jYXRpb24YBiABKAgaKwoGU2VyaWFsEg4K",
            "BmRldmljZRgBIAEoDBIRCgliYXVkX3JhdGUYAiABKAUaJAoDVGNwEg8KB2Fk",
            "ZHJlc3MYASABKAwSDAoEcG9ydBgCIAEoBRokCgNVZHASDwoHYWRkcmVzcxgB",
            "IAEoDBIMCgRwb3J0GAIgASgFGm4KBU50cmlwEg8KB2FkZHJlc3MYASABKAwS",
            "DAoEcG9ydBgCIAEoBRITCgttb3VudF9wb2ludBgDIAEoDBIMCgR1c2VyGAQg",
            "ASgMEhAKCHBhc3N3b3JkGAUgASgMEhEKCXRpbWVvdXRfcxgGIAEoDSKBAQoG",
            "Rm9ybWF0EgsKB1VOS05PV04QABIICgROTUVBEAESCwoHUlRDTV9WMhACEgsK",
            "B1JUQ01fVjMQAxIQCgxOT1ZBVEVMX1RFWFQQChISCg5OT1ZBVEVMX0JJTkFS",
            "WRALEg4KClVCTE9YX1RFWFQQFBIQCgxVQkxPWF9CSU5BUlkQFUIGCgR0eXBl",
            "IigKDU5vdmF0ZWxDb25maWcSFwoPaW11X29yaWVudGF0aW9uGAEgASgFIg0K",
            "C1VibG94Q29uZmlnIj4KAlRGEhAKCGZyYW1lX2lkGAEgASgJEhYKDmNoaWxk",
            "X2ZyYW1lX2lkGAIgASgJEg4KBmVuYWJsZRgDIAEoCCL8BQoGQ29uZmlnEjAK",
            "BGRhdGEYASABKAsyIi5hcG9sbG8uZHJpdmVycy5nbnNzLmNvbmZpZy5TdHJl",
            "YW0SMwoHY29tbWFuZBgCIAEoCzIiLmFwb2xsby5kcml2ZXJzLmduc3MuY29u",
            "ZmlnLlN0cmVhbRI0CghydGtfZnJvbRgDIAEoCzIiLmFwb2xsby5kcml2ZXJz",
            "Lmduc3MuY29uZmlnLlN0cmVhbRIyCgZydGtfdG8YBCABKAsyIi5hcG9sbG8u",
            "ZHJpdmVycy5nbnNzLmNvbmZpZy5TdHJlYW0SFgoObG9naW5fY29tbWFuZHMY",
            "BSADKAwSFwoPbG9nb3V0X2NvbW1hbmRzGAYgAygMEkMKDm5vdmF0ZWxfY29u",
            "ZmlnGAcgASgLMikuYXBvbGxvLmRyaXZlcnMuZ25zcy5jb25maWcuTm92YXRl",
            "bENvbmZpZ0gAEj8KDHVibG94X2NvbmZpZxgIIAEoCzInLmFwb2xsby5kcml2",
            "ZXJzLmduc3MuY29uZmlnLlVibG94Q29uZmlnSAASTQoRcnRrX3NvbHV0aW9u",
            "X3R5cGUYCSABKA4yMi5hcG9sbG8uZHJpdmVycy5nbnNzLmNvbmZpZy5Db25m",
            "aWcuUnRrU29sdXRpb25UeXBlEjUKCGltdV90eXBlGAogASgOMiMuYXBvbGxv",
            "LmRyaXZlcnMuZ25zcy5jb25maWcuSW11VHlwZRISCgpwcm9qNF90ZXh0GAsg",
            "ASgJEioKAnRmGAwgASgLMh4uYXBvbGxvLmRyaXZlcnMuZ25zcy5jb25maWcu",
            "VEYSGAoQd2hlZWxfcGFyYW1ldGVycxgNIAEoCRIVCg1ncHNiaW5fZm9sZGVy",
            "GA4gASgJImIKD1J0a1NvbHV0aW9uVHlwZRIZChVSVEtTT0xVVElPTlRZUEVf",
            "RFVNTVkQABIZChVSVEtfUkVDRUlWRVJfU09MVVRJT04QARIZChVSVEtfU09G",
            "VFdBUkVfU09MVVRJT04QAkIPCg1kZXZpY2VfY29uZmlnKrkBCgdJbXVUeXBl",
            "EhEKDUlNVVRZUEVfRFVNTVkQABINCglJTUFSX0ZTQVMQDRILCgdJU0ExMDBD",
            "EBoSDQoJQURJUzE2NDg4EB8SCwoHU1RJTTMwMBAgEgoKBklTQTEwMBAiEhAK",
            "DElTQTEwMF80MDBIWhAmEhEKDUlTQTEwMENfNDAwSFoQJxIJCgVHMzIwThAo",
            "Eg4KCkNQVF9YVzU2NTEQKRIJCgVVTTQ0MhAqEgwKCElBTTIwNjgwEDliBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Drivers.Gnss.Config.ImuType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.Stream), global::Apollo.Drivers.Gnss.Config.Stream.Parser, new[]{ "Format", "Serial", "Tcp", "Udp", "Ntrip", "PushLocation" }, new[]{ "Type" }, new[]{ typeof(global::Apollo.Drivers.Gnss.Config.Stream.Types.Format) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.Stream.Types.Serial), global::Apollo.Drivers.Gnss.Config.Stream.Types.Serial.Parser, new[]{ "Device", "BaudRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.Stream.Types.Tcp), global::Apollo.Drivers.Gnss.Config.Stream.Types.Tcp.Parser, new[]{ "Address", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.Stream.Types.Udp), global::Apollo.Drivers.Gnss.Config.Stream.Types.Udp.Parser, new[]{ "Address", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.Stream.Types.Ntrip), global::Apollo.Drivers.Gnss.Config.Stream.Types.Ntrip.Parser, new[]{ "Address", "Port", "MountPoint", "User", "Password", "TimeoutS" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.NovatelConfig), global::Apollo.Drivers.Gnss.Config.NovatelConfig.Parser, new[]{ "ImuOrientation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.UbloxConfig), global::Apollo.Drivers.Gnss.Config.UbloxConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.TF), global::Apollo.Drivers.Gnss.Config.TF.Parser, new[]{ "FrameId", "ChildFrameId", "Enable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.Config.Config), global::Apollo.Drivers.Gnss.Config.Config.Parser, new[]{ "Data", "Command", "RtkFrom", "RtkTo", "LoginCommands", "LogoutCommands", "NovatelConfig", "UbloxConfig", "RtkSolutionType", "ImuType", "Proj4Text", "Tf", "WheelParameters", "GpsbinFolder" }, new[]{ "DeviceConfig" }, new[]{ typeof(global::Apollo.Drivers.Gnss.Config.Config.Types.RtkSolutionType) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ImuType {
    [pbr::OriginalName("IMUTYPE_DUMMY")] Dummy = 0,
    /// <summary>
    /// We currently use the following IMUs. We'll extend this list when a new IMU
    /// is introduced.
    /// </summary>
    [pbr::OriginalName("IMAR_FSAS")] ImarFsas = 13,
    /// <summary>
    /// Northrop Grumman Litef ISA-100C
    /// </summary>
    [pbr::OriginalName("ISA100C")] Isa100C = 26,
    /// <summary>
    /// Analog Devices ADIS16488
    /// </summary>
    [pbr::OriginalName("ADIS16488")] Adis16488 = 31,
    /// <summary>
    /// Sensonor STIM300
    /// </summary>
    [pbr::OriginalName("STIM300")] Stim300 = 32,
    /// <summary>
    /// Northrop Grumman Litef ISA-100
    /// </summary>
    [pbr::OriginalName("ISA100")] Isa100 = 34,
    /// <summary>
    /// Northrop Grumman Litef ISA-100
    /// </summary>
    [pbr::OriginalName("ISA100_400HZ")] Isa100400Hz = 38,
    /// <summary>
    /// Northrop Grumman Litef ISA-100
    /// </summary>
    [pbr::OriginalName("ISA100C_400HZ")] Isa100C400Hz = 39,
    /// <summary>
    /// EPSON G320N
    /// </summary>
    [pbr::OriginalName("G320N")] G320N = 40,
    /// <summary>
    /// IMU@SPAN-CPT, and XingWangYuda 5651
    /// </summary>
    [pbr::OriginalName("CPT_XW5651")] CptXw5651 = 41,
    /// <summary>
    /// UM442
    /// </summary>
    [pbr::OriginalName("UM442")] Um442 = 42,
    /// <summary>
    /// InvenSense-IAM20680
    /// </summary>
    [pbr::OriginalName("IAM20680")] Iam20680 = 57,
  }

  #endregion

  #region Messages
  public sealed partial class Stream : pb::IMessage<Stream> {
    private static readonly pb::MessageParser<Stream> _parser = new pb::MessageParser<Stream>(() => new Stream());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.Config.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream(Stream other) : this() {
      format_ = other.format_;
      pushLocation_ = other.pushLocation_;
      switch (other.TypeCase) {
        case TypeOneofCase.Serial:
          Serial = other.Serial.Clone();
          break;
        case TypeOneofCase.Tcp:
          Tcp = other.Tcp.Clone();
          break;
        case TypeOneofCase.Udp:
          Udp = other.Udp.Clone();
          break;
        case TypeOneofCase.Ntrip:
          Ntrip = other.Ntrip.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream Clone() {
      return new Stream(this);
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 1;
    private global::Apollo.Drivers.Gnss.Config.Stream.Types.Format format_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream.Types.Format Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream.Types.Serial Serial {
      get { return typeCase_ == TypeOneofCase.Serial ? (global::Apollo.Drivers.Gnss.Config.Stream.Types.Serial) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Serial;
      }
    }

    /// <summary>Field number for the "tcp" field.</summary>
    public const int TcpFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream.Types.Tcp Tcp {
      get { return typeCase_ == TypeOneofCase.Tcp ? (global::Apollo.Drivers.Gnss.Config.Stream.Types.Tcp) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tcp;
      }
    }

    /// <summary>Field number for the "udp" field.</summary>
    public const int UdpFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream.Types.Udp Udp {
      get { return typeCase_ == TypeOneofCase.Udp ? (global::Apollo.Drivers.Gnss.Config.Stream.Types.Udp) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Udp;
      }
    }

    /// <summary>Field number for the "ntrip" field.</summary>
    public const int NtripFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream.Types.Ntrip Ntrip {
      get { return typeCase_ == TypeOneofCase.Ntrip ? (global::Apollo.Drivers.Gnss.Config.Stream.Types.Ntrip) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Ntrip;
      }
    }

    /// <summary>Field number for the "push_location" field.</summary>
    public const int PushLocationFieldNumber = 6;
    private bool pushLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PushLocation {
      get { return pushLocation_; }
      set {
        pushLocation_ = value;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Serial = 2,
      Tcp = 3,
      Udp = 4,
      Ntrip = 5,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Format != other.Format) return false;
      if (!object.Equals(Serial, other.Serial)) return false;
      if (!object.Equals(Tcp, other.Tcp)) return false;
      if (!object.Equals(Udp, other.Udp)) return false;
      if (!object.Equals(Ntrip, other.Ntrip)) return false;
      if (PushLocation != other.PushLocation) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Format != 0) hash ^= Format.GetHashCode();
      if (typeCase_ == TypeOneofCase.Serial) hash ^= Serial.GetHashCode();
      if (typeCase_ == TypeOneofCase.Tcp) hash ^= Tcp.GetHashCode();
      if (typeCase_ == TypeOneofCase.Udp) hash ^= Udp.GetHashCode();
      if (typeCase_ == TypeOneofCase.Ntrip) hash ^= Ntrip.GetHashCode();
      if (PushLocation != false) hash ^= PushLocation.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Format != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Format);
      }
      if (typeCase_ == TypeOneofCase.Serial) {
        output.WriteRawTag(18);
        output.WriteMessage(Serial);
      }
      if (typeCase_ == TypeOneofCase.Tcp) {
        output.WriteRawTag(26);
        output.WriteMessage(Tcp);
      }
      if (typeCase_ == TypeOneofCase.Udp) {
        output.WriteRawTag(34);
        output.WriteMessage(Udp);
      }
      if (typeCase_ == TypeOneofCase.Ntrip) {
        output.WriteRawTag(42);
        output.WriteMessage(Ntrip);
      }
      if (PushLocation != false) {
        output.WriteRawTag(48);
        output.WriteBool(PushLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (typeCase_ == TypeOneofCase.Serial) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Serial);
      }
      if (typeCase_ == TypeOneofCase.Tcp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tcp);
      }
      if (typeCase_ == TypeOneofCase.Udp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Udp);
      }
      if (typeCase_ == TypeOneofCase.Ntrip) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ntrip);
      }
      if (PushLocation != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stream other) {
      if (other == null) {
        return;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.PushLocation != false) {
        PushLocation = other.PushLocation;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Serial:
          Serial = other.Serial;
          break;
        case TypeOneofCase.Tcp:
          Tcp = other.Tcp;
          break;
        case TypeOneofCase.Udp:
          Udp = other.Udp;
          break;
        case TypeOneofCase.Ntrip:
          Ntrip = other.Ntrip;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            format_ = (global::Apollo.Drivers.Gnss.Config.Stream.Types.Format) input.ReadEnum();
            break;
          }
          case 18: {
            global::Apollo.Drivers.Gnss.Config.Stream.Types.Serial subBuilder = new global::Apollo.Drivers.Gnss.Config.Stream.Types.Serial();
            if (typeCase_ == TypeOneofCase.Serial) {
              subBuilder.MergeFrom(Serial);
            }
            input.ReadMessage(subBuilder);
            Serial = subBuilder;
            break;
          }
          case 26: {
            global::Apollo.Drivers.Gnss.Config.Stream.Types.Tcp subBuilder = new global::Apollo.Drivers.Gnss.Config.Stream.Types.Tcp();
            if (typeCase_ == TypeOneofCase.Tcp) {
              subBuilder.MergeFrom(Tcp);
            }
            input.ReadMessage(subBuilder);
            Tcp = subBuilder;
            break;
          }
          case 34: {
            global::Apollo.Drivers.Gnss.Config.Stream.Types.Udp subBuilder = new global::Apollo.Drivers.Gnss.Config.Stream.Types.Udp();
            if (typeCase_ == TypeOneofCase.Udp) {
              subBuilder.MergeFrom(Udp);
            }
            input.ReadMessage(subBuilder);
            Udp = subBuilder;
            break;
          }
          case 42: {
            global::Apollo.Drivers.Gnss.Config.Stream.Types.Ntrip subBuilder = new global::Apollo.Drivers.Gnss.Config.Stream.Types.Ntrip();
            if (typeCase_ == TypeOneofCase.Ntrip) {
              subBuilder.MergeFrom(Ntrip);
            }
            input.ReadMessage(subBuilder);
            Ntrip = subBuilder;
            break;
          }
          case 48: {
            PushLocation = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Stream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Format {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("NMEA")] Nmea = 1,
        [pbr::OriginalName("RTCM_V2")] RtcmV2 = 2,
        [pbr::OriginalName("RTCM_V3")] RtcmV3 = 3,
        [pbr::OriginalName("NOVATEL_TEXT")] NovatelText = 10,
        [pbr::OriginalName("NOVATEL_BINARY")] NovatelBinary = 11,
        [pbr::OriginalName("UBLOX_TEXT")] UbloxText = 20,
        [pbr::OriginalName("UBLOX_BINARY")] UbloxBinary = 21,
      }

      public sealed partial class Serial : pb::IMessage<Serial> {
        private static readonly pb::MessageParser<Serial> _parser = new pb::MessageParser<Serial>(() => new Serial());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Serial> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Drivers.Gnss.Config.Stream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Serial() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Serial(Serial other) : this() {
          device_ = other.device_;
          baudRate_ = other.baudRate_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Serial Clone() {
          return new Serial(this);
        }

        /// <summary>Field number for the "device" field.</summary>
        public const int DeviceFieldNumber = 1;
        private pb::ByteString device_ = pb::ByteString.Empty;
        /// <summary>
        /// Something like "/dev/ttyXXX".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Device {
          get { return device_; }
          set {
            device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "baud_rate" field.</summary>
        public const int BaudRateFieldNumber = 2;
        private int baudRate_;
        /// <summary>
        /// In general, we assumes no parity, 8 data bits, 1 stop bit, no
        /// handshaking, break detection enabled. If not, add more fields here.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BaudRate {
          get { return baudRate_; }
          set {
            baudRate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Serial);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Serial other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Device != other.Device) return false;
          if (BaudRate != other.BaudRate) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Device.Length != 0) hash ^= Device.GetHashCode();
          if (BaudRate != 0) hash ^= BaudRate.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Device.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Device);
          }
          if (BaudRate != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(BaudRate);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Device.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Device);
          }
          if (BaudRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaudRate);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Serial other) {
          if (other == null) {
            return;
          }
          if (other.Device.Length != 0) {
            Device = other.Device;
          }
          if (other.BaudRate != 0) {
            BaudRate = other.BaudRate;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Device = input.ReadBytes();
                break;
              }
              case 16: {
                BaudRate = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Tcp : pb::IMessage<Tcp> {
        private static readonly pb::MessageParser<Tcp> _parser = new pb::MessageParser<Tcp>(() => new Tcp());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tcp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Drivers.Gnss.Config.Stream.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tcp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tcp(Tcp other) : this() {
          address_ = other.address_;
          port_ = other.port_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tcp Clone() {
          return new Tcp(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private pb::ByteString address_ = pb::ByteString.Empty;
        /// <summary>
        /// Something like "192.168.10.6".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 2;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tcp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tcp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (Port != other.Port) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Address);
          }
          if (Port != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Port);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tcp other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Address = input.ReadBytes();
                break;
              }
              case 16: {
                Port = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Udp : pb::IMessage<Udp> {
        private static readonly pb::MessageParser<Udp> _parser = new pb::MessageParser<Udp>(() => new Udp());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Udp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Drivers.Gnss.Config.Stream.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Udp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Udp(Udp other) : this() {
          address_ = other.address_;
          port_ = other.port_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Udp Clone() {
          return new Udp(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private pb::ByteString address_ = pb::ByteString.Empty;
        /// <summary>
        /// Something like "192.168.10.6".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 2;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Udp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Udp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (Port != other.Port) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Address);
          }
          if (Port != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Port);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Udp other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Address = input.ReadBytes();
                break;
              }
              case 16: {
                Port = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Ntrip : pb::IMessage<Ntrip> {
        private static readonly pb::MessageParser<Ntrip> _parser = new pb::MessageParser<Ntrip>(() => new Ntrip());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Ntrip> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Drivers.Gnss.Config.Stream.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ntrip() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ntrip(Ntrip other) : this() {
          address_ = other.address_;
          port_ = other.port_;
          mountPoint_ = other.mountPoint_;
          user_ = other.user_;
          password_ = other.password_;
          timeoutS_ = other.timeoutS_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ntrip Clone() {
          return new Ntrip(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private pb::ByteString address_ = pb::ByteString.Empty;
        /// <summary>
        /// Something like "1.1.1.1".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 2;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        /// <summary>Field number for the "mount_point" field.</summary>
        public const int MountPointFieldNumber = 3;
        private pb::ByteString mountPoint_ = pb::ByteString.Empty;
        /// <summary>
        /// Something like "demo".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString MountPoint {
          get { return mountPoint_; }
          set {
            mountPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 4;
        private pb::ByteString user_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString User {
          get { return user_; }
          set {
            user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 5;
        private pb::ByteString password_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timeout_s" field.</summary>
        public const int TimeoutSFieldNumber = 6;
        private uint timeoutS_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutS {
          get { return timeoutS_; }
          set {
            timeoutS_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Ntrip);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Ntrip other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (Port != other.Port) return false;
          if (MountPoint != other.MountPoint) return false;
          if (User != other.User) return false;
          if (Password != other.Password) return false;
          if (TimeoutS != other.TimeoutS) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (MountPoint.Length != 0) hash ^= MountPoint.GetHashCode();
          if (User.Length != 0) hash ^= User.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          if (TimeoutS != 0) hash ^= TimeoutS.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Address);
          }
          if (Port != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Port);
          }
          if (MountPoint.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(MountPoint);
          }
          if (User.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(User);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Password);
          }
          if (TimeoutS != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(TimeoutS);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (MountPoint.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(MountPoint);
          }
          if (User.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(User);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
          }
          if (TimeoutS != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutS);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Ntrip other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
          if (other.MountPoint.Length != 0) {
            MountPoint = other.MountPoint;
          }
          if (other.User.Length != 0) {
            User = other.User;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
          if (other.TimeoutS != 0) {
            TimeoutS = other.TimeoutS;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Address = input.ReadBytes();
                break;
              }
              case 16: {
                Port = input.ReadInt32();
                break;
              }
              case 26: {
                MountPoint = input.ReadBytes();
                break;
              }
              case 34: {
                User = input.ReadBytes();
                break;
              }
              case 42: {
                Password = input.ReadBytes();
                break;
              }
              case 48: {
                TimeoutS = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Device-specific configuration.
  /// </summary>
  public sealed partial class NovatelConfig : pb::IMessage<NovatelConfig> {
    private static readonly pb::MessageParser<NovatelConfig> _parser = new pb::MessageParser<NovatelConfig>(() => new NovatelConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NovatelConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.Config.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovatelConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovatelConfig(NovatelConfig other) : this() {
      imuOrientation_ = other.imuOrientation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovatelConfig Clone() {
      return new NovatelConfig(this);
    }

    /// <summary>Field number for the "imu_orientation" field.</summary>
    public const int ImuOrientationFieldNumber = 1;
    private int imuOrientation_;
    /// <summary>
    /// See Page 75 of SPAN on OEM6 Firmware Reference Manual for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImuOrientation {
      get { return imuOrientation_; }
      set {
        imuOrientation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NovatelConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NovatelConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImuOrientation != other.ImuOrientation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImuOrientation != 0) hash ^= ImuOrientation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImuOrientation != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImuOrientation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImuOrientation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImuOrientation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NovatelConfig other) {
      if (other == null) {
        return;
      }
      if (other.ImuOrientation != 0) {
        ImuOrientation = other.ImuOrientation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ImuOrientation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UbloxConfig : pb::IMessage<UbloxConfig> {
    private static readonly pb::MessageParser<UbloxConfig> _parser = new pb::MessageParser<UbloxConfig>(() => new UbloxConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UbloxConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.Config.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UbloxConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UbloxConfig(UbloxConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UbloxConfig Clone() {
      return new UbloxConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UbloxConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UbloxConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UbloxConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TF : pb::IMessage<TF> {
    private static readonly pb::MessageParser<TF> _parser = new pb::MessageParser<TF>(() => new TF());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.Config.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TF(TF other) : this() {
      frameId_ = other.frameId_;
      childFrameId_ = other.childFrameId_;
      enable_ = other.enable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TF Clone() {
      return new TF(this);
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private string frameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameId {
      get { return frameId_; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_frame_id" field.</summary>
    public const int ChildFrameIdFieldNumber = 2;
    private string childFrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChildFrameId {
      get { return childFrameId_; }
      set {
        childFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 3;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameId != other.FrameId) return false;
      if (ChildFrameId != other.ChildFrameId) return false;
      if (Enable != other.Enable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameId.Length != 0) hash ^= FrameId.GetHashCode();
      if (ChildFrameId.Length != 0) hash ^= ChildFrameId.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FrameId);
      }
      if (ChildFrameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChildFrameId);
      }
      if (Enable != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (ChildFrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChildFrameId);
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TF other) {
      if (other == null) {
        return;
      }
      if (other.FrameId.Length != 0) {
        FrameId = other.FrameId;
      }
      if (other.ChildFrameId.Length != 0) {
        ChildFrameId = other.ChildFrameId;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FrameId = input.ReadString();
            break;
          }
          case 18: {
            ChildFrameId = input.ReadString();
            break;
          }
          case 24: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.Config.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
      Command = other.command_ != null ? other.Command.Clone() : null;
      RtkFrom = other.rtkFrom_ != null ? other.RtkFrom.Clone() : null;
      RtkTo = other.rtkTo_ != null ? other.RtkTo.Clone() : null;
      loginCommands_ = other.loginCommands_.Clone();
      logoutCommands_ = other.logoutCommands_.Clone();
      rtkSolutionType_ = other.rtkSolutionType_;
      imuType_ = other.imuType_;
      proj4Text_ = other.proj4Text_;
      Tf = other.tf_ != null ? other.Tf.Clone() : null;
      wheelParameters_ = other.wheelParameters_;
      gpsbinFolder_ = other.gpsbinFolder_;
      switch (other.DeviceConfigCase) {
        case DeviceConfigOneofCase.NovatelConfig:
          NovatelConfig = other.NovatelConfig.Clone();
          break;
        case DeviceConfigOneofCase.UbloxConfig:
          UbloxConfig = other.UbloxConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Apollo.Drivers.Gnss.Config.Stream data_;
    /// <summary>
    /// The driver reads data from this port. This port should always be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::Apollo.Drivers.Gnss.Config.Stream command_;
    /// <summary>
    /// If given, the driver sends commands to this port. If not given, the driver
    /// sends commands to the data port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "rtk_from" field.</summary>
    public const int RtkFromFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.Config.Stream rtkFrom_;
    /// <summary>
    /// The driver gets RTK correction data from this remote port. Usually this is
    /// an NTRIP port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream RtkFrom {
      get { return rtkFrom_; }
      set {
        rtkFrom_ = value;
      }
    }

    /// <summary>Field number for the "rtk_to" field.</summary>
    public const int RtkToFieldNumber = 4;
    private global::Apollo.Drivers.Gnss.Config.Stream rtkTo_;
    /// <summary>
    /// If given, the driver sends RTK correction data to this port. If not given,
    /// the driver sends RTK correction data to the data port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Stream RtkTo {
      get { return rtkTo_; }
      set {
        rtkTo_ = value;
      }
    }

    /// <summary>Field number for the "login_commands" field.</summary>
    public const int LoginCommandsFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_loginCommands_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> loginCommands_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> LoginCommands {
      get { return loginCommands_; }
    }

    /// <summary>Field number for the "logout_commands" field.</summary>
    public const int LogoutCommandsFieldNumber = 6;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_logoutCommands_codec
        = pb::FieldCodec.ForBytes(50);
    private readonly pbc::RepeatedField<pb::ByteString> logoutCommands_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> LogoutCommands {
      get { return logoutCommands_; }
    }

    /// <summary>Field number for the "novatel_config" field.</summary>
    public const int NovatelConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.NovatelConfig NovatelConfig {
      get { return deviceConfigCase_ == DeviceConfigOneofCase.NovatelConfig ? (global::Apollo.Drivers.Gnss.Config.NovatelConfig) deviceConfig_ : null; }
      set {
        deviceConfig_ = value;
        deviceConfigCase_ = value == null ? DeviceConfigOneofCase.None : DeviceConfigOneofCase.NovatelConfig;
      }
    }

    /// <summary>Field number for the "ublox_config" field.</summary>
    public const int UbloxConfigFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.UbloxConfig UbloxConfig {
      get { return deviceConfigCase_ == DeviceConfigOneofCase.UbloxConfig ? (global::Apollo.Drivers.Gnss.Config.UbloxConfig) deviceConfig_ : null; }
      set {
        deviceConfig_ = value;
        deviceConfigCase_ = value == null ? DeviceConfigOneofCase.None : DeviceConfigOneofCase.UbloxConfig;
      }
    }

    /// <summary>Field number for the "rtk_solution_type" field.</summary>
    public const int RtkSolutionTypeFieldNumber = 9;
    private global::Apollo.Drivers.Gnss.Config.Config.Types.RtkSolutionType rtkSolutionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.Config.Types.RtkSolutionType RtkSolutionType {
      get { return rtkSolutionType_; }
      set {
        rtkSolutionType_ = value;
      }
    }

    /// <summary>Field number for the "imu_type" field.</summary>
    public const int ImuTypeFieldNumber = 10;
    private global::Apollo.Drivers.Gnss.Config.ImuType imuType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.ImuType ImuType {
      get { return imuType_; }
      set {
        imuType_ = value;
      }
    }

    /// <summary>Field number for the "proj4_text" field.</summary>
    public const int Proj4TextFieldNumber = 11;
    private string proj4Text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Proj4Text {
      get { return proj4Text_; }
      set {
        proj4Text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tf" field.</summary>
    public const int TfFieldNumber = 12;
    private global::Apollo.Drivers.Gnss.Config.TF tf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.Config.TF Tf {
      get { return tf_; }
      set {
        tf_ = value;
      }
    }

    /// <summary>Field number for the "wheel_parameters" field.</summary>
    public const int WheelParametersFieldNumber = 13;
    private string wheelParameters_ = "";
    /// <summary>
    /// If given, the driver will send velocity info to novatel with command stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WheelParameters {
      get { return wheelParameters_; }
      set {
        wheelParameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gpsbin_folder" field.</summary>
    public const int GpsbinFolderFieldNumber = 14;
    private string gpsbinFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GpsbinFolder {
      get { return gpsbinFolder_; }
      set {
        gpsbinFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object deviceConfig_;
    /// <summary>Enum of possible cases for the "device_config" oneof.</summary>
    public enum DeviceConfigOneofCase {
      None = 0,
      NovatelConfig = 7,
      UbloxConfig = 8,
    }
    private DeviceConfigOneofCase deviceConfigCase_ = DeviceConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceConfigOneofCase DeviceConfigCase {
      get { return deviceConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeviceConfig() {
      deviceConfigCase_ = DeviceConfigOneofCase.None;
      deviceConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(Command, other.Command)) return false;
      if (!object.Equals(RtkFrom, other.RtkFrom)) return false;
      if (!object.Equals(RtkTo, other.RtkTo)) return false;
      if(!loginCommands_.Equals(other.loginCommands_)) return false;
      if(!logoutCommands_.Equals(other.logoutCommands_)) return false;
      if (!object.Equals(NovatelConfig, other.NovatelConfig)) return false;
      if (!object.Equals(UbloxConfig, other.UbloxConfig)) return false;
      if (RtkSolutionType != other.RtkSolutionType) return false;
      if (ImuType != other.ImuType) return false;
      if (Proj4Text != other.Proj4Text) return false;
      if (!object.Equals(Tf, other.Tf)) return false;
      if (WheelParameters != other.WheelParameters) return false;
      if (GpsbinFolder != other.GpsbinFolder) return false;
      if (DeviceConfigCase != other.DeviceConfigCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (command_ != null) hash ^= Command.GetHashCode();
      if (rtkFrom_ != null) hash ^= RtkFrom.GetHashCode();
      if (rtkTo_ != null) hash ^= RtkTo.GetHashCode();
      hash ^= loginCommands_.GetHashCode();
      hash ^= logoutCommands_.GetHashCode();
      if (deviceConfigCase_ == DeviceConfigOneofCase.NovatelConfig) hash ^= NovatelConfig.GetHashCode();
      if (deviceConfigCase_ == DeviceConfigOneofCase.UbloxConfig) hash ^= UbloxConfig.GetHashCode();
      if (RtkSolutionType != 0) hash ^= RtkSolutionType.GetHashCode();
      if (ImuType != 0) hash ^= ImuType.GetHashCode();
      if (Proj4Text.Length != 0) hash ^= Proj4Text.GetHashCode();
      if (tf_ != null) hash ^= Tf.GetHashCode();
      if (WheelParameters.Length != 0) hash ^= WheelParameters.GetHashCode();
      if (GpsbinFolder.Length != 0) hash ^= GpsbinFolder.GetHashCode();
      hash ^= (int) deviceConfigCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (command_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Command);
      }
      if (rtkFrom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RtkFrom);
      }
      if (rtkTo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RtkTo);
      }
      loginCommands_.WriteTo(output, _repeated_loginCommands_codec);
      logoutCommands_.WriteTo(output, _repeated_logoutCommands_codec);
      if (deviceConfigCase_ == DeviceConfigOneofCase.NovatelConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(NovatelConfig);
      }
      if (deviceConfigCase_ == DeviceConfigOneofCase.UbloxConfig) {
        output.WriteRawTag(66);
        output.WriteMessage(UbloxConfig);
      }
      if (RtkSolutionType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) RtkSolutionType);
      }
      if (ImuType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ImuType);
      }
      if (Proj4Text.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Proj4Text);
      }
      if (tf_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Tf);
      }
      if (WheelParameters.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WheelParameters);
      }
      if (GpsbinFolder.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(GpsbinFolder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (command_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      if (rtkFrom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RtkFrom);
      }
      if (rtkTo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RtkTo);
      }
      size += loginCommands_.CalculateSize(_repeated_loginCommands_codec);
      size += logoutCommands_.CalculateSize(_repeated_logoutCommands_codec);
      if (deviceConfigCase_ == DeviceConfigOneofCase.NovatelConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NovatelConfig);
      }
      if (deviceConfigCase_ == DeviceConfigOneofCase.UbloxConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UbloxConfig);
      }
      if (RtkSolutionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RtkSolutionType);
      }
      if (ImuType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImuType);
      }
      if (Proj4Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Proj4Text);
      }
      if (tf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tf);
      }
      if (WheelParameters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WheelParameters);
      }
      if (GpsbinFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsbinFolder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Apollo.Drivers.Gnss.Config.Stream();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.command_ != null) {
        if (command_ == null) {
          command_ = new global::Apollo.Drivers.Gnss.Config.Stream();
        }
        Command.MergeFrom(other.Command);
      }
      if (other.rtkFrom_ != null) {
        if (rtkFrom_ == null) {
          rtkFrom_ = new global::Apollo.Drivers.Gnss.Config.Stream();
        }
        RtkFrom.MergeFrom(other.RtkFrom);
      }
      if (other.rtkTo_ != null) {
        if (rtkTo_ == null) {
          rtkTo_ = new global::Apollo.Drivers.Gnss.Config.Stream();
        }
        RtkTo.MergeFrom(other.RtkTo);
      }
      loginCommands_.Add(other.loginCommands_);
      logoutCommands_.Add(other.logoutCommands_);
      if (other.RtkSolutionType != 0) {
        RtkSolutionType = other.RtkSolutionType;
      }
      if (other.ImuType != 0) {
        ImuType = other.ImuType;
      }
      if (other.Proj4Text.Length != 0) {
        Proj4Text = other.Proj4Text;
      }
      if (other.tf_ != null) {
        if (tf_ == null) {
          tf_ = new global::Apollo.Drivers.Gnss.Config.TF();
        }
        Tf.MergeFrom(other.Tf);
      }
      if (other.WheelParameters.Length != 0) {
        WheelParameters = other.WheelParameters;
      }
      if (other.GpsbinFolder.Length != 0) {
        GpsbinFolder = other.GpsbinFolder;
      }
      switch (other.DeviceConfigCase) {
        case DeviceConfigOneofCase.NovatelConfig:
          NovatelConfig = other.NovatelConfig;
          break;
        case DeviceConfigOneofCase.UbloxConfig:
          UbloxConfig = other.UbloxConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Apollo.Drivers.Gnss.Config.Stream();
            }
            input.ReadMessage(data_);
            break;
          }
          case 18: {
            if (command_ == null) {
              command_ = new global::Apollo.Drivers.Gnss.Config.Stream();
            }
            input.ReadMessage(command_);
            break;
          }
          case 26: {
            if (rtkFrom_ == null) {
              rtkFrom_ = new global::Apollo.Drivers.Gnss.Config.Stream();
            }
            input.ReadMessage(rtkFrom_);
            break;
          }
          case 34: {
            if (rtkTo_ == null) {
              rtkTo_ = new global::Apollo.Drivers.Gnss.Config.Stream();
            }
            input.ReadMessage(rtkTo_);
            break;
          }
          case 42: {
            loginCommands_.AddEntriesFrom(input, _repeated_loginCommands_codec);
            break;
          }
          case 50: {
            logoutCommands_.AddEntriesFrom(input, _repeated_logoutCommands_codec);
            break;
          }
          case 58: {
            global::Apollo.Drivers.Gnss.Config.NovatelConfig subBuilder = new global::Apollo.Drivers.Gnss.Config.NovatelConfig();
            if (deviceConfigCase_ == DeviceConfigOneofCase.NovatelConfig) {
              subBuilder.MergeFrom(NovatelConfig);
            }
            input.ReadMessage(subBuilder);
            NovatelConfig = subBuilder;
            break;
          }
          case 66: {
            global::Apollo.Drivers.Gnss.Config.UbloxConfig subBuilder = new global::Apollo.Drivers.Gnss.Config.UbloxConfig();
            if (deviceConfigCase_ == DeviceConfigOneofCase.UbloxConfig) {
              subBuilder.MergeFrom(UbloxConfig);
            }
            input.ReadMessage(subBuilder);
            UbloxConfig = subBuilder;
            break;
          }
          case 72: {
            rtkSolutionType_ = (global::Apollo.Drivers.Gnss.Config.Config.Types.RtkSolutionType) input.ReadEnum();
            break;
          }
          case 80: {
            imuType_ = (global::Apollo.Drivers.Gnss.Config.ImuType) input.ReadEnum();
            break;
          }
          case 90: {
            Proj4Text = input.ReadString();
            break;
          }
          case 98: {
            if (tf_ == null) {
              tf_ = new global::Apollo.Drivers.Gnss.Config.TF();
            }
            input.ReadMessage(tf_);
            break;
          }
          case 106: {
            WheelParameters = input.ReadString();
            break;
          }
          case 114: {
            GpsbinFolder = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RtkSolutionType {
        [pbr::OriginalName("RTKSOLUTIONTYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("RTK_RECEIVER_SOLUTION")] RtkReceiverSolution = 1,
        [pbr::OriginalName("RTK_SOFTWARE_SOLUTION")] RtkSoftwareSolution = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
