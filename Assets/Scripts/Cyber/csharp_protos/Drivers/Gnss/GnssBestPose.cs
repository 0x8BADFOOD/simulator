// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_best_pose.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Gnss {

  /// <summary>Holder for reflection information generated from modules/drivers/gnss/proto/gnss_best_pose.proto</summary>
  public static partial class GnssBestPoseReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/gnss/proto/gnss_best_pose.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GnssBestPoseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb2R1bGVzL2RyaXZlcnMvZ25zcy9wcm90by9nbnNzX2Jlc3RfcG9zZS5w",
            "cm90bxITYXBvbGxvLmRyaXZlcnMuZ25zcxohbW9kdWxlcy9jb21tb24vcHJv",
            "dG8vaGVhZGVyLnByb3RvIqoFCgxHbnNzQmVzdFBvc2USJQoGaGVhZGVyGAEg",
            "ASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFkZXISGAoQbWVhc3VyZW1lbnRfdGlt",
            "ZRgCIAEoARI3Cgpzb2xfc3RhdHVzGAMgASgOMiMuYXBvbGxvLmRyaXZlcnMu",
            "Z25zcy5Tb2x1dGlvblN0YXR1cxIzCghzb2xfdHlwZRgEIAEoDjIhLmFwb2xs",
            "by5kcml2ZXJzLmduc3MuU29sdXRpb25UeXBlEhAKCGxhdGl0dWRlGAUgASgB",
            "EhEKCWxvbmdpdHVkZRgGIAEoARISCgpoZWlnaHRfbXNsGAcgASgBEhIKCnVu",
            "ZHVsYXRpb24YCCABKAISLgoIZGF0dW1faWQYCSABKA4yHC5hcG9sbG8uZHJp",
            "dmVycy5nbnNzLkRhdHVtSWQSGAoQbGF0aXR1ZGVfc3RkX2RldhgKIAEoAhIZ",
            "ChFsb25naXR1ZGVfc3RkX2RldhgLIAEoAhIWCg5oZWlnaHRfc3RkX2RldhgM",
            "IAEoAhIXCg9iYXNlX3N0YXRpb25faWQYDSABKAwSGAoQZGlmZmVyZW50aWFs",
            "X2FnZRgOIAEoAhIUCgxzb2x1dGlvbl9hZ2UYDyABKAISGAoQbnVtX3NhdHNf",
            "dHJhY2tlZBgQIAEoDRIcChRudW1fc2F0c19pbl9zb2x1dGlvbhgRIAEoDRIT",
            "CgtudW1fc2F0c19sMRgSIAEoDRIWCg5udW1fc2F0c19tdWx0aRgTIAEoDRIQ",
            "CghyZXNlcnZlZBgUIAEoDRIgChhleHRlbmRlZF9zb2x1dGlvbl9zdGF0dXMY",
            "FSABKA0SIAoYZ2FsaWxlb19iZWlkb3VfdXNlZF9tYXNrGBYgASgNEh0KFWdw",
            "c19nbG9uYXNzX3VzZWRfbWFzaxgXIAEoDSqQAgoOU29sdXRpb25TdGF0dXMS",
            "EAoMU09MX0NPTVBVVEVEEAASFAoQSU5TVUZGSUNJRU5UX09CUxABEhIKDk5P",
            "X0NPTlZFUkdFTkNFEAISDwoLU0lOR1VMQVJJVFkQAxINCglDT1ZfVFJBQ0UQ",
            "BBINCglURVNUX0RJU1QQBRIOCgpDT0xEX1NUQVJUEAYSDQoJVl9IX0xJTUlU",
            "EAcSDAoIVkFSSUFOQ0UQCBINCglSRVNJRFVBTFMQCRIVChFJTlRFR1JJVFlf",
            "V0FSTklORxANEgsKB1BFTkRJTkcQEhIPCgtJTlZBTElEX0ZJWBATEhAKDFVO",
            "QVVUSE9SSVpFRBAUEhAKDElOVkFMSURfUkFURRAWKp8ECgxTb2x1dGlvblR5",
            "cGUSCAoETk9ORRAAEgwKCEZJWEVEUE9TEAESDwoLRklYRURIRUlHSFQQAhIN",
            "CglGTE9BVENPTlYQBBIMCghXSURFTEFORRAFEg4KCk5BUlJPV0xBTkUQBhIU",
            "ChBET1BQTEVSX1ZFTE9DSVRZEAgSCgoGU0lOR0xFEBASCwoHUFNSRElGRhAR",
            "EggKBFdBQVMQEhIOCgpQUk9QT0dBVEVEEBMSDAoIT01OSVNUQVIQFBIMCghM",
            "MV9GTE9BVBAgEhIKDklPTk9GUkVFX0ZMT0FUECESEAoMTkFSUk9XX0ZMT0FU",
            "ECISCgoGTDFfSU5UEDASDAoIV0lERV9JTlQQMRIOCgpOQVJST1dfSU5UEDIS",
            "EgoOUlRLX0RJUkVDVF9JTlMQMxIMCghJTlNfU0JBUxA0Eg0KCUlOU19QU1JT",
            "UBA1Eg8KC0lOU19QU1JESUZGEDYSEAoMSU5TX1JUS0ZMT0FUEDcSEAoMSU5T",
            "X1JUS0ZJWEVEEDgSEAoMSU5TX09NTklTVEFSEDkSEwoPSU5TX09NTklTVEFS",
            "X0hQEDoSEwoPSU5TX09NTklTVEFSX1hQEDsSDwoLT01OSVNUQVJfSFAQQBIP",
            "CgtPTU5JU1RBUl9YUBBBEhIKDlBQUF9DT05WRVJHSU5HEEQSBwoDUFBQEEUS",
            "FgoSSU5TX1BQUF9DT05WRVJHSU5HEEkSCwoHSU5TX1BQUBBKKicKB0RhdHVt",
            "SWQSEQoNREFUVU1JRF9EVU1NWRAAEgkKBVdHUzg0ED1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Drivers.Gnss.SolutionStatus), typeof(global::Apollo.Drivers.Gnss.SolutionType), typeof(global::Apollo.Drivers.Gnss.DatumId), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Gnss.GnssBestPose), global::Apollo.Drivers.Gnss.GnssBestPose.Parser, new[]{ "Header", "MeasurementTime", "SolStatus", "SolType", "Latitude", "Longitude", "HeightMsl", "Undulation", "DatumId", "LatitudeStdDev", "LongitudeStdDev", "HeightStdDev", "BaseStationId", "DifferentialAge", "SolutionAge", "NumSatsTracked", "NumSatsInSolution", "NumSatsL1", "NumSatsMulti", "Reserved", "ExtendedSolutionStatus", "GalileoBeidouUsedMask", "GpsGlonassUsedMask" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SolutionStatus {
    /// <summary>
    /// solution computed
    /// </summary>
    [pbr::OriginalName("SOL_COMPUTED")] SolComputed = 0,
    /// <summary>
    /// insufficient observations
    /// </summary>
    [pbr::OriginalName("INSUFFICIENT_OBS")] InsufficientObs = 1,
    /// <summary>
    /// no convergence
    /// </summary>
    [pbr::OriginalName("NO_CONVERGENCE")] NoConvergence = 2,
    /// <summary>
    /// singularity at parameters matrix
    /// </summary>
    [pbr::OriginalName("SINGULARITY")] Singularity = 3,
    /// <summary>
    /// covariance trace exceeds maximum (trace > 1000 m)
    /// </summary>
    [pbr::OriginalName("COV_TRACE")] CovTrace = 4,
    /// <summary>
    /// test distance exceeded (max of 3 rejections if distance > 10
    /// </summary>
    [pbr::OriginalName("TEST_DIST")] TestDist = 5,
    /// <summary>
    /// km)
    /// </summary>
    [pbr::OriginalName("COLD_START")] ColdStart = 6,
    /// <summary>
    /// height or velocity limits exceeded
    /// </summary>
    [pbr::OriginalName("V_H_LIMIT")] VHLimit = 7,
    /// <summary>
    /// variance exceeds limits
    /// </summary>
    [pbr::OriginalName("VARIANCE")] Variance = 8,
    /// <summary>
    /// residuals are too large
    /// </summary>
    [pbr::OriginalName("RESIDUALS")] Residuals = 9,
    /// <summary>
    /// large residuals make position questionable
    /// </summary>
    [pbr::OriginalName("INTEGRITY_WARNING")] IntegrityWarning = 13,
    /// <summary>
    /// receiver computes its position and determines if the fixed
    /// </summary>
    [pbr::OriginalName("PENDING")] Pending = 18,
    /// <summary>
    /// position is valid
    /// </summary>
    [pbr::OriginalName("INVALID_FIX")] InvalidFix = 19,
    /// <summary>
    /// command is invalid
    /// </summary>
    [pbr::OriginalName("UNAUTHORIZED")] Unauthorized = 20,
    /// <summary>
    /// selected logging rate is not supported for this solution type
    /// </summary>
    [pbr::OriginalName("INVALID_RATE")] InvalidRate = 22,
  }

  public enum SolutionType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("FIXEDPOS")] Fixedpos = 1,
    [pbr::OriginalName("FIXEDHEIGHT")] Fixedheight = 2,
    [pbr::OriginalName("FLOATCONV")] Floatconv = 4,
    [pbr::OriginalName("WIDELANE")] Widelane = 5,
    [pbr::OriginalName("NARROWLANE")] Narrowlane = 6,
    [pbr::OriginalName("DOPPLER_VELOCITY")] DopplerVelocity = 8,
    [pbr::OriginalName("SINGLE")] Single = 16,
    [pbr::OriginalName("PSRDIFF")] Psrdiff = 17,
    [pbr::OriginalName("WAAS")] Waas = 18,
    [pbr::OriginalName("PROPOGATED")] Propogated = 19,
    [pbr::OriginalName("OMNISTAR")] Omnistar = 20,
    [pbr::OriginalName("L1_FLOAT")] L1Float = 32,
    [pbr::OriginalName("IONOFREE_FLOAT")] IonofreeFloat = 33,
    [pbr::OriginalName("NARROW_FLOAT")] NarrowFloat = 34,
    [pbr::OriginalName("L1_INT")] L1Int = 48,
    [pbr::OriginalName("WIDE_INT")] WideInt = 49,
    [pbr::OriginalName("NARROW_INT")] NarrowInt = 50,
    /// <summary>
    /// RTK filter is directly initialized from the INS filter.
    /// </summary>
    [pbr::OriginalName("RTK_DIRECT_INS")] RtkDirectIns = 51,
    [pbr::OriginalName("INS_SBAS")] InsSbas = 52,
    [pbr::OriginalName("INS_PSRSP")] InsPsrsp = 53,
    [pbr::OriginalName("INS_PSRDIFF")] InsPsrdiff = 54,
    [pbr::OriginalName("INS_RTKFLOAT")] InsRtkfloat = 55,
    [pbr::OriginalName("INS_RTKFIXED")] InsRtkfixed = 56,
    [pbr::OriginalName("INS_OMNISTAR")] InsOmnistar = 57,
    [pbr::OriginalName("INS_OMNISTAR_HP")] InsOmnistarHp = 58,
    [pbr::OriginalName("INS_OMNISTAR_XP")] InsOmnistarXp = 59,
    [pbr::OriginalName("OMNISTAR_HP")] OmnistarHp = 64,
    [pbr::OriginalName("OMNISTAR_XP")] OmnistarXp = 65,
    [pbr::OriginalName("PPP_CONVERGING")] PppConverging = 68,
    [pbr::OriginalName("PPP")] Ppp = 69,
    [pbr::OriginalName("INS_PPP_CONVERGING")] InsPppConverging = 73,
    [pbr::OriginalName("INS_PPP")] InsPpp = 74,
  }

  public enum DatumId {
    [pbr::OriginalName("DATUMID_DUMMY")] Dummy = 0,
    /// <summary>
    /// We only use WGS-84.
    /// </summary>
    [pbr::OriginalName("WGS84")] Wgs84 = 61,
  }

  #endregion

  #region Messages
  public sealed partial class GnssBestPose : pb::IMessage<GnssBestPose> {
    private static readonly pb::MessageParser<GnssBestPose> _parser = new pb::MessageParser<GnssBestPose>(() => new GnssBestPose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GnssBestPose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Gnss.GnssBestPoseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssBestPose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssBestPose(GnssBestPose other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      measurementTime_ = other.measurementTime_;
      solStatus_ = other.solStatus_;
      solType_ = other.solType_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      heightMsl_ = other.heightMsl_;
      undulation_ = other.undulation_;
      datumId_ = other.datumId_;
      latitudeStdDev_ = other.latitudeStdDev_;
      longitudeStdDev_ = other.longitudeStdDev_;
      heightStdDev_ = other.heightStdDev_;
      baseStationId_ = other.baseStationId_;
      differentialAge_ = other.differentialAge_;
      solutionAge_ = other.solutionAge_;
      numSatsTracked_ = other.numSatsTracked_;
      numSatsInSolution_ = other.numSatsInSolution_;
      numSatsL1_ = other.numSatsL1_;
      numSatsMulti_ = other.numSatsMulti_;
      reserved_ = other.reserved_;
      extendedSolutionStatus_ = other.extendedSolutionStatus_;
      galileoBeidouUsedMask_ = other.galileoBeidouUsedMask_;
      gpsGlonassUsedMask_ = other.gpsGlonassUsedMask_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssBestPose Clone() {
      return new GnssBestPose(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 2;
    private double measurementTime_;
    /// <summary>
    /// In seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "sol_status" field.</summary>
    public const int SolStatusFieldNumber = 3;
    private global::Apollo.Drivers.Gnss.SolutionStatus solStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.SolutionStatus SolStatus {
      get { return solStatus_; }
      set {
        solStatus_ = value;
      }
    }

    /// <summary>Field number for the "sol_type" field.</summary>
    public const int SolTypeFieldNumber = 4;
    private global::Apollo.Drivers.Gnss.SolutionType solType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.SolutionType SolType {
      get { return solType_; }
      set {
        solType_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 5;
    private double latitude_;
    /// <summary>
    /// in degrees
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 6;
    private double longitude_;
    /// <summary>
    /// in degrees
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "height_msl" field.</summary>
    public const int HeightMslFieldNumber = 7;
    private double heightMsl_;
    /// <summary>
    /// height above mean sea level in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeightMsl {
      get { return heightMsl_; }
      set {
        heightMsl_ = value;
      }
    }

    /// <summary>Field number for the "undulation" field.</summary>
    public const int UndulationFieldNumber = 8;
    private float undulation_;
    /// <summary>
    /// undulation = height_wgs84 - height_msl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Undulation {
      get { return undulation_; }
      set {
        undulation_ = value;
      }
    }

    /// <summary>Field number for the "datum_id" field.</summary>
    public const int DatumIdFieldNumber = 9;
    private global::Apollo.Drivers.Gnss.DatumId datumId_ = 0;
    /// <summary>
    /// datum id number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.DatumId DatumId {
      get { return datumId_; }
      set {
        datumId_ = value;
      }
    }

    /// <summary>Field number for the "latitude_std_dev" field.</summary>
    public const int LatitudeStdDevFieldNumber = 10;
    private float latitudeStdDev_;
    /// <summary>
    /// latitude standard deviation (m)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LatitudeStdDev {
      get { return latitudeStdDev_; }
      set {
        latitudeStdDev_ = value;
      }
    }

    /// <summary>Field number for the "longitude_std_dev" field.</summary>
    public const int LongitudeStdDevFieldNumber = 11;
    private float longitudeStdDev_;
    /// <summary>
    /// longitude standard deviation (m)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LongitudeStdDev {
      get { return longitudeStdDev_; }
      set {
        longitudeStdDev_ = value;
      }
    }

    /// <summary>Field number for the "height_std_dev" field.</summary>
    public const int HeightStdDevFieldNumber = 12;
    private float heightStdDev_;
    /// <summary>
    /// height standard deviation (m)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightStdDev {
      get { return heightStdDev_; }
      set {
        heightStdDev_ = value;
      }
    }

    /// <summary>Field number for the "base_station_id" field.</summary>
    public const int BaseStationIdFieldNumber = 13;
    private pb::ByteString baseStationId_ = pb::ByteString.Empty;
    /// <summary>
    /// base station id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BaseStationId {
      get { return baseStationId_; }
      set {
        baseStationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "differential_age" field.</summary>
    public const int DifferentialAgeFieldNumber = 14;
    private float differentialAge_;
    /// <summary>
    /// differential position age (sec)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DifferentialAge {
      get { return differentialAge_; }
      set {
        differentialAge_ = value;
      }
    }

    /// <summary>Field number for the "solution_age" field.</summary>
    public const int SolutionAgeFieldNumber = 15;
    private float solutionAge_;
    /// <summary>
    /// solution age (sec)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SolutionAge {
      get { return solutionAge_; }
      set {
        solutionAge_ = value;
      }
    }

    /// <summary>Field number for the "num_sats_tracked" field.</summary>
    public const int NumSatsTrackedFieldNumber = 16;
    private uint numSatsTracked_;
    /// <summary>
    /// number of satellites tracked
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSatsTracked {
      get { return numSatsTracked_; }
      set {
        numSatsTracked_ = value;
      }
    }

    /// <summary>Field number for the "num_sats_in_solution" field.</summary>
    public const int NumSatsInSolutionFieldNumber = 17;
    private uint numSatsInSolution_;
    /// <summary>
    /// number of satellites used in solution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSatsInSolution {
      get { return numSatsInSolution_; }
      set {
        numSatsInSolution_ = value;
      }
    }

    /// <summary>Field number for the "num_sats_l1" field.</summary>
    public const int NumSatsL1FieldNumber = 18;
    private uint numSatsL1_;
    /// <summary>
    /// number of L1/E1/B1 satellites used in solution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSatsL1 {
      get { return numSatsL1_; }
      set {
        numSatsL1_ = value;
      }
    }

    /// <summary>Field number for the "num_sats_multi" field.</summary>
    public const int NumSatsMultiFieldNumber = 19;
    private uint numSatsMulti_;
    /// <summary>
    /// number of multi-frequency satellites used in solution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSatsMulti {
      get { return numSatsMulti_; }
      set {
        numSatsMulti_ = value;
      }
    }

    /// <summary>Field number for the "reserved" field.</summary>
    public const int ReservedFieldNumber = 20;
    private uint reserved_;
    /// <summary>
    /// reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reserved {
      get { return reserved_; }
      set {
        reserved_ = value;
      }
    }

    /// <summary>Field number for the "extended_solution_status" field.</summary>
    public const int ExtendedSolutionStatusFieldNumber = 21;
    private uint extendedSolutionStatus_;
    /// <summary>
    /// extended solution status - OEMV and
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtendedSolutionStatus {
      get { return extendedSolutionStatus_; }
      set {
        extendedSolutionStatus_ = value;
      }
    }

    /// <summary>Field number for the "galileo_beidou_used_mask" field.</summary>
    public const int GalileoBeidouUsedMaskFieldNumber = 22;
    private uint galileoBeidouUsedMask_;
    /// <summary>
    /// greater only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GalileoBeidouUsedMask {
      get { return galileoBeidouUsedMask_; }
      set {
        galileoBeidouUsedMask_ = value;
      }
    }

    /// <summary>Field number for the "gps_glonass_used_mask" field.</summary>
    public const int GpsGlonassUsedMaskFieldNumber = 23;
    private uint gpsGlonassUsedMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GpsGlonassUsedMask {
      get { return gpsGlonassUsedMask_; }
      set {
        gpsGlonassUsedMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GnssBestPose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GnssBestPose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if (SolStatus != other.SolStatus) return false;
      if (SolType != other.SolType) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (HeightMsl != other.HeightMsl) return false;
      if (Undulation != other.Undulation) return false;
      if (DatumId != other.DatumId) return false;
      if (LatitudeStdDev != other.LatitudeStdDev) return false;
      if (LongitudeStdDev != other.LongitudeStdDev) return false;
      if (HeightStdDev != other.HeightStdDev) return false;
      if (BaseStationId != other.BaseStationId) return false;
      if (DifferentialAge != other.DifferentialAge) return false;
      if (SolutionAge != other.SolutionAge) return false;
      if (NumSatsTracked != other.NumSatsTracked) return false;
      if (NumSatsInSolution != other.NumSatsInSolution) return false;
      if (NumSatsL1 != other.NumSatsL1) return false;
      if (NumSatsMulti != other.NumSatsMulti) return false;
      if (Reserved != other.Reserved) return false;
      if (ExtendedSolutionStatus != other.ExtendedSolutionStatus) return false;
      if (GalileoBeidouUsedMask != other.GalileoBeidouUsedMask) return false;
      if (GpsGlonassUsedMask != other.GpsGlonassUsedMask) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      if (SolStatus != 0) hash ^= SolStatus.GetHashCode();
      if (SolType != 0) hash ^= SolType.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (HeightMsl != 0D) hash ^= HeightMsl.GetHashCode();
      if (Undulation != 0F) hash ^= Undulation.GetHashCode();
      if (DatumId != 0) hash ^= DatumId.GetHashCode();
      if (LatitudeStdDev != 0F) hash ^= LatitudeStdDev.GetHashCode();
      if (LongitudeStdDev != 0F) hash ^= LongitudeStdDev.GetHashCode();
      if (HeightStdDev != 0F) hash ^= HeightStdDev.GetHashCode();
      if (BaseStationId.Length != 0) hash ^= BaseStationId.GetHashCode();
      if (DifferentialAge != 0F) hash ^= DifferentialAge.GetHashCode();
      if (SolutionAge != 0F) hash ^= SolutionAge.GetHashCode();
      if (NumSatsTracked != 0) hash ^= NumSatsTracked.GetHashCode();
      if (NumSatsInSolution != 0) hash ^= NumSatsInSolution.GetHashCode();
      if (NumSatsL1 != 0) hash ^= NumSatsL1.GetHashCode();
      if (NumSatsMulti != 0) hash ^= NumSatsMulti.GetHashCode();
      if (Reserved != 0) hash ^= Reserved.GetHashCode();
      if (ExtendedSolutionStatus != 0) hash ^= ExtendedSolutionStatus.GetHashCode();
      if (GalileoBeidouUsedMask != 0) hash ^= GalileoBeidouUsedMask.GetHashCode();
      if (GpsGlonassUsedMask != 0) hash ^= GpsGlonassUsedMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MeasurementTime);
      }
      if (SolStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SolStatus);
      }
      if (SolType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SolType);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Longitude);
      }
      if (HeightMsl != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(HeightMsl);
      }
      if (Undulation != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Undulation);
      }
      if (DatumId != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) DatumId);
      }
      if (LatitudeStdDev != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(LatitudeStdDev);
      }
      if (LongitudeStdDev != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(LongitudeStdDev);
      }
      if (HeightStdDev != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(HeightStdDev);
      }
      if (BaseStationId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(BaseStationId);
      }
      if (DifferentialAge != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(DifferentialAge);
      }
      if (SolutionAge != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(SolutionAge);
      }
      if (NumSatsTracked != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(NumSatsTracked);
      }
      if (NumSatsInSolution != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(NumSatsInSolution);
      }
      if (NumSatsL1 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(NumSatsL1);
      }
      if (NumSatsMulti != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(NumSatsMulti);
      }
      if (Reserved != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Reserved);
      }
      if (ExtendedSolutionStatus != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(ExtendedSolutionStatus);
      }
      if (GalileoBeidouUsedMask != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(GalileoBeidouUsedMask);
      }
      if (GpsGlonassUsedMask != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(GpsGlonassUsedMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      if (SolStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolStatus);
      }
      if (SolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolType);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (HeightMsl != 0D) {
        size += 1 + 8;
      }
      if (Undulation != 0F) {
        size += 1 + 4;
      }
      if (DatumId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DatumId);
      }
      if (LatitudeStdDev != 0F) {
        size += 1 + 4;
      }
      if (LongitudeStdDev != 0F) {
        size += 1 + 4;
      }
      if (HeightStdDev != 0F) {
        size += 1 + 4;
      }
      if (BaseStationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BaseStationId);
      }
      if (DifferentialAge != 0F) {
        size += 1 + 4;
      }
      if (SolutionAge != 0F) {
        size += 1 + 4;
      }
      if (NumSatsTracked != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumSatsTracked);
      }
      if (NumSatsInSolution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumSatsInSolution);
      }
      if (NumSatsL1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumSatsL1);
      }
      if (NumSatsMulti != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumSatsMulti);
      }
      if (Reserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Reserved);
      }
      if (ExtendedSolutionStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExtendedSolutionStatus);
      }
      if (GalileoBeidouUsedMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GalileoBeidouUsedMask);
      }
      if (GpsGlonassUsedMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GpsGlonassUsedMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GnssBestPose other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      if (other.SolStatus != 0) {
        SolStatus = other.SolStatus;
      }
      if (other.SolType != 0) {
        SolType = other.SolType;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.HeightMsl != 0D) {
        HeightMsl = other.HeightMsl;
      }
      if (other.Undulation != 0F) {
        Undulation = other.Undulation;
      }
      if (other.DatumId != 0) {
        DatumId = other.DatumId;
      }
      if (other.LatitudeStdDev != 0F) {
        LatitudeStdDev = other.LatitudeStdDev;
      }
      if (other.LongitudeStdDev != 0F) {
        LongitudeStdDev = other.LongitudeStdDev;
      }
      if (other.HeightStdDev != 0F) {
        HeightStdDev = other.HeightStdDev;
      }
      if (other.BaseStationId.Length != 0) {
        BaseStationId = other.BaseStationId;
      }
      if (other.DifferentialAge != 0F) {
        DifferentialAge = other.DifferentialAge;
      }
      if (other.SolutionAge != 0F) {
        SolutionAge = other.SolutionAge;
      }
      if (other.NumSatsTracked != 0) {
        NumSatsTracked = other.NumSatsTracked;
      }
      if (other.NumSatsInSolution != 0) {
        NumSatsInSolution = other.NumSatsInSolution;
      }
      if (other.NumSatsL1 != 0) {
        NumSatsL1 = other.NumSatsL1;
      }
      if (other.NumSatsMulti != 0) {
        NumSatsMulti = other.NumSatsMulti;
      }
      if (other.Reserved != 0) {
        Reserved = other.Reserved;
      }
      if (other.ExtendedSolutionStatus != 0) {
        ExtendedSolutionStatus = other.ExtendedSolutionStatus;
      }
      if (other.GalileoBeidouUsedMask != 0) {
        GalileoBeidouUsedMask = other.GalileoBeidouUsedMask;
      }
      if (other.GpsGlonassUsedMask != 0) {
        GpsGlonassUsedMask = other.GpsGlonassUsedMask;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 24: {
            solStatus_ = (global::Apollo.Drivers.Gnss.SolutionStatus) input.ReadEnum();
            break;
          }
          case 32: {
            solType_ = (global::Apollo.Drivers.Gnss.SolutionType) input.ReadEnum();
            break;
          }
          case 41: {
            Latitude = input.ReadDouble();
            break;
          }
          case 49: {
            Longitude = input.ReadDouble();
            break;
          }
          case 57: {
            HeightMsl = input.ReadDouble();
            break;
          }
          case 69: {
            Undulation = input.ReadFloat();
            break;
          }
          case 72: {
            datumId_ = (global::Apollo.Drivers.Gnss.DatumId) input.ReadEnum();
            break;
          }
          case 85: {
            LatitudeStdDev = input.ReadFloat();
            break;
          }
          case 93: {
            LongitudeStdDev = input.ReadFloat();
            break;
          }
          case 101: {
            HeightStdDev = input.ReadFloat();
            break;
          }
          case 106: {
            BaseStationId = input.ReadBytes();
            break;
          }
          case 117: {
            DifferentialAge = input.ReadFloat();
            break;
          }
          case 125: {
            SolutionAge = input.ReadFloat();
            break;
          }
          case 128: {
            NumSatsTracked = input.ReadUInt32();
            break;
          }
          case 136: {
            NumSatsInSolution = input.ReadUInt32();
            break;
          }
          case 144: {
            NumSatsL1 = input.ReadUInt32();
            break;
          }
          case 152: {
            NumSatsMulti = input.ReadUInt32();
            break;
          }
          case 160: {
            Reserved = input.ReadUInt32();
            break;
          }
          case 168: {
            ExtendedSolutionStatus = input.ReadUInt32();
            break;
          }
          case 176: {
            GalileoBeidouUsedMask = input.ReadUInt32();
            break;
          }
          case 184: {
            GpsGlonassUsedMask = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
