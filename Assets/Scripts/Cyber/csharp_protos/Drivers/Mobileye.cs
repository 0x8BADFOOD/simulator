// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/mobileye.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers {

  /// <summary>Holder for reflection information generated from modules/drivers/proto/mobileye.proto</summary>
  public static partial class MobileyeReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/proto/mobileye.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MobileyeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRtb2R1bGVzL2RyaXZlcnMvcHJvdG8vbW9iaWxleWUucHJvdG8SDmFwb2xs",
            "by5kcml2ZXJzGiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFkZXIucHJvdG8i",
            "owEKB0xrYV83NjgSEQoJbGFuZV90eXBlGAEgASgFEg8KB3F1YWxpdHkYAiAB",
            "KAUSFAoMbW9kZWxfZGVncmVlGAMgASgFEhAKCHBvc2l0aW9uGAQgASgBEhEK",
            "CWN1cnZhdHVyZRgFIAEoARIcChRjdXJ2YXR1cmVfZGVyaXZhdGl2ZRgGIAEo",
            "ARIbChN3aWR0aF9yaWdodF9tYXJraW5nGAcgASgBIjEKB051bV83NmISJgoe",
            "bnVtX29mX25leHRfbGFuZV9tYXJrX3JlcG9ydGVkGAEgASgFIuoBCg9BZnRl",
            "cm1hcmtldF82NjkSFgoObGFuZV9jb25mX2xlZnQYASABKAUSHQoVbGR3X2F2",
            "YWlsYWJpbGl0eV9sZWZ0GAIgASgIEhYKDmxhbmVfdHlwZV9sZWZ0GAMgASgF",
            "EhoKEmRpc3RhbmNlX3RvX2xhbmVfbBgEIAEoARIXCg9sYW5lX2NvbmZfcmln",
            "aHQYBSABKAUSHgoWbGR3X2F2YWlsYWJpbGl0eV9yaWdodBgGIAEoCBIXCg9s",
            "YW5lX3R5cGVfcmlnaHQYByABKAUSGgoSZGlzdGFuY2VfdG9fbGFuZV9yGAgg",
            "ASgBIlUKB0xrYV83NjkSFQoNaGVhZGluZ19hbmdsZRgBIAEoARISCgp2aWV3",
            "X3JhbmdlGAIgASgBEh8KF3ZpZXdfcmFuZ2VfYXZhaWxhYmlsaXR5GAMgASgI",
            "IsMBCg1SZWZlcmVuY2VfNzZhEhwKFHJlZl9wb2ludF8xX3Bvc2l0aW9uGAEg",
            "ASgBEhwKFHJlZl9wb2ludF8xX2Rpc3RhbmNlGAIgASgBEhwKFHJlZl9wb2lu",
            "dF8xX3ZhbGlkaXR5GAMgASgIEhwKFHJlZl9wb2ludF8yX3Bvc2l0aW9uGAQg",
            "ASgBEhwKFHJlZl9wb2ludF8yX2Rpc3RhbmNlGAUgASgBEhwKFHJlZl9wb2lu",
            "dF8yX3ZhbGlkaXR5GAYgASgIIpwCCgtEZXRhaWxzXzczOBIVCg1udW1fb2Jz",
            "dGFjbGVzGAEgASgFEhEKCXRpbWVzdGFtcBgCIAEoBRIbChNhcHBsaWNhdGlv",
            "bl92ZXJzaW9uGAMgASgFEiUKHWFjdGl2ZV92ZXJzaW9uX251bWJlcl9zZWN0",
            "aW9uGAQgASgFEh4KFmxlZnRfY2xvc2VfcmFuZ19jdXRfaW4YBSABKAgSHwoX",
            "cmlnaHRfY2xvc2VfcmFuZ19jdXRfaW4YBiABKAgSCgoCZ28YByABKAUSGAoQ",
            "cHJvdG9jb2xfdmVyc2lvbhgIIAEoBRIRCgljbG9zZV9jYXIYCSABKAgSEAoI",
            "ZmFpbHNhZmUYCiABKAUSEwoLcmVzZXJ2ZWRfMTAYCyABKAUioAEKCE5leHRf",
            "NzZjEhEKCWxhbmVfdHlwZRgBIAEoBRIPCgdxdWFsaXR5GAIgASgFEhQKDG1v",
            "ZGVsX2RlZ3JlZRgDIAEoBRIQCghwb3NpdGlvbhgEIAEoARIRCgljdXJ2YXR1",
            "cmUYBSABKAESHAoUY3VydmF0dXJlX2Rlcml2YXRpdmUYBiABKAESFwoPbGFu",
            "ZV9tYXJrX3dpZHRoGAcgASgBItQBCgtEZXRhaWxzXzczNxIWCg5sYW5lX2N1",
            "cnZhdHVyZRgBIAEoARIUCgxsYW5lX2hlYWRpbmcYAiABKAESHAoUY2FfY29u",
            "c3RydWN0aW9uX2FyZWEYAyABKAgSHgoWcmlnaHRfbGR3X2F2YWlsYWJpbGl0",
            "eRgEIAEoCBIdChVsZWZ0X2xkd19hdmFpbGFiaWxpdHkYBSABKAgSEgoKcmVz",
            "ZXJ2ZWRfMRgGIAEoCBIRCgl5YXdfYW5nbGUYByABKAESEwoLcGl0Y2hfYW5n",
            "bGUYCCABKAEiVQoHTGthXzc2NxIVCg1oZWFkaW5nX2FuZ2xlGAEgASgBEhIK",
            "CnZpZXdfcmFuZ2UYAiABKAESHwoXdmlld19yYW5nZV9hdmFpbGFiaWxpdHkY",
            "AyABKAgiogEKB0xrYV83NjYSEQoJbGFuZV90eXBlGAEgASgFEg8KB3F1YWxp",
            "dHkYAiABKAUSFAoMbW9kZWxfZGVncmVlGAMgASgFEhAKCHBvc2l0aW9uGAQg",
            "ASgBEhEKCWN1cnZhdHVyZRgFIAEoARIcChRjdXJ2YXR1cmVfZGVyaXZhdGl2",
            "ZRgGIAEoARIaChJ3aWR0aF9sZWZ0X21hcmtpbmcYByABKAEiVgoITmV4dF83",
            "NmQSFQoNaGVhZGluZ19hbmdsZRgBIAEoARISCgp2aWV3X3JhbmdlGAIgASgB",
            "Eh8KF3ZpZXdfcmFuZ2VfYXZhaWxhYmlsaXR5GAMgASgIIr4CCgtEZXRhaWxz",
            "XzczORITCgtvYnN0YWNsZV9pZBgBIAEoBRIWCg5vYnN0YWNsZV9wb3NfeBgC",
            "IAEoARIRCglyZXNldmVkXzIYAyABKAUSFgoOb2JzdGFjbGVfcG9zX3kYBCAB",
            "KAESFAoMYmxpbmtlcl9pbmZvGAUgASgFEhYKDmN1dF9pbl9hbmRfb3V0GAYg",
            "ASgFEhoKEm9ic3RhY2xlX3JlbF92ZWxfeBgHIAEoARIVCg1vYnN0YWNsZV90",
            "eXBlGAggASgFEhIKCnJlc2VydmVkXzMYCSABKAgSFwoPb2JzdGFjbGVfc3Rh",
            "dHVzGAogASgFEh0KFW9ic3RhY2xlX2JyYWtlX2xpZ2h0cxgLIAEoCBISCgpy",
            "ZXNlcnZlZF80GAwgASgFEhYKDm9ic3RhY2xlX3ZhbGlkGA0gASgFIp4CCgtE",
            "ZXRhaWxzXzczYRIXCg9vYnN0YWNsZV9sZW5ndGgYASABKAESFgoOb2JzdGFj",
            "bGVfd2lkdGgYAiABKAESFAoMb2JzdGFjbGVfYWdlGAMgASgFEhUKDW9ic3Rh",
            "Y2xlX2xhbmUYBCABKAUSEQoJY2lwdl9mbGFnGAUgASgIEhIKCnJlc2VydmVk",
            "XzUYBiABKAgSEwoLcmFkYXJfcG9zX3gYByABKAESEwoLcmFkYXJfdmVsX3gY",
            "CCABKAESHgoWcmFkYXJfbWF0Y2hfY29uZmlkZW5jZRgJIAEoBRISCgpyZXNl",
            "cnZlZF82GAogASgIEhgKEG1hdGNoZWRfcmFkYXJfaWQYCyABKAUSEgoKcmVz",
            "ZXJ2ZWRfNxgMIAEoCCK8AQoLRGV0YWlsc183M2ISGwoTb2JzdGFjbGVfYW5n",
            "bGVfcmF0ZRgBIAEoARIdChVvYnN0YWNsZV9zY2FsZV9jaGFuZ2UYAiABKAES",
            "FgoOb2JqZWN0X2FjY2VsX3gYAyABKAESEgoKcmVzZXJ2ZWRfOBgEIAEoBRIZ",
            "ChFvYnN0YWNsZV9yZXBsYWNlZBgFIAEoCBISCgpyZXNlcnZlZF85GAYgASgF",
            "EhYKDm9ic3RhY2xlX2FuZ2xlGAcgASgBIsUFCghNb2JpbGV5ZRIlCgZoZWFk",
            "ZXIYASABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRlchI4Cg9hZnRlcm1hcmtl",
            "dF82NjkYAiABKAsyHy5hcG9sbG8uZHJpdmVycy5BZnRlcm1hcmtldF82NjkS",
            "MAoLZGV0YWlsc183MzcYAyABKAsyGy5hcG9sbG8uZHJpdmVycy5EZXRhaWxz",
            "XzczNxIwCgtkZXRhaWxzXzczOBgEIAEoCzIbLmFwb2xsby5kcml2ZXJzLkRl",
            "dGFpbHNfNzM4EjAKC2RldGFpbHNfNzM5GAUgAygLMhsuYXBvbGxvLmRyaXZl",
            "cnMuRGV0YWlsc183MzkSMAoLZGV0YWlsc183M2EYBiADKAsyGy5hcG9sbG8u",
            "ZHJpdmVycy5EZXRhaWxzXzczYRIwCgtkZXRhaWxzXzczYhgHIAMoCzIbLmFw",
            "b2xsby5kcml2ZXJzLkRldGFpbHNfNzNiEigKB2xrYV83NjYYCCABKAsyFy5h",
            "cG9sbG8uZHJpdmVycy5Ma2FfNzY2EigKB2xrYV83NjcYCSABKAsyFy5hcG9s",
            "bG8uZHJpdmVycy5Ma2FfNzY3EigKB2xrYV83NjgYCiABKAsyFy5hcG9sbG8u",
            "ZHJpdmVycy5Ma2FfNzY4EigKB2xrYV83NjkYCyABKAsyFy5hcG9sbG8uZHJp",
            "dmVycy5Ma2FfNzY5EjQKDXJlZmVyZW5jZV83NmEYDCABKAsyHS5hcG9sbG8u",
            "ZHJpdmVycy5SZWZlcmVuY2VfNzZhEigKB251bV83NmIYDSABKAsyFy5hcG9s",
            "bG8uZHJpdmVycy5OdW1fNzZiEioKCG5leHRfNzZjGA4gAygLMhguYXBvbGxv",
            "LmRyaXZlcnMuTmV4dF83NmMSKgoIbmV4dF83NmQYDyADKAsyGC5hcG9sbG8u",
            "ZHJpdmVycy5OZXh0Xzc2ZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Lka_768), global::Apollo.Drivers.Lka_768.Parser, new[]{ "LaneType", "Quality", "ModelDegree", "Position", "Curvature", "CurvatureDerivative", "WidthRightMarking" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Num_76b), global::Apollo.Drivers.Num_76b.Parser, new[]{ "NumOfNextLaneMarkReported" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Aftermarket_669), global::Apollo.Drivers.Aftermarket_669.Parser, new[]{ "LaneConfLeft", "LdwAvailabilityLeft", "LaneTypeLeft", "DistanceToLaneL", "LaneConfRight", "LdwAvailabilityRight", "LaneTypeRight", "DistanceToLaneR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Lka_769), global::Apollo.Drivers.Lka_769.Parser, new[]{ "HeadingAngle", "ViewRange", "ViewRangeAvailability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Reference_76a), global::Apollo.Drivers.Reference_76a.Parser, new[]{ "RefPoint1Position", "RefPoint1Distance", "RefPoint1Validity", "RefPoint2Position", "RefPoint2Distance", "RefPoint2Validity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Details_738), global::Apollo.Drivers.Details_738.Parser, new[]{ "NumObstacles", "Timestamp", "ApplicationVersion", "ActiveVersionNumberSection", "LeftCloseRangCutIn", "RightCloseRangCutIn", "Go", "ProtocolVersion", "CloseCar", "Failsafe", "Reserved10" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Next_76c), global::Apollo.Drivers.Next_76c.Parser, new[]{ "LaneType", "Quality", "ModelDegree", "Position", "Curvature", "CurvatureDerivative", "LaneMarkWidth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Details_737), global::Apollo.Drivers.Details_737.Parser, new[]{ "LaneCurvature", "LaneHeading", "CaConstructionArea", "RightLdwAvailability", "LeftLdwAvailability", "Reserved1", "YawAngle", "PitchAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Lka_767), global::Apollo.Drivers.Lka_767.Parser, new[]{ "HeadingAngle", "ViewRange", "ViewRangeAvailability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Lka_766), global::Apollo.Drivers.Lka_766.Parser, new[]{ "LaneType", "Quality", "ModelDegree", "Position", "Curvature", "CurvatureDerivative", "WidthLeftMarking" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Next_76d), global::Apollo.Drivers.Next_76d.Parser, new[]{ "HeadingAngle", "ViewRange", "ViewRangeAvailability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Details_739), global::Apollo.Drivers.Details_739.Parser, new[]{ "ObstacleId", "ObstaclePosX", "Reseved2", "ObstaclePosY", "BlinkerInfo", "CutInAndOut", "ObstacleRelVelX", "ObstacleType", "Reserved3", "ObstacleStatus", "ObstacleBrakeLights", "Reserved4", "ObstacleValid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Details_73a), global::Apollo.Drivers.Details_73a.Parser, new[]{ "ObstacleLength", "ObstacleWidth", "ObstacleAge", "ObstacleLane", "CipvFlag", "Reserved5", "RadarPosX", "RadarVelX", "RadarMatchConfidence", "Reserved6", "MatchedRadarId", "Reserved7" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Details_73b), global::Apollo.Drivers.Details_73b.Parser, new[]{ "ObstacleAngleRate", "ObstacleScaleChange", "ObjectAccelX", "Reserved8", "ObstacleReplaced", "Reserved9", "ObstacleAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Mobileye), global::Apollo.Drivers.Mobileye.Parser, new[]{ "Header", "Aftermarket669", "Details737", "Details738", "Details739", "Details73A", "Details73B", "Lka766", "Lka767", "Lka768", "Lka769", "Reference76A", "Num76B", "Next76C", "Next76D" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Lka_768 : pb::IMessage<Lka_768> {
    private static readonly pb::MessageParser<Lka_768> _parser = new pb::MessageParser<Lka_768>(() => new Lka_768());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lka_768> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_768() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_768(Lka_768 other) : this() {
      laneType_ = other.laneType_;
      quality_ = other.quality_;
      modelDegree_ = other.modelDegree_;
      position_ = other.position_;
      curvature_ = other.curvature_;
      curvatureDerivative_ = other.curvatureDerivative_;
      widthRightMarking_ = other.widthRightMarking_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_768 Clone() {
      return new Lka_768(this);
    }

    /// <summary>Field number for the "lane_type" field.</summary>
    public const int LaneTypeFieldNumber = 1;
    private int laneType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneType {
      get { return laneType_; }
      set {
        laneType_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "model_degree" field.</summary>
    public const int ModelDegreeFieldNumber = 3;
    private int modelDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelDegree {
      get { return modelDegree_; }
      set {
        modelDegree_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private double position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "curvature" field.</summary>
    public const int CurvatureFieldNumber = 5;
    private double curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Curvature {
      get { return curvature_; }
      set {
        curvature_ = value;
      }
    }

    /// <summary>Field number for the "curvature_derivative" field.</summary>
    public const int CurvatureDerivativeFieldNumber = 6;
    private double curvatureDerivative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurvatureDerivative {
      get { return curvatureDerivative_; }
      set {
        curvatureDerivative_ = value;
      }
    }

    /// <summary>Field number for the "width_right_marking" field.</summary>
    public const int WidthRightMarkingFieldNumber = 7;
    private double widthRightMarking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WidthRightMarking {
      get { return widthRightMarking_; }
      set {
        widthRightMarking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lka_768);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lka_768 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneType != other.LaneType) return false;
      if (Quality != other.Quality) return false;
      if (ModelDegree != other.ModelDegree) return false;
      if (Position != other.Position) return false;
      if (Curvature != other.Curvature) return false;
      if (CurvatureDerivative != other.CurvatureDerivative) return false;
      if (WidthRightMarking != other.WidthRightMarking) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneType != 0) hash ^= LaneType.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (ModelDegree != 0) hash ^= ModelDegree.GetHashCode();
      if (Position != 0D) hash ^= Position.GetHashCode();
      if (Curvature != 0D) hash ^= Curvature.GetHashCode();
      if (CurvatureDerivative != 0D) hash ^= CurvatureDerivative.GetHashCode();
      if (WidthRightMarking != 0D) hash ^= WidthRightMarking.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneType);
      }
      if (Quality != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quality);
      }
      if (ModelDegree != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelDegree);
      }
      if (Position != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Position);
      }
      if (Curvature != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Curvature);
      }
      if (CurvatureDerivative != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CurvatureDerivative);
      }
      if (WidthRightMarking != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WidthRightMarking);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneType);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (ModelDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelDegree);
      }
      if (Position != 0D) {
        size += 1 + 8;
      }
      if (Curvature != 0D) {
        size += 1 + 8;
      }
      if (CurvatureDerivative != 0D) {
        size += 1 + 8;
      }
      if (WidthRightMarking != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lka_768 other) {
      if (other == null) {
        return;
      }
      if (other.LaneType != 0) {
        LaneType = other.LaneType;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.ModelDegree != 0) {
        ModelDegree = other.ModelDegree;
      }
      if (other.Position != 0D) {
        Position = other.Position;
      }
      if (other.Curvature != 0D) {
        Curvature = other.Curvature;
      }
      if (other.CurvatureDerivative != 0D) {
        CurvatureDerivative = other.CurvatureDerivative;
      }
      if (other.WidthRightMarking != 0D) {
        WidthRightMarking = other.WidthRightMarking;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LaneType = input.ReadInt32();
            break;
          }
          case 16: {
            Quality = input.ReadInt32();
            break;
          }
          case 24: {
            ModelDegree = input.ReadInt32();
            break;
          }
          case 33: {
            Position = input.ReadDouble();
            break;
          }
          case 41: {
            Curvature = input.ReadDouble();
            break;
          }
          case 49: {
            CurvatureDerivative = input.ReadDouble();
            break;
          }
          case 57: {
            WidthRightMarking = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Num_76b : pb::IMessage<Num_76b> {
    private static readonly pb::MessageParser<Num_76b> _parser = new pb::MessageParser<Num_76b>(() => new Num_76b());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Num_76b> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Num_76b() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Num_76b(Num_76b other) : this() {
      numOfNextLaneMarkReported_ = other.numOfNextLaneMarkReported_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Num_76b Clone() {
      return new Num_76b(this);
    }

    /// <summary>Field number for the "num_of_next_lane_mark_reported" field.</summary>
    public const int NumOfNextLaneMarkReportedFieldNumber = 1;
    private int numOfNextLaneMarkReported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumOfNextLaneMarkReported {
      get { return numOfNextLaneMarkReported_; }
      set {
        numOfNextLaneMarkReported_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Num_76b);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Num_76b other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOfNextLaneMarkReported != other.NumOfNextLaneMarkReported) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOfNextLaneMarkReported != 0) hash ^= NumOfNextLaneMarkReported.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOfNextLaneMarkReported != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumOfNextLaneMarkReported);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOfNextLaneMarkReported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOfNextLaneMarkReported);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Num_76b other) {
      if (other == null) {
        return;
      }
      if (other.NumOfNextLaneMarkReported != 0) {
        NumOfNextLaneMarkReported = other.NumOfNextLaneMarkReported;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumOfNextLaneMarkReported = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Aftermarket_669 : pb::IMessage<Aftermarket_669> {
    private static readonly pb::MessageParser<Aftermarket_669> _parser = new pb::MessageParser<Aftermarket_669>(() => new Aftermarket_669());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Aftermarket_669> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Aftermarket_669() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Aftermarket_669(Aftermarket_669 other) : this() {
      laneConfLeft_ = other.laneConfLeft_;
      ldwAvailabilityLeft_ = other.ldwAvailabilityLeft_;
      laneTypeLeft_ = other.laneTypeLeft_;
      distanceToLaneL_ = other.distanceToLaneL_;
      laneConfRight_ = other.laneConfRight_;
      ldwAvailabilityRight_ = other.ldwAvailabilityRight_;
      laneTypeRight_ = other.laneTypeRight_;
      distanceToLaneR_ = other.distanceToLaneR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Aftermarket_669 Clone() {
      return new Aftermarket_669(this);
    }

    /// <summary>Field number for the "lane_conf_left" field.</summary>
    public const int LaneConfLeftFieldNumber = 1;
    private int laneConfLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneConfLeft {
      get { return laneConfLeft_; }
      set {
        laneConfLeft_ = value;
      }
    }

    /// <summary>Field number for the "ldw_availability_left" field.</summary>
    public const int LdwAvailabilityLeftFieldNumber = 2;
    private bool ldwAvailabilityLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LdwAvailabilityLeft {
      get { return ldwAvailabilityLeft_; }
      set {
        ldwAvailabilityLeft_ = value;
      }
    }

    /// <summary>Field number for the "lane_type_left" field.</summary>
    public const int LaneTypeLeftFieldNumber = 3;
    private int laneTypeLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneTypeLeft {
      get { return laneTypeLeft_; }
      set {
        laneTypeLeft_ = value;
      }
    }

    /// <summary>Field number for the "distance_to_lane_l" field.</summary>
    public const int DistanceToLaneLFieldNumber = 4;
    private double distanceToLaneL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceToLaneL {
      get { return distanceToLaneL_; }
      set {
        distanceToLaneL_ = value;
      }
    }

    /// <summary>Field number for the "lane_conf_right" field.</summary>
    public const int LaneConfRightFieldNumber = 5;
    private int laneConfRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneConfRight {
      get { return laneConfRight_; }
      set {
        laneConfRight_ = value;
      }
    }

    /// <summary>Field number for the "ldw_availability_right" field.</summary>
    public const int LdwAvailabilityRightFieldNumber = 6;
    private bool ldwAvailabilityRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LdwAvailabilityRight {
      get { return ldwAvailabilityRight_; }
      set {
        ldwAvailabilityRight_ = value;
      }
    }

    /// <summary>Field number for the "lane_type_right" field.</summary>
    public const int LaneTypeRightFieldNumber = 7;
    private int laneTypeRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneTypeRight {
      get { return laneTypeRight_; }
      set {
        laneTypeRight_ = value;
      }
    }

    /// <summary>Field number for the "distance_to_lane_r" field.</summary>
    public const int DistanceToLaneRFieldNumber = 8;
    private double distanceToLaneR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceToLaneR {
      get { return distanceToLaneR_; }
      set {
        distanceToLaneR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Aftermarket_669);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Aftermarket_669 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneConfLeft != other.LaneConfLeft) return false;
      if (LdwAvailabilityLeft != other.LdwAvailabilityLeft) return false;
      if (LaneTypeLeft != other.LaneTypeLeft) return false;
      if (DistanceToLaneL != other.DistanceToLaneL) return false;
      if (LaneConfRight != other.LaneConfRight) return false;
      if (LdwAvailabilityRight != other.LdwAvailabilityRight) return false;
      if (LaneTypeRight != other.LaneTypeRight) return false;
      if (DistanceToLaneR != other.DistanceToLaneR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneConfLeft != 0) hash ^= LaneConfLeft.GetHashCode();
      if (LdwAvailabilityLeft != false) hash ^= LdwAvailabilityLeft.GetHashCode();
      if (LaneTypeLeft != 0) hash ^= LaneTypeLeft.GetHashCode();
      if (DistanceToLaneL != 0D) hash ^= DistanceToLaneL.GetHashCode();
      if (LaneConfRight != 0) hash ^= LaneConfRight.GetHashCode();
      if (LdwAvailabilityRight != false) hash ^= LdwAvailabilityRight.GetHashCode();
      if (LaneTypeRight != 0) hash ^= LaneTypeRight.GetHashCode();
      if (DistanceToLaneR != 0D) hash ^= DistanceToLaneR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneConfLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneConfLeft);
      }
      if (LdwAvailabilityLeft != false) {
        output.WriteRawTag(16);
        output.WriteBool(LdwAvailabilityLeft);
      }
      if (LaneTypeLeft != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LaneTypeLeft);
      }
      if (DistanceToLaneL != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(DistanceToLaneL);
      }
      if (LaneConfRight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LaneConfRight);
      }
      if (LdwAvailabilityRight != false) {
        output.WriteRawTag(48);
        output.WriteBool(LdwAvailabilityRight);
      }
      if (LaneTypeRight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LaneTypeRight);
      }
      if (DistanceToLaneR != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DistanceToLaneR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneConfLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneConfLeft);
      }
      if (LdwAvailabilityLeft != false) {
        size += 1 + 1;
      }
      if (LaneTypeLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneTypeLeft);
      }
      if (DistanceToLaneL != 0D) {
        size += 1 + 8;
      }
      if (LaneConfRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneConfRight);
      }
      if (LdwAvailabilityRight != false) {
        size += 1 + 1;
      }
      if (LaneTypeRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneTypeRight);
      }
      if (DistanceToLaneR != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Aftermarket_669 other) {
      if (other == null) {
        return;
      }
      if (other.LaneConfLeft != 0) {
        LaneConfLeft = other.LaneConfLeft;
      }
      if (other.LdwAvailabilityLeft != false) {
        LdwAvailabilityLeft = other.LdwAvailabilityLeft;
      }
      if (other.LaneTypeLeft != 0) {
        LaneTypeLeft = other.LaneTypeLeft;
      }
      if (other.DistanceToLaneL != 0D) {
        DistanceToLaneL = other.DistanceToLaneL;
      }
      if (other.LaneConfRight != 0) {
        LaneConfRight = other.LaneConfRight;
      }
      if (other.LdwAvailabilityRight != false) {
        LdwAvailabilityRight = other.LdwAvailabilityRight;
      }
      if (other.LaneTypeRight != 0) {
        LaneTypeRight = other.LaneTypeRight;
      }
      if (other.DistanceToLaneR != 0D) {
        DistanceToLaneR = other.DistanceToLaneR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LaneConfLeft = input.ReadInt32();
            break;
          }
          case 16: {
            LdwAvailabilityLeft = input.ReadBool();
            break;
          }
          case 24: {
            LaneTypeLeft = input.ReadInt32();
            break;
          }
          case 33: {
            DistanceToLaneL = input.ReadDouble();
            break;
          }
          case 40: {
            LaneConfRight = input.ReadInt32();
            break;
          }
          case 48: {
            LdwAvailabilityRight = input.ReadBool();
            break;
          }
          case 56: {
            LaneTypeRight = input.ReadInt32();
            break;
          }
          case 65: {
            DistanceToLaneR = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lka_769 : pb::IMessage<Lka_769> {
    private static readonly pb::MessageParser<Lka_769> _parser = new pb::MessageParser<Lka_769>(() => new Lka_769());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lka_769> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_769() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_769(Lka_769 other) : this() {
      headingAngle_ = other.headingAngle_;
      viewRange_ = other.viewRange_;
      viewRangeAvailability_ = other.viewRangeAvailability_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_769 Clone() {
      return new Lka_769(this);
    }

    /// <summary>Field number for the "heading_angle" field.</summary>
    public const int HeadingAngleFieldNumber = 1;
    private double headingAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingAngle {
      get { return headingAngle_; }
      set {
        headingAngle_ = value;
      }
    }

    /// <summary>Field number for the "view_range" field.</summary>
    public const int ViewRangeFieldNumber = 2;
    private double viewRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ViewRange {
      get { return viewRange_; }
      set {
        viewRange_ = value;
      }
    }

    /// <summary>Field number for the "view_range_availability" field.</summary>
    public const int ViewRangeAvailabilityFieldNumber = 3;
    private bool viewRangeAvailability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ViewRangeAvailability {
      get { return viewRangeAvailability_; }
      set {
        viewRangeAvailability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lka_769);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lka_769 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadingAngle != other.HeadingAngle) return false;
      if (ViewRange != other.ViewRange) return false;
      if (ViewRangeAvailability != other.ViewRangeAvailability) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadingAngle != 0D) hash ^= HeadingAngle.GetHashCode();
      if (ViewRange != 0D) hash ^= ViewRange.GetHashCode();
      if (ViewRangeAvailability != false) hash ^= ViewRangeAvailability.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadingAngle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(HeadingAngle);
      }
      if (ViewRange != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ViewRange);
      }
      if (ViewRangeAvailability != false) {
        output.WriteRawTag(24);
        output.WriteBool(ViewRangeAvailability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadingAngle != 0D) {
        size += 1 + 8;
      }
      if (ViewRange != 0D) {
        size += 1 + 8;
      }
      if (ViewRangeAvailability != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lka_769 other) {
      if (other == null) {
        return;
      }
      if (other.HeadingAngle != 0D) {
        HeadingAngle = other.HeadingAngle;
      }
      if (other.ViewRange != 0D) {
        ViewRange = other.ViewRange;
      }
      if (other.ViewRangeAvailability != false) {
        ViewRangeAvailability = other.ViewRangeAvailability;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            HeadingAngle = input.ReadDouble();
            break;
          }
          case 17: {
            ViewRange = input.ReadDouble();
            break;
          }
          case 24: {
            ViewRangeAvailability = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reference_76a : pb::IMessage<Reference_76a> {
    private static readonly pb::MessageParser<Reference_76a> _parser = new pb::MessageParser<Reference_76a>(() => new Reference_76a());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reference_76a> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reference_76a() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reference_76a(Reference_76a other) : this() {
      refPoint1Position_ = other.refPoint1Position_;
      refPoint1Distance_ = other.refPoint1Distance_;
      refPoint1Validity_ = other.refPoint1Validity_;
      refPoint2Position_ = other.refPoint2Position_;
      refPoint2Distance_ = other.refPoint2Distance_;
      refPoint2Validity_ = other.refPoint2Validity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reference_76a Clone() {
      return new Reference_76a(this);
    }

    /// <summary>Field number for the "ref_point_1_position" field.</summary>
    public const int RefPoint1PositionFieldNumber = 1;
    private double refPoint1Position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefPoint1Position {
      get { return refPoint1Position_; }
      set {
        refPoint1Position_ = value;
      }
    }

    /// <summary>Field number for the "ref_point_1_distance" field.</summary>
    public const int RefPoint1DistanceFieldNumber = 2;
    private double refPoint1Distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefPoint1Distance {
      get { return refPoint1Distance_; }
      set {
        refPoint1Distance_ = value;
      }
    }

    /// <summary>Field number for the "ref_point_1_validity" field.</summary>
    public const int RefPoint1ValidityFieldNumber = 3;
    private bool refPoint1Validity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RefPoint1Validity {
      get { return refPoint1Validity_; }
      set {
        refPoint1Validity_ = value;
      }
    }

    /// <summary>Field number for the "ref_point_2_position" field.</summary>
    public const int RefPoint2PositionFieldNumber = 4;
    private double refPoint2Position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefPoint2Position {
      get { return refPoint2Position_; }
      set {
        refPoint2Position_ = value;
      }
    }

    /// <summary>Field number for the "ref_point_2_distance" field.</summary>
    public const int RefPoint2DistanceFieldNumber = 5;
    private double refPoint2Distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RefPoint2Distance {
      get { return refPoint2Distance_; }
      set {
        refPoint2Distance_ = value;
      }
    }

    /// <summary>Field number for the "ref_point_2_validity" field.</summary>
    public const int RefPoint2ValidityFieldNumber = 6;
    private bool refPoint2Validity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RefPoint2Validity {
      get { return refPoint2Validity_; }
      set {
        refPoint2Validity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reference_76a);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reference_76a other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefPoint1Position != other.RefPoint1Position) return false;
      if (RefPoint1Distance != other.RefPoint1Distance) return false;
      if (RefPoint1Validity != other.RefPoint1Validity) return false;
      if (RefPoint2Position != other.RefPoint2Position) return false;
      if (RefPoint2Distance != other.RefPoint2Distance) return false;
      if (RefPoint2Validity != other.RefPoint2Validity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefPoint1Position != 0D) hash ^= RefPoint1Position.GetHashCode();
      if (RefPoint1Distance != 0D) hash ^= RefPoint1Distance.GetHashCode();
      if (RefPoint1Validity != false) hash ^= RefPoint1Validity.GetHashCode();
      if (RefPoint2Position != 0D) hash ^= RefPoint2Position.GetHashCode();
      if (RefPoint2Distance != 0D) hash ^= RefPoint2Distance.GetHashCode();
      if (RefPoint2Validity != false) hash ^= RefPoint2Validity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefPoint1Position != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(RefPoint1Position);
      }
      if (RefPoint1Distance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RefPoint1Distance);
      }
      if (RefPoint1Validity != false) {
        output.WriteRawTag(24);
        output.WriteBool(RefPoint1Validity);
      }
      if (RefPoint2Position != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RefPoint2Position);
      }
      if (RefPoint2Distance != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RefPoint2Distance);
      }
      if (RefPoint2Validity != false) {
        output.WriteRawTag(48);
        output.WriteBool(RefPoint2Validity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefPoint1Position != 0D) {
        size += 1 + 8;
      }
      if (RefPoint1Distance != 0D) {
        size += 1 + 8;
      }
      if (RefPoint1Validity != false) {
        size += 1 + 1;
      }
      if (RefPoint2Position != 0D) {
        size += 1 + 8;
      }
      if (RefPoint2Distance != 0D) {
        size += 1 + 8;
      }
      if (RefPoint2Validity != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reference_76a other) {
      if (other == null) {
        return;
      }
      if (other.RefPoint1Position != 0D) {
        RefPoint1Position = other.RefPoint1Position;
      }
      if (other.RefPoint1Distance != 0D) {
        RefPoint1Distance = other.RefPoint1Distance;
      }
      if (other.RefPoint1Validity != false) {
        RefPoint1Validity = other.RefPoint1Validity;
      }
      if (other.RefPoint2Position != 0D) {
        RefPoint2Position = other.RefPoint2Position;
      }
      if (other.RefPoint2Distance != 0D) {
        RefPoint2Distance = other.RefPoint2Distance;
      }
      if (other.RefPoint2Validity != false) {
        RefPoint2Validity = other.RefPoint2Validity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            RefPoint1Position = input.ReadDouble();
            break;
          }
          case 17: {
            RefPoint1Distance = input.ReadDouble();
            break;
          }
          case 24: {
            RefPoint1Validity = input.ReadBool();
            break;
          }
          case 33: {
            RefPoint2Position = input.ReadDouble();
            break;
          }
          case 41: {
            RefPoint2Distance = input.ReadDouble();
            break;
          }
          case 48: {
            RefPoint2Validity = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Details_738 : pb::IMessage<Details_738> {
    private static readonly pb::MessageParser<Details_738> _parser = new pb::MessageParser<Details_738>(() => new Details_738());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details_738> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_738() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_738(Details_738 other) : this() {
      numObstacles_ = other.numObstacles_;
      timestamp_ = other.timestamp_;
      applicationVersion_ = other.applicationVersion_;
      activeVersionNumberSection_ = other.activeVersionNumberSection_;
      leftCloseRangCutIn_ = other.leftCloseRangCutIn_;
      rightCloseRangCutIn_ = other.rightCloseRangCutIn_;
      go_ = other.go_;
      protocolVersion_ = other.protocolVersion_;
      closeCar_ = other.closeCar_;
      failsafe_ = other.failsafe_;
      reserved10_ = other.reserved10_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_738 Clone() {
      return new Details_738(this);
    }

    /// <summary>Field number for the "num_obstacles" field.</summary>
    public const int NumObstaclesFieldNumber = 1;
    private int numObstacles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumObstacles {
      get { return numObstacles_; }
      set {
        numObstacles_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "application_version" field.</summary>
    public const int ApplicationVersionFieldNumber = 3;
    private int applicationVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationVersion {
      get { return applicationVersion_; }
      set {
        applicationVersion_ = value;
      }
    }

    /// <summary>Field number for the "active_version_number_section" field.</summary>
    public const int ActiveVersionNumberSectionFieldNumber = 4;
    private int activeVersionNumberSection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveVersionNumberSection {
      get { return activeVersionNumberSection_; }
      set {
        activeVersionNumberSection_ = value;
      }
    }

    /// <summary>Field number for the "left_close_rang_cut_in" field.</summary>
    public const int LeftCloseRangCutInFieldNumber = 5;
    private bool leftCloseRangCutIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftCloseRangCutIn {
      get { return leftCloseRangCutIn_; }
      set {
        leftCloseRangCutIn_ = value;
      }
    }

    /// <summary>Field number for the "right_close_rang_cut_in" field.</summary>
    public const int RightCloseRangCutInFieldNumber = 6;
    private bool rightCloseRangCutIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RightCloseRangCutIn {
      get { return rightCloseRangCutIn_; }
      set {
        rightCloseRangCutIn_ = value;
      }
    }

    /// <summary>Field number for the "go" field.</summary>
    public const int GoFieldNumber = 7;
    private int go_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Go {
      get { return go_; }
      set {
        go_ = value;
      }
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 8;
    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "close_car" field.</summary>
    public const int CloseCarFieldNumber = 9;
    private bool closeCar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseCar {
      get { return closeCar_; }
      set {
        closeCar_ = value;
      }
    }

    /// <summary>Field number for the "failsafe" field.</summary>
    public const int FailsafeFieldNumber = 10;
    private int failsafe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Failsafe {
      get { return failsafe_; }
      set {
        failsafe_ = value;
      }
    }

    /// <summary>Field number for the "reserved_10" field.</summary>
    public const int Reserved10FieldNumber = 11;
    private int reserved10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reserved10 {
      get { return reserved10_; }
      set {
        reserved10_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details_738);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details_738 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumObstacles != other.NumObstacles) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ApplicationVersion != other.ApplicationVersion) return false;
      if (ActiveVersionNumberSection != other.ActiveVersionNumberSection) return false;
      if (LeftCloseRangCutIn != other.LeftCloseRangCutIn) return false;
      if (RightCloseRangCutIn != other.RightCloseRangCutIn) return false;
      if (Go != other.Go) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (CloseCar != other.CloseCar) return false;
      if (Failsafe != other.Failsafe) return false;
      if (Reserved10 != other.Reserved10) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumObstacles != 0) hash ^= NumObstacles.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ApplicationVersion != 0) hash ^= ApplicationVersion.GetHashCode();
      if (ActiveVersionNumberSection != 0) hash ^= ActiveVersionNumberSection.GetHashCode();
      if (LeftCloseRangCutIn != false) hash ^= LeftCloseRangCutIn.GetHashCode();
      if (RightCloseRangCutIn != false) hash ^= RightCloseRangCutIn.GetHashCode();
      if (Go != 0) hash ^= Go.GetHashCode();
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (CloseCar != false) hash ^= CloseCar.GetHashCode();
      if (Failsafe != 0) hash ^= Failsafe.GetHashCode();
      if (Reserved10 != 0) hash ^= Reserved10.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumObstacles != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumObstacles);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (ApplicationVersion != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplicationVersion);
      }
      if (ActiveVersionNumberSection != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActiveVersionNumberSection);
      }
      if (LeftCloseRangCutIn != false) {
        output.WriteRawTag(40);
        output.WriteBool(LeftCloseRangCutIn);
      }
      if (RightCloseRangCutIn != false) {
        output.WriteRawTag(48);
        output.WriteBool(RightCloseRangCutIn);
      }
      if (Go != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Go);
      }
      if (ProtocolVersion != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ProtocolVersion);
      }
      if (CloseCar != false) {
        output.WriteRawTag(72);
        output.WriteBool(CloseCar);
      }
      if (Failsafe != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Failsafe);
      }
      if (Reserved10 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Reserved10);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumObstacles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumObstacles);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (ApplicationVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationVersion);
      }
      if (ActiveVersionNumberSection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveVersionNumberSection);
      }
      if (LeftCloseRangCutIn != false) {
        size += 1 + 1;
      }
      if (RightCloseRangCutIn != false) {
        size += 1 + 1;
      }
      if (Go != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Go);
      }
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (CloseCar != false) {
        size += 1 + 1;
      }
      if (Failsafe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Failsafe);
      }
      if (Reserved10 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reserved10);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details_738 other) {
      if (other == null) {
        return;
      }
      if (other.NumObstacles != 0) {
        NumObstacles = other.NumObstacles;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ApplicationVersion != 0) {
        ApplicationVersion = other.ApplicationVersion;
      }
      if (other.ActiveVersionNumberSection != 0) {
        ActiveVersionNumberSection = other.ActiveVersionNumberSection;
      }
      if (other.LeftCloseRangCutIn != false) {
        LeftCloseRangCutIn = other.LeftCloseRangCutIn;
      }
      if (other.RightCloseRangCutIn != false) {
        RightCloseRangCutIn = other.RightCloseRangCutIn;
      }
      if (other.Go != 0) {
        Go = other.Go;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.CloseCar != false) {
        CloseCar = other.CloseCar;
      }
      if (other.Failsafe != 0) {
        Failsafe = other.Failsafe;
      }
      if (other.Reserved10 != 0) {
        Reserved10 = other.Reserved10;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumObstacles = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 24: {
            ApplicationVersion = input.ReadInt32();
            break;
          }
          case 32: {
            ActiveVersionNumberSection = input.ReadInt32();
            break;
          }
          case 40: {
            LeftCloseRangCutIn = input.ReadBool();
            break;
          }
          case 48: {
            RightCloseRangCutIn = input.ReadBool();
            break;
          }
          case 56: {
            Go = input.ReadInt32();
            break;
          }
          case 64: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 72: {
            CloseCar = input.ReadBool();
            break;
          }
          case 80: {
            Failsafe = input.ReadInt32();
            break;
          }
          case 88: {
            Reserved10 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Next_76c : pb::IMessage<Next_76c> {
    private static readonly pb::MessageParser<Next_76c> _parser = new pb::MessageParser<Next_76c>(() => new Next_76c());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Next_76c> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next_76c() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next_76c(Next_76c other) : this() {
      laneType_ = other.laneType_;
      quality_ = other.quality_;
      modelDegree_ = other.modelDegree_;
      position_ = other.position_;
      curvature_ = other.curvature_;
      curvatureDerivative_ = other.curvatureDerivative_;
      laneMarkWidth_ = other.laneMarkWidth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next_76c Clone() {
      return new Next_76c(this);
    }

    /// <summary>Field number for the "lane_type" field.</summary>
    public const int LaneTypeFieldNumber = 1;
    private int laneType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneType {
      get { return laneType_; }
      set {
        laneType_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "model_degree" field.</summary>
    public const int ModelDegreeFieldNumber = 3;
    private int modelDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelDegree {
      get { return modelDegree_; }
      set {
        modelDegree_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private double position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "curvature" field.</summary>
    public const int CurvatureFieldNumber = 5;
    private double curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Curvature {
      get { return curvature_; }
      set {
        curvature_ = value;
      }
    }

    /// <summary>Field number for the "curvature_derivative" field.</summary>
    public const int CurvatureDerivativeFieldNumber = 6;
    private double curvatureDerivative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurvatureDerivative {
      get { return curvatureDerivative_; }
      set {
        curvatureDerivative_ = value;
      }
    }

    /// <summary>Field number for the "lane_mark_width" field.</summary>
    public const int LaneMarkWidthFieldNumber = 7;
    private double laneMarkWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneMarkWidth {
      get { return laneMarkWidth_; }
      set {
        laneMarkWidth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Next_76c);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Next_76c other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneType != other.LaneType) return false;
      if (Quality != other.Quality) return false;
      if (ModelDegree != other.ModelDegree) return false;
      if (Position != other.Position) return false;
      if (Curvature != other.Curvature) return false;
      if (CurvatureDerivative != other.CurvatureDerivative) return false;
      if (LaneMarkWidth != other.LaneMarkWidth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneType != 0) hash ^= LaneType.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (ModelDegree != 0) hash ^= ModelDegree.GetHashCode();
      if (Position != 0D) hash ^= Position.GetHashCode();
      if (Curvature != 0D) hash ^= Curvature.GetHashCode();
      if (CurvatureDerivative != 0D) hash ^= CurvatureDerivative.GetHashCode();
      if (LaneMarkWidth != 0D) hash ^= LaneMarkWidth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneType);
      }
      if (Quality != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quality);
      }
      if (ModelDegree != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelDegree);
      }
      if (Position != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Position);
      }
      if (Curvature != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Curvature);
      }
      if (CurvatureDerivative != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CurvatureDerivative);
      }
      if (LaneMarkWidth != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(LaneMarkWidth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneType);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (ModelDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelDegree);
      }
      if (Position != 0D) {
        size += 1 + 8;
      }
      if (Curvature != 0D) {
        size += 1 + 8;
      }
      if (CurvatureDerivative != 0D) {
        size += 1 + 8;
      }
      if (LaneMarkWidth != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Next_76c other) {
      if (other == null) {
        return;
      }
      if (other.LaneType != 0) {
        LaneType = other.LaneType;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.ModelDegree != 0) {
        ModelDegree = other.ModelDegree;
      }
      if (other.Position != 0D) {
        Position = other.Position;
      }
      if (other.Curvature != 0D) {
        Curvature = other.Curvature;
      }
      if (other.CurvatureDerivative != 0D) {
        CurvatureDerivative = other.CurvatureDerivative;
      }
      if (other.LaneMarkWidth != 0D) {
        LaneMarkWidth = other.LaneMarkWidth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LaneType = input.ReadInt32();
            break;
          }
          case 16: {
            Quality = input.ReadInt32();
            break;
          }
          case 24: {
            ModelDegree = input.ReadInt32();
            break;
          }
          case 33: {
            Position = input.ReadDouble();
            break;
          }
          case 41: {
            Curvature = input.ReadDouble();
            break;
          }
          case 49: {
            CurvatureDerivative = input.ReadDouble();
            break;
          }
          case 57: {
            LaneMarkWidth = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Details_737 : pb::IMessage<Details_737> {
    private static readonly pb::MessageParser<Details_737> _parser = new pb::MessageParser<Details_737>(() => new Details_737());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details_737> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_737() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_737(Details_737 other) : this() {
      laneCurvature_ = other.laneCurvature_;
      laneHeading_ = other.laneHeading_;
      caConstructionArea_ = other.caConstructionArea_;
      rightLdwAvailability_ = other.rightLdwAvailability_;
      leftLdwAvailability_ = other.leftLdwAvailability_;
      reserved1_ = other.reserved1_;
      yawAngle_ = other.yawAngle_;
      pitchAngle_ = other.pitchAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_737 Clone() {
      return new Details_737(this);
    }

    /// <summary>Field number for the "lane_curvature" field.</summary>
    public const int LaneCurvatureFieldNumber = 1;
    private double laneCurvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneCurvature {
      get { return laneCurvature_; }
      set {
        laneCurvature_ = value;
      }
    }

    /// <summary>Field number for the "lane_heading" field.</summary>
    public const int LaneHeadingFieldNumber = 2;
    private double laneHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneHeading {
      get { return laneHeading_; }
      set {
        laneHeading_ = value;
      }
    }

    /// <summary>Field number for the "ca_construction_area" field.</summary>
    public const int CaConstructionAreaFieldNumber = 3;
    private bool caConstructionArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CaConstructionArea {
      get { return caConstructionArea_; }
      set {
        caConstructionArea_ = value;
      }
    }

    /// <summary>Field number for the "right_ldw_availability" field.</summary>
    public const int RightLdwAvailabilityFieldNumber = 4;
    private bool rightLdwAvailability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RightLdwAvailability {
      get { return rightLdwAvailability_; }
      set {
        rightLdwAvailability_ = value;
      }
    }

    /// <summary>Field number for the "left_ldw_availability" field.</summary>
    public const int LeftLdwAvailabilityFieldNumber = 5;
    private bool leftLdwAvailability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftLdwAvailability {
      get { return leftLdwAvailability_; }
      set {
        leftLdwAvailability_ = value;
      }
    }

    /// <summary>Field number for the "reserved_1" field.</summary>
    public const int Reserved1FieldNumber = 6;
    private bool reserved1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reserved1 {
      get { return reserved1_; }
      set {
        reserved1_ = value;
      }
    }

    /// <summary>Field number for the "yaw_angle" field.</summary>
    public const int YawAngleFieldNumber = 7;
    private double yawAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawAngle {
      get { return yawAngle_; }
      set {
        yawAngle_ = value;
      }
    }

    /// <summary>Field number for the "pitch_angle" field.</summary>
    public const int PitchAngleFieldNumber = 8;
    private double pitchAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PitchAngle {
      get { return pitchAngle_; }
      set {
        pitchAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details_737);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details_737 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneCurvature != other.LaneCurvature) return false;
      if (LaneHeading != other.LaneHeading) return false;
      if (CaConstructionArea != other.CaConstructionArea) return false;
      if (RightLdwAvailability != other.RightLdwAvailability) return false;
      if (LeftLdwAvailability != other.LeftLdwAvailability) return false;
      if (Reserved1 != other.Reserved1) return false;
      if (YawAngle != other.YawAngle) return false;
      if (PitchAngle != other.PitchAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneCurvature != 0D) hash ^= LaneCurvature.GetHashCode();
      if (LaneHeading != 0D) hash ^= LaneHeading.GetHashCode();
      if (CaConstructionArea != false) hash ^= CaConstructionArea.GetHashCode();
      if (RightLdwAvailability != false) hash ^= RightLdwAvailability.GetHashCode();
      if (LeftLdwAvailability != false) hash ^= LeftLdwAvailability.GetHashCode();
      if (Reserved1 != false) hash ^= Reserved1.GetHashCode();
      if (YawAngle != 0D) hash ^= YawAngle.GetHashCode();
      if (PitchAngle != 0D) hash ^= PitchAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneCurvature != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LaneCurvature);
      }
      if (LaneHeading != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LaneHeading);
      }
      if (CaConstructionArea != false) {
        output.WriteRawTag(24);
        output.WriteBool(CaConstructionArea);
      }
      if (RightLdwAvailability != false) {
        output.WriteRawTag(32);
        output.WriteBool(RightLdwAvailability);
      }
      if (LeftLdwAvailability != false) {
        output.WriteRawTag(40);
        output.WriteBool(LeftLdwAvailability);
      }
      if (Reserved1 != false) {
        output.WriteRawTag(48);
        output.WriteBool(Reserved1);
      }
      if (YawAngle != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(YawAngle);
      }
      if (PitchAngle != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PitchAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneCurvature != 0D) {
        size += 1 + 8;
      }
      if (LaneHeading != 0D) {
        size += 1 + 8;
      }
      if (CaConstructionArea != false) {
        size += 1 + 1;
      }
      if (RightLdwAvailability != false) {
        size += 1 + 1;
      }
      if (LeftLdwAvailability != false) {
        size += 1 + 1;
      }
      if (Reserved1 != false) {
        size += 1 + 1;
      }
      if (YawAngle != 0D) {
        size += 1 + 8;
      }
      if (PitchAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details_737 other) {
      if (other == null) {
        return;
      }
      if (other.LaneCurvature != 0D) {
        LaneCurvature = other.LaneCurvature;
      }
      if (other.LaneHeading != 0D) {
        LaneHeading = other.LaneHeading;
      }
      if (other.CaConstructionArea != false) {
        CaConstructionArea = other.CaConstructionArea;
      }
      if (other.RightLdwAvailability != false) {
        RightLdwAvailability = other.RightLdwAvailability;
      }
      if (other.LeftLdwAvailability != false) {
        LeftLdwAvailability = other.LeftLdwAvailability;
      }
      if (other.Reserved1 != false) {
        Reserved1 = other.Reserved1;
      }
      if (other.YawAngle != 0D) {
        YawAngle = other.YawAngle;
      }
      if (other.PitchAngle != 0D) {
        PitchAngle = other.PitchAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LaneCurvature = input.ReadDouble();
            break;
          }
          case 17: {
            LaneHeading = input.ReadDouble();
            break;
          }
          case 24: {
            CaConstructionArea = input.ReadBool();
            break;
          }
          case 32: {
            RightLdwAvailability = input.ReadBool();
            break;
          }
          case 40: {
            LeftLdwAvailability = input.ReadBool();
            break;
          }
          case 48: {
            Reserved1 = input.ReadBool();
            break;
          }
          case 57: {
            YawAngle = input.ReadDouble();
            break;
          }
          case 65: {
            PitchAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lka_767 : pb::IMessage<Lka_767> {
    private static readonly pb::MessageParser<Lka_767> _parser = new pb::MessageParser<Lka_767>(() => new Lka_767());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lka_767> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_767() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_767(Lka_767 other) : this() {
      headingAngle_ = other.headingAngle_;
      viewRange_ = other.viewRange_;
      viewRangeAvailability_ = other.viewRangeAvailability_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_767 Clone() {
      return new Lka_767(this);
    }

    /// <summary>Field number for the "heading_angle" field.</summary>
    public const int HeadingAngleFieldNumber = 1;
    private double headingAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingAngle {
      get { return headingAngle_; }
      set {
        headingAngle_ = value;
      }
    }

    /// <summary>Field number for the "view_range" field.</summary>
    public const int ViewRangeFieldNumber = 2;
    private double viewRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ViewRange {
      get { return viewRange_; }
      set {
        viewRange_ = value;
      }
    }

    /// <summary>Field number for the "view_range_availability" field.</summary>
    public const int ViewRangeAvailabilityFieldNumber = 3;
    private bool viewRangeAvailability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ViewRangeAvailability {
      get { return viewRangeAvailability_; }
      set {
        viewRangeAvailability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lka_767);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lka_767 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadingAngle != other.HeadingAngle) return false;
      if (ViewRange != other.ViewRange) return false;
      if (ViewRangeAvailability != other.ViewRangeAvailability) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadingAngle != 0D) hash ^= HeadingAngle.GetHashCode();
      if (ViewRange != 0D) hash ^= ViewRange.GetHashCode();
      if (ViewRangeAvailability != false) hash ^= ViewRangeAvailability.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadingAngle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(HeadingAngle);
      }
      if (ViewRange != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ViewRange);
      }
      if (ViewRangeAvailability != false) {
        output.WriteRawTag(24);
        output.WriteBool(ViewRangeAvailability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadingAngle != 0D) {
        size += 1 + 8;
      }
      if (ViewRange != 0D) {
        size += 1 + 8;
      }
      if (ViewRangeAvailability != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lka_767 other) {
      if (other == null) {
        return;
      }
      if (other.HeadingAngle != 0D) {
        HeadingAngle = other.HeadingAngle;
      }
      if (other.ViewRange != 0D) {
        ViewRange = other.ViewRange;
      }
      if (other.ViewRangeAvailability != false) {
        ViewRangeAvailability = other.ViewRangeAvailability;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            HeadingAngle = input.ReadDouble();
            break;
          }
          case 17: {
            ViewRange = input.ReadDouble();
            break;
          }
          case 24: {
            ViewRangeAvailability = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lka_766 : pb::IMessage<Lka_766> {
    private static readonly pb::MessageParser<Lka_766> _parser = new pb::MessageParser<Lka_766>(() => new Lka_766());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lka_766> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_766() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_766(Lka_766 other) : this() {
      laneType_ = other.laneType_;
      quality_ = other.quality_;
      modelDegree_ = other.modelDegree_;
      position_ = other.position_;
      curvature_ = other.curvature_;
      curvatureDerivative_ = other.curvatureDerivative_;
      widthLeftMarking_ = other.widthLeftMarking_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lka_766 Clone() {
      return new Lka_766(this);
    }

    /// <summary>Field number for the "lane_type" field.</summary>
    public const int LaneTypeFieldNumber = 1;
    private int laneType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneType {
      get { return laneType_; }
      set {
        laneType_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "model_degree" field.</summary>
    public const int ModelDegreeFieldNumber = 3;
    private int modelDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelDegree {
      get { return modelDegree_; }
      set {
        modelDegree_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private double position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "curvature" field.</summary>
    public const int CurvatureFieldNumber = 5;
    private double curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Curvature {
      get { return curvature_; }
      set {
        curvature_ = value;
      }
    }

    /// <summary>Field number for the "curvature_derivative" field.</summary>
    public const int CurvatureDerivativeFieldNumber = 6;
    private double curvatureDerivative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurvatureDerivative {
      get { return curvatureDerivative_; }
      set {
        curvatureDerivative_ = value;
      }
    }

    /// <summary>Field number for the "width_left_marking" field.</summary>
    public const int WidthLeftMarkingFieldNumber = 7;
    private double widthLeftMarking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WidthLeftMarking {
      get { return widthLeftMarking_; }
      set {
        widthLeftMarking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lka_766);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lka_766 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneType != other.LaneType) return false;
      if (Quality != other.Quality) return false;
      if (ModelDegree != other.ModelDegree) return false;
      if (Position != other.Position) return false;
      if (Curvature != other.Curvature) return false;
      if (CurvatureDerivative != other.CurvatureDerivative) return false;
      if (WidthLeftMarking != other.WidthLeftMarking) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneType != 0) hash ^= LaneType.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (ModelDegree != 0) hash ^= ModelDegree.GetHashCode();
      if (Position != 0D) hash ^= Position.GetHashCode();
      if (Curvature != 0D) hash ^= Curvature.GetHashCode();
      if (CurvatureDerivative != 0D) hash ^= CurvatureDerivative.GetHashCode();
      if (WidthLeftMarking != 0D) hash ^= WidthLeftMarking.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneType);
      }
      if (Quality != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quality);
      }
      if (ModelDegree != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelDegree);
      }
      if (Position != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Position);
      }
      if (Curvature != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Curvature);
      }
      if (CurvatureDerivative != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CurvatureDerivative);
      }
      if (WidthLeftMarking != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WidthLeftMarking);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneType);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (ModelDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelDegree);
      }
      if (Position != 0D) {
        size += 1 + 8;
      }
      if (Curvature != 0D) {
        size += 1 + 8;
      }
      if (CurvatureDerivative != 0D) {
        size += 1 + 8;
      }
      if (WidthLeftMarking != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lka_766 other) {
      if (other == null) {
        return;
      }
      if (other.LaneType != 0) {
        LaneType = other.LaneType;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.ModelDegree != 0) {
        ModelDegree = other.ModelDegree;
      }
      if (other.Position != 0D) {
        Position = other.Position;
      }
      if (other.Curvature != 0D) {
        Curvature = other.Curvature;
      }
      if (other.CurvatureDerivative != 0D) {
        CurvatureDerivative = other.CurvatureDerivative;
      }
      if (other.WidthLeftMarking != 0D) {
        WidthLeftMarking = other.WidthLeftMarking;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LaneType = input.ReadInt32();
            break;
          }
          case 16: {
            Quality = input.ReadInt32();
            break;
          }
          case 24: {
            ModelDegree = input.ReadInt32();
            break;
          }
          case 33: {
            Position = input.ReadDouble();
            break;
          }
          case 41: {
            Curvature = input.ReadDouble();
            break;
          }
          case 49: {
            CurvatureDerivative = input.ReadDouble();
            break;
          }
          case 57: {
            WidthLeftMarking = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Next_76d : pb::IMessage<Next_76d> {
    private static readonly pb::MessageParser<Next_76d> _parser = new pb::MessageParser<Next_76d>(() => new Next_76d());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Next_76d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next_76d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next_76d(Next_76d other) : this() {
      headingAngle_ = other.headingAngle_;
      viewRange_ = other.viewRange_;
      viewRangeAvailability_ = other.viewRangeAvailability_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next_76d Clone() {
      return new Next_76d(this);
    }

    /// <summary>Field number for the "heading_angle" field.</summary>
    public const int HeadingAngleFieldNumber = 1;
    private double headingAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingAngle {
      get { return headingAngle_; }
      set {
        headingAngle_ = value;
      }
    }

    /// <summary>Field number for the "view_range" field.</summary>
    public const int ViewRangeFieldNumber = 2;
    private double viewRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ViewRange {
      get { return viewRange_; }
      set {
        viewRange_ = value;
      }
    }

    /// <summary>Field number for the "view_range_availability" field.</summary>
    public const int ViewRangeAvailabilityFieldNumber = 3;
    private bool viewRangeAvailability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ViewRangeAvailability {
      get { return viewRangeAvailability_; }
      set {
        viewRangeAvailability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Next_76d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Next_76d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadingAngle != other.HeadingAngle) return false;
      if (ViewRange != other.ViewRange) return false;
      if (ViewRangeAvailability != other.ViewRangeAvailability) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadingAngle != 0D) hash ^= HeadingAngle.GetHashCode();
      if (ViewRange != 0D) hash ^= ViewRange.GetHashCode();
      if (ViewRangeAvailability != false) hash ^= ViewRangeAvailability.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadingAngle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(HeadingAngle);
      }
      if (ViewRange != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ViewRange);
      }
      if (ViewRangeAvailability != false) {
        output.WriteRawTag(24);
        output.WriteBool(ViewRangeAvailability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadingAngle != 0D) {
        size += 1 + 8;
      }
      if (ViewRange != 0D) {
        size += 1 + 8;
      }
      if (ViewRangeAvailability != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Next_76d other) {
      if (other == null) {
        return;
      }
      if (other.HeadingAngle != 0D) {
        HeadingAngle = other.HeadingAngle;
      }
      if (other.ViewRange != 0D) {
        ViewRange = other.ViewRange;
      }
      if (other.ViewRangeAvailability != false) {
        ViewRangeAvailability = other.ViewRangeAvailability;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            HeadingAngle = input.ReadDouble();
            break;
          }
          case 17: {
            ViewRange = input.ReadDouble();
            break;
          }
          case 24: {
            ViewRangeAvailability = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Details_739 : pb::IMessage<Details_739> {
    private static readonly pb::MessageParser<Details_739> _parser = new pb::MessageParser<Details_739>(() => new Details_739());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details_739> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_739() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_739(Details_739 other) : this() {
      obstacleId_ = other.obstacleId_;
      obstaclePosX_ = other.obstaclePosX_;
      reseved2_ = other.reseved2_;
      obstaclePosY_ = other.obstaclePosY_;
      blinkerInfo_ = other.blinkerInfo_;
      cutInAndOut_ = other.cutInAndOut_;
      obstacleRelVelX_ = other.obstacleRelVelX_;
      obstacleType_ = other.obstacleType_;
      reserved3_ = other.reserved3_;
      obstacleStatus_ = other.obstacleStatus_;
      obstacleBrakeLights_ = other.obstacleBrakeLights_;
      reserved4_ = other.reserved4_;
      obstacleValid_ = other.obstacleValid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_739 Clone() {
      return new Details_739(this);
    }

    /// <summary>Field number for the "obstacle_id" field.</summary>
    public const int ObstacleIdFieldNumber = 1;
    private int obstacleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleId {
      get { return obstacleId_; }
      set {
        obstacleId_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_pos_x" field.</summary>
    public const int ObstaclePosXFieldNumber = 2;
    private double obstaclePosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstaclePosX {
      get { return obstaclePosX_; }
      set {
        obstaclePosX_ = value;
      }
    }

    /// <summary>Field number for the "reseved_2" field.</summary>
    public const int Reseved2FieldNumber = 3;
    private int reseved2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reseved2 {
      get { return reseved2_; }
      set {
        reseved2_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_pos_y" field.</summary>
    public const int ObstaclePosYFieldNumber = 4;
    private double obstaclePosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstaclePosY {
      get { return obstaclePosY_; }
      set {
        obstaclePosY_ = value;
      }
    }

    /// <summary>Field number for the "blinker_info" field.</summary>
    public const int BlinkerInfoFieldNumber = 5;
    private int blinkerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlinkerInfo {
      get { return blinkerInfo_; }
      set {
        blinkerInfo_ = value;
      }
    }

    /// <summary>Field number for the "cut_in_and_out" field.</summary>
    public const int CutInAndOutFieldNumber = 6;
    private int cutInAndOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CutInAndOut {
      get { return cutInAndOut_; }
      set {
        cutInAndOut_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_rel_vel_x" field.</summary>
    public const int ObstacleRelVelXFieldNumber = 7;
    private double obstacleRelVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleRelVelX {
      get { return obstacleRelVelX_; }
      set {
        obstacleRelVelX_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_type" field.</summary>
    public const int ObstacleTypeFieldNumber = 8;
    private int obstacleType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleType {
      get { return obstacleType_; }
      set {
        obstacleType_ = value;
      }
    }

    /// <summary>Field number for the "reserved_3" field.</summary>
    public const int Reserved3FieldNumber = 9;
    private bool reserved3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reserved3 {
      get { return reserved3_; }
      set {
        reserved3_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_status" field.</summary>
    public const int ObstacleStatusFieldNumber = 10;
    private int obstacleStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleStatus {
      get { return obstacleStatus_; }
      set {
        obstacleStatus_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_brake_lights" field.</summary>
    public const int ObstacleBrakeLightsFieldNumber = 11;
    private bool obstacleBrakeLights_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ObstacleBrakeLights {
      get { return obstacleBrakeLights_; }
      set {
        obstacleBrakeLights_ = value;
      }
    }

    /// <summary>Field number for the "reserved_4" field.</summary>
    public const int Reserved4FieldNumber = 12;
    private int reserved4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reserved4 {
      get { return reserved4_; }
      set {
        reserved4_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_valid" field.</summary>
    public const int ObstacleValidFieldNumber = 13;
    private int obstacleValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleValid {
      get { return obstacleValid_; }
      set {
        obstacleValid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details_739);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details_739 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObstacleId != other.ObstacleId) return false;
      if (ObstaclePosX != other.ObstaclePosX) return false;
      if (Reseved2 != other.Reseved2) return false;
      if (ObstaclePosY != other.ObstaclePosY) return false;
      if (BlinkerInfo != other.BlinkerInfo) return false;
      if (CutInAndOut != other.CutInAndOut) return false;
      if (ObstacleRelVelX != other.ObstacleRelVelX) return false;
      if (ObstacleType != other.ObstacleType) return false;
      if (Reserved3 != other.Reserved3) return false;
      if (ObstacleStatus != other.ObstacleStatus) return false;
      if (ObstacleBrakeLights != other.ObstacleBrakeLights) return false;
      if (Reserved4 != other.Reserved4) return false;
      if (ObstacleValid != other.ObstacleValid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObstacleId != 0) hash ^= ObstacleId.GetHashCode();
      if (ObstaclePosX != 0D) hash ^= ObstaclePosX.GetHashCode();
      if (Reseved2 != 0) hash ^= Reseved2.GetHashCode();
      if (ObstaclePosY != 0D) hash ^= ObstaclePosY.GetHashCode();
      if (BlinkerInfo != 0) hash ^= BlinkerInfo.GetHashCode();
      if (CutInAndOut != 0) hash ^= CutInAndOut.GetHashCode();
      if (ObstacleRelVelX != 0D) hash ^= ObstacleRelVelX.GetHashCode();
      if (ObstacleType != 0) hash ^= ObstacleType.GetHashCode();
      if (Reserved3 != false) hash ^= Reserved3.GetHashCode();
      if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
      if (ObstacleBrakeLights != false) hash ^= ObstacleBrakeLights.GetHashCode();
      if (Reserved4 != 0) hash ^= Reserved4.GetHashCode();
      if (ObstacleValid != 0) hash ^= ObstacleValid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObstacleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ObstacleId);
      }
      if (ObstaclePosX != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ObstaclePosX);
      }
      if (Reseved2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reseved2);
      }
      if (ObstaclePosY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ObstaclePosY);
      }
      if (BlinkerInfo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlinkerInfo);
      }
      if (CutInAndOut != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CutInAndOut);
      }
      if (ObstacleRelVelX != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ObstacleRelVelX);
      }
      if (ObstacleType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ObstacleType);
      }
      if (Reserved3 != false) {
        output.WriteRawTag(72);
        output.WriteBool(Reserved3);
      }
      if (ObstacleStatus != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ObstacleStatus);
      }
      if (ObstacleBrakeLights != false) {
        output.WriteRawTag(88);
        output.WriteBool(ObstacleBrakeLights);
      }
      if (Reserved4 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Reserved4);
      }
      if (ObstacleValid != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ObstacleValid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObstacleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleId);
      }
      if (ObstaclePosX != 0D) {
        size += 1 + 8;
      }
      if (Reseved2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reseved2);
      }
      if (ObstaclePosY != 0D) {
        size += 1 + 8;
      }
      if (BlinkerInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlinkerInfo);
      }
      if (CutInAndOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutInAndOut);
      }
      if (ObstacleRelVelX != 0D) {
        size += 1 + 8;
      }
      if (ObstacleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleType);
      }
      if (Reserved3 != false) {
        size += 1 + 1;
      }
      if (ObstacleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleStatus);
      }
      if (ObstacleBrakeLights != false) {
        size += 1 + 1;
      }
      if (Reserved4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reserved4);
      }
      if (ObstacleValid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleValid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details_739 other) {
      if (other == null) {
        return;
      }
      if (other.ObstacleId != 0) {
        ObstacleId = other.ObstacleId;
      }
      if (other.ObstaclePosX != 0D) {
        ObstaclePosX = other.ObstaclePosX;
      }
      if (other.Reseved2 != 0) {
        Reseved2 = other.Reseved2;
      }
      if (other.ObstaclePosY != 0D) {
        ObstaclePosY = other.ObstaclePosY;
      }
      if (other.BlinkerInfo != 0) {
        BlinkerInfo = other.BlinkerInfo;
      }
      if (other.CutInAndOut != 0) {
        CutInAndOut = other.CutInAndOut;
      }
      if (other.ObstacleRelVelX != 0D) {
        ObstacleRelVelX = other.ObstacleRelVelX;
      }
      if (other.ObstacleType != 0) {
        ObstacleType = other.ObstacleType;
      }
      if (other.Reserved3 != false) {
        Reserved3 = other.Reserved3;
      }
      if (other.ObstacleStatus != 0) {
        ObstacleStatus = other.ObstacleStatus;
      }
      if (other.ObstacleBrakeLights != false) {
        ObstacleBrakeLights = other.ObstacleBrakeLights;
      }
      if (other.Reserved4 != 0) {
        Reserved4 = other.Reserved4;
      }
      if (other.ObstacleValid != 0) {
        ObstacleValid = other.ObstacleValid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObstacleId = input.ReadInt32();
            break;
          }
          case 17: {
            ObstaclePosX = input.ReadDouble();
            break;
          }
          case 24: {
            Reseved2 = input.ReadInt32();
            break;
          }
          case 33: {
            ObstaclePosY = input.ReadDouble();
            break;
          }
          case 40: {
            BlinkerInfo = input.ReadInt32();
            break;
          }
          case 48: {
            CutInAndOut = input.ReadInt32();
            break;
          }
          case 57: {
            ObstacleRelVelX = input.ReadDouble();
            break;
          }
          case 64: {
            ObstacleType = input.ReadInt32();
            break;
          }
          case 72: {
            Reserved3 = input.ReadBool();
            break;
          }
          case 80: {
            ObstacleStatus = input.ReadInt32();
            break;
          }
          case 88: {
            ObstacleBrakeLights = input.ReadBool();
            break;
          }
          case 96: {
            Reserved4 = input.ReadInt32();
            break;
          }
          case 104: {
            ObstacleValid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Details_73a : pb::IMessage<Details_73a> {
    private static readonly pb::MessageParser<Details_73a> _parser = new pb::MessageParser<Details_73a>(() => new Details_73a());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details_73a> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_73a() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_73a(Details_73a other) : this() {
      obstacleLength_ = other.obstacleLength_;
      obstacleWidth_ = other.obstacleWidth_;
      obstacleAge_ = other.obstacleAge_;
      obstacleLane_ = other.obstacleLane_;
      cipvFlag_ = other.cipvFlag_;
      reserved5_ = other.reserved5_;
      radarPosX_ = other.radarPosX_;
      radarVelX_ = other.radarVelX_;
      radarMatchConfidence_ = other.radarMatchConfidence_;
      reserved6_ = other.reserved6_;
      matchedRadarId_ = other.matchedRadarId_;
      reserved7_ = other.reserved7_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_73a Clone() {
      return new Details_73a(this);
    }

    /// <summary>Field number for the "obstacle_length" field.</summary>
    public const int ObstacleLengthFieldNumber = 1;
    private double obstacleLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleLength {
      get { return obstacleLength_; }
      set {
        obstacleLength_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_width" field.</summary>
    public const int ObstacleWidthFieldNumber = 2;
    private double obstacleWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleWidth {
      get { return obstacleWidth_; }
      set {
        obstacleWidth_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_age" field.</summary>
    public const int ObstacleAgeFieldNumber = 3;
    private int obstacleAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleAge {
      get { return obstacleAge_; }
      set {
        obstacleAge_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_lane" field.</summary>
    public const int ObstacleLaneFieldNumber = 4;
    private int obstacleLane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstacleLane {
      get { return obstacleLane_; }
      set {
        obstacleLane_ = value;
      }
    }

    /// <summary>Field number for the "cipv_flag" field.</summary>
    public const int CipvFlagFieldNumber = 5;
    private bool cipvFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CipvFlag {
      get { return cipvFlag_; }
      set {
        cipvFlag_ = value;
      }
    }

    /// <summary>Field number for the "reserved_5" field.</summary>
    public const int Reserved5FieldNumber = 6;
    private bool reserved5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reserved5 {
      get { return reserved5_; }
      set {
        reserved5_ = value;
      }
    }

    /// <summary>Field number for the "radar_pos_x" field.</summary>
    public const int RadarPosXFieldNumber = 7;
    private double radarPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RadarPosX {
      get { return radarPosX_; }
      set {
        radarPosX_ = value;
      }
    }

    /// <summary>Field number for the "radar_vel_x" field.</summary>
    public const int RadarVelXFieldNumber = 8;
    private double radarVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RadarVelX {
      get { return radarVelX_; }
      set {
        radarVelX_ = value;
      }
    }

    /// <summary>Field number for the "radar_match_confidence" field.</summary>
    public const int RadarMatchConfidenceFieldNumber = 9;
    private int radarMatchConfidence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RadarMatchConfidence {
      get { return radarMatchConfidence_; }
      set {
        radarMatchConfidence_ = value;
      }
    }

    /// <summary>Field number for the "reserved_6" field.</summary>
    public const int Reserved6FieldNumber = 10;
    private bool reserved6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reserved6 {
      get { return reserved6_; }
      set {
        reserved6_ = value;
      }
    }

    /// <summary>Field number for the "matched_radar_id" field.</summary>
    public const int MatchedRadarIdFieldNumber = 11;
    private int matchedRadarId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchedRadarId {
      get { return matchedRadarId_; }
      set {
        matchedRadarId_ = value;
      }
    }

    /// <summary>Field number for the "reserved_7" field.</summary>
    public const int Reserved7FieldNumber = 12;
    private bool reserved7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reserved7 {
      get { return reserved7_; }
      set {
        reserved7_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details_73a);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details_73a other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObstacleLength != other.ObstacleLength) return false;
      if (ObstacleWidth != other.ObstacleWidth) return false;
      if (ObstacleAge != other.ObstacleAge) return false;
      if (ObstacleLane != other.ObstacleLane) return false;
      if (CipvFlag != other.CipvFlag) return false;
      if (Reserved5 != other.Reserved5) return false;
      if (RadarPosX != other.RadarPosX) return false;
      if (RadarVelX != other.RadarVelX) return false;
      if (RadarMatchConfidence != other.RadarMatchConfidence) return false;
      if (Reserved6 != other.Reserved6) return false;
      if (MatchedRadarId != other.MatchedRadarId) return false;
      if (Reserved7 != other.Reserved7) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObstacleLength != 0D) hash ^= ObstacleLength.GetHashCode();
      if (ObstacleWidth != 0D) hash ^= ObstacleWidth.GetHashCode();
      if (ObstacleAge != 0) hash ^= ObstacleAge.GetHashCode();
      if (ObstacleLane != 0) hash ^= ObstacleLane.GetHashCode();
      if (CipvFlag != false) hash ^= CipvFlag.GetHashCode();
      if (Reserved5 != false) hash ^= Reserved5.GetHashCode();
      if (RadarPosX != 0D) hash ^= RadarPosX.GetHashCode();
      if (RadarVelX != 0D) hash ^= RadarVelX.GetHashCode();
      if (RadarMatchConfidence != 0) hash ^= RadarMatchConfidence.GetHashCode();
      if (Reserved6 != false) hash ^= Reserved6.GetHashCode();
      if (MatchedRadarId != 0) hash ^= MatchedRadarId.GetHashCode();
      if (Reserved7 != false) hash ^= Reserved7.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObstacleLength != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ObstacleLength);
      }
      if (ObstacleWidth != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ObstacleWidth);
      }
      if (ObstacleAge != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ObstacleAge);
      }
      if (ObstacleLane != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ObstacleLane);
      }
      if (CipvFlag != false) {
        output.WriteRawTag(40);
        output.WriteBool(CipvFlag);
      }
      if (Reserved5 != false) {
        output.WriteRawTag(48);
        output.WriteBool(Reserved5);
      }
      if (RadarPosX != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RadarPosX);
      }
      if (RadarVelX != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(RadarVelX);
      }
      if (RadarMatchConfidence != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RadarMatchConfidence);
      }
      if (Reserved6 != false) {
        output.WriteRawTag(80);
        output.WriteBool(Reserved6);
      }
      if (MatchedRadarId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MatchedRadarId);
      }
      if (Reserved7 != false) {
        output.WriteRawTag(96);
        output.WriteBool(Reserved7);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObstacleLength != 0D) {
        size += 1 + 8;
      }
      if (ObstacleWidth != 0D) {
        size += 1 + 8;
      }
      if (ObstacleAge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleAge);
      }
      if (ObstacleLane != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstacleLane);
      }
      if (CipvFlag != false) {
        size += 1 + 1;
      }
      if (Reserved5 != false) {
        size += 1 + 1;
      }
      if (RadarPosX != 0D) {
        size += 1 + 8;
      }
      if (RadarVelX != 0D) {
        size += 1 + 8;
      }
      if (RadarMatchConfidence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RadarMatchConfidence);
      }
      if (Reserved6 != false) {
        size += 1 + 1;
      }
      if (MatchedRadarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchedRadarId);
      }
      if (Reserved7 != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details_73a other) {
      if (other == null) {
        return;
      }
      if (other.ObstacleLength != 0D) {
        ObstacleLength = other.ObstacleLength;
      }
      if (other.ObstacleWidth != 0D) {
        ObstacleWidth = other.ObstacleWidth;
      }
      if (other.ObstacleAge != 0) {
        ObstacleAge = other.ObstacleAge;
      }
      if (other.ObstacleLane != 0) {
        ObstacleLane = other.ObstacleLane;
      }
      if (other.CipvFlag != false) {
        CipvFlag = other.CipvFlag;
      }
      if (other.Reserved5 != false) {
        Reserved5 = other.Reserved5;
      }
      if (other.RadarPosX != 0D) {
        RadarPosX = other.RadarPosX;
      }
      if (other.RadarVelX != 0D) {
        RadarVelX = other.RadarVelX;
      }
      if (other.RadarMatchConfidence != 0) {
        RadarMatchConfidence = other.RadarMatchConfidence;
      }
      if (other.Reserved6 != false) {
        Reserved6 = other.Reserved6;
      }
      if (other.MatchedRadarId != 0) {
        MatchedRadarId = other.MatchedRadarId;
      }
      if (other.Reserved7 != false) {
        Reserved7 = other.Reserved7;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ObstacleLength = input.ReadDouble();
            break;
          }
          case 17: {
            ObstacleWidth = input.ReadDouble();
            break;
          }
          case 24: {
            ObstacleAge = input.ReadInt32();
            break;
          }
          case 32: {
            ObstacleLane = input.ReadInt32();
            break;
          }
          case 40: {
            CipvFlag = input.ReadBool();
            break;
          }
          case 48: {
            Reserved5 = input.ReadBool();
            break;
          }
          case 57: {
            RadarPosX = input.ReadDouble();
            break;
          }
          case 65: {
            RadarVelX = input.ReadDouble();
            break;
          }
          case 72: {
            RadarMatchConfidence = input.ReadInt32();
            break;
          }
          case 80: {
            Reserved6 = input.ReadBool();
            break;
          }
          case 88: {
            MatchedRadarId = input.ReadInt32();
            break;
          }
          case 96: {
            Reserved7 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Details_73b : pb::IMessage<Details_73b> {
    private static readonly pb::MessageParser<Details_73b> _parser = new pb::MessageParser<Details_73b>(() => new Details_73b());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details_73b> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_73b() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_73b(Details_73b other) : this() {
      obstacleAngleRate_ = other.obstacleAngleRate_;
      obstacleScaleChange_ = other.obstacleScaleChange_;
      objectAccelX_ = other.objectAccelX_;
      reserved8_ = other.reserved8_;
      obstacleReplaced_ = other.obstacleReplaced_;
      reserved9_ = other.reserved9_;
      obstacleAngle_ = other.obstacleAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details_73b Clone() {
      return new Details_73b(this);
    }

    /// <summary>Field number for the "obstacle_angle_rate" field.</summary>
    public const int ObstacleAngleRateFieldNumber = 1;
    private double obstacleAngleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleAngleRate {
      get { return obstacleAngleRate_; }
      set {
        obstacleAngleRate_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_scale_change" field.</summary>
    public const int ObstacleScaleChangeFieldNumber = 2;
    private double obstacleScaleChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleScaleChange {
      get { return obstacleScaleChange_; }
      set {
        obstacleScaleChange_ = value;
      }
    }

    /// <summary>Field number for the "object_accel_x" field.</summary>
    public const int ObjectAccelXFieldNumber = 3;
    private double objectAccelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObjectAccelX {
      get { return objectAccelX_; }
      set {
        objectAccelX_ = value;
      }
    }

    /// <summary>Field number for the "reserved_8" field.</summary>
    public const int Reserved8FieldNumber = 4;
    private int reserved8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reserved8 {
      get { return reserved8_; }
      set {
        reserved8_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_replaced" field.</summary>
    public const int ObstacleReplacedFieldNumber = 5;
    private bool obstacleReplaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ObstacleReplaced {
      get { return obstacleReplaced_; }
      set {
        obstacleReplaced_ = value;
      }
    }

    /// <summary>Field number for the "reserved_9" field.</summary>
    public const int Reserved9FieldNumber = 6;
    private int reserved9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reserved9 {
      get { return reserved9_; }
      set {
        reserved9_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_angle" field.</summary>
    public const int ObstacleAngleFieldNumber = 7;
    private double obstacleAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleAngle {
      get { return obstacleAngle_; }
      set {
        obstacleAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details_73b);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details_73b other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObstacleAngleRate != other.ObstacleAngleRate) return false;
      if (ObstacleScaleChange != other.ObstacleScaleChange) return false;
      if (ObjectAccelX != other.ObjectAccelX) return false;
      if (Reserved8 != other.Reserved8) return false;
      if (ObstacleReplaced != other.ObstacleReplaced) return false;
      if (Reserved9 != other.Reserved9) return false;
      if (ObstacleAngle != other.ObstacleAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObstacleAngleRate != 0D) hash ^= ObstacleAngleRate.GetHashCode();
      if (ObstacleScaleChange != 0D) hash ^= ObstacleScaleChange.GetHashCode();
      if (ObjectAccelX != 0D) hash ^= ObjectAccelX.GetHashCode();
      if (Reserved8 != 0) hash ^= Reserved8.GetHashCode();
      if (ObstacleReplaced != false) hash ^= ObstacleReplaced.GetHashCode();
      if (Reserved9 != 0) hash ^= Reserved9.GetHashCode();
      if (ObstacleAngle != 0D) hash ^= ObstacleAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObstacleAngleRate != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ObstacleAngleRate);
      }
      if (ObstacleScaleChange != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ObstacleScaleChange);
      }
      if (ObjectAccelX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ObjectAccelX);
      }
      if (Reserved8 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Reserved8);
      }
      if (ObstacleReplaced != false) {
        output.WriteRawTag(40);
        output.WriteBool(ObstacleReplaced);
      }
      if (Reserved9 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Reserved9);
      }
      if (ObstacleAngle != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ObstacleAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObstacleAngleRate != 0D) {
        size += 1 + 8;
      }
      if (ObstacleScaleChange != 0D) {
        size += 1 + 8;
      }
      if (ObjectAccelX != 0D) {
        size += 1 + 8;
      }
      if (Reserved8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reserved8);
      }
      if (ObstacleReplaced != false) {
        size += 1 + 1;
      }
      if (Reserved9 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reserved9);
      }
      if (ObstacleAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details_73b other) {
      if (other == null) {
        return;
      }
      if (other.ObstacleAngleRate != 0D) {
        ObstacleAngleRate = other.ObstacleAngleRate;
      }
      if (other.ObstacleScaleChange != 0D) {
        ObstacleScaleChange = other.ObstacleScaleChange;
      }
      if (other.ObjectAccelX != 0D) {
        ObjectAccelX = other.ObjectAccelX;
      }
      if (other.Reserved8 != 0) {
        Reserved8 = other.Reserved8;
      }
      if (other.ObstacleReplaced != false) {
        ObstacleReplaced = other.ObstacleReplaced;
      }
      if (other.Reserved9 != 0) {
        Reserved9 = other.Reserved9;
      }
      if (other.ObstacleAngle != 0D) {
        ObstacleAngle = other.ObstacleAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ObstacleAngleRate = input.ReadDouble();
            break;
          }
          case 17: {
            ObstacleScaleChange = input.ReadDouble();
            break;
          }
          case 25: {
            ObjectAccelX = input.ReadDouble();
            break;
          }
          case 32: {
            Reserved8 = input.ReadInt32();
            break;
          }
          case 40: {
            ObstacleReplaced = input.ReadBool();
            break;
          }
          case 48: {
            Reserved9 = input.ReadInt32();
            break;
          }
          case 57: {
            ObstacleAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mobileye : pb::IMessage<Mobileye> {
    private static readonly pb::MessageParser<Mobileye> _parser = new pb::MessageParser<Mobileye>(() => new Mobileye());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mobileye> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.MobileyeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mobileye() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mobileye(Mobileye other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      Aftermarket669 = other.aftermarket669_ != null ? other.Aftermarket669.Clone() : null;
      Details737 = other.details737_ != null ? other.Details737.Clone() : null;
      Details738 = other.details738_ != null ? other.Details738.Clone() : null;
      details739_ = other.details739_.Clone();
      details73A_ = other.details73A_.Clone();
      details73B_ = other.details73B_.Clone();
      Lka766 = other.lka766_ != null ? other.Lka766.Clone() : null;
      Lka767 = other.lka767_ != null ? other.Lka767.Clone() : null;
      Lka768 = other.lka768_ != null ? other.Lka768.Clone() : null;
      Lka769 = other.lka769_ != null ? other.Lka769.Clone() : null;
      Reference76A = other.reference76A_ != null ? other.Reference76A.Clone() : null;
      Num76B = other.num76B_ != null ? other.Num76B.Clone() : null;
      next76C_ = other.next76C_.Clone();
      next76D_ = other.next76D_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mobileye Clone() {
      return new Mobileye(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "aftermarket_669" field.</summary>
    public const int Aftermarket669FieldNumber = 2;
    private global::Apollo.Drivers.Aftermarket_669 aftermarket669_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Aftermarket_669 Aftermarket669 {
      get { return aftermarket669_; }
      set {
        aftermarket669_ = value;
      }
    }

    /// <summary>Field number for the "details_737" field.</summary>
    public const int Details737FieldNumber = 3;
    private global::Apollo.Drivers.Details_737 details737_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Details_737 Details737 {
      get { return details737_; }
      set {
        details737_ = value;
      }
    }

    /// <summary>Field number for the "details_738" field.</summary>
    public const int Details738FieldNumber = 4;
    private global::Apollo.Drivers.Details_738 details738_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Details_738 Details738 {
      get { return details738_; }
      set {
        details738_ = value;
      }
    }

    /// <summary>Field number for the "details_739" field.</summary>
    public const int Details739FieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Details_739> _repeated_details739_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Drivers.Details_739.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Details_739> details739_ = new pbc::RepeatedField<global::Apollo.Drivers.Details_739>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Details_739> Details739 {
      get { return details739_; }
    }

    /// <summary>Field number for the "details_73a" field.</summary>
    public const int Details73AFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Details_73a> _repeated_details73A_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Drivers.Details_73a.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Details_73a> details73A_ = new pbc::RepeatedField<global::Apollo.Drivers.Details_73a>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Details_73a> Details73A {
      get { return details73A_; }
    }

    /// <summary>Field number for the "details_73b" field.</summary>
    public const int Details73BFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Details_73b> _repeated_details73B_codec
        = pb::FieldCodec.ForMessage(58, global::Apollo.Drivers.Details_73b.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Details_73b> details73B_ = new pbc::RepeatedField<global::Apollo.Drivers.Details_73b>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Details_73b> Details73B {
      get { return details73B_; }
    }

    /// <summary>Field number for the "lka_766" field.</summary>
    public const int Lka766FieldNumber = 8;
    private global::Apollo.Drivers.Lka_766 lka766_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Lka_766 Lka766 {
      get { return lka766_; }
      set {
        lka766_ = value;
      }
    }

    /// <summary>Field number for the "lka_767" field.</summary>
    public const int Lka767FieldNumber = 9;
    private global::Apollo.Drivers.Lka_767 lka767_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Lka_767 Lka767 {
      get { return lka767_; }
      set {
        lka767_ = value;
      }
    }

    /// <summary>Field number for the "lka_768" field.</summary>
    public const int Lka768FieldNumber = 10;
    private global::Apollo.Drivers.Lka_768 lka768_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Lka_768 Lka768 {
      get { return lka768_; }
      set {
        lka768_ = value;
      }
    }

    /// <summary>Field number for the "lka_769" field.</summary>
    public const int Lka769FieldNumber = 11;
    private global::Apollo.Drivers.Lka_769 lka769_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Lka_769 Lka769 {
      get { return lka769_; }
      set {
        lka769_ = value;
      }
    }

    /// <summary>Field number for the "reference_76a" field.</summary>
    public const int Reference76AFieldNumber = 12;
    private global::Apollo.Drivers.Reference_76a reference76A_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Reference_76a Reference76A {
      get { return reference76A_; }
      set {
        reference76A_ = value;
      }
    }

    /// <summary>Field number for the "num_76b" field.</summary>
    public const int Num76BFieldNumber = 13;
    private global::Apollo.Drivers.Num_76b num76B_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Num_76b Num76B {
      get { return num76B_; }
      set {
        num76B_ = value;
      }
    }

    /// <summary>Field number for the "next_76c" field.</summary>
    public const int Next76CFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Next_76c> _repeated_next76C_codec
        = pb::FieldCodec.ForMessage(114, global::Apollo.Drivers.Next_76c.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Next_76c> next76C_ = new pbc::RepeatedField<global::Apollo.Drivers.Next_76c>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Next_76c> Next76C {
      get { return next76C_; }
    }

    /// <summary>Field number for the "next_76d" field.</summary>
    public const int Next76DFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Next_76d> _repeated_next76D_codec
        = pb::FieldCodec.ForMessage(122, global::Apollo.Drivers.Next_76d.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Next_76d> next76D_ = new pbc::RepeatedField<global::Apollo.Drivers.Next_76d>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Next_76d> Next76D {
      get { return next76D_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mobileye);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mobileye other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Aftermarket669, other.Aftermarket669)) return false;
      if (!object.Equals(Details737, other.Details737)) return false;
      if (!object.Equals(Details738, other.Details738)) return false;
      if(!details739_.Equals(other.details739_)) return false;
      if(!details73A_.Equals(other.details73A_)) return false;
      if(!details73B_.Equals(other.details73B_)) return false;
      if (!object.Equals(Lka766, other.Lka766)) return false;
      if (!object.Equals(Lka767, other.Lka767)) return false;
      if (!object.Equals(Lka768, other.Lka768)) return false;
      if (!object.Equals(Lka769, other.Lka769)) return false;
      if (!object.Equals(Reference76A, other.Reference76A)) return false;
      if (!object.Equals(Num76B, other.Num76B)) return false;
      if(!next76C_.Equals(other.next76C_)) return false;
      if(!next76D_.Equals(other.next76D_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (aftermarket669_ != null) hash ^= Aftermarket669.GetHashCode();
      if (details737_ != null) hash ^= Details737.GetHashCode();
      if (details738_ != null) hash ^= Details738.GetHashCode();
      hash ^= details739_.GetHashCode();
      hash ^= details73A_.GetHashCode();
      hash ^= details73B_.GetHashCode();
      if (lka766_ != null) hash ^= Lka766.GetHashCode();
      if (lka767_ != null) hash ^= Lka767.GetHashCode();
      if (lka768_ != null) hash ^= Lka768.GetHashCode();
      if (lka769_ != null) hash ^= Lka769.GetHashCode();
      if (reference76A_ != null) hash ^= Reference76A.GetHashCode();
      if (num76B_ != null) hash ^= Num76B.GetHashCode();
      hash ^= next76C_.GetHashCode();
      hash ^= next76D_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (aftermarket669_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Aftermarket669);
      }
      if (details737_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Details737);
      }
      if (details738_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Details738);
      }
      details739_.WriteTo(output, _repeated_details739_codec);
      details73A_.WriteTo(output, _repeated_details73A_codec);
      details73B_.WriteTo(output, _repeated_details73B_codec);
      if (lka766_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Lka766);
      }
      if (lka767_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Lka767);
      }
      if (lka768_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Lka768);
      }
      if (lka769_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Lka769);
      }
      if (reference76A_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Reference76A);
      }
      if (num76B_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Num76B);
      }
      next76C_.WriteTo(output, _repeated_next76C_codec);
      next76D_.WriteTo(output, _repeated_next76D_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (aftermarket669_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aftermarket669);
      }
      if (details737_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details737);
      }
      if (details738_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details738);
      }
      size += details739_.CalculateSize(_repeated_details739_codec);
      size += details73A_.CalculateSize(_repeated_details73A_codec);
      size += details73B_.CalculateSize(_repeated_details73B_codec);
      if (lka766_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lka766);
      }
      if (lka767_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lka767);
      }
      if (lka768_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lka768);
      }
      if (lka769_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lka769);
      }
      if (reference76A_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reference76A);
      }
      if (num76B_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Num76B);
      }
      size += next76C_.CalculateSize(_repeated_next76C_codec);
      size += next76D_.CalculateSize(_repeated_next76D_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mobileye other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.aftermarket669_ != null) {
        if (aftermarket669_ == null) {
          aftermarket669_ = new global::Apollo.Drivers.Aftermarket_669();
        }
        Aftermarket669.MergeFrom(other.Aftermarket669);
      }
      if (other.details737_ != null) {
        if (details737_ == null) {
          details737_ = new global::Apollo.Drivers.Details_737();
        }
        Details737.MergeFrom(other.Details737);
      }
      if (other.details738_ != null) {
        if (details738_ == null) {
          details738_ = new global::Apollo.Drivers.Details_738();
        }
        Details738.MergeFrom(other.Details738);
      }
      details739_.Add(other.details739_);
      details73A_.Add(other.details73A_);
      details73B_.Add(other.details73B_);
      if (other.lka766_ != null) {
        if (lka766_ == null) {
          lka766_ = new global::Apollo.Drivers.Lka_766();
        }
        Lka766.MergeFrom(other.Lka766);
      }
      if (other.lka767_ != null) {
        if (lka767_ == null) {
          lka767_ = new global::Apollo.Drivers.Lka_767();
        }
        Lka767.MergeFrom(other.Lka767);
      }
      if (other.lka768_ != null) {
        if (lka768_ == null) {
          lka768_ = new global::Apollo.Drivers.Lka_768();
        }
        Lka768.MergeFrom(other.Lka768);
      }
      if (other.lka769_ != null) {
        if (lka769_ == null) {
          lka769_ = new global::Apollo.Drivers.Lka_769();
        }
        Lka769.MergeFrom(other.Lka769);
      }
      if (other.reference76A_ != null) {
        if (reference76A_ == null) {
          reference76A_ = new global::Apollo.Drivers.Reference_76a();
        }
        Reference76A.MergeFrom(other.Reference76A);
      }
      if (other.num76B_ != null) {
        if (num76B_ == null) {
          num76B_ = new global::Apollo.Drivers.Num_76b();
        }
        Num76B.MergeFrom(other.Num76B);
      }
      next76C_.Add(other.next76C_);
      next76D_.Add(other.next76D_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (aftermarket669_ == null) {
              aftermarket669_ = new global::Apollo.Drivers.Aftermarket_669();
            }
            input.ReadMessage(aftermarket669_);
            break;
          }
          case 26: {
            if (details737_ == null) {
              details737_ = new global::Apollo.Drivers.Details_737();
            }
            input.ReadMessage(details737_);
            break;
          }
          case 34: {
            if (details738_ == null) {
              details738_ = new global::Apollo.Drivers.Details_738();
            }
            input.ReadMessage(details738_);
            break;
          }
          case 42: {
            details739_.AddEntriesFrom(input, _repeated_details739_codec);
            break;
          }
          case 50: {
            details73A_.AddEntriesFrom(input, _repeated_details73A_codec);
            break;
          }
          case 58: {
            details73B_.AddEntriesFrom(input, _repeated_details73B_codec);
            break;
          }
          case 66: {
            if (lka766_ == null) {
              lka766_ = new global::Apollo.Drivers.Lka_766();
            }
            input.ReadMessage(lka766_);
            break;
          }
          case 74: {
            if (lka767_ == null) {
              lka767_ = new global::Apollo.Drivers.Lka_767();
            }
            input.ReadMessage(lka767_);
            break;
          }
          case 82: {
            if (lka768_ == null) {
              lka768_ = new global::Apollo.Drivers.Lka_768();
            }
            input.ReadMessage(lka768_);
            break;
          }
          case 90: {
            if (lka769_ == null) {
              lka769_ = new global::Apollo.Drivers.Lka_769();
            }
            input.ReadMessage(lka769_);
            break;
          }
          case 98: {
            if (reference76A_ == null) {
              reference76A_ = new global::Apollo.Drivers.Reference_76a();
            }
            input.ReadMessage(reference76A_);
            break;
          }
          case 106: {
            if (num76B_ == null) {
              num76B_ = new global::Apollo.Drivers.Num_76b();
            }
            input.ReadMessage(num76B_);
            break;
          }
          case 114: {
            next76C_.AddEntriesFrom(input, _repeated_next76C_codec);
            break;
          }
          case 122: {
            next76D_.AddEntriesFrom(input, _repeated_next76D_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
