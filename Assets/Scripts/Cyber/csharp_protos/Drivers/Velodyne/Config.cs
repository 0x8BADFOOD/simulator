// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/velodyne/proto/config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Velodyne {

  /// <summary>Holder for reflection information generated from modules/drivers/velodyne/proto/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/velodyne/proto/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cittb2R1bGVzL2RyaXZlcnMvdmVsb2R5bmUvcHJvdG8vY29uZmlnLnByb3Rv",
            "EhdhcG9sbG8uZHJpdmVycy52ZWxvZHluZRotbW9kdWxlcy9kcml2ZXJzL3Zl",
            "bG9keW5lL3Byb3RvL3ZlbG9keW5lLnByb3RvIsQECgZDb25maWcSEAoIZnJh",
            "bWVfaWQYASABKAkSFAoMc2Nhbl9jaGFubmVsGAIgASgJEgsKA3JwbRgDIAEo",
            "ARItCgVtb2RlbBgEIAEoDjIeLmFwb2xsby5kcml2ZXJzLnZlbG9keW5lLk1v",
            "ZGVsEisKBG1vZGUYFSABKA4yHS5hcG9sbG8uZHJpdmVycy52ZWxvZHluZS5N",
            "b2RlEgwKBHBjYXAYBSABKAkSFAoMcHJlZml4X2FuZ2xlGAYgASgFEhgKEGZp",
            "cmluZ19kYXRhX3BvcnQYByABKAUSHQoVcG9zaXRpb25pbmdfZGF0YV9wb3J0",
            "GAggASgFEhcKD3VzZV9zZW5zb3Jfc3luYxgJIAEoCBIRCgltYXhfcmFuZ2UY",
            "CiABKAESEQoJbWluX3JhbmdlGAsgASgBEhEKCW1heF9hbmdsZRgMIAEoARIR",
            "CgltaW5fYW5nbGUYDSABKAESFgoOdmlld19kaXJlY3Rpb24YDiABKAESEgoK",
            "dmlld193aWR0aBgPIAEoARIaChJjYWxpYnJhdGlvbl9vbmxpbmUYECABKAgS",
            "GAoQY2FsaWJyYXRpb25fZmlsZRgRIAEoCRIRCglvcmdhbml6ZWQYEiABKAgS",
            "HAoUY29udmVydF9jaGFubmVsX25hbWUYEyABKAkSEAoIbnBhY2tldHMYFCAB",
            "KAUSFAoMdXNlX2dwc190aW1lGBcgASgIEhUKDXVzZV9wb2xsX3N5bmMYGCAB",
            "KAgSFQoNaXNfbWFpbl9mcmFtZRgZIAEoCCKGAQoMRnVzaW9uQ29uZmlnEhcK",
            "D21heF9pbnRlcnZhbF9tcxgBIAEoDRIZChFkcm9wX2V4cGlyZWRfZGF0YRgC",
            "IAEoCBIWCg5mdXNpb25fY2hhbm5lbBgDIAEoCRIVCg1pbnB1dF9jaGFubmVs",
            "GAQgAygJEhMKC3dhaXRfdGltZV9zGAUgASgCIpcBChFDb21wZW5zYXRvckNv",
            "bmZpZxIWCg5vdXRwdXRfY2hhbm5lbBgBIAEoCRIfChd0cmFuc2Zvcm1fcXVl",
            "cnlfdGltZW91dBgCIAEoAhIWCg53b3JsZF9mcmFtZV9pZBgDIAEoCRIXCg90",
            "YXJnZXRfZnJhbWVfaWQYBCABKAkSGAoQcG9pbnRfY2xvdWRfc2l6ZRgFIAEo",
            "DWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Drivers.Velodyne.VelodyneReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Velodyne.Config), global::Apollo.Drivers.Velodyne.Config.Parser, new[]{ "FrameId", "ScanChannel", "Rpm", "Model", "Mode", "Pcap", "PrefixAngle", "FiringDataPort", "PositioningDataPort", "UseSensorSync", "MaxRange", "MinRange", "MaxAngle", "MinAngle", "ViewDirection", "ViewWidth", "CalibrationOnline", "CalibrationFile", "Organized", "ConvertChannelName", "Npackets", "UseGpsTime", "UsePollSync", "IsMainFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Velodyne.FusionConfig), global::Apollo.Drivers.Velodyne.FusionConfig.Parser, new[]{ "MaxIntervalMs", "DropExpiredData", "FusionChannel", "InputChannel", "WaitTimeS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Velodyne.CompensatorConfig), global::Apollo.Drivers.Velodyne.CompensatorConfig.Parser, new[]{ "OutputChannel", "TransformQueryTimeout", "WorldFrameId", "TargetFrameId", "PointCloudSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Velodyne.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      frameId_ = other.frameId_;
      scanChannel_ = other.scanChannel_;
      rpm_ = other.rpm_;
      model_ = other.model_;
      mode_ = other.mode_;
      pcap_ = other.pcap_;
      prefixAngle_ = other.prefixAngle_;
      firingDataPort_ = other.firingDataPort_;
      positioningDataPort_ = other.positioningDataPort_;
      useSensorSync_ = other.useSensorSync_;
      maxRange_ = other.maxRange_;
      minRange_ = other.minRange_;
      maxAngle_ = other.maxAngle_;
      minAngle_ = other.minAngle_;
      viewDirection_ = other.viewDirection_;
      viewWidth_ = other.viewWidth_;
      calibrationOnline_ = other.calibrationOnline_;
      calibrationFile_ = other.calibrationFile_;
      organized_ = other.organized_;
      convertChannelName_ = other.convertChannelName_;
      npackets_ = other.npackets_;
      useGpsTime_ = other.useGpsTime_;
      usePollSync_ = other.usePollSync_;
      isMainFrame_ = other.isMainFrame_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private string frameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameId {
      get { return frameId_; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scan_channel" field.</summary>
    public const int ScanChannelFieldNumber = 2;
    private string scanChannel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanChannel {
      get { return scanChannel_; }
      set {
        scanChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rpm" field.</summary>
    public const int RpmFieldNumber = 3;
    private double rpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rpm {
      get { return rpm_; }
      set {
        rpm_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 4;
    private global::Apollo.Drivers.Velodyne.Model model_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Velodyne.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 21;
    private global::Apollo.Drivers.Velodyne.Mode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Velodyne.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "pcap" field.</summary>
    public const int PcapFieldNumber = 5;
    private string pcap_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pcap {
      get { return pcap_; }
      set {
        pcap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefix_angle" field.</summary>
    public const int PrefixAngleFieldNumber = 6;
    private int prefixAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrefixAngle {
      get { return prefixAngle_; }
      set {
        prefixAngle_ = value;
      }
    }

    /// <summary>Field number for the "firing_data_port" field.</summary>
    public const int FiringDataPortFieldNumber = 7;
    private int firingDataPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FiringDataPort {
      get { return firingDataPort_; }
      set {
        firingDataPort_ = value;
      }
    }

    /// <summary>Field number for the "positioning_data_port" field.</summary>
    public const int PositioningDataPortFieldNumber = 8;
    private int positioningDataPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositioningDataPort {
      get { return positioningDataPort_; }
      set {
        positioningDataPort_ = value;
      }
    }

    /// <summary>Field number for the "use_sensor_sync" field.</summary>
    public const int UseSensorSyncFieldNumber = 9;
    private bool useSensorSync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSensorSync {
      get { return useSensorSync_; }
      set {
        useSensorSync_ = value;
      }
    }

    /// <summary>Field number for the "max_range" field.</summary>
    public const int MaxRangeFieldNumber = 10;
    private double maxRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxRange {
      get { return maxRange_; }
      set {
        maxRange_ = value;
      }
    }

    /// <summary>Field number for the "min_range" field.</summary>
    public const int MinRangeFieldNumber = 11;
    private double minRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinRange {
      get { return minRange_; }
      set {
        minRange_ = value;
      }
    }

    /// <summary>Field number for the "max_angle" field.</summary>
    public const int MaxAngleFieldNumber = 12;
    private double maxAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAngle {
      get { return maxAngle_; }
      set {
        maxAngle_ = value;
      }
    }

    /// <summary>Field number for the "min_angle" field.</summary>
    public const int MinAngleFieldNumber = 13;
    private double minAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinAngle {
      get { return minAngle_; }
      set {
        minAngle_ = value;
      }
    }

    /// <summary>Field number for the "view_direction" field.</summary>
    public const int ViewDirectionFieldNumber = 14;
    private double viewDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ViewDirection {
      get { return viewDirection_; }
      set {
        viewDirection_ = value;
      }
    }

    /// <summary>Field number for the "view_width" field.</summary>
    public const int ViewWidthFieldNumber = 15;
    private double viewWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ViewWidth {
      get { return viewWidth_; }
      set {
        viewWidth_ = value;
      }
    }

    /// <summary>Field number for the "calibration_online" field.</summary>
    public const int CalibrationOnlineFieldNumber = 16;
    private bool calibrationOnline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CalibrationOnline {
      get { return calibrationOnline_; }
      set {
        calibrationOnline_ = value;
      }
    }

    /// <summary>Field number for the "calibration_file" field.</summary>
    public const int CalibrationFileFieldNumber = 17;
    private string calibrationFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalibrationFile {
      get { return calibrationFile_; }
      set {
        calibrationFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "organized" field.</summary>
    public const int OrganizedFieldNumber = 18;
    private bool organized_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Organized {
      get { return organized_; }
      set {
        organized_ = value;
      }
    }

    /// <summary>Field number for the "convert_channel_name" field.</summary>
    public const int ConvertChannelNameFieldNumber = 19;
    private string convertChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConvertChannelName {
      get { return convertChannelName_; }
      set {
        convertChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "npackets" field.</summary>
    public const int NpacketsFieldNumber = 20;
    private int npackets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Npackets {
      get { return npackets_; }
      set {
        npackets_ = value;
      }
    }

    /// <summary>Field number for the "use_gps_time" field.</summary>
    public const int UseGpsTimeFieldNumber = 23;
    private bool useGpsTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGpsTime {
      get { return useGpsTime_; }
      set {
        useGpsTime_ = value;
      }
    }

    /// <summary>Field number for the "use_poll_sync" field.</summary>
    public const int UsePollSyncFieldNumber = 24;
    private bool usePollSync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePollSync {
      get { return usePollSync_; }
      set {
        usePollSync_ = value;
      }
    }

    /// <summary>Field number for the "is_main_frame" field.</summary>
    public const int IsMainFrameFieldNumber = 25;
    private bool isMainFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMainFrame {
      get { return isMainFrame_; }
      set {
        isMainFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameId != other.FrameId) return false;
      if (ScanChannel != other.ScanChannel) return false;
      if (Rpm != other.Rpm) return false;
      if (Model != other.Model) return false;
      if (Mode != other.Mode) return false;
      if (Pcap != other.Pcap) return false;
      if (PrefixAngle != other.PrefixAngle) return false;
      if (FiringDataPort != other.FiringDataPort) return false;
      if (PositioningDataPort != other.PositioningDataPort) return false;
      if (UseSensorSync != other.UseSensorSync) return false;
      if (MaxRange != other.MaxRange) return false;
      if (MinRange != other.MinRange) return false;
      if (MaxAngle != other.MaxAngle) return false;
      if (MinAngle != other.MinAngle) return false;
      if (ViewDirection != other.ViewDirection) return false;
      if (ViewWidth != other.ViewWidth) return false;
      if (CalibrationOnline != other.CalibrationOnline) return false;
      if (CalibrationFile != other.CalibrationFile) return false;
      if (Organized != other.Organized) return false;
      if (ConvertChannelName != other.ConvertChannelName) return false;
      if (Npackets != other.Npackets) return false;
      if (UseGpsTime != other.UseGpsTime) return false;
      if (UsePollSync != other.UsePollSync) return false;
      if (IsMainFrame != other.IsMainFrame) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameId.Length != 0) hash ^= FrameId.GetHashCode();
      if (ScanChannel.Length != 0) hash ^= ScanChannel.GetHashCode();
      if (Rpm != 0D) hash ^= Rpm.GetHashCode();
      if (Model != 0) hash ^= Model.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Pcap.Length != 0) hash ^= Pcap.GetHashCode();
      if (PrefixAngle != 0) hash ^= PrefixAngle.GetHashCode();
      if (FiringDataPort != 0) hash ^= FiringDataPort.GetHashCode();
      if (PositioningDataPort != 0) hash ^= PositioningDataPort.GetHashCode();
      if (UseSensorSync != false) hash ^= UseSensorSync.GetHashCode();
      if (MaxRange != 0D) hash ^= MaxRange.GetHashCode();
      if (MinRange != 0D) hash ^= MinRange.GetHashCode();
      if (MaxAngle != 0D) hash ^= MaxAngle.GetHashCode();
      if (MinAngle != 0D) hash ^= MinAngle.GetHashCode();
      if (ViewDirection != 0D) hash ^= ViewDirection.GetHashCode();
      if (ViewWidth != 0D) hash ^= ViewWidth.GetHashCode();
      if (CalibrationOnline != false) hash ^= CalibrationOnline.GetHashCode();
      if (CalibrationFile.Length != 0) hash ^= CalibrationFile.GetHashCode();
      if (Organized != false) hash ^= Organized.GetHashCode();
      if (ConvertChannelName.Length != 0) hash ^= ConvertChannelName.GetHashCode();
      if (Npackets != 0) hash ^= Npackets.GetHashCode();
      if (UseGpsTime != false) hash ^= UseGpsTime.GetHashCode();
      if (UsePollSync != false) hash ^= UsePollSync.GetHashCode();
      if (IsMainFrame != false) hash ^= IsMainFrame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FrameId);
      }
      if (ScanChannel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ScanChannel);
      }
      if (Rpm != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Rpm);
      }
      if (Model != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Model);
      }
      if (Pcap.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Pcap);
      }
      if (PrefixAngle != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PrefixAngle);
      }
      if (FiringDataPort != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FiringDataPort);
      }
      if (PositioningDataPort != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PositioningDataPort);
      }
      if (UseSensorSync != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseSensorSync);
      }
      if (MaxRange != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MaxRange);
      }
      if (MinRange != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MinRange);
      }
      if (MaxAngle != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(MaxAngle);
      }
      if (MinAngle != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(MinAngle);
      }
      if (ViewDirection != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(ViewDirection);
      }
      if (ViewWidth != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(ViewWidth);
      }
      if (CalibrationOnline != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(CalibrationOnline);
      }
      if (CalibrationFile.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CalibrationFile);
      }
      if (Organized != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Organized);
      }
      if (ConvertChannelName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ConvertChannelName);
      }
      if (Npackets != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Npackets);
      }
      if (Mode != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Mode);
      }
      if (UseGpsTime != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(UseGpsTime);
      }
      if (UsePollSync != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(UsePollSync);
      }
      if (IsMainFrame != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsMainFrame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (ScanChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanChannel);
      }
      if (Rpm != 0D) {
        size += 1 + 8;
      }
      if (Model != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Model);
      }
      if (Mode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Pcap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pcap);
      }
      if (PrefixAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrefixAngle);
      }
      if (FiringDataPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FiringDataPort);
      }
      if (PositioningDataPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositioningDataPort);
      }
      if (UseSensorSync != false) {
        size += 1 + 1;
      }
      if (MaxRange != 0D) {
        size += 1 + 8;
      }
      if (MinRange != 0D) {
        size += 1 + 8;
      }
      if (MaxAngle != 0D) {
        size += 1 + 8;
      }
      if (MinAngle != 0D) {
        size += 1 + 8;
      }
      if (ViewDirection != 0D) {
        size += 1 + 8;
      }
      if (ViewWidth != 0D) {
        size += 1 + 8;
      }
      if (CalibrationOnline != false) {
        size += 2 + 1;
      }
      if (CalibrationFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalibrationFile);
      }
      if (Organized != false) {
        size += 2 + 1;
      }
      if (ConvertChannelName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConvertChannelName);
      }
      if (Npackets != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Npackets);
      }
      if (UseGpsTime != false) {
        size += 2 + 1;
      }
      if (UsePollSync != false) {
        size += 2 + 1;
      }
      if (IsMainFrame != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.FrameId.Length != 0) {
        FrameId = other.FrameId;
      }
      if (other.ScanChannel.Length != 0) {
        ScanChannel = other.ScanChannel;
      }
      if (other.Rpm != 0D) {
        Rpm = other.Rpm;
      }
      if (other.Model != 0) {
        Model = other.Model;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Pcap.Length != 0) {
        Pcap = other.Pcap;
      }
      if (other.PrefixAngle != 0) {
        PrefixAngle = other.PrefixAngle;
      }
      if (other.FiringDataPort != 0) {
        FiringDataPort = other.FiringDataPort;
      }
      if (other.PositioningDataPort != 0) {
        PositioningDataPort = other.PositioningDataPort;
      }
      if (other.UseSensorSync != false) {
        UseSensorSync = other.UseSensorSync;
      }
      if (other.MaxRange != 0D) {
        MaxRange = other.MaxRange;
      }
      if (other.MinRange != 0D) {
        MinRange = other.MinRange;
      }
      if (other.MaxAngle != 0D) {
        MaxAngle = other.MaxAngle;
      }
      if (other.MinAngle != 0D) {
        MinAngle = other.MinAngle;
      }
      if (other.ViewDirection != 0D) {
        ViewDirection = other.ViewDirection;
      }
      if (other.ViewWidth != 0D) {
        ViewWidth = other.ViewWidth;
      }
      if (other.CalibrationOnline != false) {
        CalibrationOnline = other.CalibrationOnline;
      }
      if (other.CalibrationFile.Length != 0) {
        CalibrationFile = other.CalibrationFile;
      }
      if (other.Organized != false) {
        Organized = other.Organized;
      }
      if (other.ConvertChannelName.Length != 0) {
        ConvertChannelName = other.ConvertChannelName;
      }
      if (other.Npackets != 0) {
        Npackets = other.Npackets;
      }
      if (other.UseGpsTime != false) {
        UseGpsTime = other.UseGpsTime;
      }
      if (other.UsePollSync != false) {
        UsePollSync = other.UsePollSync;
      }
      if (other.IsMainFrame != false) {
        IsMainFrame = other.IsMainFrame;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FrameId = input.ReadString();
            break;
          }
          case 18: {
            ScanChannel = input.ReadString();
            break;
          }
          case 25: {
            Rpm = input.ReadDouble();
            break;
          }
          case 32: {
            model_ = (global::Apollo.Drivers.Velodyne.Model) input.ReadEnum();
            break;
          }
          case 42: {
            Pcap = input.ReadString();
            break;
          }
          case 48: {
            PrefixAngle = input.ReadInt32();
            break;
          }
          case 56: {
            FiringDataPort = input.ReadInt32();
            break;
          }
          case 64: {
            PositioningDataPort = input.ReadInt32();
            break;
          }
          case 72: {
            UseSensorSync = input.ReadBool();
            break;
          }
          case 81: {
            MaxRange = input.ReadDouble();
            break;
          }
          case 89: {
            MinRange = input.ReadDouble();
            break;
          }
          case 97: {
            MaxAngle = input.ReadDouble();
            break;
          }
          case 105: {
            MinAngle = input.ReadDouble();
            break;
          }
          case 113: {
            ViewDirection = input.ReadDouble();
            break;
          }
          case 121: {
            ViewWidth = input.ReadDouble();
            break;
          }
          case 128: {
            CalibrationOnline = input.ReadBool();
            break;
          }
          case 138: {
            CalibrationFile = input.ReadString();
            break;
          }
          case 144: {
            Organized = input.ReadBool();
            break;
          }
          case 154: {
            ConvertChannelName = input.ReadString();
            break;
          }
          case 160: {
            Npackets = input.ReadInt32();
            break;
          }
          case 168: {
            mode_ = (global::Apollo.Drivers.Velodyne.Mode) input.ReadEnum();
            break;
          }
          case 184: {
            UseGpsTime = input.ReadBool();
            break;
          }
          case 192: {
            UsePollSync = input.ReadBool();
            break;
          }
          case 200: {
            IsMainFrame = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FusionConfig : pb::IMessage<FusionConfig> {
    private static readonly pb::MessageParser<FusionConfig> _parser = new pb::MessageParser<FusionConfig>(() => new FusionConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FusionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Velodyne.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionConfig(FusionConfig other) : this() {
      maxIntervalMs_ = other.maxIntervalMs_;
      dropExpiredData_ = other.dropExpiredData_;
      fusionChannel_ = other.fusionChannel_;
      inputChannel_ = other.inputChannel_.Clone();
      waitTimeS_ = other.waitTimeS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionConfig Clone() {
      return new FusionConfig(this);
    }

    /// <summary>Field number for the "max_interval_ms" field.</summary>
    public const int MaxIntervalMsFieldNumber = 1;
    private uint maxIntervalMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxIntervalMs {
      get { return maxIntervalMs_; }
      set {
        maxIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "drop_expired_data" field.</summary>
    public const int DropExpiredDataFieldNumber = 2;
    private bool dropExpiredData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DropExpiredData {
      get { return dropExpiredData_; }
      set {
        dropExpiredData_ = value;
      }
    }

    /// <summary>Field number for the "fusion_channel" field.</summary>
    public const int FusionChannelFieldNumber = 3;
    private string fusionChannel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FusionChannel {
      get { return fusionChannel_; }
      set {
        fusionChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_channel" field.</summary>
    public const int InputChannelFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_inputChannel_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> inputChannel_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InputChannel {
      get { return inputChannel_; }
    }

    /// <summary>Field number for the "wait_time_s" field.</summary>
    public const int WaitTimeSFieldNumber = 5;
    private float waitTimeS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WaitTimeS {
      get { return waitTimeS_; }
      set {
        waitTimeS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FusionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FusionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxIntervalMs != other.MaxIntervalMs) return false;
      if (DropExpiredData != other.DropExpiredData) return false;
      if (FusionChannel != other.FusionChannel) return false;
      if(!inputChannel_.Equals(other.inputChannel_)) return false;
      if (WaitTimeS != other.WaitTimeS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxIntervalMs != 0) hash ^= MaxIntervalMs.GetHashCode();
      if (DropExpiredData != false) hash ^= DropExpiredData.GetHashCode();
      if (FusionChannel.Length != 0) hash ^= FusionChannel.GetHashCode();
      hash ^= inputChannel_.GetHashCode();
      if (WaitTimeS != 0F) hash ^= WaitTimeS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxIntervalMs != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxIntervalMs);
      }
      if (DropExpiredData != false) {
        output.WriteRawTag(16);
        output.WriteBool(DropExpiredData);
      }
      if (FusionChannel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FusionChannel);
      }
      inputChannel_.WriteTo(output, _repeated_inputChannel_codec);
      if (WaitTimeS != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(WaitTimeS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxIntervalMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxIntervalMs);
      }
      if (DropExpiredData != false) {
        size += 1 + 1;
      }
      if (FusionChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FusionChannel);
      }
      size += inputChannel_.CalculateSize(_repeated_inputChannel_codec);
      if (WaitTimeS != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FusionConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxIntervalMs != 0) {
        MaxIntervalMs = other.MaxIntervalMs;
      }
      if (other.DropExpiredData != false) {
        DropExpiredData = other.DropExpiredData;
      }
      if (other.FusionChannel.Length != 0) {
        FusionChannel = other.FusionChannel;
      }
      inputChannel_.Add(other.inputChannel_);
      if (other.WaitTimeS != 0F) {
        WaitTimeS = other.WaitTimeS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxIntervalMs = input.ReadUInt32();
            break;
          }
          case 16: {
            DropExpiredData = input.ReadBool();
            break;
          }
          case 26: {
            FusionChannel = input.ReadString();
            break;
          }
          case 34: {
            inputChannel_.AddEntriesFrom(input, _repeated_inputChannel_codec);
            break;
          }
          case 45: {
            WaitTimeS = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompensatorConfig : pb::IMessage<CompensatorConfig> {
    private static readonly pb::MessageParser<CompensatorConfig> _parser = new pb::MessageParser<CompensatorConfig>(() => new CompensatorConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompensatorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Velodyne.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompensatorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompensatorConfig(CompensatorConfig other) : this() {
      outputChannel_ = other.outputChannel_;
      transformQueryTimeout_ = other.transformQueryTimeout_;
      worldFrameId_ = other.worldFrameId_;
      targetFrameId_ = other.targetFrameId_;
      pointCloudSize_ = other.pointCloudSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompensatorConfig Clone() {
      return new CompensatorConfig(this);
    }

    /// <summary>Field number for the "output_channel" field.</summary>
    public const int OutputChannelFieldNumber = 1;
    private string outputChannel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputChannel {
      get { return outputChannel_; }
      set {
        outputChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transform_query_timeout" field.</summary>
    public const int TransformQueryTimeoutFieldNumber = 2;
    private float transformQueryTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransformQueryTimeout {
      get { return transformQueryTimeout_; }
      set {
        transformQueryTimeout_ = value;
      }
    }

    /// <summary>Field number for the "world_frame_id" field.</summary>
    public const int WorldFrameIdFieldNumber = 3;
    private string worldFrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorldFrameId {
      get { return worldFrameId_; }
      set {
        worldFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_frame_id" field.</summary>
    public const int TargetFrameIdFieldNumber = 4;
    private string targetFrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetFrameId {
      get { return targetFrameId_; }
      set {
        targetFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "point_cloud_size" field.</summary>
    public const int PointCloudSizeFieldNumber = 5;
    private uint pointCloudSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointCloudSize {
      get { return pointCloudSize_; }
      set {
        pointCloudSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompensatorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompensatorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputChannel != other.OutputChannel) return false;
      if (TransformQueryTimeout != other.TransformQueryTimeout) return false;
      if (WorldFrameId != other.WorldFrameId) return false;
      if (TargetFrameId != other.TargetFrameId) return false;
      if (PointCloudSize != other.PointCloudSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputChannel.Length != 0) hash ^= OutputChannel.GetHashCode();
      if (TransformQueryTimeout != 0F) hash ^= TransformQueryTimeout.GetHashCode();
      if (WorldFrameId.Length != 0) hash ^= WorldFrameId.GetHashCode();
      if (TargetFrameId.Length != 0) hash ^= TargetFrameId.GetHashCode();
      if (PointCloudSize != 0) hash ^= PointCloudSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputChannel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OutputChannel);
      }
      if (TransformQueryTimeout != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TransformQueryTimeout);
      }
      if (WorldFrameId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WorldFrameId);
      }
      if (TargetFrameId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TargetFrameId);
      }
      if (PointCloudSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PointCloudSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputChannel);
      }
      if (TransformQueryTimeout != 0F) {
        size += 1 + 4;
      }
      if (WorldFrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorldFrameId);
      }
      if (TargetFrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetFrameId);
      }
      if (PointCloudSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointCloudSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompensatorConfig other) {
      if (other == null) {
        return;
      }
      if (other.OutputChannel.Length != 0) {
        OutputChannel = other.OutputChannel;
      }
      if (other.TransformQueryTimeout != 0F) {
        TransformQueryTimeout = other.TransformQueryTimeout;
      }
      if (other.WorldFrameId.Length != 0) {
        WorldFrameId = other.WorldFrameId;
      }
      if (other.TargetFrameId.Length != 0) {
        TargetFrameId = other.TargetFrameId;
      }
      if (other.PointCloudSize != 0) {
        PointCloudSize = other.PointCloudSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OutputChannel = input.ReadString();
            break;
          }
          case 21: {
            TransformQueryTimeout = input.ReadFloat();
            break;
          }
          case 26: {
            WorldFrameId = input.ReadString();
            break;
          }
          case 34: {
            TargetFrameId = input.ReadString();
            break;
          }
          case 40: {
            PointCloudSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
