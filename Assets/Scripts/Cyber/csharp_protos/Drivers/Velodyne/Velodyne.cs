// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/velodyne/proto/velodyne.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers.Velodyne {

  /// <summary>Holder for reflection information generated from modules/drivers/velodyne/proto/velodyne.proto</summary>
  public static partial class VelodyneReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/velodyne/proto/velodyne.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VelodyneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1tb2R1bGVzL2RyaXZlcnMvdmVsb2R5bmUvcHJvdG8vdmVsb2R5bmUucHJv",
            "dG8SF2Fwb2xsby5kcml2ZXJzLnZlbG9keW5lGiFtb2R1bGVzL2NvbW1vbi9w",
            "cm90by9oZWFkZXIucHJvdG8iLQoOVmVsb2R5bmVQYWNrZXQSDQoFc3RhbXAY",
            "ASABKAQSDAoEZGF0YRgCIAEoDCKwAgoMVmVsb2R5bmVTY2FuEiUKBmhlYWRl",
            "chgBIAEoCzIVLmFwb2xsby5jb21tb24uSGVhZGVyEi0KBW1vZGVsGAIgASgO",
            "Mh4uYXBvbGxvLmRyaXZlcnMudmVsb2R5bmUuTW9kZWwSKwoEbW9kZRgDIAEo",
            "DjIdLmFwb2xsby5kcml2ZXJzLnZlbG9keW5lLk1vZGUSPAoLZmlyaW5nX3Br",
            "dHMYBCADKAsyJy5hcG9sbG8uZHJpdmVycy52ZWxvZHluZS5WZWxvZHluZVBh",
            "Y2tldBJBChBwb3NpdGlvbmluZ19wa3RzGAUgAygLMicuYXBvbGxvLmRyaXZl",
            "cnMudmVsb2R5bmUuVmVsb2R5bmVQYWNrZXQSCgoCc24YBiABKAkSEAoIYmFz",
            "ZXRpbWUYByABKAQqcQoFTW9kZWwSCgoGVU5LT1dOEAASDgoKSERMNjRFX1Mz",
            "UxABEg4KCkhETDY0RV9TM0QQAhINCglIREw2NEVfUzIQAxIKCgZIREwzMkUQ",
            "BBIJCgVWTFAxNhAFEgoKBlZMUDMyQxAGEgoKBlZMUzEyOBAHKjkKBE1vZGUS",
            "DgoKTU9ERV9EVU1NWRAAEg0KCVNUUk9OR0VTVBABEggKBExBU1QQAhIICgRE",
            "VUFMEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Drivers.Velodyne.Model), typeof(global::Apollo.Drivers.Velodyne.Mode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Velodyne.VelodynePacket), global::Apollo.Drivers.Velodyne.VelodynePacket.Parser, new[]{ "Stamp", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Velodyne.VelodyneScan), global::Apollo.Drivers.Velodyne.VelodyneScan.Parser, new[]{ "Header", "Model", "Mode", "FiringPkts", "PositioningPkts", "Sn", "Basetime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Model {
    [pbr::OriginalName("UNKOWN")] Unkown = 0,
    [pbr::OriginalName("HDL64E_S3S")] Hdl64ES3S = 1,
    [pbr::OriginalName("HDL64E_S3D")] Hdl64ES3D = 2,
    [pbr::OriginalName("HDL64E_S2")] Hdl64ES2 = 3,
    [pbr::OriginalName("HDL32E")] Hdl32E = 4,
    [pbr::OriginalName("VLP16")] Vlp16 = 5,
    [pbr::OriginalName("VLP32C")] Vlp32C = 6,
    [pbr::OriginalName("VLS128")] Vls128 = 7,
  }

  public enum Mode {
    [pbr::OriginalName("MODE_DUMMY")] Dummy = 0,
    [pbr::OriginalName("STRONGEST")] Strongest = 1,
    [pbr::OriginalName("LAST")] Last = 2,
    [pbr::OriginalName("DUAL")] Dual = 3,
  }

  #endregion

  #region Messages
  public sealed partial class VelodynePacket : pb::IMessage<VelodynePacket> {
    private static readonly pb::MessageParser<VelodynePacket> _parser = new pb::MessageParser<VelodynePacket>(() => new VelodynePacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VelodynePacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Velodyne.VelodyneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VelodynePacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VelodynePacket(VelodynePacket other) : this() {
      stamp_ = other.stamp_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VelodynePacket Clone() {
      return new VelodynePacket(this);
    }

    /// <summary>Field number for the "stamp" field.</summary>
    public const int StampFieldNumber = 1;
    private ulong stamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Stamp {
      get { return stamp_; }
      set {
        stamp_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VelodynePacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VelodynePacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stamp != other.Stamp) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stamp != 0UL) hash ^= Stamp.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Stamp);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Stamp);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VelodynePacket other) {
      if (other == null) {
        return;
      }
      if (other.Stamp != 0UL) {
        Stamp = other.Stamp;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stamp = input.ReadUInt64();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VelodyneScan : pb::IMessage<VelodyneScan> {
    private static readonly pb::MessageParser<VelodyneScan> _parser = new pb::MessageParser<VelodyneScan>(() => new VelodyneScan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VelodyneScan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.Velodyne.VelodyneReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VelodyneScan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VelodyneScan(VelodyneScan other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      model_ = other.model_;
      mode_ = other.mode_;
      firingPkts_ = other.firingPkts_.Clone();
      positioningPkts_ = other.positioningPkts_.Clone();
      sn_ = other.sn_;
      basetime_ = other.basetime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VelodyneScan Clone() {
      return new VelodyneScan(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 2;
    private global::Apollo.Drivers.Velodyne.Model model_ = 0;
    /// <summary>
    /// velodyne device model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Velodyne.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 3;
    private global::Apollo.Drivers.Velodyne.Mode mode_ = 0;
    /// <summary>
    /// velodyne work mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Velodyne.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "firing_pkts" field.</summary>
    public const int FiringPktsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Velodyne.VelodynePacket> _repeated_firingPkts_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Drivers.Velodyne.VelodynePacket.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Velodyne.VelodynePacket> firingPkts_ = new pbc::RepeatedField<global::Apollo.Drivers.Velodyne.VelodynePacket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Velodyne.VelodynePacket> FiringPkts {
      get { return firingPkts_; }
    }

    /// <summary>Field number for the "positioning_pkts" field.</summary>
    public const int PositioningPktsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.Velodyne.VelodynePacket> _repeated_positioningPkts_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Drivers.Velodyne.VelodynePacket.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.Velodyne.VelodynePacket> positioningPkts_ = new pbc::RepeatedField<global::Apollo.Drivers.Velodyne.VelodynePacket>();
    /// <summary>
    /// for HDL32 and VLP16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.Velodyne.VelodynePacket> PositioningPkts {
      get { return positioningPkts_; }
    }

    /// <summary>Field number for the "sn" field.</summary>
    public const int SnFieldNumber = 6;
    private string sn_ = "";
    /// <summary>
    /// velodyne device serial number, corresponds to a specific calibration file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sn {
      get { return sn_; }
      set {
        sn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basetime" field.</summary>
    public const int BasetimeFieldNumber = 7;
    private ulong basetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Basetime {
      get { return basetime_; }
      set {
        basetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VelodyneScan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VelodyneScan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Model != other.Model) return false;
      if (Mode != other.Mode) return false;
      if(!firingPkts_.Equals(other.firingPkts_)) return false;
      if(!positioningPkts_.Equals(other.positioningPkts_)) return false;
      if (Sn != other.Sn) return false;
      if (Basetime != other.Basetime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Model != 0) hash ^= Model.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      hash ^= firingPkts_.GetHashCode();
      hash ^= positioningPkts_.GetHashCode();
      if (Sn.Length != 0) hash ^= Sn.GetHashCode();
      if (Basetime != 0UL) hash ^= Basetime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Model != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Model);
      }
      if (Mode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Mode);
      }
      firingPkts_.WriteTo(output, _repeated_firingPkts_codec);
      positioningPkts_.WriteTo(output, _repeated_positioningPkts_codec);
      if (Sn.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Sn);
      }
      if (Basetime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Basetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Model != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Model);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      size += firingPkts_.CalculateSize(_repeated_firingPkts_codec);
      size += positioningPkts_.CalculateSize(_repeated_positioningPkts_codec);
      if (Sn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sn);
      }
      if (Basetime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Basetime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VelodyneScan other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Model != 0) {
        Model = other.Model;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      firingPkts_.Add(other.firingPkts_);
      positioningPkts_.Add(other.positioningPkts_);
      if (other.Sn.Length != 0) {
        Sn = other.Sn;
      }
      if (other.Basetime != 0UL) {
        Basetime = other.Basetime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            model_ = (global::Apollo.Drivers.Velodyne.Model) input.ReadEnum();
            break;
          }
          case 24: {
            mode_ = (global::Apollo.Drivers.Velodyne.Mode) input.ReadEnum();
            break;
          }
          case 34: {
            firingPkts_.AddEntriesFrom(input, _repeated_firingPkts_codec);
            break;
          }
          case 42: {
            positioningPkts_.AddEntriesFrom(input, _repeated_positioningPkts_codec);
            break;
          }
          case 50: {
            Sn = input.ReadString();
            break;
          }
          case 56: {
            Basetime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
