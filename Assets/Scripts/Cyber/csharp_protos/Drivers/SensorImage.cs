// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/sensor_image.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers {

  /// <summary>Holder for reflection information generated from modules/drivers/proto/sensor_image.proto</summary>
  public static partial class SensorImageReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/proto/sensor_image.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensorImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihtb2R1bGVzL2RyaXZlcnMvcHJvdG8vc2Vuc29yX2ltYWdlLnByb3RvEg5h",
            "cG9sbG8uZHJpdmVycxohbW9kdWxlcy9jb21tb24vcHJvdG8vaGVhZGVyLnBy",
            "b3RvIqcBCgVJbWFnZRIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9u",
            "LkhlYWRlchIQCghmcmFtZV9pZBgCIAEoCRIYChBtZWFzdXJlbWVudF90aW1l",
            "GAMgASgBEg4KBmhlaWdodBgEIAEoDRINCgV3aWR0aBgFIAEoDRIQCghlbmNv",
            "ZGluZxgGIAEoCRIMCgRzdGVwGAcgASgNEgwKBGRhdGEYCCABKAwiggEKD0Nv",
            "bXByZXNzZWRJbWFnZRIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9u",
            "LkhlYWRlchIQCghmcmFtZV9pZBgCIAEoCRIOCgZmb3JtYXQYAyABKAkSDAoE",
            "ZGF0YRgEIAEoDBIYChBtZWFzdXJlbWVudF90aW1lGAUgASgBKpIGCgtQaXhl",
            "bEZvcm1hdBIVChFQSVhFTEZPUk1BVF9EVU1NWRAAEgkKBFJHQjgQ6QcSCgoF",
            "UkdCQTgQ6gcSCgoFUkdCMTYQ6wcSCwoGUkdCQTE2EOwHEgkKBEJHUjgQ7QcS",
            "CgoFQkdSQTgQ7gcSCgoFQkdSMTYQ7wcSCwoGQkdSQTE2EPAHEgoKBU1PTk84",
            "EPEHEgsKBk1PTk8xNhDyBxIOCglUWVBFXzhVQzEQ0Q8SDgoJVFlQRV84VUMy",
            "ENIPEg4KCVRZUEVfOFVDMxDTDxIOCglUWVBFXzhVQzQQ1A8SDgoJVFlQRV84",
            "U0MxENUPEg4KCVRZUEVfOFNDMhDWDxIOCglUWVBFXzhTQzMQ1w8SDgoJVFlQ",
            "RV84U0M0ENgPEg8KClRZUEVfMTZVQzEQ2Q8SDwoKVFlQRV8xNlVDMhDaDxIP",
            "CgpUWVBFXzE2VUMzENsPEg8KClRZUEVfMTZVQzQQ3A8SDwoKVFlQRV8xNlND",
            "MRDdDxIPCgpUWVBFXzE2U0MyEN4PEg8KClRZUEVfMTZTQzMQ3w8SDwoKVFlQ",
            "RV8xNlNDNBDgDxIPCgpUWVBFXzMyU0MxEOEPEg8KClRZUEVfMzJTQzIQ4g8S",
            "DwoKVFlQRV8zMlNDMxDjDxIPCgpUWVBFXzMyU0M0EOQPEg8KClRZUEVfMzJG",
            "QzEQ5Q8SDwoKVFlQRV8zMkZDMhDmDxIPCgpUWVBFXzMyRkMzEOcPEg8KClRZ",
            "UEVfMzJGQzQQ6A8SDwoKVFlQRV82NEZDMRDpDxIPCgpUWVBFXzY0RkMyEOoP",
            "Eg8KClRZUEVfNjRGQzMQ6w8SDwoKVFlQRV82NEZDNBDsDxIQCgtCQVlFUl9S",
            "R0dCOBC5FxIQCgtCQVlFUl9CR0dSOBC6FxIQCgtCQVlFUl9HQlJHOBC7FxIQ",
            "CgtCQVlFUl9HUkJHOBC8FxIRCgxCQVlFUl9SR0dCMTYQvRcSEQoMQkFZRVJf",
            "QkdHUjE2EL4XEhEKDEJBWUVSX0dCUkcxNhC/FxIRCgxCQVlFUl9HUkJHMTYQ",
            "wBcSCwoGWVVWNDIyEKEfYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Drivers.PixelFormat), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.Image), global::Apollo.Drivers.Image.Parser, new[]{ "Header", "FrameId", "MeasurementTime", "Height", "Width", "Encoding", "Step", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.CompressedImage), global::Apollo.Drivers.CompressedImage.Parser, new[]{ "Header", "FrameId", "Format", "Data", "MeasurementTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Encoding of pixels -- channel meaning, ordering, size
  /// </summary>
  public enum PixelFormat {
    [pbr::OriginalName("PIXELFORMAT_DUMMY")] Dummy = 0,
    [pbr::OriginalName("RGB8")] Rgb8 = 1001,
    [pbr::OriginalName("RGBA8")] Rgba8 = 1002,
    [pbr::OriginalName("RGB16")] Rgb16 = 1003,
    [pbr::OriginalName("RGBA16")] Rgba16 = 1004,
    [pbr::OriginalName("BGR8")] Bgr8 = 1005,
    [pbr::OriginalName("BGRA8")] Bgra8 = 1006,
    [pbr::OriginalName("BGR16")] Bgr16 = 1007,
    [pbr::OriginalName("BGRA16")] Bgra16 = 1008,
    [pbr::OriginalName("MONO8")] Mono8 = 1009,
    [pbr::OriginalName("MONO16")] Mono16 = 1010,
    /// <summary>
    /// OpenCV CvMat types
    /// </summary>
    [pbr::OriginalName("TYPE_8UC1")] Type8Uc1 = 2001,
    [pbr::OriginalName("TYPE_8UC2")] Type8Uc2 = 2002,
    [pbr::OriginalName("TYPE_8UC3")] Type8Uc3 = 2003,
    [pbr::OriginalName("TYPE_8UC4")] Type8Uc4 = 2004,
    [pbr::OriginalName("TYPE_8SC1")] Type8Sc1 = 2005,
    [pbr::OriginalName("TYPE_8SC2")] Type8Sc2 = 2006,
    [pbr::OriginalName("TYPE_8SC3")] Type8Sc3 = 2007,
    [pbr::OriginalName("TYPE_8SC4")] Type8Sc4 = 2008,
    [pbr::OriginalName("TYPE_16UC1")] Type16Uc1 = 2009,
    [pbr::OriginalName("TYPE_16UC2")] Type16Uc2 = 2010,
    [pbr::OriginalName("TYPE_16UC3")] Type16Uc3 = 2011,
    [pbr::OriginalName("TYPE_16UC4")] Type16Uc4 = 2012,
    [pbr::OriginalName("TYPE_16SC1")] Type16Sc1 = 2013,
    [pbr::OriginalName("TYPE_16SC2")] Type16Sc2 = 2014,
    [pbr::OriginalName("TYPE_16SC3")] Type16Sc3 = 2015,
    [pbr::OriginalName("TYPE_16SC4")] Type16Sc4 = 2016,
    [pbr::OriginalName("TYPE_32SC1")] Type32Sc1 = 2017,
    [pbr::OriginalName("TYPE_32SC2")] Type32Sc2 = 2018,
    [pbr::OriginalName("TYPE_32SC3")] Type32Sc3 = 2019,
    [pbr::OriginalName("TYPE_32SC4")] Type32Sc4 = 2020,
    [pbr::OriginalName("TYPE_32FC1")] Type32Fc1 = 2021,
    [pbr::OriginalName("TYPE_32FC2")] Type32Fc2 = 2022,
    [pbr::OriginalName("TYPE_32FC3")] Type32Fc3 = 2023,
    [pbr::OriginalName("TYPE_32FC4")] Type32Fc4 = 2024,
    [pbr::OriginalName("TYPE_64FC1")] Type64Fc1 = 2025,
    [pbr::OriginalName("TYPE_64FC2")] Type64Fc2 = 2026,
    [pbr::OriginalName("TYPE_64FC3")] Type64Fc3 = 2027,
    [pbr::OriginalName("TYPE_64FC4")] Type64Fc4 = 2028,
    /// <summary>
    /// Bayer encodings
    /// </summary>
    [pbr::OriginalName("BAYER_RGGB8")] BayerRggb8 = 3001,
    [pbr::OriginalName("BAYER_BGGR8")] BayerBggr8 = 3002,
    [pbr::OriginalName("BAYER_GBRG8")] BayerGbrg8 = 3003,
    [pbr::OriginalName("BAYER_GRBG8")] BayerGrbg8 = 3004,
    [pbr::OriginalName("BAYER_RGGB16")] BayerRggb16 = 3005,
    [pbr::OriginalName("BAYER_BGGR16")] BayerBggr16 = 3006,
    [pbr::OriginalName("BAYER_GBRG16")] BayerGbrg16 = 3007,
    [pbr::OriginalName("BAYER_GRBG16")] BayerGrbg16 = 3008,
    /// <summary>
    /// Miscellaneous
    /// This is the UYVY version of YUV422 codec http://www.fourcc.org/yuv.php#UYVY
    /// with an 8-bit depth
    /// </summary>
    [pbr::OriginalName("YUV422")] Yuv422 = 4001,
  }

  #endregion

  #region Messages
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.SensorImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      frameId_ = other.frameId_;
      measurementTime_ = other.measurementTime_;
      height_ = other.height_;
      width_ = other.width_;
      encoding_ = other.encoding_;
      step_ = other.step_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private string frameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameId {
      get { return frameId_; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 3;
    private double measurementTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private uint height_;
    /// <summary>
    /// image height, that is, number of rows
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private uint width_;
    /// <summary>
    /// image width, that is, number of columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 6;
    private string encoding_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Encoding {
      get { return encoding_; }
      set {
        encoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 7;
    private uint step_;
    /// <summary>
    /// Full row length in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// actual matrix data, size is (step * rows)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (FrameId != other.FrameId) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (Encoding != other.Encoding) return false;
      if (Step != other.Step) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (FrameId.Length != 0) hash ^= FrameId.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Encoding.Length != 0) hash ^= Encoding.GetHashCode();
      if (Step != 0) hash ^= Step.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (FrameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameId);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MeasurementTime);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Width);
      }
      if (Encoding.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Encoding);
      }
      if (Step != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Step);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (FrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Encoding.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Encoding);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.FrameId.Length != 0) {
        FrameId = other.FrameId;
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Encoding.Length != 0) {
        Encoding = other.Encoding;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            FrameId = input.ReadString();
            break;
          }
          case 25: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 32: {
            Height = input.ReadUInt32();
            break;
          }
          case 40: {
            Width = input.ReadUInt32();
            break;
          }
          case 50: {
            Encoding = input.ReadString();
            break;
          }
          case 56: {
            Step = input.ReadUInt32();
            break;
          }
          case 66: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompressedImage : pb::IMessage<CompressedImage> {
    private static readonly pb::MessageParser<CompressedImage> _parser = new pb::MessageParser<CompressedImage>(() => new CompressedImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompressedImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.SensorImageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressedImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressedImage(CompressedImage other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      frameId_ = other.frameId_;
      format_ = other.format_;
      data_ = other.data_;
      measurementTime_ = other.measurementTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressedImage Clone() {
      return new CompressedImage(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private string frameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameId {
      get { return frameId_; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 3;
    private string format_ = "";
    /// <summary>
    /// Specifies the format of the data
    ///  Acceptable values: jpeg, png
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// Compressed image buffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 5;
    private double measurementTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompressedImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompressedImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (FrameId != other.FrameId) return false;
      if (Format != other.Format) return false;
      if (Data != other.Data) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (FrameId.Length != 0) hash ^= FrameId.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (FrameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameId);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Format);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (MeasurementTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MeasurementTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (FrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompressedImage other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.FrameId.Length != 0) {
        FrameId = other.FrameId;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            FrameId = input.ReadString();
            break;
          }
          case 26: {
            Format = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 41: {
            MeasurementTime = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
