// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/pointcloud.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Drivers {

  /// <summary>Holder for reflection information generated from modules/drivers/proto/pointcloud.proto</summary>
  public static partial class PointcloudReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/drivers/proto/pointcloud.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PointcloudReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZtb2R1bGVzL2RyaXZlcnMvcHJvdG8vcG9pbnRjbG91ZC5wcm90bxIOYXBv",
            "bGxvLmRyaXZlcnMaIW1vZHVsZXMvY29tbW9uL3Byb3RvL2hlYWRlci5wcm90",
            "byJTCgpQb2ludFhZWklUEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMg",
            "ASgCEhEKCWludGVuc2l0eRgEIAEoDRIRCgl0aW1lc3RhbXAYBSABKAQiuwEK",
            "ClBvaW50Q2xvdWQSJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNvbW1vbi5I",
            "ZWFkZXISEAoIZnJhbWVfaWQYAiABKAkSEAoIaXNfZGVuc2UYAyABKAgSKQoF",
            "cG9pbnQYBCADKAsyGi5hcG9sbG8uZHJpdmVycy5Qb2ludFhZWklUEhgKEG1l",
            "YXN1cmVtZW50X3RpbWUYBSABKAESDQoFd2lkdGgYBiABKA0SDgoGaGVpZ2h0",
            "GAcgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.PointXYZIT), global::Apollo.Drivers.PointXYZIT.Parser, new[]{ "X", "Y", "Z", "Intensity", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Drivers.PointCloud), global::Apollo.Drivers.PointCloud.Parser, new[]{ "Header", "FrameId", "IsDense", "Point", "MeasurementTime", "Width", "Height" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PointXYZIT : pb::IMessage<PointXYZIT> {
    private static readonly pb::MessageParser<PointXYZIT> _parser = new pb::MessageParser<PointXYZIT>(() => new PointXYZIT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointXYZIT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.PointcloudReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointXYZIT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointXYZIT(PointXYZIT other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      intensity_ = other.intensity_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointXYZIT Clone() {
      return new PointXYZIT(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 4;
    private uint intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointXYZIT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointXYZIT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Intensity != other.Intensity) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Intensity != 0) hash ^= Intensity.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Intensity != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Intensity);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Intensity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Intensity);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointXYZIT other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Intensity != 0) {
        Intensity = other.Intensity;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 32: {
            Intensity = input.ReadUInt32();
            break;
          }
          case 40: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointCloud : pb::IMessage<PointCloud> {
    private static readonly pb::MessageParser<PointCloud> _parser = new pb::MessageParser<PointCloud>(() => new PointCloud());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloud> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Drivers.PointcloudReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud(PointCloud other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      frameId_ = other.frameId_;
      isDense_ = other.isDense_;
      point_ = other.point_.Clone();
      measurementTime_ = other.measurementTime_;
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud Clone() {
      return new PointCloud(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private string frameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameId {
      get { return frameId_; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_dense" field.</summary>
    public const int IsDenseFieldNumber = 3;
    private bool isDense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDense {
      get { return isDense_; }
      set {
        isDense_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Drivers.PointXYZIT> _repeated_point_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Drivers.PointXYZIT.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Drivers.PointXYZIT> point_ = new pbc::RepeatedField<global::Apollo.Drivers.PointXYZIT>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Drivers.PointXYZIT> Point {
      get { return point_; }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 5;
    private double measurementTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 6;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloud);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloud other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (FrameId != other.FrameId) return false;
      if (IsDense != other.IsDense) return false;
      if(!point_.Equals(other.point_)) return false;
      if (MeasurementTime != other.MeasurementTime) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (FrameId.Length != 0) hash ^= FrameId.GetHashCode();
      if (IsDense != false) hash ^= IsDense.GetHashCode();
      hash ^= point_.GetHashCode();
      if (MeasurementTime != 0D) hash ^= MeasurementTime.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (FrameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameId);
      }
      if (IsDense != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDense);
      }
      point_.WriteTo(output, _repeated_point_codec);
      if (MeasurementTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MeasurementTime);
      }
      if (Width != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (FrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (IsDense != false) {
        size += 1 + 1;
      }
      size += point_.CalculateSize(_repeated_point_codec);
      if (MeasurementTime != 0D) {
        size += 1 + 8;
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloud other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.FrameId.Length != 0) {
        FrameId = other.FrameId;
      }
      if (other.IsDense != false) {
        IsDense = other.IsDense;
      }
      point_.Add(other.point_);
      if (other.MeasurementTime != 0D) {
        MeasurementTime = other.MeasurementTime;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            FrameId = input.ReadString();
            break;
          }
          case 24: {
            IsDense = input.ReadBool();
            break;
          }
          case 34: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
          case 41: {
            MeasurementTime = input.ReadDouble();
            break;
          }
          case 48: {
            Width = input.ReadUInt32();
            break;
          }
          case 56: {
            Height = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
