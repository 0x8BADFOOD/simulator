// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/lat_controller_conf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Control {

  /// <summary>Holder for reflection information generated from modules/control/proto/lat_controller_conf.proto</summary>
  public static partial class LatControllerConfReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/control/proto/lat_controller_conf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LatControllerConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb2R1bGVzL2NvbnRyb2wvcHJvdG8vbGF0X2NvbnRyb2xsZXJfY29uZi5w",
            "cm90bxIOYXBvbGxvLmNvbnRyb2waL21vZHVsZXMvY29udHJvbC9wcm90by9n",
            "YWluX3NjaGVkdWxlcl9jb25mLnByb3RvIr0DChFMYXRDb250cm9sbGVyQ29u",
            "ZhIKCgJ0cxgBIAEoARIWCg5wcmV2aWV3X3dpbmRvdxgCIAEoBRIKCgJjZhgD",
            "IAEoARIKCgJjchgEIAEoARIPCgdtYXNzX2ZsGAUgASgFEg8KB21hc3NfZnIY",
            "BiABKAUSDwoHbWFzc19ybBgHIAEoBRIPCgdtYXNzX3JyGAggASgFEgsKA2Vw",
            "cxgJIAEoARIQCghtYXRyaXhfcRgKIAMoARIYChByZXZlcnNlX21hdHJpeF9x",
            "GAsgAygBEhMKC2N1dG9mZl9mcmVxGAwgASgFEh8KF21lYW5fZmlsdGVyX3dp",
            "bmRvd19zaXplGA0gASgFEhUKDW1heF9pdGVyYXRpb24YDiABKAUSIAoYbWF4",
            "X2xhdGVyYWxfYWNjZWxlcmF0aW9uGA8gASgBEj0KFmxhdF9lcnJfZ2Fpbl9z",
            "Y2hlZHVsZXIYECABKAsyHS5hcG9sbG8uY29udHJvbC5HYWluU2NoZWR1bGVy",
            "EkEKGmhlYWRpbmdfZXJyX2dhaW5fc2NoZWR1bGVyGBEgASgLMh0uYXBvbGxv",
            "LmNvbnRyb2wuR2FpblNjaGVkdWxlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Control.GainSchedulerConfReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Control.LatControllerConf), global::Apollo.Control.LatControllerConf.Parser, new[]{ "Ts", "PreviewWindow", "Cf", "Cr", "MassFl", "MassFr", "MassRl", "MassRr", "Eps", "MatrixQ", "ReverseMatrixQ", "CutoffFreq", "MeanFilterWindowSize", "MaxIteration", "MaxLateralAcceleration", "LatErrGainScheduler", "HeadingErrGainScheduler" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// simple optimal steer control param
  /// </summary>
  public sealed partial class LatControllerConf : pb::IMessage<LatControllerConf> {
    private static readonly pb::MessageParser<LatControllerConf> _parser = new pb::MessageParser<LatControllerConf>(() => new LatControllerConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatControllerConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Control.LatControllerConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatControllerConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatControllerConf(LatControllerConf other) : this() {
      ts_ = other.ts_;
      previewWindow_ = other.previewWindow_;
      cf_ = other.cf_;
      cr_ = other.cr_;
      massFl_ = other.massFl_;
      massFr_ = other.massFr_;
      massRl_ = other.massRl_;
      massRr_ = other.massRr_;
      eps_ = other.eps_;
      matrixQ_ = other.matrixQ_.Clone();
      reverseMatrixQ_ = other.reverseMatrixQ_.Clone();
      cutoffFreq_ = other.cutoffFreq_;
      meanFilterWindowSize_ = other.meanFilterWindowSize_;
      maxIteration_ = other.maxIteration_;
      maxLateralAcceleration_ = other.maxLateralAcceleration_;
      LatErrGainScheduler = other.latErrGainScheduler_ != null ? other.LatErrGainScheduler.Clone() : null;
      HeadingErrGainScheduler = other.headingErrGainScheduler_ != null ? other.HeadingErrGainScheduler.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatControllerConf Clone() {
      return new LatControllerConf(this);
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 1;
    private double ts_;
    /// <summary>
    /// sample time (dt) 0.01 now, configurable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "preview_window" field.</summary>
    public const int PreviewWindowFieldNumber = 2;
    private int previewWindow_;
    /// <summary>
    /// preview window n, preview time = preview window * ts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreviewWindow {
      get { return previewWindow_; }
      set {
        previewWindow_ = value;
      }
    }

    /// <summary>Field number for the "cf" field.</summary>
    public const int CfFieldNumber = 3;
    private double cf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cf {
      get { return cf_; }
      set {
        cf_ = value;
      }
    }

    /// <summary>Field number for the "cr" field.</summary>
    public const int CrFieldNumber = 4;
    private double cr_;
    /// <summary>
    /// N/rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cr {
      get { return cr_; }
      set {
        cr_ = value;
      }
    }

    /// <summary>Field number for the "mass_fl" field.</summary>
    public const int MassFlFieldNumber = 5;
    private int massFl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MassFl {
      get { return massFl_; }
      set {
        massFl_ = value;
      }
    }

    /// <summary>Field number for the "mass_fr" field.</summary>
    public const int MassFrFieldNumber = 6;
    private int massFr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MassFr {
      get { return massFr_; }
      set {
        massFr_ = value;
      }
    }

    /// <summary>Field number for the "mass_rl" field.</summary>
    public const int MassRlFieldNumber = 7;
    private int massRl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MassRl {
      get { return massRl_; }
      set {
        massRl_ = value;
      }
    }

    /// <summary>Field number for the "mass_rr" field.</summary>
    public const int MassRrFieldNumber = 8;
    private int massRr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MassRr {
      get { return massRr_; }
      set {
        massRr_ = value;
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 9;
    private double eps_;
    /// <summary>
    /// converge threshold for lqr solver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Eps {
      get { return eps_; }
      set {
        eps_ = value;
      }
    }

    /// <summary>Field number for the "matrix_q" field.</summary>
    public const int MatrixQFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_matrixQ_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> matrixQ_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// matrix_q size = 4 + preview_window
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> MatrixQ {
      get { return matrixQ_; }
    }

    /// <summary>Field number for the "reverse_matrix_q" field.</summary>
    public const int ReverseMatrixQFieldNumber = 11;
    private static readonly pb::FieldCodec<double> _repeated_reverseMatrixQ_codec
        = pb::FieldCodec.ForDouble(90);
    private readonly pbc::RepeatedField<double> reverseMatrixQ_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// matrix_q size = 4 + preview_window for reverse gear
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ReverseMatrixQ {
      get { return reverseMatrixQ_; }
    }

    /// <summary>Field number for the "cutoff_freq" field.</summary>
    public const int CutoffFreqFieldNumber = 12;
    private int cutoffFreq_;
    /// <summary>
    /// cutoff frequency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CutoffFreq {
      get { return cutoffFreq_; }
      set {
        cutoffFreq_ = value;
      }
    }

    /// <summary>Field number for the "mean_filter_window_size" field.</summary>
    public const int MeanFilterWindowSizeFieldNumber = 13;
    private int meanFilterWindowSize_;
    /// <summary>
    /// window size of mean filter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeanFilterWindowSize {
      get { return meanFilterWindowSize_; }
      set {
        meanFilterWindowSize_ = value;
      }
    }

    /// <summary>Field number for the "max_iteration" field.</summary>
    public const int MaxIterationFieldNumber = 14;
    private int maxIteration_;
    /// <summary>
    /// for a normal car, it should be in range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxIteration {
      get { return maxIteration_; }
      set {
        maxIteration_ = value;
      }
    }

    /// <summary>Field number for the "max_lateral_acceleration" field.</summary>
    public const int MaxLateralAccelerationFieldNumber = 15;
    private double maxLateralAcceleration_;
    /// <summary>
    /// limit aggressive steering
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxLateralAcceleration {
      get { return maxLateralAcceleration_; }
      set {
        maxLateralAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "lat_err_gain_scheduler" field.</summary>
    public const int LatErrGainSchedulerFieldNumber = 16;
    private global::Apollo.Control.GainScheduler latErrGainScheduler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.GainScheduler LatErrGainScheduler {
      get { return latErrGainScheduler_; }
      set {
        latErrGainScheduler_ = value;
      }
    }

    /// <summary>Field number for the "heading_err_gain_scheduler" field.</summary>
    public const int HeadingErrGainSchedulerFieldNumber = 17;
    private global::Apollo.Control.GainScheduler headingErrGainScheduler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Control.GainScheduler HeadingErrGainScheduler {
      get { return headingErrGainScheduler_; }
      set {
        headingErrGainScheduler_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatControllerConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatControllerConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ts != other.Ts) return false;
      if (PreviewWindow != other.PreviewWindow) return false;
      if (Cf != other.Cf) return false;
      if (Cr != other.Cr) return false;
      if (MassFl != other.MassFl) return false;
      if (MassFr != other.MassFr) return false;
      if (MassRl != other.MassRl) return false;
      if (MassRr != other.MassRr) return false;
      if (Eps != other.Eps) return false;
      if(!matrixQ_.Equals(other.matrixQ_)) return false;
      if(!reverseMatrixQ_.Equals(other.reverseMatrixQ_)) return false;
      if (CutoffFreq != other.CutoffFreq) return false;
      if (MeanFilterWindowSize != other.MeanFilterWindowSize) return false;
      if (MaxIteration != other.MaxIteration) return false;
      if (MaxLateralAcceleration != other.MaxLateralAcceleration) return false;
      if (!object.Equals(LatErrGainScheduler, other.LatErrGainScheduler)) return false;
      if (!object.Equals(HeadingErrGainScheduler, other.HeadingErrGainScheduler)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ts != 0D) hash ^= Ts.GetHashCode();
      if (PreviewWindow != 0) hash ^= PreviewWindow.GetHashCode();
      if (Cf != 0D) hash ^= Cf.GetHashCode();
      if (Cr != 0D) hash ^= Cr.GetHashCode();
      if (MassFl != 0) hash ^= MassFl.GetHashCode();
      if (MassFr != 0) hash ^= MassFr.GetHashCode();
      if (MassRl != 0) hash ^= MassRl.GetHashCode();
      if (MassRr != 0) hash ^= MassRr.GetHashCode();
      if (Eps != 0D) hash ^= Eps.GetHashCode();
      hash ^= matrixQ_.GetHashCode();
      hash ^= reverseMatrixQ_.GetHashCode();
      if (CutoffFreq != 0) hash ^= CutoffFreq.GetHashCode();
      if (MeanFilterWindowSize != 0) hash ^= MeanFilterWindowSize.GetHashCode();
      if (MaxIteration != 0) hash ^= MaxIteration.GetHashCode();
      if (MaxLateralAcceleration != 0D) hash ^= MaxLateralAcceleration.GetHashCode();
      if (latErrGainScheduler_ != null) hash ^= LatErrGainScheduler.GetHashCode();
      if (headingErrGainScheduler_ != null) hash ^= HeadingErrGainScheduler.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ts != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Ts);
      }
      if (PreviewWindow != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PreviewWindow);
      }
      if (Cf != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Cf);
      }
      if (Cr != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Cr);
      }
      if (MassFl != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MassFl);
      }
      if (MassFr != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MassFr);
      }
      if (MassRl != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MassRl);
      }
      if (MassRr != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MassRr);
      }
      if (Eps != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Eps);
      }
      matrixQ_.WriteTo(output, _repeated_matrixQ_codec);
      reverseMatrixQ_.WriteTo(output, _repeated_reverseMatrixQ_codec);
      if (CutoffFreq != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CutoffFreq);
      }
      if (MeanFilterWindowSize != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MeanFilterWindowSize);
      }
      if (MaxIteration != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxIteration);
      }
      if (MaxLateralAcceleration != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(MaxLateralAcceleration);
      }
      if (latErrGainScheduler_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LatErrGainScheduler);
      }
      if (headingErrGainScheduler_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(HeadingErrGainScheduler);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ts != 0D) {
        size += 1 + 8;
      }
      if (PreviewWindow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreviewWindow);
      }
      if (Cf != 0D) {
        size += 1 + 8;
      }
      if (Cr != 0D) {
        size += 1 + 8;
      }
      if (MassFl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MassFl);
      }
      if (MassFr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MassFr);
      }
      if (MassRl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MassRl);
      }
      if (MassRr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MassRr);
      }
      if (Eps != 0D) {
        size += 1 + 8;
      }
      size += matrixQ_.CalculateSize(_repeated_matrixQ_codec);
      size += reverseMatrixQ_.CalculateSize(_repeated_reverseMatrixQ_codec);
      if (CutoffFreq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffFreq);
      }
      if (MeanFilterWindowSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeanFilterWindowSize);
      }
      if (MaxIteration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIteration);
      }
      if (MaxLateralAcceleration != 0D) {
        size += 1 + 8;
      }
      if (latErrGainScheduler_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LatErrGainScheduler);
      }
      if (headingErrGainScheduler_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeadingErrGainScheduler);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatControllerConf other) {
      if (other == null) {
        return;
      }
      if (other.Ts != 0D) {
        Ts = other.Ts;
      }
      if (other.PreviewWindow != 0) {
        PreviewWindow = other.PreviewWindow;
      }
      if (other.Cf != 0D) {
        Cf = other.Cf;
      }
      if (other.Cr != 0D) {
        Cr = other.Cr;
      }
      if (other.MassFl != 0) {
        MassFl = other.MassFl;
      }
      if (other.MassFr != 0) {
        MassFr = other.MassFr;
      }
      if (other.MassRl != 0) {
        MassRl = other.MassRl;
      }
      if (other.MassRr != 0) {
        MassRr = other.MassRr;
      }
      if (other.Eps != 0D) {
        Eps = other.Eps;
      }
      matrixQ_.Add(other.matrixQ_);
      reverseMatrixQ_.Add(other.reverseMatrixQ_);
      if (other.CutoffFreq != 0) {
        CutoffFreq = other.CutoffFreq;
      }
      if (other.MeanFilterWindowSize != 0) {
        MeanFilterWindowSize = other.MeanFilterWindowSize;
      }
      if (other.MaxIteration != 0) {
        MaxIteration = other.MaxIteration;
      }
      if (other.MaxLateralAcceleration != 0D) {
        MaxLateralAcceleration = other.MaxLateralAcceleration;
      }
      if (other.latErrGainScheduler_ != null) {
        if (latErrGainScheduler_ == null) {
          latErrGainScheduler_ = new global::Apollo.Control.GainScheduler();
        }
        LatErrGainScheduler.MergeFrom(other.LatErrGainScheduler);
      }
      if (other.headingErrGainScheduler_ != null) {
        if (headingErrGainScheduler_ == null) {
          headingErrGainScheduler_ = new global::Apollo.Control.GainScheduler();
        }
        HeadingErrGainScheduler.MergeFrom(other.HeadingErrGainScheduler);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Ts = input.ReadDouble();
            break;
          }
          case 16: {
            PreviewWindow = input.ReadInt32();
            break;
          }
          case 25: {
            Cf = input.ReadDouble();
            break;
          }
          case 33: {
            Cr = input.ReadDouble();
            break;
          }
          case 40: {
            MassFl = input.ReadInt32();
            break;
          }
          case 48: {
            MassFr = input.ReadInt32();
            break;
          }
          case 56: {
            MassRl = input.ReadInt32();
            break;
          }
          case 64: {
            MassRr = input.ReadInt32();
            break;
          }
          case 73: {
            Eps = input.ReadDouble();
            break;
          }
          case 82:
          case 81: {
            matrixQ_.AddEntriesFrom(input, _repeated_matrixQ_codec);
            break;
          }
          case 90:
          case 89: {
            reverseMatrixQ_.AddEntriesFrom(input, _repeated_reverseMatrixQ_codec);
            break;
          }
          case 96: {
            CutoffFreq = input.ReadInt32();
            break;
          }
          case 104: {
            MeanFilterWindowSize = input.ReadInt32();
            break;
          }
          case 112: {
            MaxIteration = input.ReadInt32();
            break;
          }
          case 121: {
            MaxLateralAcceleration = input.ReadDouble();
            break;
          }
          case 130: {
            if (latErrGainScheduler_ == null) {
              latErrGainScheduler_ = new global::Apollo.Control.GainScheduler();
            }
            input.ReadMessage(latErrGainScheduler_);
            break;
          }
          case 138: {
            if (headingErrGainScheduler_ == null) {
              headingErrGainScheduler_ = new global::Apollo.Control.GainScheduler();
            }
            input.ReadMessage(headingErrGainScheduler_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
