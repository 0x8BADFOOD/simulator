// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/transit.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Canbus {

  /// <summary>Holder for reflection information generated from modules/canbus/proto/transit.proto</summary>
  public static partial class TransitReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/canbus/proto/transit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJtb2R1bGVzL2NhbmJ1cy9wcm90by90cmFuc2l0LnByb3RvEg1hcG9sbG8u",
            "Y2FuYnVzIlkKFExsY192ZWhpY2xlbGltaXRzXzI0EiAKGGxsY19mYmtfbWF4",
            "c3RlZXJpbmdhbmdsZRgBIAEoBRIfChdsbGNfZmJrX21heGJyYWtlcGVyY2Vu",
            "dBgCIAEoASKZCwoVQWRjX21vdGlvbmNvbnRyb2wxXzEwEh8KF2FkY19jbWRf",
            "c3RlZXJ3aGVlbGFuZ2xlGAEgASgBEmkKG2FkY19jbWRfc3RlZXJpbmdjb250",
            "cm9sbW9kZRgCIAEoDjJELmFwb2xsby5jYW5idXMuQWRjX21vdGlvbmNvbnRy",
            "b2wxXzEwLkFkY19jbWRfc3RlZXJpbmdjb250cm9sbW9kZVR5cGUSHAoUYWRj",
            "X2NtZF9wYXJraW5nYnJha2UYAyABKAgSSwoMYWRjX2NtZF9nZWFyGAQgASgO",
            "MjUuYXBvbGxvLmNhbmJ1cy5BZGNfbW90aW9uY29udHJvbDFfMTAuQWRjX2Nt",
            "ZF9nZWFyVHlwZRIjChthZGNfbW90aW9uY29udHJvbDFfY2hlY2tzdW0YBSAB",
            "KAUSHwoXYWRjX2NtZF9icmFrZXBlcmNlbnRhZ2UYBiABKAESIAoYYWRjX2Nt",
            "ZF90aHJvdHRsZXBvc2l0aW9uGAcgASgBEiIKGmFkY19tb3Rpb25jb250cm9s",
            "MV9jb3VudGVyGAggASgFEmEKF2FkY19jbWRfYXV0b25vbXlyZXF1ZXN0GAkg",
            "ASgOMkAuYXBvbGxvLmNhbmJ1cy5BZGNfbW90aW9uY29udHJvbDFfMTAuQWRj",
            "X2NtZF9hdXRvbm9teXJlcXVlc3RUeXBlEnEKH2FkY19jbWRfbG9uZ2l0dWRp",
            "bmFsY29udHJvbG1vZGUYCiABKA4ySC5hcG9sbG8uY2FuYnVzLkFkY19tb3Rp",
            "b25jb250cm9sMV8xMC5BZGNfY21kX2xvbmdpdHVkaW5hbGNvbnRyb2xtb2Rl",
            "VHlwZSLMAQofQWRjX2NtZF9zdGVlcmluZ2NvbnRyb2xtb2RlVHlwZRIkCiBB",
            "RENfQ01EX1NURUVSSU5HQ09OVFJPTE1PREVfTk9ORRAAEiUKIUFEQ19DTURf",
            "U1RFRVJJTkdDT05UUk9MTU9ERV9BTkdMRRABEjIKLkFEQ19DTURfU1RFRVJJ",
            "TkdDT05UUk9MTU9ERV9SRVNFUlZFRF9DVVJWQVRVUkUQAhIoCiRBRENfQ01E",
            "X1NURUVSSU5HQ09OVFJPTE1PREVfUkVTRVJWRUQQAyJ9ChBBZGNfY21kX2dl",
            "YXJUeXBlEhcKE0FEQ19DTURfR0VBUl9QX1BBUksQABIYChRBRENfQ01EX0dF",
            "QVJfRF9EUklWRRABEhoKFkFEQ19DTURfR0VBUl9OX05FVVRSQUwQAhIaChZB",
            "RENfQ01EX0dFQVJfUl9SRVZFUlNFEAMizwEKG0FkY19jbWRfYXV0b25vbXly",
            "ZXF1ZXN0VHlwZRIyCi5BRENfQ01EX0FVVE9OT01ZUkVRVUVTVF9BVVRPTk9N",
            "WV9OT1RfUkVRVUVTVEVEEAASLgoqQURDX0NNRF9BVVRPTk9NWVJFUVVFU1Rf",
            "QVVUT05PTVlfUkVRVUVTVEVEEAESJQohQURDX0NNRF9BVVRPTk9NWVJFUVVF",
            "U1RfUkVTRVJWRUQwEAISJQohQURDX0NNRF9BVVRPTk9NWVJFUVVFU1RfUkVT",
            "RVJWRUQxEAMihgIKI0FkY19jbWRfbG9uZ2l0dWRpbmFsY29udHJvbG1vZGVU",
            "eXBlEigKJEFEQ19DTURfTE9OR0lUVURJTkFMQ09OVFJPTE1PREVfTk9ORRAA",
            "EkYKQkFEQ19DTURfTE9OR0lUVURJTkFMQ09OVFJPTE1PREVfUkVTRVJWRURf",
            "VkVMT0NJVFlfQU5EX0FDQ0VMRVJBVElPThABEjIKLkFEQ19DTURfTE9OR0lU",
            "VURJTkFMQ09OVFJPTE1PREVfUkVTRVJWRURfRk9SQ0UQAhI5CjVBRENfQ01E",
            "X0xPTkdJVFVESU5BTENPTlRST0xNT0RFX0RJUkVDVF9USFJPVFRMRV9CUkFL",
            "RRADIocBChtBZGNfbW90aW9uY29udHJvbGxpbWl0czFfMTISJAocYWRjX2Nt",
            "ZF90aHJvdHRsZWNvbW1hbmRsaW1pdBgBIAEoARIcChRhZGNfY21kX3N0ZWVy",
            "aW5ncmF0ZRgCIAEoARIkChxhZGNfY21kX3N0ZWVyd2hlZWxhbmdsZWxpbWl0",
            "GAMgASgBIsUOChZMbGNfbW90aW9uZmVlZGJhY2sxXzIwEkwKDGxsY19mYmtf",
            "Z2VhchgBIAEoDjI2LmFwb2xsby5jYW5idXMuTGxjX21vdGlvbmZlZWRiYWNr",
            "MV8yMC5MbGNfZmJrX2dlYXJUeXBlEhwKFGxsY19mYmtfcGFya2luZ2JyYWtl",
            "GAIgASgIEiAKGGxsY19mYmtfdGhyb3R0bGVwb3NpdGlvbhgDIAEoARIgChhs",
            "bGNfZmJrX2JyYWtlcGVyY2VudHJlYXIYBCABKAESIQoZbGxjX2Zia19icmFr",
            "ZXBlcmNlbnRmcm9udBgFIAEoARJqChtsbGNfZmJrX3N0ZWVyaW5nY29udHJv",
            "bG1vZGUYBiABKA4yRS5hcG9sbG8uY2FuYnVzLkxsY19tb3Rpb25mZWVkYmFj",
            "azFfMjAuTGxjX2Zia19zdGVlcmluZ2NvbnRyb2xtb2RlVHlwZRIjChtsbGNf",
            "bW90aW9uZmVlZGJhY2sxX2NvdW50ZXIYByABKAUSJAocbGxjX21vdGlvbmZl",
            "ZWRiYWNrMV9jaGVja3N1bRgIIAEoBRIeChZsbGNfZmJrX2NvbW1hbmRhbGln",
            "bmVkGAkgASgIEhwKFGxsY19mYmtfZXN0b3BwcmVzc2VkGAogASgIEiIKGmxs",
            "Y19mYmtfYWRjcmVxdWVzdGF1dG9ub215GAsgASgIEh0KFWxsY19mYmtfYWxs",
            "b3dhdXRvbm9teRgMIAEoCBJyCh9sbGNfZmJrX2xvbmdpdHVkaW5hbGNvbnRy",
            "b2xtb2RlGA0gASgOMkkuYXBvbGxvLmNhbmJ1cy5MbGNfbW90aW9uZmVlZGJh",
            "Y2sxXzIwLkxsY19mYmtfbG9uZ2l0dWRpbmFsY29udHJvbG1vZGVUeXBlEk4K",
            "DWxsY19mYmtfc3RhdGUYDiABKA4yNy5hcG9sbG8uY2FuYnVzLkxsY19tb3Rp",
            "b25mZWVkYmFjazFfMjAuTGxjX2Zia19zdGF0ZVR5cGUifQoQTGxjX2Zia19n",
            "ZWFyVHlwZRIXChNMTENfRkJLX0dFQVJfUF9QQVJLEAASGAoUTExDX0ZCS19H",
            "RUFSX0RfRFJJVkUQARIaChZMTENfRkJLX0dFQVJfTl9ORVVUUkFMEAISGgoW",
            "TExDX0ZCS19HRUFSX1JfUkVWRVJTRRADIswBCh9MbGNfZmJrX3N0ZWVyaW5n",
            "Y29udHJvbG1vZGVUeXBlEiQKIExMQ19GQktfU1RFRVJJTkdDT05UUk9MTU9E",
            "RV9OT05FEAASJQohTExDX0ZCS19TVEVFUklOR0NPTlRST0xNT0RFX0FOR0xF",
            "EAESMgouTExDX0ZCS19TVEVFUklOR0NPTlRST0xNT0RFX1JFU0VSVkVEX0NV",
            "UlZBVFVSRRACEigKJExMQ19GQktfU1RFRVJJTkdDT05UUk9MTU9ERV9SRVNF",
            "UlZFRBADIoYCCiNMbGNfZmJrX2xvbmdpdHVkaW5hbGNvbnRyb2xtb2RlVHlw",
            "ZRIoCiRMTENfRkJLX0xPTkdJVFVESU5BTENPTlRST0xNT0RFX05PTkUQABJG",
            "CkJMTENfRkJLX0xPTkdJVFVESU5BTENPTlRST0xNT0RFX1JFU0VSVkVEX1ZF",
            "TE9DSVRZX0FORF9BQ0NFTEVSQVRJT04QARIyCi5MTENfRkJLX0xPTkdJVFVE",
            "SU5BTENPTlRST0xNT0RFX1JFU0VSVkVEX0ZPUkNFEAISOQo1TExDX0ZCS19M",
            "T05HSVRVRElOQUxDT05UUk9MTU9ERV9ESVJFQ1RfVEhST1RUTEVfQlJBS0UQ",
            "AyKEBAoRTGxjX2Zia19zdGF0ZVR5cGUSGwoXTExDX0ZCS19TVEFURV9SRVNF",
            "UlZFRDAQABImCiJMTENfRkJLX1NUQVRFX0FVVE9OT01ZX05PVF9BTExPV0VE",
            "EAESIgoeTExDX0ZCS19TVEFURV9BVVRPTk9NWV9BTExPV0VEEAISJAogTExD",
            "X0ZCS19TVEFURV9BVVRPTk9NWV9SRVFVRVNURUQQAxIaChZMTENfRkJLX1NU",
            "QVRFX0FVVE9OT01ZEAQSGwoXTExDX0ZCS19TVEFURV9SRVNFUlZFRDEQBRIb",
            "ChdMTENfRkJLX1NUQVRFX1JFU0VSVkVEMhAGEhsKF0xMQ19GQktfU1RBVEVf",
            "UkVTRVJWRUQzEAcSGwoXTExDX0ZCS19TVEFURV9SRVNFUlZFRDQQCBIbChdM",
            "TENfRkJLX1NUQVRFX1JFU0VSVkVENRAJEhsKF0xMQ19GQktfU1RBVEVfUkVT",
            "RVJWRUQ2EAoSGwoXTExDX0ZCS19TVEFURV9SRVNFUlZFRDcQCxIbChdMTENf",
            "RkJLX1NUQVRFX1JFU0VSVkVEOBAMEiUKIUxMQ19GQktfU1RBVEVfRElTRU5H",
            "QUdFX1JFUVVFU1RFRBANEhwKGExMQ19GQktfU1RBVEVfRElTRU5HQUdFRBAO",
            "EhcKE0xMQ19GQktfU1RBVEVfRkFVTFQQDyK+AQoWTGxjX21vdGlvbmZlZWRi",
            "YWNrMl8yMRIcChRsbGNfZmJrX3ZlaGljbGVzcGVlZBgBIAEoARIjChtsbGNf",
            "bW90aW9uZmVlZGJhY2syX2NvdW50ZXIYAiABKAUSJAocbGxjX21vdGlvbmZl",
            "ZWRiYWNrMl9jaGVja3N1bRgDIAEoBRIcChRsbGNfZmJrX3N0ZWVyaW5ncmF0",
            "ZRgEIAEoARIdChVsbGNfZmJrX3N0ZWVyaW5nYW5nbGUYBSABKAEi4gEKHUxs",
            "Y19tb3Rpb25jb21tYW5kZmVlZGJhY2sxXzIyEiUKHWxsY19mYmtfc3RlZXJp",
            "bmdhbmdsZXNldHBvaW50GAEgASgBEiAKGGxsY19mYmtfdGhyb3R0bGVzZXRw",
            "b2ludBgCIAEoARIkChxsbGNfZmJrX2JyYWtlcGVyY2VudHNldHBvaW50GAMg",
            "ASgBEigKIGxsY19tb3Rpb25jb21tYW5kZmVlZGJhY2sxX2NvdW50GAQgASgF",
            "EigKIGxsY19tb3Rpb25jb21tYW5kZmVlZGJhY2sxX2NoZWNrGAUgASgFIjEK",
            "FExsY192ZWhpY2xlc3RhdHVzXzI1EhkKEWxsY19mYmtfMTJ2b2x0YWdlGAEg",
            "ASgBIssFChlMbGNfYXV4aWxpYXJ5ZmVlZGJhY2tfMTIwEhgKEGxsY19mYmtf",
            "aW52ZXJ0ZXIYASABKAgSFwoPbGxjX2Zia19wZHVfY2g4GAIgASgIEhcKD2xs",
            "Y19mYmtfcGR1X2NoNxgDIAEoCBIXCg9sbGNfZmJrX3BkdV9jaDYYBCABKAgS",
            "FwoPbGxjX2Zia19wZHVfY2g1GAUgASgIEhcKD2xsY19mYmtfcGR1X2NoNBgG",
            "IAEoCBIXCg9sbGNfZmJrX3BkdV9jaDMYByABKAgSFwoPbGxjX2Zia19wZHVf",
            "Y2gyGAggASgIEhcKD2xsY19mYmtfcGR1X2NoMRgJIAEoCBIcChRsbGNfZmJr",
            "X2hhemFyZGxpZ2h0cxgKIAEoCBIaChJsbGNfZmJrX2xlZGdyZWVub24YCyAB",
            "KAgSFAoMbGxjX2Zia19ob3JuGAwgASgIEhgKEGxsY19mYmtfYnV6emVyb24Y",
            "DSABKAgSWwoSbGxjX2Zia190dXJuc2lnbmFsGA4gASgOMj8uYXBvbGxvLmNh",
            "bmJ1cy5MbGNfYXV4aWxpYXJ5ZmVlZGJhY2tfMTIwLkxsY19mYmtfdHVybnNp",
            "Z25hbFR5cGUSFwoPbGxjX2Zia19sb3diZWFtGA8gASgIEhgKEGxsY19mYmtf",
            "aGlnaGJlYW0YECABKAgSGAoQbGxjX2Zia19sZWRyZWRvbhgRIAEoCBIlCh1s",
            "bGNfZmJrX2F1dG9ub215YnV0dG9ucHJlc3NlZBgSIAEoCCKQAQoWTGxjX2Zi",
            "a190dXJuc2lnbmFsVHlwZRIbChdMTENfRkJLX1RVUk5TSUdOQUxfTk9ORRAA",
            "EhsKF0xMQ19GQktfVFVSTlNJR05BTF9MRUZUEAESHAoYTExDX0ZCS19UVVJO",
            "U0lHTkFMX1JJR0hUEAISHgoaTExDX0ZCS19UVVJOU0lHTkFMX1JFU0VSVkUQ",
            "AyK+AgoSTGxjX2RpYWdfZmF1bHRfNjIwEiIKGmxsY19kaXNlbmdhZ2Vjb3Vu",
            "dGVyX2JyYWtlGAEgASgFEiIKGmxsY19kaXNlbmdhZ2Vjb3VudGVyX3N0ZWVy",
            "GAIgASgFEiUKHWxsY19kaXNlbmdhZ2Vjb3VudGVyX3Rocm90dGxlGAMgASgF",
            "EhwKFGxsY19mYmtfZmF1bHRjb3VudGVyGAQgASgFEiMKG2xsY19kaXNlbmdh",
            "Z2Vjb3VudGVyX2J1dHRvbhgFIAEoBRIcChRsbGNfZmJrX3ZlcnNpb25feWVh",
            "chgGIAEoBRIdChVsbGNfZmJrX3ZlcnNpb25fbW9udGgYByABKAUSGwoTbGxj",
            "X2Zia192ZXJzaW9uX2RheRgIIAEoBRIcChRsbGNfZmJrX3ZlcnNpb25faG91",
            "chgJIAEoBSKWAQocTGxjX2RpYWdfc3RlZXJpbmdjb250cm9sXzcyMhImCh5s",
            "bGNfZGJnX3N0ZWVyaW5nc2Vuc29ycG9zaXRpb24YASABKAESJwofbGxjX2Ri",
            "Z19zdGVlcmluZ3JhY2tpbnB1dHRvcnF1ZRgCIAEoBRIlCh1sbGNfZGJnX3N0",
            "ZWVyaW5nbW90b3Jwb3NpdGlvbhgDIAEoASL1BQoYQWRjX2F1eGlsaWFyeWNv",
            "bnRyb2xfMTEwEh4KFmFkY19hdXhjb250cm9sX2NvdW50ZXIYASABKAUSHwoX",
            "YWRjX2F1eGNvbnRyb2xfY2hlY2tzdW0YAiABKAUSJgoeYWRjX2NtZF9pbnZl",
            "cnRlcl9jb250cm9sZW5hYmxlGAMgASgIEhgKEGFkY19jbWRfaW52ZXJ0ZXIY",
            "BCABKAgSFQoNYWRjX2NtZF93aXBlchgFIAEoBRIhChlhZGNfY21kX3BkdV9j",
            "b250cm9sZW5hYmxlGAYgASgIEhcKD2FkY19jbWRfcGR1X2NoOBgHIAEoCBIX",
            "Cg9hZGNfY21kX3BkdV9jaDcYCCABKAgSFwoPYWRjX2NtZF9wZHVfY2g2GAkg",
            "ASgIEhcKD2FkY19jbWRfcGR1X2NoNRgKIAEoCBIXCg9hZGNfY21kX3BkdV9j",
            "aDQYCyABKAgSFwoPYWRjX2NtZF9wZHVfY2gzGAwgASgIEhcKD2FkY19jbWRf",
            "cGR1X2NoMhgNIAEoCBIXCg9hZGNfY21kX3BkdV9jaDEYDiABKAgSHAoUYWRj",
            "X2NtZF9oYXphcmRsaWdodHMYDyABKAgSGAoQYWRjX2NtZF9oaWdoYmVhbRgQ",
            "IAEoCBIXCg9hZGNfY21kX2xvd2JlYW0YESABKAgSFAoMYWRjX2NtZF9ob3Ju",
            "GBIgASgIEloKEmFkY19jbWRfdHVybnNpZ25hbBgTIAEoDjI+LmFwb2xsby5j",
            "YW5idXMuQWRjX2F1eGlsaWFyeWNvbnRyb2xfMTEwLkFkY19jbWRfdHVybnNp",
            "Z25hbFR5cGUikAEKFkFkY19jbWRfdHVybnNpZ25hbFR5cGUSGwoXQURDX0NN",
            "RF9UVVJOU0lHTkFMX05PTkUQABIbChdBRENfQ01EX1RVUk5TSUdOQUxfTEVG",
            "VBABEhwKGEFEQ19DTURfVFVSTlNJR05BTF9SSUdIVBACEh4KGkFEQ19DTURf",
            "VFVSTlNJR05BTF9SRVNFUlZFEAMi9gEKGUxsY19kaWFnX2JyYWtlY29udHJv",
            "bF83MjESJgoebGxjX2RiZ19icmFrZXBpZGNvbnRyaWJ1dGlvbl9wGAEgASgB",
            "EiYKHmxsY19kYmdfYnJha2VwaWRjb250cmlidXRpb25faRgCIAEoARImCh5s",
            "bGNfZGJnX2JyYWtlcGlkY29udHJpYnV0aW9uX2QYAyABKAESHwoXbGxjX2Ri",
            "Z19icmFrZXBpZF9vdXRwdXQYBCABKAESHgoWbGxjX2RiZ19icmFrZXBpZF9l",
            "cnJvchgFIAEoBRIgChhsbGNfZGJnX2JyYWtlZmVlZGZvcndhcmQYBiABKAEi",
            "/wYKB1RyYW5zaXQSQQoUbGxjX3ZlaGljbGVsaW1pdHNfMjQYASABKAsyIy5h",
            "cG9sbG8uY2FuYnVzLkxsY192ZWhpY2xlbGltaXRzXzI0EkMKFWFkY19tb3Rp",
            "b25jb250cm9sMV8xMBgCIAEoCzIkLmFwb2xsby5jYW5idXMuQWRjX21vdGlv",
            "bmNvbnRyb2wxXzEwEk8KG2FkY19tb3Rpb25jb250cm9sbGltaXRzMV8xMhgD",
            "IAEoCzIqLmFwb2xsby5jYW5idXMuQWRjX21vdGlvbmNvbnRyb2xsaW1pdHMx",
            "XzEyEkUKFmxsY19tb3Rpb25mZWVkYmFjazFfMjAYBCABKAsyJS5hcG9sbG8u",
            "Y2FuYnVzLkxsY19tb3Rpb25mZWVkYmFjazFfMjASRQoWbGxjX21vdGlvbmZl",
            "ZWRiYWNrMl8yMRgFIAEoCzIlLmFwb2xsby5jYW5idXMuTGxjX21vdGlvbmZl",
            "ZWRiYWNrMl8yMRJTCh1sbGNfbW90aW9uY29tbWFuZGZlZWRiYWNrMV8yMhgG",
            "IAEoCzIsLmFwb2xsby5jYW5idXMuTGxjX21vdGlvbmNvbW1hbmRmZWVkYmFj",
            "azFfMjISQQoUbGxjX3ZlaGljbGVzdGF0dXNfMjUYByABKAsyIy5hcG9sbG8u",
            "Y2FuYnVzLkxsY192ZWhpY2xlc3RhdHVzXzI1EksKGWxsY19hdXhpbGlhcnlm",
            "ZWVkYmFja18xMjAYCCABKAsyKC5hcG9sbG8uY2FuYnVzLkxsY19hdXhpbGlh",
            "cnlmZWVkYmFja18xMjASPQoSbGxjX2RpYWdfZmF1bHRfNjIwGAkgASgLMiEu",
            "YXBvbGxvLmNhbmJ1cy5MbGNfZGlhZ19mYXVsdF82MjASUQocbGxjX2RpYWdf",
            "c3RlZXJpbmdjb250cm9sXzcyMhgKIAEoCzIrLmFwb2xsby5jYW5idXMuTGxj",
            "X2RpYWdfc3RlZXJpbmdjb250cm9sXzcyMhJJChhhZGNfYXV4aWxpYXJ5Y29u",
            "dHJvbF8xMTAYCyABKAsyJy5hcG9sbG8uY2FuYnVzLkFkY19hdXhpbGlhcnlj",
            "b250cm9sXzExMBJLChlsbGNfZGlhZ19icmFrZWNvbnRyb2xfNzIxGAwgASgL",
            "MiguYXBvbGxvLmNhbmJ1cy5MbGNfZGlhZ19icmFrZWNvbnRyb2xfNzIxYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_vehiclelimits_24), global::Apollo.Canbus.Llc_vehiclelimits_24.Parser, new[]{ "LlcFbkMaxsteeringangle", "LlcFbkMaxbrakepercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Adc_motioncontrol1_10), global::Apollo.Canbus.Adc_motioncontrol1_10.Parser, new[]{ "AdcCmdSteerwheelangle", "AdcCmdSteeringcontrolmode", "AdcCmdParkingbrake", "AdcCmdGear", "AdcMotioncontrol1Checksum", "AdcCmdBrakepercentage", "AdcCmdThrottleposition", "AdcMotioncontrol1Counter", "AdcCmdAutonomyrequest", "AdcCmdLongitudinalcontrolmode" }, null, new[]{ typeof(global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_steeringcontrolmodeType), typeof(global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_gearType), typeof(global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_autonomyrequestType), typeof(global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_longitudinalcontrolmodeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Adc_motioncontrollimits1_12), global::Apollo.Canbus.Adc_motioncontrollimits1_12.Parser, new[]{ "AdcCmdThrottlecommandlimit", "AdcCmdSteeringrate", "AdcCmdSteerwheelanglelimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_motionfeedback1_20), global::Apollo.Canbus.Llc_motionfeedback1_20.Parser, new[]{ "LlcFbkGear", "LlcFbkParkingbrake", "LlcFbkThrottleposition", "LlcFbkBrakepercentrear", "LlcFbkBrakepercentfront", "LlcFbkSteeringcontrolmode", "LlcMotionfeedback1Counter", "LlcMotionfeedback1Checksum", "LlcFbkCommandaligned", "LlcFbkEstoppressed", "LlcFbkAdcrequestautonomy", "LlcFbkAllowautonomy", "LlcFbkLongitudinalcontrolmode", "LlcFbkState" }, null, new[]{ typeof(global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_gearType), typeof(global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_steeringcontrolmodeType), typeof(global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_longitudinalcontrolmodeType), typeof(global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_stateType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_motionfeedback2_21), global::Apollo.Canbus.Llc_motionfeedback2_21.Parser, new[]{ "LlcFbkVehiclespeed", "LlcMotionfeedback2Counter", "LlcMotionfeedback2Checksum", "LlcFbkSteeringrate", "LlcFbkSteeringangle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_motioncommandfeedback1_22), global::Apollo.Canbus.Llc_motioncommandfeedback1_22.Parser, new[]{ "LlcFbkSteeringanglesetpoint", "LlcFbkThrottlesetpoint", "LlcFbkBrakepercentsetpoint", "LlcMotioncommandfeedback1Count", "LlcMotioncommandfeedback1Check" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_vehiclestatus_25), global::Apollo.Canbus.Llc_vehiclestatus_25.Parser, new[]{ "LlcFbk12Voltage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_auxiliaryfeedback_120), global::Apollo.Canbus.Llc_auxiliaryfeedback_120.Parser, new[]{ "LlcFbkInverter", "LlcFbkPduCh8", "LlcFbkPduCh7", "LlcFbkPduCh6", "LlcFbkPduCh5", "LlcFbkPduCh4", "LlcFbkPduCh3", "LlcFbkPduCh2", "LlcFbkPduCh1", "LlcFbkHazardlights", "LlcFbkLedgreenon", "LlcFbkHorn", "LlcFbkBuzzeron", "LlcFbkTurnsignal", "LlcFbkLowbeam", "LlcFbkHighbeam", "LlcFbkLedredon", "LlcFbkAutonomybuttonpressed" }, null, new[]{ typeof(global::Apollo.Canbus.Llc_auxiliaryfeedback_120.Types.Llc_fbk_turnsignalType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_diag_fault_620), global::Apollo.Canbus.Llc_diag_fault_620.Parser, new[]{ "LlcDisengagecounterBrake", "LlcDisengagecounterSteer", "LlcDisengagecounterThrottle", "LlcFbkFaultcounter", "LlcDisengagecounterButton", "LlcFbkVersionYear", "LlcFbkVersionMonth", "LlcFbkVersionDay", "LlcFbkVersionHour" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_diag_steeringcontrol_722), global::Apollo.Canbus.Llc_diag_steeringcontrol_722.Parser, new[]{ "LlcDbgSteeringsensorposition", "LlcDbgSteeringrackinputtorque", "LlcDbgSteeringmotorposition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Adc_auxiliarycontrol_110), global::Apollo.Canbus.Adc_auxiliarycontrol_110.Parser, new[]{ "AdcAuxcontrolCounter", "AdcAuxcontrolChecksum", "AdcCmdInverterControlenable", "AdcCmdInverter", "AdcCmdWiper", "AdcCmdPduControlenable", "AdcCmdPduCh8", "AdcCmdPduCh7", "AdcCmdPduCh6", "AdcCmdPduCh5", "AdcCmdPduCh4", "AdcCmdPduCh3", "AdcCmdPduCh2", "AdcCmdPduCh1", "AdcCmdHazardlights", "AdcCmdHighbeam", "AdcCmdLowbeam", "AdcCmdHorn", "AdcCmdTurnsignal" }, null, new[]{ typeof(global::Apollo.Canbus.Adc_auxiliarycontrol_110.Types.Adc_cmd_turnsignalType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Llc_diag_brakecontrol_721), global::Apollo.Canbus.Llc_diag_brakecontrol_721.Parser, new[]{ "LlcDbgBrakepidcontributionP", "LlcDbgBrakepidcontributionI", "LlcDbgBrakepidcontributionD", "LlcDbgBrakepidOutput", "LlcDbgBrakepidError", "LlcDbgBrakefeedforward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Canbus.Transit), global::Apollo.Canbus.Transit.Parser, new[]{ "LlcVehiclelimits24", "AdcMotioncontrol110", "AdcMotioncontrollimits112", "LlcMotionfeedback120", "LlcMotionfeedback221", "LlcMotioncommandfeedback122", "LlcVehiclestatus25", "LlcAuxiliaryfeedback120", "LlcDiagFault620", "LlcDiagSteeringcontrol722", "AdcAuxiliarycontrol110", "LlcDiagBrakecontrol721" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Llc_vehiclelimits_24 : pb::IMessage<Llc_vehiclelimits_24> {
    private static readonly pb::MessageParser<Llc_vehiclelimits_24> _parser = new pb::MessageParser<Llc_vehiclelimits_24>(() => new Llc_vehiclelimits_24());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_vehiclelimits_24> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_vehiclelimits_24() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_vehiclelimits_24(Llc_vehiclelimits_24 other) : this() {
      llcFbkMaxsteeringangle_ = other.llcFbkMaxsteeringangle_;
      llcFbkMaxbrakepercent_ = other.llcFbkMaxbrakepercent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_vehiclelimits_24 Clone() {
      return new Llc_vehiclelimits_24(this);
    }

    /// <summary>Field number for the "llc_fbk_maxsteeringangle" field.</summary>
    public const int LlcFbkMaxsteeringangleFieldNumber = 1;
    private int llcFbkMaxsteeringangle_;
    /// <summary>
    /// Report Message
    /// Steering angle feedback  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcFbkMaxsteeringangle {
      get { return llcFbkMaxsteeringangle_; }
      set {
        llcFbkMaxsteeringangle_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_maxbrakepercent" field.</summary>
    public const int LlcFbkMaxbrakepercentFieldNumber = 2;
    private double llcFbkMaxbrakepercent_;
    /// <summary>
    /// Front brake pressure feedback  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkMaxbrakepercent {
      get { return llcFbkMaxbrakepercent_; }
      set {
        llcFbkMaxbrakepercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_vehiclelimits_24);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_vehiclelimits_24 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcFbkMaxsteeringangle != other.LlcFbkMaxsteeringangle) return false;
      if (LlcFbkMaxbrakepercent != other.LlcFbkMaxbrakepercent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcFbkMaxsteeringangle != 0) hash ^= LlcFbkMaxsteeringangle.GetHashCode();
      if (LlcFbkMaxbrakepercent != 0D) hash ^= LlcFbkMaxbrakepercent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcFbkMaxsteeringangle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LlcFbkMaxsteeringangle);
      }
      if (LlcFbkMaxbrakepercent != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LlcFbkMaxbrakepercent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcFbkMaxsteeringangle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcFbkMaxsteeringangle);
      }
      if (LlcFbkMaxbrakepercent != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_vehiclelimits_24 other) {
      if (other == null) {
        return;
      }
      if (other.LlcFbkMaxsteeringangle != 0) {
        LlcFbkMaxsteeringangle = other.LlcFbkMaxsteeringangle;
      }
      if (other.LlcFbkMaxbrakepercent != 0D) {
        LlcFbkMaxbrakepercent = other.LlcFbkMaxbrakepercent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LlcFbkMaxsteeringangle = input.ReadInt32();
            break;
          }
          case 17: {
            LlcFbkMaxbrakepercent = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Adc_motioncontrol1_10 : pb::IMessage<Adc_motioncontrol1_10> {
    private static readonly pb::MessageParser<Adc_motioncontrol1_10> _parser = new pb::MessageParser<Adc_motioncontrol1_10>(() => new Adc_motioncontrol1_10());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Adc_motioncontrol1_10> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_motioncontrol1_10() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_motioncontrol1_10(Adc_motioncontrol1_10 other) : this() {
      adcCmdSteerwheelangle_ = other.adcCmdSteerwheelangle_;
      adcCmdSteeringcontrolmode_ = other.adcCmdSteeringcontrolmode_;
      adcCmdParkingbrake_ = other.adcCmdParkingbrake_;
      adcCmdGear_ = other.adcCmdGear_;
      adcMotioncontrol1Checksum_ = other.adcMotioncontrol1Checksum_;
      adcCmdBrakepercentage_ = other.adcCmdBrakepercentage_;
      adcCmdThrottleposition_ = other.adcCmdThrottleposition_;
      adcMotioncontrol1Counter_ = other.adcMotioncontrol1Counter_;
      adcCmdAutonomyrequest_ = other.adcCmdAutonomyrequest_;
      adcCmdLongitudinalcontrolmode_ = other.adcCmdLongitudinalcontrolmode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_motioncontrol1_10 Clone() {
      return new Adc_motioncontrol1_10(this);
    }

    /// <summary>Field number for the "adc_cmd_steerwheelangle" field.</summary>
    public const int AdcCmdSteerwheelangleFieldNumber = 1;
    private double adcCmdSteerwheelangle_;
    /// <summary>
    /// Setpoint for steering wheel angle. Positive for CW  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcCmdSteerwheelangle {
      get { return adcCmdSteerwheelangle_; }
      set {
        adcCmdSteerwheelangle_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_steeringcontrolmode" field.</summary>
    public const int AdcCmdSteeringcontrolmodeFieldNumber = 2;
    private global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_steeringcontrolmodeType adcCmdSteeringcontrolmode_ = 0;
    /// <summary>
    /// Select steering control mode  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_steeringcontrolmodeType AdcCmdSteeringcontrolmode {
      get { return adcCmdSteeringcontrolmode_; }
      set {
        adcCmdSteeringcontrolmode_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_parkingbrake" field.</summary>
    public const int AdcCmdParkingbrakeFieldNumber = 3;
    private bool adcCmdParkingbrake_;
    /// <summary>
    /// (Reserved) Control parking brake  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdParkingbrake {
      get { return adcCmdParkingbrake_; }
      set {
        adcCmdParkingbrake_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_gear" field.</summary>
    public const int AdcCmdGearFieldNumber = 4;
    private global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_gearType adcCmdGear_ = 0;
    /// <summary>
    /// Transmission control - only used in direct longitudinal control  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_gearType AdcCmdGear {
      get { return adcCmdGear_; }
      set {
        adcCmdGear_ = value;
      }
    }

    /// <summary>Field number for the "adc_motioncontrol1_checksum" field.</summary>
    public const int AdcMotioncontrol1ChecksumFieldNumber = 5;
    private int adcMotioncontrol1Checksum_;
    /// <summary>
    /// Motion Control 1 checksum  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdcMotioncontrol1Checksum {
      get { return adcMotioncontrol1Checksum_; }
      set {
        adcMotioncontrol1Checksum_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_brakepercentage" field.</summary>
    public const int AdcCmdBrakepercentageFieldNumber = 6;
    private double adcCmdBrakepercentage_;
    /// <summary>
    /// Brake pressure for direct longitudinal control  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcCmdBrakepercentage {
      get { return adcCmdBrakepercentage_; }
      set {
        adcCmdBrakepercentage_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_throttleposition" field.</summary>
    public const int AdcCmdThrottlepositionFieldNumber = 7;
    private double adcCmdThrottleposition_;
    /// <summary>
    /// Throttle pedal position percentage for direct longitudinal control  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcCmdThrottleposition {
      get { return adcCmdThrottleposition_; }
      set {
        adcCmdThrottleposition_ = value;
      }
    }

    /// <summary>Field number for the "adc_motioncontrol1_counter" field.</summary>
    public const int AdcMotioncontrol1CounterFieldNumber = 8;
    private int adcMotioncontrol1Counter_;
    /// <summary>
    /// Motion control 1 Heartbeat counter  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdcMotioncontrol1Counter {
      get { return adcMotioncontrol1Counter_; }
      set {
        adcMotioncontrol1Counter_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_autonomyrequest" field.</summary>
    public const int AdcCmdAutonomyrequestFieldNumber = 9;
    private global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_autonomyrequestType adcCmdAutonomyrequest_ = 0;
    /// <summary>
    /// Request from ADC to LLC for autonomy  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_autonomyrequestType AdcCmdAutonomyrequest {
      get { return adcCmdAutonomyrequest_; }
      set {
        adcCmdAutonomyrequest_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_longitudinalcontrolmode" field.</summary>
    public const int AdcCmdLongitudinalcontrolmodeFieldNumber = 10;
    private global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_longitudinalcontrolmodeType adcCmdLongitudinalcontrolmode_ = 0;
    /// <summary>
    /// Select longitudinal control mode  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_longitudinalcontrolmodeType AdcCmdLongitudinalcontrolmode {
      get { return adcCmdLongitudinalcontrolmode_; }
      set {
        adcCmdLongitudinalcontrolmode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Adc_motioncontrol1_10);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Adc_motioncontrol1_10 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdcCmdSteerwheelangle != other.AdcCmdSteerwheelangle) return false;
      if (AdcCmdSteeringcontrolmode != other.AdcCmdSteeringcontrolmode) return false;
      if (AdcCmdParkingbrake != other.AdcCmdParkingbrake) return false;
      if (AdcCmdGear != other.AdcCmdGear) return false;
      if (AdcMotioncontrol1Checksum != other.AdcMotioncontrol1Checksum) return false;
      if (AdcCmdBrakepercentage != other.AdcCmdBrakepercentage) return false;
      if (AdcCmdThrottleposition != other.AdcCmdThrottleposition) return false;
      if (AdcMotioncontrol1Counter != other.AdcMotioncontrol1Counter) return false;
      if (AdcCmdAutonomyrequest != other.AdcCmdAutonomyrequest) return false;
      if (AdcCmdLongitudinalcontrolmode != other.AdcCmdLongitudinalcontrolmode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdcCmdSteerwheelangle != 0D) hash ^= AdcCmdSteerwheelangle.GetHashCode();
      if (AdcCmdSteeringcontrolmode != 0) hash ^= AdcCmdSteeringcontrolmode.GetHashCode();
      if (AdcCmdParkingbrake != false) hash ^= AdcCmdParkingbrake.GetHashCode();
      if (AdcCmdGear != 0) hash ^= AdcCmdGear.GetHashCode();
      if (AdcMotioncontrol1Checksum != 0) hash ^= AdcMotioncontrol1Checksum.GetHashCode();
      if (AdcCmdBrakepercentage != 0D) hash ^= AdcCmdBrakepercentage.GetHashCode();
      if (AdcCmdThrottleposition != 0D) hash ^= AdcCmdThrottleposition.GetHashCode();
      if (AdcMotioncontrol1Counter != 0) hash ^= AdcMotioncontrol1Counter.GetHashCode();
      if (AdcCmdAutonomyrequest != 0) hash ^= AdcCmdAutonomyrequest.GetHashCode();
      if (AdcCmdLongitudinalcontrolmode != 0) hash ^= AdcCmdLongitudinalcontrolmode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdcCmdSteerwheelangle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(AdcCmdSteerwheelangle);
      }
      if (AdcCmdSteeringcontrolmode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AdcCmdSteeringcontrolmode);
      }
      if (AdcCmdParkingbrake != false) {
        output.WriteRawTag(24);
        output.WriteBool(AdcCmdParkingbrake);
      }
      if (AdcCmdGear != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AdcCmdGear);
      }
      if (AdcMotioncontrol1Checksum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AdcMotioncontrol1Checksum);
      }
      if (AdcCmdBrakepercentage != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(AdcCmdBrakepercentage);
      }
      if (AdcCmdThrottleposition != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AdcCmdThrottleposition);
      }
      if (AdcMotioncontrol1Counter != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AdcMotioncontrol1Counter);
      }
      if (AdcCmdAutonomyrequest != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) AdcCmdAutonomyrequest);
      }
      if (AdcCmdLongitudinalcontrolmode != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AdcCmdLongitudinalcontrolmode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdcCmdSteerwheelangle != 0D) {
        size += 1 + 8;
      }
      if (AdcCmdSteeringcontrolmode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdcCmdSteeringcontrolmode);
      }
      if (AdcCmdParkingbrake != false) {
        size += 1 + 1;
      }
      if (AdcCmdGear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdcCmdGear);
      }
      if (AdcMotioncontrol1Checksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdcMotioncontrol1Checksum);
      }
      if (AdcCmdBrakepercentage != 0D) {
        size += 1 + 8;
      }
      if (AdcCmdThrottleposition != 0D) {
        size += 1 + 8;
      }
      if (AdcMotioncontrol1Counter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdcMotioncontrol1Counter);
      }
      if (AdcCmdAutonomyrequest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdcCmdAutonomyrequest);
      }
      if (AdcCmdLongitudinalcontrolmode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdcCmdLongitudinalcontrolmode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Adc_motioncontrol1_10 other) {
      if (other == null) {
        return;
      }
      if (other.AdcCmdSteerwheelangle != 0D) {
        AdcCmdSteerwheelangle = other.AdcCmdSteerwheelangle;
      }
      if (other.AdcCmdSteeringcontrolmode != 0) {
        AdcCmdSteeringcontrolmode = other.AdcCmdSteeringcontrolmode;
      }
      if (other.AdcCmdParkingbrake != false) {
        AdcCmdParkingbrake = other.AdcCmdParkingbrake;
      }
      if (other.AdcCmdGear != 0) {
        AdcCmdGear = other.AdcCmdGear;
      }
      if (other.AdcMotioncontrol1Checksum != 0) {
        AdcMotioncontrol1Checksum = other.AdcMotioncontrol1Checksum;
      }
      if (other.AdcCmdBrakepercentage != 0D) {
        AdcCmdBrakepercentage = other.AdcCmdBrakepercentage;
      }
      if (other.AdcCmdThrottleposition != 0D) {
        AdcCmdThrottleposition = other.AdcCmdThrottleposition;
      }
      if (other.AdcMotioncontrol1Counter != 0) {
        AdcMotioncontrol1Counter = other.AdcMotioncontrol1Counter;
      }
      if (other.AdcCmdAutonomyrequest != 0) {
        AdcCmdAutonomyrequest = other.AdcCmdAutonomyrequest;
      }
      if (other.AdcCmdLongitudinalcontrolmode != 0) {
        AdcCmdLongitudinalcontrolmode = other.AdcCmdLongitudinalcontrolmode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            AdcCmdSteerwheelangle = input.ReadDouble();
            break;
          }
          case 16: {
            adcCmdSteeringcontrolmode_ = (global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_steeringcontrolmodeType) input.ReadEnum();
            break;
          }
          case 24: {
            AdcCmdParkingbrake = input.ReadBool();
            break;
          }
          case 32: {
            adcCmdGear_ = (global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_gearType) input.ReadEnum();
            break;
          }
          case 40: {
            AdcMotioncontrol1Checksum = input.ReadInt32();
            break;
          }
          case 49: {
            AdcCmdBrakepercentage = input.ReadDouble();
            break;
          }
          case 57: {
            AdcCmdThrottleposition = input.ReadDouble();
            break;
          }
          case 64: {
            AdcMotioncontrol1Counter = input.ReadInt32();
            break;
          }
          case 72: {
            adcCmdAutonomyrequest_ = (global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_autonomyrequestType) input.ReadEnum();
            break;
          }
          case 80: {
            adcCmdLongitudinalcontrolmode_ = (global::Apollo.Canbus.Adc_motioncontrol1_10.Types.Adc_cmd_longitudinalcontrolmodeType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Adc_motioncontrol1_10 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Adc_cmd_steeringcontrolmodeType {
        [pbr::OriginalName("ADC_CMD_STEERINGCONTROLMODE_NONE")] AdcCmdSteeringcontrolmodeNone = 0,
        [pbr::OriginalName("ADC_CMD_STEERINGCONTROLMODE_ANGLE")] AdcCmdSteeringcontrolmodeAngle = 1,
        [pbr::OriginalName("ADC_CMD_STEERINGCONTROLMODE_RESERVED_CURVATURE")] AdcCmdSteeringcontrolmodeReservedCurvature = 2,
        [pbr::OriginalName("ADC_CMD_STEERINGCONTROLMODE_RESERVED")] AdcCmdSteeringcontrolmodeReserved = 3,
      }

      public enum Adc_cmd_gearType {
        [pbr::OriginalName("ADC_CMD_GEAR_P_PARK")] AdcCmdGearPPark = 0,
        [pbr::OriginalName("ADC_CMD_GEAR_D_DRIVE")] AdcCmdGearDDrive = 1,
        [pbr::OriginalName("ADC_CMD_GEAR_N_NEUTRAL")] AdcCmdGearNNeutral = 2,
        [pbr::OriginalName("ADC_CMD_GEAR_R_REVERSE")] AdcCmdGearRReverse = 3,
      }

      public enum Adc_cmd_autonomyrequestType {
        [pbr::OriginalName("ADC_CMD_AUTONOMYREQUEST_AUTONOMY_NOT_REQUESTED")] AdcCmdAutonomyrequestAutonomyNotRequested = 0,
        [pbr::OriginalName("ADC_CMD_AUTONOMYREQUEST_AUTONOMY_REQUESTED")] AdcCmdAutonomyrequestAutonomyRequested = 1,
        [pbr::OriginalName("ADC_CMD_AUTONOMYREQUEST_RESERVED0")] AdcCmdAutonomyrequestReserved0 = 2,
        [pbr::OriginalName("ADC_CMD_AUTONOMYREQUEST_RESERVED1")] AdcCmdAutonomyrequestReserved1 = 3,
      }

      public enum Adc_cmd_longitudinalcontrolmodeType {
        [pbr::OriginalName("ADC_CMD_LONGITUDINALCONTROLMODE_NONE")] AdcCmdLongitudinalcontrolmodeNone = 0,
        [pbr::OriginalName("ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION")] AdcCmdLongitudinalcontrolmodeReservedVelocityAndAcceleration = 1,
        [pbr::OriginalName("ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_FORCE")] AdcCmdLongitudinalcontrolmodeReservedForce = 2,
        [pbr::OriginalName("ADC_CMD_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE")] AdcCmdLongitudinalcontrolmodeDirectThrottleBrake = 3,
      }

    }
    #endregion

  }

  public sealed partial class Adc_motioncontrollimits1_12 : pb::IMessage<Adc_motioncontrollimits1_12> {
    private static readonly pb::MessageParser<Adc_motioncontrollimits1_12> _parser = new pb::MessageParser<Adc_motioncontrollimits1_12>(() => new Adc_motioncontrollimits1_12());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Adc_motioncontrollimits1_12> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_motioncontrollimits1_12() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_motioncontrollimits1_12(Adc_motioncontrollimits1_12 other) : this() {
      adcCmdThrottlecommandlimit_ = other.adcCmdThrottlecommandlimit_;
      adcCmdSteeringrate_ = other.adcCmdSteeringrate_;
      adcCmdSteerwheelanglelimit_ = other.adcCmdSteerwheelanglelimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_motioncontrollimits1_12 Clone() {
      return new Adc_motioncontrollimits1_12(this);
    }

    /// <summary>Field number for the "adc_cmd_throttlecommandlimit" field.</summary>
    public const int AdcCmdThrottlecommandlimitFieldNumber = 1;
    private double adcCmdThrottlecommandlimit_;
    /// <summary>
    /// Control Message
    /// Set limit for throttle position  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcCmdThrottlecommandlimit {
      get { return adcCmdThrottlecommandlimit_; }
      set {
        adcCmdThrottlecommandlimit_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_steeringrate" field.</summary>
    public const int AdcCmdSteeringrateFieldNumber = 2;
    private double adcCmdSteeringrate_;
    /// <summary>
    /// Set steering rate  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcCmdSteeringrate {
      get { return adcCmdSteeringrate_; }
      set {
        adcCmdSteeringrate_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_steerwheelanglelimit" field.</summary>
    public const int AdcCmdSteerwheelanglelimitFieldNumber = 3;
    private double adcCmdSteerwheelanglelimit_;
    /// <summary>
    /// Set limit for steering wheel angle. Applies in both positive and negative  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcCmdSteerwheelanglelimit {
      get { return adcCmdSteerwheelanglelimit_; }
      set {
        adcCmdSteerwheelanglelimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Adc_motioncontrollimits1_12);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Adc_motioncontrollimits1_12 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdcCmdThrottlecommandlimit != other.AdcCmdThrottlecommandlimit) return false;
      if (AdcCmdSteeringrate != other.AdcCmdSteeringrate) return false;
      if (AdcCmdSteerwheelanglelimit != other.AdcCmdSteerwheelanglelimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdcCmdThrottlecommandlimit != 0D) hash ^= AdcCmdThrottlecommandlimit.GetHashCode();
      if (AdcCmdSteeringrate != 0D) hash ^= AdcCmdSteeringrate.GetHashCode();
      if (AdcCmdSteerwheelanglelimit != 0D) hash ^= AdcCmdSteerwheelanglelimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdcCmdThrottlecommandlimit != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(AdcCmdThrottlecommandlimit);
      }
      if (AdcCmdSteeringrate != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AdcCmdSteeringrate);
      }
      if (AdcCmdSteerwheelanglelimit != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AdcCmdSteerwheelanglelimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdcCmdThrottlecommandlimit != 0D) {
        size += 1 + 8;
      }
      if (AdcCmdSteeringrate != 0D) {
        size += 1 + 8;
      }
      if (AdcCmdSteerwheelanglelimit != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Adc_motioncontrollimits1_12 other) {
      if (other == null) {
        return;
      }
      if (other.AdcCmdThrottlecommandlimit != 0D) {
        AdcCmdThrottlecommandlimit = other.AdcCmdThrottlecommandlimit;
      }
      if (other.AdcCmdSteeringrate != 0D) {
        AdcCmdSteeringrate = other.AdcCmdSteeringrate;
      }
      if (other.AdcCmdSteerwheelanglelimit != 0D) {
        AdcCmdSteerwheelanglelimit = other.AdcCmdSteerwheelanglelimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            AdcCmdThrottlecommandlimit = input.ReadDouble();
            break;
          }
          case 17: {
            AdcCmdSteeringrate = input.ReadDouble();
            break;
          }
          case 25: {
            AdcCmdSteerwheelanglelimit = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Llc_motionfeedback1_20 : pb::IMessage<Llc_motionfeedback1_20> {
    private static readonly pb::MessageParser<Llc_motionfeedback1_20> _parser = new pb::MessageParser<Llc_motionfeedback1_20>(() => new Llc_motionfeedback1_20());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_motionfeedback1_20> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motionfeedback1_20() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motionfeedback1_20(Llc_motionfeedback1_20 other) : this() {
      llcFbkGear_ = other.llcFbkGear_;
      llcFbkParkingbrake_ = other.llcFbkParkingbrake_;
      llcFbkThrottleposition_ = other.llcFbkThrottleposition_;
      llcFbkBrakepercentrear_ = other.llcFbkBrakepercentrear_;
      llcFbkBrakepercentfront_ = other.llcFbkBrakepercentfront_;
      llcFbkSteeringcontrolmode_ = other.llcFbkSteeringcontrolmode_;
      llcMotionfeedback1Counter_ = other.llcMotionfeedback1Counter_;
      llcMotionfeedback1Checksum_ = other.llcMotionfeedback1Checksum_;
      llcFbkCommandaligned_ = other.llcFbkCommandaligned_;
      llcFbkEstoppressed_ = other.llcFbkEstoppressed_;
      llcFbkAdcrequestautonomy_ = other.llcFbkAdcrequestautonomy_;
      llcFbkAllowautonomy_ = other.llcFbkAllowautonomy_;
      llcFbkLongitudinalcontrolmode_ = other.llcFbkLongitudinalcontrolmode_;
      llcFbkState_ = other.llcFbkState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motionfeedback1_20 Clone() {
      return new Llc_motionfeedback1_20(this);
    }

    /// <summary>Field number for the "llc_fbk_gear" field.</summary>
    public const int LlcFbkGearFieldNumber = 1;
    private global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_gearType llcFbkGear_ = 0;
    /// <summary>
    /// Current gear  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_gearType LlcFbkGear {
      get { return llcFbkGear_; }
      set {
        llcFbkGear_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_parkingbrake" field.</summary>
    public const int LlcFbkParkingbrakeFieldNumber = 2;
    private bool llcFbkParkingbrake_;
    /// <summary>
    /// Parking brake applied  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkParkingbrake {
      get { return llcFbkParkingbrake_; }
      set {
        llcFbkParkingbrake_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_throttleposition" field.</summary>
    public const int LlcFbkThrottlepositionFieldNumber = 3;
    private double llcFbkThrottleposition_;
    /// <summary>
    /// Throttle position feedback  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkThrottleposition {
      get { return llcFbkThrottleposition_; }
      set {
        llcFbkThrottleposition_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_brakepercentrear" field.</summary>
    public const int LlcFbkBrakepercentrearFieldNumber = 4;
    private double llcFbkBrakepercentrear_;
    /// <summary>
    /// Rear brake pressure feedback  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkBrakepercentrear {
      get { return llcFbkBrakepercentrear_; }
      set {
        llcFbkBrakepercentrear_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_brakepercentfront" field.</summary>
    public const int LlcFbkBrakepercentfrontFieldNumber = 5;
    private double llcFbkBrakepercentfront_;
    /// <summary>
    /// Front brake pressure feedback  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkBrakepercentfront {
      get { return llcFbkBrakepercentfront_; }
      set {
        llcFbkBrakepercentfront_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_steeringcontrolmode" field.</summary>
    public const int LlcFbkSteeringcontrolmodeFieldNumber = 6;
    private global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_steeringcontrolmodeType llcFbkSteeringcontrolmode_ = 0;
    /// <summary>
    /// Current steering control mode  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_steeringcontrolmodeType LlcFbkSteeringcontrolmode {
      get { return llcFbkSteeringcontrolmode_; }
      set {
        llcFbkSteeringcontrolmode_ = value;
      }
    }

    /// <summary>Field number for the "llc_motionfeedback1_counter" field.</summary>
    public const int LlcMotionfeedback1CounterFieldNumber = 7;
    private int llcMotionfeedback1Counter_;
    /// <summary>
    /// Motion feedback 1 heartbeat counter  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcMotionfeedback1Counter {
      get { return llcMotionfeedback1Counter_; }
      set {
        llcMotionfeedback1Counter_ = value;
      }
    }

    /// <summary>Field number for the "llc_motionfeedback1_checksum" field.</summary>
    public const int LlcMotionfeedback1ChecksumFieldNumber = 8;
    private int llcMotionfeedback1Checksum_;
    /// <summary>
    /// Motion feedback 1 checksum  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcMotionfeedback1Checksum {
      get { return llcMotionfeedback1Checksum_; }
      set {
        llcMotionfeedback1Checksum_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_commandaligned" field.</summary>
    public const int LlcFbkCommandalignedFieldNumber = 9;
    private bool llcFbkCommandaligned_;
    /// <summary>
    /// Autonomy command aligned with vehicle state according to calibration limits  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkCommandaligned {
      get { return llcFbkCommandaligned_; }
      set {
        llcFbkCommandaligned_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_estoppressed" field.</summary>
    public const int LlcFbkEstoppressedFieldNumber = 10;
    private bool llcFbkEstoppressed_;
    /// <summary>
    /// Estop is pressed  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkEstoppressed {
      get { return llcFbkEstoppressed_; }
      set {
        llcFbkEstoppressed_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_adcrequestautonomy" field.</summary>
    public const int LlcFbkAdcrequestautonomyFieldNumber = 11;
    private bool llcFbkAdcrequestautonomy_;
    /// <summary>
    /// Indicates that ADC is requesting autonomy mode  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkAdcrequestautonomy {
      get { return llcFbkAdcrequestautonomy_; }
      set {
        llcFbkAdcrequestautonomy_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_allowautonomy" field.</summary>
    public const int LlcFbkAllowautonomyFieldNumber = 12;
    private bool llcFbkAllowautonomy_;
    /// <summary>
    /// Indicates that LLC is ready to allow autonomy mode  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkAllowautonomy {
      get { return llcFbkAllowautonomy_; }
      set {
        llcFbkAllowautonomy_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_longitudinalcontrolmode" field.</summary>
    public const int LlcFbkLongitudinalcontrolmodeFieldNumber = 13;
    private global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_longitudinalcontrolmodeType llcFbkLongitudinalcontrolmode_ = 0;
    /// <summary>
    /// Report current longitudinal control mode  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_longitudinalcontrolmodeType LlcFbkLongitudinalcontrolmode {
      get { return llcFbkLongitudinalcontrolmode_; }
      set {
        llcFbkLongitudinalcontrolmode_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_state" field.</summary>
    public const int LlcFbkStateFieldNumber = 14;
    private global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_stateType llcFbkState_ = 0;
    /// <summary>
    /// Current Autonomy State  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_stateType LlcFbkState {
      get { return llcFbkState_; }
      set {
        llcFbkState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_motionfeedback1_20);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_motionfeedback1_20 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcFbkGear != other.LlcFbkGear) return false;
      if (LlcFbkParkingbrake != other.LlcFbkParkingbrake) return false;
      if (LlcFbkThrottleposition != other.LlcFbkThrottleposition) return false;
      if (LlcFbkBrakepercentrear != other.LlcFbkBrakepercentrear) return false;
      if (LlcFbkBrakepercentfront != other.LlcFbkBrakepercentfront) return false;
      if (LlcFbkSteeringcontrolmode != other.LlcFbkSteeringcontrolmode) return false;
      if (LlcMotionfeedback1Counter != other.LlcMotionfeedback1Counter) return false;
      if (LlcMotionfeedback1Checksum != other.LlcMotionfeedback1Checksum) return false;
      if (LlcFbkCommandaligned != other.LlcFbkCommandaligned) return false;
      if (LlcFbkEstoppressed != other.LlcFbkEstoppressed) return false;
      if (LlcFbkAdcrequestautonomy != other.LlcFbkAdcrequestautonomy) return false;
      if (LlcFbkAllowautonomy != other.LlcFbkAllowautonomy) return false;
      if (LlcFbkLongitudinalcontrolmode != other.LlcFbkLongitudinalcontrolmode) return false;
      if (LlcFbkState != other.LlcFbkState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcFbkGear != 0) hash ^= LlcFbkGear.GetHashCode();
      if (LlcFbkParkingbrake != false) hash ^= LlcFbkParkingbrake.GetHashCode();
      if (LlcFbkThrottleposition != 0D) hash ^= LlcFbkThrottleposition.GetHashCode();
      if (LlcFbkBrakepercentrear != 0D) hash ^= LlcFbkBrakepercentrear.GetHashCode();
      if (LlcFbkBrakepercentfront != 0D) hash ^= LlcFbkBrakepercentfront.GetHashCode();
      if (LlcFbkSteeringcontrolmode != 0) hash ^= LlcFbkSteeringcontrolmode.GetHashCode();
      if (LlcMotionfeedback1Counter != 0) hash ^= LlcMotionfeedback1Counter.GetHashCode();
      if (LlcMotionfeedback1Checksum != 0) hash ^= LlcMotionfeedback1Checksum.GetHashCode();
      if (LlcFbkCommandaligned != false) hash ^= LlcFbkCommandaligned.GetHashCode();
      if (LlcFbkEstoppressed != false) hash ^= LlcFbkEstoppressed.GetHashCode();
      if (LlcFbkAdcrequestautonomy != false) hash ^= LlcFbkAdcrequestautonomy.GetHashCode();
      if (LlcFbkAllowautonomy != false) hash ^= LlcFbkAllowautonomy.GetHashCode();
      if (LlcFbkLongitudinalcontrolmode != 0) hash ^= LlcFbkLongitudinalcontrolmode.GetHashCode();
      if (LlcFbkState != 0) hash ^= LlcFbkState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcFbkGear != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LlcFbkGear);
      }
      if (LlcFbkParkingbrake != false) {
        output.WriteRawTag(16);
        output.WriteBool(LlcFbkParkingbrake);
      }
      if (LlcFbkThrottleposition != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LlcFbkThrottleposition);
      }
      if (LlcFbkBrakepercentrear != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LlcFbkBrakepercentrear);
      }
      if (LlcFbkBrakepercentfront != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LlcFbkBrakepercentfront);
      }
      if (LlcFbkSteeringcontrolmode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LlcFbkSteeringcontrolmode);
      }
      if (LlcMotionfeedback1Counter != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LlcMotionfeedback1Counter);
      }
      if (LlcMotionfeedback1Checksum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LlcMotionfeedback1Checksum);
      }
      if (LlcFbkCommandaligned != false) {
        output.WriteRawTag(72);
        output.WriteBool(LlcFbkCommandaligned);
      }
      if (LlcFbkEstoppressed != false) {
        output.WriteRawTag(80);
        output.WriteBool(LlcFbkEstoppressed);
      }
      if (LlcFbkAdcrequestautonomy != false) {
        output.WriteRawTag(88);
        output.WriteBool(LlcFbkAdcrequestautonomy);
      }
      if (LlcFbkAllowautonomy != false) {
        output.WriteRawTag(96);
        output.WriteBool(LlcFbkAllowautonomy);
      }
      if (LlcFbkLongitudinalcontrolmode != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) LlcFbkLongitudinalcontrolmode);
      }
      if (LlcFbkState != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) LlcFbkState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcFbkGear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LlcFbkGear);
      }
      if (LlcFbkParkingbrake != false) {
        size += 1 + 1;
      }
      if (LlcFbkThrottleposition != 0D) {
        size += 1 + 8;
      }
      if (LlcFbkBrakepercentrear != 0D) {
        size += 1 + 8;
      }
      if (LlcFbkBrakepercentfront != 0D) {
        size += 1 + 8;
      }
      if (LlcFbkSteeringcontrolmode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LlcFbkSteeringcontrolmode);
      }
      if (LlcMotionfeedback1Counter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcMotionfeedback1Counter);
      }
      if (LlcMotionfeedback1Checksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcMotionfeedback1Checksum);
      }
      if (LlcFbkCommandaligned != false) {
        size += 1 + 1;
      }
      if (LlcFbkEstoppressed != false) {
        size += 1 + 1;
      }
      if (LlcFbkAdcrequestautonomy != false) {
        size += 1 + 1;
      }
      if (LlcFbkAllowautonomy != false) {
        size += 1 + 1;
      }
      if (LlcFbkLongitudinalcontrolmode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LlcFbkLongitudinalcontrolmode);
      }
      if (LlcFbkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LlcFbkState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_motionfeedback1_20 other) {
      if (other == null) {
        return;
      }
      if (other.LlcFbkGear != 0) {
        LlcFbkGear = other.LlcFbkGear;
      }
      if (other.LlcFbkParkingbrake != false) {
        LlcFbkParkingbrake = other.LlcFbkParkingbrake;
      }
      if (other.LlcFbkThrottleposition != 0D) {
        LlcFbkThrottleposition = other.LlcFbkThrottleposition;
      }
      if (other.LlcFbkBrakepercentrear != 0D) {
        LlcFbkBrakepercentrear = other.LlcFbkBrakepercentrear;
      }
      if (other.LlcFbkBrakepercentfront != 0D) {
        LlcFbkBrakepercentfront = other.LlcFbkBrakepercentfront;
      }
      if (other.LlcFbkSteeringcontrolmode != 0) {
        LlcFbkSteeringcontrolmode = other.LlcFbkSteeringcontrolmode;
      }
      if (other.LlcMotionfeedback1Counter != 0) {
        LlcMotionfeedback1Counter = other.LlcMotionfeedback1Counter;
      }
      if (other.LlcMotionfeedback1Checksum != 0) {
        LlcMotionfeedback1Checksum = other.LlcMotionfeedback1Checksum;
      }
      if (other.LlcFbkCommandaligned != false) {
        LlcFbkCommandaligned = other.LlcFbkCommandaligned;
      }
      if (other.LlcFbkEstoppressed != false) {
        LlcFbkEstoppressed = other.LlcFbkEstoppressed;
      }
      if (other.LlcFbkAdcrequestautonomy != false) {
        LlcFbkAdcrequestautonomy = other.LlcFbkAdcrequestautonomy;
      }
      if (other.LlcFbkAllowautonomy != false) {
        LlcFbkAllowautonomy = other.LlcFbkAllowautonomy;
      }
      if (other.LlcFbkLongitudinalcontrolmode != 0) {
        LlcFbkLongitudinalcontrolmode = other.LlcFbkLongitudinalcontrolmode;
      }
      if (other.LlcFbkState != 0) {
        LlcFbkState = other.LlcFbkState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            llcFbkGear_ = (global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_gearType) input.ReadEnum();
            break;
          }
          case 16: {
            LlcFbkParkingbrake = input.ReadBool();
            break;
          }
          case 25: {
            LlcFbkThrottleposition = input.ReadDouble();
            break;
          }
          case 33: {
            LlcFbkBrakepercentrear = input.ReadDouble();
            break;
          }
          case 41: {
            LlcFbkBrakepercentfront = input.ReadDouble();
            break;
          }
          case 48: {
            llcFbkSteeringcontrolmode_ = (global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_steeringcontrolmodeType) input.ReadEnum();
            break;
          }
          case 56: {
            LlcMotionfeedback1Counter = input.ReadInt32();
            break;
          }
          case 64: {
            LlcMotionfeedback1Checksum = input.ReadInt32();
            break;
          }
          case 72: {
            LlcFbkCommandaligned = input.ReadBool();
            break;
          }
          case 80: {
            LlcFbkEstoppressed = input.ReadBool();
            break;
          }
          case 88: {
            LlcFbkAdcrequestautonomy = input.ReadBool();
            break;
          }
          case 96: {
            LlcFbkAllowautonomy = input.ReadBool();
            break;
          }
          case 104: {
            llcFbkLongitudinalcontrolmode_ = (global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_longitudinalcontrolmodeType) input.ReadEnum();
            break;
          }
          case 112: {
            llcFbkState_ = (global::Apollo.Canbus.Llc_motionfeedback1_20.Types.Llc_fbk_stateType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Llc_motionfeedback1_20 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Llc_fbk_gearType {
        [pbr::OriginalName("LLC_FBK_GEAR_P_PARK")] LlcFbkGearPPark = 0,
        [pbr::OriginalName("LLC_FBK_GEAR_D_DRIVE")] LlcFbkGearDDrive = 1,
        [pbr::OriginalName("LLC_FBK_GEAR_N_NEUTRAL")] LlcFbkGearNNeutral = 2,
        [pbr::OriginalName("LLC_FBK_GEAR_R_REVERSE")] LlcFbkGearRReverse = 3,
      }

      public enum Llc_fbk_steeringcontrolmodeType {
        [pbr::OriginalName("LLC_FBK_STEERINGCONTROLMODE_NONE")] LlcFbkSteeringcontrolmodeNone = 0,
        [pbr::OriginalName("LLC_FBK_STEERINGCONTROLMODE_ANGLE")] LlcFbkSteeringcontrolmodeAngle = 1,
        [pbr::OriginalName("LLC_FBK_STEERINGCONTROLMODE_RESERVED_CURVATURE")] LlcFbkSteeringcontrolmodeReservedCurvature = 2,
        [pbr::OriginalName("LLC_FBK_STEERINGCONTROLMODE_RESERVED")] LlcFbkSteeringcontrolmodeReserved = 3,
      }

      public enum Llc_fbk_longitudinalcontrolmodeType {
        [pbr::OriginalName("LLC_FBK_LONGITUDINALCONTROLMODE_NONE")] LlcFbkLongitudinalcontrolmodeNone = 0,
        [pbr::OriginalName("LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION")] LlcFbkLongitudinalcontrolmodeReservedVelocityAndAcceleration = 1,
        [pbr::OriginalName("LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_FORCE")] LlcFbkLongitudinalcontrolmodeReservedForce = 2,
        [pbr::OriginalName("LLC_FBK_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE")] LlcFbkLongitudinalcontrolmodeDirectThrottleBrake = 3,
      }

      public enum Llc_fbk_stateType {
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED0")] LlcFbkStateReserved0 = 0,
        [pbr::OriginalName("LLC_FBK_STATE_AUTONOMY_NOT_ALLOWED")] LlcFbkStateAutonomyNotAllowed = 1,
        [pbr::OriginalName("LLC_FBK_STATE_AUTONOMY_ALLOWED")] LlcFbkStateAutonomyAllowed = 2,
        [pbr::OriginalName("LLC_FBK_STATE_AUTONOMY_REQUESTED")] LlcFbkStateAutonomyRequested = 3,
        [pbr::OriginalName("LLC_FBK_STATE_AUTONOMY")] LlcFbkStateAutonomy = 4,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED1")] LlcFbkStateReserved1 = 5,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED2")] LlcFbkStateReserved2 = 6,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED3")] LlcFbkStateReserved3 = 7,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED4")] LlcFbkStateReserved4 = 8,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED5")] LlcFbkStateReserved5 = 9,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED6")] LlcFbkStateReserved6 = 10,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED7")] LlcFbkStateReserved7 = 11,
        [pbr::OriginalName("LLC_FBK_STATE_RESERVED8")] LlcFbkStateReserved8 = 12,
        [pbr::OriginalName("LLC_FBK_STATE_DISENGAGE_REQUESTED")] LlcFbkStateDisengageRequested = 13,
        [pbr::OriginalName("LLC_FBK_STATE_DISENGAGED")] LlcFbkStateDisengaged = 14,
        [pbr::OriginalName("LLC_FBK_STATE_FAULT")] LlcFbkStateFault = 15,
      }

    }
    #endregion

  }

  public sealed partial class Llc_motionfeedback2_21 : pb::IMessage<Llc_motionfeedback2_21> {
    private static readonly pb::MessageParser<Llc_motionfeedback2_21> _parser = new pb::MessageParser<Llc_motionfeedback2_21>(() => new Llc_motionfeedback2_21());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_motionfeedback2_21> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motionfeedback2_21() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motionfeedback2_21(Llc_motionfeedback2_21 other) : this() {
      llcFbkVehiclespeed_ = other.llcFbkVehiclespeed_;
      llcMotionfeedback2Counter_ = other.llcMotionfeedback2Counter_;
      llcMotionfeedback2Checksum_ = other.llcMotionfeedback2Checksum_;
      llcFbkSteeringrate_ = other.llcFbkSteeringrate_;
      llcFbkSteeringangle_ = other.llcFbkSteeringangle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motionfeedback2_21 Clone() {
      return new Llc_motionfeedback2_21(this);
    }

    /// <summary>Field number for the "llc_fbk_vehiclespeed" field.</summary>
    public const int LlcFbkVehiclespeedFieldNumber = 1;
    private double llcFbkVehiclespeed_;
    /// <summary>
    /// Report Message
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkVehiclespeed {
      get { return llcFbkVehiclespeed_; }
      set {
        llcFbkVehiclespeed_ = value;
      }
    }

    /// <summary>Field number for the "llc_motionfeedback2_counter" field.</summary>
    public const int LlcMotionfeedback2CounterFieldNumber = 2;
    private int llcMotionfeedback2Counter_;
    /// <summary>
    /// Motion feedback 2 heartbeat counter  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcMotionfeedback2Counter {
      get { return llcMotionfeedback2Counter_; }
      set {
        llcMotionfeedback2Counter_ = value;
      }
    }

    /// <summary>Field number for the "llc_motionfeedback2_checksum" field.</summary>
    public const int LlcMotionfeedback2ChecksumFieldNumber = 3;
    private int llcMotionfeedback2Checksum_;
    /// <summary>
    /// Motion feedback 2 checksum  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcMotionfeedback2Checksum {
      get { return llcMotionfeedback2Checksum_; }
      set {
        llcMotionfeedback2Checksum_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_steeringrate" field.</summary>
    public const int LlcFbkSteeringrateFieldNumber = 4;
    private double llcFbkSteeringrate_;
    /// <summary>
    /// Steer wheel angle feedback from SbW motor (? rate)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkSteeringrate {
      get { return llcFbkSteeringrate_; }
      set {
        llcFbkSteeringrate_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_steeringangle" field.</summary>
    public const int LlcFbkSteeringangleFieldNumber = 5;
    private double llcFbkSteeringangle_;
    /// <summary>
    /// Steering angle feedback  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkSteeringangle {
      get { return llcFbkSteeringangle_; }
      set {
        llcFbkSteeringangle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_motionfeedback2_21);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_motionfeedback2_21 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcFbkVehiclespeed != other.LlcFbkVehiclespeed) return false;
      if (LlcMotionfeedback2Counter != other.LlcMotionfeedback2Counter) return false;
      if (LlcMotionfeedback2Checksum != other.LlcMotionfeedback2Checksum) return false;
      if (LlcFbkSteeringrate != other.LlcFbkSteeringrate) return false;
      if (LlcFbkSteeringangle != other.LlcFbkSteeringangle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcFbkVehiclespeed != 0D) hash ^= LlcFbkVehiclespeed.GetHashCode();
      if (LlcMotionfeedback2Counter != 0) hash ^= LlcMotionfeedback2Counter.GetHashCode();
      if (LlcMotionfeedback2Checksum != 0) hash ^= LlcMotionfeedback2Checksum.GetHashCode();
      if (LlcFbkSteeringrate != 0D) hash ^= LlcFbkSteeringrate.GetHashCode();
      if (LlcFbkSteeringangle != 0D) hash ^= LlcFbkSteeringangle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcFbkVehiclespeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LlcFbkVehiclespeed);
      }
      if (LlcMotionfeedback2Counter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LlcMotionfeedback2Counter);
      }
      if (LlcMotionfeedback2Checksum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LlcMotionfeedback2Checksum);
      }
      if (LlcFbkSteeringrate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LlcFbkSteeringrate);
      }
      if (LlcFbkSteeringangle != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LlcFbkSteeringangle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcFbkVehiclespeed != 0D) {
        size += 1 + 8;
      }
      if (LlcMotionfeedback2Counter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcMotionfeedback2Counter);
      }
      if (LlcMotionfeedback2Checksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcMotionfeedback2Checksum);
      }
      if (LlcFbkSteeringrate != 0D) {
        size += 1 + 8;
      }
      if (LlcFbkSteeringangle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_motionfeedback2_21 other) {
      if (other == null) {
        return;
      }
      if (other.LlcFbkVehiclespeed != 0D) {
        LlcFbkVehiclespeed = other.LlcFbkVehiclespeed;
      }
      if (other.LlcMotionfeedback2Counter != 0) {
        LlcMotionfeedback2Counter = other.LlcMotionfeedback2Counter;
      }
      if (other.LlcMotionfeedback2Checksum != 0) {
        LlcMotionfeedback2Checksum = other.LlcMotionfeedback2Checksum;
      }
      if (other.LlcFbkSteeringrate != 0D) {
        LlcFbkSteeringrate = other.LlcFbkSteeringrate;
      }
      if (other.LlcFbkSteeringangle != 0D) {
        LlcFbkSteeringangle = other.LlcFbkSteeringangle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LlcFbkVehiclespeed = input.ReadDouble();
            break;
          }
          case 16: {
            LlcMotionfeedback2Counter = input.ReadInt32();
            break;
          }
          case 24: {
            LlcMotionfeedback2Checksum = input.ReadInt32();
            break;
          }
          case 33: {
            LlcFbkSteeringrate = input.ReadDouble();
            break;
          }
          case 41: {
            LlcFbkSteeringangle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Llc_motioncommandfeedback1_22 : pb::IMessage<Llc_motioncommandfeedback1_22> {
    private static readonly pb::MessageParser<Llc_motioncommandfeedback1_22> _parser = new pb::MessageParser<Llc_motioncommandfeedback1_22>(() => new Llc_motioncommandfeedback1_22());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_motioncommandfeedback1_22> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motioncommandfeedback1_22() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motioncommandfeedback1_22(Llc_motioncommandfeedback1_22 other) : this() {
      llcFbkSteeringanglesetpoint_ = other.llcFbkSteeringanglesetpoint_;
      llcFbkThrottlesetpoint_ = other.llcFbkThrottlesetpoint_;
      llcFbkBrakepercentsetpoint_ = other.llcFbkBrakepercentsetpoint_;
      llcMotioncommandfeedback1Count_ = other.llcMotioncommandfeedback1Count_;
      llcMotioncommandfeedback1Check_ = other.llcMotioncommandfeedback1Check_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_motioncommandfeedback1_22 Clone() {
      return new Llc_motioncommandfeedback1_22(this);
    }

    /// <summary>Field number for the "llc_fbk_steeringanglesetpoint" field.</summary>
    public const int LlcFbkSteeringanglesetpointFieldNumber = 1;
    private double llcFbkSteeringanglesetpoint_;
    /// <summary>
    /// Report Message
    /// Steering angle setpoint (after limits)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkSteeringanglesetpoint {
      get { return llcFbkSteeringanglesetpoint_; }
      set {
        llcFbkSteeringanglesetpoint_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_throttlesetpoint" field.</summary>
    public const int LlcFbkThrottlesetpointFieldNumber = 2;
    private double llcFbkThrottlesetpoint_;
    /// <summary>
    /// Current throttle setpoint (after limits)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkThrottlesetpoint {
      get { return llcFbkThrottlesetpoint_; }
      set {
        llcFbkThrottlesetpoint_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_brakepercentsetpoint" field.</summary>
    public const int LlcFbkBrakepercentsetpointFieldNumber = 3;
    private double llcFbkBrakepercentsetpoint_;
    /// <summary>
    /// Front brake pressure setpoint (after limits)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbkBrakepercentsetpoint {
      get { return llcFbkBrakepercentsetpoint_; }
      set {
        llcFbkBrakepercentsetpoint_ = value;
      }
    }

    /// <summary>Field number for the "llc_motioncommandfeedback1_count" field.</summary>
    public const int LlcMotioncommandfeedback1CountFieldNumber = 4;
    private int llcMotioncommandfeedback1Count_;
    /// <summary>
    /// Motion command feedback 2 heartbeat counter  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcMotioncommandfeedback1Count {
      get { return llcMotioncommandfeedback1Count_; }
      set {
        llcMotioncommandfeedback1Count_ = value;
      }
    }

    /// <summary>Field number for the "llc_motioncommandfeedback1_check" field.</summary>
    public const int LlcMotioncommandfeedback1CheckFieldNumber = 5;
    private int llcMotioncommandfeedback1Check_;
    /// <summary>
    /// Motion command feedback 1 checksum  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcMotioncommandfeedback1Check {
      get { return llcMotioncommandfeedback1Check_; }
      set {
        llcMotioncommandfeedback1Check_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_motioncommandfeedback1_22);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_motioncommandfeedback1_22 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcFbkSteeringanglesetpoint != other.LlcFbkSteeringanglesetpoint) return false;
      if (LlcFbkThrottlesetpoint != other.LlcFbkThrottlesetpoint) return false;
      if (LlcFbkBrakepercentsetpoint != other.LlcFbkBrakepercentsetpoint) return false;
      if (LlcMotioncommandfeedback1Count != other.LlcMotioncommandfeedback1Count) return false;
      if (LlcMotioncommandfeedback1Check != other.LlcMotioncommandfeedback1Check) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcFbkSteeringanglesetpoint != 0D) hash ^= LlcFbkSteeringanglesetpoint.GetHashCode();
      if (LlcFbkThrottlesetpoint != 0D) hash ^= LlcFbkThrottlesetpoint.GetHashCode();
      if (LlcFbkBrakepercentsetpoint != 0D) hash ^= LlcFbkBrakepercentsetpoint.GetHashCode();
      if (LlcMotioncommandfeedback1Count != 0) hash ^= LlcMotioncommandfeedback1Count.GetHashCode();
      if (LlcMotioncommandfeedback1Check != 0) hash ^= LlcMotioncommandfeedback1Check.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcFbkSteeringanglesetpoint != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LlcFbkSteeringanglesetpoint);
      }
      if (LlcFbkThrottlesetpoint != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LlcFbkThrottlesetpoint);
      }
      if (LlcFbkBrakepercentsetpoint != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LlcFbkBrakepercentsetpoint);
      }
      if (LlcMotioncommandfeedback1Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LlcMotioncommandfeedback1Count);
      }
      if (LlcMotioncommandfeedback1Check != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LlcMotioncommandfeedback1Check);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcFbkSteeringanglesetpoint != 0D) {
        size += 1 + 8;
      }
      if (LlcFbkThrottlesetpoint != 0D) {
        size += 1 + 8;
      }
      if (LlcFbkBrakepercentsetpoint != 0D) {
        size += 1 + 8;
      }
      if (LlcMotioncommandfeedback1Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcMotioncommandfeedback1Count);
      }
      if (LlcMotioncommandfeedback1Check != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcMotioncommandfeedback1Check);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_motioncommandfeedback1_22 other) {
      if (other == null) {
        return;
      }
      if (other.LlcFbkSteeringanglesetpoint != 0D) {
        LlcFbkSteeringanglesetpoint = other.LlcFbkSteeringanglesetpoint;
      }
      if (other.LlcFbkThrottlesetpoint != 0D) {
        LlcFbkThrottlesetpoint = other.LlcFbkThrottlesetpoint;
      }
      if (other.LlcFbkBrakepercentsetpoint != 0D) {
        LlcFbkBrakepercentsetpoint = other.LlcFbkBrakepercentsetpoint;
      }
      if (other.LlcMotioncommandfeedback1Count != 0) {
        LlcMotioncommandfeedback1Count = other.LlcMotioncommandfeedback1Count;
      }
      if (other.LlcMotioncommandfeedback1Check != 0) {
        LlcMotioncommandfeedback1Check = other.LlcMotioncommandfeedback1Check;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LlcFbkSteeringanglesetpoint = input.ReadDouble();
            break;
          }
          case 17: {
            LlcFbkThrottlesetpoint = input.ReadDouble();
            break;
          }
          case 25: {
            LlcFbkBrakepercentsetpoint = input.ReadDouble();
            break;
          }
          case 32: {
            LlcMotioncommandfeedback1Count = input.ReadInt32();
            break;
          }
          case 40: {
            LlcMotioncommandfeedback1Check = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Llc_vehiclestatus_25 : pb::IMessage<Llc_vehiclestatus_25> {
    private static readonly pb::MessageParser<Llc_vehiclestatus_25> _parser = new pb::MessageParser<Llc_vehiclestatus_25>(() => new Llc_vehiclestatus_25());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_vehiclestatus_25> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_vehiclestatus_25() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_vehiclestatus_25(Llc_vehiclestatus_25 other) : this() {
      llcFbk12Voltage_ = other.llcFbk12Voltage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_vehiclestatus_25 Clone() {
      return new Llc_vehiclestatus_25(this);
    }

    /// <summary>Field number for the "llc_fbk_12voltage" field.</summary>
    public const int LlcFbk12VoltageFieldNumber = 1;
    private double llcFbk12Voltage_;
    /// <summary>
    /// Report Message
    /// Vehicle 12V voltage feedback  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcFbk12Voltage {
      get { return llcFbk12Voltage_; }
      set {
        llcFbk12Voltage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_vehiclestatus_25);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_vehiclestatus_25 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcFbk12Voltage != other.LlcFbk12Voltage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcFbk12Voltage != 0D) hash ^= LlcFbk12Voltage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcFbk12Voltage != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LlcFbk12Voltage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcFbk12Voltage != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_vehiclestatus_25 other) {
      if (other == null) {
        return;
      }
      if (other.LlcFbk12Voltage != 0D) {
        LlcFbk12Voltage = other.LlcFbk12Voltage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LlcFbk12Voltage = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Llc_auxiliaryfeedback_120 : pb::IMessage<Llc_auxiliaryfeedback_120> {
    private static readonly pb::MessageParser<Llc_auxiliaryfeedback_120> _parser = new pb::MessageParser<Llc_auxiliaryfeedback_120>(() => new Llc_auxiliaryfeedback_120());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_auxiliaryfeedback_120> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_auxiliaryfeedback_120() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_auxiliaryfeedback_120(Llc_auxiliaryfeedback_120 other) : this() {
      llcFbkInverter_ = other.llcFbkInverter_;
      llcFbkPduCh8_ = other.llcFbkPduCh8_;
      llcFbkPduCh7_ = other.llcFbkPduCh7_;
      llcFbkPduCh6_ = other.llcFbkPduCh6_;
      llcFbkPduCh5_ = other.llcFbkPduCh5_;
      llcFbkPduCh4_ = other.llcFbkPduCh4_;
      llcFbkPduCh3_ = other.llcFbkPduCh3_;
      llcFbkPduCh2_ = other.llcFbkPduCh2_;
      llcFbkPduCh1_ = other.llcFbkPduCh1_;
      llcFbkHazardlights_ = other.llcFbkHazardlights_;
      llcFbkLedgreenon_ = other.llcFbkLedgreenon_;
      llcFbkHorn_ = other.llcFbkHorn_;
      llcFbkBuzzeron_ = other.llcFbkBuzzeron_;
      llcFbkTurnsignal_ = other.llcFbkTurnsignal_;
      llcFbkLowbeam_ = other.llcFbkLowbeam_;
      llcFbkHighbeam_ = other.llcFbkHighbeam_;
      llcFbkLedredon_ = other.llcFbkLedredon_;
      llcFbkAutonomybuttonpressed_ = other.llcFbkAutonomybuttonpressed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_auxiliaryfeedback_120 Clone() {
      return new Llc_auxiliaryfeedback_120(this);
    }

    /// <summary>Field number for the "llc_fbk_inverter" field.</summary>
    public const int LlcFbkInverterFieldNumber = 1;
    private bool llcFbkInverter_;
    /// <summary>
    /// Inverter enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkInverter {
      get { return llcFbkInverter_; }
      set {
        llcFbkInverter_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch8" field.</summary>
    public const int LlcFbkPduCh8FieldNumber = 2;
    private bool llcFbkPduCh8_;
    /// <summary>
    /// PDU Channel 8 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh8 {
      get { return llcFbkPduCh8_; }
      set {
        llcFbkPduCh8_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch7" field.</summary>
    public const int LlcFbkPduCh7FieldNumber = 3;
    private bool llcFbkPduCh7_;
    /// <summary>
    /// PDU Channel 7 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh7 {
      get { return llcFbkPduCh7_; }
      set {
        llcFbkPduCh7_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch6" field.</summary>
    public const int LlcFbkPduCh6FieldNumber = 4;
    private bool llcFbkPduCh6_;
    /// <summary>
    /// PDU Channel 6 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh6 {
      get { return llcFbkPduCh6_; }
      set {
        llcFbkPduCh6_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch5" field.</summary>
    public const int LlcFbkPduCh5FieldNumber = 5;
    private bool llcFbkPduCh5_;
    /// <summary>
    /// PDU Channel 5 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh5 {
      get { return llcFbkPduCh5_; }
      set {
        llcFbkPduCh5_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch4" field.</summary>
    public const int LlcFbkPduCh4FieldNumber = 6;
    private bool llcFbkPduCh4_;
    /// <summary>
    /// PDU Channel 4 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh4 {
      get { return llcFbkPduCh4_; }
      set {
        llcFbkPduCh4_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch3" field.</summary>
    public const int LlcFbkPduCh3FieldNumber = 7;
    private bool llcFbkPduCh3_;
    /// <summary>
    /// PDU Channel 3 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh3 {
      get { return llcFbkPduCh3_; }
      set {
        llcFbkPduCh3_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch2" field.</summary>
    public const int LlcFbkPduCh2FieldNumber = 8;
    private bool llcFbkPduCh2_;
    /// <summary>
    /// PDU Channel 2 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh2 {
      get { return llcFbkPduCh2_; }
      set {
        llcFbkPduCh2_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_pdu_ch1" field.</summary>
    public const int LlcFbkPduCh1FieldNumber = 9;
    private bool llcFbkPduCh1_;
    /// <summary>
    /// PDU Channel 1 enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkPduCh1 {
      get { return llcFbkPduCh1_; }
      set {
        llcFbkPduCh1_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_hazardlights" field.</summary>
    public const int LlcFbkHazardlightsFieldNumber = 10;
    private bool llcFbkHazardlights_;
    /// <summary>
    /// Hazard lights enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkHazardlights {
      get { return llcFbkHazardlights_; }
      set {
        llcFbkHazardlights_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_ledgreenon" field.</summary>
    public const int LlcFbkLedgreenonFieldNumber = 11;
    private bool llcFbkLedgreenon_;
    /// <summary>
    /// Autonomy indicator green LED on  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkLedgreenon {
      get { return llcFbkLedgreenon_; }
      set {
        llcFbkLedgreenon_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_horn" field.</summary>
    public const int LlcFbkHornFieldNumber = 12;
    private bool llcFbkHorn_;
    /// <summary>
    /// Horn enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkHorn {
      get { return llcFbkHorn_; }
      set {
        llcFbkHorn_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_buzzeron" field.</summary>
    public const int LlcFbkBuzzeronFieldNumber = 13;
    private bool llcFbkBuzzeron_;
    /// <summary>
    /// Buzzer enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkBuzzeron {
      get { return llcFbkBuzzeron_; }
      set {
        llcFbkBuzzeron_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_turnsignal" field.</summary>
    public const int LlcFbkTurnsignalFieldNumber = 14;
    private global::Apollo.Canbus.Llc_auxiliaryfeedback_120.Types.Llc_fbk_turnsignalType llcFbkTurnsignal_ = 0;
    /// <summary>
    /// Current turn signal status  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_auxiliaryfeedback_120.Types.Llc_fbk_turnsignalType LlcFbkTurnsignal {
      get { return llcFbkTurnsignal_; }
      set {
        llcFbkTurnsignal_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_lowbeam" field.</summary>
    public const int LlcFbkLowbeamFieldNumber = 15;
    private bool llcFbkLowbeam_;
    /// <summary>
    /// Low beam enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkLowbeam {
      get { return llcFbkLowbeam_; }
      set {
        llcFbkLowbeam_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_highbeam" field.</summary>
    public const int LlcFbkHighbeamFieldNumber = 16;
    private bool llcFbkHighbeam_;
    /// <summary>
    /// High beam enabled  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkHighbeam {
      get { return llcFbkHighbeam_; }
      set {
        llcFbkHighbeam_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_ledredon" field.</summary>
    public const int LlcFbkLedredonFieldNumber = 17;
    private bool llcFbkLedredon_;
    /// <summary>
    /// Autonomy indicator red LED on  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkLedredon {
      get { return llcFbkLedredon_; }
      set {
        llcFbkLedredon_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_autonomybuttonpressed" field.</summary>
    public const int LlcFbkAutonomybuttonpressedFieldNumber = 18;
    private bool llcFbkAutonomybuttonpressed_;
    /// <summary>
    /// Autonomy button is pressed  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcFbkAutonomybuttonpressed {
      get { return llcFbkAutonomybuttonpressed_; }
      set {
        llcFbkAutonomybuttonpressed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_auxiliaryfeedback_120);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_auxiliaryfeedback_120 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcFbkInverter != other.LlcFbkInverter) return false;
      if (LlcFbkPduCh8 != other.LlcFbkPduCh8) return false;
      if (LlcFbkPduCh7 != other.LlcFbkPduCh7) return false;
      if (LlcFbkPduCh6 != other.LlcFbkPduCh6) return false;
      if (LlcFbkPduCh5 != other.LlcFbkPduCh5) return false;
      if (LlcFbkPduCh4 != other.LlcFbkPduCh4) return false;
      if (LlcFbkPduCh3 != other.LlcFbkPduCh3) return false;
      if (LlcFbkPduCh2 != other.LlcFbkPduCh2) return false;
      if (LlcFbkPduCh1 != other.LlcFbkPduCh1) return false;
      if (LlcFbkHazardlights != other.LlcFbkHazardlights) return false;
      if (LlcFbkLedgreenon != other.LlcFbkLedgreenon) return false;
      if (LlcFbkHorn != other.LlcFbkHorn) return false;
      if (LlcFbkBuzzeron != other.LlcFbkBuzzeron) return false;
      if (LlcFbkTurnsignal != other.LlcFbkTurnsignal) return false;
      if (LlcFbkLowbeam != other.LlcFbkLowbeam) return false;
      if (LlcFbkHighbeam != other.LlcFbkHighbeam) return false;
      if (LlcFbkLedredon != other.LlcFbkLedredon) return false;
      if (LlcFbkAutonomybuttonpressed != other.LlcFbkAutonomybuttonpressed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcFbkInverter != false) hash ^= LlcFbkInverter.GetHashCode();
      if (LlcFbkPduCh8 != false) hash ^= LlcFbkPduCh8.GetHashCode();
      if (LlcFbkPduCh7 != false) hash ^= LlcFbkPduCh7.GetHashCode();
      if (LlcFbkPduCh6 != false) hash ^= LlcFbkPduCh6.GetHashCode();
      if (LlcFbkPduCh5 != false) hash ^= LlcFbkPduCh5.GetHashCode();
      if (LlcFbkPduCh4 != false) hash ^= LlcFbkPduCh4.GetHashCode();
      if (LlcFbkPduCh3 != false) hash ^= LlcFbkPduCh3.GetHashCode();
      if (LlcFbkPduCh2 != false) hash ^= LlcFbkPduCh2.GetHashCode();
      if (LlcFbkPduCh1 != false) hash ^= LlcFbkPduCh1.GetHashCode();
      if (LlcFbkHazardlights != false) hash ^= LlcFbkHazardlights.GetHashCode();
      if (LlcFbkLedgreenon != false) hash ^= LlcFbkLedgreenon.GetHashCode();
      if (LlcFbkHorn != false) hash ^= LlcFbkHorn.GetHashCode();
      if (LlcFbkBuzzeron != false) hash ^= LlcFbkBuzzeron.GetHashCode();
      if (LlcFbkTurnsignal != 0) hash ^= LlcFbkTurnsignal.GetHashCode();
      if (LlcFbkLowbeam != false) hash ^= LlcFbkLowbeam.GetHashCode();
      if (LlcFbkHighbeam != false) hash ^= LlcFbkHighbeam.GetHashCode();
      if (LlcFbkLedredon != false) hash ^= LlcFbkLedredon.GetHashCode();
      if (LlcFbkAutonomybuttonpressed != false) hash ^= LlcFbkAutonomybuttonpressed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcFbkInverter != false) {
        output.WriteRawTag(8);
        output.WriteBool(LlcFbkInverter);
      }
      if (LlcFbkPduCh8 != false) {
        output.WriteRawTag(16);
        output.WriteBool(LlcFbkPduCh8);
      }
      if (LlcFbkPduCh7 != false) {
        output.WriteRawTag(24);
        output.WriteBool(LlcFbkPduCh7);
      }
      if (LlcFbkPduCh6 != false) {
        output.WriteRawTag(32);
        output.WriteBool(LlcFbkPduCh6);
      }
      if (LlcFbkPduCh5 != false) {
        output.WriteRawTag(40);
        output.WriteBool(LlcFbkPduCh5);
      }
      if (LlcFbkPduCh4 != false) {
        output.WriteRawTag(48);
        output.WriteBool(LlcFbkPduCh4);
      }
      if (LlcFbkPduCh3 != false) {
        output.WriteRawTag(56);
        output.WriteBool(LlcFbkPduCh3);
      }
      if (LlcFbkPduCh2 != false) {
        output.WriteRawTag(64);
        output.WriteBool(LlcFbkPduCh2);
      }
      if (LlcFbkPduCh1 != false) {
        output.WriteRawTag(72);
        output.WriteBool(LlcFbkPduCh1);
      }
      if (LlcFbkHazardlights != false) {
        output.WriteRawTag(80);
        output.WriteBool(LlcFbkHazardlights);
      }
      if (LlcFbkLedgreenon != false) {
        output.WriteRawTag(88);
        output.WriteBool(LlcFbkLedgreenon);
      }
      if (LlcFbkHorn != false) {
        output.WriteRawTag(96);
        output.WriteBool(LlcFbkHorn);
      }
      if (LlcFbkBuzzeron != false) {
        output.WriteRawTag(104);
        output.WriteBool(LlcFbkBuzzeron);
      }
      if (LlcFbkTurnsignal != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) LlcFbkTurnsignal);
      }
      if (LlcFbkLowbeam != false) {
        output.WriteRawTag(120);
        output.WriteBool(LlcFbkLowbeam);
      }
      if (LlcFbkHighbeam != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(LlcFbkHighbeam);
      }
      if (LlcFbkLedredon != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(LlcFbkLedredon);
      }
      if (LlcFbkAutonomybuttonpressed != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(LlcFbkAutonomybuttonpressed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcFbkInverter != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh8 != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh7 != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh6 != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh5 != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh4 != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh3 != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh2 != false) {
        size += 1 + 1;
      }
      if (LlcFbkPduCh1 != false) {
        size += 1 + 1;
      }
      if (LlcFbkHazardlights != false) {
        size += 1 + 1;
      }
      if (LlcFbkLedgreenon != false) {
        size += 1 + 1;
      }
      if (LlcFbkHorn != false) {
        size += 1 + 1;
      }
      if (LlcFbkBuzzeron != false) {
        size += 1 + 1;
      }
      if (LlcFbkTurnsignal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LlcFbkTurnsignal);
      }
      if (LlcFbkLowbeam != false) {
        size += 1 + 1;
      }
      if (LlcFbkHighbeam != false) {
        size += 2 + 1;
      }
      if (LlcFbkLedredon != false) {
        size += 2 + 1;
      }
      if (LlcFbkAutonomybuttonpressed != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_auxiliaryfeedback_120 other) {
      if (other == null) {
        return;
      }
      if (other.LlcFbkInverter != false) {
        LlcFbkInverter = other.LlcFbkInverter;
      }
      if (other.LlcFbkPduCh8 != false) {
        LlcFbkPduCh8 = other.LlcFbkPduCh8;
      }
      if (other.LlcFbkPduCh7 != false) {
        LlcFbkPduCh7 = other.LlcFbkPduCh7;
      }
      if (other.LlcFbkPduCh6 != false) {
        LlcFbkPduCh6 = other.LlcFbkPduCh6;
      }
      if (other.LlcFbkPduCh5 != false) {
        LlcFbkPduCh5 = other.LlcFbkPduCh5;
      }
      if (other.LlcFbkPduCh4 != false) {
        LlcFbkPduCh4 = other.LlcFbkPduCh4;
      }
      if (other.LlcFbkPduCh3 != false) {
        LlcFbkPduCh3 = other.LlcFbkPduCh3;
      }
      if (other.LlcFbkPduCh2 != false) {
        LlcFbkPduCh2 = other.LlcFbkPduCh2;
      }
      if (other.LlcFbkPduCh1 != false) {
        LlcFbkPduCh1 = other.LlcFbkPduCh1;
      }
      if (other.LlcFbkHazardlights != false) {
        LlcFbkHazardlights = other.LlcFbkHazardlights;
      }
      if (other.LlcFbkLedgreenon != false) {
        LlcFbkLedgreenon = other.LlcFbkLedgreenon;
      }
      if (other.LlcFbkHorn != false) {
        LlcFbkHorn = other.LlcFbkHorn;
      }
      if (other.LlcFbkBuzzeron != false) {
        LlcFbkBuzzeron = other.LlcFbkBuzzeron;
      }
      if (other.LlcFbkTurnsignal != 0) {
        LlcFbkTurnsignal = other.LlcFbkTurnsignal;
      }
      if (other.LlcFbkLowbeam != false) {
        LlcFbkLowbeam = other.LlcFbkLowbeam;
      }
      if (other.LlcFbkHighbeam != false) {
        LlcFbkHighbeam = other.LlcFbkHighbeam;
      }
      if (other.LlcFbkLedredon != false) {
        LlcFbkLedredon = other.LlcFbkLedredon;
      }
      if (other.LlcFbkAutonomybuttonpressed != false) {
        LlcFbkAutonomybuttonpressed = other.LlcFbkAutonomybuttonpressed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LlcFbkInverter = input.ReadBool();
            break;
          }
          case 16: {
            LlcFbkPduCh8 = input.ReadBool();
            break;
          }
          case 24: {
            LlcFbkPduCh7 = input.ReadBool();
            break;
          }
          case 32: {
            LlcFbkPduCh6 = input.ReadBool();
            break;
          }
          case 40: {
            LlcFbkPduCh5 = input.ReadBool();
            break;
          }
          case 48: {
            LlcFbkPduCh4 = input.ReadBool();
            break;
          }
          case 56: {
            LlcFbkPduCh3 = input.ReadBool();
            break;
          }
          case 64: {
            LlcFbkPduCh2 = input.ReadBool();
            break;
          }
          case 72: {
            LlcFbkPduCh1 = input.ReadBool();
            break;
          }
          case 80: {
            LlcFbkHazardlights = input.ReadBool();
            break;
          }
          case 88: {
            LlcFbkLedgreenon = input.ReadBool();
            break;
          }
          case 96: {
            LlcFbkHorn = input.ReadBool();
            break;
          }
          case 104: {
            LlcFbkBuzzeron = input.ReadBool();
            break;
          }
          case 112: {
            llcFbkTurnsignal_ = (global::Apollo.Canbus.Llc_auxiliaryfeedback_120.Types.Llc_fbk_turnsignalType) input.ReadEnum();
            break;
          }
          case 120: {
            LlcFbkLowbeam = input.ReadBool();
            break;
          }
          case 128: {
            LlcFbkHighbeam = input.ReadBool();
            break;
          }
          case 136: {
            LlcFbkLedredon = input.ReadBool();
            break;
          }
          case 144: {
            LlcFbkAutonomybuttonpressed = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Llc_auxiliaryfeedback_120 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Report Message
      /// </summary>
      public enum Llc_fbk_turnsignalType {
        [pbr::OriginalName("LLC_FBK_TURNSIGNAL_NONE")] LlcFbkTurnsignalNone = 0,
        [pbr::OriginalName("LLC_FBK_TURNSIGNAL_LEFT")] LlcFbkTurnsignalLeft = 1,
        [pbr::OriginalName("LLC_FBK_TURNSIGNAL_RIGHT")] LlcFbkTurnsignalRight = 2,
        [pbr::OriginalName("LLC_FBK_TURNSIGNAL_RESERVE")] LlcFbkTurnsignalReserve = 3,
      }

    }
    #endregion

  }

  public sealed partial class Llc_diag_fault_620 : pb::IMessage<Llc_diag_fault_620> {
    private static readonly pb::MessageParser<Llc_diag_fault_620> _parser = new pb::MessageParser<Llc_diag_fault_620>(() => new Llc_diag_fault_620());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_diag_fault_620> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_fault_620() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_fault_620(Llc_diag_fault_620 other) : this() {
      llcDisengagecounterBrake_ = other.llcDisengagecounterBrake_;
      llcDisengagecounterSteer_ = other.llcDisengagecounterSteer_;
      llcDisengagecounterThrottle_ = other.llcDisengagecounterThrottle_;
      llcFbkFaultcounter_ = other.llcFbkFaultcounter_;
      llcDisengagecounterButton_ = other.llcDisengagecounterButton_;
      llcFbkVersionYear_ = other.llcFbkVersionYear_;
      llcFbkVersionMonth_ = other.llcFbkVersionMonth_;
      llcFbkVersionDay_ = other.llcFbkVersionDay_;
      llcFbkVersionHour_ = other.llcFbkVersionHour_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_fault_620 Clone() {
      return new Llc_diag_fault_620(this);
    }

    /// <summary>Field number for the "llc_disengagecounter_brake" field.</summary>
    public const int LlcDisengagecounterBrakeFieldNumber = 1;
    private int llcDisengagecounterBrake_;
    /// <summary>
    /// Report Message
    /// Counts the number of times that the driver has disengaged autonomy by applying the brakes since system reset..  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcDisengagecounterBrake {
      get { return llcDisengagecounterBrake_; }
      set {
        llcDisengagecounterBrake_ = value;
      }
    }

    /// <summary>Field number for the "llc_disengagecounter_steer" field.</summary>
    public const int LlcDisengagecounterSteerFieldNumber = 2;
    private int llcDisengagecounterSteer_;
    /// <summary>
    /// Counts the number of times that the driver has disengaged autonomy by moving the steering wheel since system reset.  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcDisengagecounterSteer {
      get { return llcDisengagecounterSteer_; }
      set {
        llcDisengagecounterSteer_ = value;
      }
    }

    /// <summary>Field number for the "llc_disengagecounter_throttle" field.</summary>
    public const int LlcDisengagecounterThrottleFieldNumber = 3;
    private int llcDisengagecounterThrottle_;
    /// <summary>
    /// Counts the number of times that the driver has disengaged autonomy by applying throttle since system reset.  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcDisengagecounterThrottle {
      get { return llcDisengagecounterThrottle_; }
      set {
        llcDisengagecounterThrottle_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_faultcounter" field.</summary>
    public const int LlcFbkFaultcounterFieldNumber = 4;
    private int llcFbkFaultcounter_;
    /// <summary>
    /// Counts the number of faults that have occurred since system reset.  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcFbkFaultcounter {
      get { return llcFbkFaultcounter_; }
      set {
        llcFbkFaultcounter_ = value;
      }
    }

    /// <summary>Field number for the "llc_disengagecounter_button" field.</summary>
    public const int LlcDisengagecounterButtonFieldNumber = 5;
    private int llcDisengagecounterButton_;
    /// <summary>
    /// Counts the number of times that the driver has disengaged autonomy by applying the brakes since system reset..  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcDisengagecounterButton {
      get { return llcDisengagecounterButton_; }
      set {
        llcDisengagecounterButton_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_version_year" field.</summary>
    public const int LlcFbkVersionYearFieldNumber = 6;
    private int llcFbkVersionYear_;
    /// <summary>
    /// Firmware version  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcFbkVersionYear {
      get { return llcFbkVersionYear_; }
      set {
        llcFbkVersionYear_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_version_month" field.</summary>
    public const int LlcFbkVersionMonthFieldNumber = 7;
    private int llcFbkVersionMonth_;
    /// <summary>
    /// Firmware version  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcFbkVersionMonth {
      get { return llcFbkVersionMonth_; }
      set {
        llcFbkVersionMonth_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_version_day" field.</summary>
    public const int LlcFbkVersionDayFieldNumber = 8;
    private int llcFbkVersionDay_;
    /// <summary>
    /// Firmware version  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcFbkVersionDay {
      get { return llcFbkVersionDay_; }
      set {
        llcFbkVersionDay_ = value;
      }
    }

    /// <summary>Field number for the "llc_fbk_version_hour" field.</summary>
    public const int LlcFbkVersionHourFieldNumber = 9;
    private int llcFbkVersionHour_;
    /// <summary>
    /// Firmware version  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcFbkVersionHour {
      get { return llcFbkVersionHour_; }
      set {
        llcFbkVersionHour_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_diag_fault_620);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_diag_fault_620 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcDisengagecounterBrake != other.LlcDisengagecounterBrake) return false;
      if (LlcDisengagecounterSteer != other.LlcDisengagecounterSteer) return false;
      if (LlcDisengagecounterThrottle != other.LlcDisengagecounterThrottle) return false;
      if (LlcFbkFaultcounter != other.LlcFbkFaultcounter) return false;
      if (LlcDisengagecounterButton != other.LlcDisengagecounterButton) return false;
      if (LlcFbkVersionYear != other.LlcFbkVersionYear) return false;
      if (LlcFbkVersionMonth != other.LlcFbkVersionMonth) return false;
      if (LlcFbkVersionDay != other.LlcFbkVersionDay) return false;
      if (LlcFbkVersionHour != other.LlcFbkVersionHour) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcDisengagecounterBrake != 0) hash ^= LlcDisengagecounterBrake.GetHashCode();
      if (LlcDisengagecounterSteer != 0) hash ^= LlcDisengagecounterSteer.GetHashCode();
      if (LlcDisengagecounterThrottle != 0) hash ^= LlcDisengagecounterThrottle.GetHashCode();
      if (LlcFbkFaultcounter != 0) hash ^= LlcFbkFaultcounter.GetHashCode();
      if (LlcDisengagecounterButton != 0) hash ^= LlcDisengagecounterButton.GetHashCode();
      if (LlcFbkVersionYear != 0) hash ^= LlcFbkVersionYear.GetHashCode();
      if (LlcFbkVersionMonth != 0) hash ^= LlcFbkVersionMonth.GetHashCode();
      if (LlcFbkVersionDay != 0) hash ^= LlcFbkVersionDay.GetHashCode();
      if (LlcFbkVersionHour != 0) hash ^= LlcFbkVersionHour.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcDisengagecounterBrake != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LlcDisengagecounterBrake);
      }
      if (LlcDisengagecounterSteer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LlcDisengagecounterSteer);
      }
      if (LlcDisengagecounterThrottle != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LlcDisengagecounterThrottle);
      }
      if (LlcFbkFaultcounter != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LlcFbkFaultcounter);
      }
      if (LlcDisengagecounterButton != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LlcDisengagecounterButton);
      }
      if (LlcFbkVersionYear != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LlcFbkVersionYear);
      }
      if (LlcFbkVersionMonth != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LlcFbkVersionMonth);
      }
      if (LlcFbkVersionDay != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LlcFbkVersionDay);
      }
      if (LlcFbkVersionHour != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LlcFbkVersionHour);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcDisengagecounterBrake != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcDisengagecounterBrake);
      }
      if (LlcDisengagecounterSteer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcDisengagecounterSteer);
      }
      if (LlcDisengagecounterThrottle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcDisengagecounterThrottle);
      }
      if (LlcFbkFaultcounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcFbkFaultcounter);
      }
      if (LlcDisengagecounterButton != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcDisengagecounterButton);
      }
      if (LlcFbkVersionYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcFbkVersionYear);
      }
      if (LlcFbkVersionMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcFbkVersionMonth);
      }
      if (LlcFbkVersionDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcFbkVersionDay);
      }
      if (LlcFbkVersionHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcFbkVersionHour);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_diag_fault_620 other) {
      if (other == null) {
        return;
      }
      if (other.LlcDisengagecounterBrake != 0) {
        LlcDisengagecounterBrake = other.LlcDisengagecounterBrake;
      }
      if (other.LlcDisengagecounterSteer != 0) {
        LlcDisengagecounterSteer = other.LlcDisengagecounterSteer;
      }
      if (other.LlcDisengagecounterThrottle != 0) {
        LlcDisengagecounterThrottle = other.LlcDisengagecounterThrottle;
      }
      if (other.LlcFbkFaultcounter != 0) {
        LlcFbkFaultcounter = other.LlcFbkFaultcounter;
      }
      if (other.LlcDisengagecounterButton != 0) {
        LlcDisengagecounterButton = other.LlcDisengagecounterButton;
      }
      if (other.LlcFbkVersionYear != 0) {
        LlcFbkVersionYear = other.LlcFbkVersionYear;
      }
      if (other.LlcFbkVersionMonth != 0) {
        LlcFbkVersionMonth = other.LlcFbkVersionMonth;
      }
      if (other.LlcFbkVersionDay != 0) {
        LlcFbkVersionDay = other.LlcFbkVersionDay;
      }
      if (other.LlcFbkVersionHour != 0) {
        LlcFbkVersionHour = other.LlcFbkVersionHour;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LlcDisengagecounterBrake = input.ReadInt32();
            break;
          }
          case 16: {
            LlcDisengagecounterSteer = input.ReadInt32();
            break;
          }
          case 24: {
            LlcDisengagecounterThrottle = input.ReadInt32();
            break;
          }
          case 32: {
            LlcFbkFaultcounter = input.ReadInt32();
            break;
          }
          case 40: {
            LlcDisengagecounterButton = input.ReadInt32();
            break;
          }
          case 48: {
            LlcFbkVersionYear = input.ReadInt32();
            break;
          }
          case 56: {
            LlcFbkVersionMonth = input.ReadInt32();
            break;
          }
          case 64: {
            LlcFbkVersionDay = input.ReadInt32();
            break;
          }
          case 72: {
            LlcFbkVersionHour = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Llc_diag_steeringcontrol_722 : pb::IMessage<Llc_diag_steeringcontrol_722> {
    private static readonly pb::MessageParser<Llc_diag_steeringcontrol_722> _parser = new pb::MessageParser<Llc_diag_steeringcontrol_722>(() => new Llc_diag_steeringcontrol_722());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_diag_steeringcontrol_722> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_steeringcontrol_722() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_steeringcontrol_722(Llc_diag_steeringcontrol_722 other) : this() {
      llcDbgSteeringsensorposition_ = other.llcDbgSteeringsensorposition_;
      llcDbgSteeringrackinputtorque_ = other.llcDbgSteeringrackinputtorque_;
      llcDbgSteeringmotorposition_ = other.llcDbgSteeringmotorposition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_steeringcontrol_722 Clone() {
      return new Llc_diag_steeringcontrol_722(this);
    }

    /// <summary>Field number for the "llc_dbg_steeringsensorposition" field.</summary>
    public const int LlcDbgSteeringsensorpositionFieldNumber = 1;
    private double llcDbgSteeringsensorposition_;
    /// <summary>
    /// Control Message
    /// Brake control feedforward contribution  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcDbgSteeringsensorposition {
      get { return llcDbgSteeringsensorposition_; }
      set {
        llcDbgSteeringsensorposition_ = value;
      }
    }

    /// <summary>Field number for the "llc_dbg_steeringrackinputtorque" field.</summary>
    public const int LlcDbgSteeringrackinputtorqueFieldNumber = 2;
    private int llcDbgSteeringrackinputtorque_;
    /// <summary>
    /// Brake control feedforward contribution  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcDbgSteeringrackinputtorque {
      get { return llcDbgSteeringrackinputtorque_; }
      set {
        llcDbgSteeringrackinputtorque_ = value;
      }
    }

    /// <summary>Field number for the "llc_dbg_steeringmotorposition" field.</summary>
    public const int LlcDbgSteeringmotorpositionFieldNumber = 3;
    private double llcDbgSteeringmotorposition_;
    /// <summary>
    /// Brake control feedforward contribution  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcDbgSteeringmotorposition {
      get { return llcDbgSteeringmotorposition_; }
      set {
        llcDbgSteeringmotorposition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_diag_steeringcontrol_722);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_diag_steeringcontrol_722 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcDbgSteeringsensorposition != other.LlcDbgSteeringsensorposition) return false;
      if (LlcDbgSteeringrackinputtorque != other.LlcDbgSteeringrackinputtorque) return false;
      if (LlcDbgSteeringmotorposition != other.LlcDbgSteeringmotorposition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcDbgSteeringsensorposition != 0D) hash ^= LlcDbgSteeringsensorposition.GetHashCode();
      if (LlcDbgSteeringrackinputtorque != 0) hash ^= LlcDbgSteeringrackinputtorque.GetHashCode();
      if (LlcDbgSteeringmotorposition != 0D) hash ^= LlcDbgSteeringmotorposition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcDbgSteeringsensorposition != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LlcDbgSteeringsensorposition);
      }
      if (LlcDbgSteeringrackinputtorque != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LlcDbgSteeringrackinputtorque);
      }
      if (LlcDbgSteeringmotorposition != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LlcDbgSteeringmotorposition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcDbgSteeringsensorposition != 0D) {
        size += 1 + 8;
      }
      if (LlcDbgSteeringrackinputtorque != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcDbgSteeringrackinputtorque);
      }
      if (LlcDbgSteeringmotorposition != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_diag_steeringcontrol_722 other) {
      if (other == null) {
        return;
      }
      if (other.LlcDbgSteeringsensorposition != 0D) {
        LlcDbgSteeringsensorposition = other.LlcDbgSteeringsensorposition;
      }
      if (other.LlcDbgSteeringrackinputtorque != 0) {
        LlcDbgSteeringrackinputtorque = other.LlcDbgSteeringrackinputtorque;
      }
      if (other.LlcDbgSteeringmotorposition != 0D) {
        LlcDbgSteeringmotorposition = other.LlcDbgSteeringmotorposition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LlcDbgSteeringsensorposition = input.ReadDouble();
            break;
          }
          case 16: {
            LlcDbgSteeringrackinputtorque = input.ReadInt32();
            break;
          }
          case 25: {
            LlcDbgSteeringmotorposition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Adc_auxiliarycontrol_110 : pb::IMessage<Adc_auxiliarycontrol_110> {
    private static readonly pb::MessageParser<Adc_auxiliarycontrol_110> _parser = new pb::MessageParser<Adc_auxiliarycontrol_110>(() => new Adc_auxiliarycontrol_110());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Adc_auxiliarycontrol_110> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_auxiliarycontrol_110() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_auxiliarycontrol_110(Adc_auxiliarycontrol_110 other) : this() {
      adcAuxcontrolCounter_ = other.adcAuxcontrolCounter_;
      adcAuxcontrolChecksum_ = other.adcAuxcontrolChecksum_;
      adcCmdInverterControlenable_ = other.adcCmdInverterControlenable_;
      adcCmdInverter_ = other.adcCmdInverter_;
      adcCmdWiper_ = other.adcCmdWiper_;
      adcCmdPduControlenable_ = other.adcCmdPduControlenable_;
      adcCmdPduCh8_ = other.adcCmdPduCh8_;
      adcCmdPduCh7_ = other.adcCmdPduCh7_;
      adcCmdPduCh6_ = other.adcCmdPduCh6_;
      adcCmdPduCh5_ = other.adcCmdPduCh5_;
      adcCmdPduCh4_ = other.adcCmdPduCh4_;
      adcCmdPduCh3_ = other.adcCmdPduCh3_;
      adcCmdPduCh2_ = other.adcCmdPduCh2_;
      adcCmdPduCh1_ = other.adcCmdPduCh1_;
      adcCmdHazardlights_ = other.adcCmdHazardlights_;
      adcCmdHighbeam_ = other.adcCmdHighbeam_;
      adcCmdLowbeam_ = other.adcCmdLowbeam_;
      adcCmdHorn_ = other.adcCmdHorn_;
      adcCmdTurnsignal_ = other.adcCmdTurnsignal_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adc_auxiliarycontrol_110 Clone() {
      return new Adc_auxiliarycontrol_110(this);
    }

    /// <summary>Field number for the "adc_auxcontrol_counter" field.</summary>
    public const int AdcAuxcontrolCounterFieldNumber = 1;
    private int adcAuxcontrolCounter_;
    /// <summary>
    /// Aux control heartbeat counter  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdcAuxcontrolCounter {
      get { return adcAuxcontrolCounter_; }
      set {
        adcAuxcontrolCounter_ = value;
      }
    }

    /// <summary>Field number for the "adc_auxcontrol_checksum" field.</summary>
    public const int AdcAuxcontrolChecksumFieldNumber = 2;
    private int adcAuxcontrolChecksum_;
    /// <summary>
    /// Aux control checksum  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdcAuxcontrolChecksum {
      get { return adcAuxcontrolChecksum_; }
      set {
        adcAuxcontrolChecksum_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_inverter_controlenable" field.</summary>
    public const int AdcCmdInverterControlenableFieldNumber = 3;
    private bool adcCmdInverterControlenable_;
    /// <summary>
    /// Control inverter override (default ON if not overridden)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdInverterControlenable {
      get { return adcCmdInverterControlenable_; }
      set {
        adcCmdInverterControlenable_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_inverter" field.</summary>
    public const int AdcCmdInverterFieldNumber = 4;
    private bool adcCmdInverter_;
    /// <summary>
    /// Control inverter  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdInverter {
      get { return adcCmdInverter_; }
      set {
        adcCmdInverter_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_wiper" field.</summary>
    public const int AdcCmdWiperFieldNumber = 5;
    private int adcCmdWiper_;
    /// <summary>
    /// (Reserved) Control wiper  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdcCmdWiper {
      get { return adcCmdWiper_; }
      set {
        adcCmdWiper_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_controlenable" field.</summary>
    public const int AdcCmdPduControlenableFieldNumber = 6;
    private bool adcCmdPduControlenable_;
    /// <summary>
    /// PDU Control Override (all channels default ON if not overridden)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduControlenable {
      get { return adcCmdPduControlenable_; }
      set {
        adcCmdPduControlenable_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch8" field.</summary>
    public const int AdcCmdPduCh8FieldNumber = 7;
    private bool adcCmdPduCh8_;
    /// <summary>
    /// Control PDU Ch 8 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh8 {
      get { return adcCmdPduCh8_; }
      set {
        adcCmdPduCh8_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch7" field.</summary>
    public const int AdcCmdPduCh7FieldNumber = 8;
    private bool adcCmdPduCh7_;
    /// <summary>
    /// Control PDU Ch 7 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh7 {
      get { return adcCmdPduCh7_; }
      set {
        adcCmdPduCh7_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch6" field.</summary>
    public const int AdcCmdPduCh6FieldNumber = 9;
    private bool adcCmdPduCh6_;
    /// <summary>
    /// Control PDU Ch 6 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh6 {
      get { return adcCmdPduCh6_; }
      set {
        adcCmdPduCh6_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch5" field.</summary>
    public const int AdcCmdPduCh5FieldNumber = 10;
    private bool adcCmdPduCh5_;
    /// <summary>
    /// Control PDU Ch 5 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh5 {
      get { return adcCmdPduCh5_; }
      set {
        adcCmdPduCh5_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch4" field.</summary>
    public const int AdcCmdPduCh4FieldNumber = 11;
    private bool adcCmdPduCh4_;
    /// <summary>
    /// Control PDU Ch 4 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh4 {
      get { return adcCmdPduCh4_; }
      set {
        adcCmdPduCh4_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch3" field.</summary>
    public const int AdcCmdPduCh3FieldNumber = 12;
    private bool adcCmdPduCh3_;
    /// <summary>
    /// Control PDU Ch 3 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh3 {
      get { return adcCmdPduCh3_; }
      set {
        adcCmdPduCh3_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch2" field.</summary>
    public const int AdcCmdPduCh2FieldNumber = 13;
    private bool adcCmdPduCh2_;
    /// <summary>
    /// Control PDU Ch 2 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh2 {
      get { return adcCmdPduCh2_; }
      set {
        adcCmdPduCh2_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_pdu_ch1" field.</summary>
    public const int AdcCmdPduCh1FieldNumber = 14;
    private bool adcCmdPduCh1_;
    /// <summary>
    /// Control PDU Ch 1 (when override enabled)  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdPduCh1 {
      get { return adcCmdPduCh1_; }
      set {
        adcCmdPduCh1_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_hazardlights" field.</summary>
    public const int AdcCmdHazardlightsFieldNumber = 15;
    private bool adcCmdHazardlights_;
    /// <summary>
    /// Control hazard lights  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdHazardlights {
      get { return adcCmdHazardlights_; }
      set {
        adcCmdHazardlights_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_highbeam" field.</summary>
    public const int AdcCmdHighbeamFieldNumber = 16;
    private bool adcCmdHighbeam_;
    /// <summary>
    /// Control high beam  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdHighbeam {
      get { return adcCmdHighbeam_; }
      set {
        adcCmdHighbeam_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_lowbeam" field.</summary>
    public const int AdcCmdLowbeamFieldNumber = 17;
    private bool adcCmdLowbeam_;
    /// <summary>
    /// Control low beam  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdLowbeam {
      get { return adcCmdLowbeam_; }
      set {
        adcCmdLowbeam_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_horn" field.</summary>
    public const int AdcCmdHornFieldNumber = 18;
    private bool adcCmdHorn_;
    /// <summary>
    /// Control horn  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcCmdHorn {
      get { return adcCmdHorn_; }
      set {
        adcCmdHorn_ = value;
      }
    }

    /// <summary>Field number for the "adc_cmd_turnsignal" field.</summary>
    public const int AdcCmdTurnsignalFieldNumber = 19;
    private global::Apollo.Canbus.Adc_auxiliarycontrol_110.Types.Adc_cmd_turnsignalType adcCmdTurnsignal_ = 0;
    /// <summary>
    /// Requested turn signals  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_auxiliarycontrol_110.Types.Adc_cmd_turnsignalType AdcCmdTurnsignal {
      get { return adcCmdTurnsignal_; }
      set {
        adcCmdTurnsignal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Adc_auxiliarycontrol_110);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Adc_auxiliarycontrol_110 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdcAuxcontrolCounter != other.AdcAuxcontrolCounter) return false;
      if (AdcAuxcontrolChecksum != other.AdcAuxcontrolChecksum) return false;
      if (AdcCmdInverterControlenable != other.AdcCmdInverterControlenable) return false;
      if (AdcCmdInverter != other.AdcCmdInverter) return false;
      if (AdcCmdWiper != other.AdcCmdWiper) return false;
      if (AdcCmdPduControlenable != other.AdcCmdPduControlenable) return false;
      if (AdcCmdPduCh8 != other.AdcCmdPduCh8) return false;
      if (AdcCmdPduCh7 != other.AdcCmdPduCh7) return false;
      if (AdcCmdPduCh6 != other.AdcCmdPduCh6) return false;
      if (AdcCmdPduCh5 != other.AdcCmdPduCh5) return false;
      if (AdcCmdPduCh4 != other.AdcCmdPduCh4) return false;
      if (AdcCmdPduCh3 != other.AdcCmdPduCh3) return false;
      if (AdcCmdPduCh2 != other.AdcCmdPduCh2) return false;
      if (AdcCmdPduCh1 != other.AdcCmdPduCh1) return false;
      if (AdcCmdHazardlights != other.AdcCmdHazardlights) return false;
      if (AdcCmdHighbeam != other.AdcCmdHighbeam) return false;
      if (AdcCmdLowbeam != other.AdcCmdLowbeam) return false;
      if (AdcCmdHorn != other.AdcCmdHorn) return false;
      if (AdcCmdTurnsignal != other.AdcCmdTurnsignal) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdcAuxcontrolCounter != 0) hash ^= AdcAuxcontrolCounter.GetHashCode();
      if (AdcAuxcontrolChecksum != 0) hash ^= AdcAuxcontrolChecksum.GetHashCode();
      if (AdcCmdInverterControlenable != false) hash ^= AdcCmdInverterControlenable.GetHashCode();
      if (AdcCmdInverter != false) hash ^= AdcCmdInverter.GetHashCode();
      if (AdcCmdWiper != 0) hash ^= AdcCmdWiper.GetHashCode();
      if (AdcCmdPduControlenable != false) hash ^= AdcCmdPduControlenable.GetHashCode();
      if (AdcCmdPduCh8 != false) hash ^= AdcCmdPduCh8.GetHashCode();
      if (AdcCmdPduCh7 != false) hash ^= AdcCmdPduCh7.GetHashCode();
      if (AdcCmdPduCh6 != false) hash ^= AdcCmdPduCh6.GetHashCode();
      if (AdcCmdPduCh5 != false) hash ^= AdcCmdPduCh5.GetHashCode();
      if (AdcCmdPduCh4 != false) hash ^= AdcCmdPduCh4.GetHashCode();
      if (AdcCmdPduCh3 != false) hash ^= AdcCmdPduCh3.GetHashCode();
      if (AdcCmdPduCh2 != false) hash ^= AdcCmdPduCh2.GetHashCode();
      if (AdcCmdPduCh1 != false) hash ^= AdcCmdPduCh1.GetHashCode();
      if (AdcCmdHazardlights != false) hash ^= AdcCmdHazardlights.GetHashCode();
      if (AdcCmdHighbeam != false) hash ^= AdcCmdHighbeam.GetHashCode();
      if (AdcCmdLowbeam != false) hash ^= AdcCmdLowbeam.GetHashCode();
      if (AdcCmdHorn != false) hash ^= AdcCmdHorn.GetHashCode();
      if (AdcCmdTurnsignal != 0) hash ^= AdcCmdTurnsignal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdcAuxcontrolCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AdcAuxcontrolCounter);
      }
      if (AdcAuxcontrolChecksum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AdcAuxcontrolChecksum);
      }
      if (AdcCmdInverterControlenable != false) {
        output.WriteRawTag(24);
        output.WriteBool(AdcCmdInverterControlenable);
      }
      if (AdcCmdInverter != false) {
        output.WriteRawTag(32);
        output.WriteBool(AdcCmdInverter);
      }
      if (AdcCmdWiper != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AdcCmdWiper);
      }
      if (AdcCmdPduControlenable != false) {
        output.WriteRawTag(48);
        output.WriteBool(AdcCmdPduControlenable);
      }
      if (AdcCmdPduCh8 != false) {
        output.WriteRawTag(56);
        output.WriteBool(AdcCmdPduCh8);
      }
      if (AdcCmdPduCh7 != false) {
        output.WriteRawTag(64);
        output.WriteBool(AdcCmdPduCh7);
      }
      if (AdcCmdPduCh6 != false) {
        output.WriteRawTag(72);
        output.WriteBool(AdcCmdPduCh6);
      }
      if (AdcCmdPduCh5 != false) {
        output.WriteRawTag(80);
        output.WriteBool(AdcCmdPduCh5);
      }
      if (AdcCmdPduCh4 != false) {
        output.WriteRawTag(88);
        output.WriteBool(AdcCmdPduCh4);
      }
      if (AdcCmdPduCh3 != false) {
        output.WriteRawTag(96);
        output.WriteBool(AdcCmdPduCh3);
      }
      if (AdcCmdPduCh2 != false) {
        output.WriteRawTag(104);
        output.WriteBool(AdcCmdPduCh2);
      }
      if (AdcCmdPduCh1 != false) {
        output.WriteRawTag(112);
        output.WriteBool(AdcCmdPduCh1);
      }
      if (AdcCmdHazardlights != false) {
        output.WriteRawTag(120);
        output.WriteBool(AdcCmdHazardlights);
      }
      if (AdcCmdHighbeam != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AdcCmdHighbeam);
      }
      if (AdcCmdLowbeam != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(AdcCmdLowbeam);
      }
      if (AdcCmdHorn != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(AdcCmdHorn);
      }
      if (AdcCmdTurnsignal != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) AdcCmdTurnsignal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdcAuxcontrolCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdcAuxcontrolCounter);
      }
      if (AdcAuxcontrolChecksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdcAuxcontrolChecksum);
      }
      if (AdcCmdInverterControlenable != false) {
        size += 1 + 1;
      }
      if (AdcCmdInverter != false) {
        size += 1 + 1;
      }
      if (AdcCmdWiper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdcCmdWiper);
      }
      if (AdcCmdPduControlenable != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh8 != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh7 != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh6 != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh5 != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh4 != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh3 != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh2 != false) {
        size += 1 + 1;
      }
      if (AdcCmdPduCh1 != false) {
        size += 1 + 1;
      }
      if (AdcCmdHazardlights != false) {
        size += 1 + 1;
      }
      if (AdcCmdHighbeam != false) {
        size += 2 + 1;
      }
      if (AdcCmdLowbeam != false) {
        size += 2 + 1;
      }
      if (AdcCmdHorn != false) {
        size += 2 + 1;
      }
      if (AdcCmdTurnsignal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AdcCmdTurnsignal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Adc_auxiliarycontrol_110 other) {
      if (other == null) {
        return;
      }
      if (other.AdcAuxcontrolCounter != 0) {
        AdcAuxcontrolCounter = other.AdcAuxcontrolCounter;
      }
      if (other.AdcAuxcontrolChecksum != 0) {
        AdcAuxcontrolChecksum = other.AdcAuxcontrolChecksum;
      }
      if (other.AdcCmdInverterControlenable != false) {
        AdcCmdInverterControlenable = other.AdcCmdInverterControlenable;
      }
      if (other.AdcCmdInverter != false) {
        AdcCmdInverter = other.AdcCmdInverter;
      }
      if (other.AdcCmdWiper != 0) {
        AdcCmdWiper = other.AdcCmdWiper;
      }
      if (other.AdcCmdPduControlenable != false) {
        AdcCmdPduControlenable = other.AdcCmdPduControlenable;
      }
      if (other.AdcCmdPduCh8 != false) {
        AdcCmdPduCh8 = other.AdcCmdPduCh8;
      }
      if (other.AdcCmdPduCh7 != false) {
        AdcCmdPduCh7 = other.AdcCmdPduCh7;
      }
      if (other.AdcCmdPduCh6 != false) {
        AdcCmdPduCh6 = other.AdcCmdPduCh6;
      }
      if (other.AdcCmdPduCh5 != false) {
        AdcCmdPduCh5 = other.AdcCmdPduCh5;
      }
      if (other.AdcCmdPduCh4 != false) {
        AdcCmdPduCh4 = other.AdcCmdPduCh4;
      }
      if (other.AdcCmdPduCh3 != false) {
        AdcCmdPduCh3 = other.AdcCmdPduCh3;
      }
      if (other.AdcCmdPduCh2 != false) {
        AdcCmdPduCh2 = other.AdcCmdPduCh2;
      }
      if (other.AdcCmdPduCh1 != false) {
        AdcCmdPduCh1 = other.AdcCmdPduCh1;
      }
      if (other.AdcCmdHazardlights != false) {
        AdcCmdHazardlights = other.AdcCmdHazardlights;
      }
      if (other.AdcCmdHighbeam != false) {
        AdcCmdHighbeam = other.AdcCmdHighbeam;
      }
      if (other.AdcCmdLowbeam != false) {
        AdcCmdLowbeam = other.AdcCmdLowbeam;
      }
      if (other.AdcCmdHorn != false) {
        AdcCmdHorn = other.AdcCmdHorn;
      }
      if (other.AdcCmdTurnsignal != 0) {
        AdcCmdTurnsignal = other.AdcCmdTurnsignal;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AdcAuxcontrolCounter = input.ReadInt32();
            break;
          }
          case 16: {
            AdcAuxcontrolChecksum = input.ReadInt32();
            break;
          }
          case 24: {
            AdcCmdInverterControlenable = input.ReadBool();
            break;
          }
          case 32: {
            AdcCmdInverter = input.ReadBool();
            break;
          }
          case 40: {
            AdcCmdWiper = input.ReadInt32();
            break;
          }
          case 48: {
            AdcCmdPduControlenable = input.ReadBool();
            break;
          }
          case 56: {
            AdcCmdPduCh8 = input.ReadBool();
            break;
          }
          case 64: {
            AdcCmdPduCh7 = input.ReadBool();
            break;
          }
          case 72: {
            AdcCmdPduCh6 = input.ReadBool();
            break;
          }
          case 80: {
            AdcCmdPduCh5 = input.ReadBool();
            break;
          }
          case 88: {
            AdcCmdPduCh4 = input.ReadBool();
            break;
          }
          case 96: {
            AdcCmdPduCh3 = input.ReadBool();
            break;
          }
          case 104: {
            AdcCmdPduCh2 = input.ReadBool();
            break;
          }
          case 112: {
            AdcCmdPduCh1 = input.ReadBool();
            break;
          }
          case 120: {
            AdcCmdHazardlights = input.ReadBool();
            break;
          }
          case 128: {
            AdcCmdHighbeam = input.ReadBool();
            break;
          }
          case 136: {
            AdcCmdLowbeam = input.ReadBool();
            break;
          }
          case 144: {
            AdcCmdHorn = input.ReadBool();
            break;
          }
          case 152: {
            adcCmdTurnsignal_ = (global::Apollo.Canbus.Adc_auxiliarycontrol_110.Types.Adc_cmd_turnsignalType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Adc_auxiliarycontrol_110 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Control Message
      /// </summary>
      public enum Adc_cmd_turnsignalType {
        [pbr::OriginalName("ADC_CMD_TURNSIGNAL_NONE")] AdcCmdTurnsignalNone = 0,
        [pbr::OriginalName("ADC_CMD_TURNSIGNAL_LEFT")] AdcCmdTurnsignalLeft = 1,
        [pbr::OriginalName("ADC_CMD_TURNSIGNAL_RIGHT")] AdcCmdTurnsignalRight = 2,
        [pbr::OriginalName("ADC_CMD_TURNSIGNAL_RESERVE")] AdcCmdTurnsignalReserve = 3,
      }

    }
    #endregion

  }

  public sealed partial class Llc_diag_brakecontrol_721 : pb::IMessage<Llc_diag_brakecontrol_721> {
    private static readonly pb::MessageParser<Llc_diag_brakecontrol_721> _parser = new pb::MessageParser<Llc_diag_brakecontrol_721>(() => new Llc_diag_brakecontrol_721());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc_diag_brakecontrol_721> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_brakecontrol_721() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_brakecontrol_721(Llc_diag_brakecontrol_721 other) : this() {
      llcDbgBrakepidcontributionP_ = other.llcDbgBrakepidcontributionP_;
      llcDbgBrakepidcontributionI_ = other.llcDbgBrakepidcontributionI_;
      llcDbgBrakepidcontributionD_ = other.llcDbgBrakepidcontributionD_;
      llcDbgBrakepidOutput_ = other.llcDbgBrakepidOutput_;
      llcDbgBrakepidError_ = other.llcDbgBrakepidError_;
      llcDbgBrakefeedforward_ = other.llcDbgBrakefeedforward_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc_diag_brakecontrol_721 Clone() {
      return new Llc_diag_brakecontrol_721(this);
    }

    /// <summary>Field number for the "llc_dbg_brakepidcontribution_p" field.</summary>
    public const int LlcDbgBrakepidcontributionPFieldNumber = 1;
    private double llcDbgBrakepidcontributionP_;
    /// <summary>
    /// Control Message
    /// Brake control loop P contribution  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcDbgBrakepidcontributionP {
      get { return llcDbgBrakepidcontributionP_; }
      set {
        llcDbgBrakepidcontributionP_ = value;
      }
    }

    /// <summary>Field number for the "llc_dbg_brakepidcontribution_i" field.</summary>
    public const int LlcDbgBrakepidcontributionIFieldNumber = 2;
    private double llcDbgBrakepidcontributionI_;
    /// <summary>
    /// Brake control loop I contribution  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcDbgBrakepidcontributionI {
      get { return llcDbgBrakepidcontributionI_; }
      set {
        llcDbgBrakepidcontributionI_ = value;
      }
    }

    /// <summary>Field number for the "llc_dbg_brakepidcontribution_d" field.</summary>
    public const int LlcDbgBrakepidcontributionDFieldNumber = 3;
    private double llcDbgBrakepidcontributionD_;
    /// <summary>
    /// Brake control loop D contribution  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcDbgBrakepidcontributionD {
      get { return llcDbgBrakepidcontributionD_; }
      set {
        llcDbgBrakepidcontributionD_ = value;
      }
    }

    /// <summary>Field number for the "llc_dbg_brakepid_output" field.</summary>
    public const int LlcDbgBrakepidOutputFieldNumber = 4;
    private double llcDbgBrakepidOutput_;
    /// <summary>
    /// Brake control loop output  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcDbgBrakepidOutput {
      get { return llcDbgBrakepidOutput_; }
      set {
        llcDbgBrakepidOutput_ = value;
      }
    }

    /// <summary>Field number for the "llc_dbg_brakepid_error" field.</summary>
    public const int LlcDbgBrakepidErrorFieldNumber = 5;
    private int llcDbgBrakepidError_;
    /// <summary>
    /// Brake control loop error  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LlcDbgBrakepidError {
      get { return llcDbgBrakepidError_; }
      set {
        llcDbgBrakepidError_ = value;
      }
    }

    /// <summary>Field number for the "llc_dbg_brakefeedforward" field.</summary>
    public const int LlcDbgBrakefeedforwardFieldNumber = 6;
    private double llcDbgBrakefeedforward_;
    /// <summary>
    /// Brake control feedforward contribution  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LlcDbgBrakefeedforward {
      get { return llcDbgBrakefeedforward_; }
      set {
        llcDbgBrakefeedforward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc_diag_brakecontrol_721);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc_diag_brakecontrol_721 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcDbgBrakepidcontributionP != other.LlcDbgBrakepidcontributionP) return false;
      if (LlcDbgBrakepidcontributionI != other.LlcDbgBrakepidcontributionI) return false;
      if (LlcDbgBrakepidcontributionD != other.LlcDbgBrakepidcontributionD) return false;
      if (LlcDbgBrakepidOutput != other.LlcDbgBrakepidOutput) return false;
      if (LlcDbgBrakepidError != other.LlcDbgBrakepidError) return false;
      if (LlcDbgBrakefeedforward != other.LlcDbgBrakefeedforward) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcDbgBrakepidcontributionP != 0D) hash ^= LlcDbgBrakepidcontributionP.GetHashCode();
      if (LlcDbgBrakepidcontributionI != 0D) hash ^= LlcDbgBrakepidcontributionI.GetHashCode();
      if (LlcDbgBrakepidcontributionD != 0D) hash ^= LlcDbgBrakepidcontributionD.GetHashCode();
      if (LlcDbgBrakepidOutput != 0D) hash ^= LlcDbgBrakepidOutput.GetHashCode();
      if (LlcDbgBrakepidError != 0) hash ^= LlcDbgBrakepidError.GetHashCode();
      if (LlcDbgBrakefeedforward != 0D) hash ^= LlcDbgBrakefeedforward.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcDbgBrakepidcontributionP != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LlcDbgBrakepidcontributionP);
      }
      if (LlcDbgBrakepidcontributionI != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LlcDbgBrakepidcontributionI);
      }
      if (LlcDbgBrakepidcontributionD != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LlcDbgBrakepidcontributionD);
      }
      if (LlcDbgBrakepidOutput != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LlcDbgBrakepidOutput);
      }
      if (LlcDbgBrakepidError != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LlcDbgBrakepidError);
      }
      if (LlcDbgBrakefeedforward != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LlcDbgBrakefeedforward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcDbgBrakepidcontributionP != 0D) {
        size += 1 + 8;
      }
      if (LlcDbgBrakepidcontributionI != 0D) {
        size += 1 + 8;
      }
      if (LlcDbgBrakepidcontributionD != 0D) {
        size += 1 + 8;
      }
      if (LlcDbgBrakepidOutput != 0D) {
        size += 1 + 8;
      }
      if (LlcDbgBrakepidError != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LlcDbgBrakepidError);
      }
      if (LlcDbgBrakefeedforward != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc_diag_brakecontrol_721 other) {
      if (other == null) {
        return;
      }
      if (other.LlcDbgBrakepidcontributionP != 0D) {
        LlcDbgBrakepidcontributionP = other.LlcDbgBrakepidcontributionP;
      }
      if (other.LlcDbgBrakepidcontributionI != 0D) {
        LlcDbgBrakepidcontributionI = other.LlcDbgBrakepidcontributionI;
      }
      if (other.LlcDbgBrakepidcontributionD != 0D) {
        LlcDbgBrakepidcontributionD = other.LlcDbgBrakepidcontributionD;
      }
      if (other.LlcDbgBrakepidOutput != 0D) {
        LlcDbgBrakepidOutput = other.LlcDbgBrakepidOutput;
      }
      if (other.LlcDbgBrakepidError != 0) {
        LlcDbgBrakepidError = other.LlcDbgBrakepidError;
      }
      if (other.LlcDbgBrakefeedforward != 0D) {
        LlcDbgBrakefeedforward = other.LlcDbgBrakefeedforward;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LlcDbgBrakepidcontributionP = input.ReadDouble();
            break;
          }
          case 17: {
            LlcDbgBrakepidcontributionI = input.ReadDouble();
            break;
          }
          case 25: {
            LlcDbgBrakepidcontributionD = input.ReadDouble();
            break;
          }
          case 33: {
            LlcDbgBrakepidOutput = input.ReadDouble();
            break;
          }
          case 40: {
            LlcDbgBrakepidError = input.ReadInt32();
            break;
          }
          case 49: {
            LlcDbgBrakefeedforward = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transit : pb::IMessage<Transit> {
    private static readonly pb::MessageParser<Transit> _parser = new pb::MessageParser<Transit>(() => new Transit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Canbus.TransitReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transit(Transit other) : this() {
      LlcVehiclelimits24 = other.llcVehiclelimits24_ != null ? other.LlcVehiclelimits24.Clone() : null;
      AdcMotioncontrol110 = other.adcMotioncontrol110_ != null ? other.AdcMotioncontrol110.Clone() : null;
      AdcMotioncontrollimits112 = other.adcMotioncontrollimits112_ != null ? other.AdcMotioncontrollimits112.Clone() : null;
      LlcMotionfeedback120 = other.llcMotionfeedback120_ != null ? other.LlcMotionfeedback120.Clone() : null;
      LlcMotionfeedback221 = other.llcMotionfeedback221_ != null ? other.LlcMotionfeedback221.Clone() : null;
      LlcMotioncommandfeedback122 = other.llcMotioncommandfeedback122_ != null ? other.LlcMotioncommandfeedback122.Clone() : null;
      LlcVehiclestatus25 = other.llcVehiclestatus25_ != null ? other.LlcVehiclestatus25.Clone() : null;
      LlcAuxiliaryfeedback120 = other.llcAuxiliaryfeedback120_ != null ? other.LlcAuxiliaryfeedback120.Clone() : null;
      LlcDiagFault620 = other.llcDiagFault620_ != null ? other.LlcDiagFault620.Clone() : null;
      LlcDiagSteeringcontrol722 = other.llcDiagSteeringcontrol722_ != null ? other.LlcDiagSteeringcontrol722.Clone() : null;
      AdcAuxiliarycontrol110 = other.adcAuxiliarycontrol110_ != null ? other.AdcAuxiliarycontrol110.Clone() : null;
      LlcDiagBrakecontrol721 = other.llcDiagBrakecontrol721_ != null ? other.LlcDiagBrakecontrol721.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transit Clone() {
      return new Transit(this);
    }

    /// <summary>Field number for the "llc_vehiclelimits_24" field.</summary>
    public const int LlcVehiclelimits24FieldNumber = 1;
    private global::Apollo.Canbus.Llc_vehiclelimits_24 llcVehiclelimits24_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_vehiclelimits_24 LlcVehiclelimits24 {
      get { return llcVehiclelimits24_; }
      set {
        llcVehiclelimits24_ = value;
      }
    }

    /// <summary>Field number for the "adc_motioncontrol1_10" field.</summary>
    public const int AdcMotioncontrol110FieldNumber = 2;
    private global::Apollo.Canbus.Adc_motioncontrol1_10 adcMotioncontrol110_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_motioncontrol1_10 AdcMotioncontrol110 {
      get { return adcMotioncontrol110_; }
      set {
        adcMotioncontrol110_ = value;
      }
    }

    /// <summary>Field number for the "adc_motioncontrollimits1_12" field.</summary>
    public const int AdcMotioncontrollimits112FieldNumber = 3;
    private global::Apollo.Canbus.Adc_motioncontrollimits1_12 adcMotioncontrollimits112_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_motioncontrollimits1_12 AdcMotioncontrollimits112 {
      get { return adcMotioncontrollimits112_; }
      set {
        adcMotioncontrollimits112_ = value;
      }
    }

    /// <summary>Field number for the "llc_motionfeedback1_20" field.</summary>
    public const int LlcMotionfeedback120FieldNumber = 4;
    private global::Apollo.Canbus.Llc_motionfeedback1_20 llcMotionfeedback120_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_motionfeedback1_20 LlcMotionfeedback120 {
      get { return llcMotionfeedback120_; }
      set {
        llcMotionfeedback120_ = value;
      }
    }

    /// <summary>Field number for the "llc_motionfeedback2_21" field.</summary>
    public const int LlcMotionfeedback221FieldNumber = 5;
    private global::Apollo.Canbus.Llc_motionfeedback2_21 llcMotionfeedback221_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_motionfeedback2_21 LlcMotionfeedback221 {
      get { return llcMotionfeedback221_; }
      set {
        llcMotionfeedback221_ = value;
      }
    }

    /// <summary>Field number for the "llc_motioncommandfeedback1_22" field.</summary>
    public const int LlcMotioncommandfeedback122FieldNumber = 6;
    private global::Apollo.Canbus.Llc_motioncommandfeedback1_22 llcMotioncommandfeedback122_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_motioncommandfeedback1_22 LlcMotioncommandfeedback122 {
      get { return llcMotioncommandfeedback122_; }
      set {
        llcMotioncommandfeedback122_ = value;
      }
    }

    /// <summary>Field number for the "llc_vehiclestatus_25" field.</summary>
    public const int LlcVehiclestatus25FieldNumber = 7;
    private global::Apollo.Canbus.Llc_vehiclestatus_25 llcVehiclestatus25_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_vehiclestatus_25 LlcVehiclestatus25 {
      get { return llcVehiclestatus25_; }
      set {
        llcVehiclestatus25_ = value;
      }
    }

    /// <summary>Field number for the "llc_auxiliaryfeedback_120" field.</summary>
    public const int LlcAuxiliaryfeedback120FieldNumber = 8;
    private global::Apollo.Canbus.Llc_auxiliaryfeedback_120 llcAuxiliaryfeedback120_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_auxiliaryfeedback_120 LlcAuxiliaryfeedback120 {
      get { return llcAuxiliaryfeedback120_; }
      set {
        llcAuxiliaryfeedback120_ = value;
      }
    }

    /// <summary>Field number for the "llc_diag_fault_620" field.</summary>
    public const int LlcDiagFault620FieldNumber = 9;
    private global::Apollo.Canbus.Llc_diag_fault_620 llcDiagFault620_;
    /// <summary>
    /// report message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_diag_fault_620 LlcDiagFault620 {
      get { return llcDiagFault620_; }
      set {
        llcDiagFault620_ = value;
      }
    }

    /// <summary>Field number for the "llc_diag_steeringcontrol_722" field.</summary>
    public const int LlcDiagSteeringcontrol722FieldNumber = 10;
    private global::Apollo.Canbus.Llc_diag_steeringcontrol_722 llcDiagSteeringcontrol722_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_diag_steeringcontrol_722 LlcDiagSteeringcontrol722 {
      get { return llcDiagSteeringcontrol722_; }
      set {
        llcDiagSteeringcontrol722_ = value;
      }
    }

    /// <summary>Field number for the "adc_auxiliarycontrol_110" field.</summary>
    public const int AdcAuxiliarycontrol110FieldNumber = 11;
    private global::Apollo.Canbus.Adc_auxiliarycontrol_110 adcAuxiliarycontrol110_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Adc_auxiliarycontrol_110 AdcAuxiliarycontrol110 {
      get { return adcAuxiliarycontrol110_; }
      set {
        adcAuxiliarycontrol110_ = value;
      }
    }

    /// <summary>Field number for the "llc_diag_brakecontrol_721" field.</summary>
    public const int LlcDiagBrakecontrol721FieldNumber = 12;
    private global::Apollo.Canbus.Llc_diag_brakecontrol_721 llcDiagBrakecontrol721_;
    /// <summary>
    /// control message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Llc_diag_brakecontrol_721 LlcDiagBrakecontrol721 {
      get { return llcDiagBrakecontrol721_; }
      set {
        llcDiagBrakecontrol721_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LlcVehiclelimits24, other.LlcVehiclelimits24)) return false;
      if (!object.Equals(AdcMotioncontrol110, other.AdcMotioncontrol110)) return false;
      if (!object.Equals(AdcMotioncontrollimits112, other.AdcMotioncontrollimits112)) return false;
      if (!object.Equals(LlcMotionfeedback120, other.LlcMotionfeedback120)) return false;
      if (!object.Equals(LlcMotionfeedback221, other.LlcMotionfeedback221)) return false;
      if (!object.Equals(LlcMotioncommandfeedback122, other.LlcMotioncommandfeedback122)) return false;
      if (!object.Equals(LlcVehiclestatus25, other.LlcVehiclestatus25)) return false;
      if (!object.Equals(LlcAuxiliaryfeedback120, other.LlcAuxiliaryfeedback120)) return false;
      if (!object.Equals(LlcDiagFault620, other.LlcDiagFault620)) return false;
      if (!object.Equals(LlcDiagSteeringcontrol722, other.LlcDiagSteeringcontrol722)) return false;
      if (!object.Equals(AdcAuxiliarycontrol110, other.AdcAuxiliarycontrol110)) return false;
      if (!object.Equals(LlcDiagBrakecontrol721, other.LlcDiagBrakecontrol721)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (llcVehiclelimits24_ != null) hash ^= LlcVehiclelimits24.GetHashCode();
      if (adcMotioncontrol110_ != null) hash ^= AdcMotioncontrol110.GetHashCode();
      if (adcMotioncontrollimits112_ != null) hash ^= AdcMotioncontrollimits112.GetHashCode();
      if (llcMotionfeedback120_ != null) hash ^= LlcMotionfeedback120.GetHashCode();
      if (llcMotionfeedback221_ != null) hash ^= LlcMotionfeedback221.GetHashCode();
      if (llcMotioncommandfeedback122_ != null) hash ^= LlcMotioncommandfeedback122.GetHashCode();
      if (llcVehiclestatus25_ != null) hash ^= LlcVehiclestatus25.GetHashCode();
      if (llcAuxiliaryfeedback120_ != null) hash ^= LlcAuxiliaryfeedback120.GetHashCode();
      if (llcDiagFault620_ != null) hash ^= LlcDiagFault620.GetHashCode();
      if (llcDiagSteeringcontrol722_ != null) hash ^= LlcDiagSteeringcontrol722.GetHashCode();
      if (adcAuxiliarycontrol110_ != null) hash ^= AdcAuxiliarycontrol110.GetHashCode();
      if (llcDiagBrakecontrol721_ != null) hash ^= LlcDiagBrakecontrol721.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (llcVehiclelimits24_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LlcVehiclelimits24);
      }
      if (adcMotioncontrol110_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AdcMotioncontrol110);
      }
      if (adcMotioncontrollimits112_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AdcMotioncontrollimits112);
      }
      if (llcMotionfeedback120_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LlcMotionfeedback120);
      }
      if (llcMotionfeedback221_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LlcMotionfeedback221);
      }
      if (llcMotioncommandfeedback122_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LlcMotioncommandfeedback122);
      }
      if (llcVehiclestatus25_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LlcVehiclestatus25);
      }
      if (llcAuxiliaryfeedback120_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LlcAuxiliaryfeedback120);
      }
      if (llcDiagFault620_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LlcDiagFault620);
      }
      if (llcDiagSteeringcontrol722_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(LlcDiagSteeringcontrol722);
      }
      if (adcAuxiliarycontrol110_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AdcAuxiliarycontrol110);
      }
      if (llcDiagBrakecontrol721_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LlcDiagBrakecontrol721);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (llcVehiclelimits24_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcVehiclelimits24);
      }
      if (adcMotioncontrol110_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdcMotioncontrol110);
      }
      if (adcMotioncontrollimits112_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdcMotioncontrollimits112);
      }
      if (llcMotionfeedback120_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcMotionfeedback120);
      }
      if (llcMotionfeedback221_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcMotionfeedback221);
      }
      if (llcMotioncommandfeedback122_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcMotioncommandfeedback122);
      }
      if (llcVehiclestatus25_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcVehiclestatus25);
      }
      if (llcAuxiliaryfeedback120_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcAuxiliaryfeedback120);
      }
      if (llcDiagFault620_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcDiagFault620);
      }
      if (llcDiagSteeringcontrol722_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcDiagSteeringcontrol722);
      }
      if (adcAuxiliarycontrol110_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdcAuxiliarycontrol110);
      }
      if (llcDiagBrakecontrol721_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlcDiagBrakecontrol721);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transit other) {
      if (other == null) {
        return;
      }
      if (other.llcVehiclelimits24_ != null) {
        if (llcVehiclelimits24_ == null) {
          llcVehiclelimits24_ = new global::Apollo.Canbus.Llc_vehiclelimits_24();
        }
        LlcVehiclelimits24.MergeFrom(other.LlcVehiclelimits24);
      }
      if (other.adcMotioncontrol110_ != null) {
        if (adcMotioncontrol110_ == null) {
          adcMotioncontrol110_ = new global::Apollo.Canbus.Adc_motioncontrol1_10();
        }
        AdcMotioncontrol110.MergeFrom(other.AdcMotioncontrol110);
      }
      if (other.adcMotioncontrollimits112_ != null) {
        if (adcMotioncontrollimits112_ == null) {
          adcMotioncontrollimits112_ = new global::Apollo.Canbus.Adc_motioncontrollimits1_12();
        }
        AdcMotioncontrollimits112.MergeFrom(other.AdcMotioncontrollimits112);
      }
      if (other.llcMotionfeedback120_ != null) {
        if (llcMotionfeedback120_ == null) {
          llcMotionfeedback120_ = new global::Apollo.Canbus.Llc_motionfeedback1_20();
        }
        LlcMotionfeedback120.MergeFrom(other.LlcMotionfeedback120);
      }
      if (other.llcMotionfeedback221_ != null) {
        if (llcMotionfeedback221_ == null) {
          llcMotionfeedback221_ = new global::Apollo.Canbus.Llc_motionfeedback2_21();
        }
        LlcMotionfeedback221.MergeFrom(other.LlcMotionfeedback221);
      }
      if (other.llcMotioncommandfeedback122_ != null) {
        if (llcMotioncommandfeedback122_ == null) {
          llcMotioncommandfeedback122_ = new global::Apollo.Canbus.Llc_motioncommandfeedback1_22();
        }
        LlcMotioncommandfeedback122.MergeFrom(other.LlcMotioncommandfeedback122);
      }
      if (other.llcVehiclestatus25_ != null) {
        if (llcVehiclestatus25_ == null) {
          llcVehiclestatus25_ = new global::Apollo.Canbus.Llc_vehiclestatus_25();
        }
        LlcVehiclestatus25.MergeFrom(other.LlcVehiclestatus25);
      }
      if (other.llcAuxiliaryfeedback120_ != null) {
        if (llcAuxiliaryfeedback120_ == null) {
          llcAuxiliaryfeedback120_ = new global::Apollo.Canbus.Llc_auxiliaryfeedback_120();
        }
        LlcAuxiliaryfeedback120.MergeFrom(other.LlcAuxiliaryfeedback120);
      }
      if (other.llcDiagFault620_ != null) {
        if (llcDiagFault620_ == null) {
          llcDiagFault620_ = new global::Apollo.Canbus.Llc_diag_fault_620();
        }
        LlcDiagFault620.MergeFrom(other.LlcDiagFault620);
      }
      if (other.llcDiagSteeringcontrol722_ != null) {
        if (llcDiagSteeringcontrol722_ == null) {
          llcDiagSteeringcontrol722_ = new global::Apollo.Canbus.Llc_diag_steeringcontrol_722();
        }
        LlcDiagSteeringcontrol722.MergeFrom(other.LlcDiagSteeringcontrol722);
      }
      if (other.adcAuxiliarycontrol110_ != null) {
        if (adcAuxiliarycontrol110_ == null) {
          adcAuxiliarycontrol110_ = new global::Apollo.Canbus.Adc_auxiliarycontrol_110();
        }
        AdcAuxiliarycontrol110.MergeFrom(other.AdcAuxiliarycontrol110);
      }
      if (other.llcDiagBrakecontrol721_ != null) {
        if (llcDiagBrakecontrol721_ == null) {
          llcDiagBrakecontrol721_ = new global::Apollo.Canbus.Llc_diag_brakecontrol_721();
        }
        LlcDiagBrakecontrol721.MergeFrom(other.LlcDiagBrakecontrol721);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (llcVehiclelimits24_ == null) {
              llcVehiclelimits24_ = new global::Apollo.Canbus.Llc_vehiclelimits_24();
            }
            input.ReadMessage(llcVehiclelimits24_);
            break;
          }
          case 18: {
            if (adcMotioncontrol110_ == null) {
              adcMotioncontrol110_ = new global::Apollo.Canbus.Adc_motioncontrol1_10();
            }
            input.ReadMessage(adcMotioncontrol110_);
            break;
          }
          case 26: {
            if (adcMotioncontrollimits112_ == null) {
              adcMotioncontrollimits112_ = new global::Apollo.Canbus.Adc_motioncontrollimits1_12();
            }
            input.ReadMessage(adcMotioncontrollimits112_);
            break;
          }
          case 34: {
            if (llcMotionfeedback120_ == null) {
              llcMotionfeedback120_ = new global::Apollo.Canbus.Llc_motionfeedback1_20();
            }
            input.ReadMessage(llcMotionfeedback120_);
            break;
          }
          case 42: {
            if (llcMotionfeedback221_ == null) {
              llcMotionfeedback221_ = new global::Apollo.Canbus.Llc_motionfeedback2_21();
            }
            input.ReadMessage(llcMotionfeedback221_);
            break;
          }
          case 50: {
            if (llcMotioncommandfeedback122_ == null) {
              llcMotioncommandfeedback122_ = new global::Apollo.Canbus.Llc_motioncommandfeedback1_22();
            }
            input.ReadMessage(llcMotioncommandfeedback122_);
            break;
          }
          case 58: {
            if (llcVehiclestatus25_ == null) {
              llcVehiclestatus25_ = new global::Apollo.Canbus.Llc_vehiclestatus_25();
            }
            input.ReadMessage(llcVehiclestatus25_);
            break;
          }
          case 66: {
            if (llcAuxiliaryfeedback120_ == null) {
              llcAuxiliaryfeedback120_ = new global::Apollo.Canbus.Llc_auxiliaryfeedback_120();
            }
            input.ReadMessage(llcAuxiliaryfeedback120_);
            break;
          }
          case 74: {
            if (llcDiagFault620_ == null) {
              llcDiagFault620_ = new global::Apollo.Canbus.Llc_diag_fault_620();
            }
            input.ReadMessage(llcDiagFault620_);
            break;
          }
          case 82: {
            if (llcDiagSteeringcontrol722_ == null) {
              llcDiagSteeringcontrol722_ = new global::Apollo.Canbus.Llc_diag_steeringcontrol_722();
            }
            input.ReadMessage(llcDiagSteeringcontrol722_);
            break;
          }
          case 90: {
            if (adcAuxiliarycontrol110_ == null) {
              adcAuxiliarycontrol110_ = new global::Apollo.Canbus.Adc_auxiliarycontrol_110();
            }
            input.ReadMessage(adcAuxiliarycontrol110_);
            break;
          }
          case 98: {
            if (llcDiagBrakecontrol721_ == null) {
              llcDiagBrakecontrol721_ = new global::Apollo.Canbus.Llc_diag_brakecontrol_721();
            }
            input.ReadMessage(llcDiagBrakecontrol721_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
