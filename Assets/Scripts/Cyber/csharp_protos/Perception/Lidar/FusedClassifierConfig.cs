// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/fused_classifier_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/proto/fused_classifier_config.proto</summary>
  public static partial class FusedClassifierConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/fused_classifier_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FusedClassifierConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vZnVzZWRfY2xhc3NpZmllcl9j",
            "b25maWcucHJvdG8SF2Fwb2xsby5wZXJjZXB0aW9uLmxpZGFyIq0BChVGdXNl",
            "ZENsYXNzaWZpZXJDb25maWcSFwoPdGVtcG9yYWxfd2luZG93GAEgASgBEh4K",
            "FmVuYWJsZV90ZW1wb3JhbF9mdXNpb24YAiABKAgSHgoWb25lX3Nob3RfZnVz",
            "aW9uX21ldGhvZBgDIAEoCRIeChZzZXF1ZW5jZV9mdXNpb25fbWV0aG9kGAQg",
            "ASgJEhsKE3VzZV90cmFja2VkX29iamVjdHMYBSABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.FusedClassifierConfig), global::Apollo.Perception.Lidar.FusedClassifierConfig.Parser, new[]{ "TemporalWindow", "EnableTemporalFusion", "OneShotFusionMethod", "SequenceFusionMethod", "UseTrackedObjects" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FusedClassifierConfig : pb::IMessage<FusedClassifierConfig> {
    private static readonly pb::MessageParser<FusedClassifierConfig> _parser = new pb::MessageParser<FusedClassifierConfig>(() => new FusedClassifierConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FusedClassifierConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.FusedClassifierConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusedClassifierConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusedClassifierConfig(FusedClassifierConfig other) : this() {
      temporalWindow_ = other.temporalWindow_;
      enableTemporalFusion_ = other.enableTemporalFusion_;
      oneShotFusionMethod_ = other.oneShotFusionMethod_;
      sequenceFusionMethod_ = other.sequenceFusionMethod_;
      useTrackedObjects_ = other.useTrackedObjects_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusedClassifierConfig Clone() {
      return new FusedClassifierConfig(this);
    }

    /// <summary>Field number for the "temporal_window" field.</summary>
    public const int TemporalWindowFieldNumber = 1;
    private double temporalWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TemporalWindow {
      get { return temporalWindow_; }
      set {
        temporalWindow_ = value;
      }
    }

    /// <summary>Field number for the "enable_temporal_fusion" field.</summary>
    public const int EnableTemporalFusionFieldNumber = 2;
    private bool enableTemporalFusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableTemporalFusion {
      get { return enableTemporalFusion_; }
      set {
        enableTemporalFusion_ = value;
      }
    }

    /// <summary>Field number for the "one_shot_fusion_method" field.</summary>
    public const int OneShotFusionMethodFieldNumber = 3;
    private string oneShotFusionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OneShotFusionMethod {
      get { return oneShotFusionMethod_; }
      set {
        oneShotFusionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_fusion_method" field.</summary>
    public const int SequenceFusionMethodFieldNumber = 4;
    private string sequenceFusionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SequenceFusionMethod {
      get { return sequenceFusionMethod_; }
      set {
        sequenceFusionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_tracked_objects" field.</summary>
    public const int UseTrackedObjectsFieldNumber = 5;
    private bool useTrackedObjects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseTrackedObjects {
      get { return useTrackedObjects_; }
      set {
        useTrackedObjects_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FusedClassifierConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FusedClassifierConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TemporalWindow != other.TemporalWindow) return false;
      if (EnableTemporalFusion != other.EnableTemporalFusion) return false;
      if (OneShotFusionMethod != other.OneShotFusionMethod) return false;
      if (SequenceFusionMethod != other.SequenceFusionMethod) return false;
      if (UseTrackedObjects != other.UseTrackedObjects) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TemporalWindow != 0D) hash ^= TemporalWindow.GetHashCode();
      if (EnableTemporalFusion != false) hash ^= EnableTemporalFusion.GetHashCode();
      if (OneShotFusionMethod.Length != 0) hash ^= OneShotFusionMethod.GetHashCode();
      if (SequenceFusionMethod.Length != 0) hash ^= SequenceFusionMethod.GetHashCode();
      if (UseTrackedObjects != false) hash ^= UseTrackedObjects.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TemporalWindow != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TemporalWindow);
      }
      if (EnableTemporalFusion != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableTemporalFusion);
      }
      if (OneShotFusionMethod.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OneShotFusionMethod);
      }
      if (SequenceFusionMethod.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SequenceFusionMethod);
      }
      if (UseTrackedObjects != false) {
        output.WriteRawTag(40);
        output.WriteBool(UseTrackedObjects);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TemporalWindow != 0D) {
        size += 1 + 8;
      }
      if (EnableTemporalFusion != false) {
        size += 1 + 1;
      }
      if (OneShotFusionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OneShotFusionMethod);
      }
      if (SequenceFusionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SequenceFusionMethod);
      }
      if (UseTrackedObjects != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FusedClassifierConfig other) {
      if (other == null) {
        return;
      }
      if (other.TemporalWindow != 0D) {
        TemporalWindow = other.TemporalWindow;
      }
      if (other.EnableTemporalFusion != false) {
        EnableTemporalFusion = other.EnableTemporalFusion;
      }
      if (other.OneShotFusionMethod.Length != 0) {
        OneShotFusionMethod = other.OneShotFusionMethod;
      }
      if (other.SequenceFusionMethod.Length != 0) {
        SequenceFusionMethod = other.SequenceFusionMethod;
      }
      if (other.UseTrackedObjects != false) {
        UseTrackedObjects = other.UseTrackedObjects;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TemporalWindow = input.ReadDouble();
            break;
          }
          case 16: {
            EnableTemporalFusion = input.ReadBool();
            break;
          }
          case 26: {
            OneShotFusionMethod = input.ReadString();
            break;
          }
          case 34: {
            SequenceFusionMethod = input.ReadString();
            break;
          }
          case 40: {
            UseTrackedObjects = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
