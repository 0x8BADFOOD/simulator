// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto</summary>
  public static partial class MultiLidarFusionConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MultiLidarFusionConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cl1tb2R1bGVzL3BlcmNlcHRpb24vbGlkYXIvbGliL3RyYWNrZXIvbXVsdGlf",
            "bGlkYXJfZnVzaW9uL3Byb3RvL211bHRpX2xpZGFyX2Z1c2lvbl9jb25maWcu",
            "cHJvdG8SF2Fwb2xsby5wZXJjZXB0aW9uLmxpZGFyIokCChFNbGZEaXN0YW5j",
            "ZVdlaWdodBIYChBzZW5zb3JfbmFtZV9wYWlyGAEgASgJEhwKFGxvY2F0aW9u",
            "X2Rpc3Rfd2VpZ2h0GAIgASgCEh0KFWRpcmVjdGlvbl9kaXN0X3dlaWdodBgD",
            "IAEoAhIdChViYm94X3NpemVfZGlzdF93ZWlnaHQYBCABKAISHQoVcG9pbnRf",
            "bnVtX2Rpc3Rfd2VpZ2h0GAUgASgCEh0KFWhpc3RvZ3JhbV9kaXN0X3dlaWdo",
            "dBgGIAEoAhIiChpjZW50cm9pZF9zaGlmdF9kaXN0X3dlaWdodBgHIAEoAhIc",
            "ChRiYm94X2lvdV9kaXN0X3dlaWdodBgIIAEoAiKjAQoRTWxmRGlzdGFuY2VD",
            "b25maWcSRgoSZm9yZWdyb3VuZF93ZWlnaHRzGAEgAygLMiouYXBvbGxvLnBl",
            "cmNlcHRpb24ubGlkYXIuTWxmRGlzdGFuY2VXZWlnaHQSRgoSYmFja2dyb3Vu",
            "ZF93ZWlnaHRzGAIgAygLMiouYXBvbGxvLnBlcmNlcHRpb24ubGlkYXIuTWxm",
            "RGlzdGFuY2VXZWlnaHQilAEKG01sZlRyYWNrT2JqZWN0TWF0Y2hlckNvbmZp",
            "ZxIhChlmb3JlZ3JvdW5kX21hdGhjZXJfbWV0aG9kGAEgASgJEiEKGWJhY2tn",
            "cm91bmRfbWF0Y2hlcl9tZXRob2QYAiABKAkSEwoLYm91bmRfdmFsdWUYAyAB",
            "KAISGgoSbWF4X21hdGNoX2Rpc3RhbmNlGAQgASgCIicKEE1sZlRyYWNrZXJD",
            "b25maWcSEwoLZmlsdGVyX25hbWUYASADKAkinAMKFU1sZk1vdGlvbkZpbHRl",
            "ckNvbmZpZxIUCgx1c2VfYWRhcHRpdmUYASABKAgSFQoNdXNlX2JyZWFrZG93",
            "bhgCIAEoCBIfChd1c2VfY29udmVyZ2VuY2VfYm9vc3R1cBgDIAEoCBIeChZp",
            "bml0X3ZlbG9jaXR5X3ZhcmlhbmNlGAQgASgBEiIKGmluaXRfYWNjZWxlcmF0",
            "aW9uX3ZhcmlhbmNlGAUgASgBEiIKGm1lYXN1cmVkX3ZlbG9jaXR5X3Zhcmlh",
            "bmNlGAYgASgBEiMKG3ByZWRpY3RfdmFyaWFuY2VfcGVyX3NxcnNlYxgHIAEo",
            "ARIkChxib29zdHVwX2hpc3Rvcnlfc2l6ZV9taW5pbXVtGAggASgNEiQKHGJv",
            "b3N0dXBfaGlzdG9yeV9zaXplX21heGltdW0YCSABKA0SJAocY29udmVyZ2Vk",
            "X2NvbmZpZGVuY2VfbWluaW11bRgKIAEoARIVCg1ub2lzZV9tYXhpbXVtGAwg",
            "ASgBEh8KF3RydXN0X29yaWVudGF0aW9uX3JhbmdlGA0gASgBImEKFk1sZk1v",
            "dGlvblJlZmluZXJDb25maWcSJgoeY2xhcGluZ19hY2NlbGVyYXRpb25fdGhy",
            "ZXNob2xkGAEgASgBEh8KF2NsYXBpbmdfc3BlZWRfdGhyZXNob2xkGAIgASgB",
            "ImMKFE1sZlNoYXBlRmlsdGVyQ29uZmlnEiYKHmJvdHRvbV9wb2ludHNfaWdu",
            "b3JlX3RocmVzaG9sZBgBIAEoARIjCht0b3BfcG9pbnRzX2lnbm9yZV90aHJl",
            "c2hvbGQYAiABKAEiwQEKD01sZkVuZ2luZUNvbmZpZxITCgttYWluX3NlbnNv",
            "chgBIAMoCRIfChd1c2VfaGlzdG9ncmFtX2Zvcl9tYXRjaBgCIAEoCBIaChJo",
            "aXN0b2dyYW1fYmluX3NpemUYAyABKA0SHgoWb3V0cHV0X3ByZWRpY3Rfb2Jq",
            "ZWN0cxgEIAEoCBIfChdyZXNlcnZlZF9pbnZpc2libGVfdGltZRgFIAEoARIb",
            "ChN1c2VfZnJhbWVfdGltZXN0YW1wGAYgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfDistanceWeight), global::Apollo.Perception.Lidar.MlfDistanceWeight.Parser, new[]{ "SensorNamePair", "LocationDistWeight", "DirectionDistWeight", "BboxSizeDistWeight", "PointNumDistWeight", "HistogramDistWeight", "CentroidShiftDistWeight", "BboxIouDistWeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfDistanceConfig), global::Apollo.Perception.Lidar.MlfDistanceConfig.Parser, new[]{ "ForegroundWeights", "BackgroundWeights" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfTrackObjectMatcherConfig), global::Apollo.Perception.Lidar.MlfTrackObjectMatcherConfig.Parser, new[]{ "ForegroundMathcerMethod", "BackgroundMatcherMethod", "BoundValue", "MaxMatchDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfTrackerConfig), global::Apollo.Perception.Lidar.MlfTrackerConfig.Parser, new[]{ "FilterName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfMotionFilterConfig), global::Apollo.Perception.Lidar.MlfMotionFilterConfig.Parser, new[]{ "UseAdaptive", "UseBreakdown", "UseConvergenceBoostup", "InitVelocityVariance", "InitAccelerationVariance", "MeasuredVelocityVariance", "PredictVariancePerSqrsec", "BoostupHistorySizeMinimum", "BoostupHistorySizeMaximum", "ConvergedConfidenceMinimum", "NoiseMaximum", "TrustOrientationRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfMotionRefinerConfig), global::Apollo.Perception.Lidar.MlfMotionRefinerConfig.Parser, new[]{ "ClapingAccelerationThreshold", "ClapingSpeedThreshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfShapeFilterConfig), global::Apollo.Perception.Lidar.MlfShapeFilterConfig.Parser, new[]{ "BottomPointsIgnoreThreshold", "TopPointsIgnoreThreshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MlfEngineConfig), global::Apollo.Perception.Lidar.MlfEngineConfig.Parser, new[]{ "MainSensor", "UseHistogramForMatch", "HistogramBinSize", "OutputPredictObjects", "ReservedInvisibleTime", "UseFrameTimestamp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MlfDistanceWeight : pb::IMessage<MlfDistanceWeight> {
    private static readonly pb::MessageParser<MlfDistanceWeight> _parser = new pb::MessageParser<MlfDistanceWeight>(() => new MlfDistanceWeight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfDistanceWeight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfDistanceWeight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfDistanceWeight(MlfDistanceWeight other) : this() {
      sensorNamePair_ = other.sensorNamePair_;
      locationDistWeight_ = other.locationDistWeight_;
      directionDistWeight_ = other.directionDistWeight_;
      bboxSizeDistWeight_ = other.bboxSizeDistWeight_;
      pointNumDistWeight_ = other.pointNumDistWeight_;
      histogramDistWeight_ = other.histogramDistWeight_;
      centroidShiftDistWeight_ = other.centroidShiftDistWeight_;
      bboxIouDistWeight_ = other.bboxIouDistWeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfDistanceWeight Clone() {
      return new MlfDistanceWeight(this);
    }

    /// <summary>Field number for the "sensor_name_pair" field.</summary>
    public const int SensorNamePairFieldNumber = 1;
    private string sensorNamePair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorNamePair {
      get { return sensorNamePair_; }
      set {
        sensorNamePair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location_dist_weight" field.</summary>
    public const int LocationDistWeightFieldNumber = 2;
    private float locationDistWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocationDistWeight {
      get { return locationDistWeight_; }
      set {
        locationDistWeight_ = value;
      }
    }

    /// <summary>Field number for the "direction_dist_weight" field.</summary>
    public const int DirectionDistWeightFieldNumber = 3;
    private float directionDistWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionDistWeight {
      get { return directionDistWeight_; }
      set {
        directionDistWeight_ = value;
      }
    }

    /// <summary>Field number for the "bbox_size_dist_weight" field.</summary>
    public const int BboxSizeDistWeightFieldNumber = 4;
    private float bboxSizeDistWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BboxSizeDistWeight {
      get { return bboxSizeDistWeight_; }
      set {
        bboxSizeDistWeight_ = value;
      }
    }

    /// <summary>Field number for the "point_num_dist_weight" field.</summary>
    public const int PointNumDistWeightFieldNumber = 5;
    private float pointNumDistWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PointNumDistWeight {
      get { return pointNumDistWeight_; }
      set {
        pointNumDistWeight_ = value;
      }
    }

    /// <summary>Field number for the "histogram_dist_weight" field.</summary>
    public const int HistogramDistWeightFieldNumber = 6;
    private float histogramDistWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HistogramDistWeight {
      get { return histogramDistWeight_; }
      set {
        histogramDistWeight_ = value;
      }
    }

    /// <summary>Field number for the "centroid_shift_dist_weight" field.</summary>
    public const int CentroidShiftDistWeightFieldNumber = 7;
    private float centroidShiftDistWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CentroidShiftDistWeight {
      get { return centroidShiftDistWeight_; }
      set {
        centroidShiftDistWeight_ = value;
      }
    }

    /// <summary>Field number for the "bbox_iou_dist_weight" field.</summary>
    public const int BboxIouDistWeightFieldNumber = 8;
    private float bboxIouDistWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BboxIouDistWeight {
      get { return bboxIouDistWeight_; }
      set {
        bboxIouDistWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfDistanceWeight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfDistanceWeight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SensorNamePair != other.SensorNamePair) return false;
      if (LocationDistWeight != other.LocationDistWeight) return false;
      if (DirectionDistWeight != other.DirectionDistWeight) return false;
      if (BboxSizeDistWeight != other.BboxSizeDistWeight) return false;
      if (PointNumDistWeight != other.PointNumDistWeight) return false;
      if (HistogramDistWeight != other.HistogramDistWeight) return false;
      if (CentroidShiftDistWeight != other.CentroidShiftDistWeight) return false;
      if (BboxIouDistWeight != other.BboxIouDistWeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SensorNamePair.Length != 0) hash ^= SensorNamePair.GetHashCode();
      if (LocationDistWeight != 0F) hash ^= LocationDistWeight.GetHashCode();
      if (DirectionDistWeight != 0F) hash ^= DirectionDistWeight.GetHashCode();
      if (BboxSizeDistWeight != 0F) hash ^= BboxSizeDistWeight.GetHashCode();
      if (PointNumDistWeight != 0F) hash ^= PointNumDistWeight.GetHashCode();
      if (HistogramDistWeight != 0F) hash ^= HistogramDistWeight.GetHashCode();
      if (CentroidShiftDistWeight != 0F) hash ^= CentroidShiftDistWeight.GetHashCode();
      if (BboxIouDistWeight != 0F) hash ^= BboxIouDistWeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SensorNamePair.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SensorNamePair);
      }
      if (LocationDistWeight != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LocationDistWeight);
      }
      if (DirectionDistWeight != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DirectionDistWeight);
      }
      if (BboxSizeDistWeight != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BboxSizeDistWeight);
      }
      if (PointNumDistWeight != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PointNumDistWeight);
      }
      if (HistogramDistWeight != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(HistogramDistWeight);
      }
      if (CentroidShiftDistWeight != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CentroidShiftDistWeight);
      }
      if (BboxIouDistWeight != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BboxIouDistWeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SensorNamePair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorNamePair);
      }
      if (LocationDistWeight != 0F) {
        size += 1 + 4;
      }
      if (DirectionDistWeight != 0F) {
        size += 1 + 4;
      }
      if (BboxSizeDistWeight != 0F) {
        size += 1 + 4;
      }
      if (PointNumDistWeight != 0F) {
        size += 1 + 4;
      }
      if (HistogramDistWeight != 0F) {
        size += 1 + 4;
      }
      if (CentroidShiftDistWeight != 0F) {
        size += 1 + 4;
      }
      if (BboxIouDistWeight != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfDistanceWeight other) {
      if (other == null) {
        return;
      }
      if (other.SensorNamePair.Length != 0) {
        SensorNamePair = other.SensorNamePair;
      }
      if (other.LocationDistWeight != 0F) {
        LocationDistWeight = other.LocationDistWeight;
      }
      if (other.DirectionDistWeight != 0F) {
        DirectionDistWeight = other.DirectionDistWeight;
      }
      if (other.BboxSizeDistWeight != 0F) {
        BboxSizeDistWeight = other.BboxSizeDistWeight;
      }
      if (other.PointNumDistWeight != 0F) {
        PointNumDistWeight = other.PointNumDistWeight;
      }
      if (other.HistogramDistWeight != 0F) {
        HistogramDistWeight = other.HistogramDistWeight;
      }
      if (other.CentroidShiftDistWeight != 0F) {
        CentroidShiftDistWeight = other.CentroidShiftDistWeight;
      }
      if (other.BboxIouDistWeight != 0F) {
        BboxIouDistWeight = other.BboxIouDistWeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SensorNamePair = input.ReadString();
            break;
          }
          case 21: {
            LocationDistWeight = input.ReadFloat();
            break;
          }
          case 29: {
            DirectionDistWeight = input.ReadFloat();
            break;
          }
          case 37: {
            BboxSizeDistWeight = input.ReadFloat();
            break;
          }
          case 45: {
            PointNumDistWeight = input.ReadFloat();
            break;
          }
          case 53: {
            HistogramDistWeight = input.ReadFloat();
            break;
          }
          case 61: {
            CentroidShiftDistWeight = input.ReadFloat();
            break;
          }
          case 69: {
            BboxIouDistWeight = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MlfDistanceConfig : pb::IMessage<MlfDistanceConfig> {
    private static readonly pb::MessageParser<MlfDistanceConfig> _parser = new pb::MessageParser<MlfDistanceConfig>(() => new MlfDistanceConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfDistanceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfDistanceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfDistanceConfig(MlfDistanceConfig other) : this() {
      foregroundWeights_ = other.foregroundWeights_.Clone();
      backgroundWeights_ = other.backgroundWeights_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfDistanceConfig Clone() {
      return new MlfDistanceConfig(this);
    }

    /// <summary>Field number for the "foreground_weights" field.</summary>
    public const int ForegroundWeightsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Lidar.MlfDistanceWeight> _repeated_foregroundWeights_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.Lidar.MlfDistanceWeight.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Lidar.MlfDistanceWeight> foregroundWeights_ = new pbc::RepeatedField<global::Apollo.Perception.Lidar.MlfDistanceWeight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Lidar.MlfDistanceWeight> ForegroundWeights {
      get { return foregroundWeights_; }
    }

    /// <summary>Field number for the "background_weights" field.</summary>
    public const int BackgroundWeightsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Lidar.MlfDistanceWeight> _repeated_backgroundWeights_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Perception.Lidar.MlfDistanceWeight.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Lidar.MlfDistanceWeight> backgroundWeights_ = new pbc::RepeatedField<global::Apollo.Perception.Lidar.MlfDistanceWeight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Lidar.MlfDistanceWeight> BackgroundWeights {
      get { return backgroundWeights_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfDistanceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfDistanceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!foregroundWeights_.Equals(other.foregroundWeights_)) return false;
      if(!backgroundWeights_.Equals(other.backgroundWeights_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= foregroundWeights_.GetHashCode();
      hash ^= backgroundWeights_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      foregroundWeights_.WriteTo(output, _repeated_foregroundWeights_codec);
      backgroundWeights_.WriteTo(output, _repeated_backgroundWeights_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += foregroundWeights_.CalculateSize(_repeated_foregroundWeights_codec);
      size += backgroundWeights_.CalculateSize(_repeated_backgroundWeights_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfDistanceConfig other) {
      if (other == null) {
        return;
      }
      foregroundWeights_.Add(other.foregroundWeights_);
      backgroundWeights_.Add(other.backgroundWeights_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            foregroundWeights_.AddEntriesFrom(input, _repeated_foregroundWeights_codec);
            break;
          }
          case 18: {
            backgroundWeights_.AddEntriesFrom(input, _repeated_backgroundWeights_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MlfTrackObjectMatcherConfig : pb::IMessage<MlfTrackObjectMatcherConfig> {
    private static readonly pb::MessageParser<MlfTrackObjectMatcherConfig> _parser = new pb::MessageParser<MlfTrackObjectMatcherConfig>(() => new MlfTrackObjectMatcherConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfTrackObjectMatcherConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfTrackObjectMatcherConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfTrackObjectMatcherConfig(MlfTrackObjectMatcherConfig other) : this() {
      foregroundMathcerMethod_ = other.foregroundMathcerMethod_;
      backgroundMatcherMethod_ = other.backgroundMatcherMethod_;
      boundValue_ = other.boundValue_;
      maxMatchDistance_ = other.maxMatchDistance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfTrackObjectMatcherConfig Clone() {
      return new MlfTrackObjectMatcherConfig(this);
    }

    /// <summary>Field number for the "foreground_mathcer_method" field.</summary>
    public const int ForegroundMathcerMethodFieldNumber = 1;
    private string foregroundMathcerMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForegroundMathcerMethod {
      get { return foregroundMathcerMethod_; }
      set {
        foregroundMathcerMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "background_matcher_method" field.</summary>
    public const int BackgroundMatcherMethodFieldNumber = 2;
    private string backgroundMatcherMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackgroundMatcherMethod {
      get { return backgroundMatcherMethod_; }
      set {
        backgroundMatcherMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bound_value" field.</summary>
    public const int BoundValueFieldNumber = 3;
    private float boundValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoundValue {
      get { return boundValue_; }
      set {
        boundValue_ = value;
      }
    }

    /// <summary>Field number for the "max_match_distance" field.</summary>
    public const int MaxMatchDistanceFieldNumber = 4;
    private float maxMatchDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxMatchDistance {
      get { return maxMatchDistance_; }
      set {
        maxMatchDistance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfTrackObjectMatcherConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfTrackObjectMatcherConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ForegroundMathcerMethod != other.ForegroundMathcerMethod) return false;
      if (BackgroundMatcherMethod != other.BackgroundMatcherMethod) return false;
      if (BoundValue != other.BoundValue) return false;
      if (MaxMatchDistance != other.MaxMatchDistance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ForegroundMathcerMethod.Length != 0) hash ^= ForegroundMathcerMethod.GetHashCode();
      if (BackgroundMatcherMethod.Length != 0) hash ^= BackgroundMatcherMethod.GetHashCode();
      if (BoundValue != 0F) hash ^= BoundValue.GetHashCode();
      if (MaxMatchDistance != 0F) hash ^= MaxMatchDistance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ForegroundMathcerMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ForegroundMathcerMethod);
      }
      if (BackgroundMatcherMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BackgroundMatcherMethod);
      }
      if (BoundValue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BoundValue);
      }
      if (MaxMatchDistance != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxMatchDistance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ForegroundMathcerMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForegroundMathcerMethod);
      }
      if (BackgroundMatcherMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundMatcherMethod);
      }
      if (BoundValue != 0F) {
        size += 1 + 4;
      }
      if (MaxMatchDistance != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfTrackObjectMatcherConfig other) {
      if (other == null) {
        return;
      }
      if (other.ForegroundMathcerMethod.Length != 0) {
        ForegroundMathcerMethod = other.ForegroundMathcerMethod;
      }
      if (other.BackgroundMatcherMethod.Length != 0) {
        BackgroundMatcherMethod = other.BackgroundMatcherMethod;
      }
      if (other.BoundValue != 0F) {
        BoundValue = other.BoundValue;
      }
      if (other.MaxMatchDistance != 0F) {
        MaxMatchDistance = other.MaxMatchDistance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ForegroundMathcerMethod = input.ReadString();
            break;
          }
          case 18: {
            BackgroundMatcherMethod = input.ReadString();
            break;
          }
          case 29: {
            BoundValue = input.ReadFloat();
            break;
          }
          case 37: {
            MaxMatchDistance = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MlfTrackerConfig : pb::IMessage<MlfTrackerConfig> {
    private static readonly pb::MessageParser<MlfTrackerConfig> _parser = new pb::MessageParser<MlfTrackerConfig>(() => new MlfTrackerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfTrackerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfTrackerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfTrackerConfig(MlfTrackerConfig other) : this() {
      filterName_ = other.filterName_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfTrackerConfig Clone() {
      return new MlfTrackerConfig(this);
    }

    /// <summary>Field number for the "filter_name" field.</summary>
    public const int FilterNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_filterName_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> filterName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FilterName {
      get { return filterName_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfTrackerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfTrackerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filterName_.Equals(other.filterName_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filterName_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filterName_.WriteTo(output, _repeated_filterName_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filterName_.CalculateSize(_repeated_filterName_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfTrackerConfig other) {
      if (other == null) {
        return;
      }
      filterName_.Add(other.filterName_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            filterName_.AddEntriesFrom(input, _repeated_filterName_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MlfMotionFilterConfig : pb::IMessage<MlfMotionFilterConfig> {
    private static readonly pb::MessageParser<MlfMotionFilterConfig> _parser = new pb::MessageParser<MlfMotionFilterConfig>(() => new MlfMotionFilterConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfMotionFilterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfMotionFilterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfMotionFilterConfig(MlfMotionFilterConfig other) : this() {
      useAdaptive_ = other.useAdaptive_;
      useBreakdown_ = other.useBreakdown_;
      useConvergenceBoostup_ = other.useConvergenceBoostup_;
      initVelocityVariance_ = other.initVelocityVariance_;
      initAccelerationVariance_ = other.initAccelerationVariance_;
      measuredVelocityVariance_ = other.measuredVelocityVariance_;
      predictVariancePerSqrsec_ = other.predictVariancePerSqrsec_;
      boostupHistorySizeMinimum_ = other.boostupHistorySizeMinimum_;
      boostupHistorySizeMaximum_ = other.boostupHistorySizeMaximum_;
      convergedConfidenceMinimum_ = other.convergedConfidenceMinimum_;
      noiseMaximum_ = other.noiseMaximum_;
      trustOrientationRange_ = other.trustOrientationRange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfMotionFilterConfig Clone() {
      return new MlfMotionFilterConfig(this);
    }

    /// <summary>Field number for the "use_adaptive" field.</summary>
    public const int UseAdaptiveFieldNumber = 1;
    private bool useAdaptive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseAdaptive {
      get { return useAdaptive_; }
      set {
        useAdaptive_ = value;
      }
    }

    /// <summary>Field number for the "use_breakdown" field.</summary>
    public const int UseBreakdownFieldNumber = 2;
    private bool useBreakdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBreakdown {
      get { return useBreakdown_; }
      set {
        useBreakdown_ = value;
      }
    }

    /// <summary>Field number for the "use_convergence_boostup" field.</summary>
    public const int UseConvergenceBoostupFieldNumber = 3;
    private bool useConvergenceBoostup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseConvergenceBoostup {
      get { return useConvergenceBoostup_; }
      set {
        useConvergenceBoostup_ = value;
      }
    }

    /// <summary>Field number for the "init_velocity_variance" field.</summary>
    public const int InitVelocityVarianceFieldNumber = 4;
    private double initVelocityVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InitVelocityVariance {
      get { return initVelocityVariance_; }
      set {
        initVelocityVariance_ = value;
      }
    }

    /// <summary>Field number for the "init_acceleration_variance" field.</summary>
    public const int InitAccelerationVarianceFieldNumber = 5;
    private double initAccelerationVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InitAccelerationVariance {
      get { return initAccelerationVariance_; }
      set {
        initAccelerationVariance_ = value;
      }
    }

    /// <summary>Field number for the "measured_velocity_variance" field.</summary>
    public const int MeasuredVelocityVarianceFieldNumber = 6;
    private double measuredVelocityVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MeasuredVelocityVariance {
      get { return measuredVelocityVariance_; }
      set {
        measuredVelocityVariance_ = value;
      }
    }

    /// <summary>Field number for the "predict_variance_per_sqrsec" field.</summary>
    public const int PredictVariancePerSqrsecFieldNumber = 7;
    private double predictVariancePerSqrsec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PredictVariancePerSqrsec {
      get { return predictVariancePerSqrsec_; }
      set {
        predictVariancePerSqrsec_ = value;
      }
    }

    /// <summary>Field number for the "boostup_history_size_minimum" field.</summary>
    public const int BoostupHistorySizeMinimumFieldNumber = 8;
    private uint boostupHistorySizeMinimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoostupHistorySizeMinimum {
      get { return boostupHistorySizeMinimum_; }
      set {
        boostupHistorySizeMinimum_ = value;
      }
    }

    /// <summary>Field number for the "boostup_history_size_maximum" field.</summary>
    public const int BoostupHistorySizeMaximumFieldNumber = 9;
    private uint boostupHistorySizeMaximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoostupHistorySizeMaximum {
      get { return boostupHistorySizeMaximum_; }
      set {
        boostupHistorySizeMaximum_ = value;
      }
    }

    /// <summary>Field number for the "converged_confidence_minimum" field.</summary>
    public const int ConvergedConfidenceMinimumFieldNumber = 10;
    private double convergedConfidenceMinimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConvergedConfidenceMinimum {
      get { return convergedConfidenceMinimum_; }
      set {
        convergedConfidenceMinimum_ = value;
      }
    }

    /// <summary>Field number for the "noise_maximum" field.</summary>
    public const int NoiseMaximumFieldNumber = 12;
    private double noiseMaximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NoiseMaximum {
      get { return noiseMaximum_; }
      set {
        noiseMaximum_ = value;
      }
    }

    /// <summary>Field number for the "trust_orientation_range" field.</summary>
    public const int TrustOrientationRangeFieldNumber = 13;
    private double trustOrientationRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrustOrientationRange {
      get { return trustOrientationRange_; }
      set {
        trustOrientationRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfMotionFilterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfMotionFilterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseAdaptive != other.UseAdaptive) return false;
      if (UseBreakdown != other.UseBreakdown) return false;
      if (UseConvergenceBoostup != other.UseConvergenceBoostup) return false;
      if (InitVelocityVariance != other.InitVelocityVariance) return false;
      if (InitAccelerationVariance != other.InitAccelerationVariance) return false;
      if (MeasuredVelocityVariance != other.MeasuredVelocityVariance) return false;
      if (PredictVariancePerSqrsec != other.PredictVariancePerSqrsec) return false;
      if (BoostupHistorySizeMinimum != other.BoostupHistorySizeMinimum) return false;
      if (BoostupHistorySizeMaximum != other.BoostupHistorySizeMaximum) return false;
      if (ConvergedConfidenceMinimum != other.ConvergedConfidenceMinimum) return false;
      if (NoiseMaximum != other.NoiseMaximum) return false;
      if (TrustOrientationRange != other.TrustOrientationRange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseAdaptive != false) hash ^= UseAdaptive.GetHashCode();
      if (UseBreakdown != false) hash ^= UseBreakdown.GetHashCode();
      if (UseConvergenceBoostup != false) hash ^= UseConvergenceBoostup.GetHashCode();
      if (InitVelocityVariance != 0D) hash ^= InitVelocityVariance.GetHashCode();
      if (InitAccelerationVariance != 0D) hash ^= InitAccelerationVariance.GetHashCode();
      if (MeasuredVelocityVariance != 0D) hash ^= MeasuredVelocityVariance.GetHashCode();
      if (PredictVariancePerSqrsec != 0D) hash ^= PredictVariancePerSqrsec.GetHashCode();
      if (BoostupHistorySizeMinimum != 0) hash ^= BoostupHistorySizeMinimum.GetHashCode();
      if (BoostupHistorySizeMaximum != 0) hash ^= BoostupHistorySizeMaximum.GetHashCode();
      if (ConvergedConfidenceMinimum != 0D) hash ^= ConvergedConfidenceMinimum.GetHashCode();
      if (NoiseMaximum != 0D) hash ^= NoiseMaximum.GetHashCode();
      if (TrustOrientationRange != 0D) hash ^= TrustOrientationRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseAdaptive != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseAdaptive);
      }
      if (UseBreakdown != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseBreakdown);
      }
      if (UseConvergenceBoostup != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseConvergenceBoostup);
      }
      if (InitVelocityVariance != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(InitVelocityVariance);
      }
      if (InitAccelerationVariance != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(InitAccelerationVariance);
      }
      if (MeasuredVelocityVariance != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MeasuredVelocityVariance);
      }
      if (PredictVariancePerSqrsec != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PredictVariancePerSqrsec);
      }
      if (BoostupHistorySizeMinimum != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BoostupHistorySizeMinimum);
      }
      if (BoostupHistorySizeMaximum != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(BoostupHistorySizeMaximum);
      }
      if (ConvergedConfidenceMinimum != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ConvergedConfidenceMinimum);
      }
      if (NoiseMaximum != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(NoiseMaximum);
      }
      if (TrustOrientationRange != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(TrustOrientationRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseAdaptive != false) {
        size += 1 + 1;
      }
      if (UseBreakdown != false) {
        size += 1 + 1;
      }
      if (UseConvergenceBoostup != false) {
        size += 1 + 1;
      }
      if (InitVelocityVariance != 0D) {
        size += 1 + 8;
      }
      if (InitAccelerationVariance != 0D) {
        size += 1 + 8;
      }
      if (MeasuredVelocityVariance != 0D) {
        size += 1 + 8;
      }
      if (PredictVariancePerSqrsec != 0D) {
        size += 1 + 8;
      }
      if (BoostupHistorySizeMinimum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoostupHistorySizeMinimum);
      }
      if (BoostupHistorySizeMaximum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoostupHistorySizeMaximum);
      }
      if (ConvergedConfidenceMinimum != 0D) {
        size += 1 + 8;
      }
      if (NoiseMaximum != 0D) {
        size += 1 + 8;
      }
      if (TrustOrientationRange != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfMotionFilterConfig other) {
      if (other == null) {
        return;
      }
      if (other.UseAdaptive != false) {
        UseAdaptive = other.UseAdaptive;
      }
      if (other.UseBreakdown != false) {
        UseBreakdown = other.UseBreakdown;
      }
      if (other.UseConvergenceBoostup != false) {
        UseConvergenceBoostup = other.UseConvergenceBoostup;
      }
      if (other.InitVelocityVariance != 0D) {
        InitVelocityVariance = other.InitVelocityVariance;
      }
      if (other.InitAccelerationVariance != 0D) {
        InitAccelerationVariance = other.InitAccelerationVariance;
      }
      if (other.MeasuredVelocityVariance != 0D) {
        MeasuredVelocityVariance = other.MeasuredVelocityVariance;
      }
      if (other.PredictVariancePerSqrsec != 0D) {
        PredictVariancePerSqrsec = other.PredictVariancePerSqrsec;
      }
      if (other.BoostupHistorySizeMinimum != 0) {
        BoostupHistorySizeMinimum = other.BoostupHistorySizeMinimum;
      }
      if (other.BoostupHistorySizeMaximum != 0) {
        BoostupHistorySizeMaximum = other.BoostupHistorySizeMaximum;
      }
      if (other.ConvergedConfidenceMinimum != 0D) {
        ConvergedConfidenceMinimum = other.ConvergedConfidenceMinimum;
      }
      if (other.NoiseMaximum != 0D) {
        NoiseMaximum = other.NoiseMaximum;
      }
      if (other.TrustOrientationRange != 0D) {
        TrustOrientationRange = other.TrustOrientationRange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseAdaptive = input.ReadBool();
            break;
          }
          case 16: {
            UseBreakdown = input.ReadBool();
            break;
          }
          case 24: {
            UseConvergenceBoostup = input.ReadBool();
            break;
          }
          case 33: {
            InitVelocityVariance = input.ReadDouble();
            break;
          }
          case 41: {
            InitAccelerationVariance = input.ReadDouble();
            break;
          }
          case 49: {
            MeasuredVelocityVariance = input.ReadDouble();
            break;
          }
          case 57: {
            PredictVariancePerSqrsec = input.ReadDouble();
            break;
          }
          case 64: {
            BoostupHistorySizeMinimum = input.ReadUInt32();
            break;
          }
          case 72: {
            BoostupHistorySizeMaximum = input.ReadUInt32();
            break;
          }
          case 81: {
            ConvergedConfidenceMinimum = input.ReadDouble();
            break;
          }
          case 97: {
            NoiseMaximum = input.ReadDouble();
            break;
          }
          case 105: {
            TrustOrientationRange = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MlfMotionRefinerConfig : pb::IMessage<MlfMotionRefinerConfig> {
    private static readonly pb::MessageParser<MlfMotionRefinerConfig> _parser = new pb::MessageParser<MlfMotionRefinerConfig>(() => new MlfMotionRefinerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfMotionRefinerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfMotionRefinerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfMotionRefinerConfig(MlfMotionRefinerConfig other) : this() {
      clapingAccelerationThreshold_ = other.clapingAccelerationThreshold_;
      clapingSpeedThreshold_ = other.clapingSpeedThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfMotionRefinerConfig Clone() {
      return new MlfMotionRefinerConfig(this);
    }

    /// <summary>Field number for the "claping_acceleration_threshold" field.</summary>
    public const int ClapingAccelerationThresholdFieldNumber = 1;
    private double clapingAccelerationThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClapingAccelerationThreshold {
      get { return clapingAccelerationThreshold_; }
      set {
        clapingAccelerationThreshold_ = value;
      }
    }

    /// <summary>Field number for the "claping_speed_threshold" field.</summary>
    public const int ClapingSpeedThresholdFieldNumber = 2;
    private double clapingSpeedThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClapingSpeedThreshold {
      get { return clapingSpeedThreshold_; }
      set {
        clapingSpeedThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfMotionRefinerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfMotionRefinerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClapingAccelerationThreshold != other.ClapingAccelerationThreshold) return false;
      if (ClapingSpeedThreshold != other.ClapingSpeedThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClapingAccelerationThreshold != 0D) hash ^= ClapingAccelerationThreshold.GetHashCode();
      if (ClapingSpeedThreshold != 0D) hash ^= ClapingSpeedThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClapingAccelerationThreshold != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ClapingAccelerationThreshold);
      }
      if (ClapingSpeedThreshold != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ClapingSpeedThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClapingAccelerationThreshold != 0D) {
        size += 1 + 8;
      }
      if (ClapingSpeedThreshold != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfMotionRefinerConfig other) {
      if (other == null) {
        return;
      }
      if (other.ClapingAccelerationThreshold != 0D) {
        ClapingAccelerationThreshold = other.ClapingAccelerationThreshold;
      }
      if (other.ClapingSpeedThreshold != 0D) {
        ClapingSpeedThreshold = other.ClapingSpeedThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ClapingAccelerationThreshold = input.ReadDouble();
            break;
          }
          case 17: {
            ClapingSpeedThreshold = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MlfShapeFilterConfig : pb::IMessage<MlfShapeFilterConfig> {
    private static readonly pb::MessageParser<MlfShapeFilterConfig> _parser = new pb::MessageParser<MlfShapeFilterConfig>(() => new MlfShapeFilterConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfShapeFilterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfShapeFilterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfShapeFilterConfig(MlfShapeFilterConfig other) : this() {
      bottomPointsIgnoreThreshold_ = other.bottomPointsIgnoreThreshold_;
      topPointsIgnoreThreshold_ = other.topPointsIgnoreThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfShapeFilterConfig Clone() {
      return new MlfShapeFilterConfig(this);
    }

    /// <summary>Field number for the "bottom_points_ignore_threshold" field.</summary>
    public const int BottomPointsIgnoreThresholdFieldNumber = 1;
    private double bottomPointsIgnoreThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BottomPointsIgnoreThreshold {
      get { return bottomPointsIgnoreThreshold_; }
      set {
        bottomPointsIgnoreThreshold_ = value;
      }
    }

    /// <summary>Field number for the "top_points_ignore_threshold" field.</summary>
    public const int TopPointsIgnoreThresholdFieldNumber = 2;
    private double topPointsIgnoreThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TopPointsIgnoreThreshold {
      get { return topPointsIgnoreThreshold_; }
      set {
        topPointsIgnoreThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfShapeFilterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfShapeFilterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BottomPointsIgnoreThreshold != other.BottomPointsIgnoreThreshold) return false;
      if (TopPointsIgnoreThreshold != other.TopPointsIgnoreThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BottomPointsIgnoreThreshold != 0D) hash ^= BottomPointsIgnoreThreshold.GetHashCode();
      if (TopPointsIgnoreThreshold != 0D) hash ^= TopPointsIgnoreThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BottomPointsIgnoreThreshold != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BottomPointsIgnoreThreshold);
      }
      if (TopPointsIgnoreThreshold != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TopPointsIgnoreThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BottomPointsIgnoreThreshold != 0D) {
        size += 1 + 8;
      }
      if (TopPointsIgnoreThreshold != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfShapeFilterConfig other) {
      if (other == null) {
        return;
      }
      if (other.BottomPointsIgnoreThreshold != 0D) {
        BottomPointsIgnoreThreshold = other.BottomPointsIgnoreThreshold;
      }
      if (other.TopPointsIgnoreThreshold != 0D) {
        TopPointsIgnoreThreshold = other.TopPointsIgnoreThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            BottomPointsIgnoreThreshold = input.ReadDouble();
            break;
          }
          case 17: {
            TopPointsIgnoreThreshold = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MlfEngineConfig : pb::IMessage<MlfEngineConfig> {
    private static readonly pb::MessageParser<MlfEngineConfig> _parser = new pb::MessageParser<MlfEngineConfig>(() => new MlfEngineConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MlfEngineConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MultiLidarFusionConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfEngineConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfEngineConfig(MlfEngineConfig other) : this() {
      mainSensor_ = other.mainSensor_.Clone();
      useHistogramForMatch_ = other.useHistogramForMatch_;
      histogramBinSize_ = other.histogramBinSize_;
      outputPredictObjects_ = other.outputPredictObjects_;
      reservedInvisibleTime_ = other.reservedInvisibleTime_;
      useFrameTimestamp_ = other.useFrameTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MlfEngineConfig Clone() {
      return new MlfEngineConfig(this);
    }

    /// <summary>Field number for the "main_sensor" field.</summary>
    public const int MainSensorFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_mainSensor_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> mainSensor_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MainSensor {
      get { return mainSensor_; }
    }

    /// <summary>Field number for the "use_histogram_for_match" field.</summary>
    public const int UseHistogramForMatchFieldNumber = 2;
    private bool useHistogramForMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseHistogramForMatch {
      get { return useHistogramForMatch_; }
      set {
        useHistogramForMatch_ = value;
      }
    }

    /// <summary>Field number for the "histogram_bin_size" field.</summary>
    public const int HistogramBinSizeFieldNumber = 3;
    private uint histogramBinSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HistogramBinSize {
      get { return histogramBinSize_; }
      set {
        histogramBinSize_ = value;
      }
    }

    /// <summary>Field number for the "output_predict_objects" field.</summary>
    public const int OutputPredictObjectsFieldNumber = 4;
    private bool outputPredictObjects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputPredictObjects {
      get { return outputPredictObjects_; }
      set {
        outputPredictObjects_ = value;
      }
    }

    /// <summary>Field number for the "reserved_invisible_time" field.</summary>
    public const int ReservedInvisibleTimeFieldNumber = 5;
    private double reservedInvisibleTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReservedInvisibleTime {
      get { return reservedInvisibleTime_; }
      set {
        reservedInvisibleTime_ = value;
      }
    }

    /// <summary>Field number for the "use_frame_timestamp" field.</summary>
    public const int UseFrameTimestampFieldNumber = 6;
    private bool useFrameTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFrameTimestamp {
      get { return useFrameTimestamp_; }
      set {
        useFrameTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MlfEngineConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MlfEngineConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mainSensor_.Equals(other.mainSensor_)) return false;
      if (UseHistogramForMatch != other.UseHistogramForMatch) return false;
      if (HistogramBinSize != other.HistogramBinSize) return false;
      if (OutputPredictObjects != other.OutputPredictObjects) return false;
      if (ReservedInvisibleTime != other.ReservedInvisibleTime) return false;
      if (UseFrameTimestamp != other.UseFrameTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mainSensor_.GetHashCode();
      if (UseHistogramForMatch != false) hash ^= UseHistogramForMatch.GetHashCode();
      if (HistogramBinSize != 0) hash ^= HistogramBinSize.GetHashCode();
      if (OutputPredictObjects != false) hash ^= OutputPredictObjects.GetHashCode();
      if (ReservedInvisibleTime != 0D) hash ^= ReservedInvisibleTime.GetHashCode();
      if (UseFrameTimestamp != false) hash ^= UseFrameTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mainSensor_.WriteTo(output, _repeated_mainSensor_codec);
      if (UseHistogramForMatch != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseHistogramForMatch);
      }
      if (HistogramBinSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HistogramBinSize);
      }
      if (OutputPredictObjects != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutputPredictObjects);
      }
      if (ReservedInvisibleTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ReservedInvisibleTime);
      }
      if (UseFrameTimestamp != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseFrameTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mainSensor_.CalculateSize(_repeated_mainSensor_codec);
      if (UseHistogramForMatch != false) {
        size += 1 + 1;
      }
      if (HistogramBinSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HistogramBinSize);
      }
      if (OutputPredictObjects != false) {
        size += 1 + 1;
      }
      if (ReservedInvisibleTime != 0D) {
        size += 1 + 8;
      }
      if (UseFrameTimestamp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MlfEngineConfig other) {
      if (other == null) {
        return;
      }
      mainSensor_.Add(other.mainSensor_);
      if (other.UseHistogramForMatch != false) {
        UseHistogramForMatch = other.UseHistogramForMatch;
      }
      if (other.HistogramBinSize != 0) {
        HistogramBinSize = other.HistogramBinSize;
      }
      if (other.OutputPredictObjects != false) {
        OutputPredictObjects = other.OutputPredictObjects;
      }
      if (other.ReservedInvisibleTime != 0D) {
        ReservedInvisibleTime = other.ReservedInvisibleTime;
      }
      if (other.UseFrameTimestamp != false) {
        UseFrameTimestamp = other.UseFrameTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mainSensor_.AddEntriesFrom(input, _repeated_mainSensor_codec);
            break;
          }
          case 16: {
            UseHistogramForMatch = input.ReadBool();
            break;
          }
          case 24: {
            HistogramBinSize = input.ReadUInt32();
            break;
          }
          case 32: {
            OutputPredictObjects = input.ReadBool();
            break;
          }
          case 41: {
            ReservedInvisibleTime = input.ReadDouble();
            break;
          }
          case 48: {
            UseFrameTimestamp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
