// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/ground_detector/spatio_temporal_ground_detector/proto/spatio_temporal_ground_detector_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/lidar/lib/ground_detector/spatio_temporal_ground_detector/proto/spatio_temporal_ground_detector_config.proto</summary>
  public static partial class SpatioTemporalGroundDetectorConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/lidar/lib/ground_detector/spatio_temporal_ground_detector/proto/spatio_temporal_ground_detector_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpatioTemporalGroundDetectorConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cn9tb2R1bGVzL3BlcmNlcHRpb24vbGlkYXIvbGliL2dyb3VuZF9kZXRlY3Rv",
            "ci9zcGF0aW9fdGVtcG9yYWxfZ3JvdW5kX2RldGVjdG9yL3Byb3RvL3NwYXRp",
            "b190ZW1wb3JhbF9ncm91bmRfZGV0ZWN0b3JfY29uZmlnLnByb3RvEhdhcG9s",
            "bG8ucGVyY2VwdGlvbi5saWRhciLLAQoiU3BhdGlvVGVtcG9yYWxHcm91bmRE",
            "ZXRlY3RvckNvbmZpZxIRCglncmlkX3NpemUYASABKA0SFAoMZ3JvdW5kX3Ro",
            "cmVzGAIgASgCEhEKCXJvaV9yYWRfeBgDIAEoAhIRCglyb2lfcmFkX3kYBCAB",
            "KAISEQoJcm9pX3JhZF96GAUgASgCEhYKDm5yX3Ntb290aF9pdGVyGAYgASgN",
            "Eg8KB3VzZV9yb2kYByABKAgSGgoSdXNlX2dyb3VuZF9zZXJ2aWNlGAggASgI",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.SpatioTemporalGroundDetectorConfig), global::Apollo.Perception.Lidar.SpatioTemporalGroundDetectorConfig.Parser, new[]{ "GridSize", "GroundThres", "RoiRadX", "RoiRadY", "RoiRadZ", "NrSmoothIter", "UseRoi", "UseGroundService" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SpatioTemporalGroundDetectorConfig : pb::IMessage<SpatioTemporalGroundDetectorConfig> {
    private static readonly pb::MessageParser<SpatioTemporalGroundDetectorConfig> _parser = new pb::MessageParser<SpatioTemporalGroundDetectorConfig>(() => new SpatioTemporalGroundDetectorConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpatioTemporalGroundDetectorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.SpatioTemporalGroundDetectorConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatioTemporalGroundDetectorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatioTemporalGroundDetectorConfig(SpatioTemporalGroundDetectorConfig other) : this() {
      gridSize_ = other.gridSize_;
      groundThres_ = other.groundThres_;
      roiRadX_ = other.roiRadX_;
      roiRadY_ = other.roiRadY_;
      roiRadZ_ = other.roiRadZ_;
      nrSmoothIter_ = other.nrSmoothIter_;
      useRoi_ = other.useRoi_;
      useGroundService_ = other.useGroundService_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatioTemporalGroundDetectorConfig Clone() {
      return new SpatioTemporalGroundDetectorConfig(this);
    }

    /// <summary>Field number for the "grid_size" field.</summary>
    public const int GridSizeFieldNumber = 1;
    private uint gridSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GridSize {
      get { return gridSize_; }
      set {
        gridSize_ = value;
      }
    }

    /// <summary>Field number for the "ground_thres" field.</summary>
    public const int GroundThresFieldNumber = 2;
    private float groundThres_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GroundThres {
      get { return groundThres_; }
      set {
        groundThres_ = value;
      }
    }

    /// <summary>Field number for the "roi_rad_x" field.</summary>
    public const int RoiRadXFieldNumber = 3;
    private float roiRadX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoiRadX {
      get { return roiRadX_; }
      set {
        roiRadX_ = value;
      }
    }

    /// <summary>Field number for the "roi_rad_y" field.</summary>
    public const int RoiRadYFieldNumber = 4;
    private float roiRadY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoiRadY {
      get { return roiRadY_; }
      set {
        roiRadY_ = value;
      }
    }

    /// <summary>Field number for the "roi_rad_z" field.</summary>
    public const int RoiRadZFieldNumber = 5;
    private float roiRadZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoiRadZ {
      get { return roiRadZ_; }
      set {
        roiRadZ_ = value;
      }
    }

    /// <summary>Field number for the "nr_smooth_iter" field.</summary>
    public const int NrSmoothIterFieldNumber = 6;
    private uint nrSmoothIter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NrSmoothIter {
      get { return nrSmoothIter_; }
      set {
        nrSmoothIter_ = value;
      }
    }

    /// <summary>Field number for the "use_roi" field.</summary>
    public const int UseRoiFieldNumber = 7;
    private bool useRoi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRoi {
      get { return useRoi_; }
      set {
        useRoi_ = value;
      }
    }

    /// <summary>Field number for the "use_ground_service" field.</summary>
    public const int UseGroundServiceFieldNumber = 8;
    private bool useGroundService_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGroundService {
      get { return useGroundService_; }
      set {
        useGroundService_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpatioTemporalGroundDetectorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpatioTemporalGroundDetectorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GridSize != other.GridSize) return false;
      if (GroundThres != other.GroundThres) return false;
      if (RoiRadX != other.RoiRadX) return false;
      if (RoiRadY != other.RoiRadY) return false;
      if (RoiRadZ != other.RoiRadZ) return false;
      if (NrSmoothIter != other.NrSmoothIter) return false;
      if (UseRoi != other.UseRoi) return false;
      if (UseGroundService != other.UseGroundService) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GridSize != 0) hash ^= GridSize.GetHashCode();
      if (GroundThres != 0F) hash ^= GroundThres.GetHashCode();
      if (RoiRadX != 0F) hash ^= RoiRadX.GetHashCode();
      if (RoiRadY != 0F) hash ^= RoiRadY.GetHashCode();
      if (RoiRadZ != 0F) hash ^= RoiRadZ.GetHashCode();
      if (NrSmoothIter != 0) hash ^= NrSmoothIter.GetHashCode();
      if (UseRoi != false) hash ^= UseRoi.GetHashCode();
      if (UseGroundService != false) hash ^= UseGroundService.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GridSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GridSize);
      }
      if (GroundThres != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GroundThres);
      }
      if (RoiRadX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RoiRadX);
      }
      if (RoiRadY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RoiRadY);
      }
      if (RoiRadZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RoiRadZ);
      }
      if (NrSmoothIter != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NrSmoothIter);
      }
      if (UseRoi != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseRoi);
      }
      if (UseGroundService != false) {
        output.WriteRawTag(64);
        output.WriteBool(UseGroundService);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GridSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GridSize);
      }
      if (GroundThres != 0F) {
        size += 1 + 4;
      }
      if (RoiRadX != 0F) {
        size += 1 + 4;
      }
      if (RoiRadY != 0F) {
        size += 1 + 4;
      }
      if (RoiRadZ != 0F) {
        size += 1 + 4;
      }
      if (NrSmoothIter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NrSmoothIter);
      }
      if (UseRoi != false) {
        size += 1 + 1;
      }
      if (UseGroundService != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpatioTemporalGroundDetectorConfig other) {
      if (other == null) {
        return;
      }
      if (other.GridSize != 0) {
        GridSize = other.GridSize;
      }
      if (other.GroundThres != 0F) {
        GroundThres = other.GroundThres;
      }
      if (other.RoiRadX != 0F) {
        RoiRadX = other.RoiRadX;
      }
      if (other.RoiRadY != 0F) {
        RoiRadY = other.RoiRadY;
      }
      if (other.RoiRadZ != 0F) {
        RoiRadZ = other.RoiRadZ;
      }
      if (other.NrSmoothIter != 0) {
        NrSmoothIter = other.NrSmoothIter;
      }
      if (other.UseRoi != false) {
        UseRoi = other.UseRoi;
      }
      if (other.UseGroundService != false) {
        UseGroundService = other.UseGroundService;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GridSize = input.ReadUInt32();
            break;
          }
          case 21: {
            GroundThres = input.ReadFloat();
            break;
          }
          case 29: {
            RoiRadX = input.ReadFloat();
            break;
          }
          case 37: {
            RoiRadY = input.ReadFloat();
            break;
          }
          case 45: {
            RoiRadZ = input.ReadFloat();
            break;
          }
          case 48: {
            NrSmoothIter = input.ReadUInt32();
            break;
          }
          case 56: {
            UseRoi = input.ReadBool();
            break;
          }
          case 64: {
            UseGroundService = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
