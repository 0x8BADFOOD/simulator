// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/hm_tracker_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/proto/hm_tracker_config.proto</summary>
  public static partial class HmTrackerConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/hm_tracker_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HmTrackerConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vaG1fdHJhY2tlcl9jb25maWcu",
            "cHJvdG8SF2Fwb2xsby5wZXJjZXB0aW9uLmxpZGFyItcEChhPYmplY3RUcmFj",
            "a01hdGNoZXJDb25maWcSFgoObWF4X21hdGNoX2Rpc3QYASABKAISHwoXYmdf",
            "d2VpZ2h0X2xvY2F0aW9uX2Rpc3QYAiABKAISIAoYYmdfd2VpZ2h0X2RpcmVj",
            "dGlvbl9kaXN0GAMgASgCEiAKGGJnX3dlaWdodF9iYm94X3NpemVfZGlzdBgE",
            "IAEoAhIgChhiZ193ZWlnaHRfcG9pbnRfbnVtX2Rpc3QYBSABKAISIAoYYmdf",
            "d2VpZ2h0X2hpc3RvZ3JhbV9kaXN0GAYgASgCEiUKHWJnX3dlaWdodF9jZW50",
            "cm9pZF9zaGlmdF9kaXN0GAcgASgCEh8KF2JnX3dlaWdodF9iYm94X2lvdV9k",
            "aXN0GAggASgCEiwKJGJnX2JhY2tncm91bmRfb2JqZWN0X21hdGNoX3RocmVz",
            "aG9sZBgJIAEoAhIfChdmZ193ZWlnaHRfbG9jYXRpb25fZGlzdBgKIAEoAhIg",
            "ChhmZ193ZWlnaHRfZGlyZWN0aW9uX2Rpc3QYCyABKAISIAoYZmdfd2VpZ2h0",
            "X2Jib3hfc2l6ZV9kaXN0GAwgASgCEiAKGGZnX3dlaWdodF9wb2ludF9udW1f",
            "ZGlzdBgNIAEoAhIgChhmZ193ZWlnaHRfaGlzdG9ncmFtX2Rpc3QYDiABKAIS",
            "JQodZmdfd2VpZ2h0X2NlbnRyb2lkX3NoaWZ0X2Rpc3QYDyABKAISHwoXZmdf",
            "d2VpZ2h0X2Jib3hfaW91X2Rpc3QYECABKAISEwoLYm91bmRfdmFsdWUYESAB",
            "KAIivAIKEkthbG1hbkZpbHRlckNvbmZpZxIVCg1ub2lzZV9tYXhpbXVtGAEg",
            "ASgCEhQKDHVzZV9hZGFwdGl2ZRgCIAEoCBIiChpjZW50cm9pZF9tZWFzdXJl",
            "bWVudF9ub2lzZRgDIAEoAhInCh9jZW50cm9pZF9pbml0X3ZlbG9jaXR5X3Zh",
            "cmlhbmNlGAQgASgCEh8KF3Byb3BhZ2F0aW9uX3ZhcmlhbmNlX3h5GAUgASgC",
            "Eh4KFnByb3BhZ2F0aW9uX3ZhcmlhbmNlX3oYBiABKAISHwoXdXNlX2NvbnZl",
            "cmdlbmNlX2Jvb3N0dXAYByABKAgSJAocYm9vc3R1cF9oaXN0b3J5X3NpemVf",
            "bWluaW11bRgIIAEoBRIkChxjb252ZXJnZWRfY29uZmlkZW5jZV9taW5pbXVt",
            "GAkgASgCIkYKDVRyYWNrZXJDb25maWcSEwoLZmlsdGVyX25hbWUYASABKAkS",
            "IAoYc2VwYXJhdGVfZm9yZV9iYWNrZ3JvdW5kGAIgASgIIrYBChpIbU11bHRp",
            "VGFyZ2V0VHJhY2tlckNvbmZpZxIVCg1maWx0ZXJfbWV0aG9kGAEgASgJEiEK",
            "GWZvcmVncm91bmRfbWF0aGNlcl9tZXRob2QYAiABKAkSIQoZYmFja2dyb3Vu",
            "ZF9tYXRjaGVyX21ldGhvZBgDIAEoCRIfChd1c2VfaGlzdG9ncmFtX2Zvcl9t",
            "YXRjaBgEIAEoCBIaChJoaXN0b2dyYW1fYmluX3NpemUYBSABKAJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.ObjectTrackMatcherConfig), global::Apollo.Perception.Lidar.ObjectTrackMatcherConfig.Parser, new[]{ "MaxMatchDist", "BgWeightLocationDist", "BgWeightDirectionDist", "BgWeightBboxSizeDist", "BgWeightPointNumDist", "BgWeightHistogramDist", "BgWeightCentroidShiftDist", "BgWeightBboxIouDist", "BgBackgroundObjectMatchThreshold", "FgWeightLocationDist", "FgWeightDirectionDist", "FgWeightBboxSizeDist", "FgWeightPointNumDist", "FgWeightHistogramDist", "FgWeightCentroidShiftDist", "FgWeightBboxIouDist", "BoundValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.KalmanFilterConfig), global::Apollo.Perception.Lidar.KalmanFilterConfig.Parser, new[]{ "NoiseMaximum", "UseAdaptive", "CentroidMeasurementNoise", "CentroidInitVelocityVariance", "PropagationVarianceXy", "PropagationVarianceZ", "UseConvergenceBoostup", "BoostupHistorySizeMinimum", "ConvergedConfidenceMinimum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.TrackerConfig), global::Apollo.Perception.Lidar.TrackerConfig.Parser, new[]{ "FilterName", "SeparateForeBackground" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.HmMultiTargetTrackerConfig), global::Apollo.Perception.Lidar.HmMultiTargetTrackerConfig.Parser, new[]{ "FilterMethod", "ForegroundMathcerMethod", "BackgroundMatcherMethod", "UseHistogramForMatch", "HistogramBinSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ObjectTrackMatcherConfig : pb::IMessage<ObjectTrackMatcherConfig> {
    private static readonly pb::MessageParser<ObjectTrackMatcherConfig> _parser = new pb::MessageParser<ObjectTrackMatcherConfig>(() => new ObjectTrackMatcherConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectTrackMatcherConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.HmTrackerConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTrackMatcherConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTrackMatcherConfig(ObjectTrackMatcherConfig other) : this() {
      maxMatchDist_ = other.maxMatchDist_;
      bgWeightLocationDist_ = other.bgWeightLocationDist_;
      bgWeightDirectionDist_ = other.bgWeightDirectionDist_;
      bgWeightBboxSizeDist_ = other.bgWeightBboxSizeDist_;
      bgWeightPointNumDist_ = other.bgWeightPointNumDist_;
      bgWeightHistogramDist_ = other.bgWeightHistogramDist_;
      bgWeightCentroidShiftDist_ = other.bgWeightCentroidShiftDist_;
      bgWeightBboxIouDist_ = other.bgWeightBboxIouDist_;
      bgBackgroundObjectMatchThreshold_ = other.bgBackgroundObjectMatchThreshold_;
      fgWeightLocationDist_ = other.fgWeightLocationDist_;
      fgWeightDirectionDist_ = other.fgWeightDirectionDist_;
      fgWeightBboxSizeDist_ = other.fgWeightBboxSizeDist_;
      fgWeightPointNumDist_ = other.fgWeightPointNumDist_;
      fgWeightHistogramDist_ = other.fgWeightHistogramDist_;
      fgWeightCentroidShiftDist_ = other.fgWeightCentroidShiftDist_;
      fgWeightBboxIouDist_ = other.fgWeightBboxIouDist_;
      boundValue_ = other.boundValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectTrackMatcherConfig Clone() {
      return new ObjectTrackMatcherConfig(this);
    }

    /// <summary>Field number for the "max_match_dist" field.</summary>
    public const int MaxMatchDistFieldNumber = 1;
    private float maxMatchDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxMatchDist {
      get { return maxMatchDist_; }
      set {
        maxMatchDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_weight_location_dist" field.</summary>
    public const int BgWeightLocationDistFieldNumber = 2;
    private float bgWeightLocationDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgWeightLocationDist {
      get { return bgWeightLocationDist_; }
      set {
        bgWeightLocationDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_weight_direction_dist" field.</summary>
    public const int BgWeightDirectionDistFieldNumber = 3;
    private float bgWeightDirectionDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgWeightDirectionDist {
      get { return bgWeightDirectionDist_; }
      set {
        bgWeightDirectionDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_weight_bbox_size_dist" field.</summary>
    public const int BgWeightBboxSizeDistFieldNumber = 4;
    private float bgWeightBboxSizeDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgWeightBboxSizeDist {
      get { return bgWeightBboxSizeDist_; }
      set {
        bgWeightBboxSizeDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_weight_point_num_dist" field.</summary>
    public const int BgWeightPointNumDistFieldNumber = 5;
    private float bgWeightPointNumDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgWeightPointNumDist {
      get { return bgWeightPointNumDist_; }
      set {
        bgWeightPointNumDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_weight_histogram_dist" field.</summary>
    public const int BgWeightHistogramDistFieldNumber = 6;
    private float bgWeightHistogramDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgWeightHistogramDist {
      get { return bgWeightHistogramDist_; }
      set {
        bgWeightHistogramDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_weight_centroid_shift_dist" field.</summary>
    public const int BgWeightCentroidShiftDistFieldNumber = 7;
    private float bgWeightCentroidShiftDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgWeightCentroidShiftDist {
      get { return bgWeightCentroidShiftDist_; }
      set {
        bgWeightCentroidShiftDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_weight_bbox_iou_dist" field.</summary>
    public const int BgWeightBboxIouDistFieldNumber = 8;
    private float bgWeightBboxIouDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgWeightBboxIouDist {
      get { return bgWeightBboxIouDist_; }
      set {
        bgWeightBboxIouDist_ = value;
      }
    }

    /// <summary>Field number for the "bg_background_object_match_threshold" field.</summary>
    public const int BgBackgroundObjectMatchThresholdFieldNumber = 9;
    private float bgBackgroundObjectMatchThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgBackgroundObjectMatchThreshold {
      get { return bgBackgroundObjectMatchThreshold_; }
      set {
        bgBackgroundObjectMatchThreshold_ = value;
      }
    }

    /// <summary>Field number for the "fg_weight_location_dist" field.</summary>
    public const int FgWeightLocationDistFieldNumber = 10;
    private float fgWeightLocationDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgWeightLocationDist {
      get { return fgWeightLocationDist_; }
      set {
        fgWeightLocationDist_ = value;
      }
    }

    /// <summary>Field number for the "fg_weight_direction_dist" field.</summary>
    public const int FgWeightDirectionDistFieldNumber = 11;
    private float fgWeightDirectionDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgWeightDirectionDist {
      get { return fgWeightDirectionDist_; }
      set {
        fgWeightDirectionDist_ = value;
      }
    }

    /// <summary>Field number for the "fg_weight_bbox_size_dist" field.</summary>
    public const int FgWeightBboxSizeDistFieldNumber = 12;
    private float fgWeightBboxSizeDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgWeightBboxSizeDist {
      get { return fgWeightBboxSizeDist_; }
      set {
        fgWeightBboxSizeDist_ = value;
      }
    }

    /// <summary>Field number for the "fg_weight_point_num_dist" field.</summary>
    public const int FgWeightPointNumDistFieldNumber = 13;
    private float fgWeightPointNumDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgWeightPointNumDist {
      get { return fgWeightPointNumDist_; }
      set {
        fgWeightPointNumDist_ = value;
      }
    }

    /// <summary>Field number for the "fg_weight_histogram_dist" field.</summary>
    public const int FgWeightHistogramDistFieldNumber = 14;
    private float fgWeightHistogramDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgWeightHistogramDist {
      get { return fgWeightHistogramDist_; }
      set {
        fgWeightHistogramDist_ = value;
      }
    }

    /// <summary>Field number for the "fg_weight_centroid_shift_dist" field.</summary>
    public const int FgWeightCentroidShiftDistFieldNumber = 15;
    private float fgWeightCentroidShiftDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgWeightCentroidShiftDist {
      get { return fgWeightCentroidShiftDist_; }
      set {
        fgWeightCentroidShiftDist_ = value;
      }
    }

    /// <summary>Field number for the "fg_weight_bbox_iou_dist" field.</summary>
    public const int FgWeightBboxIouDistFieldNumber = 16;
    private float fgWeightBboxIouDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgWeightBboxIouDist {
      get { return fgWeightBboxIouDist_; }
      set {
        fgWeightBboxIouDist_ = value;
      }
    }

    /// <summary>Field number for the "bound_value" field.</summary>
    public const int BoundValueFieldNumber = 17;
    private float boundValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoundValue {
      get { return boundValue_; }
      set {
        boundValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectTrackMatcherConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectTrackMatcherConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxMatchDist != other.MaxMatchDist) return false;
      if (BgWeightLocationDist != other.BgWeightLocationDist) return false;
      if (BgWeightDirectionDist != other.BgWeightDirectionDist) return false;
      if (BgWeightBboxSizeDist != other.BgWeightBboxSizeDist) return false;
      if (BgWeightPointNumDist != other.BgWeightPointNumDist) return false;
      if (BgWeightHistogramDist != other.BgWeightHistogramDist) return false;
      if (BgWeightCentroidShiftDist != other.BgWeightCentroidShiftDist) return false;
      if (BgWeightBboxIouDist != other.BgWeightBboxIouDist) return false;
      if (BgBackgroundObjectMatchThreshold != other.BgBackgroundObjectMatchThreshold) return false;
      if (FgWeightLocationDist != other.FgWeightLocationDist) return false;
      if (FgWeightDirectionDist != other.FgWeightDirectionDist) return false;
      if (FgWeightBboxSizeDist != other.FgWeightBboxSizeDist) return false;
      if (FgWeightPointNumDist != other.FgWeightPointNumDist) return false;
      if (FgWeightHistogramDist != other.FgWeightHistogramDist) return false;
      if (FgWeightCentroidShiftDist != other.FgWeightCentroidShiftDist) return false;
      if (FgWeightBboxIouDist != other.FgWeightBboxIouDist) return false;
      if (BoundValue != other.BoundValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxMatchDist != 0F) hash ^= MaxMatchDist.GetHashCode();
      if (BgWeightLocationDist != 0F) hash ^= BgWeightLocationDist.GetHashCode();
      if (BgWeightDirectionDist != 0F) hash ^= BgWeightDirectionDist.GetHashCode();
      if (BgWeightBboxSizeDist != 0F) hash ^= BgWeightBboxSizeDist.GetHashCode();
      if (BgWeightPointNumDist != 0F) hash ^= BgWeightPointNumDist.GetHashCode();
      if (BgWeightHistogramDist != 0F) hash ^= BgWeightHistogramDist.GetHashCode();
      if (BgWeightCentroidShiftDist != 0F) hash ^= BgWeightCentroidShiftDist.GetHashCode();
      if (BgWeightBboxIouDist != 0F) hash ^= BgWeightBboxIouDist.GetHashCode();
      if (BgBackgroundObjectMatchThreshold != 0F) hash ^= BgBackgroundObjectMatchThreshold.GetHashCode();
      if (FgWeightLocationDist != 0F) hash ^= FgWeightLocationDist.GetHashCode();
      if (FgWeightDirectionDist != 0F) hash ^= FgWeightDirectionDist.GetHashCode();
      if (FgWeightBboxSizeDist != 0F) hash ^= FgWeightBboxSizeDist.GetHashCode();
      if (FgWeightPointNumDist != 0F) hash ^= FgWeightPointNumDist.GetHashCode();
      if (FgWeightHistogramDist != 0F) hash ^= FgWeightHistogramDist.GetHashCode();
      if (FgWeightCentroidShiftDist != 0F) hash ^= FgWeightCentroidShiftDist.GetHashCode();
      if (FgWeightBboxIouDist != 0F) hash ^= FgWeightBboxIouDist.GetHashCode();
      if (BoundValue != 0F) hash ^= BoundValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxMatchDist != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MaxMatchDist);
      }
      if (BgWeightLocationDist != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BgWeightLocationDist);
      }
      if (BgWeightDirectionDist != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BgWeightDirectionDist);
      }
      if (BgWeightBboxSizeDist != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BgWeightBboxSizeDist);
      }
      if (BgWeightPointNumDist != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BgWeightPointNumDist);
      }
      if (BgWeightHistogramDist != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BgWeightHistogramDist);
      }
      if (BgWeightCentroidShiftDist != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(BgWeightCentroidShiftDist);
      }
      if (BgWeightBboxIouDist != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BgWeightBboxIouDist);
      }
      if (BgBackgroundObjectMatchThreshold != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BgBackgroundObjectMatchThreshold);
      }
      if (FgWeightLocationDist != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(FgWeightLocationDist);
      }
      if (FgWeightDirectionDist != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(FgWeightDirectionDist);
      }
      if (FgWeightBboxSizeDist != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(FgWeightBboxSizeDist);
      }
      if (FgWeightPointNumDist != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(FgWeightPointNumDist);
      }
      if (FgWeightHistogramDist != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FgWeightHistogramDist);
      }
      if (FgWeightCentroidShiftDist != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(FgWeightCentroidShiftDist);
      }
      if (FgWeightBboxIouDist != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(FgWeightBboxIouDist);
      }
      if (BoundValue != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(BoundValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxMatchDist != 0F) {
        size += 1 + 4;
      }
      if (BgWeightLocationDist != 0F) {
        size += 1 + 4;
      }
      if (BgWeightDirectionDist != 0F) {
        size += 1 + 4;
      }
      if (BgWeightBboxSizeDist != 0F) {
        size += 1 + 4;
      }
      if (BgWeightPointNumDist != 0F) {
        size += 1 + 4;
      }
      if (BgWeightHistogramDist != 0F) {
        size += 1 + 4;
      }
      if (BgWeightCentroidShiftDist != 0F) {
        size += 1 + 4;
      }
      if (BgWeightBboxIouDist != 0F) {
        size += 1 + 4;
      }
      if (BgBackgroundObjectMatchThreshold != 0F) {
        size += 1 + 4;
      }
      if (FgWeightLocationDist != 0F) {
        size += 1 + 4;
      }
      if (FgWeightDirectionDist != 0F) {
        size += 1 + 4;
      }
      if (FgWeightBboxSizeDist != 0F) {
        size += 1 + 4;
      }
      if (FgWeightPointNumDist != 0F) {
        size += 1 + 4;
      }
      if (FgWeightHistogramDist != 0F) {
        size += 1 + 4;
      }
      if (FgWeightCentroidShiftDist != 0F) {
        size += 1 + 4;
      }
      if (FgWeightBboxIouDist != 0F) {
        size += 2 + 4;
      }
      if (BoundValue != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectTrackMatcherConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxMatchDist != 0F) {
        MaxMatchDist = other.MaxMatchDist;
      }
      if (other.BgWeightLocationDist != 0F) {
        BgWeightLocationDist = other.BgWeightLocationDist;
      }
      if (other.BgWeightDirectionDist != 0F) {
        BgWeightDirectionDist = other.BgWeightDirectionDist;
      }
      if (other.BgWeightBboxSizeDist != 0F) {
        BgWeightBboxSizeDist = other.BgWeightBboxSizeDist;
      }
      if (other.BgWeightPointNumDist != 0F) {
        BgWeightPointNumDist = other.BgWeightPointNumDist;
      }
      if (other.BgWeightHistogramDist != 0F) {
        BgWeightHistogramDist = other.BgWeightHistogramDist;
      }
      if (other.BgWeightCentroidShiftDist != 0F) {
        BgWeightCentroidShiftDist = other.BgWeightCentroidShiftDist;
      }
      if (other.BgWeightBboxIouDist != 0F) {
        BgWeightBboxIouDist = other.BgWeightBboxIouDist;
      }
      if (other.BgBackgroundObjectMatchThreshold != 0F) {
        BgBackgroundObjectMatchThreshold = other.BgBackgroundObjectMatchThreshold;
      }
      if (other.FgWeightLocationDist != 0F) {
        FgWeightLocationDist = other.FgWeightLocationDist;
      }
      if (other.FgWeightDirectionDist != 0F) {
        FgWeightDirectionDist = other.FgWeightDirectionDist;
      }
      if (other.FgWeightBboxSizeDist != 0F) {
        FgWeightBboxSizeDist = other.FgWeightBboxSizeDist;
      }
      if (other.FgWeightPointNumDist != 0F) {
        FgWeightPointNumDist = other.FgWeightPointNumDist;
      }
      if (other.FgWeightHistogramDist != 0F) {
        FgWeightHistogramDist = other.FgWeightHistogramDist;
      }
      if (other.FgWeightCentroidShiftDist != 0F) {
        FgWeightCentroidShiftDist = other.FgWeightCentroidShiftDist;
      }
      if (other.FgWeightBboxIouDist != 0F) {
        FgWeightBboxIouDist = other.FgWeightBboxIouDist;
      }
      if (other.BoundValue != 0F) {
        BoundValue = other.BoundValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MaxMatchDist = input.ReadFloat();
            break;
          }
          case 21: {
            BgWeightLocationDist = input.ReadFloat();
            break;
          }
          case 29: {
            BgWeightDirectionDist = input.ReadFloat();
            break;
          }
          case 37: {
            BgWeightBboxSizeDist = input.ReadFloat();
            break;
          }
          case 45: {
            BgWeightPointNumDist = input.ReadFloat();
            break;
          }
          case 53: {
            BgWeightHistogramDist = input.ReadFloat();
            break;
          }
          case 61: {
            BgWeightCentroidShiftDist = input.ReadFloat();
            break;
          }
          case 69: {
            BgWeightBboxIouDist = input.ReadFloat();
            break;
          }
          case 77: {
            BgBackgroundObjectMatchThreshold = input.ReadFloat();
            break;
          }
          case 85: {
            FgWeightLocationDist = input.ReadFloat();
            break;
          }
          case 93: {
            FgWeightDirectionDist = input.ReadFloat();
            break;
          }
          case 101: {
            FgWeightBboxSizeDist = input.ReadFloat();
            break;
          }
          case 109: {
            FgWeightPointNumDist = input.ReadFloat();
            break;
          }
          case 117: {
            FgWeightHistogramDist = input.ReadFloat();
            break;
          }
          case 125: {
            FgWeightCentroidShiftDist = input.ReadFloat();
            break;
          }
          case 133: {
            FgWeightBboxIouDist = input.ReadFloat();
            break;
          }
          case 141: {
            BoundValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KalmanFilterConfig : pb::IMessage<KalmanFilterConfig> {
    private static readonly pb::MessageParser<KalmanFilterConfig> _parser = new pb::MessageParser<KalmanFilterConfig>(() => new KalmanFilterConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KalmanFilterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.HmTrackerConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KalmanFilterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KalmanFilterConfig(KalmanFilterConfig other) : this() {
      noiseMaximum_ = other.noiseMaximum_;
      useAdaptive_ = other.useAdaptive_;
      centroidMeasurementNoise_ = other.centroidMeasurementNoise_;
      centroidInitVelocityVariance_ = other.centroidInitVelocityVariance_;
      propagationVarianceXy_ = other.propagationVarianceXy_;
      propagationVarianceZ_ = other.propagationVarianceZ_;
      useConvergenceBoostup_ = other.useConvergenceBoostup_;
      boostupHistorySizeMinimum_ = other.boostupHistorySizeMinimum_;
      convergedConfidenceMinimum_ = other.convergedConfidenceMinimum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KalmanFilterConfig Clone() {
      return new KalmanFilterConfig(this);
    }

    /// <summary>Field number for the "noise_maximum" field.</summary>
    public const int NoiseMaximumFieldNumber = 1;
    private float noiseMaximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoiseMaximum {
      get { return noiseMaximum_; }
      set {
        noiseMaximum_ = value;
      }
    }

    /// <summary>Field number for the "use_adaptive" field.</summary>
    public const int UseAdaptiveFieldNumber = 2;
    private bool useAdaptive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseAdaptive {
      get { return useAdaptive_; }
      set {
        useAdaptive_ = value;
      }
    }

    /// <summary>Field number for the "centroid_measurement_noise" field.</summary>
    public const int CentroidMeasurementNoiseFieldNumber = 3;
    private float centroidMeasurementNoise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CentroidMeasurementNoise {
      get { return centroidMeasurementNoise_; }
      set {
        centroidMeasurementNoise_ = value;
      }
    }

    /// <summary>Field number for the "centroid_init_velocity_variance" field.</summary>
    public const int CentroidInitVelocityVarianceFieldNumber = 4;
    private float centroidInitVelocityVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CentroidInitVelocityVariance {
      get { return centroidInitVelocityVariance_; }
      set {
        centroidInitVelocityVariance_ = value;
      }
    }

    /// <summary>Field number for the "propagation_variance_xy" field.</summary>
    public const int PropagationVarianceXyFieldNumber = 5;
    private float propagationVarianceXy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PropagationVarianceXy {
      get { return propagationVarianceXy_; }
      set {
        propagationVarianceXy_ = value;
      }
    }

    /// <summary>Field number for the "propagation_variance_z" field.</summary>
    public const int PropagationVarianceZFieldNumber = 6;
    private float propagationVarianceZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PropagationVarianceZ {
      get { return propagationVarianceZ_; }
      set {
        propagationVarianceZ_ = value;
      }
    }

    /// <summary>Field number for the "use_convergence_boostup" field.</summary>
    public const int UseConvergenceBoostupFieldNumber = 7;
    private bool useConvergenceBoostup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseConvergenceBoostup {
      get { return useConvergenceBoostup_; }
      set {
        useConvergenceBoostup_ = value;
      }
    }

    /// <summary>Field number for the "boostup_history_size_minimum" field.</summary>
    public const int BoostupHistorySizeMinimumFieldNumber = 8;
    private int boostupHistorySizeMinimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoostupHistorySizeMinimum {
      get { return boostupHistorySizeMinimum_; }
      set {
        boostupHistorySizeMinimum_ = value;
      }
    }

    /// <summary>Field number for the "converged_confidence_minimum" field.</summary>
    public const int ConvergedConfidenceMinimumFieldNumber = 9;
    private float convergedConfidenceMinimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConvergedConfidenceMinimum {
      get { return convergedConfidenceMinimum_; }
      set {
        convergedConfidenceMinimum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KalmanFilterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KalmanFilterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoiseMaximum != other.NoiseMaximum) return false;
      if (UseAdaptive != other.UseAdaptive) return false;
      if (CentroidMeasurementNoise != other.CentroidMeasurementNoise) return false;
      if (CentroidInitVelocityVariance != other.CentroidInitVelocityVariance) return false;
      if (PropagationVarianceXy != other.PropagationVarianceXy) return false;
      if (PropagationVarianceZ != other.PropagationVarianceZ) return false;
      if (UseConvergenceBoostup != other.UseConvergenceBoostup) return false;
      if (BoostupHistorySizeMinimum != other.BoostupHistorySizeMinimum) return false;
      if (ConvergedConfidenceMinimum != other.ConvergedConfidenceMinimum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoiseMaximum != 0F) hash ^= NoiseMaximum.GetHashCode();
      if (UseAdaptive != false) hash ^= UseAdaptive.GetHashCode();
      if (CentroidMeasurementNoise != 0F) hash ^= CentroidMeasurementNoise.GetHashCode();
      if (CentroidInitVelocityVariance != 0F) hash ^= CentroidInitVelocityVariance.GetHashCode();
      if (PropagationVarianceXy != 0F) hash ^= PropagationVarianceXy.GetHashCode();
      if (PropagationVarianceZ != 0F) hash ^= PropagationVarianceZ.GetHashCode();
      if (UseConvergenceBoostup != false) hash ^= UseConvergenceBoostup.GetHashCode();
      if (BoostupHistorySizeMinimum != 0) hash ^= BoostupHistorySizeMinimum.GetHashCode();
      if (ConvergedConfidenceMinimum != 0F) hash ^= ConvergedConfidenceMinimum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoiseMaximum != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(NoiseMaximum);
      }
      if (UseAdaptive != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseAdaptive);
      }
      if (CentroidMeasurementNoise != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CentroidMeasurementNoise);
      }
      if (CentroidInitVelocityVariance != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CentroidInitVelocityVariance);
      }
      if (PropagationVarianceXy != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PropagationVarianceXy);
      }
      if (PropagationVarianceZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PropagationVarianceZ);
      }
      if (UseConvergenceBoostup != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseConvergenceBoostup);
      }
      if (BoostupHistorySizeMinimum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoostupHistorySizeMinimum);
      }
      if (ConvergedConfidenceMinimum != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ConvergedConfidenceMinimum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoiseMaximum != 0F) {
        size += 1 + 4;
      }
      if (UseAdaptive != false) {
        size += 1 + 1;
      }
      if (CentroidMeasurementNoise != 0F) {
        size += 1 + 4;
      }
      if (CentroidInitVelocityVariance != 0F) {
        size += 1 + 4;
      }
      if (PropagationVarianceXy != 0F) {
        size += 1 + 4;
      }
      if (PropagationVarianceZ != 0F) {
        size += 1 + 4;
      }
      if (UseConvergenceBoostup != false) {
        size += 1 + 1;
      }
      if (BoostupHistorySizeMinimum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoostupHistorySizeMinimum);
      }
      if (ConvergedConfidenceMinimum != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KalmanFilterConfig other) {
      if (other == null) {
        return;
      }
      if (other.NoiseMaximum != 0F) {
        NoiseMaximum = other.NoiseMaximum;
      }
      if (other.UseAdaptive != false) {
        UseAdaptive = other.UseAdaptive;
      }
      if (other.CentroidMeasurementNoise != 0F) {
        CentroidMeasurementNoise = other.CentroidMeasurementNoise;
      }
      if (other.CentroidInitVelocityVariance != 0F) {
        CentroidInitVelocityVariance = other.CentroidInitVelocityVariance;
      }
      if (other.PropagationVarianceXy != 0F) {
        PropagationVarianceXy = other.PropagationVarianceXy;
      }
      if (other.PropagationVarianceZ != 0F) {
        PropagationVarianceZ = other.PropagationVarianceZ;
      }
      if (other.UseConvergenceBoostup != false) {
        UseConvergenceBoostup = other.UseConvergenceBoostup;
      }
      if (other.BoostupHistorySizeMinimum != 0) {
        BoostupHistorySizeMinimum = other.BoostupHistorySizeMinimum;
      }
      if (other.ConvergedConfidenceMinimum != 0F) {
        ConvergedConfidenceMinimum = other.ConvergedConfidenceMinimum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            NoiseMaximum = input.ReadFloat();
            break;
          }
          case 16: {
            UseAdaptive = input.ReadBool();
            break;
          }
          case 29: {
            CentroidMeasurementNoise = input.ReadFloat();
            break;
          }
          case 37: {
            CentroidInitVelocityVariance = input.ReadFloat();
            break;
          }
          case 45: {
            PropagationVarianceXy = input.ReadFloat();
            break;
          }
          case 53: {
            PropagationVarianceZ = input.ReadFloat();
            break;
          }
          case 56: {
            UseConvergenceBoostup = input.ReadBool();
            break;
          }
          case 64: {
            BoostupHistorySizeMinimum = input.ReadInt32();
            break;
          }
          case 77: {
            ConvergedConfidenceMinimum = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackerConfig : pb::IMessage<TrackerConfig> {
    private static readonly pb::MessageParser<TrackerConfig> _parser = new pb::MessageParser<TrackerConfig>(() => new TrackerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.HmTrackerConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackerConfig(TrackerConfig other) : this() {
      filterName_ = other.filterName_;
      separateForeBackground_ = other.separateForeBackground_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackerConfig Clone() {
      return new TrackerConfig(this);
    }

    /// <summary>Field number for the "filter_name" field.</summary>
    public const int FilterNameFieldNumber = 1;
    private string filterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilterName {
      get { return filterName_; }
      set {
        filterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "separate_fore_background" field.</summary>
    public const int SeparateForeBackgroundFieldNumber = 2;
    private bool separateForeBackground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SeparateForeBackground {
      get { return separateForeBackground_; }
      set {
        separateForeBackground_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilterName != other.FilterName) return false;
      if (SeparateForeBackground != other.SeparateForeBackground) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilterName.Length != 0) hash ^= FilterName.GetHashCode();
      if (SeparateForeBackground != false) hash ^= SeparateForeBackground.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilterName);
      }
      if (SeparateForeBackground != false) {
        output.WriteRawTag(16);
        output.WriteBool(SeparateForeBackground);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilterName);
      }
      if (SeparateForeBackground != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackerConfig other) {
      if (other == null) {
        return;
      }
      if (other.FilterName.Length != 0) {
        FilterName = other.FilterName;
      }
      if (other.SeparateForeBackground != false) {
        SeparateForeBackground = other.SeparateForeBackground;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FilterName = input.ReadString();
            break;
          }
          case 16: {
            SeparateForeBackground = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HmMultiTargetTrackerConfig : pb::IMessage<HmMultiTargetTrackerConfig> {
    private static readonly pb::MessageParser<HmMultiTargetTrackerConfig> _parser = new pb::MessageParser<HmMultiTargetTrackerConfig>(() => new HmMultiTargetTrackerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HmMultiTargetTrackerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.HmTrackerConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HmMultiTargetTrackerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HmMultiTargetTrackerConfig(HmMultiTargetTrackerConfig other) : this() {
      filterMethod_ = other.filterMethod_;
      foregroundMathcerMethod_ = other.foregroundMathcerMethod_;
      backgroundMatcherMethod_ = other.backgroundMatcherMethod_;
      useHistogramForMatch_ = other.useHistogramForMatch_;
      histogramBinSize_ = other.histogramBinSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HmMultiTargetTrackerConfig Clone() {
      return new HmMultiTargetTrackerConfig(this);
    }

    /// <summary>Field number for the "filter_method" field.</summary>
    public const int FilterMethodFieldNumber = 1;
    private string filterMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilterMethod {
      get { return filterMethod_; }
      set {
        filterMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "foreground_mathcer_method" field.</summary>
    public const int ForegroundMathcerMethodFieldNumber = 2;
    private string foregroundMathcerMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForegroundMathcerMethod {
      get { return foregroundMathcerMethod_; }
      set {
        foregroundMathcerMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "background_matcher_method" field.</summary>
    public const int BackgroundMatcherMethodFieldNumber = 3;
    private string backgroundMatcherMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackgroundMatcherMethod {
      get { return backgroundMatcherMethod_; }
      set {
        backgroundMatcherMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_histogram_for_match" field.</summary>
    public const int UseHistogramForMatchFieldNumber = 4;
    private bool useHistogramForMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseHistogramForMatch {
      get { return useHistogramForMatch_; }
      set {
        useHistogramForMatch_ = value;
      }
    }

    /// <summary>Field number for the "histogram_bin_size" field.</summary>
    public const int HistogramBinSizeFieldNumber = 5;
    private float histogramBinSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HistogramBinSize {
      get { return histogramBinSize_; }
      set {
        histogramBinSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HmMultiTargetTrackerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HmMultiTargetTrackerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilterMethod != other.FilterMethod) return false;
      if (ForegroundMathcerMethod != other.ForegroundMathcerMethod) return false;
      if (BackgroundMatcherMethod != other.BackgroundMatcherMethod) return false;
      if (UseHistogramForMatch != other.UseHistogramForMatch) return false;
      if (HistogramBinSize != other.HistogramBinSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilterMethod.Length != 0) hash ^= FilterMethod.GetHashCode();
      if (ForegroundMathcerMethod.Length != 0) hash ^= ForegroundMathcerMethod.GetHashCode();
      if (BackgroundMatcherMethod.Length != 0) hash ^= BackgroundMatcherMethod.GetHashCode();
      if (UseHistogramForMatch != false) hash ^= UseHistogramForMatch.GetHashCode();
      if (HistogramBinSize != 0F) hash ^= HistogramBinSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilterMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilterMethod);
      }
      if (ForegroundMathcerMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ForegroundMathcerMethod);
      }
      if (BackgroundMatcherMethod.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BackgroundMatcherMethod);
      }
      if (UseHistogramForMatch != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseHistogramForMatch);
      }
      if (HistogramBinSize != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HistogramBinSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilterMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilterMethod);
      }
      if (ForegroundMathcerMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForegroundMathcerMethod);
      }
      if (BackgroundMatcherMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundMatcherMethod);
      }
      if (UseHistogramForMatch != false) {
        size += 1 + 1;
      }
      if (HistogramBinSize != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HmMultiTargetTrackerConfig other) {
      if (other == null) {
        return;
      }
      if (other.FilterMethod.Length != 0) {
        FilterMethod = other.FilterMethod;
      }
      if (other.ForegroundMathcerMethod.Length != 0) {
        ForegroundMathcerMethod = other.ForegroundMathcerMethod;
      }
      if (other.BackgroundMatcherMethod.Length != 0) {
        BackgroundMatcherMethod = other.BackgroundMatcherMethod;
      }
      if (other.UseHistogramForMatch != false) {
        UseHistogramForMatch = other.UseHistogramForMatch;
      }
      if (other.HistogramBinSize != 0F) {
        HistogramBinSize = other.HistogramBinSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FilterMethod = input.ReadString();
            break;
          }
          case 18: {
            ForegroundMathcerMethod = input.ReadString();
            break;
          }
          case 26: {
            BackgroundMatcherMethod = input.ReadString();
            break;
          }
          case 32: {
            UseHistogramForMatch = input.ReadBool();
            break;
          }
          case 45: {
            HistogramBinSize = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
