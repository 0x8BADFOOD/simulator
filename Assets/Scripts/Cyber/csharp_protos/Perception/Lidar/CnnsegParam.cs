// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/segmentation/cnnseg/proto/cnnseg_param.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/lidar/lib/segmentation/cnnseg/proto/cnnseg_param.proto</summary>
  public static partial class CnnsegParamReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/lidar/lib/segmentation/cnnseg/proto/cnnseg_param.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CnnsegParamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ckltb2R1bGVzL3BlcmNlcHRpb24vbGlkYXIvbGliL3NlZ21lbnRhdGlvbi9j",
            "bm5zZWcvcHJvdG8vY25uc2VnX3BhcmFtLnByb3RvEhdhcG9sbG8ucGVyY2Vw",
            "dGlvbi5saWRhciKjAwoLQ05OU2VnUGFyYW0SEgoKbW9kZWxfdHlwZRgBIAEo",
            "CRI8Cg1uZXR3b3JrX3BhcmFtGAIgASgLMiUuYXBvbGxvLnBlcmNlcHRpb24u",
            "bGlkYXIuTmV0d29ya1BhcmFtEjwKDWZlYXR1cmVfcGFyYW0YAyABKAsyJS5h",
            "cG9sbG8ucGVyY2VwdGlvbi5saWRhci5GZWF0dXJlUGFyYW0SGQoRZG9fY2xh",
            "c3NpZmljYXRpb24YBCABKAgSEgoKZG9faGVhZGluZxgFIAEoCBIOCgZncHVf",
            "aWQYBiABKA0SFwoPZ3JvdW5kX2RldGVjdG9yGAcgASgJEhIKCnJvaV9maWx0",
            "ZXIYCCABKAkSHAoUcmVtb3ZlX2dyb3VuZF9wb2ludHMYCSABKAgSGQoRb2Jq",
            "ZWN0bmVzc190aHJlc2gYCiABKAISGQoRY29uZmlkZW5jZV90aHJlc2gYCyAB",
            "KAISFQoNaGVpZ2h0X3RocmVzaBgMIAEoAhITCgttaW5fcHRzX251bRgNIAEo",
            "DRIYChBjb25maWRlbmNlX3JhbmdlGA4gASgCIrwBCgxOZXR3b3JrUGFyYW0S",
            "GAoQaW5zdGFuY2VfcHRfYmxvYhgBIAEoCRIYChBjYXRlZ29yeV9wdF9ibG9i",
            "GAIgASgJEhoKEmNvbmZpZGVuY2VfcHRfYmxvYhgDIAEoCRIWCg5oZWlnaHRf",
            "cHRfYmxvYhgEIAEoCRIVCg1jbGFzc19wdF9ibG9iGAUgASgJEhcKD2hlYWRp",
            "bmdfcHRfYmxvYhgGIAEoCRIUCgxmZWF0dXJlX2Jsb2IYByABKAkirQEKDEZl",
            "YXR1cmVQYXJhbRIZChFwb2ludF9jbG91ZF9yYW5nZRgBIAEoAhINCgV3aWR0",
            "aBgCIAEoDRIOCgZoZWlnaHQYAyABKA0SEgoKbWluX2hlaWdodBgEIAEoAhIS",
            "CgptYXhfaGVpZ2h0GAUgASgCEh0KFXVzZV9pbnRlbnNpdHlfZmVhdHVyZRgG",
            "IAEoCBIcChR1c2VfY29uc3RhbnRfZmVhdHVyZRgHIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.CNNSegParam), global::Apollo.Perception.Lidar.CNNSegParam.Parser, new[]{ "ModelType", "NetworkParam", "FeatureParam", "DoClassification", "DoHeading", "GpuId", "GroundDetector", "RoiFilter", "RemoveGroundPoints", "ObjectnessThresh", "ConfidenceThresh", "HeightThresh", "MinPtsNum", "ConfidenceRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.NetworkParam), global::Apollo.Perception.Lidar.NetworkParam.Parser, new[]{ "InstancePtBlob", "CategoryPtBlob", "ConfidencePtBlob", "HeightPtBlob", "ClassPtBlob", "HeadingPtBlob", "FeatureBlob" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.FeatureParam), global::Apollo.Perception.Lidar.FeatureParam.Parser, new[]{ "PointCloudRange", "Width", "Height", "MinHeight", "MaxHeight", "UseIntensityFeature", "UseConstantFeature" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CNNSegParam : pb::IMessage<CNNSegParam> {
    private static readonly pb::MessageParser<CNNSegParam> _parser = new pb::MessageParser<CNNSegParam>(() => new CNNSegParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNNSegParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.CnnsegParamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNNSegParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNNSegParam(CNNSegParam other) : this() {
      modelType_ = other.modelType_;
      NetworkParam = other.networkParam_ != null ? other.NetworkParam.Clone() : null;
      FeatureParam = other.featureParam_ != null ? other.FeatureParam.Clone() : null;
      doClassification_ = other.doClassification_;
      doHeading_ = other.doHeading_;
      gpuId_ = other.gpuId_;
      groundDetector_ = other.groundDetector_;
      roiFilter_ = other.roiFilter_;
      removeGroundPoints_ = other.removeGroundPoints_;
      objectnessThresh_ = other.objectnessThresh_;
      confidenceThresh_ = other.confidenceThresh_;
      heightThresh_ = other.heightThresh_;
      minPtsNum_ = other.minPtsNum_;
      confidenceRange_ = other.confidenceRange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNNSegParam Clone() {
      return new CNNSegParam(this);
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 1;
    private string modelType_ = "";
    /// <summary>
    /// for cnnseg algorithm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelType {
      get { return modelType_; }
      set {
        modelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_param" field.</summary>
    public const int NetworkParamFieldNumber = 2;
    private global::Apollo.Perception.Lidar.NetworkParam networkParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Lidar.NetworkParam NetworkParam {
      get { return networkParam_; }
      set {
        networkParam_ = value;
      }
    }

    /// <summary>Field number for the "feature_param" field.</summary>
    public const int FeatureParamFieldNumber = 3;
    private global::Apollo.Perception.Lidar.FeatureParam featureParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Lidar.FeatureParam FeatureParam {
      get { return featureParam_; }
      set {
        featureParam_ = value;
      }
    }

    /// <summary>Field number for the "do_classification" field.</summary>
    public const int DoClassificationFieldNumber = 4;
    private bool doClassification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoClassification {
      get { return doClassification_; }
      set {
        doClassification_ = value;
      }
    }

    /// <summary>Field number for the "do_heading" field.</summary>
    public const int DoHeadingFieldNumber = 5;
    private bool doHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoHeading {
      get { return doHeading_; }
      set {
        doHeading_ = value;
      }
    }

    /// <summary>Field number for the "gpu_id" field.</summary>
    public const int GpuIdFieldNumber = 6;
    private uint gpuId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GpuId {
      get { return gpuId_; }
      set {
        gpuId_ = value;
      }
    }

    /// <summary>Field number for the "ground_detector" field.</summary>
    public const int GroundDetectorFieldNumber = 7;
    private string groundDetector_ = "";
    /// <summary>
    /// for method SppEngine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroundDetector {
      get { return groundDetector_; }
      set {
        groundDetector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roi_filter" field.</summary>
    public const int RoiFilterFieldNumber = 8;
    private string roiFilter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoiFilter {
      get { return roiFilter_; }
      set {
        roiFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remove_ground_points" field.</summary>
    public const int RemoveGroundPointsFieldNumber = 9;
    private bool removeGroundPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoveGroundPoints {
      get { return removeGroundPoints_; }
      set {
        removeGroundPoints_ = value;
      }
    }

    /// <summary>Field number for the "objectness_thresh" field.</summary>
    public const int ObjectnessThreshFieldNumber = 10;
    private float objectnessThresh_;
    /// <summary>
    /// for both clustering methods
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ObjectnessThresh {
      get { return objectnessThresh_; }
      set {
        objectnessThresh_ = value;
      }
    }

    /// <summary>Field number for the "confidence_thresh" field.</summary>
    public const int ConfidenceThreshFieldNumber = 11;
    private float confidenceThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConfidenceThresh {
      get { return confidenceThresh_; }
      set {
        confidenceThresh_ = value;
      }
    }

    /// <summary>Field number for the "height_thresh" field.</summary>
    public const int HeightThreshFieldNumber = 12;
    private float heightThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightThresh {
      get { return heightThresh_; }
      set {
        heightThresh_ = value;
      }
    }

    /// <summary>Field number for the "min_pts_num" field.</summary>
    public const int MinPtsNumFieldNumber = 13;
    private uint minPtsNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinPtsNum {
      get { return minPtsNum_; }
      set {
        minPtsNum_ = value;
      }
    }

    /// <summary>Field number for the "confidence_range" field.</summary>
    public const int ConfidenceRangeFieldNumber = 14;
    private float confidenceRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConfidenceRange {
      get { return confidenceRange_; }
      set {
        confidenceRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNNSegParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNNSegParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelType != other.ModelType) return false;
      if (!object.Equals(NetworkParam, other.NetworkParam)) return false;
      if (!object.Equals(FeatureParam, other.FeatureParam)) return false;
      if (DoClassification != other.DoClassification) return false;
      if (DoHeading != other.DoHeading) return false;
      if (GpuId != other.GpuId) return false;
      if (GroundDetector != other.GroundDetector) return false;
      if (RoiFilter != other.RoiFilter) return false;
      if (RemoveGroundPoints != other.RemoveGroundPoints) return false;
      if (ObjectnessThresh != other.ObjectnessThresh) return false;
      if (ConfidenceThresh != other.ConfidenceThresh) return false;
      if (HeightThresh != other.HeightThresh) return false;
      if (MinPtsNum != other.MinPtsNum) return false;
      if (ConfidenceRange != other.ConfidenceRange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelType.Length != 0) hash ^= ModelType.GetHashCode();
      if (networkParam_ != null) hash ^= NetworkParam.GetHashCode();
      if (featureParam_ != null) hash ^= FeatureParam.GetHashCode();
      if (DoClassification != false) hash ^= DoClassification.GetHashCode();
      if (DoHeading != false) hash ^= DoHeading.GetHashCode();
      if (GpuId != 0) hash ^= GpuId.GetHashCode();
      if (GroundDetector.Length != 0) hash ^= GroundDetector.GetHashCode();
      if (RoiFilter.Length != 0) hash ^= RoiFilter.GetHashCode();
      if (RemoveGroundPoints != false) hash ^= RemoveGroundPoints.GetHashCode();
      if (ObjectnessThresh != 0F) hash ^= ObjectnessThresh.GetHashCode();
      if (ConfidenceThresh != 0F) hash ^= ConfidenceThresh.GetHashCode();
      if (HeightThresh != 0F) hash ^= HeightThresh.GetHashCode();
      if (MinPtsNum != 0) hash ^= MinPtsNum.GetHashCode();
      if (ConfidenceRange != 0F) hash ^= ConfidenceRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelType);
      }
      if (networkParam_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NetworkParam);
      }
      if (featureParam_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FeatureParam);
      }
      if (DoClassification != false) {
        output.WriteRawTag(32);
        output.WriteBool(DoClassification);
      }
      if (DoHeading != false) {
        output.WriteRawTag(40);
        output.WriteBool(DoHeading);
      }
      if (GpuId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GpuId);
      }
      if (GroundDetector.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GroundDetector);
      }
      if (RoiFilter.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RoiFilter);
      }
      if (RemoveGroundPoints != false) {
        output.WriteRawTag(72);
        output.WriteBool(RemoveGroundPoints);
      }
      if (ObjectnessThresh != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ObjectnessThresh);
      }
      if (ConfidenceThresh != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ConfidenceThresh);
      }
      if (HeightThresh != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(HeightThresh);
      }
      if (MinPtsNum != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(MinPtsNum);
      }
      if (ConfidenceRange != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(ConfidenceRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelType);
      }
      if (networkParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkParam);
      }
      if (featureParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureParam);
      }
      if (DoClassification != false) {
        size += 1 + 1;
      }
      if (DoHeading != false) {
        size += 1 + 1;
      }
      if (GpuId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GpuId);
      }
      if (GroundDetector.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroundDetector);
      }
      if (RoiFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoiFilter);
      }
      if (RemoveGroundPoints != false) {
        size += 1 + 1;
      }
      if (ObjectnessThresh != 0F) {
        size += 1 + 4;
      }
      if (ConfidenceThresh != 0F) {
        size += 1 + 4;
      }
      if (HeightThresh != 0F) {
        size += 1 + 4;
      }
      if (MinPtsNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinPtsNum);
      }
      if (ConfidenceRange != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNNSegParam other) {
      if (other == null) {
        return;
      }
      if (other.ModelType.Length != 0) {
        ModelType = other.ModelType;
      }
      if (other.networkParam_ != null) {
        if (networkParam_ == null) {
          networkParam_ = new global::Apollo.Perception.Lidar.NetworkParam();
        }
        NetworkParam.MergeFrom(other.NetworkParam);
      }
      if (other.featureParam_ != null) {
        if (featureParam_ == null) {
          featureParam_ = new global::Apollo.Perception.Lidar.FeatureParam();
        }
        FeatureParam.MergeFrom(other.FeatureParam);
      }
      if (other.DoClassification != false) {
        DoClassification = other.DoClassification;
      }
      if (other.DoHeading != false) {
        DoHeading = other.DoHeading;
      }
      if (other.GpuId != 0) {
        GpuId = other.GpuId;
      }
      if (other.GroundDetector.Length != 0) {
        GroundDetector = other.GroundDetector;
      }
      if (other.RoiFilter.Length != 0) {
        RoiFilter = other.RoiFilter;
      }
      if (other.RemoveGroundPoints != false) {
        RemoveGroundPoints = other.RemoveGroundPoints;
      }
      if (other.ObjectnessThresh != 0F) {
        ObjectnessThresh = other.ObjectnessThresh;
      }
      if (other.ConfidenceThresh != 0F) {
        ConfidenceThresh = other.ConfidenceThresh;
      }
      if (other.HeightThresh != 0F) {
        HeightThresh = other.HeightThresh;
      }
      if (other.MinPtsNum != 0) {
        MinPtsNum = other.MinPtsNum;
      }
      if (other.ConfidenceRange != 0F) {
        ConfidenceRange = other.ConfidenceRange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ModelType = input.ReadString();
            break;
          }
          case 18: {
            if (networkParam_ == null) {
              networkParam_ = new global::Apollo.Perception.Lidar.NetworkParam();
            }
            input.ReadMessage(networkParam_);
            break;
          }
          case 26: {
            if (featureParam_ == null) {
              featureParam_ = new global::Apollo.Perception.Lidar.FeatureParam();
            }
            input.ReadMessage(featureParam_);
            break;
          }
          case 32: {
            DoClassification = input.ReadBool();
            break;
          }
          case 40: {
            DoHeading = input.ReadBool();
            break;
          }
          case 48: {
            GpuId = input.ReadUInt32();
            break;
          }
          case 58: {
            GroundDetector = input.ReadString();
            break;
          }
          case 66: {
            RoiFilter = input.ReadString();
            break;
          }
          case 72: {
            RemoveGroundPoints = input.ReadBool();
            break;
          }
          case 85: {
            ObjectnessThresh = input.ReadFloat();
            break;
          }
          case 93: {
            ConfidenceThresh = input.ReadFloat();
            break;
          }
          case 101: {
            HeightThresh = input.ReadFloat();
            break;
          }
          case 104: {
            MinPtsNum = input.ReadUInt32();
            break;
          }
          case 117: {
            ConfidenceRange = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkParam : pb::IMessage<NetworkParam> {
    private static readonly pb::MessageParser<NetworkParam> _parser = new pb::MessageParser<NetworkParam>(() => new NetworkParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.CnnsegParamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkParam(NetworkParam other) : this() {
      instancePtBlob_ = other.instancePtBlob_;
      categoryPtBlob_ = other.categoryPtBlob_;
      confidencePtBlob_ = other.confidencePtBlob_;
      heightPtBlob_ = other.heightPtBlob_;
      classPtBlob_ = other.classPtBlob_;
      headingPtBlob_ = other.headingPtBlob_;
      featureBlob_ = other.featureBlob_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkParam Clone() {
      return new NetworkParam(this);
    }

    /// <summary>Field number for the "instance_pt_blob" field.</summary>
    public const int InstancePtBlobFieldNumber = 1;
    private string instancePtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstancePtBlob {
      get { return instancePtBlob_; }
      set {
        instancePtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category_pt_blob" field.</summary>
    public const int CategoryPtBlobFieldNumber = 2;
    private string categoryPtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryPtBlob {
      get { return categoryPtBlob_; }
      set {
        categoryPtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confidence_pt_blob" field.</summary>
    public const int ConfidencePtBlobFieldNumber = 3;
    private string confidencePtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfidencePtBlob {
      get { return confidencePtBlob_; }
      set {
        confidencePtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height_pt_blob" field.</summary>
    public const int HeightPtBlobFieldNumber = 4;
    private string heightPtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeightPtBlob {
      get { return heightPtBlob_; }
      set {
        heightPtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_pt_blob" field.</summary>
    public const int ClassPtBlobFieldNumber = 5;
    private string classPtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassPtBlob {
      get { return classPtBlob_; }
      set {
        classPtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heading_pt_blob" field.</summary>
    public const int HeadingPtBlobFieldNumber = 6;
    private string headingPtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadingPtBlob {
      get { return headingPtBlob_; }
      set {
        headingPtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature_blob" field.</summary>
    public const int FeatureBlobFieldNumber = 7;
    private string featureBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureBlob {
      get { return featureBlob_; }
      set {
        featureBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstancePtBlob != other.InstancePtBlob) return false;
      if (CategoryPtBlob != other.CategoryPtBlob) return false;
      if (ConfidencePtBlob != other.ConfidencePtBlob) return false;
      if (HeightPtBlob != other.HeightPtBlob) return false;
      if (ClassPtBlob != other.ClassPtBlob) return false;
      if (HeadingPtBlob != other.HeadingPtBlob) return false;
      if (FeatureBlob != other.FeatureBlob) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstancePtBlob.Length != 0) hash ^= InstancePtBlob.GetHashCode();
      if (CategoryPtBlob.Length != 0) hash ^= CategoryPtBlob.GetHashCode();
      if (ConfidencePtBlob.Length != 0) hash ^= ConfidencePtBlob.GetHashCode();
      if (HeightPtBlob.Length != 0) hash ^= HeightPtBlob.GetHashCode();
      if (ClassPtBlob.Length != 0) hash ^= ClassPtBlob.GetHashCode();
      if (HeadingPtBlob.Length != 0) hash ^= HeadingPtBlob.GetHashCode();
      if (FeatureBlob.Length != 0) hash ^= FeatureBlob.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstancePtBlob.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstancePtBlob);
      }
      if (CategoryPtBlob.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CategoryPtBlob);
      }
      if (ConfidencePtBlob.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConfidencePtBlob);
      }
      if (HeightPtBlob.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeightPtBlob);
      }
      if (ClassPtBlob.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClassPtBlob);
      }
      if (HeadingPtBlob.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HeadingPtBlob);
      }
      if (FeatureBlob.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FeatureBlob);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstancePtBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstancePtBlob);
      }
      if (CategoryPtBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryPtBlob);
      }
      if (ConfidencePtBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfidencePtBlob);
      }
      if (HeightPtBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeightPtBlob);
      }
      if (ClassPtBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassPtBlob);
      }
      if (HeadingPtBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadingPtBlob);
      }
      if (FeatureBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureBlob);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkParam other) {
      if (other == null) {
        return;
      }
      if (other.InstancePtBlob.Length != 0) {
        InstancePtBlob = other.InstancePtBlob;
      }
      if (other.CategoryPtBlob.Length != 0) {
        CategoryPtBlob = other.CategoryPtBlob;
      }
      if (other.ConfidencePtBlob.Length != 0) {
        ConfidencePtBlob = other.ConfidencePtBlob;
      }
      if (other.HeightPtBlob.Length != 0) {
        HeightPtBlob = other.HeightPtBlob;
      }
      if (other.ClassPtBlob.Length != 0) {
        ClassPtBlob = other.ClassPtBlob;
      }
      if (other.HeadingPtBlob.Length != 0) {
        HeadingPtBlob = other.HeadingPtBlob;
      }
      if (other.FeatureBlob.Length != 0) {
        FeatureBlob = other.FeatureBlob;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InstancePtBlob = input.ReadString();
            break;
          }
          case 18: {
            CategoryPtBlob = input.ReadString();
            break;
          }
          case 26: {
            ConfidencePtBlob = input.ReadString();
            break;
          }
          case 34: {
            HeightPtBlob = input.ReadString();
            break;
          }
          case 42: {
            ClassPtBlob = input.ReadString();
            break;
          }
          case 50: {
            HeadingPtBlob = input.ReadString();
            break;
          }
          case 58: {
            FeatureBlob = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeatureParam : pb::IMessage<FeatureParam> {
    private static readonly pb::MessageParser<FeatureParam> _parser = new pb::MessageParser<FeatureParam>(() => new FeatureParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.CnnsegParamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureParam(FeatureParam other) : this() {
      pointCloudRange_ = other.pointCloudRange_;
      width_ = other.width_;
      height_ = other.height_;
      minHeight_ = other.minHeight_;
      maxHeight_ = other.maxHeight_;
      useIntensityFeature_ = other.useIntensityFeature_;
      useConstantFeature_ = other.useConstantFeature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureParam Clone() {
      return new FeatureParam(this);
    }

    /// <summary>Field number for the "point_cloud_range" field.</summary>
    public const int PointCloudRangeFieldNumber = 1;
    private float pointCloudRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PointCloudRange {
      get { return pointCloudRange_; }
      set {
        pointCloudRange_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "min_height" field.</summary>
    public const int MinHeightFieldNumber = 4;
    private float minHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinHeight {
      get { return minHeight_; }
      set {
        minHeight_ = value;
      }
    }

    /// <summary>Field number for the "max_height" field.</summary>
    public const int MaxHeightFieldNumber = 5;
    private float maxHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxHeight {
      get { return maxHeight_; }
      set {
        maxHeight_ = value;
      }
    }

    /// <summary>Field number for the "use_intensity_feature" field.</summary>
    public const int UseIntensityFeatureFieldNumber = 6;
    private bool useIntensityFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseIntensityFeature {
      get { return useIntensityFeature_; }
      set {
        useIntensityFeature_ = value;
      }
    }

    /// <summary>Field number for the "use_constant_feature" field.</summary>
    public const int UseConstantFeatureFieldNumber = 7;
    private bool useConstantFeature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseConstantFeature {
      get { return useConstantFeature_; }
      set {
        useConstantFeature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointCloudRange != other.PointCloudRange) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (MinHeight != other.MinHeight) return false;
      if (MaxHeight != other.MaxHeight) return false;
      if (UseIntensityFeature != other.UseIntensityFeature) return false;
      if (UseConstantFeature != other.UseConstantFeature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PointCloudRange != 0F) hash ^= PointCloudRange.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (MinHeight != 0F) hash ^= MinHeight.GetHashCode();
      if (MaxHeight != 0F) hash ^= MaxHeight.GetHashCode();
      if (UseIntensityFeature != false) hash ^= UseIntensityFeature.GetHashCode();
      if (UseConstantFeature != false) hash ^= UseConstantFeature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PointCloudRange != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PointCloudRange);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (MinHeight != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinHeight);
      }
      if (MaxHeight != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxHeight);
      }
      if (UseIntensityFeature != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseIntensityFeature);
      }
      if (UseConstantFeature != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseConstantFeature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PointCloudRange != 0F) {
        size += 1 + 4;
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (MinHeight != 0F) {
        size += 1 + 4;
      }
      if (MaxHeight != 0F) {
        size += 1 + 4;
      }
      if (UseIntensityFeature != false) {
        size += 1 + 1;
      }
      if (UseConstantFeature != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureParam other) {
      if (other == null) {
        return;
      }
      if (other.PointCloudRange != 0F) {
        PointCloudRange = other.PointCloudRange;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.MinHeight != 0F) {
        MinHeight = other.MinHeight;
      }
      if (other.MaxHeight != 0F) {
        MaxHeight = other.MaxHeight;
      }
      if (other.UseIntensityFeature != false) {
        UseIntensityFeature = other.UseIntensityFeature;
      }
      if (other.UseConstantFeature != false) {
        UseConstantFeature = other.UseConstantFeature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PointCloudRange = input.ReadFloat();
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 37: {
            MinHeight = input.ReadFloat();
            break;
          }
          case 45: {
            MaxHeight = input.ReadFloat();
            break;
          }
          case 48: {
            UseIntensityFeature = input.ReadBool();
            break;
          }
          case 56: {
            UseConstantFeature = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
