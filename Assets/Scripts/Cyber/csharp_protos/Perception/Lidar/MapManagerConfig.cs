// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/map_manager_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/proto/map_manager_config.proto</summary>
  public static partial class MapManagerConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/map_manager_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapManagerConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vbWFwX21hbmFnZXJfY29uZmln",
            "LnByb3RvEhdhcG9sbG8ucGVyY2VwdGlvbi5saWRhciJrChBNYXBNYW5hZ2Vy",
            "Q29uZmlnEhMKC3VwZGF0ZV9wb3NlGAEgASgIEhsKE3JvaV9zZWFyY2hfZGlz",
            "dGFuY2UYAiABKAESEgoKbGFuZV9yYW5nZRgDIAEoARIRCgltYXhfZGVwdGgY",
            "BCABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.MapManagerConfig), global::Apollo.Perception.Lidar.MapManagerConfig.Parser, new[]{ "UpdatePose", "RoiSearchDistance", "LaneRange", "MaxDepth" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MapManagerConfig : pb::IMessage<MapManagerConfig> {
    private static readonly pb::MessageParser<MapManagerConfig> _parser = new pb::MessageParser<MapManagerConfig>(() => new MapManagerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapManagerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.MapManagerConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapManagerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapManagerConfig(MapManagerConfig other) : this() {
      updatePose_ = other.updatePose_;
      roiSearchDistance_ = other.roiSearchDistance_;
      laneRange_ = other.laneRange_;
      maxDepth_ = other.maxDepth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapManagerConfig Clone() {
      return new MapManagerConfig(this);
    }

    /// <summary>Field number for the "update_pose" field.</summary>
    public const int UpdatePoseFieldNumber = 1;
    private bool updatePose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdatePose {
      get { return updatePose_; }
      set {
        updatePose_ = value;
      }
    }

    /// <summary>Field number for the "roi_search_distance" field.</summary>
    public const int RoiSearchDistanceFieldNumber = 2;
    private double roiSearchDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RoiSearchDistance {
      get { return roiSearchDistance_; }
      set {
        roiSearchDistance_ = value;
      }
    }

    /// <summary>Field number for the "lane_range" field.</summary>
    public const int LaneRangeFieldNumber = 3;
    private double laneRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneRange {
      get { return laneRange_; }
      set {
        laneRange_ = value;
      }
    }

    /// <summary>Field number for the "max_depth" field.</summary>
    public const int MaxDepthFieldNumber = 4;
    private double maxDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxDepth {
      get { return maxDepth_; }
      set {
        maxDepth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapManagerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapManagerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpdatePose != other.UpdatePose) return false;
      if (RoiSearchDistance != other.RoiSearchDistance) return false;
      if (LaneRange != other.LaneRange) return false;
      if (MaxDepth != other.MaxDepth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpdatePose != false) hash ^= UpdatePose.GetHashCode();
      if (RoiSearchDistance != 0D) hash ^= RoiSearchDistance.GetHashCode();
      if (LaneRange != 0D) hash ^= LaneRange.GetHashCode();
      if (MaxDepth != 0D) hash ^= MaxDepth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpdatePose != false) {
        output.WriteRawTag(8);
        output.WriteBool(UpdatePose);
      }
      if (RoiSearchDistance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RoiSearchDistance);
      }
      if (LaneRange != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LaneRange);
      }
      if (MaxDepth != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxDepth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdatePose != false) {
        size += 1 + 1;
      }
      if (RoiSearchDistance != 0D) {
        size += 1 + 8;
      }
      if (LaneRange != 0D) {
        size += 1 + 8;
      }
      if (MaxDepth != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapManagerConfig other) {
      if (other == null) {
        return;
      }
      if (other.UpdatePose != false) {
        UpdatePose = other.UpdatePose;
      }
      if (other.RoiSearchDistance != 0D) {
        RoiSearchDistance = other.RoiSearchDistance;
      }
      if (other.LaneRange != 0D) {
        LaneRange = other.LaneRange;
      }
      if (other.MaxDepth != 0D) {
        MaxDepth = other.MaxDepth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UpdatePose = input.ReadBool();
            break;
          }
          case 17: {
            RoiSearchDistance = input.ReadDouble();
            break;
          }
          case 25: {
            LaneRange = input.ReadDouble();
            break;
          }
          case 33: {
            MaxDepth = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
