// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/scene_manager/roi_service/proto/roi_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Lidar {

  /// <summary>Holder for reflection information generated from modules/perception/lidar/lib/scene_manager/roi_service/proto/roi_service.proto</summary>
  public static partial class RoiServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/lidar/lib/scene_manager/roi_service/proto/roi_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoiServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ck5tb2R1bGVzL3BlcmNlcHRpb24vbGlkYXIvbGliL3NjZW5lX21hbmFnZXIv",
            "cm9pX3NlcnZpY2UvcHJvdG8vcm9pX3NlcnZpY2UucHJvdG8SF2Fwb2xsby5w",
            "ZXJjZXB0aW9uLmxpZGFyIjQKEFJPSVNlcnZpY2VDb25maWcSDQoFcmFuZ2UY",
            "ASABKAESEQoJY2VsbF9zaXplGAIgASgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Lidar.ROIServiceConfig), global::Apollo.Perception.Lidar.ROIServiceConfig.Parser, new[]{ "Range", "CellSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ROIServiceConfig : pb::IMessage<ROIServiceConfig> {
    private static readonly pb::MessageParser<ROIServiceConfig> _parser = new pb::MessageParser<ROIServiceConfig>(() => new ROIServiceConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ROIServiceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Lidar.RoiServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIServiceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIServiceConfig(ROIServiceConfig other) : this() {
      range_ = other.range_;
      cellSize_ = other.cellSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIServiceConfig Clone() {
      return new ROIServiceConfig(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private double range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "cell_size" field.</summary>
    public const int CellSizeFieldNumber = 2;
    private double cellSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CellSize {
      get { return cellSize_; }
      set {
        cellSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ROIServiceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ROIServiceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Range != other.Range) return false;
      if (CellSize != other.CellSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Range != 0D) hash ^= Range.GetHashCode();
      if (CellSize != 0D) hash ^= CellSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Range != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Range);
      }
      if (CellSize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CellSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Range != 0D) {
        size += 1 + 8;
      }
      if (CellSize != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ROIServiceConfig other) {
      if (other == null) {
        return;
      }
      if (other.Range != 0D) {
        Range = other.Range;
      }
      if (other.CellSize != 0D) {
        CellSize = other.CellSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Range = input.ReadDouble();
            break;
          }
          case 17: {
            CellSize = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
