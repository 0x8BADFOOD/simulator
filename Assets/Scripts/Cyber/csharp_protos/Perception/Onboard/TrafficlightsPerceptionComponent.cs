// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/trafficlights_perception_component.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Onboard {

  /// <summary>Holder for reflection information generated from modules/perception/onboard/proto/trafficlights_perception_component.proto</summary>
  public static partial class TrafficlightsPerceptionComponentReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/onboard/proto/trafficlights_perception_component.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrafficlightsPerceptionComponentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ckltb2R1bGVzL3BlcmNlcHRpb24vb25ib2FyZC9wcm90by90cmFmZmljbGln",
            "aHRzX3BlcmNlcHRpb25fY29tcG9uZW50LnByb3RvEhlhcG9sbG8ucGVyY2Vw",
            "dGlvbi5vbmJvYXJkIqEFCgxUcmFmZmljTGlnaHQSFwoPdGxfdGYyX2ZyYW1l",
            "X2lkGAEgASgJEh0KFXRsX3RmMl9jaGlsZF9mcmFtZV9pZBgCIAEoCRIaChJ0",
            "ZjJfdGltZW91dF9zZWNvbmQYAyABKAESFAoMY2FtZXJhX25hbWVzGAQgASgJ",
            "EhwKFGNhbWVyYV9jaGFubmVsX25hbWVzGAUgASgJEiEKGXRsX2ltYWdlX3Rp",
            "bWVzdGFtcF9vZmZzZXQYBiABKAESHQoVbWF4X3Byb2Nlc3NfaW1hZ2VfZnBz",
            "GAcgASgFEiEKGXF1ZXJ5X3RmX2ludGVydmFsX3NlY29uZHMYCCABKAESHAoU",
            "dmFsaWRfaGRtYXBfaW50ZXJ2YWwYCSABKAESIwobaW1hZ2Vfc3lzX3RzX2Rp",
            "ZmZfdGhyZXNob2xkGAogASgBEh0KFXN5bmNfaW50ZXJ2YWxfc2Vjb25kcxgL",
            "IAEoARIwCihjYW1lcmFfdHJhZmZpY19saWdodF9wZXJjZXB0aW9uX2NvbmZf",
            "ZGlyGAwgASgJEjEKKWNhbWVyYV90cmFmZmljX2xpZ2h0X3BlcmNlcHRpb25f",
            "Y29uZl9maWxlGA0gASgJEiEKGWRlZmF1bHRfaW1hZ2VfYm9yZGVyX3NpemUY",
            "DiABKAUSKQohdHJhZmZpY19saWdodF9vdXRwdXRfY2hhbm5lbF9uYW1lGA8g",
            "ASgJEh8KF3NpbXVsYXRpb25fY2hhbm5lbF9uYW1lGBAgASgJEiwKJHYyeF90",
            "cmFmZmljbGlnaHRzX2lucHV0X2NoYW5uZWxfbmFtZRgRIAEoCRIhChl2Mnhf",
            "c3luY19pbnRlcnZhbF9zZWNvbmRzGBIgASgBEh0KFW1heF92MnhfbXNnX2J1",
            "ZmZfc2l6ZRgTIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Onboard.TrafficLight), global::Apollo.Perception.Onboard.TrafficLight.Parser, new[]{ "TlTf2FrameId", "TlTf2ChildFrameId", "Tf2TimeoutSecond", "CameraNames", "CameraChannelNames", "TlImageTimestampOffset", "MaxProcessImageFps", "QueryTfIntervalSeconds", "ValidHdmapInterval", "ImageSysTsDiffThreshold", "SyncIntervalSeconds", "CameraTrafficLightPerceptionConfDir", "CameraTrafficLightPerceptionConfFile", "DefaultImageBorderSize", "TrafficLightOutputChannelName", "SimulationChannelName", "V2XTrafficlightsInputChannelName", "V2XSyncIntervalSeconds", "MaxV2XMsgBuffSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TrafficLight : pb::IMessage<TrafficLight> {
    private static readonly pb::MessageParser<TrafficLight> _parser = new pb::MessageParser<TrafficLight>(() => new TrafficLight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Onboard.TrafficlightsPerceptionComponentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight(TrafficLight other) : this() {
      tlTf2FrameId_ = other.tlTf2FrameId_;
      tlTf2ChildFrameId_ = other.tlTf2ChildFrameId_;
      tf2TimeoutSecond_ = other.tf2TimeoutSecond_;
      cameraNames_ = other.cameraNames_;
      cameraChannelNames_ = other.cameraChannelNames_;
      tlImageTimestampOffset_ = other.tlImageTimestampOffset_;
      maxProcessImageFps_ = other.maxProcessImageFps_;
      queryTfIntervalSeconds_ = other.queryTfIntervalSeconds_;
      validHdmapInterval_ = other.validHdmapInterval_;
      imageSysTsDiffThreshold_ = other.imageSysTsDiffThreshold_;
      syncIntervalSeconds_ = other.syncIntervalSeconds_;
      cameraTrafficLightPerceptionConfDir_ = other.cameraTrafficLightPerceptionConfDir_;
      cameraTrafficLightPerceptionConfFile_ = other.cameraTrafficLightPerceptionConfFile_;
      defaultImageBorderSize_ = other.defaultImageBorderSize_;
      trafficLightOutputChannelName_ = other.trafficLightOutputChannelName_;
      simulationChannelName_ = other.simulationChannelName_;
      v2XTrafficlightsInputChannelName_ = other.v2XTrafficlightsInputChannelName_;
      v2XSyncIntervalSeconds_ = other.v2XSyncIntervalSeconds_;
      maxV2XMsgBuffSize_ = other.maxV2XMsgBuffSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight Clone() {
      return new TrafficLight(this);
    }

    /// <summary>Field number for the "tl_tf2_frame_id" field.</summary>
    public const int TlTf2FrameIdFieldNumber = 1;
    private string tlTf2FrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TlTf2FrameId {
      get { return tlTf2FrameId_; }
      set {
        tlTf2FrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tl_tf2_child_frame_id" field.</summary>
    public const int TlTf2ChildFrameIdFieldNumber = 2;
    private string tlTf2ChildFrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TlTf2ChildFrameId {
      get { return tlTf2ChildFrameId_; }
      set {
        tlTf2ChildFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tf2_timeout_second" field.</summary>
    public const int Tf2TimeoutSecondFieldNumber = 3;
    private double tf2TimeoutSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tf2TimeoutSecond {
      get { return tf2TimeoutSecond_; }
      set {
        tf2TimeoutSecond_ = value;
      }
    }

    /// <summary>Field number for the "camera_names" field.</summary>
    public const int CameraNamesFieldNumber = 4;
    private string cameraNames_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraNames {
      get { return cameraNames_; }
      set {
        cameraNames_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camera_channel_names" field.</summary>
    public const int CameraChannelNamesFieldNumber = 5;
    private string cameraChannelNames_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraChannelNames {
      get { return cameraChannelNames_; }
      set {
        cameraChannelNames_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tl_image_timestamp_offset" field.</summary>
    public const int TlImageTimestampOffsetFieldNumber = 6;
    private double tlImageTimestampOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TlImageTimestampOffset {
      get { return tlImageTimestampOffset_; }
      set {
        tlImageTimestampOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_process_image_fps" field.</summary>
    public const int MaxProcessImageFpsFieldNumber = 7;
    private int maxProcessImageFps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxProcessImageFps {
      get { return maxProcessImageFps_; }
      set {
        maxProcessImageFps_ = value;
      }
    }

    /// <summary>Field number for the "query_tf_interval_seconds" field.</summary>
    public const int QueryTfIntervalSecondsFieldNumber = 8;
    private double queryTfIntervalSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double QueryTfIntervalSeconds {
      get { return queryTfIntervalSeconds_; }
      set {
        queryTfIntervalSeconds_ = value;
      }
    }

    /// <summary>Field number for the "valid_hdmap_interval" field.</summary>
    public const int ValidHdmapIntervalFieldNumber = 9;
    private double validHdmapInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ValidHdmapInterval {
      get { return validHdmapInterval_; }
      set {
        validHdmapInterval_ = value;
      }
    }

    /// <summary>Field number for the "image_sys_ts_diff_threshold" field.</summary>
    public const int ImageSysTsDiffThresholdFieldNumber = 10;
    private double imageSysTsDiffThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImageSysTsDiffThreshold {
      get { return imageSysTsDiffThreshold_; }
      set {
        imageSysTsDiffThreshold_ = value;
      }
    }

    /// <summary>Field number for the "sync_interval_seconds" field.</summary>
    public const int SyncIntervalSecondsFieldNumber = 11;
    private double syncIntervalSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SyncIntervalSeconds {
      get { return syncIntervalSeconds_; }
      set {
        syncIntervalSeconds_ = value;
      }
    }

    /// <summary>Field number for the "camera_traffic_light_perception_conf_dir" field.</summary>
    public const int CameraTrafficLightPerceptionConfDirFieldNumber = 12;
    private string cameraTrafficLightPerceptionConfDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraTrafficLightPerceptionConfDir {
      get { return cameraTrafficLightPerceptionConfDir_; }
      set {
        cameraTrafficLightPerceptionConfDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camera_traffic_light_perception_conf_file" field.</summary>
    public const int CameraTrafficLightPerceptionConfFileFieldNumber = 13;
    private string cameraTrafficLightPerceptionConfFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraTrafficLightPerceptionConfFile {
      get { return cameraTrafficLightPerceptionConfFile_; }
      set {
        cameraTrafficLightPerceptionConfFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_image_border_size" field.</summary>
    public const int DefaultImageBorderSizeFieldNumber = 14;
    private int defaultImageBorderSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultImageBorderSize {
      get { return defaultImageBorderSize_; }
      set {
        defaultImageBorderSize_ = value;
      }
    }

    /// <summary>Field number for the "traffic_light_output_channel_name" field.</summary>
    public const int TrafficLightOutputChannelNameFieldNumber = 15;
    private string trafficLightOutputChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrafficLightOutputChannelName {
      get { return trafficLightOutputChannelName_; }
      set {
        trafficLightOutputChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "simulation_channel_name" field.</summary>
    public const int SimulationChannelNameFieldNumber = 16;
    private string simulationChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SimulationChannelName {
      get { return simulationChannelName_; }
      set {
        simulationChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "v2x_trafficlights_input_channel_name" field.</summary>
    public const int V2XTrafficlightsInputChannelNameFieldNumber = 17;
    private string v2XTrafficlightsInputChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string V2XTrafficlightsInputChannelName {
      get { return v2XTrafficlightsInputChannelName_; }
      set {
        v2XTrafficlightsInputChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "v2x_sync_interval_seconds" field.</summary>
    public const int V2XSyncIntervalSecondsFieldNumber = 18;
    private double v2XSyncIntervalSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double V2XSyncIntervalSeconds {
      get { return v2XSyncIntervalSeconds_; }
      set {
        v2XSyncIntervalSeconds_ = value;
      }
    }

    /// <summary>Field number for the "max_v2x_msg_buff_size" field.</summary>
    public const int MaxV2XMsgBuffSizeFieldNumber = 19;
    private int maxV2XMsgBuffSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxV2XMsgBuffSize {
      get { return maxV2XMsgBuffSize_; }
      set {
        maxV2XMsgBuffSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TlTf2FrameId != other.TlTf2FrameId) return false;
      if (TlTf2ChildFrameId != other.TlTf2ChildFrameId) return false;
      if (Tf2TimeoutSecond != other.Tf2TimeoutSecond) return false;
      if (CameraNames != other.CameraNames) return false;
      if (CameraChannelNames != other.CameraChannelNames) return false;
      if (TlImageTimestampOffset != other.TlImageTimestampOffset) return false;
      if (MaxProcessImageFps != other.MaxProcessImageFps) return false;
      if (QueryTfIntervalSeconds != other.QueryTfIntervalSeconds) return false;
      if (ValidHdmapInterval != other.ValidHdmapInterval) return false;
      if (ImageSysTsDiffThreshold != other.ImageSysTsDiffThreshold) return false;
      if (SyncIntervalSeconds != other.SyncIntervalSeconds) return false;
      if (CameraTrafficLightPerceptionConfDir != other.CameraTrafficLightPerceptionConfDir) return false;
      if (CameraTrafficLightPerceptionConfFile != other.CameraTrafficLightPerceptionConfFile) return false;
      if (DefaultImageBorderSize != other.DefaultImageBorderSize) return false;
      if (TrafficLightOutputChannelName != other.TrafficLightOutputChannelName) return false;
      if (SimulationChannelName != other.SimulationChannelName) return false;
      if (V2XTrafficlightsInputChannelName != other.V2XTrafficlightsInputChannelName) return false;
      if (V2XSyncIntervalSeconds != other.V2XSyncIntervalSeconds) return false;
      if (MaxV2XMsgBuffSize != other.MaxV2XMsgBuffSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TlTf2FrameId.Length != 0) hash ^= TlTf2FrameId.GetHashCode();
      if (TlTf2ChildFrameId.Length != 0) hash ^= TlTf2ChildFrameId.GetHashCode();
      if (Tf2TimeoutSecond != 0D) hash ^= Tf2TimeoutSecond.GetHashCode();
      if (CameraNames.Length != 0) hash ^= CameraNames.GetHashCode();
      if (CameraChannelNames.Length != 0) hash ^= CameraChannelNames.GetHashCode();
      if (TlImageTimestampOffset != 0D) hash ^= TlImageTimestampOffset.GetHashCode();
      if (MaxProcessImageFps != 0) hash ^= MaxProcessImageFps.GetHashCode();
      if (QueryTfIntervalSeconds != 0D) hash ^= QueryTfIntervalSeconds.GetHashCode();
      if (ValidHdmapInterval != 0D) hash ^= ValidHdmapInterval.GetHashCode();
      if (ImageSysTsDiffThreshold != 0D) hash ^= ImageSysTsDiffThreshold.GetHashCode();
      if (SyncIntervalSeconds != 0D) hash ^= SyncIntervalSeconds.GetHashCode();
      if (CameraTrafficLightPerceptionConfDir.Length != 0) hash ^= CameraTrafficLightPerceptionConfDir.GetHashCode();
      if (CameraTrafficLightPerceptionConfFile.Length != 0) hash ^= CameraTrafficLightPerceptionConfFile.GetHashCode();
      if (DefaultImageBorderSize != 0) hash ^= DefaultImageBorderSize.GetHashCode();
      if (TrafficLightOutputChannelName.Length != 0) hash ^= TrafficLightOutputChannelName.GetHashCode();
      if (SimulationChannelName.Length != 0) hash ^= SimulationChannelName.GetHashCode();
      if (V2XTrafficlightsInputChannelName.Length != 0) hash ^= V2XTrafficlightsInputChannelName.GetHashCode();
      if (V2XSyncIntervalSeconds != 0D) hash ^= V2XSyncIntervalSeconds.GetHashCode();
      if (MaxV2XMsgBuffSize != 0) hash ^= MaxV2XMsgBuffSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TlTf2FrameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TlTf2FrameId);
      }
      if (TlTf2ChildFrameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TlTf2ChildFrameId);
      }
      if (Tf2TimeoutSecond != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Tf2TimeoutSecond);
      }
      if (CameraNames.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CameraNames);
      }
      if (CameraChannelNames.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CameraChannelNames);
      }
      if (TlImageTimestampOffset != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TlImageTimestampOffset);
      }
      if (MaxProcessImageFps != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxProcessImageFps);
      }
      if (QueryTfIntervalSeconds != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(QueryTfIntervalSeconds);
      }
      if (ValidHdmapInterval != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ValidHdmapInterval);
      }
      if (ImageSysTsDiffThreshold != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ImageSysTsDiffThreshold);
      }
      if (SyncIntervalSeconds != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(SyncIntervalSeconds);
      }
      if (CameraTrafficLightPerceptionConfDir.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CameraTrafficLightPerceptionConfDir);
      }
      if (CameraTrafficLightPerceptionConfFile.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CameraTrafficLightPerceptionConfFile);
      }
      if (DefaultImageBorderSize != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(DefaultImageBorderSize);
      }
      if (TrafficLightOutputChannelName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TrafficLightOutputChannelName);
      }
      if (SimulationChannelName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(SimulationChannelName);
      }
      if (V2XTrafficlightsInputChannelName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(V2XTrafficlightsInputChannelName);
      }
      if (V2XSyncIntervalSeconds != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(V2XSyncIntervalSeconds);
      }
      if (MaxV2XMsgBuffSize != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MaxV2XMsgBuffSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TlTf2FrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TlTf2FrameId);
      }
      if (TlTf2ChildFrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TlTf2ChildFrameId);
      }
      if (Tf2TimeoutSecond != 0D) {
        size += 1 + 8;
      }
      if (CameraNames.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraNames);
      }
      if (CameraChannelNames.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraChannelNames);
      }
      if (TlImageTimestampOffset != 0D) {
        size += 1 + 8;
      }
      if (MaxProcessImageFps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxProcessImageFps);
      }
      if (QueryTfIntervalSeconds != 0D) {
        size += 1 + 8;
      }
      if (ValidHdmapInterval != 0D) {
        size += 1 + 8;
      }
      if (ImageSysTsDiffThreshold != 0D) {
        size += 1 + 8;
      }
      if (SyncIntervalSeconds != 0D) {
        size += 1 + 8;
      }
      if (CameraTrafficLightPerceptionConfDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraTrafficLightPerceptionConfDir);
      }
      if (CameraTrafficLightPerceptionConfFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraTrafficLightPerceptionConfFile);
      }
      if (DefaultImageBorderSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultImageBorderSize);
      }
      if (TrafficLightOutputChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrafficLightOutputChannelName);
      }
      if (SimulationChannelName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SimulationChannelName);
      }
      if (V2XTrafficlightsInputChannelName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(V2XTrafficlightsInputChannelName);
      }
      if (V2XSyncIntervalSeconds != 0D) {
        size += 2 + 8;
      }
      if (MaxV2XMsgBuffSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxV2XMsgBuffSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.TlTf2FrameId.Length != 0) {
        TlTf2FrameId = other.TlTf2FrameId;
      }
      if (other.TlTf2ChildFrameId.Length != 0) {
        TlTf2ChildFrameId = other.TlTf2ChildFrameId;
      }
      if (other.Tf2TimeoutSecond != 0D) {
        Tf2TimeoutSecond = other.Tf2TimeoutSecond;
      }
      if (other.CameraNames.Length != 0) {
        CameraNames = other.CameraNames;
      }
      if (other.CameraChannelNames.Length != 0) {
        CameraChannelNames = other.CameraChannelNames;
      }
      if (other.TlImageTimestampOffset != 0D) {
        TlImageTimestampOffset = other.TlImageTimestampOffset;
      }
      if (other.MaxProcessImageFps != 0) {
        MaxProcessImageFps = other.MaxProcessImageFps;
      }
      if (other.QueryTfIntervalSeconds != 0D) {
        QueryTfIntervalSeconds = other.QueryTfIntervalSeconds;
      }
      if (other.ValidHdmapInterval != 0D) {
        ValidHdmapInterval = other.ValidHdmapInterval;
      }
      if (other.ImageSysTsDiffThreshold != 0D) {
        ImageSysTsDiffThreshold = other.ImageSysTsDiffThreshold;
      }
      if (other.SyncIntervalSeconds != 0D) {
        SyncIntervalSeconds = other.SyncIntervalSeconds;
      }
      if (other.CameraTrafficLightPerceptionConfDir.Length != 0) {
        CameraTrafficLightPerceptionConfDir = other.CameraTrafficLightPerceptionConfDir;
      }
      if (other.CameraTrafficLightPerceptionConfFile.Length != 0) {
        CameraTrafficLightPerceptionConfFile = other.CameraTrafficLightPerceptionConfFile;
      }
      if (other.DefaultImageBorderSize != 0) {
        DefaultImageBorderSize = other.DefaultImageBorderSize;
      }
      if (other.TrafficLightOutputChannelName.Length != 0) {
        TrafficLightOutputChannelName = other.TrafficLightOutputChannelName;
      }
      if (other.SimulationChannelName.Length != 0) {
        SimulationChannelName = other.SimulationChannelName;
      }
      if (other.V2XTrafficlightsInputChannelName.Length != 0) {
        V2XTrafficlightsInputChannelName = other.V2XTrafficlightsInputChannelName;
      }
      if (other.V2XSyncIntervalSeconds != 0D) {
        V2XSyncIntervalSeconds = other.V2XSyncIntervalSeconds;
      }
      if (other.MaxV2XMsgBuffSize != 0) {
        MaxV2XMsgBuffSize = other.MaxV2XMsgBuffSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TlTf2FrameId = input.ReadString();
            break;
          }
          case 18: {
            TlTf2ChildFrameId = input.ReadString();
            break;
          }
          case 25: {
            Tf2TimeoutSecond = input.ReadDouble();
            break;
          }
          case 34: {
            CameraNames = input.ReadString();
            break;
          }
          case 42: {
            CameraChannelNames = input.ReadString();
            break;
          }
          case 49: {
            TlImageTimestampOffset = input.ReadDouble();
            break;
          }
          case 56: {
            MaxProcessImageFps = input.ReadInt32();
            break;
          }
          case 65: {
            QueryTfIntervalSeconds = input.ReadDouble();
            break;
          }
          case 73: {
            ValidHdmapInterval = input.ReadDouble();
            break;
          }
          case 81: {
            ImageSysTsDiffThreshold = input.ReadDouble();
            break;
          }
          case 89: {
            SyncIntervalSeconds = input.ReadDouble();
            break;
          }
          case 98: {
            CameraTrafficLightPerceptionConfDir = input.ReadString();
            break;
          }
          case 106: {
            CameraTrafficLightPerceptionConfFile = input.ReadString();
            break;
          }
          case 112: {
            DefaultImageBorderSize = input.ReadInt32();
            break;
          }
          case 122: {
            TrafficLightOutputChannelName = input.ReadString();
            break;
          }
          case 130: {
            SimulationChannelName = input.ReadString();
            break;
          }
          case 138: {
            V2XTrafficlightsInputChannelName = input.ReadString();
            break;
          }
          case 145: {
            V2XSyncIntervalSeconds = input.ReadDouble();
            break;
          }
          case 152: {
            MaxV2XMsgBuffSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
