// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/fusion_camera_detection_component.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Onboard {

  /// <summary>Holder for reflection information generated from modules/perception/onboard/proto/fusion_camera_detection_component.proto</summary>
  public static partial class FusionCameraDetectionComponentReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/onboard/proto/fusion_camera_detection_component.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FusionCameraDetectionComponentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ckhtb2R1bGVzL3BlcmNlcHRpb24vb25ib2FyZC9wcm90by9mdXNpb25fY2Ft",
            "ZXJhX2RldGVjdGlvbl9jb21wb25lbnQucHJvdG8SGWFwb2xsby5wZXJjZXB0",
            "aW9uLm9uYm9hcmQi4AUKFUZ1c2lvbkNhbWVyYURldGVjdGlvbhIUCgxjYW1l",
            "cmFfbmFtZXMYASABKAkSIgoaaW5wdXRfY2FtZXJhX2NoYW5uZWxfbmFtZXMY",
            "AiABKAkSGAoQdGltZXN0YW1wX29mZnNldBgDIAEoARIrCiNjYW1lcmFfb2Jz",
            "dGFjbGVfcGVyY2VwdGlvbl9jb25mX2RpchgEIAEoCRIsCiRjYW1lcmFfb2Jz",
            "dGFjbGVfcGVyY2VwdGlvbl9jb25mX2ZpbGUYBSABKAkSFgoOZnJhbWVfY2Fw",
            "YWNpdHkYBiABKAUSGQoRaW1hZ2VfY2hhbm5lbF9udW0YByABKAUSGwoTZW5h",
            "YmxlX3VuZGlzdG9ydGlvbhgIIAEoCBIcChRlbmFibGVfdmlzdWFsaXphdGlv",
            "bhgJIAEoCBIlCh1vdXRwdXRfb2JzdGFjbGVzX2NoYW5uZWxfbmFtZRgKIAEo",
            "CRIyCipjYW1lcmFfcGVyY2VwdGlvbl92aXpfbWVzc2FnZV9jaGFubmVsX25h",
            "bWUYCyABKAkSHQoVcHJlZnVzZWRfY2hhbm5lbF9uYW1lGAwgASgJEhwKFGRl",
            "ZmF1bHRfY2FtZXJhX3BpdGNoGA0gASgBEh0KFWRlZmF1bHRfY2FtZXJhX2hl",
            "aWdodBgOIAEoARIsCiRsYW5lX2NhbGlicmF0aW9uX3dvcmtpbmdfc2Vuc29y",
            "X25hbWUYDyABKAkSGQoRY2FsaWJyYXRvcl9tZXRob2QYECABKAkSGgoSY2Fs",
            "aWJfc2VydmljZV9uYW1lGBEgASgJEhkKEXJ1bl9jYWxpYl9zZXJ2aWNlGBIg",
            "ASgIEh8KF291dHB1dF9jYW1lcmFfZGVidWdfbXNnGBMgASgIEiEKGWNhbWVy",
            "YV9kZWJ1Z19jaGFubmVsX25hbWUYFCABKAkSDwoHdHNfZGlmZhgVIAEoARIe",
            "ChZvdXRwdXRfZmluYWxfb2JzdGFjbGVzGBYgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Onboard.FusionCameraDetection), global::Apollo.Perception.Onboard.FusionCameraDetection.Parser, new[]{ "CameraNames", "InputCameraChannelNames", "TimestampOffset", "CameraObstaclePerceptionConfDir", "CameraObstaclePerceptionConfFile", "FrameCapacity", "ImageChannelNum", "EnableUndistortion", "EnableVisualization", "OutputObstaclesChannelName", "CameraPerceptionVizMessageChannelName", "PrefusedChannelName", "DefaultCameraPitch", "DefaultCameraHeight", "LaneCalibrationWorkingSensorName", "CalibratorMethod", "CalibServiceName", "RunCalibService", "OutputCameraDebugMsg", "CameraDebugChannelName", "TsDiff", "OutputFinalObstacles" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FusionCameraDetection : pb::IMessage<FusionCameraDetection> {
    private static readonly pb::MessageParser<FusionCameraDetection> _parser = new pb::MessageParser<FusionCameraDetection>(() => new FusionCameraDetection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FusionCameraDetection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Onboard.FusionCameraDetectionComponentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionCameraDetection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionCameraDetection(FusionCameraDetection other) : this() {
      cameraNames_ = other.cameraNames_;
      inputCameraChannelNames_ = other.inputCameraChannelNames_;
      timestampOffset_ = other.timestampOffset_;
      cameraObstaclePerceptionConfDir_ = other.cameraObstaclePerceptionConfDir_;
      cameraObstaclePerceptionConfFile_ = other.cameraObstaclePerceptionConfFile_;
      frameCapacity_ = other.frameCapacity_;
      imageChannelNum_ = other.imageChannelNum_;
      enableUndistortion_ = other.enableUndistortion_;
      enableVisualization_ = other.enableVisualization_;
      outputObstaclesChannelName_ = other.outputObstaclesChannelName_;
      cameraPerceptionVizMessageChannelName_ = other.cameraPerceptionVizMessageChannelName_;
      prefusedChannelName_ = other.prefusedChannelName_;
      defaultCameraPitch_ = other.defaultCameraPitch_;
      defaultCameraHeight_ = other.defaultCameraHeight_;
      laneCalibrationWorkingSensorName_ = other.laneCalibrationWorkingSensorName_;
      calibratorMethod_ = other.calibratorMethod_;
      calibServiceName_ = other.calibServiceName_;
      runCalibService_ = other.runCalibService_;
      outputCameraDebugMsg_ = other.outputCameraDebugMsg_;
      cameraDebugChannelName_ = other.cameraDebugChannelName_;
      tsDiff_ = other.tsDiff_;
      outputFinalObstacles_ = other.outputFinalObstacles_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionCameraDetection Clone() {
      return new FusionCameraDetection(this);
    }

    /// <summary>Field number for the "camera_names" field.</summary>
    public const int CameraNamesFieldNumber = 1;
    private string cameraNames_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraNames {
      get { return cameraNames_; }
      set {
        cameraNames_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_camera_channel_names" field.</summary>
    public const int InputCameraChannelNamesFieldNumber = 2;
    private string inputCameraChannelNames_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputCameraChannelNames {
      get { return inputCameraChannelNames_; }
      set {
        inputCameraChannelNames_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_offset" field.</summary>
    public const int TimestampOffsetFieldNumber = 3;
    private double timestampOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimestampOffset {
      get { return timestampOffset_; }
      set {
        timestampOffset_ = value;
      }
    }

    /// <summary>Field number for the "camera_obstacle_perception_conf_dir" field.</summary>
    public const int CameraObstaclePerceptionConfDirFieldNumber = 4;
    private string cameraObstaclePerceptionConfDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraObstaclePerceptionConfDir {
      get { return cameraObstaclePerceptionConfDir_; }
      set {
        cameraObstaclePerceptionConfDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camera_obstacle_perception_conf_file" field.</summary>
    public const int CameraObstaclePerceptionConfFileFieldNumber = 5;
    private string cameraObstaclePerceptionConfFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraObstaclePerceptionConfFile {
      get { return cameraObstaclePerceptionConfFile_; }
      set {
        cameraObstaclePerceptionConfFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame_capacity" field.</summary>
    public const int FrameCapacityFieldNumber = 6;
    private int frameCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameCapacity {
      get { return frameCapacity_; }
      set {
        frameCapacity_ = value;
      }
    }

    /// <summary>Field number for the "image_channel_num" field.</summary>
    public const int ImageChannelNumFieldNumber = 7;
    private int imageChannelNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageChannelNum {
      get { return imageChannelNum_; }
      set {
        imageChannelNum_ = value;
      }
    }

    /// <summary>Field number for the "enable_undistortion" field.</summary>
    public const int EnableUndistortionFieldNumber = 8;
    private bool enableUndistortion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableUndistortion {
      get { return enableUndistortion_; }
      set {
        enableUndistortion_ = value;
      }
    }

    /// <summary>Field number for the "enable_visualization" field.</summary>
    public const int EnableVisualizationFieldNumber = 9;
    private bool enableVisualization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableVisualization {
      get { return enableVisualization_; }
      set {
        enableVisualization_ = value;
      }
    }

    /// <summary>Field number for the "output_obstacles_channel_name" field.</summary>
    public const int OutputObstaclesChannelNameFieldNumber = 10;
    private string outputObstaclesChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputObstaclesChannelName {
      get { return outputObstaclesChannelName_; }
      set {
        outputObstaclesChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camera_perception_viz_message_channel_name" field.</summary>
    public const int CameraPerceptionVizMessageChannelNameFieldNumber = 11;
    private string cameraPerceptionVizMessageChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraPerceptionVizMessageChannelName {
      get { return cameraPerceptionVizMessageChannelName_; }
      set {
        cameraPerceptionVizMessageChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefused_channel_name" field.</summary>
    public const int PrefusedChannelNameFieldNumber = 12;
    private string prefusedChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefusedChannelName {
      get { return prefusedChannelName_; }
      set {
        prefusedChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_camera_pitch" field.</summary>
    public const int DefaultCameraPitchFieldNumber = 13;
    private double defaultCameraPitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DefaultCameraPitch {
      get { return defaultCameraPitch_; }
      set {
        defaultCameraPitch_ = value;
      }
    }

    /// <summary>Field number for the "default_camera_height" field.</summary>
    public const int DefaultCameraHeightFieldNumber = 14;
    private double defaultCameraHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DefaultCameraHeight {
      get { return defaultCameraHeight_; }
      set {
        defaultCameraHeight_ = value;
      }
    }

    /// <summary>Field number for the "lane_calibration_working_sensor_name" field.</summary>
    public const int LaneCalibrationWorkingSensorNameFieldNumber = 15;
    private string laneCalibrationWorkingSensorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneCalibrationWorkingSensorName {
      get { return laneCalibrationWorkingSensorName_; }
      set {
        laneCalibrationWorkingSensorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calibrator_method" field.</summary>
    public const int CalibratorMethodFieldNumber = 16;
    private string calibratorMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalibratorMethod {
      get { return calibratorMethod_; }
      set {
        calibratorMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calib_service_name" field.</summary>
    public const int CalibServiceNameFieldNumber = 17;
    private string calibServiceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalibServiceName {
      get { return calibServiceName_; }
      set {
        calibServiceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_calib_service" field.</summary>
    public const int RunCalibServiceFieldNumber = 18;
    private bool runCalibService_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RunCalibService {
      get { return runCalibService_; }
      set {
        runCalibService_ = value;
      }
    }

    /// <summary>Field number for the "output_camera_debug_msg" field.</summary>
    public const int OutputCameraDebugMsgFieldNumber = 19;
    private bool outputCameraDebugMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputCameraDebugMsg {
      get { return outputCameraDebugMsg_; }
      set {
        outputCameraDebugMsg_ = value;
      }
    }

    /// <summary>Field number for the "camera_debug_channel_name" field.</summary>
    public const int CameraDebugChannelNameFieldNumber = 20;
    private string cameraDebugChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraDebugChannelName {
      get { return cameraDebugChannelName_; }
      set {
        cameraDebugChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts_diff" field.</summary>
    public const int TsDiffFieldNumber = 21;
    private double tsDiff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TsDiff {
      get { return tsDiff_; }
      set {
        tsDiff_ = value;
      }
    }

    /// <summary>Field number for the "output_final_obstacles" field.</summary>
    public const int OutputFinalObstaclesFieldNumber = 22;
    private bool outputFinalObstacles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutputFinalObstacles {
      get { return outputFinalObstacles_; }
      set {
        outputFinalObstacles_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FusionCameraDetection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FusionCameraDetection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CameraNames != other.CameraNames) return false;
      if (InputCameraChannelNames != other.InputCameraChannelNames) return false;
      if (TimestampOffset != other.TimestampOffset) return false;
      if (CameraObstaclePerceptionConfDir != other.CameraObstaclePerceptionConfDir) return false;
      if (CameraObstaclePerceptionConfFile != other.CameraObstaclePerceptionConfFile) return false;
      if (FrameCapacity != other.FrameCapacity) return false;
      if (ImageChannelNum != other.ImageChannelNum) return false;
      if (EnableUndistortion != other.EnableUndistortion) return false;
      if (EnableVisualization != other.EnableVisualization) return false;
      if (OutputObstaclesChannelName != other.OutputObstaclesChannelName) return false;
      if (CameraPerceptionVizMessageChannelName != other.CameraPerceptionVizMessageChannelName) return false;
      if (PrefusedChannelName != other.PrefusedChannelName) return false;
      if (DefaultCameraPitch != other.DefaultCameraPitch) return false;
      if (DefaultCameraHeight != other.DefaultCameraHeight) return false;
      if (LaneCalibrationWorkingSensorName != other.LaneCalibrationWorkingSensorName) return false;
      if (CalibratorMethod != other.CalibratorMethod) return false;
      if (CalibServiceName != other.CalibServiceName) return false;
      if (RunCalibService != other.RunCalibService) return false;
      if (OutputCameraDebugMsg != other.OutputCameraDebugMsg) return false;
      if (CameraDebugChannelName != other.CameraDebugChannelName) return false;
      if (TsDiff != other.TsDiff) return false;
      if (OutputFinalObstacles != other.OutputFinalObstacles) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CameraNames.Length != 0) hash ^= CameraNames.GetHashCode();
      if (InputCameraChannelNames.Length != 0) hash ^= InputCameraChannelNames.GetHashCode();
      if (TimestampOffset != 0D) hash ^= TimestampOffset.GetHashCode();
      if (CameraObstaclePerceptionConfDir.Length != 0) hash ^= CameraObstaclePerceptionConfDir.GetHashCode();
      if (CameraObstaclePerceptionConfFile.Length != 0) hash ^= CameraObstaclePerceptionConfFile.GetHashCode();
      if (FrameCapacity != 0) hash ^= FrameCapacity.GetHashCode();
      if (ImageChannelNum != 0) hash ^= ImageChannelNum.GetHashCode();
      if (EnableUndistortion != false) hash ^= EnableUndistortion.GetHashCode();
      if (EnableVisualization != false) hash ^= EnableVisualization.GetHashCode();
      if (OutputObstaclesChannelName.Length != 0) hash ^= OutputObstaclesChannelName.GetHashCode();
      if (CameraPerceptionVizMessageChannelName.Length != 0) hash ^= CameraPerceptionVizMessageChannelName.GetHashCode();
      if (PrefusedChannelName.Length != 0) hash ^= PrefusedChannelName.GetHashCode();
      if (DefaultCameraPitch != 0D) hash ^= DefaultCameraPitch.GetHashCode();
      if (DefaultCameraHeight != 0D) hash ^= DefaultCameraHeight.GetHashCode();
      if (LaneCalibrationWorkingSensorName.Length != 0) hash ^= LaneCalibrationWorkingSensorName.GetHashCode();
      if (CalibratorMethod.Length != 0) hash ^= CalibratorMethod.GetHashCode();
      if (CalibServiceName.Length != 0) hash ^= CalibServiceName.GetHashCode();
      if (RunCalibService != false) hash ^= RunCalibService.GetHashCode();
      if (OutputCameraDebugMsg != false) hash ^= OutputCameraDebugMsg.GetHashCode();
      if (CameraDebugChannelName.Length != 0) hash ^= CameraDebugChannelName.GetHashCode();
      if (TsDiff != 0D) hash ^= TsDiff.GetHashCode();
      if (OutputFinalObstacles != false) hash ^= OutputFinalObstacles.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CameraNames.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CameraNames);
      }
      if (InputCameraChannelNames.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InputCameraChannelNames);
      }
      if (TimestampOffset != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TimestampOffset);
      }
      if (CameraObstaclePerceptionConfDir.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CameraObstaclePerceptionConfDir);
      }
      if (CameraObstaclePerceptionConfFile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CameraObstaclePerceptionConfFile);
      }
      if (FrameCapacity != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FrameCapacity);
      }
      if (ImageChannelNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImageChannelNum);
      }
      if (EnableUndistortion != false) {
        output.WriteRawTag(64);
        output.WriteBool(EnableUndistortion);
      }
      if (EnableVisualization != false) {
        output.WriteRawTag(72);
        output.WriteBool(EnableVisualization);
      }
      if (OutputObstaclesChannelName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OutputObstaclesChannelName);
      }
      if (CameraPerceptionVizMessageChannelName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CameraPerceptionVizMessageChannelName);
      }
      if (PrefusedChannelName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PrefusedChannelName);
      }
      if (DefaultCameraPitch != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(DefaultCameraPitch);
      }
      if (DefaultCameraHeight != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(DefaultCameraHeight);
      }
      if (LaneCalibrationWorkingSensorName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(LaneCalibrationWorkingSensorName);
      }
      if (CalibratorMethod.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CalibratorMethod);
      }
      if (CalibServiceName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CalibServiceName);
      }
      if (RunCalibService != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(RunCalibService);
      }
      if (OutputCameraDebugMsg != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(OutputCameraDebugMsg);
      }
      if (CameraDebugChannelName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CameraDebugChannelName);
      }
      if (TsDiff != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(TsDiff);
      }
      if (OutputFinalObstacles != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(OutputFinalObstacles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CameraNames.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraNames);
      }
      if (InputCameraChannelNames.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputCameraChannelNames);
      }
      if (TimestampOffset != 0D) {
        size += 1 + 8;
      }
      if (CameraObstaclePerceptionConfDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraObstaclePerceptionConfDir);
      }
      if (CameraObstaclePerceptionConfFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraObstaclePerceptionConfFile);
      }
      if (FrameCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameCapacity);
      }
      if (ImageChannelNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageChannelNum);
      }
      if (EnableUndistortion != false) {
        size += 1 + 1;
      }
      if (EnableVisualization != false) {
        size += 1 + 1;
      }
      if (OutputObstaclesChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputObstaclesChannelName);
      }
      if (CameraPerceptionVizMessageChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraPerceptionVizMessageChannelName);
      }
      if (PrefusedChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefusedChannelName);
      }
      if (DefaultCameraPitch != 0D) {
        size += 1 + 8;
      }
      if (DefaultCameraHeight != 0D) {
        size += 1 + 8;
      }
      if (LaneCalibrationWorkingSensorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneCalibrationWorkingSensorName);
      }
      if (CalibratorMethod.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalibratorMethod);
      }
      if (CalibServiceName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalibServiceName);
      }
      if (RunCalibService != false) {
        size += 2 + 1;
      }
      if (OutputCameraDebugMsg != false) {
        size += 2 + 1;
      }
      if (CameraDebugChannelName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CameraDebugChannelName);
      }
      if (TsDiff != 0D) {
        size += 2 + 8;
      }
      if (OutputFinalObstacles != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FusionCameraDetection other) {
      if (other == null) {
        return;
      }
      if (other.CameraNames.Length != 0) {
        CameraNames = other.CameraNames;
      }
      if (other.InputCameraChannelNames.Length != 0) {
        InputCameraChannelNames = other.InputCameraChannelNames;
      }
      if (other.TimestampOffset != 0D) {
        TimestampOffset = other.TimestampOffset;
      }
      if (other.CameraObstaclePerceptionConfDir.Length != 0) {
        CameraObstaclePerceptionConfDir = other.CameraObstaclePerceptionConfDir;
      }
      if (other.CameraObstaclePerceptionConfFile.Length != 0) {
        CameraObstaclePerceptionConfFile = other.CameraObstaclePerceptionConfFile;
      }
      if (other.FrameCapacity != 0) {
        FrameCapacity = other.FrameCapacity;
      }
      if (other.ImageChannelNum != 0) {
        ImageChannelNum = other.ImageChannelNum;
      }
      if (other.EnableUndistortion != false) {
        EnableUndistortion = other.EnableUndistortion;
      }
      if (other.EnableVisualization != false) {
        EnableVisualization = other.EnableVisualization;
      }
      if (other.OutputObstaclesChannelName.Length != 0) {
        OutputObstaclesChannelName = other.OutputObstaclesChannelName;
      }
      if (other.CameraPerceptionVizMessageChannelName.Length != 0) {
        CameraPerceptionVizMessageChannelName = other.CameraPerceptionVizMessageChannelName;
      }
      if (other.PrefusedChannelName.Length != 0) {
        PrefusedChannelName = other.PrefusedChannelName;
      }
      if (other.DefaultCameraPitch != 0D) {
        DefaultCameraPitch = other.DefaultCameraPitch;
      }
      if (other.DefaultCameraHeight != 0D) {
        DefaultCameraHeight = other.DefaultCameraHeight;
      }
      if (other.LaneCalibrationWorkingSensorName.Length != 0) {
        LaneCalibrationWorkingSensorName = other.LaneCalibrationWorkingSensorName;
      }
      if (other.CalibratorMethod.Length != 0) {
        CalibratorMethod = other.CalibratorMethod;
      }
      if (other.CalibServiceName.Length != 0) {
        CalibServiceName = other.CalibServiceName;
      }
      if (other.RunCalibService != false) {
        RunCalibService = other.RunCalibService;
      }
      if (other.OutputCameraDebugMsg != false) {
        OutputCameraDebugMsg = other.OutputCameraDebugMsg;
      }
      if (other.CameraDebugChannelName.Length != 0) {
        CameraDebugChannelName = other.CameraDebugChannelName;
      }
      if (other.TsDiff != 0D) {
        TsDiff = other.TsDiff;
      }
      if (other.OutputFinalObstacles != false) {
        OutputFinalObstacles = other.OutputFinalObstacles;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CameraNames = input.ReadString();
            break;
          }
          case 18: {
            InputCameraChannelNames = input.ReadString();
            break;
          }
          case 25: {
            TimestampOffset = input.ReadDouble();
            break;
          }
          case 34: {
            CameraObstaclePerceptionConfDir = input.ReadString();
            break;
          }
          case 42: {
            CameraObstaclePerceptionConfFile = input.ReadString();
            break;
          }
          case 48: {
            FrameCapacity = input.ReadInt32();
            break;
          }
          case 56: {
            ImageChannelNum = input.ReadInt32();
            break;
          }
          case 64: {
            EnableUndistortion = input.ReadBool();
            break;
          }
          case 72: {
            EnableVisualization = input.ReadBool();
            break;
          }
          case 82: {
            OutputObstaclesChannelName = input.ReadString();
            break;
          }
          case 90: {
            CameraPerceptionVizMessageChannelName = input.ReadString();
            break;
          }
          case 98: {
            PrefusedChannelName = input.ReadString();
            break;
          }
          case 105: {
            DefaultCameraPitch = input.ReadDouble();
            break;
          }
          case 113: {
            DefaultCameraHeight = input.ReadDouble();
            break;
          }
          case 122: {
            LaneCalibrationWorkingSensorName = input.ReadString();
            break;
          }
          case 130: {
            CalibratorMethod = input.ReadString();
            break;
          }
          case 138: {
            CalibServiceName = input.ReadString();
            break;
          }
          case 144: {
            RunCalibService = input.ReadBool();
            break;
          }
          case 152: {
            OutputCameraDebugMsg = input.ReadBool();
            break;
          }
          case 162: {
            CameraDebugChannelName = input.ReadString();
            break;
          }
          case 169: {
            TsDiff = input.ReadDouble();
            break;
          }
          case 176: {
            OutputFinalObstacles = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
