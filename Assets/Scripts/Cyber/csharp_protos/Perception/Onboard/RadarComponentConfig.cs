// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/radar_component_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Onboard {

  /// <summary>Holder for reflection information generated from modules/perception/onboard/proto/radar_component_config.proto</summary>
  public static partial class RadarComponentConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/onboard/proto/radar_component_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RadarComponentConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj1tb2R1bGVzL3BlcmNlcHRpb24vb25ib2FyZC9wcm90by9yYWRhcl9jb21w",
            "b25lbnRfY29uZmlnLnByb3RvEhlhcG9sbG8ucGVyY2VwdGlvbi5vbmJvYXJk",
            "IoICChRSYWRhckNvbXBvbmVudENvbmZpZxISCgpyYWRhcl9uYW1lGAEgASgJ",
            "EhkKEXRmX2NoaWxkX2ZyYW1lX2lkGAIgASgJEh4KFnJhZGFyX2ZvcndhcmRf",
            "ZGlzdGFuY2UYAyABKAESIQoZcmFkYXJfcHJlcHJvY2Vzc29yX21ldGhvZBgE",
            "IAEoCRIfChdyYWRhcl9wZXJjZXB0aW9uX21ldGhvZBgFIAEoCRIbChNyYWRh",
            "cl9waXBlbGluZV9uYW1lGAYgASgJEh0KFW9kb21ldHJ5X2NoYW5uZWxfbmFt",
            "ZRgHIAEoCRIbChNvdXRwdXRfY2hhbm5lbF9uYW1lGAggASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Onboard.RadarComponentConfig), global::Apollo.Perception.Onboard.RadarComponentConfig.Parser, new[]{ "RadarName", "TfChildFrameId", "RadarForwardDistance", "RadarPreprocessorMethod", "RadarPerceptionMethod", "RadarPipelineName", "OdometryChannelName", "OutputChannelName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RadarComponentConfig : pb::IMessage<RadarComponentConfig> {
    private static readonly pb::MessageParser<RadarComponentConfig> _parser = new pb::MessageParser<RadarComponentConfig>(() => new RadarComponentConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RadarComponentConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Onboard.RadarComponentConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarComponentConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarComponentConfig(RadarComponentConfig other) : this() {
      radarName_ = other.radarName_;
      tfChildFrameId_ = other.tfChildFrameId_;
      radarForwardDistance_ = other.radarForwardDistance_;
      radarPreprocessorMethod_ = other.radarPreprocessorMethod_;
      radarPerceptionMethod_ = other.radarPerceptionMethod_;
      radarPipelineName_ = other.radarPipelineName_;
      odometryChannelName_ = other.odometryChannelName_;
      outputChannelName_ = other.outputChannelName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarComponentConfig Clone() {
      return new RadarComponentConfig(this);
    }

    /// <summary>Field number for the "radar_name" field.</summary>
    public const int RadarNameFieldNumber = 1;
    private string radarName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadarName {
      get { return radarName_; }
      set {
        radarName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tf_child_frame_id" field.</summary>
    public const int TfChildFrameIdFieldNumber = 2;
    private string tfChildFrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TfChildFrameId {
      get { return tfChildFrameId_; }
      set {
        tfChildFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "radar_forward_distance" field.</summary>
    public const int RadarForwardDistanceFieldNumber = 3;
    private double radarForwardDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RadarForwardDistance {
      get { return radarForwardDistance_; }
      set {
        radarForwardDistance_ = value;
      }
    }

    /// <summary>Field number for the "radar_preprocessor_method" field.</summary>
    public const int RadarPreprocessorMethodFieldNumber = 4;
    private string radarPreprocessorMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadarPreprocessorMethod {
      get { return radarPreprocessorMethod_; }
      set {
        radarPreprocessorMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "radar_perception_method" field.</summary>
    public const int RadarPerceptionMethodFieldNumber = 5;
    private string radarPerceptionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadarPerceptionMethod {
      get { return radarPerceptionMethod_; }
      set {
        radarPerceptionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "radar_pipeline_name" field.</summary>
    public const int RadarPipelineNameFieldNumber = 6;
    private string radarPipelineName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadarPipelineName {
      get { return radarPipelineName_; }
      set {
        radarPipelineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "odometry_channel_name" field.</summary>
    public const int OdometryChannelNameFieldNumber = 7;
    private string odometryChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OdometryChannelName {
      get { return odometryChannelName_; }
      set {
        odometryChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_channel_name" field.</summary>
    public const int OutputChannelNameFieldNumber = 8;
    private string outputChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputChannelName {
      get { return outputChannelName_; }
      set {
        outputChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RadarComponentConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RadarComponentConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RadarName != other.RadarName) return false;
      if (TfChildFrameId != other.TfChildFrameId) return false;
      if (RadarForwardDistance != other.RadarForwardDistance) return false;
      if (RadarPreprocessorMethod != other.RadarPreprocessorMethod) return false;
      if (RadarPerceptionMethod != other.RadarPerceptionMethod) return false;
      if (RadarPipelineName != other.RadarPipelineName) return false;
      if (OdometryChannelName != other.OdometryChannelName) return false;
      if (OutputChannelName != other.OutputChannelName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RadarName.Length != 0) hash ^= RadarName.GetHashCode();
      if (TfChildFrameId.Length != 0) hash ^= TfChildFrameId.GetHashCode();
      if (RadarForwardDistance != 0D) hash ^= RadarForwardDistance.GetHashCode();
      if (RadarPreprocessorMethod.Length != 0) hash ^= RadarPreprocessorMethod.GetHashCode();
      if (RadarPerceptionMethod.Length != 0) hash ^= RadarPerceptionMethod.GetHashCode();
      if (RadarPipelineName.Length != 0) hash ^= RadarPipelineName.GetHashCode();
      if (OdometryChannelName.Length != 0) hash ^= OdometryChannelName.GetHashCode();
      if (OutputChannelName.Length != 0) hash ^= OutputChannelName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RadarName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RadarName);
      }
      if (TfChildFrameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TfChildFrameId);
      }
      if (RadarForwardDistance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RadarForwardDistance);
      }
      if (RadarPreprocessorMethod.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RadarPreprocessorMethod);
      }
      if (RadarPerceptionMethod.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RadarPerceptionMethod);
      }
      if (RadarPipelineName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RadarPipelineName);
      }
      if (OdometryChannelName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OdometryChannelName);
      }
      if (OutputChannelName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OutputChannelName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RadarName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RadarName);
      }
      if (TfChildFrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TfChildFrameId);
      }
      if (RadarForwardDistance != 0D) {
        size += 1 + 8;
      }
      if (RadarPreprocessorMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RadarPreprocessorMethod);
      }
      if (RadarPerceptionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RadarPerceptionMethod);
      }
      if (RadarPipelineName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RadarPipelineName);
      }
      if (OdometryChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OdometryChannelName);
      }
      if (OutputChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputChannelName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RadarComponentConfig other) {
      if (other == null) {
        return;
      }
      if (other.RadarName.Length != 0) {
        RadarName = other.RadarName;
      }
      if (other.TfChildFrameId.Length != 0) {
        TfChildFrameId = other.TfChildFrameId;
      }
      if (other.RadarForwardDistance != 0D) {
        RadarForwardDistance = other.RadarForwardDistance;
      }
      if (other.RadarPreprocessorMethod.Length != 0) {
        RadarPreprocessorMethod = other.RadarPreprocessorMethod;
      }
      if (other.RadarPerceptionMethod.Length != 0) {
        RadarPerceptionMethod = other.RadarPerceptionMethod;
      }
      if (other.RadarPipelineName.Length != 0) {
        RadarPipelineName = other.RadarPipelineName;
      }
      if (other.OdometryChannelName.Length != 0) {
        OdometryChannelName = other.OdometryChannelName;
      }
      if (other.OutputChannelName.Length != 0) {
        OutputChannelName = other.OutputChannelName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RadarName = input.ReadString();
            break;
          }
          case 18: {
            TfChildFrameId = input.ReadString();
            break;
          }
          case 25: {
            RadarForwardDistance = input.ReadDouble();
            break;
          }
          case 34: {
            RadarPreprocessorMethod = input.ReadString();
            break;
          }
          case 42: {
            RadarPerceptionMethod = input.ReadString();
            break;
          }
          case 50: {
            RadarPipelineName = input.ReadString();
            break;
          }
          case 58: {
            OdometryChannelName = input.ReadString();
            break;
          }
          case 66: {
            OutputChannelName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
