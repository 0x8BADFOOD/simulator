// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/obstacle/detector/yolo/proto/yolo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Camera.Yolo {

  /// <summary>Holder for reflection information generated from modules/perception/camera/lib/obstacle/detector/yolo/proto/yolo.proto</summary>
  public static partial class YoloReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/camera/lib/obstacle/detector/yolo/proto/yolo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YoloReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkVtb2R1bGVzL3BlcmNlcHRpb24vY2FtZXJhL2xpYi9vYnN0YWNsZS9kZXRl",
            "Y3Rvci95b2xvL3Byb3RvL3lvbG8ucHJvdG8SHWFwb2xsby5wZXJjZXB0aW9u",
            "LmNhbWVyYS55b2xvIscBCglZb2xvUGFyYW0SPgoLbW9kZWxfcGFyYW0YASAB",
            "KAsyKS5hcG9sbG8ucGVyY2VwdGlvbi5jYW1lcmEueW9sby5Nb2RlbFBhcmFt",
            "Ej4KCW5ldF9wYXJhbRgCIAEoCzIrLmFwb2xsby5wZXJjZXB0aW9uLmNhbWVy",
            "YS55b2xvLk5ldHdvcmtQYXJhbRI6CglubXNfcGFyYW0YAyABKAsyJy5hcG9s",
            "bG8ucGVyY2VwdGlvbi5jYW1lcmEueW9sby5OTVNQYXJhbSLGBwoKTW9kZWxQ",
            "YXJhbRISCgptb2RlbF9uYW1lGAEgASgJEhIKCnByb3RvX2ZpbGUYAiABKAkS",
            "EwoLd2VpZ2h0X2ZpbGUYAyABKAkSEQoJc3RhZ2UxX3B0GBUgASgJEhEKCXN0",
            "YWdlMV9tZBgWIAEoCRIRCglzdGFnZTJfcHQYFyABKAkSEQoJc3RhZ2UyX21k",
            "GBggASgJEhQKDGFuY2hvcnNfZmlsZRgEIAEoCRISCgp0eXBlc19maWxlGAUg",
            "ASgJEhQKDGZlYXR1cmVfZmlsZRgGIAEoCRIUCgxvZmZzZXRfcmF0aW8YByAB",
            "KAISFQoNY3JvcHBlZF9yYXRpbxgNIAEoAhIVCg1yZXNpemVkX3dpZHRoGA4g",
            "ASgFEhUKDWFsaWduZWRfcGl4ZWwYDyABKAUSHAoUY29uZmlkZW5jZV90aHJl",
            "c2hvbGQYCCABKAISIAoYbGlnaHRfdmlzX2NvbmZfdGhyZXNob2xkGCEgASgC",
            "EiAKGGxpZ2h0X3N3dF9jb25mX3RocmVzaG9sZBgiIAEoAhIaChJyb2lfY29u",
            "Zl90aHJlc2hvbGQYGSABKAISGgoSYm94X2NvbmZfdGhyZXNob2xkGBogASgC",
            "EhwKFHN0YWdlMl9ubXNfdGhyZXNob2xkGBsgASgCEhUKDW1pbl8yZF9oZWln",
            "aHQYCSABKAISFQoNbWluXzNkX2hlaWdodBgeIAEoAhIUCgxtaW5fM2Rfd2lk",
            "dGgYHyABKAISFQoNbWluXzNkX2xlbmd0aBggIAEoAhIbChNjYWxpYnJhdGV0",
            "YWJsZV9yb290GAsgASgJEhIKCm1vZGVsX3R5cGUYDCABKAkSEQoJb3JpX2N5",
            "Y2xlGBAgASgFEhMKC3Blcl9jbHNfcmVnGBEgASgIElAKFGRpbWVuc2lvbl9z",
            "dGF0aXN0aWNzGBIgAygLMjIuYXBvbGxvLnBlcmNlcHRpb24uY2FtZXJhLnlv",
            "bG8uRGltZW5zaW9uU3RhdGlzdGljcxJGCg9iYm94X3N0YXRpc3RpY3MYEyAD",
            "KAsyLS5hcG9sbG8ucGVyY2VwdGlvbi5jYW1lcmEueW9sby5CQm94U3RhdGlz",
            "dGljcxITCgtleHBhbmRfZmlsZRgUIAEoCRISCgp3aXRoX2JveDNkGCkgASgI",
            "EhIKCndpdGhfZnJib3gYKiABKAgSEwoLd2l0aF9saWdodHMYKyABKAgSEwoL",
            "d2l0aF9yYXRpb3MYLCABKAgSEQoJbnVtX2FyZWFzGC4gASgFEhQKDGJvcmRl",
            "cl9yYXRpbxgtIAEoAiKwAwoMTmV0d29ya1BhcmFtEhAKCGxvY19ibG9iGAEg",
            "ASgJEhAKCG9ial9ibG9iGAIgASgJEhAKCGNsc19ibG9iGAMgASgJEhAKCG9y",
            "aV9ibG9iGAQgASgJEhAKCGRpbV9ibG9iGAUgASgJEhAKCGxvZl9ibG9iGAYg",
            "ASgJEhAKCGxvcl9ibG9iGAcgASgJEhIKCmlucHV0X2Jsb2IYCCABKAkSEQoJ",
            "cm9pc19ibG9iGAogASgJEhEKCWZlYXRfYmxvYhgLIAEoCRIQCghib3hfYmxv",
            "YhgNIAEoCRIQCghpb3VfYmxvYhgOIAEoCRISCgpicnZpc19ibG9iGA8gASgJ",
            "EhIKCmJyc3d0X2Jsb2IYECABKAkSEgoKbHR2aXNfYmxvYhgRIAEoCRISCgps",
            "dHN3dF9ibG9iGBIgASgJEhIKCnJ0dmlzX2Jsb2IYEyABKAkSEgoKcnRzd3Rf",
            "YmxvYhgUIAEoCRIUCgxhcmVhX2lkX2Jsb2IYFyABKAkSGgoSdmlzaWJsZV9y",
            "YXRpb19ibG9iGBUgASgJEhoKEmN1dF9vZmZfcmF0aW9fYmxvYhgWIAEoCSJ3",
            "CghOTVNQYXJhbRIMCgR0eXBlGAEgASgJEhEKCXRocmVzaG9sZBgCIAEoAhIN",
            "CgVzaWdtYRgDIAEoAhIdChVpbnRlcl9jbHNfY29uZl90aHJlc2gYBCABKAIS",
            "HAoUaW50ZXJfY2xzX25tc190aHJlc2gYBSABKAIiKwoOQkJveFN0YXRpc3Rp",
            "Y3MSDAoEbWVhbhgBIAMoAhILCgNzdGQYAiADKAIicgoTRGltZW5zaW9uU3Rh",
            "dGlzdGljcxIOCgZtZWFuX2gYASABKAISDgoGbWVhbl93GAIgASgCEg4KBm1l",
            "YW5fbBgDIAEoAhINCgVzdGRfaBgEIAEoAhINCgVzdGRfdxgFIAEoAhINCgVz",
            "dGRfbBgGIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Yolo.YoloParam), global::Apollo.Perception.Camera.Yolo.YoloParam.Parser, new[]{ "ModelParam", "NetParam", "NmsParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Yolo.ModelParam), global::Apollo.Perception.Camera.Yolo.ModelParam.Parser, new[]{ "ModelName", "ProtoFile", "WeightFile", "Stage1Pt", "Stage1Md", "Stage2Pt", "Stage2Md", "AnchorsFile", "TypesFile", "FeatureFile", "OffsetRatio", "CroppedRatio", "ResizedWidth", "AlignedPixel", "ConfidenceThreshold", "LightVisConfThreshold", "LightSwtConfThreshold", "RoiConfThreshold", "BoxConfThreshold", "Stage2NmsThreshold", "Min2DHeight", "Min3DHeight", "Min3DWidth", "Min3DLength", "CalibratetableRoot", "ModelType", "OriCycle", "PerClsReg", "DimensionStatistics", "BboxStatistics", "ExpandFile", "WithBox3D", "WithFrbox", "WithLights", "WithRatios", "NumAreas", "BorderRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Yolo.NetworkParam), global::Apollo.Perception.Camera.Yolo.NetworkParam.Parser, new[]{ "LocBlob", "ObjBlob", "ClsBlob", "OriBlob", "DimBlob", "LofBlob", "LorBlob", "InputBlob", "RoisBlob", "FeatBlob", "BoxBlob", "IouBlob", "BrvisBlob", "BrswtBlob", "LtvisBlob", "LtswtBlob", "RtvisBlob", "RtswtBlob", "AreaIdBlob", "VisibleRatioBlob", "CutOffRatioBlob" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Yolo.NMSParam), global::Apollo.Perception.Camera.Yolo.NMSParam.Parser, new[]{ "Type", "Threshold", "Sigma", "InterClsConfThresh", "InterClsNmsThresh" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Yolo.BBoxStatistics), global::Apollo.Perception.Camera.Yolo.BBoxStatistics.Parser, new[]{ "Mean", "Std" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.Yolo.DimensionStatistics), global::Apollo.Perception.Camera.Yolo.DimensionStatistics.Parser, new[]{ "MeanH", "MeanW", "MeanL", "StdH", "StdW", "StdL" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class YoloParam : pb::IMessage<YoloParam> {
    private static readonly pb::MessageParser<YoloParam> _parser = new pb::MessageParser<YoloParam>(() => new YoloParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YoloParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Yolo.YoloReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloParam(YoloParam other) : this() {
      ModelParam = other.modelParam_ != null ? other.ModelParam.Clone() : null;
      NetParam = other.netParam_ != null ? other.NetParam.Clone() : null;
      NmsParam = other.nmsParam_ != null ? other.NmsParam.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YoloParam Clone() {
      return new YoloParam(this);
    }

    /// <summary>Field number for the "model_param" field.</summary>
    public const int ModelParamFieldNumber = 1;
    private global::Apollo.Perception.Camera.Yolo.ModelParam modelParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Yolo.ModelParam ModelParam {
      get { return modelParam_; }
      set {
        modelParam_ = value;
      }
    }

    /// <summary>Field number for the "net_param" field.</summary>
    public const int NetParamFieldNumber = 2;
    private global::Apollo.Perception.Camera.Yolo.NetworkParam netParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Yolo.NetworkParam NetParam {
      get { return netParam_; }
      set {
        netParam_ = value;
      }
    }

    /// <summary>Field number for the "nms_param" field.</summary>
    public const int NmsParamFieldNumber = 3;
    private global::Apollo.Perception.Camera.Yolo.NMSParam nmsParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.Yolo.NMSParam NmsParam {
      get { return nmsParam_; }
      set {
        nmsParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YoloParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YoloParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ModelParam, other.ModelParam)) return false;
      if (!object.Equals(NetParam, other.NetParam)) return false;
      if (!object.Equals(NmsParam, other.NmsParam)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (modelParam_ != null) hash ^= ModelParam.GetHashCode();
      if (netParam_ != null) hash ^= NetParam.GetHashCode();
      if (nmsParam_ != null) hash ^= NmsParam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (modelParam_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ModelParam);
      }
      if (netParam_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NetParam);
      }
      if (nmsParam_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NmsParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (modelParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelParam);
      }
      if (netParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetParam);
      }
      if (nmsParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NmsParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YoloParam other) {
      if (other == null) {
        return;
      }
      if (other.modelParam_ != null) {
        if (modelParam_ == null) {
          modelParam_ = new global::Apollo.Perception.Camera.Yolo.ModelParam();
        }
        ModelParam.MergeFrom(other.ModelParam);
      }
      if (other.netParam_ != null) {
        if (netParam_ == null) {
          netParam_ = new global::Apollo.Perception.Camera.Yolo.NetworkParam();
        }
        NetParam.MergeFrom(other.NetParam);
      }
      if (other.nmsParam_ != null) {
        if (nmsParam_ == null) {
          nmsParam_ = new global::Apollo.Perception.Camera.Yolo.NMSParam();
        }
        NmsParam.MergeFrom(other.NmsParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (modelParam_ == null) {
              modelParam_ = new global::Apollo.Perception.Camera.Yolo.ModelParam();
            }
            input.ReadMessage(modelParam_);
            break;
          }
          case 18: {
            if (netParam_ == null) {
              netParam_ = new global::Apollo.Perception.Camera.Yolo.NetworkParam();
            }
            input.ReadMessage(netParam_);
            break;
          }
          case 26: {
            if (nmsParam_ == null) {
              nmsParam_ = new global::Apollo.Perception.Camera.Yolo.NMSParam();
            }
            input.ReadMessage(nmsParam_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelParam : pb::IMessage<ModelParam> {
    private static readonly pb::MessageParser<ModelParam> _parser = new pb::MessageParser<ModelParam>(() => new ModelParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Yolo.YoloReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelParam(ModelParam other) : this() {
      modelName_ = other.modelName_;
      protoFile_ = other.protoFile_;
      weightFile_ = other.weightFile_;
      stage1Pt_ = other.stage1Pt_;
      stage1Md_ = other.stage1Md_;
      stage2Pt_ = other.stage2Pt_;
      stage2Md_ = other.stage2Md_;
      anchorsFile_ = other.anchorsFile_;
      typesFile_ = other.typesFile_;
      featureFile_ = other.featureFile_;
      offsetRatio_ = other.offsetRatio_;
      croppedRatio_ = other.croppedRatio_;
      resizedWidth_ = other.resizedWidth_;
      alignedPixel_ = other.alignedPixel_;
      confidenceThreshold_ = other.confidenceThreshold_;
      lightVisConfThreshold_ = other.lightVisConfThreshold_;
      lightSwtConfThreshold_ = other.lightSwtConfThreshold_;
      roiConfThreshold_ = other.roiConfThreshold_;
      boxConfThreshold_ = other.boxConfThreshold_;
      stage2NmsThreshold_ = other.stage2NmsThreshold_;
      min2DHeight_ = other.min2DHeight_;
      min3DHeight_ = other.min3DHeight_;
      min3DWidth_ = other.min3DWidth_;
      min3DLength_ = other.min3DLength_;
      calibratetableRoot_ = other.calibratetableRoot_;
      modelType_ = other.modelType_;
      oriCycle_ = other.oriCycle_;
      perClsReg_ = other.perClsReg_;
      dimensionStatistics_ = other.dimensionStatistics_.Clone();
      bboxStatistics_ = other.bboxStatistics_.Clone();
      expandFile_ = other.expandFile_;
      withBox3D_ = other.withBox3D_;
      withFrbox_ = other.withFrbox_;
      withLights_ = other.withLights_;
      withRatios_ = other.withRatios_;
      numAreas_ = other.numAreas_;
      borderRatio_ = other.borderRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelParam Clone() {
      return new ModelParam(this);
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 1;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_file" field.</summary>
    public const int ProtoFileFieldNumber = 2;
    private string protoFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtoFile {
      get { return protoFile_; }
      set {
        protoFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight_file" field.</summary>
    public const int WeightFileFieldNumber = 3;
    private string weightFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeightFile {
      get { return weightFile_; }
      set {
        weightFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stage1_pt" field.</summary>
    public const int Stage1PtFieldNumber = 21;
    private string stage1Pt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stage1Pt {
      get { return stage1Pt_; }
      set {
        stage1Pt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stage1_md" field.</summary>
    public const int Stage1MdFieldNumber = 22;
    private string stage1Md_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stage1Md {
      get { return stage1Md_; }
      set {
        stage1Md_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stage2_pt" field.</summary>
    public const int Stage2PtFieldNumber = 23;
    private string stage2Pt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stage2Pt {
      get { return stage2Pt_; }
      set {
        stage2Pt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stage2_md" field.</summary>
    public const int Stage2MdFieldNumber = 24;
    private string stage2Md_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stage2Md {
      get { return stage2Md_; }
      set {
        stage2Md_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anchors_file" field.</summary>
    public const int AnchorsFileFieldNumber = 4;
    private string anchorsFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnchorsFile {
      get { return anchorsFile_; }
      set {
        anchorsFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "types_file" field.</summary>
    public const int TypesFileFieldNumber = 5;
    private string typesFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypesFile {
      get { return typesFile_; }
      set {
        typesFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature_file" field.</summary>
    public const int FeatureFileFieldNumber = 6;
    private string featureFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureFile {
      get { return featureFile_; }
      set {
        featureFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset_ratio" field.</summary>
    public const int OffsetRatioFieldNumber = 7;
    private float offsetRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetRatio {
      get { return offsetRatio_; }
      set {
        offsetRatio_ = value;
      }
    }

    /// <summary>Field number for the "cropped_ratio" field.</summary>
    public const int CroppedRatioFieldNumber = 13;
    private float croppedRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CroppedRatio {
      get { return croppedRatio_; }
      set {
        croppedRatio_ = value;
      }
    }

    /// <summary>Field number for the "resized_width" field.</summary>
    public const int ResizedWidthFieldNumber = 14;
    private int resizedWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResizedWidth {
      get { return resizedWidth_; }
      set {
        resizedWidth_ = value;
      }
    }

    /// <summary>Field number for the "aligned_pixel" field.</summary>
    public const int AlignedPixelFieldNumber = 15;
    private int alignedPixel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlignedPixel {
      get { return alignedPixel_; }
      set {
        alignedPixel_ = value;
      }
    }

    /// <summary>Field number for the "confidence_threshold" field.</summary>
    public const int ConfidenceThresholdFieldNumber = 8;
    private float confidenceThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConfidenceThreshold {
      get { return confidenceThreshold_; }
      set {
        confidenceThreshold_ = value;
      }
    }

    /// <summary>Field number for the "light_vis_conf_threshold" field.</summary>
    public const int LightVisConfThresholdFieldNumber = 33;
    private float lightVisConfThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LightVisConfThreshold {
      get { return lightVisConfThreshold_; }
      set {
        lightVisConfThreshold_ = value;
      }
    }

    /// <summary>Field number for the "light_swt_conf_threshold" field.</summary>
    public const int LightSwtConfThresholdFieldNumber = 34;
    private float lightSwtConfThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LightSwtConfThreshold {
      get { return lightSwtConfThreshold_; }
      set {
        lightSwtConfThreshold_ = value;
      }
    }

    /// <summary>Field number for the "roi_conf_threshold" field.</summary>
    public const int RoiConfThresholdFieldNumber = 25;
    private float roiConfThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoiConfThreshold {
      get { return roiConfThreshold_; }
      set {
        roiConfThreshold_ = value;
      }
    }

    /// <summary>Field number for the "box_conf_threshold" field.</summary>
    public const int BoxConfThresholdFieldNumber = 26;
    private float boxConfThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoxConfThreshold {
      get { return boxConfThreshold_; }
      set {
        boxConfThreshold_ = value;
      }
    }

    /// <summary>Field number for the "stage2_nms_threshold" field.</summary>
    public const int Stage2NmsThresholdFieldNumber = 27;
    private float stage2NmsThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Stage2NmsThreshold {
      get { return stage2NmsThreshold_; }
      set {
        stage2NmsThreshold_ = value;
      }
    }

    /// <summary>Field number for the "min_2d_height" field.</summary>
    public const int Min2DHeightFieldNumber = 9;
    private float min2DHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min2DHeight {
      get { return min2DHeight_; }
      set {
        min2DHeight_ = value;
      }
    }

    /// <summary>Field number for the "min_3d_height" field.</summary>
    public const int Min3DHeightFieldNumber = 30;
    private float min3DHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min3DHeight {
      get { return min3DHeight_; }
      set {
        min3DHeight_ = value;
      }
    }

    /// <summary>Field number for the "min_3d_width" field.</summary>
    public const int Min3DWidthFieldNumber = 31;
    private float min3DWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min3DWidth {
      get { return min3DWidth_; }
      set {
        min3DWidth_ = value;
      }
    }

    /// <summary>Field number for the "min_3d_length" field.</summary>
    public const int Min3DLengthFieldNumber = 32;
    private float min3DLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min3DLength {
      get { return min3DLength_; }
      set {
        min3DLength_ = value;
      }
    }

    /// <summary>Field number for the "calibratetable_root" field.</summary>
    public const int CalibratetableRootFieldNumber = 11;
    private string calibratetableRoot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalibratetableRoot {
      get { return calibratetableRoot_; }
      set {
        calibratetableRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 12;
    private string modelType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelType {
      get { return modelType_; }
      set {
        modelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ori_cycle" field.</summary>
    public const int OriCycleFieldNumber = 16;
    private int oriCycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriCycle {
      get { return oriCycle_; }
      set {
        oriCycle_ = value;
      }
    }

    /// <summary>Field number for the "per_cls_reg" field.</summary>
    public const int PerClsRegFieldNumber = 17;
    private bool perClsReg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PerClsReg {
      get { return perClsReg_; }
      set {
        perClsReg_ = value;
      }
    }

    /// <summary>Field number for the "dimension_statistics" field.</summary>
    public const int DimensionStatisticsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Camera.Yolo.DimensionStatistics> _repeated_dimensionStatistics_codec
        = pb::FieldCodec.ForMessage(146, global::Apollo.Perception.Camera.Yolo.DimensionStatistics.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Camera.Yolo.DimensionStatistics> dimensionStatistics_ = new pbc::RepeatedField<global::Apollo.Perception.Camera.Yolo.DimensionStatistics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Camera.Yolo.DimensionStatistics> DimensionStatistics {
      get { return dimensionStatistics_; }
    }

    /// <summary>Field number for the "bbox_statistics" field.</summary>
    public const int BboxStatisticsFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Camera.Yolo.BBoxStatistics> _repeated_bboxStatistics_codec
        = pb::FieldCodec.ForMessage(154, global::Apollo.Perception.Camera.Yolo.BBoxStatistics.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Camera.Yolo.BBoxStatistics> bboxStatistics_ = new pbc::RepeatedField<global::Apollo.Perception.Camera.Yolo.BBoxStatistics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Camera.Yolo.BBoxStatistics> BboxStatistics {
      get { return bboxStatistics_; }
    }

    /// <summary>Field number for the "expand_file" field.</summary>
    public const int ExpandFileFieldNumber = 20;
    private string expandFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandFile {
      get { return expandFile_; }
      set {
        expandFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "with_box3d" field.</summary>
    public const int WithBox3DFieldNumber = 41;
    private bool withBox3D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithBox3D {
      get { return withBox3D_; }
      set {
        withBox3D_ = value;
      }
    }

    /// <summary>Field number for the "with_frbox" field.</summary>
    public const int WithFrboxFieldNumber = 42;
    private bool withFrbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithFrbox {
      get { return withFrbox_; }
      set {
        withFrbox_ = value;
      }
    }

    /// <summary>Field number for the "with_lights" field.</summary>
    public const int WithLightsFieldNumber = 43;
    private bool withLights_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithLights {
      get { return withLights_; }
      set {
        withLights_ = value;
      }
    }

    /// <summary>Field number for the "with_ratios" field.</summary>
    public const int WithRatiosFieldNumber = 44;
    private bool withRatios_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithRatios {
      get { return withRatios_; }
      set {
        withRatios_ = value;
      }
    }

    /// <summary>Field number for the "num_areas" field.</summary>
    public const int NumAreasFieldNumber = 46;
    private int numAreas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAreas {
      get { return numAreas_; }
      set {
        numAreas_ = value;
      }
    }

    /// <summary>Field number for the "border_ratio" field.</summary>
    public const int BorderRatioFieldNumber = 45;
    private float borderRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BorderRatio {
      get { return borderRatio_; }
      set {
        borderRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelName != other.ModelName) return false;
      if (ProtoFile != other.ProtoFile) return false;
      if (WeightFile != other.WeightFile) return false;
      if (Stage1Pt != other.Stage1Pt) return false;
      if (Stage1Md != other.Stage1Md) return false;
      if (Stage2Pt != other.Stage2Pt) return false;
      if (Stage2Md != other.Stage2Md) return false;
      if (AnchorsFile != other.AnchorsFile) return false;
      if (TypesFile != other.TypesFile) return false;
      if (FeatureFile != other.FeatureFile) return false;
      if (OffsetRatio != other.OffsetRatio) return false;
      if (CroppedRatio != other.CroppedRatio) return false;
      if (ResizedWidth != other.ResizedWidth) return false;
      if (AlignedPixel != other.AlignedPixel) return false;
      if (ConfidenceThreshold != other.ConfidenceThreshold) return false;
      if (LightVisConfThreshold != other.LightVisConfThreshold) return false;
      if (LightSwtConfThreshold != other.LightSwtConfThreshold) return false;
      if (RoiConfThreshold != other.RoiConfThreshold) return false;
      if (BoxConfThreshold != other.BoxConfThreshold) return false;
      if (Stage2NmsThreshold != other.Stage2NmsThreshold) return false;
      if (Min2DHeight != other.Min2DHeight) return false;
      if (Min3DHeight != other.Min3DHeight) return false;
      if (Min3DWidth != other.Min3DWidth) return false;
      if (Min3DLength != other.Min3DLength) return false;
      if (CalibratetableRoot != other.CalibratetableRoot) return false;
      if (ModelType != other.ModelType) return false;
      if (OriCycle != other.OriCycle) return false;
      if (PerClsReg != other.PerClsReg) return false;
      if(!dimensionStatistics_.Equals(other.dimensionStatistics_)) return false;
      if(!bboxStatistics_.Equals(other.bboxStatistics_)) return false;
      if (ExpandFile != other.ExpandFile) return false;
      if (WithBox3D != other.WithBox3D) return false;
      if (WithFrbox != other.WithFrbox) return false;
      if (WithLights != other.WithLights) return false;
      if (WithRatios != other.WithRatios) return false;
      if (NumAreas != other.NumAreas) return false;
      if (BorderRatio != other.BorderRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (ProtoFile.Length != 0) hash ^= ProtoFile.GetHashCode();
      if (WeightFile.Length != 0) hash ^= WeightFile.GetHashCode();
      if (Stage1Pt.Length != 0) hash ^= Stage1Pt.GetHashCode();
      if (Stage1Md.Length != 0) hash ^= Stage1Md.GetHashCode();
      if (Stage2Pt.Length != 0) hash ^= Stage2Pt.GetHashCode();
      if (Stage2Md.Length != 0) hash ^= Stage2Md.GetHashCode();
      if (AnchorsFile.Length != 0) hash ^= AnchorsFile.GetHashCode();
      if (TypesFile.Length != 0) hash ^= TypesFile.GetHashCode();
      if (FeatureFile.Length != 0) hash ^= FeatureFile.GetHashCode();
      if (OffsetRatio != 0F) hash ^= OffsetRatio.GetHashCode();
      if (CroppedRatio != 0F) hash ^= CroppedRatio.GetHashCode();
      if (ResizedWidth != 0) hash ^= ResizedWidth.GetHashCode();
      if (AlignedPixel != 0) hash ^= AlignedPixel.GetHashCode();
      if (ConfidenceThreshold != 0F) hash ^= ConfidenceThreshold.GetHashCode();
      if (LightVisConfThreshold != 0F) hash ^= LightVisConfThreshold.GetHashCode();
      if (LightSwtConfThreshold != 0F) hash ^= LightSwtConfThreshold.GetHashCode();
      if (RoiConfThreshold != 0F) hash ^= RoiConfThreshold.GetHashCode();
      if (BoxConfThreshold != 0F) hash ^= BoxConfThreshold.GetHashCode();
      if (Stage2NmsThreshold != 0F) hash ^= Stage2NmsThreshold.GetHashCode();
      if (Min2DHeight != 0F) hash ^= Min2DHeight.GetHashCode();
      if (Min3DHeight != 0F) hash ^= Min3DHeight.GetHashCode();
      if (Min3DWidth != 0F) hash ^= Min3DWidth.GetHashCode();
      if (Min3DLength != 0F) hash ^= Min3DLength.GetHashCode();
      if (CalibratetableRoot.Length != 0) hash ^= CalibratetableRoot.GetHashCode();
      if (ModelType.Length != 0) hash ^= ModelType.GetHashCode();
      if (OriCycle != 0) hash ^= OriCycle.GetHashCode();
      if (PerClsReg != false) hash ^= PerClsReg.GetHashCode();
      hash ^= dimensionStatistics_.GetHashCode();
      hash ^= bboxStatistics_.GetHashCode();
      if (ExpandFile.Length != 0) hash ^= ExpandFile.GetHashCode();
      if (WithBox3D != false) hash ^= WithBox3D.GetHashCode();
      if (WithFrbox != false) hash ^= WithFrbox.GetHashCode();
      if (WithLights != false) hash ^= WithLights.GetHashCode();
      if (WithRatios != false) hash ^= WithRatios.GetHashCode();
      if (NumAreas != 0) hash ^= NumAreas.GetHashCode();
      if (BorderRatio != 0F) hash ^= BorderRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelName);
      }
      if (ProtoFile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProtoFile);
      }
      if (WeightFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WeightFile);
      }
      if (AnchorsFile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AnchorsFile);
      }
      if (TypesFile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TypesFile);
      }
      if (FeatureFile.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FeatureFile);
      }
      if (OffsetRatio != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(OffsetRatio);
      }
      if (ConfidenceThreshold != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ConfidenceThreshold);
      }
      if (Min2DHeight != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Min2DHeight);
      }
      if (CalibratetableRoot.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CalibratetableRoot);
      }
      if (ModelType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ModelType);
      }
      if (CroppedRatio != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(CroppedRatio);
      }
      if (ResizedWidth != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ResizedWidth);
      }
      if (AlignedPixel != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AlignedPixel);
      }
      if (OriCycle != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OriCycle);
      }
      if (PerClsReg != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PerClsReg);
      }
      dimensionStatistics_.WriteTo(output, _repeated_dimensionStatistics_codec);
      bboxStatistics_.WriteTo(output, _repeated_bboxStatistics_codec);
      if (ExpandFile.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ExpandFile);
      }
      if (Stage1Pt.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Stage1Pt);
      }
      if (Stage1Md.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Stage1Md);
      }
      if (Stage2Pt.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Stage2Pt);
      }
      if (Stage2Md.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Stage2Md);
      }
      if (RoiConfThreshold != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(RoiConfThreshold);
      }
      if (BoxConfThreshold != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(BoxConfThreshold);
      }
      if (Stage2NmsThreshold != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(Stage2NmsThreshold);
      }
      if (Min3DHeight != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(Min3DHeight);
      }
      if (Min3DWidth != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(Min3DWidth);
      }
      if (Min3DLength != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(Min3DLength);
      }
      if (LightVisConfThreshold != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(LightVisConfThreshold);
      }
      if (LightSwtConfThreshold != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(LightSwtConfThreshold);
      }
      if (WithBox3D != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(WithBox3D);
      }
      if (WithFrbox != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(WithFrbox);
      }
      if (WithLights != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WithLights);
      }
      if (WithRatios != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(WithRatios);
      }
      if (BorderRatio != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(BorderRatio);
      }
      if (NumAreas != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(NumAreas);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (ProtoFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtoFile);
      }
      if (WeightFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeightFile);
      }
      if (Stage1Pt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Stage1Pt);
      }
      if (Stage1Md.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Stage1Md);
      }
      if (Stage2Pt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Stage2Pt);
      }
      if (Stage2Md.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Stage2Md);
      }
      if (AnchorsFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnchorsFile);
      }
      if (TypesFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypesFile);
      }
      if (FeatureFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureFile);
      }
      if (OffsetRatio != 0F) {
        size += 1 + 4;
      }
      if (CroppedRatio != 0F) {
        size += 1 + 4;
      }
      if (ResizedWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResizedWidth);
      }
      if (AlignedPixel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlignedPixel);
      }
      if (ConfidenceThreshold != 0F) {
        size += 1 + 4;
      }
      if (LightVisConfThreshold != 0F) {
        size += 2 + 4;
      }
      if (LightSwtConfThreshold != 0F) {
        size += 2 + 4;
      }
      if (RoiConfThreshold != 0F) {
        size += 2 + 4;
      }
      if (BoxConfThreshold != 0F) {
        size += 2 + 4;
      }
      if (Stage2NmsThreshold != 0F) {
        size += 2 + 4;
      }
      if (Min2DHeight != 0F) {
        size += 1 + 4;
      }
      if (Min3DHeight != 0F) {
        size += 2 + 4;
      }
      if (Min3DWidth != 0F) {
        size += 2 + 4;
      }
      if (Min3DLength != 0F) {
        size += 2 + 4;
      }
      if (CalibratetableRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CalibratetableRoot);
      }
      if (ModelType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelType);
      }
      if (OriCycle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriCycle);
      }
      if (PerClsReg != false) {
        size += 2 + 1;
      }
      size += dimensionStatistics_.CalculateSize(_repeated_dimensionStatistics_codec);
      size += bboxStatistics_.CalculateSize(_repeated_bboxStatistics_codec);
      if (ExpandFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpandFile);
      }
      if (WithBox3D != false) {
        size += 2 + 1;
      }
      if (WithFrbox != false) {
        size += 2 + 1;
      }
      if (WithLights != false) {
        size += 2 + 1;
      }
      if (WithRatios != false) {
        size += 2 + 1;
      }
      if (NumAreas != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumAreas);
      }
      if (BorderRatio != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelParam other) {
      if (other == null) {
        return;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.ProtoFile.Length != 0) {
        ProtoFile = other.ProtoFile;
      }
      if (other.WeightFile.Length != 0) {
        WeightFile = other.WeightFile;
      }
      if (other.Stage1Pt.Length != 0) {
        Stage1Pt = other.Stage1Pt;
      }
      if (other.Stage1Md.Length != 0) {
        Stage1Md = other.Stage1Md;
      }
      if (other.Stage2Pt.Length != 0) {
        Stage2Pt = other.Stage2Pt;
      }
      if (other.Stage2Md.Length != 0) {
        Stage2Md = other.Stage2Md;
      }
      if (other.AnchorsFile.Length != 0) {
        AnchorsFile = other.AnchorsFile;
      }
      if (other.TypesFile.Length != 0) {
        TypesFile = other.TypesFile;
      }
      if (other.FeatureFile.Length != 0) {
        FeatureFile = other.FeatureFile;
      }
      if (other.OffsetRatio != 0F) {
        OffsetRatio = other.OffsetRatio;
      }
      if (other.CroppedRatio != 0F) {
        CroppedRatio = other.CroppedRatio;
      }
      if (other.ResizedWidth != 0) {
        ResizedWidth = other.ResizedWidth;
      }
      if (other.AlignedPixel != 0) {
        AlignedPixel = other.AlignedPixel;
      }
      if (other.ConfidenceThreshold != 0F) {
        ConfidenceThreshold = other.ConfidenceThreshold;
      }
      if (other.LightVisConfThreshold != 0F) {
        LightVisConfThreshold = other.LightVisConfThreshold;
      }
      if (other.LightSwtConfThreshold != 0F) {
        LightSwtConfThreshold = other.LightSwtConfThreshold;
      }
      if (other.RoiConfThreshold != 0F) {
        RoiConfThreshold = other.RoiConfThreshold;
      }
      if (other.BoxConfThreshold != 0F) {
        BoxConfThreshold = other.BoxConfThreshold;
      }
      if (other.Stage2NmsThreshold != 0F) {
        Stage2NmsThreshold = other.Stage2NmsThreshold;
      }
      if (other.Min2DHeight != 0F) {
        Min2DHeight = other.Min2DHeight;
      }
      if (other.Min3DHeight != 0F) {
        Min3DHeight = other.Min3DHeight;
      }
      if (other.Min3DWidth != 0F) {
        Min3DWidth = other.Min3DWidth;
      }
      if (other.Min3DLength != 0F) {
        Min3DLength = other.Min3DLength;
      }
      if (other.CalibratetableRoot.Length != 0) {
        CalibratetableRoot = other.CalibratetableRoot;
      }
      if (other.ModelType.Length != 0) {
        ModelType = other.ModelType;
      }
      if (other.OriCycle != 0) {
        OriCycle = other.OriCycle;
      }
      if (other.PerClsReg != false) {
        PerClsReg = other.PerClsReg;
      }
      dimensionStatistics_.Add(other.dimensionStatistics_);
      bboxStatistics_.Add(other.bboxStatistics_);
      if (other.ExpandFile.Length != 0) {
        ExpandFile = other.ExpandFile;
      }
      if (other.WithBox3D != false) {
        WithBox3D = other.WithBox3D;
      }
      if (other.WithFrbox != false) {
        WithFrbox = other.WithFrbox;
      }
      if (other.WithLights != false) {
        WithLights = other.WithLights;
      }
      if (other.WithRatios != false) {
        WithRatios = other.WithRatios;
      }
      if (other.NumAreas != 0) {
        NumAreas = other.NumAreas;
      }
      if (other.BorderRatio != 0F) {
        BorderRatio = other.BorderRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ModelName = input.ReadString();
            break;
          }
          case 18: {
            ProtoFile = input.ReadString();
            break;
          }
          case 26: {
            WeightFile = input.ReadString();
            break;
          }
          case 34: {
            AnchorsFile = input.ReadString();
            break;
          }
          case 42: {
            TypesFile = input.ReadString();
            break;
          }
          case 50: {
            FeatureFile = input.ReadString();
            break;
          }
          case 61: {
            OffsetRatio = input.ReadFloat();
            break;
          }
          case 69: {
            ConfidenceThreshold = input.ReadFloat();
            break;
          }
          case 77: {
            Min2DHeight = input.ReadFloat();
            break;
          }
          case 90: {
            CalibratetableRoot = input.ReadString();
            break;
          }
          case 98: {
            ModelType = input.ReadString();
            break;
          }
          case 109: {
            CroppedRatio = input.ReadFloat();
            break;
          }
          case 112: {
            ResizedWidth = input.ReadInt32();
            break;
          }
          case 120: {
            AlignedPixel = input.ReadInt32();
            break;
          }
          case 128: {
            OriCycle = input.ReadInt32();
            break;
          }
          case 136: {
            PerClsReg = input.ReadBool();
            break;
          }
          case 146: {
            dimensionStatistics_.AddEntriesFrom(input, _repeated_dimensionStatistics_codec);
            break;
          }
          case 154: {
            bboxStatistics_.AddEntriesFrom(input, _repeated_bboxStatistics_codec);
            break;
          }
          case 162: {
            ExpandFile = input.ReadString();
            break;
          }
          case 170: {
            Stage1Pt = input.ReadString();
            break;
          }
          case 178: {
            Stage1Md = input.ReadString();
            break;
          }
          case 186: {
            Stage2Pt = input.ReadString();
            break;
          }
          case 194: {
            Stage2Md = input.ReadString();
            break;
          }
          case 205: {
            RoiConfThreshold = input.ReadFloat();
            break;
          }
          case 213: {
            BoxConfThreshold = input.ReadFloat();
            break;
          }
          case 221: {
            Stage2NmsThreshold = input.ReadFloat();
            break;
          }
          case 245: {
            Min3DHeight = input.ReadFloat();
            break;
          }
          case 253: {
            Min3DWidth = input.ReadFloat();
            break;
          }
          case 261: {
            Min3DLength = input.ReadFloat();
            break;
          }
          case 269: {
            LightVisConfThreshold = input.ReadFloat();
            break;
          }
          case 277: {
            LightSwtConfThreshold = input.ReadFloat();
            break;
          }
          case 328: {
            WithBox3D = input.ReadBool();
            break;
          }
          case 336: {
            WithFrbox = input.ReadBool();
            break;
          }
          case 344: {
            WithLights = input.ReadBool();
            break;
          }
          case 352: {
            WithRatios = input.ReadBool();
            break;
          }
          case 365: {
            BorderRatio = input.ReadFloat();
            break;
          }
          case 368: {
            NumAreas = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkParam : pb::IMessage<NetworkParam> {
    private static readonly pb::MessageParser<NetworkParam> _parser = new pb::MessageParser<NetworkParam>(() => new NetworkParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Yolo.YoloReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkParam(NetworkParam other) : this() {
      locBlob_ = other.locBlob_;
      objBlob_ = other.objBlob_;
      clsBlob_ = other.clsBlob_;
      oriBlob_ = other.oriBlob_;
      dimBlob_ = other.dimBlob_;
      lofBlob_ = other.lofBlob_;
      lorBlob_ = other.lorBlob_;
      inputBlob_ = other.inputBlob_;
      roisBlob_ = other.roisBlob_;
      featBlob_ = other.featBlob_;
      boxBlob_ = other.boxBlob_;
      iouBlob_ = other.iouBlob_;
      brvisBlob_ = other.brvisBlob_;
      brswtBlob_ = other.brswtBlob_;
      ltvisBlob_ = other.ltvisBlob_;
      ltswtBlob_ = other.ltswtBlob_;
      rtvisBlob_ = other.rtvisBlob_;
      rtswtBlob_ = other.rtswtBlob_;
      areaIdBlob_ = other.areaIdBlob_;
      visibleRatioBlob_ = other.visibleRatioBlob_;
      cutOffRatioBlob_ = other.cutOffRatioBlob_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkParam Clone() {
      return new NetworkParam(this);
    }

    /// <summary>Field number for the "loc_blob" field.</summary>
    public const int LocBlobFieldNumber = 1;
    private string locBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocBlob {
      get { return locBlob_; }
      set {
        locBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "obj_blob" field.</summary>
    public const int ObjBlobFieldNumber = 2;
    private string objBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjBlob {
      get { return objBlob_; }
      set {
        objBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cls_blob" field.</summary>
    public const int ClsBlobFieldNumber = 3;
    private string clsBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClsBlob {
      get { return clsBlob_; }
      set {
        clsBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ori_blob" field.</summary>
    public const int OriBlobFieldNumber = 4;
    private string oriBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriBlob {
      get { return oriBlob_; }
      set {
        oriBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dim_blob" field.</summary>
    public const int DimBlobFieldNumber = 5;
    private string dimBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DimBlob {
      get { return dimBlob_; }
      set {
        dimBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lof_blob" field.</summary>
    public const int LofBlobFieldNumber = 6;
    private string lofBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LofBlob {
      get { return lofBlob_; }
      set {
        lofBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lor_blob" field.</summary>
    public const int LorBlobFieldNumber = 7;
    private string lorBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LorBlob {
      get { return lorBlob_; }
      set {
        lorBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_blob" field.</summary>
    public const int InputBlobFieldNumber = 8;
    private string inputBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputBlob {
      get { return inputBlob_; }
      set {
        inputBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rois_blob" field.</summary>
    public const int RoisBlobFieldNumber = 10;
    private string roisBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoisBlob {
      get { return roisBlob_; }
      set {
        roisBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feat_blob" field.</summary>
    public const int FeatBlobFieldNumber = 11;
    private string featBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatBlob {
      get { return featBlob_; }
      set {
        featBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "box_blob" field.</summary>
    public const int BoxBlobFieldNumber = 13;
    private string boxBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxBlob {
      get { return boxBlob_; }
      set {
        boxBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iou_blob" field.</summary>
    public const int IouBlobFieldNumber = 14;
    private string iouBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IouBlob {
      get { return iouBlob_; }
      set {
        iouBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brvis_blob" field.</summary>
    public const int BrvisBlobFieldNumber = 15;
    private string brvisBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrvisBlob {
      get { return brvisBlob_; }
      set {
        brvisBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brswt_blob" field.</summary>
    public const int BrswtBlobFieldNumber = 16;
    private string brswtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrswtBlob {
      get { return brswtBlob_; }
      set {
        brswtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ltvis_blob" field.</summary>
    public const int LtvisBlobFieldNumber = 17;
    private string ltvisBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LtvisBlob {
      get { return ltvisBlob_; }
      set {
        ltvisBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ltswt_blob" field.</summary>
    public const int LtswtBlobFieldNumber = 18;
    private string ltswtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LtswtBlob {
      get { return ltswtBlob_; }
      set {
        ltswtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtvis_blob" field.</summary>
    public const int RtvisBlobFieldNumber = 19;
    private string rtvisBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RtvisBlob {
      get { return rtvisBlob_; }
      set {
        rtvisBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtswt_blob" field.</summary>
    public const int RtswtBlobFieldNumber = 20;
    private string rtswtBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RtswtBlob {
      get { return rtswtBlob_; }
      set {
        rtswtBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "area_id_blob" field.</summary>
    public const int AreaIdBlobFieldNumber = 23;
    private string areaIdBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AreaIdBlob {
      get { return areaIdBlob_; }
      set {
        areaIdBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visible_ratio_blob" field.</summary>
    public const int VisibleRatioBlobFieldNumber = 21;
    private string visibleRatioBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisibleRatioBlob {
      get { return visibleRatioBlob_; }
      set {
        visibleRatioBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cut_off_ratio_blob" field.</summary>
    public const int CutOffRatioBlobFieldNumber = 22;
    private string cutOffRatioBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CutOffRatioBlob {
      get { return cutOffRatioBlob_; }
      set {
        cutOffRatioBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocBlob != other.LocBlob) return false;
      if (ObjBlob != other.ObjBlob) return false;
      if (ClsBlob != other.ClsBlob) return false;
      if (OriBlob != other.OriBlob) return false;
      if (DimBlob != other.DimBlob) return false;
      if (LofBlob != other.LofBlob) return false;
      if (LorBlob != other.LorBlob) return false;
      if (InputBlob != other.InputBlob) return false;
      if (RoisBlob != other.RoisBlob) return false;
      if (FeatBlob != other.FeatBlob) return false;
      if (BoxBlob != other.BoxBlob) return false;
      if (IouBlob != other.IouBlob) return false;
      if (BrvisBlob != other.BrvisBlob) return false;
      if (BrswtBlob != other.BrswtBlob) return false;
      if (LtvisBlob != other.LtvisBlob) return false;
      if (LtswtBlob != other.LtswtBlob) return false;
      if (RtvisBlob != other.RtvisBlob) return false;
      if (RtswtBlob != other.RtswtBlob) return false;
      if (AreaIdBlob != other.AreaIdBlob) return false;
      if (VisibleRatioBlob != other.VisibleRatioBlob) return false;
      if (CutOffRatioBlob != other.CutOffRatioBlob) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocBlob.Length != 0) hash ^= LocBlob.GetHashCode();
      if (ObjBlob.Length != 0) hash ^= ObjBlob.GetHashCode();
      if (ClsBlob.Length != 0) hash ^= ClsBlob.GetHashCode();
      if (OriBlob.Length != 0) hash ^= OriBlob.GetHashCode();
      if (DimBlob.Length != 0) hash ^= DimBlob.GetHashCode();
      if (LofBlob.Length != 0) hash ^= LofBlob.GetHashCode();
      if (LorBlob.Length != 0) hash ^= LorBlob.GetHashCode();
      if (InputBlob.Length != 0) hash ^= InputBlob.GetHashCode();
      if (RoisBlob.Length != 0) hash ^= RoisBlob.GetHashCode();
      if (FeatBlob.Length != 0) hash ^= FeatBlob.GetHashCode();
      if (BoxBlob.Length != 0) hash ^= BoxBlob.GetHashCode();
      if (IouBlob.Length != 0) hash ^= IouBlob.GetHashCode();
      if (BrvisBlob.Length != 0) hash ^= BrvisBlob.GetHashCode();
      if (BrswtBlob.Length != 0) hash ^= BrswtBlob.GetHashCode();
      if (LtvisBlob.Length != 0) hash ^= LtvisBlob.GetHashCode();
      if (LtswtBlob.Length != 0) hash ^= LtswtBlob.GetHashCode();
      if (RtvisBlob.Length != 0) hash ^= RtvisBlob.GetHashCode();
      if (RtswtBlob.Length != 0) hash ^= RtswtBlob.GetHashCode();
      if (AreaIdBlob.Length != 0) hash ^= AreaIdBlob.GetHashCode();
      if (VisibleRatioBlob.Length != 0) hash ^= VisibleRatioBlob.GetHashCode();
      if (CutOffRatioBlob.Length != 0) hash ^= CutOffRatioBlob.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocBlob.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocBlob);
      }
      if (ObjBlob.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ObjBlob);
      }
      if (ClsBlob.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClsBlob);
      }
      if (OriBlob.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OriBlob);
      }
      if (DimBlob.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DimBlob);
      }
      if (LofBlob.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LofBlob);
      }
      if (LorBlob.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LorBlob);
      }
      if (InputBlob.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(InputBlob);
      }
      if (RoisBlob.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RoisBlob);
      }
      if (FeatBlob.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(FeatBlob);
      }
      if (BoxBlob.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(BoxBlob);
      }
      if (IouBlob.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(IouBlob);
      }
      if (BrvisBlob.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(BrvisBlob);
      }
      if (BrswtBlob.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BrswtBlob);
      }
      if (LtvisBlob.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(LtvisBlob);
      }
      if (LtswtBlob.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(LtswtBlob);
      }
      if (RtvisBlob.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(RtvisBlob);
      }
      if (RtswtBlob.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(RtswtBlob);
      }
      if (VisibleRatioBlob.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(VisibleRatioBlob);
      }
      if (CutOffRatioBlob.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CutOffRatioBlob);
      }
      if (AreaIdBlob.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(AreaIdBlob);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocBlob);
      }
      if (ObjBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjBlob);
      }
      if (ClsBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClsBlob);
      }
      if (OriBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriBlob);
      }
      if (DimBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DimBlob);
      }
      if (LofBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LofBlob);
      }
      if (LorBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LorBlob);
      }
      if (InputBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputBlob);
      }
      if (RoisBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoisBlob);
      }
      if (FeatBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatBlob);
      }
      if (BoxBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoxBlob);
      }
      if (IouBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IouBlob);
      }
      if (BrvisBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrvisBlob);
      }
      if (BrswtBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BrswtBlob);
      }
      if (LtvisBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LtvisBlob);
      }
      if (LtswtBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LtswtBlob);
      }
      if (RtvisBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RtvisBlob);
      }
      if (RtswtBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RtswtBlob);
      }
      if (AreaIdBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AreaIdBlob);
      }
      if (VisibleRatioBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VisibleRatioBlob);
      }
      if (CutOffRatioBlob.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CutOffRatioBlob);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkParam other) {
      if (other == null) {
        return;
      }
      if (other.LocBlob.Length != 0) {
        LocBlob = other.LocBlob;
      }
      if (other.ObjBlob.Length != 0) {
        ObjBlob = other.ObjBlob;
      }
      if (other.ClsBlob.Length != 0) {
        ClsBlob = other.ClsBlob;
      }
      if (other.OriBlob.Length != 0) {
        OriBlob = other.OriBlob;
      }
      if (other.DimBlob.Length != 0) {
        DimBlob = other.DimBlob;
      }
      if (other.LofBlob.Length != 0) {
        LofBlob = other.LofBlob;
      }
      if (other.LorBlob.Length != 0) {
        LorBlob = other.LorBlob;
      }
      if (other.InputBlob.Length != 0) {
        InputBlob = other.InputBlob;
      }
      if (other.RoisBlob.Length != 0) {
        RoisBlob = other.RoisBlob;
      }
      if (other.FeatBlob.Length != 0) {
        FeatBlob = other.FeatBlob;
      }
      if (other.BoxBlob.Length != 0) {
        BoxBlob = other.BoxBlob;
      }
      if (other.IouBlob.Length != 0) {
        IouBlob = other.IouBlob;
      }
      if (other.BrvisBlob.Length != 0) {
        BrvisBlob = other.BrvisBlob;
      }
      if (other.BrswtBlob.Length != 0) {
        BrswtBlob = other.BrswtBlob;
      }
      if (other.LtvisBlob.Length != 0) {
        LtvisBlob = other.LtvisBlob;
      }
      if (other.LtswtBlob.Length != 0) {
        LtswtBlob = other.LtswtBlob;
      }
      if (other.RtvisBlob.Length != 0) {
        RtvisBlob = other.RtvisBlob;
      }
      if (other.RtswtBlob.Length != 0) {
        RtswtBlob = other.RtswtBlob;
      }
      if (other.AreaIdBlob.Length != 0) {
        AreaIdBlob = other.AreaIdBlob;
      }
      if (other.VisibleRatioBlob.Length != 0) {
        VisibleRatioBlob = other.VisibleRatioBlob;
      }
      if (other.CutOffRatioBlob.Length != 0) {
        CutOffRatioBlob = other.CutOffRatioBlob;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LocBlob = input.ReadString();
            break;
          }
          case 18: {
            ObjBlob = input.ReadString();
            break;
          }
          case 26: {
            ClsBlob = input.ReadString();
            break;
          }
          case 34: {
            OriBlob = input.ReadString();
            break;
          }
          case 42: {
            DimBlob = input.ReadString();
            break;
          }
          case 50: {
            LofBlob = input.ReadString();
            break;
          }
          case 58: {
            LorBlob = input.ReadString();
            break;
          }
          case 66: {
            InputBlob = input.ReadString();
            break;
          }
          case 82: {
            RoisBlob = input.ReadString();
            break;
          }
          case 90: {
            FeatBlob = input.ReadString();
            break;
          }
          case 106: {
            BoxBlob = input.ReadString();
            break;
          }
          case 114: {
            IouBlob = input.ReadString();
            break;
          }
          case 122: {
            BrvisBlob = input.ReadString();
            break;
          }
          case 130: {
            BrswtBlob = input.ReadString();
            break;
          }
          case 138: {
            LtvisBlob = input.ReadString();
            break;
          }
          case 146: {
            LtswtBlob = input.ReadString();
            break;
          }
          case 154: {
            RtvisBlob = input.ReadString();
            break;
          }
          case 162: {
            RtswtBlob = input.ReadString();
            break;
          }
          case 170: {
            VisibleRatioBlob = input.ReadString();
            break;
          }
          case 178: {
            CutOffRatioBlob = input.ReadString();
            break;
          }
          case 186: {
            AreaIdBlob = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NMSParam : pb::IMessage<NMSParam> {
    private static readonly pb::MessageParser<NMSParam> _parser = new pb::MessageParser<NMSParam>(() => new NMSParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NMSParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Yolo.YoloReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NMSParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NMSParam(NMSParam other) : this() {
      type_ = other.type_;
      threshold_ = other.threshold_;
      sigma_ = other.sigma_;
      interClsConfThresh_ = other.interClsConfThresh_;
      interClsNmsThresh_ = other.interClsNmsThresh_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NMSParam Clone() {
      return new NMSParam(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 2;
    private float threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "sigma" field.</summary>
    public const int SigmaFieldNumber = 3;
    private float sigma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sigma {
      get { return sigma_; }
      set {
        sigma_ = value;
      }
    }

    /// <summary>Field number for the "inter_cls_conf_thresh" field.</summary>
    public const int InterClsConfThreshFieldNumber = 4;
    private float interClsConfThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InterClsConfThresh {
      get { return interClsConfThresh_; }
      set {
        interClsConfThresh_ = value;
      }
    }

    /// <summary>Field number for the "inter_cls_nms_thresh" field.</summary>
    public const int InterClsNmsThreshFieldNumber = 5;
    private float interClsNmsThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InterClsNmsThresh {
      get { return interClsNmsThresh_; }
      set {
        interClsNmsThresh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NMSParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NMSParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Threshold != other.Threshold) return false;
      if (Sigma != other.Sigma) return false;
      if (InterClsConfThresh != other.InterClsConfThresh) return false;
      if (InterClsNmsThresh != other.InterClsNmsThresh) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Threshold != 0F) hash ^= Threshold.GetHashCode();
      if (Sigma != 0F) hash ^= Sigma.GetHashCode();
      if (InterClsConfThresh != 0F) hash ^= InterClsConfThresh.GetHashCode();
      if (InterClsNmsThresh != 0F) hash ^= InterClsNmsThresh.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Threshold != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Threshold);
      }
      if (Sigma != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Sigma);
      }
      if (InterClsConfThresh != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(InterClsConfThresh);
      }
      if (InterClsNmsThresh != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(InterClsNmsThresh);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Threshold != 0F) {
        size += 1 + 4;
      }
      if (Sigma != 0F) {
        size += 1 + 4;
      }
      if (InterClsConfThresh != 0F) {
        size += 1 + 4;
      }
      if (InterClsNmsThresh != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NMSParam other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Threshold != 0F) {
        Threshold = other.Threshold;
      }
      if (other.Sigma != 0F) {
        Sigma = other.Sigma;
      }
      if (other.InterClsConfThresh != 0F) {
        InterClsConfThresh = other.InterClsConfThresh;
      }
      if (other.InterClsNmsThresh != 0F) {
        InterClsNmsThresh = other.InterClsNmsThresh;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 21: {
            Threshold = input.ReadFloat();
            break;
          }
          case 29: {
            Sigma = input.ReadFloat();
            break;
          }
          case 37: {
            InterClsConfThresh = input.ReadFloat();
            break;
          }
          case 45: {
            InterClsNmsThresh = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BBoxStatistics : pb::IMessage<BBoxStatistics> {
    private static readonly pb::MessageParser<BBoxStatistics> _parser = new pb::MessageParser<BBoxStatistics>(() => new BBoxStatistics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BBoxStatistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Yolo.YoloReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBoxStatistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBoxStatistics(BBoxStatistics other) : this() {
      mean_ = other.mean_.Clone();
      std_ = other.std_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBoxStatistics Clone() {
      return new BBoxStatistics(this);
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_mean_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> mean_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Mean {
      get { return mean_; }
    }

    /// <summary>Field number for the "std" field.</summary>
    public const int StdFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_std_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> std_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Std {
      get { return std_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BBoxStatistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BBoxStatistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mean_.Equals(other.mean_)) return false;
      if(!std_.Equals(other.std_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mean_.GetHashCode();
      hash ^= std_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mean_.WriteTo(output, _repeated_mean_codec);
      std_.WriteTo(output, _repeated_std_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mean_.CalculateSize(_repeated_mean_codec);
      size += std_.CalculateSize(_repeated_std_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BBoxStatistics other) {
      if (other == null) {
        return;
      }
      mean_.Add(other.mean_);
      std_.Add(other.std_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            mean_.AddEntriesFrom(input, _repeated_mean_codec);
            break;
          }
          case 18:
          case 21: {
            std_.AddEntriesFrom(input, _repeated_std_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DimensionStatistics : pb::IMessage<DimensionStatistics> {
    private static readonly pb::MessageParser<DimensionStatistics> _parser = new pb::MessageParser<DimensionStatistics>(() => new DimensionStatistics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DimensionStatistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.Yolo.YoloReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionStatistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionStatistics(DimensionStatistics other) : this() {
      meanH_ = other.meanH_;
      meanW_ = other.meanW_;
      meanL_ = other.meanL_;
      stdH_ = other.stdH_;
      stdW_ = other.stdW_;
      stdL_ = other.stdL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionStatistics Clone() {
      return new DimensionStatistics(this);
    }

    /// <summary>Field number for the "mean_h" field.</summary>
    public const int MeanHFieldNumber = 1;
    private float meanH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanH {
      get { return meanH_; }
      set {
        meanH_ = value;
      }
    }

    /// <summary>Field number for the "mean_w" field.</summary>
    public const int MeanWFieldNumber = 2;
    private float meanW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanW {
      get { return meanW_; }
      set {
        meanW_ = value;
      }
    }

    /// <summary>Field number for the "mean_l" field.</summary>
    public const int MeanLFieldNumber = 3;
    private float meanL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanL {
      get { return meanL_; }
      set {
        meanL_ = value;
      }
    }

    /// <summary>Field number for the "std_h" field.</summary>
    public const int StdHFieldNumber = 4;
    private float stdH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StdH {
      get { return stdH_; }
      set {
        stdH_ = value;
      }
    }

    /// <summary>Field number for the "std_w" field.</summary>
    public const int StdWFieldNumber = 5;
    private float stdW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StdW {
      get { return stdW_; }
      set {
        stdW_ = value;
      }
    }

    /// <summary>Field number for the "std_l" field.</summary>
    public const int StdLFieldNumber = 6;
    private float stdL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StdL {
      get { return stdL_; }
      set {
        stdL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DimensionStatistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DimensionStatistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeanH != other.MeanH) return false;
      if (MeanW != other.MeanW) return false;
      if (MeanL != other.MeanL) return false;
      if (StdH != other.StdH) return false;
      if (StdW != other.StdW) return false;
      if (StdL != other.StdL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MeanH != 0F) hash ^= MeanH.GetHashCode();
      if (MeanW != 0F) hash ^= MeanW.GetHashCode();
      if (MeanL != 0F) hash ^= MeanL.GetHashCode();
      if (StdH != 0F) hash ^= StdH.GetHashCode();
      if (StdW != 0F) hash ^= StdW.GetHashCode();
      if (StdL != 0F) hash ^= StdL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeanH != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MeanH);
      }
      if (MeanW != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MeanW);
      }
      if (MeanL != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MeanL);
      }
      if (StdH != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StdH);
      }
      if (StdW != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StdW);
      }
      if (StdL != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StdL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeanH != 0F) {
        size += 1 + 4;
      }
      if (MeanW != 0F) {
        size += 1 + 4;
      }
      if (MeanL != 0F) {
        size += 1 + 4;
      }
      if (StdH != 0F) {
        size += 1 + 4;
      }
      if (StdW != 0F) {
        size += 1 + 4;
      }
      if (StdL != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DimensionStatistics other) {
      if (other == null) {
        return;
      }
      if (other.MeanH != 0F) {
        MeanH = other.MeanH;
      }
      if (other.MeanW != 0F) {
        MeanW = other.MeanW;
      }
      if (other.MeanL != 0F) {
        MeanL = other.MeanL;
      }
      if (other.StdH != 0F) {
        StdH = other.StdH;
      }
      if (other.StdW != 0F) {
        StdW = other.StdW;
      }
      if (other.StdL != 0F) {
        StdL = other.StdL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MeanH = input.ReadFloat();
            break;
          }
          case 21: {
            MeanW = input.ReadFloat();
            break;
          }
          case 29: {
            MeanL = input.ReadFloat();
            break;
          }
          case 37: {
            StdH = input.ReadFloat();
            break;
          }
          case 45: {
            StdW = input.ReadFloat();
            break;
          }
          case 53: {
            StdL = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
