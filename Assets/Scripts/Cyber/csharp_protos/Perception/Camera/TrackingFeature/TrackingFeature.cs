// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/feature_extractor/tfe/tracking_feature.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception.Camera.TrackingFeature {

  /// <summary>Holder for reflection information generated from modules/perception/camera/lib/feature_extractor/tfe/tracking_feature.proto</summary>
  public static partial class TrackingFeatureReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/camera/lib/feature_extractor/tfe/tracking_feature.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrackingFeatureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ckptb2R1bGVzL3BlcmNlcHRpb24vY2FtZXJhL2xpYi9mZWF0dXJlX2V4dHJh",
            "Y3Rvci90ZmUvdHJhY2tpbmdfZmVhdHVyZS5wcm90bxIpYXBvbGxvLnBlcmNl",
            "cHRpb24uY2FtZXJhLnRyYWNraW5nX2ZlYXR1cmUihgEKDEZlYXR1cmVQYXJh",
            "bRITCgtmZWF0X3N0cmlkZRgBIAEoBRJMCglleHRyYWN0b3IYAiADKAsyOS5h",
            "cG9sbG8ucGVyY2VwdGlvbi5jYW1lcmEudHJhY2tpbmdfZmVhdHVyZS5FeHRy",
            "YWN0b3JQYXJhbRITCgtyZW1hcF9tb2RlbBgDIAEoCSLPAgoORXh0cmFjdG9y",
            "UGFyYW0SEQoJZmVhdF9ibG9iGAEgASgJElgKCWZlYXRfdHlwZRgCIAEoDjJF",
            "LmFwb2xsby5wZXJjZXB0aW9uLmNhbWVyYS50cmFja2luZ19mZWF0dXJlLkV4",
            "dHJhY3RvclBhcmFtLkZlYXR1cmVUeXBlElUKEXJvaV9wb29saW5nX3BhcmFt",
            "GAMgASgLMjouYXBvbGxvLnBlcmNlcHRpb24uY2FtZXJhLnRyYWNraW5nX2Zl",
            "YXR1cmUuUk9JUG9vbGluZ1BhcmFtEloKFHBzX3JvaV9wb29saW5nX3BhcmFt",
            "GAQgASgLMjwuYXBvbGxvLnBlcmNlcHRpb24uY2FtZXJhLnRyYWNraW5nX2Zl",
            "YXR1cmUuUFNST0lQb29saW5nUGFyYW0iHQoLRmVhdHVyZVR5cGUSDgoKUk9J",
            "UG9vbGluZxAAIkgKD1JPSVBvb2xpbmdQYXJhbRIQCghwb29sZWRfaBgBIAEo",
            "BRIQCghwb29sZWRfdxgCIAEoBRIRCgl1c2VfZmxvb3IYAyABKAgirAEKEVBT",
            "Uk9JUG9vbGluZ1BhcmFtEhIKCmhlYXRfbWFwX2EYASABKAUSEgoKb3V0cHV0",
            "X2RpbRgCIAEoBRIUCgxncm91cF9oZWlnaHQYAyABKAUSEwoLZ3JvdXBfd2lk",
            "dGgYBCABKAUSFQoNcG9vbGVkX2hlaWdodBgFIAEoBRIUCgxwb29sZWRfd2lk",
            "dGgYBiABKAUSFwoPc2FtcGxlX3Blcl9wYXJ0GAcgASgFIswBCg1FeHRlcm5h",
            "bFBhcmFtEhIKCm1vZGVsX3R5cGUYASABKAkSEgoKcHJvdG9fZmlsZRgCIAEo",
            "CRITCgt3ZWlnaHRfZmlsZRgDIAEoCRIVCg1yZXNpemVfaGVpZ2h0GAQgASgF",
            "EhQKDHJlc2l6ZV93aWR0aBgFIAEoBRISCgppbnB1dF9ibG9iGAYgASgJEhEK",
            "CWZlYXRfYmxvYhgHIAEoCRIUCgxvZmZzZXRfcmF0aW8YCCABKAISFAoMZmVh",
            "dHVyZV9maWxlGAkgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.TrackingFeature.FeatureParam), global::Apollo.Perception.Camera.TrackingFeature.FeatureParam.Parser, new[]{ "FeatStride", "Extractor", "RemapModel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam), global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam.Parser, new[]{ "FeatBlob", "FeatType", "RoiPoolingParam", "PsRoiPoolingParam" }, null, new[]{ typeof(global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam.Types.FeatureType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.TrackingFeature.ROIPoolingParam), global::Apollo.Perception.Camera.TrackingFeature.ROIPoolingParam.Parser, new[]{ "PooledH", "PooledW", "UseFloor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.TrackingFeature.PSROIPoolingParam), global::Apollo.Perception.Camera.TrackingFeature.PSROIPoolingParam.Parser, new[]{ "HeatMapA", "OutputDim", "GroupHeight", "GroupWidth", "PooledHeight", "PooledWidth", "SamplePerPart" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.Camera.TrackingFeature.ExternalParam), global::Apollo.Perception.Camera.TrackingFeature.ExternalParam.Parser, new[]{ "ModelType", "ProtoFile", "WeightFile", "ResizeHeight", "ResizeWidth", "InputBlob", "FeatBlob", "OffsetRatio", "FeatureFile" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FeatureParam : pb::IMessage<FeatureParam> {
    private static readonly pb::MessageParser<FeatureParam> _parser = new pb::MessageParser<FeatureParam>(() => new FeatureParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.TrackingFeature.TrackingFeatureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureParam(FeatureParam other) : this() {
      featStride_ = other.featStride_;
      extractor_ = other.extractor_.Clone();
      remapModel_ = other.remapModel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureParam Clone() {
      return new FeatureParam(this);
    }

    /// <summary>Field number for the "feat_stride" field.</summary>
    public const int FeatStrideFieldNumber = 1;
    private int featStride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeatStride {
      get { return featStride_; }
      set {
        featStride_ = value;
      }
    }

    /// <summary>Field number for the "extractor" field.</summary>
    public const int ExtractorFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam> _repeated_extractor_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam> extractor_ = new pbc::RepeatedField<global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam> Extractor {
      get { return extractor_; }
    }

    /// <summary>Field number for the "remap_model" field.</summary>
    public const int RemapModelFieldNumber = 3;
    private string remapModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemapModel {
      get { return remapModel_; }
      set {
        remapModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatStride != other.FeatStride) return false;
      if(!extractor_.Equals(other.extractor_)) return false;
      if (RemapModel != other.RemapModel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeatStride != 0) hash ^= FeatStride.GetHashCode();
      hash ^= extractor_.GetHashCode();
      if (RemapModel.Length != 0) hash ^= RemapModel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeatStride != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FeatStride);
      }
      extractor_.WriteTo(output, _repeated_extractor_codec);
      if (RemapModel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RemapModel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeatStride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeatStride);
      }
      size += extractor_.CalculateSize(_repeated_extractor_codec);
      if (RemapModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemapModel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureParam other) {
      if (other == null) {
        return;
      }
      if (other.FeatStride != 0) {
        FeatStride = other.FeatStride;
      }
      extractor_.Add(other.extractor_);
      if (other.RemapModel.Length != 0) {
        RemapModel = other.RemapModel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FeatStride = input.ReadInt32();
            break;
          }
          case 18: {
            extractor_.AddEntriesFrom(input, _repeated_extractor_codec);
            break;
          }
          case 26: {
            RemapModel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExtractorParam : pb::IMessage<ExtractorParam> {
    private static readonly pb::MessageParser<ExtractorParam> _parser = new pb::MessageParser<ExtractorParam>(() => new ExtractorParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtractorParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.TrackingFeature.TrackingFeatureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtractorParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtractorParam(ExtractorParam other) : this() {
      featBlob_ = other.featBlob_;
      featType_ = other.featType_;
      RoiPoolingParam = other.roiPoolingParam_ != null ? other.RoiPoolingParam.Clone() : null;
      PsRoiPoolingParam = other.psRoiPoolingParam_ != null ? other.PsRoiPoolingParam.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtractorParam Clone() {
      return new ExtractorParam(this);
    }

    /// <summary>Field number for the "feat_blob" field.</summary>
    public const int FeatBlobFieldNumber = 1;
    private string featBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatBlob {
      get { return featBlob_; }
      set {
        featBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feat_type" field.</summary>
    public const int FeatTypeFieldNumber = 2;
    private global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam.Types.FeatureType featType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam.Types.FeatureType FeatType {
      get { return featType_; }
      set {
        featType_ = value;
      }
    }

    /// <summary>Field number for the "roi_pooling_param" field.</summary>
    public const int RoiPoolingParamFieldNumber = 3;
    private global::Apollo.Perception.Camera.TrackingFeature.ROIPoolingParam roiPoolingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.TrackingFeature.ROIPoolingParam RoiPoolingParam {
      get { return roiPoolingParam_; }
      set {
        roiPoolingParam_ = value;
      }
    }

    /// <summary>Field number for the "ps_roi_pooling_param" field.</summary>
    public const int PsRoiPoolingParamFieldNumber = 4;
    private global::Apollo.Perception.Camera.TrackingFeature.PSROIPoolingParam psRoiPoolingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.Camera.TrackingFeature.PSROIPoolingParam PsRoiPoolingParam {
      get { return psRoiPoolingParam_; }
      set {
        psRoiPoolingParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtractorParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtractorParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatBlob != other.FeatBlob) return false;
      if (FeatType != other.FeatType) return false;
      if (!object.Equals(RoiPoolingParam, other.RoiPoolingParam)) return false;
      if (!object.Equals(PsRoiPoolingParam, other.PsRoiPoolingParam)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeatBlob.Length != 0) hash ^= FeatBlob.GetHashCode();
      if (FeatType != 0) hash ^= FeatType.GetHashCode();
      if (roiPoolingParam_ != null) hash ^= RoiPoolingParam.GetHashCode();
      if (psRoiPoolingParam_ != null) hash ^= PsRoiPoolingParam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeatBlob.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FeatBlob);
      }
      if (FeatType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FeatType);
      }
      if (roiPoolingParam_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoiPoolingParam);
      }
      if (psRoiPoolingParam_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PsRoiPoolingParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeatBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatBlob);
      }
      if (FeatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FeatType);
      }
      if (roiPoolingParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoiPoolingParam);
      }
      if (psRoiPoolingParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PsRoiPoolingParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtractorParam other) {
      if (other == null) {
        return;
      }
      if (other.FeatBlob.Length != 0) {
        FeatBlob = other.FeatBlob;
      }
      if (other.FeatType != 0) {
        FeatType = other.FeatType;
      }
      if (other.roiPoolingParam_ != null) {
        if (roiPoolingParam_ == null) {
          roiPoolingParam_ = new global::Apollo.Perception.Camera.TrackingFeature.ROIPoolingParam();
        }
        RoiPoolingParam.MergeFrom(other.RoiPoolingParam);
      }
      if (other.psRoiPoolingParam_ != null) {
        if (psRoiPoolingParam_ == null) {
          psRoiPoolingParam_ = new global::Apollo.Perception.Camera.TrackingFeature.PSROIPoolingParam();
        }
        PsRoiPoolingParam.MergeFrom(other.PsRoiPoolingParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FeatBlob = input.ReadString();
            break;
          }
          case 16: {
            featType_ = (global::Apollo.Perception.Camera.TrackingFeature.ExtractorParam.Types.FeatureType) input.ReadEnum();
            break;
          }
          case 26: {
            if (roiPoolingParam_ == null) {
              roiPoolingParam_ = new global::Apollo.Perception.Camera.TrackingFeature.ROIPoolingParam();
            }
            input.ReadMessage(roiPoolingParam_);
            break;
          }
          case 34: {
            if (psRoiPoolingParam_ == null) {
              psRoiPoolingParam_ = new global::Apollo.Perception.Camera.TrackingFeature.PSROIPoolingParam();
            }
            input.ReadMessage(psRoiPoolingParam_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ExtractorParam message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FeatureType {
        [pbr::OriginalName("ROIPooling")] Roipooling = 0,
      }

    }
    #endregion

  }

  public sealed partial class ROIPoolingParam : pb::IMessage<ROIPoolingParam> {
    private static readonly pb::MessageParser<ROIPoolingParam> _parser = new pb::MessageParser<ROIPoolingParam>(() => new ROIPoolingParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ROIPoolingParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.TrackingFeature.TrackingFeatureReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIPoolingParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIPoolingParam(ROIPoolingParam other) : this() {
      pooledH_ = other.pooledH_;
      pooledW_ = other.pooledW_;
      useFloor_ = other.useFloor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROIPoolingParam Clone() {
      return new ROIPoolingParam(this);
    }

    /// <summary>Field number for the "pooled_h" field.</summary>
    public const int PooledHFieldNumber = 1;
    private int pooledH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PooledH {
      get { return pooledH_; }
      set {
        pooledH_ = value;
      }
    }

    /// <summary>Field number for the "pooled_w" field.</summary>
    public const int PooledWFieldNumber = 2;
    private int pooledW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PooledW {
      get { return pooledW_; }
      set {
        pooledW_ = value;
      }
    }

    /// <summary>Field number for the "use_floor" field.</summary>
    public const int UseFloorFieldNumber = 3;
    private bool useFloor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFloor {
      get { return useFloor_; }
      set {
        useFloor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ROIPoolingParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ROIPoolingParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PooledH != other.PooledH) return false;
      if (PooledW != other.PooledW) return false;
      if (UseFloor != other.UseFloor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PooledH != 0) hash ^= PooledH.GetHashCode();
      if (PooledW != 0) hash ^= PooledW.GetHashCode();
      if (UseFloor != false) hash ^= UseFloor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PooledH != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PooledH);
      }
      if (PooledW != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PooledW);
      }
      if (UseFloor != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseFloor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PooledH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PooledH);
      }
      if (PooledW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PooledW);
      }
      if (UseFloor != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ROIPoolingParam other) {
      if (other == null) {
        return;
      }
      if (other.PooledH != 0) {
        PooledH = other.PooledH;
      }
      if (other.PooledW != 0) {
        PooledW = other.PooledW;
      }
      if (other.UseFloor != false) {
        UseFloor = other.UseFloor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PooledH = input.ReadInt32();
            break;
          }
          case 16: {
            PooledW = input.ReadInt32();
            break;
          }
          case 24: {
            UseFloor = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PSROIPoolingParam : pb::IMessage<PSROIPoolingParam> {
    private static readonly pb::MessageParser<PSROIPoolingParam> _parser = new pb::MessageParser<PSROIPoolingParam>(() => new PSROIPoolingParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PSROIPoolingParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.TrackingFeature.TrackingFeatureReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSROIPoolingParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSROIPoolingParam(PSROIPoolingParam other) : this() {
      heatMapA_ = other.heatMapA_;
      outputDim_ = other.outputDim_;
      groupHeight_ = other.groupHeight_;
      groupWidth_ = other.groupWidth_;
      pooledHeight_ = other.pooledHeight_;
      pooledWidth_ = other.pooledWidth_;
      samplePerPart_ = other.samplePerPart_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSROIPoolingParam Clone() {
      return new PSROIPoolingParam(this);
    }

    /// <summary>Field number for the "heat_map_a" field.</summary>
    public const int HeatMapAFieldNumber = 1;
    private int heatMapA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeatMapA {
      get { return heatMapA_; }
      set {
        heatMapA_ = value;
      }
    }

    /// <summary>Field number for the "output_dim" field.</summary>
    public const int OutputDimFieldNumber = 2;
    private int outputDim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputDim {
      get { return outputDim_; }
      set {
        outputDim_ = value;
      }
    }

    /// <summary>Field number for the "group_height" field.</summary>
    public const int GroupHeightFieldNumber = 3;
    private int groupHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupHeight {
      get { return groupHeight_; }
      set {
        groupHeight_ = value;
      }
    }

    /// <summary>Field number for the "group_width" field.</summary>
    public const int GroupWidthFieldNumber = 4;
    private int groupWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupWidth {
      get { return groupWidth_; }
      set {
        groupWidth_ = value;
      }
    }

    /// <summary>Field number for the "pooled_height" field.</summary>
    public const int PooledHeightFieldNumber = 5;
    private int pooledHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PooledHeight {
      get { return pooledHeight_; }
      set {
        pooledHeight_ = value;
      }
    }

    /// <summary>Field number for the "pooled_width" field.</summary>
    public const int PooledWidthFieldNumber = 6;
    private int pooledWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PooledWidth {
      get { return pooledWidth_; }
      set {
        pooledWidth_ = value;
      }
    }

    /// <summary>Field number for the "sample_per_part" field.</summary>
    public const int SamplePerPartFieldNumber = 7;
    private int samplePerPart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SamplePerPart {
      get { return samplePerPart_; }
      set {
        samplePerPart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PSROIPoolingParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PSROIPoolingParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeatMapA != other.HeatMapA) return false;
      if (OutputDim != other.OutputDim) return false;
      if (GroupHeight != other.GroupHeight) return false;
      if (GroupWidth != other.GroupWidth) return false;
      if (PooledHeight != other.PooledHeight) return false;
      if (PooledWidth != other.PooledWidth) return false;
      if (SamplePerPart != other.SamplePerPart) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeatMapA != 0) hash ^= HeatMapA.GetHashCode();
      if (OutputDim != 0) hash ^= OutputDim.GetHashCode();
      if (GroupHeight != 0) hash ^= GroupHeight.GetHashCode();
      if (GroupWidth != 0) hash ^= GroupWidth.GetHashCode();
      if (PooledHeight != 0) hash ^= PooledHeight.GetHashCode();
      if (PooledWidth != 0) hash ^= PooledWidth.GetHashCode();
      if (SamplePerPart != 0) hash ^= SamplePerPart.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeatMapA != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeatMapA);
      }
      if (OutputDim != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputDim);
      }
      if (GroupHeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupHeight);
      }
      if (GroupWidth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GroupWidth);
      }
      if (PooledHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PooledHeight);
      }
      if (PooledWidth != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PooledWidth);
      }
      if (SamplePerPart != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SamplePerPart);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeatMapA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeatMapA);
      }
      if (OutputDim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputDim);
      }
      if (GroupHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupHeight);
      }
      if (GroupWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupWidth);
      }
      if (PooledHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PooledHeight);
      }
      if (PooledWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PooledWidth);
      }
      if (SamplePerPart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SamplePerPart);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PSROIPoolingParam other) {
      if (other == null) {
        return;
      }
      if (other.HeatMapA != 0) {
        HeatMapA = other.HeatMapA;
      }
      if (other.OutputDim != 0) {
        OutputDim = other.OutputDim;
      }
      if (other.GroupHeight != 0) {
        GroupHeight = other.GroupHeight;
      }
      if (other.GroupWidth != 0) {
        GroupWidth = other.GroupWidth;
      }
      if (other.PooledHeight != 0) {
        PooledHeight = other.PooledHeight;
      }
      if (other.PooledWidth != 0) {
        PooledWidth = other.PooledWidth;
      }
      if (other.SamplePerPart != 0) {
        SamplePerPart = other.SamplePerPart;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeatMapA = input.ReadInt32();
            break;
          }
          case 16: {
            OutputDim = input.ReadInt32();
            break;
          }
          case 24: {
            GroupHeight = input.ReadInt32();
            break;
          }
          case 32: {
            GroupWidth = input.ReadInt32();
            break;
          }
          case 40: {
            PooledHeight = input.ReadInt32();
            break;
          }
          case 48: {
            PooledWidth = input.ReadInt32();
            break;
          }
          case 56: {
            SamplePerPart = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExternalParam : pb::IMessage<ExternalParam> {
    private static readonly pb::MessageParser<ExternalParam> _parser = new pb::MessageParser<ExternalParam>(() => new ExternalParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.Camera.TrackingFeature.TrackingFeatureReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalParam(ExternalParam other) : this() {
      modelType_ = other.modelType_;
      protoFile_ = other.protoFile_;
      weightFile_ = other.weightFile_;
      resizeHeight_ = other.resizeHeight_;
      resizeWidth_ = other.resizeWidth_;
      inputBlob_ = other.inputBlob_;
      featBlob_ = other.featBlob_;
      offsetRatio_ = other.offsetRatio_;
      featureFile_ = other.featureFile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalParam Clone() {
      return new ExternalParam(this);
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 1;
    private string modelType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelType {
      get { return modelType_; }
      set {
        modelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_file" field.</summary>
    public const int ProtoFileFieldNumber = 2;
    private string protoFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtoFile {
      get { return protoFile_; }
      set {
        protoFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight_file" field.</summary>
    public const int WeightFileFieldNumber = 3;
    private string weightFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeightFile {
      get { return weightFile_; }
      set {
        weightFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resize_height" field.</summary>
    public const int ResizeHeightFieldNumber = 4;
    private int resizeHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResizeHeight {
      get { return resizeHeight_; }
      set {
        resizeHeight_ = value;
      }
    }

    /// <summary>Field number for the "resize_width" field.</summary>
    public const int ResizeWidthFieldNumber = 5;
    private int resizeWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResizeWidth {
      get { return resizeWidth_; }
      set {
        resizeWidth_ = value;
      }
    }

    /// <summary>Field number for the "input_blob" field.</summary>
    public const int InputBlobFieldNumber = 6;
    private string inputBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputBlob {
      get { return inputBlob_; }
      set {
        inputBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feat_blob" field.</summary>
    public const int FeatBlobFieldNumber = 7;
    private string featBlob_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatBlob {
      get { return featBlob_; }
      set {
        featBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset_ratio" field.</summary>
    public const int OffsetRatioFieldNumber = 8;
    private float offsetRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetRatio {
      get { return offsetRatio_; }
      set {
        offsetRatio_ = value;
      }
    }

    /// <summary>Field number for the "feature_file" field.</summary>
    public const int FeatureFileFieldNumber = 9;
    private string featureFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureFile {
      get { return featureFile_; }
      set {
        featureFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelType != other.ModelType) return false;
      if (ProtoFile != other.ProtoFile) return false;
      if (WeightFile != other.WeightFile) return false;
      if (ResizeHeight != other.ResizeHeight) return false;
      if (ResizeWidth != other.ResizeWidth) return false;
      if (InputBlob != other.InputBlob) return false;
      if (FeatBlob != other.FeatBlob) return false;
      if (OffsetRatio != other.OffsetRatio) return false;
      if (FeatureFile != other.FeatureFile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelType.Length != 0) hash ^= ModelType.GetHashCode();
      if (ProtoFile.Length != 0) hash ^= ProtoFile.GetHashCode();
      if (WeightFile.Length != 0) hash ^= WeightFile.GetHashCode();
      if (ResizeHeight != 0) hash ^= ResizeHeight.GetHashCode();
      if (ResizeWidth != 0) hash ^= ResizeWidth.GetHashCode();
      if (InputBlob.Length != 0) hash ^= InputBlob.GetHashCode();
      if (FeatBlob.Length != 0) hash ^= FeatBlob.GetHashCode();
      if (OffsetRatio != 0F) hash ^= OffsetRatio.GetHashCode();
      if (FeatureFile.Length != 0) hash ^= FeatureFile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelType);
      }
      if (ProtoFile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProtoFile);
      }
      if (WeightFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WeightFile);
      }
      if (ResizeHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ResizeHeight);
      }
      if (ResizeWidth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ResizeWidth);
      }
      if (InputBlob.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(InputBlob);
      }
      if (FeatBlob.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FeatBlob);
      }
      if (OffsetRatio != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(OffsetRatio);
      }
      if (FeatureFile.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FeatureFile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelType);
      }
      if (ProtoFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtoFile);
      }
      if (WeightFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeightFile);
      }
      if (ResizeHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResizeHeight);
      }
      if (ResizeWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResizeWidth);
      }
      if (InputBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputBlob);
      }
      if (FeatBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatBlob);
      }
      if (OffsetRatio != 0F) {
        size += 1 + 4;
      }
      if (FeatureFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureFile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalParam other) {
      if (other == null) {
        return;
      }
      if (other.ModelType.Length != 0) {
        ModelType = other.ModelType;
      }
      if (other.ProtoFile.Length != 0) {
        ProtoFile = other.ProtoFile;
      }
      if (other.WeightFile.Length != 0) {
        WeightFile = other.WeightFile;
      }
      if (other.ResizeHeight != 0) {
        ResizeHeight = other.ResizeHeight;
      }
      if (other.ResizeWidth != 0) {
        ResizeWidth = other.ResizeWidth;
      }
      if (other.InputBlob.Length != 0) {
        InputBlob = other.InputBlob;
      }
      if (other.FeatBlob.Length != 0) {
        FeatBlob = other.FeatBlob;
      }
      if (other.OffsetRatio != 0F) {
        OffsetRatio = other.OffsetRatio;
      }
      if (other.FeatureFile.Length != 0) {
        FeatureFile = other.FeatureFile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ModelType = input.ReadString();
            break;
          }
          case 18: {
            ProtoFile = input.ReadString();
            break;
          }
          case 26: {
            WeightFile = input.ReadString();
            break;
          }
          case 32: {
            ResizeHeight = input.ReadInt32();
            break;
          }
          case 40: {
            ResizeWidth = input.ReadInt32();
            break;
          }
          case 50: {
            InputBlob = input.ReadString();
            break;
          }
          case 58: {
            FeatBlob = input.ReadString();
            break;
          }
          case 69: {
            OffsetRatio = input.ReadFloat();
            break;
          }
          case 74: {
            FeatureFile = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
