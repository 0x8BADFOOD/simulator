// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Perception {

  /// <summary>Holder for reflection information generated from modules/perception/proto/perception_obstacle.proto</summary>
  public static partial class PerceptionObstacleReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/perception/proto/perception_obstacle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PerceptionObstacleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJtb2R1bGVzL3BlcmNlcHRpb24vcHJvdG8vcGVyY2VwdGlvbl9vYnN0YWNs",
            "ZS5wcm90bxIRYXBvbGxvLnBlcmNlcHRpb24aJW1vZHVsZXMvY29tbW9uL3By",
            "b3RvL2Vycm9yX2NvZGUucHJvdG8aI21vZHVsZXMvY29tbW9uL3Byb3RvL2dl",
            "b21ldHJ5LnByb3RvGiFtb2R1bGVzL2NvbW1vbi9wcm90by9oZWFkZXIucHJv",
            "dG8aIG1vZHVsZXMvbWFwL3Byb3RvL21hcF9sYW5lLnByb3RvIkAKBkJCb3gy",
            "RBIMCgR4bWluGAEgASgBEgwKBHltaW4YAiABKAESDAoEeG1heBgDIAEoARIM",
            "CgR5bWF4GAQgASgBIq8BCgtMaWdodFN0YXR1cxIVCg1icmFrZV92aXNpYmxl",
            "GAEgASgBEhcKD2JyYWtlX3N3aXRjaF9vbhgCIAEoARIZChFsZWZ0X3R1cm5f",
            "dmlzaWJsZRgDIAEoARIbChNsZWZ0X3R1cm5fc3dpdGNoX29uGAQgASgBEhoK",
            "EnJpZ2h0X3R1cm5fdmlzaWJsZRgFIAEoARIcChRyaWdodF90dXJuX3N3aXRj",
            "aF9vbhgGIAEoASL6AgoRU2Vuc29yTWVhc3VyZW1lbnQSEQoJc2Vuc29yX2lk",
            "GAEgASgJEgoKAmlkGAIgASgFEigKCHBvc2l0aW9uGAMgASgLMhYuYXBvbGxv",
            "LmNvbW1vbi5Qb2ludDNEEg0KBXRoZXRhGAQgASgBEg4KBmxlbmd0aBgFIAEo",
            "ARINCgV3aWR0aBgGIAEoARIOCgZoZWlnaHQYByABKAESKAoIdmVsb2NpdHkY",
            "CCABKAsyFi5hcG9sbG8uY29tbW9uLlBvaW50M0QSOAoEdHlwZRgJIAEoDjIq",
            "LmFwb2xsby5wZXJjZXB0aW9uLlBlcmNlcHRpb25PYnN0YWNsZS5UeXBlEj8K",
            "CHN1Yl90eXBlGAogASgOMi0uYXBvbGxvLnBlcmNlcHRpb24uUGVyY2VwdGlv",
            "bk9ic3RhY2xlLlN1YlR5cGUSEQoJdGltZXN0YW1wGAsgASgBEiYKA2JveBgM",
            "IAEoCzIZLmFwb2xsby5wZXJjZXB0aW9uLkJCb3gyRCK0CgoSUGVyY2VwdGlv",
            "bk9ic3RhY2xlEgoKAmlkGAEgASgFEigKCHBvc2l0aW9uGAIgASgLMhYuYXBv",
            "bGxvLmNvbW1vbi5Qb2ludDNEEg0KBXRoZXRhGAMgASgBEigKCHZlbG9jaXR5",
            "GAQgASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNEEg4KBmxlbmd0aBgFIAEo",
            "ARINCgV3aWR0aBgGIAEoARIOCgZoZWlnaHQYByABKAESLQoNcG9seWdvbl9w",
            "b2ludBgIIAMoCzIWLmFwb2xsby5jb21tb24uUG9pbnQzRBIVCg10cmFja2lu",
            "Z190aW1lGAkgASgBEjgKBHR5cGUYCiABKA4yKi5hcG9sbG8ucGVyY2VwdGlv",
            "bi5QZXJjZXB0aW9uT2JzdGFjbGUuVHlwZRIRCgl0aW1lc3RhbXAYCyABKAES",
            "EwoLcG9pbnRfY2xvdWQYDCADKAESEgoKY29uZmlkZW5jZRgNIAEoARJNCg9j",
            "b25maWRlbmNlX3R5cGUYDiABKA4yNC5hcG9sbG8ucGVyY2VwdGlvbi5QZXJj",
            "ZXB0aW9uT2JzdGFjbGUuQ29uZmlkZW5jZVR5cGUSJQoFZHJvcHMYDyADKAsy",
            "Fi5hcG9sbG8uY29tbW9uLlBvaW50M0QSLAoMYWNjZWxlcmF0aW9uGBAgASgL",
            "MhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNEEiwKDGFuY2hvcl9wb2ludBgRIAEo",
            "CzIWLmFwb2xsby5jb21tb24uUG9pbnQzRBIpCgZiYm94MmQYEiABKAsyGS5h",
            "cG9sbG8ucGVyY2VwdGlvbi5CQm94MkQSPwoIc3ViX3R5cGUYEyABKA4yLS5h",
            "cG9sbG8ucGVyY2VwdGlvbi5QZXJjZXB0aW9uT2JzdGFjbGUuU3ViVHlwZRI6",
            "CgxtZWFzdXJlbWVudHMYFCADKAsyJC5hcG9sbG8ucGVyY2VwdGlvbi5TZW5z",
            "b3JNZWFzdXJlbWVudBIbChNoZWlnaHRfYWJvdmVfZ3JvdW5kGBUgASgBEhsK",
            "E3Bvc2l0aW9uX2NvdmFyaWFuY2UYFiADKAESGwoTdmVsb2NpdHlfY292YXJp",
            "YW5jZRgXIAMoARIfChdhY2NlbGVyYXRpb25fY292YXJpYW5jZRgYIAMoARI0",
            "CgxsaWdodF9zdGF0dXMYGSABKAsyHi5hcG9sbG8ucGVyY2VwdGlvbi5MaWdo",
            "dFN0YXR1cyJpCgRUeXBlEgsKB1VOS05PV04QABITCg9VTktOT1dOX01PVkFC",
            "TEUQARIVChFVTktOT1dOX1VOTU9WQUJMRRACEg4KClBFREVTVFJJQU4QAxIL",
            "CgdCSUNZQ0xFEAQSCwoHVkVISUNMRRAFIlIKDkNvbmZpZGVuY2VUeXBlEhYK",
            "EkNPTkZJREVOQ0VfVU5LTk9XThAAEhIKDkNPTkZJREVOQ0VfQ05OEAESFAoQ",
            "Q09ORklERU5DRV9SQURBUhACItwBCgdTdWJUeXBlEg4KClNUX1VOS05PV04Q",
            "ABIWChJTVF9VTktOT1dOX01PVkFCTEUQARIYChRTVF9VTktOT1dOX1VOTU9W",
            "QUJMRRACEgoKBlNUX0NBUhADEgoKBlNUX1ZBThAEEgwKCFNUX1RSVUNLEAUS",
            "CgoGU1RfQlVTEAYSDgoKU1RfQ1lDTElTVBAHEhMKD1NUX01PVE9SQ1lDTElT",
            "VBAIEhEKDVNUX1RSSUNZQ0xJU1QQCRIRCg1TVF9QRURFU1RSSUFOEAoSEgoO",
            "U1RfVFJBRkZJQ0NPTkUQCyKVAgoKTGFuZU1hcmtlchI2CglsYW5lX3R5cGUY",
            "ASABKA4yIy5hcG9sbG8uaGRtYXAuTGFuZUJvdW5kYXJ5VHlwZS5UeXBlEg8K",
            "B3F1YWxpdHkYAiABKAESFAoMbW9kZWxfZGVncmVlGAMgASgFEhMKC2MwX3Bv",
            "c2l0aW9uGAQgASgBEhgKEGMxX2hlYWRpbmdfYW5nbGUYBSABKAESFAoMYzJf",
            "Y3VydmF0dXJlGAYgASgBEh8KF2MzX2N1cnZhdHVyZV9kZXJpdmF0aXZlGAcg",
            "ASgBEhIKCnZpZXdfcmFuZ2UYCCABKAESFwoPbG9uZ2l0dWRlX3N0YXJ0GAkg",
            "ASgBEhUKDWxvbmdpdHVkZV9lbmQYCiABKAEi/QEKC0xhbmVNYXJrZXJzEjcK",
            "EGxlZnRfbGFuZV9tYXJrZXIYASABKAsyHS5hcG9sbG8ucGVyY2VwdGlvbi5M",
            "YW5lTWFya2VyEjgKEXJpZ2h0X2xhbmVfbWFya2VyGAIgASgLMh0uYXBvbGxv",
            "LnBlcmNlcHRpb24uTGFuZU1hcmtlchI8ChVuZXh0X2xlZnRfbGFuZV9tYXJr",
            "ZXIYAyADKAsyHS5hcG9sbG8ucGVyY2VwdGlvbi5MYW5lTWFya2VyEj0KFm5l",
            "eHRfcmlnaHRfbGFuZV9tYXJrZXIYBCADKAsyHS5hcG9sbG8ucGVyY2VwdGlv",
            "bi5MYW5lTWFya2VyIjYKCENJUFZJbmZvEg8KB2NpcHZfaWQYASABKAUSGQoR",
            "cG90ZW50aWFsX2NpcHZfaWQYAiADKAUikwIKE1BlcmNlcHRpb25PYnN0YWNs",
            "ZXMSQgoTcGVyY2VwdGlvbl9vYnN0YWNsZRgBIAMoCzIlLmFwb2xsby5wZXJj",
            "ZXB0aW9uLlBlcmNlcHRpb25PYnN0YWNsZRIlCgZoZWFkZXIYAiABKAsyFS5h",
            "cG9sbG8uY29tbW9uLkhlYWRlchIsCgplcnJvcl9jb2RlGAMgASgOMhguYXBv",
            "bGxvLmNvbW1vbi5FcnJvckNvZGUSMwoLbGFuZV9tYXJrZXIYBCABKAsyHi5h",
            "cG9sbG8ucGVyY2VwdGlvbi5MYW5lTWFya2VycxIuCgljaXB2X2luZm8YBSAB",
            "KAsyGy5hcG9sbG8ucGVyY2VwdGlvbi5DSVBWSW5mb2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.ErrorCodeReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Hdmap.MapLaneReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.BBox2D), global::Apollo.Perception.BBox2D.Parser, new[]{ "Xmin", "Ymin", "Xmax", "Ymax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.LightStatus), global::Apollo.Perception.LightStatus.Parser, new[]{ "BrakeVisible", "BrakeSwitchOn", "LeftTurnVisible", "LeftTurnSwitchOn", "RightTurnVisible", "RightTurnSwitchOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.SensorMeasurement), global::Apollo.Perception.SensorMeasurement.Parser, new[]{ "SensorId", "Id", "Position", "Theta", "Length", "Width", "Height", "Velocity", "Type", "SubType", "Timestamp", "Box" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.PerceptionObstacle), global::Apollo.Perception.PerceptionObstacle.Parser, new[]{ "Id", "Position", "Theta", "Velocity", "Length", "Width", "Height", "PolygonPoint", "TrackingTime", "Type", "Timestamp", "PointCloud", "Confidence", "ConfidenceType", "Drops", "Acceleration", "AnchorPoint", "Bbox2D", "SubType", "Measurements", "HeightAboveGround", "PositionCovariance", "VelocityCovariance", "AccelerationCovariance", "LightStatus" }, null, new[]{ typeof(global::Apollo.Perception.PerceptionObstacle.Types.Type), typeof(global::Apollo.Perception.PerceptionObstacle.Types.ConfidenceType), typeof(global::Apollo.Perception.PerceptionObstacle.Types.SubType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.LaneMarker), global::Apollo.Perception.LaneMarker.Parser, new[]{ "LaneType", "Quality", "ModelDegree", "C0Position", "C1HeadingAngle", "C2Curvature", "C3CurvatureDerivative", "ViewRange", "LongitudeStart", "LongitudeEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.LaneMarkers), global::Apollo.Perception.LaneMarkers.Parser, new[]{ "LeftLaneMarker", "RightLaneMarker", "NextLeftLaneMarker", "NextRightLaneMarker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.CIPVInfo), global::Apollo.Perception.CIPVInfo.Parser, new[]{ "CipvId", "PotentialCipvId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Perception.PerceptionObstacles), global::Apollo.Perception.PerceptionObstacles.Parser, new[]{ "PerceptionObstacle", "Header", "ErrorCode", "LaneMarker", "CipvInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BBox2D : pb::IMessage<BBox2D> {
    private static readonly pb::MessageParser<BBox2D> _parser = new pb::MessageParser<BBox2D>(() => new BBox2D());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BBox2D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBox2D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBox2D(BBox2D other) : this() {
      xmin_ = other.xmin_;
      ymin_ = other.ymin_;
      xmax_ = other.xmax_;
      ymax_ = other.ymax_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBox2D Clone() {
      return new BBox2D(this);
    }

    /// <summary>Field number for the "xmin" field.</summary>
    public const int XminFieldNumber = 1;
    private double xmin_;
    /// <summary>
    /// in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Xmin {
      get { return xmin_; }
      set {
        xmin_ = value;
      }
    }

    /// <summary>Field number for the "ymin" field.</summary>
    public const int YminFieldNumber = 2;
    private double ymin_;
    /// <summary>
    /// in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ymin {
      get { return ymin_; }
      set {
        ymin_ = value;
      }
    }

    /// <summary>Field number for the "xmax" field.</summary>
    public const int XmaxFieldNumber = 3;
    private double xmax_;
    /// <summary>
    /// in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Xmax {
      get { return xmax_; }
      set {
        xmax_ = value;
      }
    }

    /// <summary>Field number for the "ymax" field.</summary>
    public const int YmaxFieldNumber = 4;
    private double ymax_;
    /// <summary>
    /// in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ymax {
      get { return ymax_; }
      set {
        ymax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BBox2D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BBox2D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Xmin != other.Xmin) return false;
      if (Ymin != other.Ymin) return false;
      if (Xmax != other.Xmax) return false;
      if (Ymax != other.Ymax) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Xmin != 0D) hash ^= Xmin.GetHashCode();
      if (Ymin != 0D) hash ^= Ymin.GetHashCode();
      if (Xmax != 0D) hash ^= Xmax.GetHashCode();
      if (Ymax != 0D) hash ^= Ymax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Xmin != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Xmin);
      }
      if (Ymin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Ymin);
      }
      if (Xmax != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Xmax);
      }
      if (Ymax != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Ymax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Xmin != 0D) {
        size += 1 + 8;
      }
      if (Ymin != 0D) {
        size += 1 + 8;
      }
      if (Xmax != 0D) {
        size += 1 + 8;
      }
      if (Ymax != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BBox2D other) {
      if (other == null) {
        return;
      }
      if (other.Xmin != 0D) {
        Xmin = other.Xmin;
      }
      if (other.Ymin != 0D) {
        Ymin = other.Ymin;
      }
      if (other.Xmax != 0D) {
        Xmax = other.Xmax;
      }
      if (other.Ymax != 0D) {
        Ymax = other.Ymax;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Xmin = input.ReadDouble();
            break;
          }
          case 17: {
            Ymin = input.ReadDouble();
            break;
          }
          case 25: {
            Xmax = input.ReadDouble();
            break;
          }
          case 33: {
            Ymax = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LightStatus : pb::IMessage<LightStatus> {
    private static readonly pb::MessageParser<LightStatus> _parser = new pb::MessageParser<LightStatus>(() => new LightStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightStatus(LightStatus other) : this() {
      brakeVisible_ = other.brakeVisible_;
      brakeSwitchOn_ = other.brakeSwitchOn_;
      leftTurnVisible_ = other.leftTurnVisible_;
      leftTurnSwitchOn_ = other.leftTurnSwitchOn_;
      rightTurnVisible_ = other.rightTurnVisible_;
      rightTurnSwitchOn_ = other.rightTurnSwitchOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightStatus Clone() {
      return new LightStatus(this);
    }

    /// <summary>Field number for the "brake_visible" field.</summary>
    public const int BrakeVisibleFieldNumber = 1;
    private double brakeVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeVisible {
      get { return brakeVisible_; }
      set {
        brakeVisible_ = value;
      }
    }

    /// <summary>Field number for the "brake_switch_on" field.</summary>
    public const int BrakeSwitchOnFieldNumber = 2;
    private double brakeSwitchOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakeSwitchOn {
      get { return brakeSwitchOn_; }
      set {
        brakeSwitchOn_ = value;
      }
    }

    /// <summary>Field number for the "left_turn_visible" field.</summary>
    public const int LeftTurnVisibleFieldNumber = 3;
    private double leftTurnVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeftTurnVisible {
      get { return leftTurnVisible_; }
      set {
        leftTurnVisible_ = value;
      }
    }

    /// <summary>Field number for the "left_turn_switch_on" field.</summary>
    public const int LeftTurnSwitchOnFieldNumber = 4;
    private double leftTurnSwitchOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeftTurnSwitchOn {
      get { return leftTurnSwitchOn_; }
      set {
        leftTurnSwitchOn_ = value;
      }
    }

    /// <summary>Field number for the "right_turn_visible" field.</summary>
    public const int RightTurnVisibleFieldNumber = 5;
    private double rightTurnVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RightTurnVisible {
      get { return rightTurnVisible_; }
      set {
        rightTurnVisible_ = value;
      }
    }

    /// <summary>Field number for the "right_turn_switch_on" field.</summary>
    public const int RightTurnSwitchOnFieldNumber = 6;
    private double rightTurnSwitchOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RightTurnSwitchOn {
      get { return rightTurnSwitchOn_; }
      set {
        rightTurnSwitchOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrakeVisible != other.BrakeVisible) return false;
      if (BrakeSwitchOn != other.BrakeSwitchOn) return false;
      if (LeftTurnVisible != other.LeftTurnVisible) return false;
      if (LeftTurnSwitchOn != other.LeftTurnSwitchOn) return false;
      if (RightTurnVisible != other.RightTurnVisible) return false;
      if (RightTurnSwitchOn != other.RightTurnSwitchOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrakeVisible != 0D) hash ^= BrakeVisible.GetHashCode();
      if (BrakeSwitchOn != 0D) hash ^= BrakeSwitchOn.GetHashCode();
      if (LeftTurnVisible != 0D) hash ^= LeftTurnVisible.GetHashCode();
      if (LeftTurnSwitchOn != 0D) hash ^= LeftTurnSwitchOn.GetHashCode();
      if (RightTurnVisible != 0D) hash ^= RightTurnVisible.GetHashCode();
      if (RightTurnSwitchOn != 0D) hash ^= RightTurnSwitchOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrakeVisible != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BrakeVisible);
      }
      if (BrakeSwitchOn != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BrakeSwitchOn);
      }
      if (LeftTurnVisible != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LeftTurnVisible);
      }
      if (LeftTurnSwitchOn != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LeftTurnSwitchOn);
      }
      if (RightTurnVisible != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RightTurnVisible);
      }
      if (RightTurnSwitchOn != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RightTurnSwitchOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrakeVisible != 0D) {
        size += 1 + 8;
      }
      if (BrakeSwitchOn != 0D) {
        size += 1 + 8;
      }
      if (LeftTurnVisible != 0D) {
        size += 1 + 8;
      }
      if (LeftTurnSwitchOn != 0D) {
        size += 1 + 8;
      }
      if (RightTurnVisible != 0D) {
        size += 1 + 8;
      }
      if (RightTurnSwitchOn != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightStatus other) {
      if (other == null) {
        return;
      }
      if (other.BrakeVisible != 0D) {
        BrakeVisible = other.BrakeVisible;
      }
      if (other.BrakeSwitchOn != 0D) {
        BrakeSwitchOn = other.BrakeSwitchOn;
      }
      if (other.LeftTurnVisible != 0D) {
        LeftTurnVisible = other.LeftTurnVisible;
      }
      if (other.LeftTurnSwitchOn != 0D) {
        LeftTurnSwitchOn = other.LeftTurnSwitchOn;
      }
      if (other.RightTurnVisible != 0D) {
        RightTurnVisible = other.RightTurnVisible;
      }
      if (other.RightTurnSwitchOn != 0D) {
        RightTurnSwitchOn = other.RightTurnSwitchOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            BrakeVisible = input.ReadDouble();
            break;
          }
          case 17: {
            BrakeSwitchOn = input.ReadDouble();
            break;
          }
          case 25: {
            LeftTurnVisible = input.ReadDouble();
            break;
          }
          case 33: {
            LeftTurnSwitchOn = input.ReadDouble();
            break;
          }
          case 41: {
            RightTurnVisible = input.ReadDouble();
            break;
          }
          case 49: {
            RightTurnSwitchOn = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SensorMeasurement : pb::IMessage<SensorMeasurement> {
    private static readonly pb::MessageParser<SensorMeasurement> _parser = new pb::MessageParser<SensorMeasurement>(() => new SensorMeasurement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SensorMeasurement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMeasurement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMeasurement(SensorMeasurement other) : this() {
      sensorId_ = other.sensorId_;
      id_ = other.id_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      theta_ = other.theta_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      type_ = other.type_;
      subType_ = other.subType_;
      timestamp_ = other.timestamp_;
      Box = other.box_ != null ? other.Box.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMeasurement Clone() {
      return new SensorMeasurement(this);
    }

    /// <summary>Field number for the "sensor_id" field.</summary>
    public const int SensorIdFieldNumber = 1;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Apollo.Common.Point3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 4;
    private double theta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 5;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 6;
    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 8;
    private global::Apollo.Common.Point3D velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::Apollo.Perception.PerceptionObstacle.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.PerceptionObstacle.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sub_type" field.</summary>
    public const int SubTypeFieldNumber = 10;
    private global::Apollo.Perception.PerceptionObstacle.Types.SubType subType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.PerceptionObstacle.Types.SubType SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 12;
    private global::Apollo.Perception.BBox2D box_;
    /// <summary>
    /// only for camera measurements
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.BBox2D Box {
      get { return box_; }
      set {
        box_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SensorMeasurement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SensorMeasurement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SensorId != other.SensorId) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Theta != other.Theta) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (Type != other.Type) return false;
      if (SubType != other.SubType) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Box, other.Box)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Theta != 0D) hash ^= Theta.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      if (box_ != null) hash ^= Box.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SensorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SensorId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (Theta != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Theta);
      }
      if (Length != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Height);
      }
      if (velocity_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Velocity);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SubType);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Timestamp);
      }
      if (box_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Box);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Theta != 0D) {
        size += 1 + 8;
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (box_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SensorMeasurement other) {
      if (other == null) {
        return;
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Theta != 0D) {
        Theta = other.Theta;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Apollo.Common.Point3D();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      if (other.box_ != null) {
        if (box_ == null) {
          box_ = new global::Apollo.Perception.BBox2D();
        }
        Box.MergeFrom(other.Box);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SensorId = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(position_);
            break;
          }
          case 33: {
            Theta = input.ReadDouble();
            break;
          }
          case 41: {
            Length = input.ReadDouble();
            break;
          }
          case 49: {
            Width = input.ReadDouble();
            break;
          }
          case 57: {
            Height = input.ReadDouble();
            break;
          }
          case 66: {
            if (velocity_ == null) {
              velocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 72: {
            type_ = (global::Apollo.Perception.PerceptionObstacle.Types.Type) input.ReadEnum();
            break;
          }
          case 80: {
            subType_ = (global::Apollo.Perception.PerceptionObstacle.Types.SubType) input.ReadEnum();
            break;
          }
          case 89: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 98: {
            if (box_ == null) {
              box_ = new global::Apollo.Perception.BBox2D();
            }
            input.ReadMessage(box_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PerceptionObstacle : pb::IMessage<PerceptionObstacle> {
    private static readonly pb::MessageParser<PerceptionObstacle> _parser = new pb::MessageParser<PerceptionObstacle>(() => new PerceptionObstacle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerceptionObstacle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionObstacle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionObstacle(PerceptionObstacle other) : this() {
      id_ = other.id_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      theta_ = other.theta_;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      polygonPoint_ = other.polygonPoint_.Clone();
      trackingTime_ = other.trackingTime_;
      type_ = other.type_;
      timestamp_ = other.timestamp_;
      pointCloud_ = other.pointCloud_.Clone();
      confidence_ = other.confidence_;
      confidenceType_ = other.confidenceType_;
      drops_ = other.drops_.Clone();
      Acceleration = other.acceleration_ != null ? other.Acceleration.Clone() : null;
      AnchorPoint = other.anchorPoint_ != null ? other.AnchorPoint.Clone() : null;
      Bbox2D = other.bbox2D_ != null ? other.Bbox2D.Clone() : null;
      subType_ = other.subType_;
      measurements_ = other.measurements_.Clone();
      heightAboveGround_ = other.heightAboveGround_;
      positionCovariance_ = other.positionCovariance_.Clone();
      velocityCovariance_ = other.velocityCovariance_.Clone();
      accelerationCovariance_ = other.accelerationCovariance_.Clone();
      LightStatus = other.lightStatus_ != null ? other.LightStatus.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionObstacle Clone() {
      return new PerceptionObstacle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// obstacle ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Apollo.Common.Point3D position_;
    /// <summary>
    /// obstacle position in the world coordinate system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 3;
    private double theta_;
    /// <summary>
    /// heading in the world coordinate system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 4;
    private global::Apollo.Common.Point3D velocity_;
    /// <summary>
    /// obstacle velocity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 5;
    private double length_;
    /// <summary>
    /// Size of obstacle bounding box.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 6;
    private double width_;
    /// <summary>
    /// obstacle width.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private double height_;
    /// <summary>
    /// obstacle height.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "polygon_point" field.</summary>
    public const int PolygonPointFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Apollo.Common.Point3D> _repeated_polygonPoint_codec
        = pb::FieldCodec.ForMessage(66, global::Apollo.Common.Point3D.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Point3D> polygonPoint_ = new pbc::RepeatedField<global::Apollo.Common.Point3D>();
    /// <summary>
    /// obstacle corner points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Point3D> PolygonPoint {
      get { return polygonPoint_; }
    }

    /// <summary>Field number for the "tracking_time" field.</summary>
    public const int TrackingTimeFieldNumber = 9;
    private double trackingTime_;
    /// <summary>
    /// duration of an obstacle since detection in s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrackingTime {
      get { return trackingTime_; }
      set {
        trackingTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 10;
    private global::Apollo.Perception.PerceptionObstacle.Types.Type type_ = 0;
    /// <summary>
    /// obstacle type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.PerceptionObstacle.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private double timestamp_;
    /// <summary>
    /// GPS time in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "point_cloud" field.</summary>
    public const int PointCloudFieldNumber = 12;
    private static readonly pb::FieldCodec<double> _repeated_pointCloud_codec
        = pb::FieldCodec.ForDouble(98);
    private readonly pbc::RepeatedField<double> pointCloud_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Just for offline debugging, will not fill this field onboard.
    /// Format: 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> PointCloud {
      get { return pointCloud_; }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 13;
    private double confidence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "confidence_type" field.</summary>
    public const int ConfidenceTypeFieldNumber = 14;
    private global::Apollo.Perception.PerceptionObstacle.Types.ConfidenceType confidenceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.PerceptionObstacle.Types.ConfidenceType ConfidenceType {
      get { return confidenceType_; }
      set {
        confidenceType_ = value;
      }
    }

    /// <summary>Field number for the "drops" field.</summary>
    public const int DropsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Apollo.Common.Point3D> _repeated_drops_codec
        = pb::FieldCodec.ForMessage(122, global::Apollo.Common.Point3D.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Point3D> drops_ = new pbc::RepeatedField<global::Apollo.Common.Point3D>();
    /// <summary>
    /// trajectory of object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Point3D> Drops {
      get { return drops_; }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 16;
    private global::Apollo.Common.Point3D acceleration_;
    /// <summary>
    /// The following fields are new added in Apollo 4.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "anchor_point" field.</summary>
    public const int AnchorPointFieldNumber = 17;
    private global::Apollo.Common.Point3D anchorPoint_;
    /// <summary>
    /// a stable obstacle point in the world coordinate system
    /// position defined above is the obstacle bounding box ground center
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D AnchorPoint {
      get { return anchorPoint_; }
      set {
        anchorPoint_ = value;
      }
    }

    /// <summary>Field number for the "bbox2d" field.</summary>
    public const int Bbox2DFieldNumber = 18;
    private global::Apollo.Perception.BBox2D bbox2D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.BBox2D Bbox2D {
      get { return bbox2D_; }
      set {
        bbox2D_ = value;
      }
    }

    /// <summary>Field number for the "sub_type" field.</summary>
    public const int SubTypeFieldNumber = 19;
    private global::Apollo.Perception.PerceptionObstacle.Types.SubType subType_ = 0;
    /// <summary>
    /// obstacle sub_type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.PerceptionObstacle.Types.SubType SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "measurements" field.</summary>
    public const int MeasurementsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Apollo.Perception.SensorMeasurement> _repeated_measurements_codec
        = pb::FieldCodec.ForMessage(162, global::Apollo.Perception.SensorMeasurement.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.SensorMeasurement> measurements_ = new pbc::RepeatedField<global::Apollo.Perception.SensorMeasurement>();
    /// <summary>
    /// sensor measurements
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.SensorMeasurement> Measurements {
      get { return measurements_; }
    }

    /// <summary>Field number for the "height_above_ground" field.</summary>
    public const int HeightAboveGroundFieldNumber = 21;
    private double heightAboveGround_;
    /// <summary>
    /// orthogonal distance between obstacle lowest point and ground plane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeightAboveGround {
      get { return heightAboveGround_; }
      set {
        heightAboveGround_ = value;
      }
    }

    /// <summary>Field number for the "position_covariance" field.</summary>
    public const int PositionCovarianceFieldNumber = 22;
    private static readonly pb::FieldCodec<double> _repeated_positionCovariance_codec
        = pb::FieldCodec.ForDouble(178);
    private readonly pbc::RepeatedField<double> positionCovariance_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// position covariance which is a row-majored 3x3 matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> PositionCovariance {
      get { return positionCovariance_; }
    }

    /// <summary>Field number for the "velocity_covariance" field.</summary>
    public const int VelocityCovarianceFieldNumber = 23;
    private static readonly pb::FieldCodec<double> _repeated_velocityCovariance_codec
        = pb::FieldCodec.ForDouble(186);
    private readonly pbc::RepeatedField<double> velocityCovariance_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// velocity covariance which is a row-majored 3x3 matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> VelocityCovariance {
      get { return velocityCovariance_; }
    }

    /// <summary>Field number for the "acceleration_covariance" field.</summary>
    public const int AccelerationCovarianceFieldNumber = 24;
    private static readonly pb::FieldCodec<double> _repeated_accelerationCovariance_codec
        = pb::FieldCodec.ForDouble(194);
    private readonly pbc::RepeatedField<double> accelerationCovariance_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// acceleration covariance which is a row-majored 3x3 matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AccelerationCovariance {
      get { return accelerationCovariance_; }
    }

    /// <summary>Field number for the "light_status" field.</summary>
    public const int LightStatusFieldNumber = 25;
    private global::Apollo.Perception.LightStatus lightStatus_;
    /// <summary>
    /// lights of vehicles
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.LightStatus LightStatus {
      get { return lightStatus_; }
      set {
        lightStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerceptionObstacle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerceptionObstacle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Theta != other.Theta) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!polygonPoint_.Equals(other.polygonPoint_)) return false;
      if (TrackingTime != other.TrackingTime) return false;
      if (Type != other.Type) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!pointCloud_.Equals(other.pointCloud_)) return false;
      if (Confidence != other.Confidence) return false;
      if (ConfidenceType != other.ConfidenceType) return false;
      if(!drops_.Equals(other.drops_)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(AnchorPoint, other.AnchorPoint)) return false;
      if (!object.Equals(Bbox2D, other.Bbox2D)) return false;
      if (SubType != other.SubType) return false;
      if(!measurements_.Equals(other.measurements_)) return false;
      if (HeightAboveGround != other.HeightAboveGround) return false;
      if(!positionCovariance_.Equals(other.positionCovariance_)) return false;
      if(!velocityCovariance_.Equals(other.velocityCovariance_)) return false;
      if(!accelerationCovariance_.Equals(other.accelerationCovariance_)) return false;
      if (!object.Equals(LightStatus, other.LightStatus)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Theta != 0D) hash ^= Theta.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      hash ^= polygonPoint_.GetHashCode();
      if (TrackingTime != 0D) hash ^= TrackingTime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      hash ^= pointCloud_.GetHashCode();
      if (Confidence != 0D) hash ^= Confidence.GetHashCode();
      if (ConfidenceType != 0) hash ^= ConfidenceType.GetHashCode();
      hash ^= drops_.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (anchorPoint_ != null) hash ^= AnchorPoint.GetHashCode();
      if (bbox2D_ != null) hash ^= Bbox2D.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      hash ^= measurements_.GetHashCode();
      if (HeightAboveGround != 0D) hash ^= HeightAboveGround.GetHashCode();
      hash ^= positionCovariance_.GetHashCode();
      hash ^= velocityCovariance_.GetHashCode();
      hash ^= accelerationCovariance_.GetHashCode();
      if (lightStatus_ != null) hash ^= LightStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (Theta != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Theta);
      }
      if (velocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Velocity);
      }
      if (Length != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Height);
      }
      polygonPoint_.WriteTo(output, _repeated_polygonPoint_codec);
      if (TrackingTime != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TrackingTime);
      }
      if (Type != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Type);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Timestamp);
      }
      pointCloud_.WriteTo(output, _repeated_pointCloud_codec);
      if (Confidence != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Confidence);
      }
      if (ConfidenceType != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ConfidenceType);
      }
      drops_.WriteTo(output, _repeated_drops_codec);
      if (acceleration_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Acceleration);
      }
      if (anchorPoint_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(AnchorPoint);
      }
      if (bbox2D_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Bbox2D);
      }
      if (SubType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) SubType);
      }
      measurements_.WriteTo(output, _repeated_measurements_codec);
      if (HeightAboveGround != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(HeightAboveGround);
      }
      positionCovariance_.WriteTo(output, _repeated_positionCovariance_codec);
      velocityCovariance_.WriteTo(output, _repeated_velocityCovariance_codec);
      accelerationCovariance_.WriteTo(output, _repeated_accelerationCovariance_codec);
      if (lightStatus_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(LightStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Theta != 0D) {
        size += 1 + 8;
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      size += polygonPoint_.CalculateSize(_repeated_polygonPoint_codec);
      if (TrackingTime != 0D) {
        size += 1 + 8;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      size += pointCloud_.CalculateSize(_repeated_pointCloud_codec);
      if (Confidence != 0D) {
        size += 1 + 8;
      }
      if (ConfidenceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConfidenceType);
      }
      size += drops_.CalculateSize(_repeated_drops_codec);
      if (acceleration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (anchorPoint_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnchorPoint);
      }
      if (bbox2D_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bbox2D);
      }
      if (SubType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      size += measurements_.CalculateSize(_repeated_measurements_codec);
      if (HeightAboveGround != 0D) {
        size += 2 + 8;
      }
      size += positionCovariance_.CalculateSize(_repeated_positionCovariance_codec);
      size += velocityCovariance_.CalculateSize(_repeated_velocityCovariance_codec);
      size += accelerationCovariance_.CalculateSize(_repeated_accelerationCovariance_codec);
      if (lightStatus_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LightStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerceptionObstacle other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Theta != 0D) {
        Theta = other.Theta;
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Apollo.Common.Point3D();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      polygonPoint_.Add(other.polygonPoint_);
      if (other.TrackingTime != 0D) {
        TrackingTime = other.TrackingTime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      pointCloud_.Add(other.pointCloud_);
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      if (other.ConfidenceType != 0) {
        ConfidenceType = other.ConfidenceType;
      }
      drops_.Add(other.drops_);
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          acceleration_ = new global::Apollo.Common.Point3D();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.anchorPoint_ != null) {
        if (anchorPoint_ == null) {
          anchorPoint_ = new global::Apollo.Common.Point3D();
        }
        AnchorPoint.MergeFrom(other.AnchorPoint);
      }
      if (other.bbox2D_ != null) {
        if (bbox2D_ == null) {
          bbox2D_ = new global::Apollo.Perception.BBox2D();
        }
        Bbox2D.MergeFrom(other.Bbox2D);
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      measurements_.Add(other.measurements_);
      if (other.HeightAboveGround != 0D) {
        HeightAboveGround = other.HeightAboveGround;
      }
      positionCovariance_.Add(other.positionCovariance_);
      velocityCovariance_.Add(other.velocityCovariance_);
      accelerationCovariance_.Add(other.accelerationCovariance_);
      if (other.lightStatus_ != null) {
        if (lightStatus_ == null) {
          lightStatus_ = new global::Apollo.Perception.LightStatus();
        }
        LightStatus.MergeFrom(other.LightStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(position_);
            break;
          }
          case 25: {
            Theta = input.ReadDouble();
            break;
          }
          case 34: {
            if (velocity_ == null) {
              velocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 41: {
            Length = input.ReadDouble();
            break;
          }
          case 49: {
            Width = input.ReadDouble();
            break;
          }
          case 57: {
            Height = input.ReadDouble();
            break;
          }
          case 66: {
            polygonPoint_.AddEntriesFrom(input, _repeated_polygonPoint_codec);
            break;
          }
          case 73: {
            TrackingTime = input.ReadDouble();
            break;
          }
          case 80: {
            type_ = (global::Apollo.Perception.PerceptionObstacle.Types.Type) input.ReadEnum();
            break;
          }
          case 89: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 98:
          case 97: {
            pointCloud_.AddEntriesFrom(input, _repeated_pointCloud_codec);
            break;
          }
          case 105: {
            Confidence = input.ReadDouble();
            break;
          }
          case 112: {
            confidenceType_ = (global::Apollo.Perception.PerceptionObstacle.Types.ConfidenceType) input.ReadEnum();
            break;
          }
          case 122: {
            drops_.AddEntriesFrom(input, _repeated_drops_codec);
            break;
          }
          case 130: {
            if (acceleration_ == null) {
              acceleration_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(acceleration_);
            break;
          }
          case 138: {
            if (anchorPoint_ == null) {
              anchorPoint_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(anchorPoint_);
            break;
          }
          case 146: {
            if (bbox2D_ == null) {
              bbox2D_ = new global::Apollo.Perception.BBox2D();
            }
            input.ReadMessage(bbox2D_);
            break;
          }
          case 152: {
            subType_ = (global::Apollo.Perception.PerceptionObstacle.Types.SubType) input.ReadEnum();
            break;
          }
          case 162: {
            measurements_.AddEntriesFrom(input, _repeated_measurements_codec);
            break;
          }
          case 169: {
            HeightAboveGround = input.ReadDouble();
            break;
          }
          case 178:
          case 177: {
            positionCovariance_.AddEntriesFrom(input, _repeated_positionCovariance_codec);
            break;
          }
          case 186:
          case 185: {
            velocityCovariance_.AddEntriesFrom(input, _repeated_velocityCovariance_codec);
            break;
          }
          case 194:
          case 193: {
            accelerationCovariance_.AddEntriesFrom(input, _repeated_accelerationCovariance_codec);
            break;
          }
          case 202: {
            if (lightStatus_ == null) {
              lightStatus_ = new global::Apollo.Perception.LightStatus();
            }
            input.ReadMessage(lightStatus_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PerceptionObstacle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("UNKNOWN_MOVABLE")] UnknownMovable = 1,
        [pbr::OriginalName("UNKNOWN_UNMOVABLE")] UnknownUnmovable = 2,
        /// <summary>
        /// Pedestrian, usually determined by moving behavior.
        /// </summary>
        [pbr::OriginalName("PEDESTRIAN")] Pedestrian = 3,
        /// <summary>
        /// bike, motor bike
        /// </summary>
        [pbr::OriginalName("BICYCLE")] Bicycle = 4,
        /// <summary>
        /// Passenger car or truck.
        /// </summary>
        [pbr::OriginalName("VEHICLE")] Vehicle = 5,
      }

      public enum ConfidenceType {
        [pbr::OriginalName("CONFIDENCE_UNKNOWN")] ConfidenceUnknown = 0,
        [pbr::OriginalName("CONFIDENCE_CNN")] ConfidenceCnn = 1,
        [pbr::OriginalName("CONFIDENCE_RADAR")] ConfidenceRadar = 2,
      }

      public enum SubType {
        [pbr::OriginalName("ST_UNKNOWN")] StUnknown = 0,
        [pbr::OriginalName("ST_UNKNOWN_MOVABLE")] StUnknownMovable = 1,
        [pbr::OriginalName("ST_UNKNOWN_UNMOVABLE")] StUnknownUnmovable = 2,
        [pbr::OriginalName("ST_CAR")] StCar = 3,
        [pbr::OriginalName("ST_VAN")] StVan = 4,
        [pbr::OriginalName("ST_TRUCK")] StTruck = 5,
        [pbr::OriginalName("ST_BUS")] StBus = 6,
        [pbr::OriginalName("ST_CYCLIST")] StCyclist = 7,
        [pbr::OriginalName("ST_MOTORCYCLIST")] StMotorcyclist = 8,
        [pbr::OriginalName("ST_TRICYCLIST")] StTricyclist = 9,
        [pbr::OriginalName("ST_PEDESTRIAN")] StPedestrian = 10,
        [pbr::OriginalName("ST_TRAFFICCONE")] StTrafficcone = 11,
      }

    }
    #endregion

  }

  public sealed partial class LaneMarker : pb::IMessage<LaneMarker> {
    private static readonly pb::MessageParser<LaneMarker> _parser = new pb::MessageParser<LaneMarker>(() => new LaneMarker());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneMarker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneMarker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneMarker(LaneMarker other) : this() {
      laneType_ = other.laneType_;
      quality_ = other.quality_;
      modelDegree_ = other.modelDegree_;
      c0Position_ = other.c0Position_;
      c1HeadingAngle_ = other.c1HeadingAngle_;
      c2Curvature_ = other.c2Curvature_;
      c3CurvatureDerivative_ = other.c3CurvatureDerivative_;
      viewRange_ = other.viewRange_;
      longitudeStart_ = other.longitudeStart_;
      longitudeEnd_ = other.longitudeEnd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneMarker Clone() {
      return new LaneMarker(this);
    }

    /// <summary>Field number for the "lane_type" field.</summary>
    public const int LaneTypeFieldNumber = 1;
    private global::Apollo.Hdmap.LaneBoundaryType.Types.Type laneType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.LaneBoundaryType.Types.Type LaneType {
      get { return laneType_; }
      set {
        laneType_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private double quality_;
    /// <summary>
    /// range = ; 1 = the best quality
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "model_degree" field.</summary>
    public const int ModelDegreeFieldNumber = 3;
    private int modelDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelDegree {
      get { return modelDegree_; }
      set {
        modelDegree_ = value;
      }
    }

    /// <summary>Field number for the "c0_position" field.</summary>
    public const int C0PositionFieldNumber = 4;
    private double c0Position_;
    /// <summary>
    /// equation X = c3 * Z^3 + c2 * Z^2 + c1 * Z + c0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double C0Position {
      get { return c0Position_; }
      set {
        c0Position_ = value;
      }
    }

    /// <summary>Field number for the "c1_heading_angle" field.</summary>
    public const int C1HeadingAngleFieldNumber = 5;
    private double c1HeadingAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double C1HeadingAngle {
      get { return c1HeadingAngle_; }
      set {
        c1HeadingAngle_ = value;
      }
    }

    /// <summary>Field number for the "c2_curvature" field.</summary>
    public const int C2CurvatureFieldNumber = 6;
    private double c2Curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double C2Curvature {
      get { return c2Curvature_; }
      set {
        c2Curvature_ = value;
      }
    }

    /// <summary>Field number for the "c3_curvature_derivative" field.</summary>
    public const int C3CurvatureDerivativeFieldNumber = 7;
    private double c3CurvatureDerivative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double C3CurvatureDerivative {
      get { return c3CurvatureDerivative_; }
      set {
        c3CurvatureDerivative_ = value;
      }
    }

    /// <summary>Field number for the "view_range" field.</summary>
    public const int ViewRangeFieldNumber = 8;
    private double viewRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ViewRange {
      get { return viewRange_; }
      set {
        viewRange_ = value;
      }
    }

    /// <summary>Field number for the "longitude_start" field.</summary>
    public const int LongitudeStartFieldNumber = 9;
    private double longitudeStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeStart {
      get { return longitudeStart_; }
      set {
        longitudeStart_ = value;
      }
    }

    /// <summary>Field number for the "longitude_end" field.</summary>
    public const int LongitudeEndFieldNumber = 10;
    private double longitudeEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudeEnd {
      get { return longitudeEnd_; }
      set {
        longitudeEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneMarker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneMarker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneType != other.LaneType) return false;
      if (Quality != other.Quality) return false;
      if (ModelDegree != other.ModelDegree) return false;
      if (C0Position != other.C0Position) return false;
      if (C1HeadingAngle != other.C1HeadingAngle) return false;
      if (C2Curvature != other.C2Curvature) return false;
      if (C3CurvatureDerivative != other.C3CurvatureDerivative) return false;
      if (ViewRange != other.ViewRange) return false;
      if (LongitudeStart != other.LongitudeStart) return false;
      if (LongitudeEnd != other.LongitudeEnd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LaneType != 0) hash ^= LaneType.GetHashCode();
      if (Quality != 0D) hash ^= Quality.GetHashCode();
      if (ModelDegree != 0) hash ^= ModelDegree.GetHashCode();
      if (C0Position != 0D) hash ^= C0Position.GetHashCode();
      if (C1HeadingAngle != 0D) hash ^= C1HeadingAngle.GetHashCode();
      if (C2Curvature != 0D) hash ^= C2Curvature.GetHashCode();
      if (C3CurvatureDerivative != 0D) hash ^= C3CurvatureDerivative.GetHashCode();
      if (ViewRange != 0D) hash ^= ViewRange.GetHashCode();
      if (LongitudeStart != 0D) hash ^= LongitudeStart.GetHashCode();
      if (LongitudeEnd != 0D) hash ^= LongitudeEnd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaneType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LaneType);
      }
      if (Quality != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Quality);
      }
      if (ModelDegree != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelDegree);
      }
      if (C0Position != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(C0Position);
      }
      if (C1HeadingAngle != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(C1HeadingAngle);
      }
      if (C2Curvature != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(C2Curvature);
      }
      if (C3CurvatureDerivative != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(C3CurvatureDerivative);
      }
      if (ViewRange != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ViewRange);
      }
      if (LongitudeStart != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LongitudeStart);
      }
      if (LongitudeEnd != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(LongitudeEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LaneType);
      }
      if (Quality != 0D) {
        size += 1 + 8;
      }
      if (ModelDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelDegree);
      }
      if (C0Position != 0D) {
        size += 1 + 8;
      }
      if (C1HeadingAngle != 0D) {
        size += 1 + 8;
      }
      if (C2Curvature != 0D) {
        size += 1 + 8;
      }
      if (C3CurvatureDerivative != 0D) {
        size += 1 + 8;
      }
      if (ViewRange != 0D) {
        size += 1 + 8;
      }
      if (LongitudeStart != 0D) {
        size += 1 + 8;
      }
      if (LongitudeEnd != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneMarker other) {
      if (other == null) {
        return;
      }
      if (other.LaneType != 0) {
        LaneType = other.LaneType;
      }
      if (other.Quality != 0D) {
        Quality = other.Quality;
      }
      if (other.ModelDegree != 0) {
        ModelDegree = other.ModelDegree;
      }
      if (other.C0Position != 0D) {
        C0Position = other.C0Position;
      }
      if (other.C1HeadingAngle != 0D) {
        C1HeadingAngle = other.C1HeadingAngle;
      }
      if (other.C2Curvature != 0D) {
        C2Curvature = other.C2Curvature;
      }
      if (other.C3CurvatureDerivative != 0D) {
        C3CurvatureDerivative = other.C3CurvatureDerivative;
      }
      if (other.ViewRange != 0D) {
        ViewRange = other.ViewRange;
      }
      if (other.LongitudeStart != 0D) {
        LongitudeStart = other.LongitudeStart;
      }
      if (other.LongitudeEnd != 0D) {
        LongitudeEnd = other.LongitudeEnd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            laneType_ = (global::Apollo.Hdmap.LaneBoundaryType.Types.Type) input.ReadEnum();
            break;
          }
          case 17: {
            Quality = input.ReadDouble();
            break;
          }
          case 24: {
            ModelDegree = input.ReadInt32();
            break;
          }
          case 33: {
            C0Position = input.ReadDouble();
            break;
          }
          case 41: {
            C1HeadingAngle = input.ReadDouble();
            break;
          }
          case 49: {
            C2Curvature = input.ReadDouble();
            break;
          }
          case 57: {
            C3CurvatureDerivative = input.ReadDouble();
            break;
          }
          case 65: {
            ViewRange = input.ReadDouble();
            break;
          }
          case 73: {
            LongitudeStart = input.ReadDouble();
            break;
          }
          case 81: {
            LongitudeEnd = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneMarkers : pb::IMessage<LaneMarkers> {
    private static readonly pb::MessageParser<LaneMarkers> _parser = new pb::MessageParser<LaneMarkers>(() => new LaneMarkers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneMarkers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneMarkers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneMarkers(LaneMarkers other) : this() {
      LeftLaneMarker = other.leftLaneMarker_ != null ? other.LeftLaneMarker.Clone() : null;
      RightLaneMarker = other.rightLaneMarker_ != null ? other.RightLaneMarker.Clone() : null;
      nextLeftLaneMarker_ = other.nextLeftLaneMarker_.Clone();
      nextRightLaneMarker_ = other.nextRightLaneMarker_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneMarkers Clone() {
      return new LaneMarkers(this);
    }

    /// <summary>Field number for the "left_lane_marker" field.</summary>
    public const int LeftLaneMarkerFieldNumber = 1;
    private global::Apollo.Perception.LaneMarker leftLaneMarker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.LaneMarker LeftLaneMarker {
      get { return leftLaneMarker_; }
      set {
        leftLaneMarker_ = value;
      }
    }

    /// <summary>Field number for the "right_lane_marker" field.</summary>
    public const int RightLaneMarkerFieldNumber = 2;
    private global::Apollo.Perception.LaneMarker rightLaneMarker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.LaneMarker RightLaneMarker {
      get { return rightLaneMarker_; }
      set {
        rightLaneMarker_ = value;
      }
    }

    /// <summary>Field number for the "next_left_lane_marker" field.</summary>
    public const int NextLeftLaneMarkerFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Perception.LaneMarker> _repeated_nextLeftLaneMarker_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Perception.LaneMarker.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.LaneMarker> nextLeftLaneMarker_ = new pbc::RepeatedField<global::Apollo.Perception.LaneMarker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.LaneMarker> NextLeftLaneMarker {
      get { return nextLeftLaneMarker_; }
    }

    /// <summary>Field number for the "next_right_lane_marker" field.</summary>
    public const int NextRightLaneMarkerFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Perception.LaneMarker> _repeated_nextRightLaneMarker_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Perception.LaneMarker.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.LaneMarker> nextRightLaneMarker_ = new pbc::RepeatedField<global::Apollo.Perception.LaneMarker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.LaneMarker> NextRightLaneMarker {
      get { return nextRightLaneMarker_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneMarkers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneMarkers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LeftLaneMarker, other.LeftLaneMarker)) return false;
      if (!object.Equals(RightLaneMarker, other.RightLaneMarker)) return false;
      if(!nextLeftLaneMarker_.Equals(other.nextLeftLaneMarker_)) return false;
      if(!nextRightLaneMarker_.Equals(other.nextRightLaneMarker_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (leftLaneMarker_ != null) hash ^= LeftLaneMarker.GetHashCode();
      if (rightLaneMarker_ != null) hash ^= RightLaneMarker.GetHashCode();
      hash ^= nextLeftLaneMarker_.GetHashCode();
      hash ^= nextRightLaneMarker_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (leftLaneMarker_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LeftLaneMarker);
      }
      if (rightLaneMarker_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RightLaneMarker);
      }
      nextLeftLaneMarker_.WriteTo(output, _repeated_nextLeftLaneMarker_codec);
      nextRightLaneMarker_.WriteTo(output, _repeated_nextRightLaneMarker_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (leftLaneMarker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftLaneMarker);
      }
      if (rightLaneMarker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightLaneMarker);
      }
      size += nextLeftLaneMarker_.CalculateSize(_repeated_nextLeftLaneMarker_codec);
      size += nextRightLaneMarker_.CalculateSize(_repeated_nextRightLaneMarker_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneMarkers other) {
      if (other == null) {
        return;
      }
      if (other.leftLaneMarker_ != null) {
        if (leftLaneMarker_ == null) {
          leftLaneMarker_ = new global::Apollo.Perception.LaneMarker();
        }
        LeftLaneMarker.MergeFrom(other.LeftLaneMarker);
      }
      if (other.rightLaneMarker_ != null) {
        if (rightLaneMarker_ == null) {
          rightLaneMarker_ = new global::Apollo.Perception.LaneMarker();
        }
        RightLaneMarker.MergeFrom(other.RightLaneMarker);
      }
      nextLeftLaneMarker_.Add(other.nextLeftLaneMarker_);
      nextRightLaneMarker_.Add(other.nextRightLaneMarker_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (leftLaneMarker_ == null) {
              leftLaneMarker_ = new global::Apollo.Perception.LaneMarker();
            }
            input.ReadMessage(leftLaneMarker_);
            break;
          }
          case 18: {
            if (rightLaneMarker_ == null) {
              rightLaneMarker_ = new global::Apollo.Perception.LaneMarker();
            }
            input.ReadMessage(rightLaneMarker_);
            break;
          }
          case 26: {
            nextLeftLaneMarker_.AddEntriesFrom(input, _repeated_nextLeftLaneMarker_codec);
            break;
          }
          case 34: {
            nextRightLaneMarker_.AddEntriesFrom(input, _repeated_nextRightLaneMarker_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CIPVInfo : pb::IMessage<CIPVInfo> {
    private static readonly pb::MessageParser<CIPVInfo> _parser = new pb::MessageParser<CIPVInfo>(() => new CIPVInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIPVInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIPVInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIPVInfo(CIPVInfo other) : this() {
      cipvId_ = other.cipvId_;
      potentialCipvId_ = other.potentialCipvId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIPVInfo Clone() {
      return new CIPVInfo(this);
    }

    /// <summary>Field number for the "cipv_id" field.</summary>
    public const int CipvIdFieldNumber = 1;
    private int cipvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CipvId {
      get { return cipvId_; }
      set {
        cipvId_ = value;
      }
    }

    /// <summary>Field number for the "potential_cipv_id" field.</summary>
    public const int PotentialCipvIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_potentialCipvId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> potentialCipvId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PotentialCipvId {
      get { return potentialCipvId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIPVInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIPVInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CipvId != other.CipvId) return false;
      if(!potentialCipvId_.Equals(other.potentialCipvId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CipvId != 0) hash ^= CipvId.GetHashCode();
      hash ^= potentialCipvId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CipvId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CipvId);
      }
      potentialCipvId_.WriteTo(output, _repeated_potentialCipvId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CipvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CipvId);
      }
      size += potentialCipvId_.CalculateSize(_repeated_potentialCipvId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIPVInfo other) {
      if (other == null) {
        return;
      }
      if (other.CipvId != 0) {
        CipvId = other.CipvId;
      }
      potentialCipvId_.Add(other.potentialCipvId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CipvId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            potentialCipvId_.AddEntriesFrom(input, _repeated_potentialCipvId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PerceptionObstacles : pb::IMessage<PerceptionObstacles> {
    private static readonly pb::MessageParser<PerceptionObstacles> _parser = new pb::MessageParser<PerceptionObstacles>(() => new PerceptionObstacles());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerceptionObstacles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Perception.PerceptionObstacleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionObstacles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionObstacles(PerceptionObstacles other) : this() {
      perceptionObstacle_ = other.perceptionObstacle_.Clone();
      Header = other.header_ != null ? other.Header.Clone() : null;
      errorCode_ = other.errorCode_;
      LaneMarker = other.laneMarker_ != null ? other.LaneMarker.Clone() : null;
      CipvInfo = other.cipvInfo_ != null ? other.CipvInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionObstacles Clone() {
      return new PerceptionObstacles(this);
    }

    /// <summary>Field number for the "perception_obstacle" field.</summary>
    public const int PerceptionObstacleFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Perception.PerceptionObstacle> _repeated_perceptionObstacle_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Perception.PerceptionObstacle.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Perception.PerceptionObstacle> perceptionObstacle_ = new pbc::RepeatedField<global::Apollo.Perception.PerceptionObstacle>();
    /// <summary>
    /// An array of obstacles
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Perception.PerceptionObstacle> PerceptionObstacle {
      get { return perceptionObstacle_; }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 2;
    private global::Apollo.Common.Header header_;
    /// <summary>
    /// Header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 3;
    private global::Apollo.Common.ErrorCode errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.ErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "lane_marker" field.</summary>
    public const int LaneMarkerFieldNumber = 4;
    private global::Apollo.Perception.LaneMarkers laneMarker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.LaneMarkers LaneMarker {
      get { return laneMarker_; }
      set {
        laneMarker_ = value;
      }
    }

    /// <summary>Field number for the "cipv_info" field.</summary>
    public const int CipvInfoFieldNumber = 5;
    private global::Apollo.Perception.CIPVInfo cipvInfo_;
    /// <summary>
    /// Closest In Path Vehicle (CIPV)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.CIPVInfo CipvInfo {
      get { return cipvInfo_; }
      set {
        cipvInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerceptionObstacles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerceptionObstacles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!perceptionObstacle_.Equals(other.perceptionObstacle_)) return false;
      if (!object.Equals(Header, other.Header)) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (!object.Equals(LaneMarker, other.LaneMarker)) return false;
      if (!object.Equals(CipvInfo, other.CipvInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= perceptionObstacle_.GetHashCode();
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (laneMarker_ != null) hash ^= LaneMarker.GetHashCode();
      if (cipvInfo_ != null) hash ^= CipvInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      perceptionObstacle_.WriteTo(output, _repeated_perceptionObstacle_codec);
      if (header_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Header);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ErrorCode);
      }
      if (laneMarker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LaneMarker);
      }
      if (cipvInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CipvInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += perceptionObstacle_.CalculateSize(_repeated_perceptionObstacle_codec);
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (laneMarker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneMarker);
      }
      if (cipvInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CipvInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerceptionObstacles other) {
      if (other == null) {
        return;
      }
      perceptionObstacle_.Add(other.perceptionObstacle_);
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.laneMarker_ != null) {
        if (laneMarker_ == null) {
          laneMarker_ = new global::Apollo.Perception.LaneMarkers();
        }
        LaneMarker.MergeFrom(other.LaneMarker);
      }
      if (other.cipvInfo_ != null) {
        if (cipvInfo_ == null) {
          cipvInfo_ = new global::Apollo.Perception.CIPVInfo();
        }
        CipvInfo.MergeFrom(other.CipvInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            perceptionObstacle_.AddEntriesFrom(input, _repeated_perceptionObstacle_codec);
            break;
          }
          case 18: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 24: {
            errorCode_ = (global::Apollo.Common.ErrorCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (laneMarker_ == null) {
              laneMarker_ = new global::Apollo.Perception.LaneMarkers();
            }
            input.ReadMessage(laneMarker_);
            break;
          }
          case 42: {
            if (cipvInfo_ == null) {
              cipvInfo_ = new global::Apollo.Perception.CIPVInfo();
            }
            input.ReadMessage(cipvInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
