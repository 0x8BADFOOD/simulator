// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/pose.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Localization {

  /// <summary>Holder for reflection information generated from modules/localization/proto/pose.proto</summary>
  public static partial class PoseReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/localization/proto/pose.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PoseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVtb2R1bGVzL2xvY2FsaXphdGlvbi9wcm90by9wb3NlLnByb3RvEhNhcG9s",
            "bG8ubG9jYWxpemF0aW9uGiNtb2R1bGVzL2NvbW1vbi9wcm90by9nZW9tZXRy",
            "eS5wcm90byKnAwoEUG9zZRIpCghwb3NpdGlvbhgBIAEoCzIXLmFwb2xsby5j",
            "b21tb24uUG9pbnRFTlUSLgoLb3JpZW50YXRpb24YAiABKAsyGS5hcG9sbG8u",
            "Y29tbW9uLlF1YXRlcm5pb24SLwoPbGluZWFyX3ZlbG9jaXR5GAMgASgLMhYu",
            "YXBvbGxvLmNvbW1vbi5Qb2ludDNEEjMKE2xpbmVhcl9hY2NlbGVyYXRpb24Y",
            "BCABKAsyFi5hcG9sbG8uY29tbW9uLlBvaW50M0QSMAoQYW5ndWxhcl92ZWxv",
            "Y2l0eRgFIAEoCzIWLmFwb2xsby5jb21tb24uUG9pbnQzRBIPCgdoZWFkaW5n",
            "GAYgASgBEjcKF2xpbmVhcl9hY2NlbGVyYXRpb25fdnJmGAcgASgLMhYuYXBv",
            "bGxvLmNvbW1vbi5Qb2ludDNEEjQKFGFuZ3VsYXJfdmVsb2NpdHlfdnJmGAgg",
            "ASgLMhYuYXBvbGxvLmNvbW1vbi5Qb2ludDNEEiwKDGV1bGVyX2FuZ2xlcxgJ",
            "IAEoCzIWLmFwb2xsby5jb21tb24uUG9pbnQzRGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.Pose), global::Apollo.Localization.Pose.Parser, new[]{ "Position", "Orientation", "LinearVelocity", "LinearAcceleration", "AngularVelocity", "Heading", "LinearAccelerationVrf", "AngularVelocityVrf", "EulerAngles" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Pose : pb::IMessage<Pose> {
    private static readonly pb::MessageParser<Pose> _parser = new pb::MessageParser<Pose>(() => new Pose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.PoseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose(Pose other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Orientation = other.orientation_ != null ? other.Orientation.Clone() : null;
      LinearVelocity = other.linearVelocity_ != null ? other.LinearVelocity.Clone() : null;
      LinearAcceleration = other.linearAcceleration_ != null ? other.LinearAcceleration.Clone() : null;
      AngularVelocity = other.angularVelocity_ != null ? other.AngularVelocity.Clone() : null;
      heading_ = other.heading_;
      LinearAccelerationVrf = other.linearAccelerationVrf_ != null ? other.LinearAccelerationVrf.Clone() : null;
      AngularVelocityVrf = other.angularVelocityVrf_ != null ? other.AngularVelocityVrf.Clone() : null;
      EulerAngles = other.eulerAngles_ != null ? other.EulerAngles.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose Clone() {
      return new Pose(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Apollo.Common.PointENU position_;
    /// <summary>
    /// Position of the vehicle reference point (VRP) in the map reference frame.
    /// The VRP is the center of rear axle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 2;
    private global::Apollo.Common.Quaternion orientation_;
    /// <summary>
    /// A quaternion that represents the rotation from the IMU coordinate
    /// (Right/Forward/Up) to the
    /// world coordinate (East/North/Up).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Quaternion Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "linear_velocity" field.</summary>
    public const int LinearVelocityFieldNumber = 3;
    private global::Apollo.Common.Point3D linearVelocity_;
    /// <summary>
    /// Linear velocity of the VRP in the map reference frame.
    /// East/north/up in meters per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearVelocity {
      get { return linearVelocity_; }
      set {
        linearVelocity_ = value;
      }
    }

    /// <summary>Field number for the "linear_acceleration" field.</summary>
    public const int LinearAccelerationFieldNumber = 4;
    private global::Apollo.Common.Point3D linearAcceleration_;
    /// <summary>
    /// Linear acceleration of the VRP in the map reference frame.
    /// East/north/up in meters per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearAcceleration {
      get { return linearAcceleration_; }
      set {
        linearAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 5;
    private global::Apollo.Common.Point3D angularVelocity_;
    /// <summary>
    /// Angular velocity of the vehicle in the map reference frame.
    /// Around east/north/up axes in radians per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 6;
    private double heading_;
    /// <summary>
    /// Heading
    /// The heading is zero when the car is facing East and positive when facing
    /// North.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "linear_acceleration_vrf" field.</summary>
    public const int LinearAccelerationVrfFieldNumber = 7;
    private global::Apollo.Common.Point3D linearAccelerationVrf_;
    /// <summary>
    /// Linear acceleration of the VRP in the vehicle reference frame.
    /// Right/forward/up in meters per square second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D LinearAccelerationVrf {
      get { return linearAccelerationVrf_; }
      set {
        linearAccelerationVrf_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity_vrf" field.</summary>
    public const int AngularVelocityVrfFieldNumber = 8;
    private global::Apollo.Common.Point3D angularVelocityVrf_;
    /// <summary>
    /// Angular velocity of the VRP in the vehicle reference frame.
    /// Around right/forward/up axes in radians per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D AngularVelocityVrf {
      get { return angularVelocityVrf_; }
      set {
        angularVelocityVrf_ = value;
      }
    }

    /// <summary>Field number for the "euler_angles" field.</summary>
    public const int EulerAnglesFieldNumber = 9;
    private global::Apollo.Common.Point3D eulerAngles_;
    /// <summary>
    /// Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
    /// in world coordinate (East/North/Up)
    /// The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
    /// The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
    /// The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
    /// The direction of rotation follows the right-hand rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Point3D EulerAngles {
      get { return eulerAngles_; }
      set {
        eulerAngles_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (!object.Equals(LinearVelocity, other.LinearVelocity)) return false;
      if (!object.Equals(LinearAcceleration, other.LinearAcceleration)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (Heading != other.Heading) return false;
      if (!object.Equals(LinearAccelerationVrf, other.LinearAccelerationVrf)) return false;
      if (!object.Equals(AngularVelocityVrf, other.AngularVelocityVrf)) return false;
      if (!object.Equals(EulerAngles, other.EulerAngles)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (linearVelocity_ != null) hash ^= LinearVelocity.GetHashCode();
      if (linearAcceleration_ != null) hash ^= LinearAcceleration.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (linearAccelerationVrf_ != null) hash ^= LinearAccelerationVrf.GetHashCode();
      if (angularVelocityVrf_ != null) hash ^= AngularVelocityVrf.GetHashCode();
      if (eulerAngles_ != null) hash ^= EulerAngles.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Orientation);
      }
      if (linearVelocity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LinearVelocity);
      }
      if (linearAcceleration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LinearAcceleration);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AngularVelocity);
      }
      if (Heading != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Heading);
      }
      if (linearAccelerationVrf_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LinearAccelerationVrf);
      }
      if (angularVelocityVrf_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AngularVelocityVrf);
      }
      if (eulerAngles_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EulerAngles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (linearVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearVelocity);
      }
      if (linearAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearAcceleration);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (linearAccelerationVrf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearAccelerationVrf);
      }
      if (angularVelocityVrf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocityVrf);
      }
      if (eulerAngles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EulerAngles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pose other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Apollo.Common.PointENU();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          orientation_ = new global::Apollo.Common.Quaternion();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.linearVelocity_ != null) {
        if (linearVelocity_ == null) {
          linearVelocity_ = new global::Apollo.Common.Point3D();
        }
        LinearVelocity.MergeFrom(other.LinearVelocity);
      }
      if (other.linearAcceleration_ != null) {
        if (linearAcceleration_ == null) {
          linearAcceleration_ = new global::Apollo.Common.Point3D();
        }
        LinearAcceleration.MergeFrom(other.LinearAcceleration);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::Apollo.Common.Point3D();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.linearAccelerationVrf_ != null) {
        if (linearAccelerationVrf_ == null) {
          linearAccelerationVrf_ = new global::Apollo.Common.Point3D();
        }
        LinearAccelerationVrf.MergeFrom(other.LinearAccelerationVrf);
      }
      if (other.angularVelocityVrf_ != null) {
        if (angularVelocityVrf_ == null) {
          angularVelocityVrf_ = new global::Apollo.Common.Point3D();
        }
        AngularVelocityVrf.MergeFrom(other.AngularVelocityVrf);
      }
      if (other.eulerAngles_ != null) {
        if (eulerAngles_ == null) {
          eulerAngles_ = new global::Apollo.Common.Point3D();
        }
        EulerAngles.MergeFrom(other.EulerAngles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (orientation_ == null) {
              orientation_ = new global::Apollo.Common.Quaternion();
            }
            input.ReadMessage(orientation_);
            break;
          }
          case 26: {
            if (linearVelocity_ == null) {
              linearVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearVelocity_);
            break;
          }
          case 34: {
            if (linearAcceleration_ == null) {
              linearAcceleration_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearAcceleration_);
            break;
          }
          case 42: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
          case 49: {
            Heading = input.ReadDouble();
            break;
          }
          case 58: {
            if (linearAccelerationVrf_ == null) {
              linearAccelerationVrf_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(linearAccelerationVrf_);
            break;
          }
          case 66: {
            if (angularVelocityVrf_ == null) {
              angularVelocityVrf_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(angularVelocityVrf_);
            break;
          }
          case 74: {
            if (eulerAngles_ == null) {
              eulerAngles_ = new global::Apollo.Common.Point3D();
            }
            input.ReadMessage(eulerAngles_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
