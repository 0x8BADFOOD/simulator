// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/gnss_pnt_result.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Localization {

  /// <summary>Holder for reflection information generated from modules/localization/proto/gnss_pnt_result.proto</summary>
  public static partial class GnssPntResultReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/localization/proto/gnss_pnt_result.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GnssPntResultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBtb2R1bGVzL2xvY2FsaXphdGlvbi9wcm90by9nbnNzX3BudF9yZXN1bHQu",
            "cHJvdG8SE2Fwb2xsby5sb2NhbGl6YXRpb24aNW1vZHVsZXMvZHJpdmVycy9n",
            "bnNzL3Byb3RvL2duc3NfcmF3X29ic2VydmF0aW9uLnByb3RvImYKDFNhdERp",
            "ckNvc2luZRIPCgdzYXRfcHJuGAEgASgNEg8KB3NhdF9zeXMYAiABKA0SEAoI",
            "Y29zaW5lX3gYAyABKAESEAoIY29zaW5lX3kYBCABKAESEAoIY29zaW5lX3oY",
            "BSABKAEilQQKDUduc3NQbnRSZXN1bHQSEwoLcmVjZWl2ZXJfaWQYASABKA0S",
            "NAoJdGltZV90eXBlGAIgASgOMiEuYXBvbGxvLmRyaXZlcnMuZ25zcy5HbnNz",
            "VGltZVR5cGUSEQoJZ25zc193ZWVrGAMgASgNEhUKDWduc3Nfc2Vjb25kX3MY",
            "BCABKAESLgoIcG50X3R5cGUYBSABKA4yHC5hcG9sbG8ubG9jYWxpemF0aW9u",
            "LlBudFR5cGUSDwoHcG9zX3hfbRgGIAEoARIPCgdwb3NfeV9tGAcgASgBEg8K",
            "B3Bvc196X20YCCABKAESEwoLc3RkX3Bvc194X20YCSABKAESEwoLc3RkX3Bv",
            "c195X20YCiABKAESEwoLc3RkX3Bvc196X20YCyABKAESDwoHdmVsX3hfbRgM",
            "IAEoARIPCgd2ZWxfeV9tGA0gASgBEg8KB3ZlbF96X20YDiABKAESEwoLc3Rk",
            "X3ZlbF94X20YDyABKAESEwoLc3RkX3ZlbF95X20YECABKAESEwoLc3RkX3Zl",
            "bF96X20YESABKAESFgoOc292bGVkX3NhdF9udW0YEiABKA0SOQoOc2F0X2Rp",
            "cl9jb3NpbmUYEyADKAsyIS5hcG9sbG8ubG9jYWxpemF0aW9uLlNhdERpckNv",
            "c2luZRIMCgRwZG9wGBQgASgBEgwKBGhkb3AYFSABKAESDAoEdmRvcBgWIAEo",
            "ASpyCgdQbnRUeXBlEg8KC1BOVF9JTlZBTElEEAASCwoHUE5UX1NQUBABEhAK",
            "DFBOVF9QSEFTRV9URBACEhEKDVBOVF9DT0RFX0RJRkYQAxIRCg1QTlRfUlRL",
            "X0ZMT0FUEAQSEQoNUE5UX1JUS19GSVhFRBAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Drivers.Gnss.GnssRawObservationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Localization.PntType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.SatDirCosine), global::Apollo.Localization.SatDirCosine.Parser, new[]{ "SatPrn", "SatSys", "CosineX", "CosineY", "CosineZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.GnssPntResult), global::Apollo.Localization.GnssPntResult.Parser, new[]{ "ReceiverId", "TimeType", "GnssWeek", "GnssSecondS", "PntType", "PosXM", "PosYM", "PosZM", "StdPosXM", "StdPosYM", "StdPosZM", "VelXM", "VelYM", "VelZM", "StdVelXM", "StdVelYM", "StdVelZM", "SovledSatNum", "SatDirCosine", "Pdop", "Hdop", "Vdop" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PntType {
    [pbr::OriginalName("PNT_INVALID")] PntInvalid = 0,
    [pbr::OriginalName("PNT_SPP")] PntSpp = 1,
    [pbr::OriginalName("PNT_PHASE_TD")] PntPhaseTd = 2,
    [pbr::OriginalName("PNT_CODE_DIFF")] PntCodeDiff = 3,
    [pbr::OriginalName("PNT_RTK_FLOAT")] PntRtkFloat = 4,
    [pbr::OriginalName("PNT_RTK_FIXED")] PntRtkFixed = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Define a rover' direction cosine to an observed satellite under WGS-84
  /// </summary>
  public sealed partial class SatDirCosine : pb::IMessage<SatDirCosine> {
    private static readonly pb::MessageParser<SatDirCosine> _parser = new pb::MessageParser<SatDirCosine>(() => new SatDirCosine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SatDirCosine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.GnssPntResultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatDirCosine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatDirCosine(SatDirCosine other) : this() {
      satPrn_ = other.satPrn_;
      satSys_ = other.satSys_;
      cosineX_ = other.cosineX_;
      cosineY_ = other.cosineY_;
      cosineZ_ = other.cosineZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatDirCosine Clone() {
      return new SatDirCosine(this);
    }

    /// <summary>Field number for the "sat_prn" field.</summary>
    public const int SatPrnFieldNumber = 1;
    private uint satPrn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SatPrn {
      get { return satPrn_; }
      set {
        satPrn_ = value;
      }
    }

    /// <summary>Field number for the "sat_sys" field.</summary>
    public const int SatSysFieldNumber = 2;
    private uint satSys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SatSys {
      get { return satSys_; }
      set {
        satSys_ = value;
      }
    }

    /// <summary>Field number for the "cosine_x" field.</summary>
    public const int CosineXFieldNumber = 3;
    private double cosineX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CosineX {
      get { return cosineX_; }
      set {
        cosineX_ = value;
      }
    }

    /// <summary>Field number for the "cosine_y" field.</summary>
    public const int CosineYFieldNumber = 4;
    private double cosineY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CosineY {
      get { return cosineY_; }
      set {
        cosineY_ = value;
      }
    }

    /// <summary>Field number for the "cosine_z" field.</summary>
    public const int CosineZFieldNumber = 5;
    private double cosineZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CosineZ {
      get { return cosineZ_; }
      set {
        cosineZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SatDirCosine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SatDirCosine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatPrn != other.SatPrn) return false;
      if (SatSys != other.SatSys) return false;
      if (CosineX != other.CosineX) return false;
      if (CosineY != other.CosineY) return false;
      if (CosineZ != other.CosineZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatPrn != 0) hash ^= SatPrn.GetHashCode();
      if (SatSys != 0) hash ^= SatSys.GetHashCode();
      if (CosineX != 0D) hash ^= CosineX.GetHashCode();
      if (CosineY != 0D) hash ^= CosineY.GetHashCode();
      if (CosineZ != 0D) hash ^= CosineZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SatPrn != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SatPrn);
      }
      if (SatSys != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SatSys);
      }
      if (CosineX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CosineX);
      }
      if (CosineY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CosineY);
      }
      if (CosineZ != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CosineZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatPrn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SatPrn);
      }
      if (SatSys != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SatSys);
      }
      if (CosineX != 0D) {
        size += 1 + 8;
      }
      if (CosineY != 0D) {
        size += 1 + 8;
      }
      if (CosineZ != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SatDirCosine other) {
      if (other == null) {
        return;
      }
      if (other.SatPrn != 0) {
        SatPrn = other.SatPrn;
      }
      if (other.SatSys != 0) {
        SatSys = other.SatSys;
      }
      if (other.CosineX != 0D) {
        CosineX = other.CosineX;
      }
      if (other.CosineY != 0D) {
        CosineY = other.CosineY;
      }
      if (other.CosineZ != 0D) {
        CosineZ = other.CosineZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SatPrn = input.ReadUInt32();
            break;
          }
          case 16: {
            SatSys = input.ReadUInt32();
            break;
          }
          case 25: {
            CosineX = input.ReadDouble();
            break;
          }
          case 33: {
            CosineY = input.ReadDouble();
            break;
          }
          case 41: {
            CosineZ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Define the position result of a rover,
  /// and pnt stands for Positioning, Navigating and Timing
  /// </summary>
  public sealed partial class GnssPntResult : pb::IMessage<GnssPntResult> {
    private static readonly pb::MessageParser<GnssPntResult> _parser = new pb::MessageParser<GnssPntResult>(() => new GnssPntResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GnssPntResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.GnssPntResultReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssPntResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssPntResult(GnssPntResult other) : this() {
      receiverId_ = other.receiverId_;
      timeType_ = other.timeType_;
      gnssWeek_ = other.gnssWeek_;
      gnssSecondS_ = other.gnssSecondS_;
      pntType_ = other.pntType_;
      posXM_ = other.posXM_;
      posYM_ = other.posYM_;
      posZM_ = other.posZM_;
      stdPosXM_ = other.stdPosXM_;
      stdPosYM_ = other.stdPosYM_;
      stdPosZM_ = other.stdPosZM_;
      velXM_ = other.velXM_;
      velYM_ = other.velYM_;
      velZM_ = other.velZM_;
      stdVelXM_ = other.stdVelXM_;
      stdVelYM_ = other.stdVelYM_;
      stdVelZM_ = other.stdVelZM_;
      sovledSatNum_ = other.sovledSatNum_;
      satDirCosine_ = other.satDirCosine_.Clone();
      pdop_ = other.pdop_;
      hdop_ = other.hdop_;
      vdop_ = other.vdop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssPntResult Clone() {
      return new GnssPntResult(this);
    }

    /// <summary>Field number for the "receiver_id" field.</summary>
    public const int ReceiverIdFieldNumber = 1;
    private uint receiverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReceiverId {
      get { return receiverId_; }
      set {
        receiverId_ = value;
      }
    }

    /// <summary>Field number for the "time_type" field.</summary>
    public const int TimeTypeFieldNumber = 2;
    private global::Apollo.Drivers.Gnss.GnssTimeType timeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Drivers.Gnss.GnssTimeType TimeType {
      get { return timeType_; }
      set {
        timeType_ = value;
      }
    }

    /// <summary>Field number for the "gnss_week" field.</summary>
    public const int GnssWeekFieldNumber = 3;
    private uint gnssWeek_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GnssWeek {
      get { return gnssWeek_; }
      set {
        gnssWeek_ = value;
      }
    }

    /// <summary>Field number for the "gnss_second_s" field.</summary>
    public const int GnssSecondSFieldNumber = 4;
    private double gnssSecondS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GnssSecondS {
      get { return gnssSecondS_; }
      set {
        gnssSecondS_ = value;
      }
    }

    /// <summary>Field number for the "pnt_type" field.</summary>
    public const int PntTypeFieldNumber = 5;
    private global::Apollo.Localization.PntType pntType_ = 0;
    /// <summary>
    /// Solution type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.PntType PntType {
      get { return pntType_; }
      set {
        pntType_ = value;
      }
    }

    /// <summary>Field number for the "pos_x_m" field.</summary>
    public const int PosXMFieldNumber = 6;
    private double posXM_;
    /// <summary>
    /// Position and its standard deviation in Cartesian (X/Y/Z) under ECEF-WGS84
    /// coordinate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosXM {
      get { return posXM_; }
      set {
        posXM_ = value;
      }
    }

    /// <summary>Field number for the "pos_y_m" field.</summary>
    public const int PosYMFieldNumber = 7;
    private double posYM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosYM {
      get { return posYM_; }
      set {
        posYM_ = value;
      }
    }

    /// <summary>Field number for the "pos_z_m" field.</summary>
    public const int PosZMFieldNumber = 8;
    private double posZM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosZM {
      get { return posZM_; }
      set {
        posZM_ = value;
      }
    }

    /// <summary>Field number for the "std_pos_x_m" field.</summary>
    public const int StdPosXMFieldNumber = 9;
    private double stdPosXM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StdPosXM {
      get { return stdPosXM_; }
      set {
        stdPosXM_ = value;
      }
    }

    /// <summary>Field number for the "std_pos_y_m" field.</summary>
    public const int StdPosYMFieldNumber = 10;
    private double stdPosYM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StdPosYM {
      get { return stdPosYM_; }
      set {
        stdPosYM_ = value;
      }
    }

    /// <summary>Field number for the "std_pos_z_m" field.</summary>
    public const int StdPosZMFieldNumber = 11;
    private double stdPosZM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StdPosZM {
      get { return stdPosZM_; }
      set {
        stdPosZM_ = value;
      }
    }

    /// <summary>Field number for the "vel_x_m" field.</summary>
    public const int VelXMFieldNumber = 12;
    private double velXM_;
    /// <summary>
    /// Velocity and its standard deviation in Cartesian (X/Y/Z) under ECEF-WGS84
    /// coordinate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelXM {
      get { return velXM_; }
      set {
        velXM_ = value;
      }
    }

    /// <summary>Field number for the "vel_y_m" field.</summary>
    public const int VelYMFieldNumber = 13;
    private double velYM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelYM {
      get { return velYM_; }
      set {
        velYM_ = value;
      }
    }

    /// <summary>Field number for the "vel_z_m" field.</summary>
    public const int VelZMFieldNumber = 14;
    private double velZM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelZM {
      get { return velZM_; }
      set {
        velZM_ = value;
      }
    }

    /// <summary>Field number for the "std_vel_x_m" field.</summary>
    public const int StdVelXMFieldNumber = 15;
    private double stdVelXM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StdVelXM {
      get { return stdVelXM_; }
      set {
        stdVelXM_ = value;
      }
    }

    /// <summary>Field number for the "std_vel_y_m" field.</summary>
    public const int StdVelYMFieldNumber = 16;
    private double stdVelYM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StdVelYM {
      get { return stdVelYM_; }
      set {
        stdVelYM_ = value;
      }
    }

    /// <summary>Field number for the "std_vel_z_m" field.</summary>
    public const int StdVelZMFieldNumber = 17;
    private double stdVelZM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StdVelZM {
      get { return stdVelZM_; }
      set {
        stdVelZM_ = value;
      }
    }

    /// <summary>Field number for the "sovled_sat_num" field.</summary>
    public const int SovledSatNumFieldNumber = 18;
    private uint sovledSatNum_;
    /// <summary>
    /// Number of satellites involved in solution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SovledSatNum {
      get { return sovledSatNum_; }
      set {
        sovledSatNum_ = value;
      }
    }

    /// <summary>Field number for the "sat_dir_cosine" field.</summary>
    public const int SatDirCosineFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Apollo.Localization.SatDirCosine> _repeated_satDirCosine_codec
        = pb::FieldCodec.ForMessage(154, global::Apollo.Localization.SatDirCosine.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Localization.SatDirCosine> satDirCosine_ = new pbc::RepeatedField<global::Apollo.Localization.SatDirCosine>();
    /// <summary>
    /// Group of observed satellites' directio cosine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Localization.SatDirCosine> SatDirCosine {
      get { return satDirCosine_; }
    }

    /// <summary>Field number for the "pdop" field.</summary>
    public const int PdopFieldNumber = 20;
    private double pdop_;
    /// <summary>
    /// position dilution of precision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pdop {
      get { return pdop_; }
      set {
        pdop_ = value;
      }
    }

    /// <summary>Field number for the "hdop" field.</summary>
    public const int HdopFieldNumber = 21;
    private double hdop_;
    /// <summary>
    /// horizontal dilution of precision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Hdop {
      get { return hdop_; }
      set {
        hdop_ = value;
      }
    }

    /// <summary>Field number for the "vdop" field.</summary>
    public const int VdopFieldNumber = 22;
    private double vdop_;
    /// <summary>
    /// vertical dilution of precision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Vdop {
      get { return vdop_; }
      set {
        vdop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GnssPntResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GnssPntResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiverId != other.ReceiverId) return false;
      if (TimeType != other.TimeType) return false;
      if (GnssWeek != other.GnssWeek) return false;
      if (GnssSecondS != other.GnssSecondS) return false;
      if (PntType != other.PntType) return false;
      if (PosXM != other.PosXM) return false;
      if (PosYM != other.PosYM) return false;
      if (PosZM != other.PosZM) return false;
      if (StdPosXM != other.StdPosXM) return false;
      if (StdPosYM != other.StdPosYM) return false;
      if (StdPosZM != other.StdPosZM) return false;
      if (VelXM != other.VelXM) return false;
      if (VelYM != other.VelYM) return false;
      if (VelZM != other.VelZM) return false;
      if (StdVelXM != other.StdVelXM) return false;
      if (StdVelYM != other.StdVelYM) return false;
      if (StdVelZM != other.StdVelZM) return false;
      if (SovledSatNum != other.SovledSatNum) return false;
      if(!satDirCosine_.Equals(other.satDirCosine_)) return false;
      if (Pdop != other.Pdop) return false;
      if (Hdop != other.Hdop) return false;
      if (Vdop != other.Vdop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiverId != 0) hash ^= ReceiverId.GetHashCode();
      if (TimeType != 0) hash ^= TimeType.GetHashCode();
      if (GnssWeek != 0) hash ^= GnssWeek.GetHashCode();
      if (GnssSecondS != 0D) hash ^= GnssSecondS.GetHashCode();
      if (PntType != 0) hash ^= PntType.GetHashCode();
      if (PosXM != 0D) hash ^= PosXM.GetHashCode();
      if (PosYM != 0D) hash ^= PosYM.GetHashCode();
      if (PosZM != 0D) hash ^= PosZM.GetHashCode();
      if (StdPosXM != 0D) hash ^= StdPosXM.GetHashCode();
      if (StdPosYM != 0D) hash ^= StdPosYM.GetHashCode();
      if (StdPosZM != 0D) hash ^= StdPosZM.GetHashCode();
      if (VelXM != 0D) hash ^= VelXM.GetHashCode();
      if (VelYM != 0D) hash ^= VelYM.GetHashCode();
      if (VelZM != 0D) hash ^= VelZM.GetHashCode();
      if (StdVelXM != 0D) hash ^= StdVelXM.GetHashCode();
      if (StdVelYM != 0D) hash ^= StdVelYM.GetHashCode();
      if (StdVelZM != 0D) hash ^= StdVelZM.GetHashCode();
      if (SovledSatNum != 0) hash ^= SovledSatNum.GetHashCode();
      hash ^= satDirCosine_.GetHashCode();
      if (Pdop != 0D) hash ^= Pdop.GetHashCode();
      if (Hdop != 0D) hash ^= Hdop.GetHashCode();
      if (Vdop != 0D) hash ^= Vdop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReceiverId);
      }
      if (TimeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TimeType);
      }
      if (GnssWeek != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GnssWeek);
      }
      if (GnssSecondS != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GnssSecondS);
      }
      if (PntType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PntType);
      }
      if (PosXM != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PosXM);
      }
      if (PosYM != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PosYM);
      }
      if (PosZM != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PosZM);
      }
      if (StdPosXM != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(StdPosXM);
      }
      if (StdPosYM != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(StdPosYM);
      }
      if (StdPosZM != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(StdPosZM);
      }
      if (VelXM != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(VelXM);
      }
      if (VelYM != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(VelYM);
      }
      if (VelZM != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(VelZM);
      }
      if (StdVelXM != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(StdVelXM);
      }
      if (StdVelYM != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(StdVelYM);
      }
      if (StdVelZM != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(StdVelZM);
      }
      if (SovledSatNum != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SovledSatNum);
      }
      satDirCosine_.WriteTo(output, _repeated_satDirCosine_codec);
      if (Pdop != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Pdop);
      }
      if (Hdop != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Hdop);
      }
      if (Vdop != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Vdop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiverId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReceiverId);
      }
      if (TimeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeType);
      }
      if (GnssWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GnssWeek);
      }
      if (GnssSecondS != 0D) {
        size += 1 + 8;
      }
      if (PntType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PntType);
      }
      if (PosXM != 0D) {
        size += 1 + 8;
      }
      if (PosYM != 0D) {
        size += 1 + 8;
      }
      if (PosZM != 0D) {
        size += 1 + 8;
      }
      if (StdPosXM != 0D) {
        size += 1 + 8;
      }
      if (StdPosYM != 0D) {
        size += 1 + 8;
      }
      if (StdPosZM != 0D) {
        size += 1 + 8;
      }
      if (VelXM != 0D) {
        size += 1 + 8;
      }
      if (VelYM != 0D) {
        size += 1 + 8;
      }
      if (VelZM != 0D) {
        size += 1 + 8;
      }
      if (StdVelXM != 0D) {
        size += 1 + 8;
      }
      if (StdVelYM != 0D) {
        size += 2 + 8;
      }
      if (StdVelZM != 0D) {
        size += 2 + 8;
      }
      if (SovledSatNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SovledSatNum);
      }
      size += satDirCosine_.CalculateSize(_repeated_satDirCosine_codec);
      if (Pdop != 0D) {
        size += 2 + 8;
      }
      if (Hdop != 0D) {
        size += 2 + 8;
      }
      if (Vdop != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GnssPntResult other) {
      if (other == null) {
        return;
      }
      if (other.ReceiverId != 0) {
        ReceiverId = other.ReceiverId;
      }
      if (other.TimeType != 0) {
        TimeType = other.TimeType;
      }
      if (other.GnssWeek != 0) {
        GnssWeek = other.GnssWeek;
      }
      if (other.GnssSecondS != 0D) {
        GnssSecondS = other.GnssSecondS;
      }
      if (other.PntType != 0) {
        PntType = other.PntType;
      }
      if (other.PosXM != 0D) {
        PosXM = other.PosXM;
      }
      if (other.PosYM != 0D) {
        PosYM = other.PosYM;
      }
      if (other.PosZM != 0D) {
        PosZM = other.PosZM;
      }
      if (other.StdPosXM != 0D) {
        StdPosXM = other.StdPosXM;
      }
      if (other.StdPosYM != 0D) {
        StdPosYM = other.StdPosYM;
      }
      if (other.StdPosZM != 0D) {
        StdPosZM = other.StdPosZM;
      }
      if (other.VelXM != 0D) {
        VelXM = other.VelXM;
      }
      if (other.VelYM != 0D) {
        VelYM = other.VelYM;
      }
      if (other.VelZM != 0D) {
        VelZM = other.VelZM;
      }
      if (other.StdVelXM != 0D) {
        StdVelXM = other.StdVelXM;
      }
      if (other.StdVelYM != 0D) {
        StdVelYM = other.StdVelYM;
      }
      if (other.StdVelZM != 0D) {
        StdVelZM = other.StdVelZM;
      }
      if (other.SovledSatNum != 0) {
        SovledSatNum = other.SovledSatNum;
      }
      satDirCosine_.Add(other.satDirCosine_);
      if (other.Pdop != 0D) {
        Pdop = other.Pdop;
      }
      if (other.Hdop != 0D) {
        Hdop = other.Hdop;
      }
      if (other.Vdop != 0D) {
        Vdop = other.Vdop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceiverId = input.ReadUInt32();
            break;
          }
          case 16: {
            timeType_ = (global::Apollo.Drivers.Gnss.GnssTimeType) input.ReadEnum();
            break;
          }
          case 24: {
            GnssWeek = input.ReadUInt32();
            break;
          }
          case 33: {
            GnssSecondS = input.ReadDouble();
            break;
          }
          case 40: {
            pntType_ = (global::Apollo.Localization.PntType) input.ReadEnum();
            break;
          }
          case 49: {
            PosXM = input.ReadDouble();
            break;
          }
          case 57: {
            PosYM = input.ReadDouble();
            break;
          }
          case 65: {
            PosZM = input.ReadDouble();
            break;
          }
          case 73: {
            StdPosXM = input.ReadDouble();
            break;
          }
          case 81: {
            StdPosYM = input.ReadDouble();
            break;
          }
          case 89: {
            StdPosZM = input.ReadDouble();
            break;
          }
          case 97: {
            VelXM = input.ReadDouble();
            break;
          }
          case 105: {
            VelYM = input.ReadDouble();
            break;
          }
          case 113: {
            VelZM = input.ReadDouble();
            break;
          }
          case 121: {
            StdVelXM = input.ReadDouble();
            break;
          }
          case 129: {
            StdVelYM = input.ReadDouble();
            break;
          }
          case 137: {
            StdVelZM = input.ReadDouble();
            break;
          }
          case 144: {
            SovledSatNum = input.ReadUInt32();
            break;
          }
          case 154: {
            satDirCosine_.AddEntriesFrom(input, _repeated_satDirCosine_codec);
            break;
          }
          case 161: {
            Pdop = input.ReadDouble();
            break;
          }
          case 169: {
            Hdop = input.ReadDouble();
            break;
          }
          case 177: {
            Vdop = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
