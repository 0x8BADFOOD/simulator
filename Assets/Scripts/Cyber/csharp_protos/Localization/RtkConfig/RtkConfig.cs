// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/rtk_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Localization.RtkConfig {

  /// <summary>Holder for reflection information generated from modules/localization/proto/rtk_config.proto</summary>
  public static partial class RtkConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/localization/proto/rtk_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RtkConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cittb2R1bGVzL2xvY2FsaXphdGlvbi9wcm90by9ydGtfY29uZmlnLnByb3Rv",
            "Eh5hcG9sbG8ubG9jYWxpemF0aW9uLnJ0a19jb25maWcizQIKBkNvbmZpZxIa",
            "ChJsb2NhbGl6YXRpb25fdG9waWMYASABKAkSIQoZbG9jYWxpemF0aW9uX3N0",
            "YXR1c190b3BpYxgLIAEoCRIRCglpbXVfdG9waWMYAiABKAkSEQoJZ3BzX3Rv",
            "cGljGAMgASgJEhgKEGdwc19zdGF0dXNfdG9waWMYDCABKAkSHQoVYnJvYWRj",
            "YXN0X3RmX2ZyYW1lX2lkGAQgASgJEiMKG2Jyb2FkY2FzdF90Zl9jaGlsZF9m",
            "cmFtZV9pZBgFIAEoCRIZChFpbXVfbGlzdF9tYXhfc2l6ZRgGIAEoBRIjChtn",
            "cHNfaW11X3RpbWVfZGlmZl90aHJlc2hvbGQYByABKAESFAoMbWFwX29mZnNl",
            "dF94GAggASgBEhQKDG1hcF9vZmZzZXRfeRgJIAEoARIUCgxtYXBfb2Zmc2V0",
            "X3oYCiABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Localization.RtkConfig.Config), global::Apollo.Localization.RtkConfig.Config.Parser, new[]{ "LocalizationTopic", "LocalizationStatusTopic", "ImuTopic", "GpsTopic", "GpsStatusTopic", "BroadcastTfFrameId", "BroadcastTfChildFrameId", "ImuListMaxSize", "GpsImuTimeDiffThreshold", "MapOffsetX", "MapOffsetY", "MapOffsetZ" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Localization.RtkConfig.RtkConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      localizationTopic_ = other.localizationTopic_;
      localizationStatusTopic_ = other.localizationStatusTopic_;
      imuTopic_ = other.imuTopic_;
      gpsTopic_ = other.gpsTopic_;
      gpsStatusTopic_ = other.gpsStatusTopic_;
      broadcastTfFrameId_ = other.broadcastTfFrameId_;
      broadcastTfChildFrameId_ = other.broadcastTfChildFrameId_;
      imuListMaxSize_ = other.imuListMaxSize_;
      gpsImuTimeDiffThreshold_ = other.gpsImuTimeDiffThreshold_;
      mapOffsetX_ = other.mapOffsetX_;
      mapOffsetY_ = other.mapOffsetY_;
      mapOffsetZ_ = other.mapOffsetZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "localization_topic" field.</summary>
    public const int LocalizationTopicFieldNumber = 1;
    private string localizationTopic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalizationTopic {
      get { return localizationTopic_; }
      set {
        localizationTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localization_status_topic" field.</summary>
    public const int LocalizationStatusTopicFieldNumber = 11;
    private string localizationStatusTopic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalizationStatusTopic {
      get { return localizationStatusTopic_; }
      set {
        localizationStatusTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imu_topic" field.</summary>
    public const int ImuTopicFieldNumber = 2;
    private string imuTopic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImuTopic {
      get { return imuTopic_; }
      set {
        imuTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gps_topic" field.</summary>
    public const int GpsTopicFieldNumber = 3;
    private string gpsTopic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GpsTopic {
      get { return gpsTopic_; }
      set {
        gpsTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gps_status_topic" field.</summary>
    public const int GpsStatusTopicFieldNumber = 12;
    private string gpsStatusTopic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GpsStatusTopic {
      get { return gpsStatusTopic_; }
      set {
        gpsStatusTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "broadcast_tf_frame_id" field.</summary>
    public const int BroadcastTfFrameIdFieldNumber = 4;
    private string broadcastTfFrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BroadcastTfFrameId {
      get { return broadcastTfFrameId_; }
      set {
        broadcastTfFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "broadcast_tf_child_frame_id" field.</summary>
    public const int BroadcastTfChildFrameIdFieldNumber = 5;
    private string broadcastTfChildFrameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BroadcastTfChildFrameId {
      get { return broadcastTfChildFrameId_; }
      set {
        broadcastTfChildFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imu_list_max_size" field.</summary>
    public const int ImuListMaxSizeFieldNumber = 6;
    private int imuListMaxSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImuListMaxSize {
      get { return imuListMaxSize_; }
      set {
        imuListMaxSize_ = value;
      }
    }

    /// <summary>Field number for the "gps_imu_time_diff_threshold" field.</summary>
    public const int GpsImuTimeDiffThresholdFieldNumber = 7;
    private double gpsImuTimeDiffThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GpsImuTimeDiffThreshold {
      get { return gpsImuTimeDiffThreshold_; }
      set {
        gpsImuTimeDiffThreshold_ = value;
      }
    }

    /// <summary>Field number for the "map_offset_x" field.</summary>
    public const int MapOffsetXFieldNumber = 8;
    private double mapOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MapOffsetX {
      get { return mapOffsetX_; }
      set {
        mapOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "map_offset_y" field.</summary>
    public const int MapOffsetYFieldNumber = 9;
    private double mapOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MapOffsetY {
      get { return mapOffsetY_; }
      set {
        mapOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "map_offset_z" field.</summary>
    public const int MapOffsetZFieldNumber = 10;
    private double mapOffsetZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MapOffsetZ {
      get { return mapOffsetZ_; }
      set {
        mapOffsetZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalizationTopic != other.LocalizationTopic) return false;
      if (LocalizationStatusTopic != other.LocalizationStatusTopic) return false;
      if (ImuTopic != other.ImuTopic) return false;
      if (GpsTopic != other.GpsTopic) return false;
      if (GpsStatusTopic != other.GpsStatusTopic) return false;
      if (BroadcastTfFrameId != other.BroadcastTfFrameId) return false;
      if (BroadcastTfChildFrameId != other.BroadcastTfChildFrameId) return false;
      if (ImuListMaxSize != other.ImuListMaxSize) return false;
      if (GpsImuTimeDiffThreshold != other.GpsImuTimeDiffThreshold) return false;
      if (MapOffsetX != other.MapOffsetX) return false;
      if (MapOffsetY != other.MapOffsetY) return false;
      if (MapOffsetZ != other.MapOffsetZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalizationTopic.Length != 0) hash ^= LocalizationTopic.GetHashCode();
      if (LocalizationStatusTopic.Length != 0) hash ^= LocalizationStatusTopic.GetHashCode();
      if (ImuTopic.Length != 0) hash ^= ImuTopic.GetHashCode();
      if (GpsTopic.Length != 0) hash ^= GpsTopic.GetHashCode();
      if (GpsStatusTopic.Length != 0) hash ^= GpsStatusTopic.GetHashCode();
      if (BroadcastTfFrameId.Length != 0) hash ^= BroadcastTfFrameId.GetHashCode();
      if (BroadcastTfChildFrameId.Length != 0) hash ^= BroadcastTfChildFrameId.GetHashCode();
      if (ImuListMaxSize != 0) hash ^= ImuListMaxSize.GetHashCode();
      if (GpsImuTimeDiffThreshold != 0D) hash ^= GpsImuTimeDiffThreshold.GetHashCode();
      if (MapOffsetX != 0D) hash ^= MapOffsetX.GetHashCode();
      if (MapOffsetY != 0D) hash ^= MapOffsetY.GetHashCode();
      if (MapOffsetZ != 0D) hash ^= MapOffsetZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalizationTopic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalizationTopic);
      }
      if (ImuTopic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImuTopic);
      }
      if (GpsTopic.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GpsTopic);
      }
      if (BroadcastTfFrameId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BroadcastTfFrameId);
      }
      if (BroadcastTfChildFrameId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BroadcastTfChildFrameId);
      }
      if (ImuListMaxSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImuListMaxSize);
      }
      if (GpsImuTimeDiffThreshold != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(GpsImuTimeDiffThreshold);
      }
      if (MapOffsetX != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(MapOffsetX);
      }
      if (MapOffsetY != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MapOffsetY);
      }
      if (MapOffsetZ != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MapOffsetZ);
      }
      if (LocalizationStatusTopic.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LocalizationStatusTopic);
      }
      if (GpsStatusTopic.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(GpsStatusTopic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalizationTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalizationTopic);
      }
      if (LocalizationStatusTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalizationStatusTopic);
      }
      if (ImuTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImuTopic);
      }
      if (GpsTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsTopic);
      }
      if (GpsStatusTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsStatusTopic);
      }
      if (BroadcastTfFrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BroadcastTfFrameId);
      }
      if (BroadcastTfChildFrameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BroadcastTfChildFrameId);
      }
      if (ImuListMaxSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImuListMaxSize);
      }
      if (GpsImuTimeDiffThreshold != 0D) {
        size += 1 + 8;
      }
      if (MapOffsetX != 0D) {
        size += 1 + 8;
      }
      if (MapOffsetY != 0D) {
        size += 1 + 8;
      }
      if (MapOffsetZ != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.LocalizationTopic.Length != 0) {
        LocalizationTopic = other.LocalizationTopic;
      }
      if (other.LocalizationStatusTopic.Length != 0) {
        LocalizationStatusTopic = other.LocalizationStatusTopic;
      }
      if (other.ImuTopic.Length != 0) {
        ImuTopic = other.ImuTopic;
      }
      if (other.GpsTopic.Length != 0) {
        GpsTopic = other.GpsTopic;
      }
      if (other.GpsStatusTopic.Length != 0) {
        GpsStatusTopic = other.GpsStatusTopic;
      }
      if (other.BroadcastTfFrameId.Length != 0) {
        BroadcastTfFrameId = other.BroadcastTfFrameId;
      }
      if (other.BroadcastTfChildFrameId.Length != 0) {
        BroadcastTfChildFrameId = other.BroadcastTfChildFrameId;
      }
      if (other.ImuListMaxSize != 0) {
        ImuListMaxSize = other.ImuListMaxSize;
      }
      if (other.GpsImuTimeDiffThreshold != 0D) {
        GpsImuTimeDiffThreshold = other.GpsImuTimeDiffThreshold;
      }
      if (other.MapOffsetX != 0D) {
        MapOffsetX = other.MapOffsetX;
      }
      if (other.MapOffsetY != 0D) {
        MapOffsetY = other.MapOffsetY;
      }
      if (other.MapOffsetZ != 0D) {
        MapOffsetZ = other.MapOffsetZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LocalizationTopic = input.ReadString();
            break;
          }
          case 18: {
            ImuTopic = input.ReadString();
            break;
          }
          case 26: {
            GpsTopic = input.ReadString();
            break;
          }
          case 34: {
            BroadcastTfFrameId = input.ReadString();
            break;
          }
          case 42: {
            BroadcastTfChildFrameId = input.ReadString();
            break;
          }
          case 48: {
            ImuListMaxSize = input.ReadInt32();
            break;
          }
          case 57: {
            GpsImuTimeDiffThreshold = input.ReadDouble();
            break;
          }
          case 65: {
            MapOffsetX = input.ReadDouble();
            break;
          }
          case 73: {
            MapOffsetY = input.ReadDouble();
            break;
          }
          case 81: {
            MapOffsetZ = input.ReadDouble();
            break;
          }
          case 90: {
            LocalizationStatusTopic = input.ReadString();
            break;
          }
          case 98: {
            GpsStatusTopic = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
