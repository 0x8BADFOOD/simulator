// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/perception.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Cyber.Proto {

  /// <summary>Holder for reflection information generated from cyber/proto/perception.proto</summary>
  public static partial class PerceptionReflection {

    #region Descriptor
    /// <summary>File descriptor for cyber/proto/perception.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PerceptionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxjeWJlci9wcm90by9wZXJjZXB0aW9uLnByb3RvEhJhcG9sbG8uY3liZXIu",
            "cHJvdG8igAEKClBlcmNlcHRpb24SNQoGaGVhZGVyGAEgASgLMiUuYXBvbGxv",
            "LmN5YmVyLnByb3RvLlBlcmNlcHRpb24uSGVhZGVyEg4KBm1zZ19pZBgCIAEo",
            "BBIOCgZyZXN1bHQYAyABKAEaGwoGSGVhZGVyEhEKCXRpbWVzdGFtcBgBIAEo",
            "BGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.Perception), global::Apollo.Cyber.Proto.Perception.Parser, new[]{ "Header", "MsgId", "Result" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.Perception.Types.Header), global::Apollo.Cyber.Proto.Perception.Types.Header.Parser, new[]{ "Timestamp" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Perception : pb::IMessage<Perception> {
    private static readonly pb::MessageParser<Perception> _parser = new pb::MessageParser<Perception>(() => new Perception());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Perception> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.PerceptionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Perception() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Perception(Perception other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      msgId_ = other.msgId_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Perception Clone() {
      return new Perception(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Cyber.Proto.Perception.Types.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.Perception.Types.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 2;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private double result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Perception);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Perception other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MsgId != other.MsgId) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (Result != 0D) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MsgId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MsgId);
      }
      if (Result != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (Result != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Perception other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Cyber.Proto.Perception.Types.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.Result != 0D) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Cyber.Proto.Perception.Types.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 25: {
            Result = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Perception message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Header : pb::IMessage<Header> {
        private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Header> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Cyber.Proto.Perception.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header(Header other) : this() {
          timestamp_ = other.timestamp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header Clone() {
          return new Header(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Header);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Header other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Timestamp != other.Timestamp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Timestamp != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Timestamp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Timestamp != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Header other) {
          if (other == null) {
            return;
          }
          if (other.Timestamp != 0UL) {
            Timestamp = other.Timestamp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Timestamp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
