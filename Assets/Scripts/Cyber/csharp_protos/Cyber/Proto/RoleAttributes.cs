// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/role_attributes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Cyber.Proto {

  /// <summary>Holder for reflection information generated from cyber/proto/role_attributes.proto</summary>
  public static partial class RoleAttributesReflection {

    #region Descriptor
    /// <summary>File descriptor for cyber/proto/role_attributes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoleAttributesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFjeWJlci9wcm90by9yb2xlX2F0dHJpYnV0ZXMucHJvdG8SEmFwb2xsby5j",
            "eWJlci5wcm90bxodY3liZXIvcHJvdG8vcW9zX3Byb2ZpbGUucHJvdG8iJgoK",
            "U29ja2V0QWRkchIKCgJpcBgBIAEoCRIMCgRwb3J0GAIgASgNIuACCg5Sb2xl",
            "QXR0cmlidXRlcxIRCglob3N0X25hbWUYASABKAkSDwoHaG9zdF9pcBgCIAEo",
            "CRISCgpwcm9jZXNzX2lkGAMgASgFEhEKCW5vZGVfbmFtZRgEIAEoCRIPCgdu",
            "b2RlX2lkGAUgASgEEhQKDGNoYW5uZWxfbmFtZRgGIAEoCRISCgpjaGFubmVs",
            "X2lkGAcgASgEEhQKDG1lc3NhZ2VfdHlwZRgIIAEoCRISCgpwcm90b19kZXNj",
            "GAkgASgMEgoKAmlkGAogASgEEjMKC3Fvc19wcm9maWxlGAsgASgLMh4uYXBv",
            "bGxvLmN5YmVyLnByb3RvLlFvc1Byb2ZpbGUSMwoLc29ja2V0X2FkZHIYDCAB",
            "KAsyHi5hcG9sbG8uY3liZXIucHJvdG8uU29ja2V0QWRkchIUCgxzZXJ2aWNl",
            "X25hbWUYDSABKAkSEgoKc2VydmljZV9pZBgOIAEoBGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Cyber.Proto.QosProfileReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.SocketAddr), global::Apollo.Cyber.Proto.SocketAddr.Parser, new[]{ "Ip", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.RoleAttributes), global::Apollo.Cyber.Proto.RoleAttributes.Parser, new[]{ "HostName", "HostIp", "ProcessId", "NodeName", "NodeId", "ChannelName", "ChannelId", "MessageType", "ProtoDesc", "Id", "QosProfile", "SocketAddr", "ServiceName", "ServiceId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SocketAddr : pb::IMessage<SocketAddr> {
    private static readonly pb::MessageParser<SocketAddr> _parser = new pb::MessageParser<SocketAddr>(() => new SocketAddr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocketAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RoleAttributesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketAddr(SocketAddr other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketAddr Clone() {
      return new SocketAddr(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    /// <summary>
    /// dotted decimal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocketAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocketAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocketAddr other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleAttributes : pb::IMessage<RoleAttributes> {
    private static readonly pb::MessageParser<RoleAttributes> _parser = new pb::MessageParser<RoleAttributes>(() => new RoleAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.RoleAttributesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttributes(RoleAttributes other) : this() {
      hostName_ = other.hostName_;
      hostIp_ = other.hostIp_;
      processId_ = other.processId_;
      nodeName_ = other.nodeName_;
      nodeId_ = other.nodeId_;
      channelName_ = other.channelName_;
      channelId_ = other.channelId_;
      messageType_ = other.messageType_;
      protoDesc_ = other.protoDesc_;
      id_ = other.id_;
      QosProfile = other.qosProfile_ != null ? other.QosProfile.Clone() : null;
      SocketAddr = other.socketAddr_ != null ? other.SocketAddr.Clone() : null;
      serviceName_ = other.serviceName_;
      serviceId_ = other.serviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttributes Clone() {
      return new RoleAttributes(this);
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 1;
    private string hostName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_ip" field.</summary>
    public const int HostIpFieldNumber = 2;
    private string hostIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostIp {
      get { return hostIp_; }
      set {
        hostIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "process_id" field.</summary>
    public const int ProcessIdFieldNumber = 3;
    private int processId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    /// <summary>Field number for the "node_name" field.</summary>
    public const int NodeNameFieldNumber = 4;
    private string nodeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 5;
    private ulong nodeId_;
    /// <summary>
    /// hash value of node_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 6;
    private string channelName_ = "";
    /// <summary>
    /// especially for WRITER and READER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 7;
    private ulong channelId_;
    /// <summary>
    /// hash value of channel_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 8;
    private string messageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_desc" field.</summary>
    public const int ProtoDescFieldNumber = 9;
    private pb::ByteString protoDesc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProtoDesc {
      get { return protoDesc_; }
      set {
        protoDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 10;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "qos_profile" field.</summary>
    public const int QosProfileFieldNumber = 11;
    private global::Apollo.Cyber.Proto.QosProfile qosProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.QosProfile QosProfile {
      get { return qosProfile_; }
      set {
        qosProfile_ = value;
      }
    }

    /// <summary>Field number for the "socket_addr" field.</summary>
    public const int SocketAddrFieldNumber = 12;
    private global::Apollo.Cyber.Proto.SocketAddr socketAddr_;
    /// <summary>
    /// reserved for socket communication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.SocketAddr SocketAddr {
      get { return socketAddr_; }
      set {
        socketAddr_ = value;
      }
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 13;
    private string serviceName_ = "";
    /// <summary>
    /// especially for SERVER and CLIENT
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 14;
    private ulong serviceId_;
    /// <summary>
    /// hash value of service_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostName != other.HostName) return false;
      if (HostIp != other.HostIp) return false;
      if (ProcessId != other.ProcessId) return false;
      if (NodeName != other.NodeName) return false;
      if (NodeId != other.NodeId) return false;
      if (ChannelName != other.ChannelName) return false;
      if (ChannelId != other.ChannelId) return false;
      if (MessageType != other.MessageType) return false;
      if (ProtoDesc != other.ProtoDesc) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(QosProfile, other.QosProfile)) return false;
      if (!object.Equals(SocketAddr, other.SocketAddr)) return false;
      if (ServiceName != other.ServiceName) return false;
      if (ServiceId != other.ServiceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (HostIp.Length != 0) hash ^= HostIp.GetHashCode();
      if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (NodeId != 0UL) hash ^= NodeId.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (ChannelId != 0UL) hash ^= ChannelId.GetHashCode();
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (ProtoDesc.Length != 0) hash ^= ProtoDesc.GetHashCode();
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (qosProfile_ != null) hash ^= QosProfile.GetHashCode();
      if (socketAddr_ != null) hash ^= SocketAddr.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (ServiceId != 0UL) hash ^= ServiceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostName);
      }
      if (HostIp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostIp);
      }
      if (ProcessId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ProcessId);
      }
      if (NodeName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NodeName);
      }
      if (NodeId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NodeId);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ChannelName);
      }
      if (ChannelId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ChannelId);
      }
      if (MessageType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MessageType);
      }
      if (ProtoDesc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ProtoDesc);
      }
      if (Id != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Id);
      }
      if (qosProfile_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(QosProfile);
      }
      if (socketAddr_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SocketAddr);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ServiceName);
      }
      if (ServiceId != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ServiceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (HostIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostIp);
      }
      if (ProcessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
      }
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (NodeId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NodeId);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (ChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelId);
      }
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (ProtoDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProtoDesc);
      }
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (qosProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QosProfile);
      }
      if (socketAddr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocketAddr);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (ServiceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServiceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAttributes other) {
      if (other == null) {
        return;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.HostIp.Length != 0) {
        HostIp = other.HostIp;
      }
      if (other.ProcessId != 0) {
        ProcessId = other.ProcessId;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      if (other.NodeId != 0UL) {
        NodeId = other.NodeId;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.ChannelId != 0UL) {
        ChannelId = other.ChannelId;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.ProtoDesc.Length != 0) {
        ProtoDesc = other.ProtoDesc;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.qosProfile_ != null) {
        if (qosProfile_ == null) {
          qosProfile_ = new global::Apollo.Cyber.Proto.QosProfile();
        }
        QosProfile.MergeFrom(other.QosProfile);
      }
      if (other.socketAddr_ != null) {
        if (socketAddr_ == null) {
          socketAddr_ = new global::Apollo.Cyber.Proto.SocketAddr();
        }
        SocketAddr.MergeFrom(other.SocketAddr);
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.ServiceId != 0UL) {
        ServiceId = other.ServiceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HostName = input.ReadString();
            break;
          }
          case 18: {
            HostIp = input.ReadString();
            break;
          }
          case 24: {
            ProcessId = input.ReadInt32();
            break;
          }
          case 34: {
            NodeName = input.ReadString();
            break;
          }
          case 40: {
            NodeId = input.ReadUInt64();
            break;
          }
          case 50: {
            ChannelName = input.ReadString();
            break;
          }
          case 56: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 66: {
            MessageType = input.ReadString();
            break;
          }
          case 74: {
            ProtoDesc = input.ReadBytes();
            break;
          }
          case 80: {
            Id = input.ReadUInt64();
            break;
          }
          case 90: {
            if (qosProfile_ == null) {
              qosProfile_ = new global::Apollo.Cyber.Proto.QosProfile();
            }
            input.ReadMessage(qosProfile_);
            break;
          }
          case 98: {
            if (socketAddr_ == null) {
              socketAddr_ = new global::Apollo.Cyber.Proto.SocketAddr();
            }
            input.ReadMessage(socketAddr_);
            break;
          }
          case 106: {
            ServiceName = input.ReadString();
            break;
          }
          case 112: {
            ServiceId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
