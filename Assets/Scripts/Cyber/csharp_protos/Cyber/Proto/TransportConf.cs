// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/transport_conf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Cyber.Proto {

  /// <summary>Holder for reflection information generated from cyber/proto/transport_conf.proto</summary>
  public static partial class TransportConfReflection {

    #region Descriptor
    /// <summary>File descriptor for cyber/proto/transport_conf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransportConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBjeWJlci9wcm90by90cmFuc3BvcnRfY29uZi5wcm90bxISYXBvbGxvLmN5",
            "YmVyLnByb3RvIi8KE1NobU11bHRpY2FzdExvY2F0b3ISCgoCaXAYASABKAkS",
            "DAoEcG9ydBgCIAEoDSJeCgdTaG1Db25mEhUKDW5vdGlmaWVyX3R5cGUYASAB",
            "KAkSPAoLc2htX2xvY2F0b3IYAiABKAsyJy5hcG9sbG8uY3liZXIucHJvdG8u",
            "U2htTXVsdGljYXN0TG9jYXRvciJ1ChNSdHBzUGFydGljaXBhbnRBdHRyEhYK",
            "DmxlYXNlX2R1cmF0aW9uGAEgASgFEhsKE2Fubm91bmNlbWVudF9wZXJpb2QY",
            "AiABKAUSFgoOZG9tYWluX2lkX2dhaW4YAyABKA0SEQoJcG9ydF9iYXNlGAQg",
            "ASgNIrIBChFDb21tdW5pY2F0aW9uTW9kZRIzCglzYW1lX3Byb2MYASABKA4y",
            "IC5hcG9sbG8uY3liZXIucHJvdG8uT3B0aW9uYWxNb2RlEjMKCWRpZmZfcHJv",
            "YxgCIAEoDjIgLmFwb2xsby5jeWJlci5wcm90by5PcHRpb25hbE1vZGUSMwoJ",
            "ZGlmZl9ob3N0GAMgASgOMiAuYXBvbGxvLmN5YmVyLnByb3RvLk9wdGlvbmFs",
            "TW9kZSIqCg1SZXNvdXJjZUxpbWl0EhkKEW1heF9oaXN0b3J5X2RlcHRoGAEg",
            "ASgNIv8BCg1UcmFuc3BvcnRDb25mEi0KCHNobV9jb25mGAEgASgLMhsuYXBv",
            "bGxvLmN5YmVyLnByb3RvLlNobUNvbmYSQQoQcGFydGljaXBhbnRfYXR0chgC",
            "IAEoCzInLmFwb2xsby5jeWJlci5wcm90by5SdHBzUGFydGljaXBhbnRBdHRy",
            "EkEKEmNvbW11bmljYXRpb25fbW9kZRgDIAEoCzIlLmFwb2xsby5jeWJlci5w",
            "cm90by5Db21tdW5pY2F0aW9uTW9kZRI5Cg5yZXNvdXJjZV9saW1pdBgEIAEo",
            "CzIhLmFwb2xsby5jeWJlci5wcm90by5SZXNvdXJjZUxpbWl0KjgKDE9wdGlv",
            "bmFsTW9kZRIKCgZIWUJSSUQQABIJCgVJTlRSQRABEgcKA1NITRACEggKBFJU",
            "UFMQA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Cyber.Proto.OptionalMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ShmMulticastLocator), global::Apollo.Cyber.Proto.ShmMulticastLocator.Parser, new[]{ "Ip", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ShmConf), global::Apollo.Cyber.Proto.ShmConf.Parser, new[]{ "NotifierType", "ShmLocator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.RtpsParticipantAttr), global::Apollo.Cyber.Proto.RtpsParticipantAttr.Parser, new[]{ "LeaseDuration", "AnnouncementPeriod", "DomainIdGain", "PortBase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.CommunicationMode), global::Apollo.Cyber.Proto.CommunicationMode.Parser, new[]{ "SameProc", "DiffProc", "DiffHost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.ResourceLimit), global::Apollo.Cyber.Proto.ResourceLimit.Parser, new[]{ "MaxHistoryDepth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Cyber.Proto.TransportConf), global::Apollo.Cyber.Proto.TransportConf.Parser, new[]{ "ShmConf", "ParticipantAttr", "CommunicationMode", "ResourceLimit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OptionalMode {
    [pbr::OriginalName("HYBRID")] Hybrid = 0,
    [pbr::OriginalName("INTRA")] Intra = 1,
    [pbr::OriginalName("SHM")] Shm = 2,
    [pbr::OriginalName("RTPS")] Rtps = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ShmMulticastLocator : pb::IMessage<ShmMulticastLocator> {
    private static readonly pb::MessageParser<ShmMulticastLocator> _parser = new pb::MessageParser<ShmMulticastLocator>(() => new ShmMulticastLocator());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShmMulticastLocator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.TransportConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShmMulticastLocator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShmMulticastLocator(ShmMulticastLocator other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShmMulticastLocator Clone() {
      return new ShmMulticastLocator(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShmMulticastLocator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShmMulticastLocator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShmMulticastLocator other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShmConf : pb::IMessage<ShmConf> {
    private static readonly pb::MessageParser<ShmConf> _parser = new pb::MessageParser<ShmConf>(() => new ShmConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShmConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.TransportConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShmConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShmConf(ShmConf other) : this() {
      notifierType_ = other.notifierType_;
      ShmLocator = other.shmLocator_ != null ? other.ShmLocator.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShmConf Clone() {
      return new ShmConf(this);
    }

    /// <summary>Field number for the "notifier_type" field.</summary>
    public const int NotifierTypeFieldNumber = 1;
    private string notifierType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotifierType {
      get { return notifierType_; }
      set {
        notifierType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shm_locator" field.</summary>
    public const int ShmLocatorFieldNumber = 2;
    private global::Apollo.Cyber.Proto.ShmMulticastLocator shmLocator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.ShmMulticastLocator ShmLocator {
      get { return shmLocator_; }
      set {
        shmLocator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShmConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShmConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotifierType != other.NotifierType) return false;
      if (!object.Equals(ShmLocator, other.ShmLocator)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NotifierType.Length != 0) hash ^= NotifierType.GetHashCode();
      if (shmLocator_ != null) hash ^= ShmLocator.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NotifierType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NotifierType);
      }
      if (shmLocator_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ShmLocator);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NotifierType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotifierType);
      }
      if (shmLocator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShmLocator);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShmConf other) {
      if (other == null) {
        return;
      }
      if (other.NotifierType.Length != 0) {
        NotifierType = other.NotifierType;
      }
      if (other.shmLocator_ != null) {
        if (shmLocator_ == null) {
          shmLocator_ = new global::Apollo.Cyber.Proto.ShmMulticastLocator();
        }
        ShmLocator.MergeFrom(other.ShmLocator);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NotifierType = input.ReadString();
            break;
          }
          case 18: {
            if (shmLocator_ == null) {
              shmLocator_ = new global::Apollo.Cyber.Proto.ShmMulticastLocator();
            }
            input.ReadMessage(shmLocator_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RtpsParticipantAttr : pb::IMessage<RtpsParticipantAttr> {
    private static readonly pb::MessageParser<RtpsParticipantAttr> _parser = new pb::MessageParser<RtpsParticipantAttr>(() => new RtpsParticipantAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RtpsParticipantAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.TransportConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RtpsParticipantAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RtpsParticipantAttr(RtpsParticipantAttr other) : this() {
      leaseDuration_ = other.leaseDuration_;
      announcementPeriod_ = other.announcementPeriod_;
      domainIdGain_ = other.domainIdGain_;
      portBase_ = other.portBase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RtpsParticipantAttr Clone() {
      return new RtpsParticipantAttr(this);
    }

    /// <summary>Field number for the "lease_duration" field.</summary>
    public const int LeaseDurationFieldNumber = 1;
    private int leaseDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaseDuration {
      get { return leaseDuration_; }
      set {
        leaseDuration_ = value;
      }
    }

    /// <summary>Field number for the "announcement_period" field.</summary>
    public const int AnnouncementPeriodFieldNumber = 2;
    private int announcementPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnnouncementPeriod {
      get { return announcementPeriod_; }
      set {
        announcementPeriod_ = value;
      }
    }

    /// <summary>Field number for the "domain_id_gain" field.</summary>
    public const int DomainIdGainFieldNumber = 3;
    private uint domainIdGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DomainIdGain {
      get { return domainIdGain_; }
      set {
        domainIdGain_ = value;
      }
    }

    /// <summary>Field number for the "port_base" field.</summary>
    public const int PortBaseFieldNumber = 4;
    private uint portBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PortBase {
      get { return portBase_; }
      set {
        portBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RtpsParticipantAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RtpsParticipantAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaseDuration != other.LeaseDuration) return false;
      if (AnnouncementPeriod != other.AnnouncementPeriod) return false;
      if (DomainIdGain != other.DomainIdGain) return false;
      if (PortBase != other.PortBase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaseDuration != 0) hash ^= LeaseDuration.GetHashCode();
      if (AnnouncementPeriod != 0) hash ^= AnnouncementPeriod.GetHashCode();
      if (DomainIdGain != 0) hash ^= DomainIdGain.GetHashCode();
      if (PortBase != 0) hash ^= PortBase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaseDuration != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeaseDuration);
      }
      if (AnnouncementPeriod != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AnnouncementPeriod);
      }
      if (DomainIdGain != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DomainIdGain);
      }
      if (PortBase != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PortBase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaseDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaseDuration);
      }
      if (AnnouncementPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnnouncementPeriod);
      }
      if (DomainIdGain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DomainIdGain);
      }
      if (PortBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PortBase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RtpsParticipantAttr other) {
      if (other == null) {
        return;
      }
      if (other.LeaseDuration != 0) {
        LeaseDuration = other.LeaseDuration;
      }
      if (other.AnnouncementPeriod != 0) {
        AnnouncementPeriod = other.AnnouncementPeriod;
      }
      if (other.DomainIdGain != 0) {
        DomainIdGain = other.DomainIdGain;
      }
      if (other.PortBase != 0) {
        PortBase = other.PortBase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeaseDuration = input.ReadInt32();
            break;
          }
          case 16: {
            AnnouncementPeriod = input.ReadInt32();
            break;
          }
          case 24: {
            DomainIdGain = input.ReadUInt32();
            break;
          }
          case 32: {
            PortBase = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommunicationMode : pb::IMessage<CommunicationMode> {
    private static readonly pb::MessageParser<CommunicationMode> _parser = new pb::MessageParser<CommunicationMode>(() => new CommunicationMode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunicationMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.TransportConfReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunicationMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunicationMode(CommunicationMode other) : this() {
      sameProc_ = other.sameProc_;
      diffProc_ = other.diffProc_;
      diffHost_ = other.diffHost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunicationMode Clone() {
      return new CommunicationMode(this);
    }

    /// <summary>Field number for the "same_proc" field.</summary>
    public const int SameProcFieldNumber = 1;
    private global::Apollo.Cyber.Proto.OptionalMode sameProc_ = 0;
    /// <summary>
    /// INTRA SHM RTPS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.OptionalMode SameProc {
      get { return sameProc_; }
      set {
        sameProc_ = value;
      }
    }

    /// <summary>Field number for the "diff_proc" field.</summary>
    public const int DiffProcFieldNumber = 2;
    private global::Apollo.Cyber.Proto.OptionalMode diffProc_ = 0;
    /// <summary>
    /// SHM RTPS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.OptionalMode DiffProc {
      get { return diffProc_; }
      set {
        diffProc_ = value;
      }
    }

    /// <summary>Field number for the "diff_host" field.</summary>
    public const int DiffHostFieldNumber = 3;
    private global::Apollo.Cyber.Proto.OptionalMode diffHost_ = 0;
    /// <summary>
    /// RTPS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.OptionalMode DiffHost {
      get { return diffHost_; }
      set {
        diffHost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunicationMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunicationMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SameProc != other.SameProc) return false;
      if (DiffProc != other.DiffProc) return false;
      if (DiffHost != other.DiffHost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SameProc != 0) hash ^= SameProc.GetHashCode();
      if (DiffProc != 0) hash ^= DiffProc.GetHashCode();
      if (DiffHost != 0) hash ^= DiffHost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SameProc != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SameProc);
      }
      if (DiffProc != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DiffProc);
      }
      if (DiffHost != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DiffHost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SameProc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SameProc);
      }
      if (DiffProc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiffProc);
      }
      if (DiffHost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiffHost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunicationMode other) {
      if (other == null) {
        return;
      }
      if (other.SameProc != 0) {
        SameProc = other.SameProc;
      }
      if (other.DiffProc != 0) {
        DiffProc = other.DiffProc;
      }
      if (other.DiffHost != 0) {
        DiffHost = other.DiffHost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            sameProc_ = (global::Apollo.Cyber.Proto.OptionalMode) input.ReadEnum();
            break;
          }
          case 16: {
            diffProc_ = (global::Apollo.Cyber.Proto.OptionalMode) input.ReadEnum();
            break;
          }
          case 24: {
            diffHost_ = (global::Apollo.Cyber.Proto.OptionalMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceLimit : pb::IMessage<ResourceLimit> {
    private static readonly pb::MessageParser<ResourceLimit> _parser = new pb::MessageParser<ResourceLimit>(() => new ResourceLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.TransportConfReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceLimit(ResourceLimit other) : this() {
      maxHistoryDepth_ = other.maxHistoryDepth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceLimit Clone() {
      return new ResourceLimit(this);
    }

    /// <summary>Field number for the "max_history_depth" field.</summary>
    public const int MaxHistoryDepthFieldNumber = 1;
    private uint maxHistoryDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHistoryDepth {
      get { return maxHistoryDepth_; }
      set {
        maxHistoryDepth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxHistoryDepth != other.MaxHistoryDepth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxHistoryDepth != 0) hash ^= MaxHistoryDepth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxHistoryDepth != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxHistoryDepth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxHistoryDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHistoryDepth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceLimit other) {
      if (other == null) {
        return;
      }
      if (other.MaxHistoryDepth != 0) {
        MaxHistoryDepth = other.MaxHistoryDepth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxHistoryDepth = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransportConf : pb::IMessage<TransportConf> {
    private static readonly pb::MessageParser<TransportConf> _parser = new pb::MessageParser<TransportConf>(() => new TransportConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransportConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Cyber.Proto.TransportConfReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportConf(TransportConf other) : this() {
      ShmConf = other.shmConf_ != null ? other.ShmConf.Clone() : null;
      ParticipantAttr = other.participantAttr_ != null ? other.ParticipantAttr.Clone() : null;
      CommunicationMode = other.communicationMode_ != null ? other.CommunicationMode.Clone() : null;
      ResourceLimit = other.resourceLimit_ != null ? other.ResourceLimit.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportConf Clone() {
      return new TransportConf(this);
    }

    /// <summary>Field number for the "shm_conf" field.</summary>
    public const int ShmConfFieldNumber = 1;
    private global::Apollo.Cyber.Proto.ShmConf shmConf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.ShmConf ShmConf {
      get { return shmConf_; }
      set {
        shmConf_ = value;
      }
    }

    /// <summary>Field number for the "participant_attr" field.</summary>
    public const int ParticipantAttrFieldNumber = 2;
    private global::Apollo.Cyber.Proto.RtpsParticipantAttr participantAttr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.RtpsParticipantAttr ParticipantAttr {
      get { return participantAttr_; }
      set {
        participantAttr_ = value;
      }
    }

    /// <summary>Field number for the "communication_mode" field.</summary>
    public const int CommunicationModeFieldNumber = 3;
    private global::Apollo.Cyber.Proto.CommunicationMode communicationMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.CommunicationMode CommunicationMode {
      get { return communicationMode_; }
      set {
        communicationMode_ = value;
      }
    }

    /// <summary>Field number for the "resource_limit" field.</summary>
    public const int ResourceLimitFieldNumber = 4;
    private global::Apollo.Cyber.Proto.ResourceLimit resourceLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Cyber.Proto.ResourceLimit ResourceLimit {
      get { return resourceLimit_; }
      set {
        resourceLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransportConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransportConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ShmConf, other.ShmConf)) return false;
      if (!object.Equals(ParticipantAttr, other.ParticipantAttr)) return false;
      if (!object.Equals(CommunicationMode, other.CommunicationMode)) return false;
      if (!object.Equals(ResourceLimit, other.ResourceLimit)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shmConf_ != null) hash ^= ShmConf.GetHashCode();
      if (participantAttr_ != null) hash ^= ParticipantAttr.GetHashCode();
      if (communicationMode_ != null) hash ^= CommunicationMode.GetHashCode();
      if (resourceLimit_ != null) hash ^= ResourceLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shmConf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ShmConf);
      }
      if (participantAttr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParticipantAttr);
      }
      if (communicationMode_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CommunicationMode);
      }
      if (resourceLimit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ResourceLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shmConf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShmConf);
      }
      if (participantAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParticipantAttr);
      }
      if (communicationMode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommunicationMode);
      }
      if (resourceLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransportConf other) {
      if (other == null) {
        return;
      }
      if (other.shmConf_ != null) {
        if (shmConf_ == null) {
          shmConf_ = new global::Apollo.Cyber.Proto.ShmConf();
        }
        ShmConf.MergeFrom(other.ShmConf);
      }
      if (other.participantAttr_ != null) {
        if (participantAttr_ == null) {
          participantAttr_ = new global::Apollo.Cyber.Proto.RtpsParticipantAttr();
        }
        ParticipantAttr.MergeFrom(other.ParticipantAttr);
      }
      if (other.communicationMode_ != null) {
        if (communicationMode_ == null) {
          communicationMode_ = new global::Apollo.Cyber.Proto.CommunicationMode();
        }
        CommunicationMode.MergeFrom(other.CommunicationMode);
      }
      if (other.resourceLimit_ != null) {
        if (resourceLimit_ == null) {
          resourceLimit_ = new global::Apollo.Cyber.Proto.ResourceLimit();
        }
        ResourceLimit.MergeFrom(other.ResourceLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (shmConf_ == null) {
              shmConf_ = new global::Apollo.Cyber.Proto.ShmConf();
            }
            input.ReadMessage(shmConf_);
            break;
          }
          case 18: {
            if (participantAttr_ == null) {
              participantAttr_ = new global::Apollo.Cyber.Proto.RtpsParticipantAttr();
            }
            input.ReadMessage(participantAttr_);
            break;
          }
          case 26: {
            if (communicationMode_ == null) {
              communicationMode_ = new global::Apollo.Cyber.Proto.CommunicationMode();
            }
            input.ReadMessage(communicationMode_);
            break;
          }
          case 34: {
            if (resourceLimit_ == null) {
              resourceLimit_ = new global::Apollo.Cyber.Proto.ResourceLimit();
            }
            input.ReadMessage(resourceLimit_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
