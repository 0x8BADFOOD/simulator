// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/vehicle_state/proto/vehicle_state.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Common {

  /// <summary>Holder for reflection information generated from modules/common/vehicle_state/proto/vehicle_state.proto</summary>
  public static partial class VehicleStateReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/common/vehicle_state/proto/vehicle_state.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VehicleStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZtb2R1bGVzL2NvbW1vbi92ZWhpY2xlX3N0YXRlL3Byb3RvL3ZlaGljbGVf",
            "c3RhdGUucHJvdG8SDWFwb2xsby5jb21tb24aIm1vZHVsZXMvY2FuYnVzL3By",
            "b3RvL2NoYXNzaXMucHJvdG8aJW1vZHVsZXMvbG9jYWxpemF0aW9uL3Byb3Rv",
            "L3Bvc2UucHJvdG8i8gIKDFZlaGljbGVTdGF0ZRIJCgF4GAEgASgBEgkKAXkY",
            "AiABKAESCQoBehgDIAEoARIRCgl0aW1lc3RhbXAYBCABKAESDAoEcm9sbBgF",
            "IAEoARINCgVwaXRjaBgGIAEoARILCgN5YXcYByABKAESDwoHaGVhZGluZxgI",
            "IAEoARINCgVrYXBwYRgJIAEoARIXCg9saW5lYXJfdmVsb2NpdHkYCiABKAES",
            "GAoQYW5ndWxhcl92ZWxvY2l0eRgLIAEoARIbChNsaW5lYXJfYWNjZWxlcmF0",
            "aW9uGAwgASgBEjEKBGdlYXIYDSABKA4yIy5hcG9sbG8uY2FuYnVzLkNoYXNz",
            "aXMuR2VhclBvc2l0aW9uEjgKDGRyaXZpbmdfbW9kZRgOIAEoDjIiLmFwb2xs",
            "by5jYW5idXMuQ2hhc3Npcy5Ecml2aW5nTW9kZRInCgRwb3NlGA8gASgLMhku",
            "YXBvbGxvLmxvY2FsaXphdGlvbi5Qb3NlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Canbus.ChassisReflection.Descriptor, global::Apollo.Localization.PoseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.VehicleState), global::Apollo.Common.VehicleState.Parser, new[]{ "X", "Y", "Z", "Timestamp", "Roll", "Pitch", "Yaw", "Heading", "Kappa", "LinearVelocity", "AngularVelocity", "LinearAcceleration", "Gear", "DrivingMode", "Pose" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VehicleState : pb::IMessage<VehicleState> {
    private static readonly pb::MessageParser<VehicleState> _parser = new pb::MessageParser<VehicleState>(() => new VehicleState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.VehicleStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleState(VehicleState other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      timestamp_ = other.timestamp_;
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      heading_ = other.heading_;
      kappa_ = other.kappa_;
      linearVelocity_ = other.linearVelocity_;
      angularVelocity_ = other.angularVelocity_;
      linearAcceleration_ = other.linearAcceleration_;
      gear_ = other.gear_;
      drivingMode_ = other.drivingMode_;
      Pose = other.pose_ != null ? other.Pose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleState Clone() {
      return new VehicleState(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 5;
    private double roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 6;
    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 7;
    private double yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 8;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "kappa" field.</summary>
    public const int KappaFieldNumber = 9;
    private double kappa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Kappa {
      get { return kappa_; }
      set {
        kappa_ = value;
      }
    }

    /// <summary>Field number for the "linear_velocity" field.</summary>
    public const int LinearVelocityFieldNumber = 10;
    private double linearVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LinearVelocity {
      get { return linearVelocity_; }
      set {
        linearVelocity_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 11;
    private double angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "linear_acceleration" field.</summary>
    public const int LinearAccelerationFieldNumber = 12;
    private double linearAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LinearAcceleration {
      get { return linearAcceleration_; }
      set {
        linearAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "gear" field.</summary>
    public const int GearFieldNumber = 13;
    private global::Apollo.Canbus.Chassis.Types.GearPosition gear_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.GearPosition Gear {
      get { return gear_; }
      set {
        gear_ = value;
      }
    }

    /// <summary>Field number for the "driving_mode" field.</summary>
    public const int DrivingModeFieldNumber = 14;
    private global::Apollo.Canbus.Chassis.Types.DrivingMode drivingMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.DrivingMode DrivingMode {
      get { return drivingMode_; }
      set {
        drivingMode_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 15;
    private global::Apollo.Localization.Pose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Localization.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Roll != other.Roll) return false;
      if (Pitch != other.Pitch) return false;
      if (Yaw != other.Yaw) return false;
      if (Heading != other.Heading) return false;
      if (Kappa != other.Kappa) return false;
      if (LinearVelocity != other.LinearVelocity) return false;
      if (AngularVelocity != other.AngularVelocity) return false;
      if (LinearAcceleration != other.LinearAcceleration) return false;
      if (Gear != other.Gear) return false;
      if (DrivingMode != other.DrivingMode) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      if (Roll != 0D) hash ^= Roll.GetHashCode();
      if (Pitch != 0D) hash ^= Pitch.GetHashCode();
      if (Yaw != 0D) hash ^= Yaw.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Kappa != 0D) hash ^= Kappa.GetHashCode();
      if (LinearVelocity != 0D) hash ^= LinearVelocity.GetHashCode();
      if (AngularVelocity != 0D) hash ^= AngularVelocity.GetHashCode();
      if (LinearAcceleration != 0D) hash ^= LinearAcceleration.GetHashCode();
      if (Gear != 0) hash ^= Gear.GetHashCode();
      if (DrivingMode != 0) hash ^= DrivingMode.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Timestamp);
      }
      if (Roll != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Roll);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Pitch);
      }
      if (Yaw != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Yaw);
      }
      if (Heading != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Heading);
      }
      if (Kappa != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Kappa);
      }
      if (LinearVelocity != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(LinearVelocity);
      }
      if (AngularVelocity != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AngularVelocity);
      }
      if (LinearAcceleration != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(LinearAcceleration);
      }
      if (Gear != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Gear);
      }
      if (DrivingMode != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) DrivingMode);
      }
      if (pose_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Pose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (Roll != 0D) {
        size += 1 + 8;
      }
      if (Pitch != 0D) {
        size += 1 + 8;
      }
      if (Yaw != 0D) {
        size += 1 + 8;
      }
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Kappa != 0D) {
        size += 1 + 8;
      }
      if (LinearVelocity != 0D) {
        size += 1 + 8;
      }
      if (AngularVelocity != 0D) {
        size += 1 + 8;
      }
      if (LinearAcceleration != 0D) {
        size += 1 + 8;
      }
      if (Gear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gear);
      }
      if (DrivingMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingMode);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleState other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      if (other.Roll != 0D) {
        Roll = other.Roll;
      }
      if (other.Pitch != 0D) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0D) {
        Yaw = other.Yaw;
      }
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Kappa != 0D) {
        Kappa = other.Kappa;
      }
      if (other.LinearVelocity != 0D) {
        LinearVelocity = other.LinearVelocity;
      }
      if (other.AngularVelocity != 0D) {
        AngularVelocity = other.AngularVelocity;
      }
      if (other.LinearAcceleration != 0D) {
        LinearAcceleration = other.LinearAcceleration;
      }
      if (other.Gear != 0) {
        Gear = other.Gear;
      }
      if (other.DrivingMode != 0) {
        DrivingMode = other.DrivingMode;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Apollo.Localization.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 41: {
            Roll = input.ReadDouble();
            break;
          }
          case 49: {
            Pitch = input.ReadDouble();
            break;
          }
          case 57: {
            Yaw = input.ReadDouble();
            break;
          }
          case 65: {
            Heading = input.ReadDouble();
            break;
          }
          case 73: {
            Kappa = input.ReadDouble();
            break;
          }
          case 81: {
            LinearVelocity = input.ReadDouble();
            break;
          }
          case 89: {
            AngularVelocity = input.ReadDouble();
            break;
          }
          case 97: {
            LinearAcceleration = input.ReadDouble();
            break;
          }
          case 104: {
            gear_ = (global::Apollo.Canbus.Chassis.Types.GearPosition) input.ReadEnum();
            break;
          }
          case 112: {
            drivingMode_ = (global::Apollo.Canbus.Chassis.Types.DrivingMode) input.ReadEnum();
            break;
          }
          case 122: {
            if (pose_ == null) {
              pose_ = new global::Apollo.Localization.Pose();
            }
            input.ReadMessage(pose_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
