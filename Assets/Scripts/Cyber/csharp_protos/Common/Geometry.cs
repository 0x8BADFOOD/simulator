// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/geometry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Common {

  /// <summary>Holder for reflection information generated from modules/common/proto/geometry.proto</summary>
  public static partial class GeometryReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/common/proto/geometry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeometryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNtb2R1bGVzL2NvbW1vbi9wcm90by9nZW9tZXRyeS5wcm90bxINYXBvbGxv",
            "LmNvbW1vbiIrCghQb2ludEVOVRIJCgF4GAEgASgBEgkKAXkYAiABKAESCQoB",
            "ehgDIAEoASI0CghQb2ludExMSBILCgNsb24YASABKAESCwoDbGF0GAIgASgB",
            "Eg4KBmhlaWdodBgDIAEoASIfCgdQb2ludDJEEgkKAXgYASABKAESCQoBeRgC",
            "IAEoASIqCgdQb2ludDNEEgkKAXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMg",
            "ASgBIjwKClF1YXRlcm5pb24SCgoCcXgYASABKAESCgoCcXkYAiABKAESCgoC",
            "cXoYAyABKAESCgoCcXcYBCABKAEiMAoHUG9seWdvbhIlCgVwb2ludBgBIAMo",
            "CzIWLmFwb2xsby5jb21tb24uUG9pbnQzRGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.PointENU), global::Apollo.Common.PointENU.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.PointLLH), global::Apollo.Common.PointLLH.Parser, new[]{ "Lon", "Lat", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Point2D), global::Apollo.Common.Point2D.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Point3D), global::Apollo.Common.Point3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Quaternion), global::Apollo.Common.Quaternion.Parser, new[]{ "Qx", "Qy", "Qz", "Qw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Common.Polygon), global::Apollo.Common.Polygon.Parser, new[]{ "Point" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A point in the map reference frame. The map defines an origin, whose
  /// coordinate is (0, 0, 0).
  /// Most modules, including localization, perception, and prediction, generate
  /// results based on the map reference frame.
  /// Currently, the map uses Universal Transverse Mercator (UTM) projection. See
  /// the link below for the definition of map origin.
  ///   https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system
  /// The z field of PointENU can be omitted. If so, it is a 2D location and we do
  /// not care its height.
  /// </summary>
  public sealed partial class PointENU : pb::IMessage<PointENU> {
    private static readonly pb::MessageParser<PointENU> _parser = new pb::MessageParser<PointENU>(() => new PointENU());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointENU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.GeometryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointENU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointENU(PointENU other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointENU Clone() {
      return new PointENU(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    /// <summary>
    /// East from the origin, in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    /// <summary>
    /// North from the origin, in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    /// <summary>
    /// Up from the WGS-84 ellipsoid, in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointENU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointENU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointENU other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A point in the global reference frame. Similar to PointENU, PointLLH allows
  /// omitting the height field for representing a 2D location.
  /// </summary>
  public sealed partial class PointLLH : pb::IMessage<PointLLH> {
    private static readonly pb::MessageParser<PointLLH> _parser = new pb::MessageParser<PointLLH>(() => new PointLLH());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointLLH> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.GeometryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointLLH() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointLLH(PointLLH other) : this() {
      lon_ = other.lon_;
      lat_ = other.lat_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointLLH Clone() {
      return new PointLLH(this);
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 1;
    private double lon_;
    /// <summary>
    /// Longitude in degrees, ranging from -180 to 180.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 2;
    private double lat_;
    /// <summary>
    /// Latitude in degrees, ranging from -90 to 90.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private double height_;
    /// <summary>
    /// WGS-84 ellipsoid height in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointLLH);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointLLH other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lon != other.Lon) return false;
      if (Lat != other.Lat) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lon != 0D) hash ^= Lon.GetHashCode();
      if (Lat != 0D) hash ^= Lat.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lon != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Lon);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Height != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lon != 0D) {
        size += 1 + 8;
      }
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointLLH other) {
      if (other == null) {
        return;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Lon = input.ReadDouble();
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Height = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A general 2D point. Its meaning and units depend on context, and must be
  /// explained in comments.
  /// </summary>
  public sealed partial class Point2D : pb::IMessage<Point2D> {
    private static readonly pb::MessageParser<Point2D> _parser = new pb::MessageParser<Point2D>(() => new Point2D());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point2D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.GeometryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D(Point2D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D Clone() {
      return new Point2D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point2D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point2D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point2D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A general 3D point. Its meaning and units depend on context, and must be
  /// explained in comments.
  /// </summary>
  public sealed partial class Point3D : pb::IMessage<Point3D> {
    private static readonly pb::MessageParser<Point3D> _parser = new pb::MessageParser<Point3D>(() => new Point3D());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.GeometryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3D(Point3D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3D Clone() {
      return new Point3D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point3D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A unit quaternion that represents a spatial rotation. See the link below for
  /// details.
  ///   https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation
  /// The scalar part qw can be omitted. In this case, qw should be calculated by
  ///   qw = sqrt(1 - qx * qx - qy * qy - qz * qz).
  /// </summary>
  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.GeometryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      qx_ = other.qx_;
      qy_ = other.qy_;
      qz_ = other.qz_;
      qw_ = other.qw_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "qx" field.</summary>
    public const int QxFieldNumber = 1;
    private double qx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qx {
      get { return qx_; }
      set {
        qx_ = value;
      }
    }

    /// <summary>Field number for the "qy" field.</summary>
    public const int QyFieldNumber = 2;
    private double qy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qy {
      get { return qy_; }
      set {
        qy_ = value;
      }
    }

    /// <summary>Field number for the "qz" field.</summary>
    public const int QzFieldNumber = 3;
    private double qz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qz {
      get { return qz_; }
      set {
        qz_ = value;
      }
    }

    /// <summary>Field number for the "qw" field.</summary>
    public const int QwFieldNumber = 4;
    private double qw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qw {
      get { return qw_; }
      set {
        qw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Qx != other.Qx) return false;
      if (Qy != other.Qy) return false;
      if (Qz != other.Qz) return false;
      if (Qw != other.Qw) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Qx != 0D) hash ^= Qx.GetHashCode();
      if (Qy != 0D) hash ^= Qy.GetHashCode();
      if (Qz != 0D) hash ^= Qz.GetHashCode();
      if (Qw != 0D) hash ^= Qw.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Qx != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Qx);
      }
      if (Qy != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Qy);
      }
      if (Qz != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Qz);
      }
      if (Qw != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Qw);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Qx != 0D) {
        size += 1 + 8;
      }
      if (Qy != 0D) {
        size += 1 + 8;
      }
      if (Qz != 0D) {
        size += 1 + 8;
      }
      if (Qw != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.Qx != 0D) {
        Qx = other.Qx;
      }
      if (other.Qy != 0D) {
        Qy = other.Qy;
      }
      if (other.Qz != 0D) {
        Qz = other.Qz;
      }
      if (other.Qw != 0D) {
        Qw = other.Qw;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Qx = input.ReadDouble();
            break;
          }
          case 17: {
            Qy = input.ReadDouble();
            break;
          }
          case 25: {
            Qz = input.ReadDouble();
            break;
          }
          case 33: {
            Qw = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A general polygon, points are counter clockwise
  /// </summary>
  public sealed partial class Polygon : pb::IMessage<Polygon> {
    private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Common.GeometryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon(Polygon other) : this() {
      point_ = other.point_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon Clone() {
      return new Polygon(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Common.Point3D> _repeated_point_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Common.Point3D.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Point3D> point_ = new pbc::RepeatedField<global::Apollo.Common.Point3D>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Point3D> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Polygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polygon other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
