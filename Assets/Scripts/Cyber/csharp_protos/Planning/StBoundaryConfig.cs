// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/st_boundary_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/st_boundary_config.proto</summary>
  public static partial class StBoundaryConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/st_boundary_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StBoundaryConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3N0X2JvdW5kYXJ5X2NvbmZpZy5w",
            "cm90bxIPYXBvbGxvLnBsYW5uaW5nIpgDChBTdEJvdW5kYXJ5Q29uZmlnEhcK",
            "D2JvdW5kYXJ5X2J1ZmZlchgBIAEoARItCiVoaWdoX3NwZWVkX2NlbnRyaWNf",
            "YWNjZWxlcmF0aW9uX2xpbWl0GAIgASgBEiwKJGxvd19zcGVlZF9jZW50cmlj",
            "X2FjY2VsZXJhdGlvbl9saW1pdBgDIAEoARIcChRoaWdoX3NwZWVkX3RocmVz",
            "aG9sZBgEIAEoARIbChNsb3dfc3BlZWRfdGhyZXNob2xkGAUgASgBEhUKDW1p",
            "bmltYWxfa2FwcGEYBiABKAESFwoPcG9pbnRfZXh0ZW5zaW9uGAcgASgBEhQK",
            "DGxvd2VzdF9zcGVlZBgIIAEoARIfChdudW1fcG9pbnRzX3RvX2F2Z19rYXBw",
            "YRgJIAEoDRIkChxzdGF0aWNfb2JzX251ZGdlX3NwZWVkX3JhdGlvGAogASgB",
            "EiUKHWR5bmFtaWNfb2JzX251ZGdlX3NwZWVkX3JhdGlvGAsgASgBEh8KF2Nl",
            "bnRyaV9qZXJrX3NwZWVkX2NvZWZmGAwgASgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.StBoundaryConfig), global::Apollo.Planning.StBoundaryConfig.Parser, new[]{ "BoundaryBuffer", "HighSpeedCentricAccelerationLimit", "LowSpeedCentricAccelerationLimit", "HighSpeedThreshold", "LowSpeedThreshold", "MinimalKappa", "PointExtension", "LowestSpeed", "NumPointsToAvgKappa", "StaticObsNudgeSpeedRatio", "DynamicObsNudgeSpeedRatio", "CentriJerkSpeedCoeff" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StBoundaryConfig : pb::IMessage<StBoundaryConfig> {
    private static readonly pb::MessageParser<StBoundaryConfig> _parser = new pb::MessageParser<StBoundaryConfig>(() => new StBoundaryConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StBoundaryConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.StBoundaryConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBoundaryConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBoundaryConfig(StBoundaryConfig other) : this() {
      boundaryBuffer_ = other.boundaryBuffer_;
      highSpeedCentricAccelerationLimit_ = other.highSpeedCentricAccelerationLimit_;
      lowSpeedCentricAccelerationLimit_ = other.lowSpeedCentricAccelerationLimit_;
      highSpeedThreshold_ = other.highSpeedThreshold_;
      lowSpeedThreshold_ = other.lowSpeedThreshold_;
      minimalKappa_ = other.minimalKappa_;
      pointExtension_ = other.pointExtension_;
      lowestSpeed_ = other.lowestSpeed_;
      numPointsToAvgKappa_ = other.numPointsToAvgKappa_;
      staticObsNudgeSpeedRatio_ = other.staticObsNudgeSpeedRatio_;
      dynamicObsNudgeSpeedRatio_ = other.dynamicObsNudgeSpeedRatio_;
      centriJerkSpeedCoeff_ = other.centriJerkSpeedCoeff_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBoundaryConfig Clone() {
      return new StBoundaryConfig(this);
    }

    /// <summary>Field number for the "boundary_buffer" field.</summary>
    public const int BoundaryBufferFieldNumber = 1;
    private double boundaryBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BoundaryBuffer {
      get { return boundaryBuffer_; }
      set {
        boundaryBuffer_ = value;
      }
    }

    /// <summary>Field number for the "high_speed_centric_acceleration_limit" field.</summary>
    public const int HighSpeedCentricAccelerationLimitFieldNumber = 2;
    private double highSpeedCentricAccelerationLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HighSpeedCentricAccelerationLimit {
      get { return highSpeedCentricAccelerationLimit_; }
      set {
        highSpeedCentricAccelerationLimit_ = value;
      }
    }

    /// <summary>Field number for the "low_speed_centric_acceleration_limit" field.</summary>
    public const int LowSpeedCentricAccelerationLimitFieldNumber = 3;
    private double lowSpeedCentricAccelerationLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowSpeedCentricAccelerationLimit {
      get { return lowSpeedCentricAccelerationLimit_; }
      set {
        lowSpeedCentricAccelerationLimit_ = value;
      }
    }

    /// <summary>Field number for the "high_speed_threshold" field.</summary>
    public const int HighSpeedThresholdFieldNumber = 4;
    private double highSpeedThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HighSpeedThreshold {
      get { return highSpeedThreshold_; }
      set {
        highSpeedThreshold_ = value;
      }
    }

    /// <summary>Field number for the "low_speed_threshold" field.</summary>
    public const int LowSpeedThresholdFieldNumber = 5;
    private double lowSpeedThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowSpeedThreshold {
      get { return lowSpeedThreshold_; }
      set {
        lowSpeedThreshold_ = value;
      }
    }

    /// <summary>Field number for the "minimal_kappa" field.</summary>
    public const int MinimalKappaFieldNumber = 6;
    private double minimalKappa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinimalKappa {
      get { return minimalKappa_; }
      set {
        minimalKappa_ = value;
      }
    }

    /// <summary>Field number for the "point_extension" field.</summary>
    public const int PointExtensionFieldNumber = 7;
    private double pointExtension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PointExtension {
      get { return pointExtension_; }
      set {
        pointExtension_ = value;
      }
    }

    /// <summary>Field number for the "lowest_speed" field.</summary>
    public const int LowestSpeedFieldNumber = 8;
    private double lowestSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowestSpeed {
      get { return lowestSpeed_; }
      set {
        lowestSpeed_ = value;
      }
    }

    /// <summary>Field number for the "num_points_to_avg_kappa" field.</summary>
    public const int NumPointsToAvgKappaFieldNumber = 9;
    private uint numPointsToAvgKappa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPointsToAvgKappa {
      get { return numPointsToAvgKappa_; }
      set {
        numPointsToAvgKappa_ = value;
      }
    }

    /// <summary>Field number for the "static_obs_nudge_speed_ratio" field.</summary>
    public const int StaticObsNudgeSpeedRatioFieldNumber = 10;
    private double staticObsNudgeSpeedRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StaticObsNudgeSpeedRatio {
      get { return staticObsNudgeSpeedRatio_; }
      set {
        staticObsNudgeSpeedRatio_ = value;
      }
    }

    /// <summary>Field number for the "dynamic_obs_nudge_speed_ratio" field.</summary>
    public const int DynamicObsNudgeSpeedRatioFieldNumber = 11;
    private double dynamicObsNudgeSpeedRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DynamicObsNudgeSpeedRatio {
      get { return dynamicObsNudgeSpeedRatio_; }
      set {
        dynamicObsNudgeSpeedRatio_ = value;
      }
    }

    /// <summary>Field number for the "centri_jerk_speed_coeff" field.</summary>
    public const int CentriJerkSpeedCoeffFieldNumber = 12;
    private double centriJerkSpeedCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CentriJerkSpeedCoeff {
      get { return centriJerkSpeedCoeff_; }
      set {
        centriJerkSpeedCoeff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StBoundaryConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StBoundaryConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoundaryBuffer != other.BoundaryBuffer) return false;
      if (HighSpeedCentricAccelerationLimit != other.HighSpeedCentricAccelerationLimit) return false;
      if (LowSpeedCentricAccelerationLimit != other.LowSpeedCentricAccelerationLimit) return false;
      if (HighSpeedThreshold != other.HighSpeedThreshold) return false;
      if (LowSpeedThreshold != other.LowSpeedThreshold) return false;
      if (MinimalKappa != other.MinimalKappa) return false;
      if (PointExtension != other.PointExtension) return false;
      if (LowestSpeed != other.LowestSpeed) return false;
      if (NumPointsToAvgKappa != other.NumPointsToAvgKappa) return false;
      if (StaticObsNudgeSpeedRatio != other.StaticObsNudgeSpeedRatio) return false;
      if (DynamicObsNudgeSpeedRatio != other.DynamicObsNudgeSpeedRatio) return false;
      if (CentriJerkSpeedCoeff != other.CentriJerkSpeedCoeff) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoundaryBuffer != 0D) hash ^= BoundaryBuffer.GetHashCode();
      if (HighSpeedCentricAccelerationLimit != 0D) hash ^= HighSpeedCentricAccelerationLimit.GetHashCode();
      if (LowSpeedCentricAccelerationLimit != 0D) hash ^= LowSpeedCentricAccelerationLimit.GetHashCode();
      if (HighSpeedThreshold != 0D) hash ^= HighSpeedThreshold.GetHashCode();
      if (LowSpeedThreshold != 0D) hash ^= LowSpeedThreshold.GetHashCode();
      if (MinimalKappa != 0D) hash ^= MinimalKappa.GetHashCode();
      if (PointExtension != 0D) hash ^= PointExtension.GetHashCode();
      if (LowestSpeed != 0D) hash ^= LowestSpeed.GetHashCode();
      if (NumPointsToAvgKappa != 0) hash ^= NumPointsToAvgKappa.GetHashCode();
      if (StaticObsNudgeSpeedRatio != 0D) hash ^= StaticObsNudgeSpeedRatio.GetHashCode();
      if (DynamicObsNudgeSpeedRatio != 0D) hash ^= DynamicObsNudgeSpeedRatio.GetHashCode();
      if (CentriJerkSpeedCoeff != 0D) hash ^= CentriJerkSpeedCoeff.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoundaryBuffer != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BoundaryBuffer);
      }
      if (HighSpeedCentricAccelerationLimit != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(HighSpeedCentricAccelerationLimit);
      }
      if (LowSpeedCentricAccelerationLimit != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LowSpeedCentricAccelerationLimit);
      }
      if (HighSpeedThreshold != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(HighSpeedThreshold);
      }
      if (LowSpeedThreshold != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LowSpeedThreshold);
      }
      if (MinimalKappa != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MinimalKappa);
      }
      if (PointExtension != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PointExtension);
      }
      if (LowestSpeed != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(LowestSpeed);
      }
      if (NumPointsToAvgKappa != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumPointsToAvgKappa);
      }
      if (StaticObsNudgeSpeedRatio != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(StaticObsNudgeSpeedRatio);
      }
      if (DynamicObsNudgeSpeedRatio != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(DynamicObsNudgeSpeedRatio);
      }
      if (CentriJerkSpeedCoeff != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(CentriJerkSpeedCoeff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoundaryBuffer != 0D) {
        size += 1 + 8;
      }
      if (HighSpeedCentricAccelerationLimit != 0D) {
        size += 1 + 8;
      }
      if (LowSpeedCentricAccelerationLimit != 0D) {
        size += 1 + 8;
      }
      if (HighSpeedThreshold != 0D) {
        size += 1 + 8;
      }
      if (LowSpeedThreshold != 0D) {
        size += 1 + 8;
      }
      if (MinimalKappa != 0D) {
        size += 1 + 8;
      }
      if (PointExtension != 0D) {
        size += 1 + 8;
      }
      if (LowestSpeed != 0D) {
        size += 1 + 8;
      }
      if (NumPointsToAvgKappa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPointsToAvgKappa);
      }
      if (StaticObsNudgeSpeedRatio != 0D) {
        size += 1 + 8;
      }
      if (DynamicObsNudgeSpeedRatio != 0D) {
        size += 1 + 8;
      }
      if (CentriJerkSpeedCoeff != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StBoundaryConfig other) {
      if (other == null) {
        return;
      }
      if (other.BoundaryBuffer != 0D) {
        BoundaryBuffer = other.BoundaryBuffer;
      }
      if (other.HighSpeedCentricAccelerationLimit != 0D) {
        HighSpeedCentricAccelerationLimit = other.HighSpeedCentricAccelerationLimit;
      }
      if (other.LowSpeedCentricAccelerationLimit != 0D) {
        LowSpeedCentricAccelerationLimit = other.LowSpeedCentricAccelerationLimit;
      }
      if (other.HighSpeedThreshold != 0D) {
        HighSpeedThreshold = other.HighSpeedThreshold;
      }
      if (other.LowSpeedThreshold != 0D) {
        LowSpeedThreshold = other.LowSpeedThreshold;
      }
      if (other.MinimalKappa != 0D) {
        MinimalKappa = other.MinimalKappa;
      }
      if (other.PointExtension != 0D) {
        PointExtension = other.PointExtension;
      }
      if (other.LowestSpeed != 0D) {
        LowestSpeed = other.LowestSpeed;
      }
      if (other.NumPointsToAvgKappa != 0) {
        NumPointsToAvgKappa = other.NumPointsToAvgKappa;
      }
      if (other.StaticObsNudgeSpeedRatio != 0D) {
        StaticObsNudgeSpeedRatio = other.StaticObsNudgeSpeedRatio;
      }
      if (other.DynamicObsNudgeSpeedRatio != 0D) {
        DynamicObsNudgeSpeedRatio = other.DynamicObsNudgeSpeedRatio;
      }
      if (other.CentriJerkSpeedCoeff != 0D) {
        CentriJerkSpeedCoeff = other.CentriJerkSpeedCoeff;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            BoundaryBuffer = input.ReadDouble();
            break;
          }
          case 17: {
            HighSpeedCentricAccelerationLimit = input.ReadDouble();
            break;
          }
          case 25: {
            LowSpeedCentricAccelerationLimit = input.ReadDouble();
            break;
          }
          case 33: {
            HighSpeedThreshold = input.ReadDouble();
            break;
          }
          case 41: {
            LowSpeedThreshold = input.ReadDouble();
            break;
          }
          case 49: {
            MinimalKappa = input.ReadDouble();
            break;
          }
          case 57: {
            PointExtension = input.ReadDouble();
            break;
          }
          case 65: {
            LowestSpeed = input.ReadDouble();
            break;
          }
          case 72: {
            NumPointsToAvgKappa = input.ReadUInt32();
            break;
          }
          case 81: {
            StaticObsNudgeSpeedRatio = input.ReadDouble();
            break;
          }
          case 89: {
            DynamicObsNudgeSpeedRatio = input.ReadDouble();
            break;
          }
          case 97: {
            CentriJerkSpeedCoeff = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
