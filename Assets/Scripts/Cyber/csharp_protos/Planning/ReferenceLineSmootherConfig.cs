// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/reference_line_smoother_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/reference_line_smoother_config.proto</summary>
  public static partial class ReferenceLineSmootherConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/reference_line_smoother_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReferenceLineSmootherConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjttb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3JlZmVyZW5jZV9saW5lX3Ntb290",
            "aGVyX2NvbmZpZy5wcm90bxIPYXBvbGxvLnBsYW5uaW5nIqsBChZRcFNwbGlu",
            "ZVNtb290aGVyQ29uZmlnEhQKDHNwbGluZV9vcmRlchgBIAEoDRIZChFtYXhf",
            "c3BsaW5lX2xlbmd0aBgCIAEoARIdChVyZWd1bGFyaXphdGlvbl93ZWlnaHQY",
            "AyABKAESIAoYc2Vjb25kX2Rlcml2YXRpdmVfd2VpZ2h0GAQgASgBEh8KF3Ro",
            "aXJkX2Rlcml2YXRpdmVfd2VpZ2h0GAUgASgBIvcBChRTcGlyYWxTbW9vdGhl",
            "ckNvbmZpZxIVCg1tYXhfZGV2aWF0aW9uGAEgASgBEhgKEHBpZWNld2lzZV9s",
            "ZW5ndGgYAiABKAESFQoNbWF4X2l0ZXJhdGlvbhgDIAEoDRIPCgdvcHRfdG9s",
            "GAQgASgBEhoKEm9wdF9hY2NlcHRhYmxlX3RvbBgFIAEoARIgChhvcHRfYWNj",
            "ZXB0YWJsZV9pdGVyYXRpb24YBiABKA0SGwoTd2VpZ2h0X2N1cnZlX2xlbmd0",
            "aBgHIAEoARIUCgx3ZWlnaHRfa2FwcGEYCCABKAESFQoNd2VpZ2h0X2RrYXBw",
            "YRgJIAEoASKxAQoWQ29zVGhldGFTbW9vdGhlckNvbmZpZxIbChNtYXhfcG9p",
            "bnRfZGV2aWF0aW9uGAEgASgBEhgKEG51bV9vZl9pdGVyYXRpb24YAiABKAUS",
            "IQoZd2VpZ2h0X2Nvc19pbmNsdWRlZF9hbmdsZRgDIAEoARIWCg5hY2NlcHRh",
            "YmxlX3RvbBgEIAEoARINCgVyZWxheBgFIAEoARIWCg5yZW9wdF9xcF9ib3Vu",
            "ZBgGIAEoASLlBAobUmVmZXJlbmNlTGluZVNtb290aGVyQ29uZmlnEh8KF21h",
            "eF9jb25zdHJhaW50X2ludGVydmFsGAEgASgBEiMKG2xvbmdpdHVkaW5hbF9i",
            "b3VuZGFyeV9ib3VuZBgCIAEoARIeChZsYXRlcmFsX2JvdW5kYXJ5X2JvdW5k",
            "GAMgASgBEhsKE251bV9vZl90b3RhbF9wb2ludHMYBCABKA0SEgoKY3VyYl9z",
            "aGlmdBgFIAEoARJOCgxkcml2aW5nX3NpZGUYBiABKA4yOC5hcG9sbG8ucGxh",
            "bm5pbmcuUmVmZXJlbmNlTGluZVNtb290aGVyQ29uZmlnLkRyaXZpbmdTaWRl",
            "EiIKGndpZGVfbGFuZV90aHJlc2hvbGRfZmFjdG9yGAcgASgBEiUKHXdpZGVf",
            "bGFuZV9zaGlmdF9yZW1haW5fZmFjdG9yGAggASgBEhIKCnJlc29sdXRpb24Y",
            "CSABKAESPAoJcXBfc3BsaW5lGBQgASgLMicuYXBvbGxvLnBsYW5uaW5nLlFw",
            "U3BsaW5lU21vb3RoZXJDb25maWdIABI3CgZzcGlyYWwYFSABKAsyJS5hcG9s",
            "bG8ucGxhbm5pbmcuU3BpcmFsU21vb3RoZXJDb25maWdIABI8Cgljb3NfdGhl",
            "dGEYFiABKAsyJy5hcG9sbG8ucGxhbm5pbmcuQ29zVGhldGFTbW9vdGhlckNv",
            "bmZpZ0gAIjkKC0RyaXZpbmdTaWRlEhUKEURSSVZJTkdTSURFX0RVTU1ZEAAS",
            "CAoETEVGVBABEgkKBVJJR0hUEAJCEAoOU21vb3RoZXJDb25maWdiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QpSplineSmootherConfig), global::Apollo.Planning.QpSplineSmootherConfig.Parser, new[]{ "SplineOrder", "MaxSplineLength", "RegularizationWeight", "SecondDerivativeWeight", "ThirdDerivativeWeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.SpiralSmootherConfig), global::Apollo.Planning.SpiralSmootherConfig.Parser, new[]{ "MaxDeviation", "PiecewiseLength", "MaxIteration", "OptTol", "OptAcceptableTol", "OptAcceptableIteration", "WeightCurveLength", "WeightKappa", "WeightDkappa" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.CosThetaSmootherConfig), global::Apollo.Planning.CosThetaSmootherConfig.Parser, new[]{ "MaxPointDeviation", "NumOfIteration", "WeightCosIncludedAngle", "AcceptableTol", "Relax", "ReoptQpBound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ReferenceLineSmootherConfig), global::Apollo.Planning.ReferenceLineSmootherConfig.Parser, new[]{ "MaxConstraintInterval", "LongitudinalBoundaryBound", "LateralBoundaryBound", "NumOfTotalPoints", "CurbShift", "DrivingSide", "WideLaneThresholdFactor", "WideLaneShiftRemainFactor", "Resolution", "QpSpline", "Spiral", "CosTheta" }, new[]{ "SmootherConfig" }, new[]{ typeof(global::Apollo.Planning.ReferenceLineSmootherConfig.Types.DrivingSide) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QpSplineSmootherConfig : pb::IMessage<QpSplineSmootherConfig> {
    private static readonly pb::MessageParser<QpSplineSmootherConfig> _parser = new pb::MessageParser<QpSplineSmootherConfig>(() => new QpSplineSmootherConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QpSplineSmootherConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.ReferenceLineSmootherConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplineSmootherConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplineSmootherConfig(QpSplineSmootherConfig other) : this() {
      splineOrder_ = other.splineOrder_;
      maxSplineLength_ = other.maxSplineLength_;
      regularizationWeight_ = other.regularizationWeight_;
      secondDerivativeWeight_ = other.secondDerivativeWeight_;
      thirdDerivativeWeight_ = other.thirdDerivativeWeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplineSmootherConfig Clone() {
      return new QpSplineSmootherConfig(this);
    }

    /// <summary>Field number for the "spline_order" field.</summary>
    public const int SplineOrderFieldNumber = 1;
    private uint splineOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SplineOrder {
      get { return splineOrder_; }
      set {
        splineOrder_ = value;
      }
    }

    /// <summary>Field number for the "max_spline_length" field.</summary>
    public const int MaxSplineLengthFieldNumber = 2;
    private double maxSplineLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSplineLength {
      get { return maxSplineLength_; }
      set {
        maxSplineLength_ = value;
      }
    }

    /// <summary>Field number for the "regularization_weight" field.</summary>
    public const int RegularizationWeightFieldNumber = 3;
    private double regularizationWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RegularizationWeight {
      get { return regularizationWeight_; }
      set {
        regularizationWeight_ = value;
      }
    }

    /// <summary>Field number for the "second_derivative_weight" field.</summary>
    public const int SecondDerivativeWeightFieldNumber = 4;
    private double secondDerivativeWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SecondDerivativeWeight {
      get { return secondDerivativeWeight_; }
      set {
        secondDerivativeWeight_ = value;
      }
    }

    /// <summary>Field number for the "third_derivative_weight" field.</summary>
    public const int ThirdDerivativeWeightFieldNumber = 5;
    private double thirdDerivativeWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThirdDerivativeWeight {
      get { return thirdDerivativeWeight_; }
      set {
        thirdDerivativeWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QpSplineSmootherConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QpSplineSmootherConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SplineOrder != other.SplineOrder) return false;
      if (MaxSplineLength != other.MaxSplineLength) return false;
      if (RegularizationWeight != other.RegularizationWeight) return false;
      if (SecondDerivativeWeight != other.SecondDerivativeWeight) return false;
      if (ThirdDerivativeWeight != other.ThirdDerivativeWeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SplineOrder != 0) hash ^= SplineOrder.GetHashCode();
      if (MaxSplineLength != 0D) hash ^= MaxSplineLength.GetHashCode();
      if (RegularizationWeight != 0D) hash ^= RegularizationWeight.GetHashCode();
      if (SecondDerivativeWeight != 0D) hash ^= SecondDerivativeWeight.GetHashCode();
      if (ThirdDerivativeWeight != 0D) hash ^= ThirdDerivativeWeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SplineOrder != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SplineOrder);
      }
      if (MaxSplineLength != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MaxSplineLength);
      }
      if (RegularizationWeight != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RegularizationWeight);
      }
      if (SecondDerivativeWeight != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SecondDerivativeWeight);
      }
      if (ThirdDerivativeWeight != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ThirdDerivativeWeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SplineOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SplineOrder);
      }
      if (MaxSplineLength != 0D) {
        size += 1 + 8;
      }
      if (RegularizationWeight != 0D) {
        size += 1 + 8;
      }
      if (SecondDerivativeWeight != 0D) {
        size += 1 + 8;
      }
      if (ThirdDerivativeWeight != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QpSplineSmootherConfig other) {
      if (other == null) {
        return;
      }
      if (other.SplineOrder != 0) {
        SplineOrder = other.SplineOrder;
      }
      if (other.MaxSplineLength != 0D) {
        MaxSplineLength = other.MaxSplineLength;
      }
      if (other.RegularizationWeight != 0D) {
        RegularizationWeight = other.RegularizationWeight;
      }
      if (other.SecondDerivativeWeight != 0D) {
        SecondDerivativeWeight = other.SecondDerivativeWeight;
      }
      if (other.ThirdDerivativeWeight != 0D) {
        ThirdDerivativeWeight = other.ThirdDerivativeWeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SplineOrder = input.ReadUInt32();
            break;
          }
          case 17: {
            MaxSplineLength = input.ReadDouble();
            break;
          }
          case 25: {
            RegularizationWeight = input.ReadDouble();
            break;
          }
          case 33: {
            SecondDerivativeWeight = input.ReadDouble();
            break;
          }
          case 41: {
            ThirdDerivativeWeight = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpiralSmootherConfig : pb::IMessage<SpiralSmootherConfig> {
    private static readonly pb::MessageParser<SpiralSmootherConfig> _parser = new pb::MessageParser<SpiralSmootherConfig>(() => new SpiralSmootherConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpiralSmootherConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.ReferenceLineSmootherConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpiralSmootherConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpiralSmootherConfig(SpiralSmootherConfig other) : this() {
      maxDeviation_ = other.maxDeviation_;
      piecewiseLength_ = other.piecewiseLength_;
      maxIteration_ = other.maxIteration_;
      optTol_ = other.optTol_;
      optAcceptableTol_ = other.optAcceptableTol_;
      optAcceptableIteration_ = other.optAcceptableIteration_;
      weightCurveLength_ = other.weightCurveLength_;
      weightKappa_ = other.weightKappa_;
      weightDkappa_ = other.weightDkappa_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpiralSmootherConfig Clone() {
      return new SpiralSmootherConfig(this);
    }

    /// <summary>Field number for the "max_deviation" field.</summary>
    public const int MaxDeviationFieldNumber = 1;
    private double maxDeviation_;
    /// <summary>
    /// The max deviation of spiral reference line smoother.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxDeviation {
      get { return maxDeviation_; }
      set {
        maxDeviation_ = value;
      }
    }

    /// <summary>Field number for the "piecewise_length" field.</summary>
    public const int PiecewiseLengthFieldNumber = 2;
    private double piecewiseLength_;
    /// <summary>
    /// The piecewise length of spiral smoother.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PiecewiseLength {
      get { return piecewiseLength_; }
      set {
        piecewiseLength_ = value;
      }
    }

    /// <summary>Field number for the "max_iteration" field.</summary>
    public const int MaxIterationFieldNumber = 3;
    private uint maxIteration_;
    /// <summary>
    /// The iteration num of spiral reference line smoother.");
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxIteration {
      get { return maxIteration_; }
      set {
        maxIteration_ = value;
      }
    }

    /// <summary>Field number for the "opt_tol" field.</summary>
    public const int OptTolFieldNumber = 4;
    private double optTol_;
    /// <summary>
    /// The desired convergence tol for spiral opt;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OptTol {
      get { return optTol_; }
      set {
        optTol_ = value;
      }
    }

    /// <summary>Field number for the "opt_acceptable_tol" field.</summary>
    public const int OptAcceptableTolFieldNumber = 5;
    private double optAcceptableTol_;
    /// <summary>
    /// The acceptable convergence tol for spiral opt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OptAcceptableTol {
      get { return optAcceptableTol_; }
      set {
        optAcceptableTol_ = value;
      }
    }

    /// <summary>Field number for the "opt_acceptable_iteration" field.</summary>
    public const int OptAcceptableIterationFieldNumber = 6;
    private uint optAcceptableIteration_;
    /// <summary>
    /// The number of acceptable iters before termination for spiral opt;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OptAcceptableIteration {
      get { return optAcceptableIteration_; }
      set {
        optAcceptableIteration_ = value;
      }
    }

    /// <summary>Field number for the "weight_curve_length" field.</summary>
    public const int WeightCurveLengthFieldNumber = 7;
    private double weightCurveLength_;
    /// <summary>
    /// The weight of curve length term in objective function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightCurveLength {
      get { return weightCurveLength_; }
      set {
        weightCurveLength_ = value;
      }
    }

    /// <summary>Field number for the "weight_kappa" field.</summary>
    public const int WeightKappaFieldNumber = 8;
    private double weightKappa_;
    /// <summary>
    /// The weight of kappa term in objective function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightKappa {
      get { return weightKappa_; }
      set {
        weightKappa_ = value;
      }
    }

    /// <summary>Field number for the "weight_dkappa" field.</summary>
    public const int WeightDkappaFieldNumber = 9;
    private double weightDkappa_;
    /// <summary>
    /// The weight of dkappa term in objective function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightDkappa {
      get { return weightDkappa_; }
      set {
        weightDkappa_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpiralSmootherConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpiralSmootherConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxDeviation != other.MaxDeviation) return false;
      if (PiecewiseLength != other.PiecewiseLength) return false;
      if (MaxIteration != other.MaxIteration) return false;
      if (OptTol != other.OptTol) return false;
      if (OptAcceptableTol != other.OptAcceptableTol) return false;
      if (OptAcceptableIteration != other.OptAcceptableIteration) return false;
      if (WeightCurveLength != other.WeightCurveLength) return false;
      if (WeightKappa != other.WeightKappa) return false;
      if (WeightDkappa != other.WeightDkappa) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxDeviation != 0D) hash ^= MaxDeviation.GetHashCode();
      if (PiecewiseLength != 0D) hash ^= PiecewiseLength.GetHashCode();
      if (MaxIteration != 0) hash ^= MaxIteration.GetHashCode();
      if (OptTol != 0D) hash ^= OptTol.GetHashCode();
      if (OptAcceptableTol != 0D) hash ^= OptAcceptableTol.GetHashCode();
      if (OptAcceptableIteration != 0) hash ^= OptAcceptableIteration.GetHashCode();
      if (WeightCurveLength != 0D) hash ^= WeightCurveLength.GetHashCode();
      if (WeightKappa != 0D) hash ^= WeightKappa.GetHashCode();
      if (WeightDkappa != 0D) hash ^= WeightDkappa.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxDeviation != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxDeviation);
      }
      if (PiecewiseLength != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PiecewiseLength);
      }
      if (MaxIteration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxIteration);
      }
      if (OptTol != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(OptTol);
      }
      if (OptAcceptableTol != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(OptAcceptableTol);
      }
      if (OptAcceptableIteration != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(OptAcceptableIteration);
      }
      if (WeightCurveLength != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WeightCurveLength);
      }
      if (WeightKappa != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WeightKappa);
      }
      if (WeightDkappa != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(WeightDkappa);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxDeviation != 0D) {
        size += 1 + 8;
      }
      if (PiecewiseLength != 0D) {
        size += 1 + 8;
      }
      if (MaxIteration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxIteration);
      }
      if (OptTol != 0D) {
        size += 1 + 8;
      }
      if (OptAcceptableTol != 0D) {
        size += 1 + 8;
      }
      if (OptAcceptableIteration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptAcceptableIteration);
      }
      if (WeightCurveLength != 0D) {
        size += 1 + 8;
      }
      if (WeightKappa != 0D) {
        size += 1 + 8;
      }
      if (WeightDkappa != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpiralSmootherConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxDeviation != 0D) {
        MaxDeviation = other.MaxDeviation;
      }
      if (other.PiecewiseLength != 0D) {
        PiecewiseLength = other.PiecewiseLength;
      }
      if (other.MaxIteration != 0) {
        MaxIteration = other.MaxIteration;
      }
      if (other.OptTol != 0D) {
        OptTol = other.OptTol;
      }
      if (other.OptAcceptableTol != 0D) {
        OptAcceptableTol = other.OptAcceptableTol;
      }
      if (other.OptAcceptableIteration != 0) {
        OptAcceptableIteration = other.OptAcceptableIteration;
      }
      if (other.WeightCurveLength != 0D) {
        WeightCurveLength = other.WeightCurveLength;
      }
      if (other.WeightKappa != 0D) {
        WeightKappa = other.WeightKappa;
      }
      if (other.WeightDkappa != 0D) {
        WeightDkappa = other.WeightDkappa;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxDeviation = input.ReadDouble();
            break;
          }
          case 17: {
            PiecewiseLength = input.ReadDouble();
            break;
          }
          case 24: {
            MaxIteration = input.ReadUInt32();
            break;
          }
          case 33: {
            OptTol = input.ReadDouble();
            break;
          }
          case 41: {
            OptAcceptableTol = input.ReadDouble();
            break;
          }
          case 48: {
            OptAcceptableIteration = input.ReadUInt32();
            break;
          }
          case 57: {
            WeightCurveLength = input.ReadDouble();
            break;
          }
          case 65: {
            WeightKappa = input.ReadDouble();
            break;
          }
          case 73: {
            WeightDkappa = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CosThetaSmootherConfig : pb::IMessage<CosThetaSmootherConfig> {
    private static readonly pb::MessageParser<CosThetaSmootherConfig> _parser = new pb::MessageParser<CosThetaSmootherConfig>(() => new CosThetaSmootherConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CosThetaSmootherConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.ReferenceLineSmootherConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CosThetaSmootherConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CosThetaSmootherConfig(CosThetaSmootherConfig other) : this() {
      maxPointDeviation_ = other.maxPointDeviation_;
      numOfIteration_ = other.numOfIteration_;
      weightCosIncludedAngle_ = other.weightCosIncludedAngle_;
      acceptableTol_ = other.acceptableTol_;
      relax_ = other.relax_;
      reoptQpBound_ = other.reoptQpBound_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CosThetaSmootherConfig Clone() {
      return new CosThetaSmootherConfig(this);
    }

    /// <summary>Field number for the "max_point_deviation" field.</summary>
    public const int MaxPointDeviationFieldNumber = 1;
    private double maxPointDeviation_;
    /// <summary>
    /// The max deviation of cosTheta reference line smoother.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxPointDeviation {
      get { return maxPointDeviation_; }
      set {
        maxPointDeviation_ = value;
      }
    }

    /// <summary>Field number for the "num_of_iteration" field.</summary>
    public const int NumOfIterationFieldNumber = 2;
    private int numOfIteration_;
    /// <summary>
    /// The number of iteration in optimization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumOfIteration {
      get { return numOfIteration_; }
      set {
        numOfIteration_ = value;
      }
    }

    /// <summary>Field number for the "weight_cos_included_angle" field.</summary>
    public const int WeightCosIncludedAngleFieldNumber = 3;
    private double weightCosIncludedAngle_;
    /// <summary>
    /// The weight of cosine of included angle between points
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WeightCosIncludedAngle {
      get { return weightCosIncludedAngle_; }
      set {
        weightCosIncludedAngle_ = value;
      }
    }

    /// <summary>Field number for the "acceptable_tol" field.</summary>
    public const int AcceptableTolFieldNumber = 4;
    private double acceptableTol_;
    /// <summary>
    /// The tolerance of optimization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AcceptableTol {
      get { return acceptableTol_; }
      set {
        acceptableTol_ = value;
      }
    }

    /// <summary>Field number for the "relax" field.</summary>
    public const int RelaxFieldNumber = 5;
    private double relax_;
    /// <summary>
    /// Relax constraint on end condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Relax {
      get { return relax_; }
      set {
        relax_ = value;
      }
    }

    /// <summary>Field number for the "reopt_qp_bound" field.</summary>
    public const int ReoptQpBoundFieldNumber = 6;
    private double reoptQpBound_;
    /// <summary>
    /// Reopt bound for anchor points
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReoptQpBound {
      get { return reoptQpBound_; }
      set {
        reoptQpBound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CosThetaSmootherConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CosThetaSmootherConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxPointDeviation != other.MaxPointDeviation) return false;
      if (NumOfIteration != other.NumOfIteration) return false;
      if (WeightCosIncludedAngle != other.WeightCosIncludedAngle) return false;
      if (AcceptableTol != other.AcceptableTol) return false;
      if (Relax != other.Relax) return false;
      if (ReoptQpBound != other.ReoptQpBound) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxPointDeviation != 0D) hash ^= MaxPointDeviation.GetHashCode();
      if (NumOfIteration != 0) hash ^= NumOfIteration.GetHashCode();
      if (WeightCosIncludedAngle != 0D) hash ^= WeightCosIncludedAngle.GetHashCode();
      if (AcceptableTol != 0D) hash ^= AcceptableTol.GetHashCode();
      if (Relax != 0D) hash ^= Relax.GetHashCode();
      if (ReoptQpBound != 0D) hash ^= ReoptQpBound.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPointDeviation != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxPointDeviation);
      }
      if (NumOfIteration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumOfIteration);
      }
      if (WeightCosIncludedAngle != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(WeightCosIncludedAngle);
      }
      if (AcceptableTol != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AcceptableTol);
      }
      if (Relax != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Relax);
      }
      if (ReoptQpBound != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ReoptQpBound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPointDeviation != 0D) {
        size += 1 + 8;
      }
      if (NumOfIteration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOfIteration);
      }
      if (WeightCosIncludedAngle != 0D) {
        size += 1 + 8;
      }
      if (AcceptableTol != 0D) {
        size += 1 + 8;
      }
      if (Relax != 0D) {
        size += 1 + 8;
      }
      if (ReoptQpBound != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CosThetaSmootherConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxPointDeviation != 0D) {
        MaxPointDeviation = other.MaxPointDeviation;
      }
      if (other.NumOfIteration != 0) {
        NumOfIteration = other.NumOfIteration;
      }
      if (other.WeightCosIncludedAngle != 0D) {
        WeightCosIncludedAngle = other.WeightCosIncludedAngle;
      }
      if (other.AcceptableTol != 0D) {
        AcceptableTol = other.AcceptableTol;
      }
      if (other.Relax != 0D) {
        Relax = other.Relax;
      }
      if (other.ReoptQpBound != 0D) {
        ReoptQpBound = other.ReoptQpBound;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxPointDeviation = input.ReadDouble();
            break;
          }
          case 16: {
            NumOfIteration = input.ReadInt32();
            break;
          }
          case 25: {
            WeightCosIncludedAngle = input.ReadDouble();
            break;
          }
          case 33: {
            AcceptableTol = input.ReadDouble();
            break;
          }
          case 41: {
            Relax = input.ReadDouble();
            break;
          }
          case 49: {
            ReoptQpBound = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReferenceLineSmootherConfig : pb::IMessage<ReferenceLineSmootherConfig> {
    private static readonly pb::MessageParser<ReferenceLineSmootherConfig> _parser = new pb::MessageParser<ReferenceLineSmootherConfig>(() => new ReferenceLineSmootherConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferenceLineSmootherConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.ReferenceLineSmootherConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLineSmootherConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLineSmootherConfig(ReferenceLineSmootherConfig other) : this() {
      maxConstraintInterval_ = other.maxConstraintInterval_;
      longitudinalBoundaryBound_ = other.longitudinalBoundaryBound_;
      lateralBoundaryBound_ = other.lateralBoundaryBound_;
      numOfTotalPoints_ = other.numOfTotalPoints_;
      curbShift_ = other.curbShift_;
      drivingSide_ = other.drivingSide_;
      wideLaneThresholdFactor_ = other.wideLaneThresholdFactor_;
      wideLaneShiftRemainFactor_ = other.wideLaneShiftRemainFactor_;
      resolution_ = other.resolution_;
      switch (other.SmootherConfigCase) {
        case SmootherConfigOneofCase.QpSpline:
          QpSpline = other.QpSpline.Clone();
          break;
        case SmootherConfigOneofCase.Spiral:
          Spiral = other.Spiral.Clone();
          break;
        case SmootherConfigOneofCase.CosTheta:
          CosTheta = other.CosTheta.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLineSmootherConfig Clone() {
      return new ReferenceLineSmootherConfig(this);
    }

    /// <summary>Field number for the "max_constraint_interval" field.</summary>
    public const int MaxConstraintIntervalFieldNumber = 1;
    private double maxConstraintInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxConstraintInterval {
      get { return maxConstraintInterval_; }
      set {
        maxConstraintInterval_ = value;
      }
    }

    /// <summary>Field number for the "longitudinal_boundary_bound" field.</summary>
    public const int LongitudinalBoundaryBoundFieldNumber = 2;
    private double longitudinalBoundaryBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongitudinalBoundaryBound {
      get { return longitudinalBoundaryBound_; }
      set {
        longitudinalBoundaryBound_ = value;
      }
    }

    /// <summary>Field number for the "lateral_boundary_bound" field.</summary>
    public const int LateralBoundaryBoundFieldNumber = 3;
    private double lateralBoundaryBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralBoundaryBound {
      get { return lateralBoundaryBound_; }
      set {
        lateralBoundaryBound_ = value;
      }
    }

    /// <summary>Field number for the "num_of_total_points" field.</summary>
    public const int NumOfTotalPointsFieldNumber = 4;
    private uint numOfTotalPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOfTotalPoints {
      get { return numOfTotalPoints_; }
      set {
        numOfTotalPoints_ = value;
      }
    }

    /// <summary>Field number for the "curb_shift" field.</summary>
    public const int CurbShiftFieldNumber = 5;
    private double curbShift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurbShift {
      get { return curbShift_; }
      set {
        curbShift_ = value;
      }
    }

    /// <summary>Field number for the "driving_side" field.</summary>
    public const int DrivingSideFieldNumber = 6;
    private global::Apollo.Planning.ReferenceLineSmootherConfig.Types.DrivingSide drivingSide_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ReferenceLineSmootherConfig.Types.DrivingSide DrivingSide {
      get { return drivingSide_; }
      set {
        drivingSide_ = value;
      }
    }

    /// <summary>Field number for the "wide_lane_threshold_factor" field.</summary>
    public const int WideLaneThresholdFactorFieldNumber = 7;
    private double wideLaneThresholdFactor_;
    /// <summary>
    /// If a lane width larger than this value times adc width, this lane is
    /// considered as a wide lane
    /// wide lane handing feature will be disabled if this number is negative
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WideLaneThresholdFactor {
      get { return wideLaneThresholdFactor_; }
      set {
        wideLaneThresholdFactor_ = value;
      }
    }

    /// <summary>Field number for the "wide_lane_shift_remain_factor" field.</summary>
    public const int WideLaneShiftRemainFactorFieldNumber = 8;
    private double wideLaneShiftRemainFactor_;
    /// <summary>
    /// In a wide lane case, leave the left side (or right side on a left-handed
    /// driving map) this amount times adc width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WideLaneShiftRemainFactor {
      get { return wideLaneShiftRemainFactor_; }
      set {
        wideLaneShiftRemainFactor_ = value;
      }
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 9;
    private double resolution_;
    /// <summary>
    /// The output resolution for reference line.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "qp_spline" field.</summary>
    public const int QpSplineFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QpSplineSmootherConfig QpSpline {
      get { return smootherConfigCase_ == SmootherConfigOneofCase.QpSpline ? (global::Apollo.Planning.QpSplineSmootherConfig) smootherConfig_ : null; }
      set {
        smootherConfig_ = value;
        smootherConfigCase_ = value == null ? SmootherConfigOneofCase.None : SmootherConfigOneofCase.QpSpline;
      }
    }

    /// <summary>Field number for the "spiral" field.</summary>
    public const int SpiralFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.SpiralSmootherConfig Spiral {
      get { return smootherConfigCase_ == SmootherConfigOneofCase.Spiral ? (global::Apollo.Planning.SpiralSmootherConfig) smootherConfig_ : null; }
      set {
        smootherConfig_ = value;
        smootherConfigCase_ = value == null ? SmootherConfigOneofCase.None : SmootherConfigOneofCase.Spiral;
      }
    }

    /// <summary>Field number for the "cos_theta" field.</summary>
    public const int CosThetaFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.CosThetaSmootherConfig CosTheta {
      get { return smootherConfigCase_ == SmootherConfigOneofCase.CosTheta ? (global::Apollo.Planning.CosThetaSmootherConfig) smootherConfig_ : null; }
      set {
        smootherConfig_ = value;
        smootherConfigCase_ = value == null ? SmootherConfigOneofCase.None : SmootherConfigOneofCase.CosTheta;
      }
    }

    private object smootherConfig_;
    /// <summary>Enum of possible cases for the "SmootherConfig" oneof.</summary>
    public enum SmootherConfigOneofCase {
      None = 0,
      QpSpline = 20,
      Spiral = 21,
      CosTheta = 22,
    }
    private SmootherConfigOneofCase smootherConfigCase_ = SmootherConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmootherConfigOneofCase SmootherConfigCase {
      get { return smootherConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSmootherConfig() {
      smootherConfigCase_ = SmootherConfigOneofCase.None;
      smootherConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferenceLineSmootherConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferenceLineSmootherConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxConstraintInterval != other.MaxConstraintInterval) return false;
      if (LongitudinalBoundaryBound != other.LongitudinalBoundaryBound) return false;
      if (LateralBoundaryBound != other.LateralBoundaryBound) return false;
      if (NumOfTotalPoints != other.NumOfTotalPoints) return false;
      if (CurbShift != other.CurbShift) return false;
      if (DrivingSide != other.DrivingSide) return false;
      if (WideLaneThresholdFactor != other.WideLaneThresholdFactor) return false;
      if (WideLaneShiftRemainFactor != other.WideLaneShiftRemainFactor) return false;
      if (Resolution != other.Resolution) return false;
      if (!object.Equals(QpSpline, other.QpSpline)) return false;
      if (!object.Equals(Spiral, other.Spiral)) return false;
      if (!object.Equals(CosTheta, other.CosTheta)) return false;
      if (SmootherConfigCase != other.SmootherConfigCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxConstraintInterval != 0D) hash ^= MaxConstraintInterval.GetHashCode();
      if (LongitudinalBoundaryBound != 0D) hash ^= LongitudinalBoundaryBound.GetHashCode();
      if (LateralBoundaryBound != 0D) hash ^= LateralBoundaryBound.GetHashCode();
      if (NumOfTotalPoints != 0) hash ^= NumOfTotalPoints.GetHashCode();
      if (CurbShift != 0D) hash ^= CurbShift.GetHashCode();
      if (DrivingSide != 0) hash ^= DrivingSide.GetHashCode();
      if (WideLaneThresholdFactor != 0D) hash ^= WideLaneThresholdFactor.GetHashCode();
      if (WideLaneShiftRemainFactor != 0D) hash ^= WideLaneShiftRemainFactor.GetHashCode();
      if (Resolution != 0D) hash ^= Resolution.GetHashCode();
      if (smootherConfigCase_ == SmootherConfigOneofCase.QpSpline) hash ^= QpSpline.GetHashCode();
      if (smootherConfigCase_ == SmootherConfigOneofCase.Spiral) hash ^= Spiral.GetHashCode();
      if (smootherConfigCase_ == SmootherConfigOneofCase.CosTheta) hash ^= CosTheta.GetHashCode();
      hash ^= (int) smootherConfigCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxConstraintInterval != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxConstraintInterval);
      }
      if (LongitudinalBoundaryBound != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LongitudinalBoundaryBound);
      }
      if (LateralBoundaryBound != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LateralBoundaryBound);
      }
      if (NumOfTotalPoints != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumOfTotalPoints);
      }
      if (CurbShift != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CurbShift);
      }
      if (DrivingSide != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DrivingSide);
      }
      if (WideLaneThresholdFactor != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WideLaneThresholdFactor);
      }
      if (WideLaneShiftRemainFactor != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WideLaneShiftRemainFactor);
      }
      if (Resolution != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Resolution);
      }
      if (smootherConfigCase_ == SmootherConfigOneofCase.QpSpline) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(QpSpline);
      }
      if (smootherConfigCase_ == SmootherConfigOneofCase.Spiral) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Spiral);
      }
      if (smootherConfigCase_ == SmootherConfigOneofCase.CosTheta) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(CosTheta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxConstraintInterval != 0D) {
        size += 1 + 8;
      }
      if (LongitudinalBoundaryBound != 0D) {
        size += 1 + 8;
      }
      if (LateralBoundaryBound != 0D) {
        size += 1 + 8;
      }
      if (NumOfTotalPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOfTotalPoints);
      }
      if (CurbShift != 0D) {
        size += 1 + 8;
      }
      if (DrivingSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingSide);
      }
      if (WideLaneThresholdFactor != 0D) {
        size += 1 + 8;
      }
      if (WideLaneShiftRemainFactor != 0D) {
        size += 1 + 8;
      }
      if (Resolution != 0D) {
        size += 1 + 8;
      }
      if (smootherConfigCase_ == SmootherConfigOneofCase.QpSpline) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(QpSpline);
      }
      if (smootherConfigCase_ == SmootherConfigOneofCase.Spiral) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Spiral);
      }
      if (smootherConfigCase_ == SmootherConfigOneofCase.CosTheta) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CosTheta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferenceLineSmootherConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxConstraintInterval != 0D) {
        MaxConstraintInterval = other.MaxConstraintInterval;
      }
      if (other.LongitudinalBoundaryBound != 0D) {
        LongitudinalBoundaryBound = other.LongitudinalBoundaryBound;
      }
      if (other.LateralBoundaryBound != 0D) {
        LateralBoundaryBound = other.LateralBoundaryBound;
      }
      if (other.NumOfTotalPoints != 0) {
        NumOfTotalPoints = other.NumOfTotalPoints;
      }
      if (other.CurbShift != 0D) {
        CurbShift = other.CurbShift;
      }
      if (other.DrivingSide != 0) {
        DrivingSide = other.DrivingSide;
      }
      if (other.WideLaneThresholdFactor != 0D) {
        WideLaneThresholdFactor = other.WideLaneThresholdFactor;
      }
      if (other.WideLaneShiftRemainFactor != 0D) {
        WideLaneShiftRemainFactor = other.WideLaneShiftRemainFactor;
      }
      if (other.Resolution != 0D) {
        Resolution = other.Resolution;
      }
      switch (other.SmootherConfigCase) {
        case SmootherConfigOneofCase.QpSpline:
          QpSpline = other.QpSpline;
          break;
        case SmootherConfigOneofCase.Spiral:
          Spiral = other.Spiral;
          break;
        case SmootherConfigOneofCase.CosTheta:
          CosTheta = other.CosTheta;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxConstraintInterval = input.ReadDouble();
            break;
          }
          case 17: {
            LongitudinalBoundaryBound = input.ReadDouble();
            break;
          }
          case 25: {
            LateralBoundaryBound = input.ReadDouble();
            break;
          }
          case 32: {
            NumOfTotalPoints = input.ReadUInt32();
            break;
          }
          case 41: {
            CurbShift = input.ReadDouble();
            break;
          }
          case 48: {
            drivingSide_ = (global::Apollo.Planning.ReferenceLineSmootherConfig.Types.DrivingSide) input.ReadEnum();
            break;
          }
          case 57: {
            WideLaneThresholdFactor = input.ReadDouble();
            break;
          }
          case 65: {
            WideLaneShiftRemainFactor = input.ReadDouble();
            break;
          }
          case 73: {
            Resolution = input.ReadDouble();
            break;
          }
          case 162: {
            global::Apollo.Planning.QpSplineSmootherConfig subBuilder = new global::Apollo.Planning.QpSplineSmootherConfig();
            if (smootherConfigCase_ == SmootherConfigOneofCase.QpSpline) {
              subBuilder.MergeFrom(QpSpline);
            }
            input.ReadMessage(subBuilder);
            QpSpline = subBuilder;
            break;
          }
          case 170: {
            global::Apollo.Planning.SpiralSmootherConfig subBuilder = new global::Apollo.Planning.SpiralSmootherConfig();
            if (smootherConfigCase_ == SmootherConfigOneofCase.Spiral) {
              subBuilder.MergeFrom(Spiral);
            }
            input.ReadMessage(subBuilder);
            Spiral = subBuilder;
            break;
          }
          case 178: {
            global::Apollo.Planning.CosThetaSmootherConfig subBuilder = new global::Apollo.Planning.CosThetaSmootherConfig();
            if (smootherConfigCase_ == SmootherConfigOneofCase.CosTheta) {
              subBuilder.MergeFrom(CosTheta);
            }
            input.ReadMessage(subBuilder);
            CosTheta = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReferenceLineSmootherConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DrivingSide {
        [pbr::OriginalName("DRIVINGSIDE_DUMMY")] Dummy = 0,
        /// <summary>
        /// left hand driving country like UK and JP
        /// </summary>
        [pbr::OriginalName("LEFT")] Left = 1,
        /// <summary>
        /// right hand driving country like CN and US
        /// </summary>
        [pbr::OriginalName("RIGHT")] Right = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
