// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/planning_config.proto</summary>
  public static partial class PlanningConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/planning_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlanningConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BsYW5uaW5nX2NvbmZpZy5wcm90",
            "bxIPYXBvbGxvLnBsYW5uaW5nGittb2R1bGVzL3BsYW5uaW5nL3Byb3RvL2Rl",
            "Y2lkZXJfY29uZmlnLnByb3RvGjBtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL2Rw",
            "X3BvbHlfcGF0aF9jb25maWcucHJvdG8aL21vZHVsZXMvcGxhbm5pbmcvcHJv",
            "dG8vZHBfc3Rfc3BlZWRfY29uZmlnLnByb3RvGjptb2R1bGVzL3BsYW5uaW5n",
            "L3Byb3RvL3FwX3BpZWNld2lzZV9qZXJrX3BhdGhfY29uZmlnLnByb3RvGjJt",
            "b2R1bGVzL3BsYW5uaW5nL3Byb3RvL3FwX3NwbGluZV9wYXRoX2NvbmZpZy5w",
            "cm90bxovbW9kdWxlcy9wbGFubmluZy9wcm90by9xcF9zdF9zcGVlZF9jb25m",
            "aWcucHJvdG8aOm1vZHVsZXMvcGxhbm5pbmcvcHJvdG8vc2lkZV9wYXNzX3Bh",
            "dGhfZGVjaWRlcl9jb25maWcucHJvdG8aPm1vZHVsZXMvcGxhbm5pbmcvcHJv",
            "dG8vcHJvY2VlZF93aXRoX2NhdXRpb25fc3BlZWRfY29uZmlnLnByb3RvGjFt",
            "b2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BvbHlfc3Rfc3BlZWRfY29uZmlnLnBy",
            "b3RvGjFtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BvbHlfdnRfc3BlZWRfY29u",
            "ZmlnLnByb3RvGjVtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL25hdmlfcGF0aF9k",
            "ZWNpZGVyX2NvbmZpZy5wcm90bxo2bW9kdWxlcy9wbGFubmluZy9wcm90by9u",
            "YXZpX3NwZWVkX2RlY2lkZXJfY29uZmlnLnByb3RvGjltb2R1bGVzL3BsYW5u",
            "aW5nL3Byb3RvL25hdmlfb2JzdGFjbGVfZGVjaWRlcl9jb25maWcucHJvdG8a",
            "Nm1vZHVsZXMvcGxhbm5pbmcvcHJvdG8vcGxhbm5lcl9vcGVuX3NwYWNlX2Nv",
            "bmZpZy5wcm90byITChFQYXRoRGVjaWRlckNvbmZpZyLdCwoKVGFza0NvbmZp",
            "ZxI3Cgl0YXNrX3R5cGUYASABKA4yJC5hcG9sbG8ucGxhbm5pbmcuVGFza0Nv",
            "bmZpZy5UYXNrVHlwZRJAChNkcF9wb2x5X3BhdGhfY29uZmlnGAIgASgLMiEu",
            "YXBvbGxvLnBsYW5uaW5nLkRwUG9seVBhdGhDb25maWdIABI+ChJkcF9zdF9z",
            "cGVlZF9jb25maWcYAyABKAsyIC5hcG9sbG8ucGxhbm5pbmcuRHBTdFNwZWVk",
            "Q29uZmlnSAASRAoVcXBfc3BsaW5lX3BhdGhfY29uZmlnGAQgASgLMiMuYXBv",
            "bGxvLnBsYW5uaW5nLlFwU3BsaW5lUGF0aENvbmZpZ0gAEj4KEnFwX3N0X3Nw",
            "ZWVkX2NvbmZpZxgFIAEoCzIgLmFwb2xsby5wbGFubmluZy5RcFN0U3BlZWRD",
            "b25maWdIABJCChRwb2x5X3N0X3NwZWVkX2NvbmZpZxgGIAEoCzIiLmFwb2xs",
            "by5wbGFubmluZy5Qb2x5U3RTcGVlZENvbmZpZ0gAEkEKE3BhdGhfZGVjaWRl",
            "cl9jb25maWcYByABKAsyIi5hcG9sbG8ucGxhbm5pbmcuUGF0aERlY2lkZXJD",
            "b25maWdIABJbCiFwcm9jZWVkX3dpdGhfY2F1dGlvbl9zcGVlZF9jb25maWcY",
            "CCABKAsyLi5hcG9sbG8ucGxhbm5pbmcuUHJvY2VlZFdpdGhDYXV0aW9uU3Bl",
            "ZWRDb25maWdIABJTCh1xcF9waWVjZXdpc2VfamVya19wYXRoX2NvbmZpZxgJ",
            "IAEoCzIqLmFwb2xsby5wbGFubmluZy5RcFBpZWNld2lzZUplcmtQYXRoQ29u",
            "ZmlnSAASQwoUZGVjaWRlcl9jcmVlcF9jb25maWcYCiABKAsyIy5hcG9sbG8u",
            "cGxhbm5pbmcuRGVjaWRlckNyZWVwQ29uZmlnSAASVQoeZGVjaWRlcl9ydWxl",
            "X2Jhc2VkX3N0b3BfY29uZmlnGAsgASgLMisuYXBvbGxvLnBsYW5uaW5nLkRl",
            "Y2lkZXJSdWxlQmFzZWRTdG9wQ29uZmlnSAASSAoXc2lkZV9wYXNzX3NhZmV0",
            "eV9jb25maWcYDCABKAsyJS5hcG9sbG8ucGxhbm5pbmcuU2lkZVBhc3NTYWZl",
            "dHlDb25maWdIABJTCh1zaWRlX3Bhc3NfcGF0aF9kZWNpZGVyX2NvbmZpZxgN",
            "IAEoCzIqLmFwb2xsby5wbGFubmluZy5TaWRlUGFzc1BhdGhEZWNpZGVyQ29u",
            "ZmlnSAASQgoUcG9seV92dF9zcGVlZF9jb25maWcYDiABKAsyIi5hcG9sbG8u",
            "cGxhbm5pbmcuUG9seVZUU3BlZWRDb25maWdIACLGAwoIVGFza1R5cGUSGgoW",
            "RFBfUE9MWV9QQVRIX09QVElNSVpFUhAAEhkKFURQX1NUX1NQRUVEX09QVElN",
            "SVpFUhABEhwKGFFQX1NQTElORV9QQVRIX09QVElNSVpFUhACEiAKHFFQX1NQ",
            "TElORV9TVF9TUEVFRF9PUFRJTUlaRVIQAxIQCgxQQVRIX0RFQ0lERVIQBBIR",
            "Cg1TUEVFRF9ERUNJREVSEAUSGwoXUE9MWV9TVF9TUEVFRF9PUFRJTUlaRVIQ",
            "BhIVChFOQVZJX1BBVEhfREVDSURFUhAHEhYKEk5BVklfU1BFRURfREVDSURF",
            "UhAIEhkKFU5BVklfT0JTVEFDTEVfREVDSURFUhAJEiQKIFFQX1BJRUNFV0lT",
            "RV9KRVJLX1BBVEhfT1BUSU1JWkVSEAoSEQoNREVDSURFUl9DUkVFUBALEhsK",
            "F0RFQ0lERVJfUlVMRV9CQVNFRF9TVE9QEAwSGgoWU0lERV9QQVNTX1BBVEhf",
            "REVDSURFUhANEhQKEFNJREVfUEFTU19TQUZFVFkQDhIeChpQUk9DRUVEX1dJ",
            "VEhfQ0FVVElPTl9TUEVFRBAPEg8KC0RFQ0lERVJfUlNTEBBCDQoLdGFza19j",
            "b25maWciGgoYU2NlbmFyaW9MYW5lRm9sbG93Q29uZmlnIpUDChZTY2VuYXJp",
            "b1NpZGVQYXNzQ29uZmlnEh8KF3NpZGVfcGFzc19leGl0X2Rpc3RhbmNlGAEg",
            "ASgBEigKIGFwcHJvYWNoX29ic3RhY2xlX21heF9zdG9wX3NwZWVkGAIgASgB",
            "EisKI2FwcHJvYWNoX29ic3RhY2xlX21pbl9zdG9wX2Rpc3RhbmNlGAMgASgB",
            "EiAKGGJsb2NrX29ic3RhY2xlX21pbl9zcGVlZBgEIAEoARIlCh1lbmFibGVf",
            "b2JzdGFjbGVfYmxvY2tlZF9jaGVjaxgFIAEoCBIiChptYXhfYmFja3VwX3N0",
            "YWdlX2N5Y2xlX251bRgGIAEoDRIaChJtaW5fbF9udWRnZV9idWZmZXIYByAB",
            "KAESIwobbWluX2Zyb250X29ic3RhY2xlX2Rpc3RhbmNlGAggASgBEiMKG21h",
            "eF9mcm9udF9vYnN0YWNsZV9kaXN0YW5jZRgJIAEoARIwCihzdG9wX2ZlbmNl",
            "X2Rpc3RhbmNlX3RvX2Jsb2NraW5nX29ic3RhY2xlGAogASgBIpsCCiFTY2Vu",
            "YXJpb1N0b3BTaWduVW5wcm90ZWN0ZWRDb25maWcSKQohc3RhcnRfc3RvcF9z",
            "aWduX3NjZW5hcmlvX2Rpc3RhbmNlGAEgASgBEi0KJXdhdGNoX3ZlaGljbGVf",
            "bWF4X3ZhbGlkX3N0b3BfZGlzdGFuY2UYAiABKAESHwoXbWF4X3ZhbGlkX3N0",
            "b3BfZGlzdGFuY2UYAyABKAESGgoSbWF4X2FkY19zdG9wX3NwZWVkGAQgASgB",
            "EhUKDXN0b3BfZHVyYXRpb24YBSABKAISGwoTbWluX3Bhc3Nfc19kaXN0YW5j",
            "ZRgGIAEoARIUCgxzdG9wX3RpbWVvdXQYByABKAISFQoNY3JlZXBfdGltZW91",
            "dBgIIAEoAiJ/CiNTY2VuYXJpb1RyYWZmaWNMaWdodFByb3RlY3RlZENvbmZp",
            "ZxIfChdtYXhfdmFsaWRfc3RvcF9kaXN0YW5jZRgBIAEoARIaChJtYXhfYWRj",
            "X3N0b3Bfc3BlZWQYAiABKAESGwoTbWluX3Bhc3Nfc19kaXN0YW5jZRgDIAEo",
            "ASKgAQotU2NlbmFyaW9UcmFmZmljTGlnaHRVbnByb3RlY3RlZExlZnRUdXJu",
            "Q29uZmlnEh8KF21heF92YWxpZF9zdG9wX2Rpc3RhbmNlGAEgASgBEhoKEm1h",
            "eF9hZGNfc3RvcF9zcGVlZBgCIAEoARIbChNtaW5fcGFzc19zX2Rpc3RhbmNl",
            "GAMgASgBEhUKDWNyZWVwX3RpbWVvdXQYBCABKAIizQEKLlNjZW5hcmlvVHJh",
            "ZmZpY0xpZ2h0VW5wcm90ZWN0ZWRSaWdodFR1cm5Db25maWcSHwoXbWF4X3Zh",
            "bGlkX3N0b3BfZGlzdGFuY2UYASABKAESGgoSbWF4X2FkY19zdG9wX3NwZWVk",
            "GAIgASgBEhsKE21pbl9wYXNzX3NfZGlzdGFuY2UYAyABKAESKgoicmVkX2xp",
            "Z2h0X3JpZ2h0X3R1cm5fc3RvcF9kdXJhdGlvbhgEIAEoAhIVCg1jcmVlcF90",
            "aW1lb3V0GAUgASgCIsgPCg5TY2VuYXJpb0NvbmZpZxJDCg1zY2VuYXJpb190",
            "eXBlGAEgASgOMiwuYXBvbGxvLnBsYW5uaW5nLlNjZW5hcmlvQ29uZmlnLlNj",
            "ZW5hcmlvVHlwZRJHChJsYW5lX2ZvbGxvd19jb25maWcYAiABKAsyKS5hcG9s",
            "bG8ucGxhbm5pbmcuU2NlbmFyaW9MYW5lRm9sbG93Q29uZmlnSAASQwoQc2lk",
            "ZV9wYXNzX2NvbmZpZxgDIAEoCzInLmFwb2xsby5wbGFubmluZy5TY2VuYXJp",
            "b1NpZGVQYXNzQ29uZmlnSAASWgocc3RvcF9zaWduX3VucHJvdGVjdGVkX2Nv",
            "bmZpZxgEIAEoCzIyLmFwb2xsby5wbGFubmluZy5TY2VuYXJpb1N0b3BTaWdu",
            "VW5wcm90ZWN0ZWRDb25maWdIABJeCh50cmFmZmljX2xpZ2h0X3Byb3RlY3Rl",
            "ZF9jb25maWcYBSABKAsyNC5hcG9sbG8ucGxhbm5pbmcuU2NlbmFyaW9UcmFm",
            "ZmljTGlnaHRQcm90ZWN0ZWRDb25maWdIABJ2Cit0cmFmZmljX2xpZ2h0X3Vu",
            "cHJvdGVjdGVkX3JpZ2h0X3R1cm5fY29uZmlnGAYgASgLMj8uYXBvbGxvLnBs",
            "YW5uaW5nLlNjZW5hcmlvVHJhZmZpY0xpZ2h0VW5wcm90ZWN0ZWRSaWdodFR1",
            "cm5Db25maWdIABJ0Cip0cmFmZmljX2xpZ2h0X3VucHJvdGVjdGVkX2xlZnRf",
            "dHVybl9jb25maWcYByABKAsyPi5hcG9sbG8ucGxhbm5pbmcuU2NlbmFyaW9U",
            "cmFmZmljTGlnaHRVbnByb3RlY3RlZExlZnRUdXJuQ29uZmlnSAASPQoKc3Rh",
            "Z2VfdHlwZRgIIAMoDjIpLmFwb2xsby5wbGFubmluZy5TY2VuYXJpb0NvbmZp",
            "Zy5TdGFnZVR5cGUSQQoMc3RhZ2VfY29uZmlnGAkgAygLMisuYXBvbGxvLnBs",
            "YW5uaW5nLlNjZW5hcmlvQ29uZmlnLlN0YWdlQ29uZmlnGsgBCgtTdGFnZUNv",
            "bmZpZxI9CgpzdGFnZV90eXBlGAEgASgOMikuYXBvbGxvLnBsYW5uaW5nLlNj",
            "ZW5hcmlvQ29uZmlnLlN0YWdlVHlwZRIPCgdlbmFibGVkGAIgASgIEjcKCXRh",
            "c2tfdHlwZRgDIAMoDjIkLmFwb2xsby5wbGFubmluZy5UYXNrQ29uZmlnLlRh",
            "c2tUeXBlEjAKC3Rhc2tfY29uZmlnGAQgAygLMhsuYXBvbGxvLnBsYW5uaW5n",
            "LlRhc2tDb25maWci8QEKDFNjZW5hcmlvVHlwZRIPCgtMQU5FX0ZPTExPVxAA",
            "Eg8KC0NIQU5HRV9MQU5FEAESDQoJU0lERV9QQVNTEAISDAoIQVBQUk9BQ0gQ",
            "AxIXChNTVE9QX1NJR05fUFJPVEVDVEVEEAQSGQoVU1RPUF9TSUdOX1VOUFJP",
            "VEVDVEVEEAUSGwoXVFJBRkZJQ19MSUdIVF9QUk9URUNURUQQBhInCiNUUkFG",
            "RklDX0xJR0hUX1VOUFJPVEVDVEVEX0xFRlRfVFVSThAHEigKJFRSQUZGSUNf",
            "TElHSFRfVU5QUk9URUNURURfUklHSFRfVFVSThAIIuQFCglTdGFnZVR5cGUS",
            "DAoITk9fU1RBR0UQABIdChlMQU5FX0ZPTExPV19ERUZBVUxUX1NUQUdFEAES",
            "IgoeU1RPUF9TSUdOX1VOUFJPVEVDVEVEX1BSRV9TVE9QEGQSHgoaU1RPUF9T",
            "SUdOX1VOUFJPVEVDVEVEX1NUT1AQZRIfChtTVE9QX1NJR05fVU5QUk9URUNU",
            "RURfQ1JFRVAQZhItCilTVE9QX1NJR05fVU5QUk9URUNURURfSU5URVJTRUNU",
            "SU9OX0NSVUlTRRBnEiAKG1NJREVfUEFTU19BUFBST0FDSF9PQlNUQUNMRRDI",
            "ARIcChdTSURFX1BBU1NfR0VORVJBVEVfUEFUSBDJARIgChtTSURFX1BBU1Nf",
            "U1RPUF9PTl9XQUlUUE9JTlQQygESHAoXU0lERV9QQVNTX0RFVEVDVF9TQUZF",
            "VFkQywESHAoXU0lERV9QQVNTX1BBU1NfT0JTVEFDTEUQzAESFQoQU0lERV9Q",
            "QVNTX0JBQ0tVUBDNARIhChxUUkFGRklDX0xJR0hUX1BST1RFQ1RFRF9TVE9Q",
            "EKwCEjAKK1RSQUZGSUNfTElHSFRfUFJPVEVDVEVEX0lOVEVSU0VDVElPTl9D",
            "UlVJU0UQrQISLgopVFJBRkZJQ19MSUdIVF9VTlBST1RFQ1RFRF9MRUZUX1RV",
            "Uk5fQ1JFRVAQtgISPAo3VFJBRkZJQ19MSUdIVF9VTlBST1RFQ1RFRF9MRUZU",
            "X1RVUk5fSU5URVJTRUNUSU9OX0NSVUlTRRC3AhIuCilUUkFGRklDX0xJR0hU",
            "X1VOUFJPVEVDVEVEX1JJR0hUX1RVUk5fU1RPUBDAAhIvCipUUkFGRklDX0xJ",
            "R0hUX1VOUFJPVEVDVEVEX1JJR0hUX1RVUk5fQ1JFRVAQwQISPQo4VFJBRkZJ",
            "Q19MSUdIVF9VTlBST1RFQ1RFRF9SSUdIVF9UVVJOX0lOVEVSU0VDVElPTl9D",
            "UlVJU0UQwgJCEQoPc2NlbmFyaW9fY29uZmlnIl4KF1BsYW5uZXJQdWJsaWNS",
            "b2FkQ29uZmlnEkMKDXNjZW5hcmlvX3R5cGUYASADKA4yLC5hcG9sbG8ucGxh",
            "bm5pbmcuU2NlbmFyaW9Db25maWcuU2NlbmFyaW9UeXBlIq8CChFQbGFubmVy",
            "TmF2aUNvbmZpZxIyCgR0YXNrGAEgAygOMiQuYXBvbGxvLnBsYW5uaW5nLlRh",
            "c2tDb25maWcuVGFza1R5cGUSSAoYbmF2aV9wYXRoX2RlY2lkZXJfY29uZmln",
            "GAIgASgLMiYuYXBvbGxvLnBsYW5uaW5nLk5hdmlQYXRoRGVjaWRlckNvbmZp",
            "ZxJKChluYXZpX3NwZWVkX2RlY2lkZXJfY29uZmlnGAMgASgLMicuYXBvbGxv",
            "LnBsYW5uaW5nLk5hdmlTcGVlZERlY2lkZXJDb25maWcSUAocbmF2aV9vYnN0",
            "YWNsZV9kZWNpZGVyX2NvbmZpZxgEIAEoCzIqLmFwb2xsby5wbGFubmluZy5O",
            "YXZpT2JzdGFjbGVEZWNpZGVyQ29uZmlnIkcKEVJ0a1BsYW5uaW5nQ29uZmln",
            "EjIKDHBsYW5uZXJfdHlwZRgBIAEoDjIcLmFwb2xsby5wbGFubmluZy5QbGFu",
            "bmVyVHlwZSKaAQoWU3RhbmRhcmRQbGFubmluZ0NvbmZpZxIyCgxwbGFubmVy",
            "X3R5cGUYASADKA4yHC5hcG9sbG8ucGxhbm5pbmcuUGxhbm5lclR5cGUSTAoa",
            "cGxhbm5lcl9wdWJsaWNfcm9hZF9jb25maWcYAiABKAsyKC5hcG9sbG8ucGxh",
            "bm5pbmcuUGxhbm5lclB1YmxpY1JvYWRDb25maWcijwEKGE5hdmlnYXRpb25Q",
            "bGFubmluZ0NvbmZpZxIyCgxwbGFubmVyX3R5cGUYASADKA4yHC5hcG9sbG8u",
            "cGxhbm5pbmcuUGxhbm5lclR5cGUSPwoTcGxhbm5lcl9uYXZpX2NvbmZpZxgE",
            "IAEoCzIiLmFwb2xsby5wbGFubmluZy5QbGFubmVyTmF2aUNvbmZpZyKZAQoX",
            "T3BlblNwYWNlUGxhbm5pbmdDb25maWcSMgoMcGxhbm5lcl90eXBlGAEgAygO",
            "MhwuYXBvbGxvLnBsYW5uaW5nLlBsYW5uZXJUeXBlEkoKGXBsYW5uZXJfb3Bl",
            "bl9zcGFjZV9jb25maWcYAiABKAsyJy5hcG9sbG8ucGxhbm5pbmcuUGxhbm5l",
            "ck9wZW5TcGFjZUNvbmZpZyKOAwoOUGxhbm5pbmdDb25maWcSQQoTcnRrX3Bs",
            "YW5uaW5nX2NvbmZpZxgBIAEoCzIiLmFwb2xsby5wbGFubmluZy5SdGtQbGFu",
            "bmluZ0NvbmZpZ0gAEksKGHN0YW5kYXJkX3BsYW5uaW5nX2NvbmZpZxgCIAEo",
            "CzInLmFwb2xsby5wbGFubmluZy5TdGFuZGFyZFBsYW5uaW5nQ29uZmlnSAAS",
            "TwoabmF2aWdhdGlvbl9wbGFubmluZ19jb25maWcYAyABKAsyKS5hcG9sbG8u",
            "cGxhbm5pbmcuTmF2aWdhdGlvblBsYW5uaW5nQ29uZmlnSAASTgoab3Blbl9z",
            "cGFjZV9wbGFubmluZ19jb25maWcYBCABKAsyKC5hcG9sbG8ucGxhbm5pbmcu",
            "T3BlblNwYWNlUGxhbm5pbmdDb25maWdIABI4ChNkZWZhdWx0X3Rhc2tfY29u",
            "ZmlnGAUgAygLMhsuYXBvbGxvLnBsYW5uaW5nLlRhc2tDb25maWdCEQoPcGxh",
            "bm5pbmdfY29uZmlnKk4KC1BsYW5uZXJUeXBlEgcKA1JUSxAAEg8KC1BVQkxJ",
            "Q19ST0FEEAESDgoKT1BFTl9TUEFDRRACEggKBE5BVkkQAxILCgdMQVRUSUNF",
            "EARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Planning.DeciderConfigReflection.Descriptor, global::Apollo.Planning.DpPolyPathConfigReflection.Descriptor, global::Apollo.Planning.DpStSpeedConfigReflection.Descriptor, global::Apollo.Planning.QpPiecewiseJerkPathConfigReflection.Descriptor, global::Apollo.Planning.QpSplinePathConfigReflection.Descriptor, global::Apollo.Planning.QpStSpeedConfigReflection.Descriptor, global::Apollo.Planning.SidePassPathDeciderConfigReflection.Descriptor, global::Apollo.Planning.ProceedWithCautionSpeedConfigReflection.Descriptor, global::Apollo.Planning.PolyStSpeedConfigReflection.Descriptor, global::Apollo.Planning.PolyVtSpeedConfigReflection.Descriptor, global::Apollo.Planning.NaviPathDeciderConfigReflection.Descriptor, global::Apollo.Planning.NaviSpeedDeciderConfigReflection.Descriptor, global::Apollo.Planning.NaviObstacleDeciderConfigReflection.Descriptor, global::Apollo.Planning.PlannerOpenSpaceConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Planning.PlannerType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PathDeciderConfig), global::Apollo.Planning.PathDeciderConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.TaskConfig), global::Apollo.Planning.TaskConfig.Parser, new[]{ "TaskType", "DpPolyPathConfig", "DpStSpeedConfig", "QpSplinePathConfig", "QpStSpeedConfig", "PolyStSpeedConfig", "PathDeciderConfig", "ProceedWithCautionSpeedConfig", "QpPiecewiseJerkPathConfig", "DeciderCreepConfig", "DeciderRuleBasedStopConfig", "SidePassSafetyConfig", "SidePassPathDeciderConfig", "PolyVtSpeedConfig" }, new[]{ "TaskConfig" }, new[]{ typeof(global::Apollo.Planning.TaskConfig.Types.TaskType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioLaneFollowConfig), global::Apollo.Planning.ScenarioLaneFollowConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioSidePassConfig), global::Apollo.Planning.ScenarioSidePassConfig.Parser, new[]{ "SidePassExitDistance", "ApproachObstacleMaxStopSpeed", "ApproachObstacleMinStopDistance", "BlockObstacleMinSpeed", "EnableObstacleBlockedCheck", "MaxBackupStageCycleNum", "MinLNudgeBuffer", "MinFrontObstacleDistance", "MaxFrontObstacleDistance", "StopFenceDistanceToBlockingObstacle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioStopSignUnprotectedConfig), global::Apollo.Planning.ScenarioStopSignUnprotectedConfig.Parser, new[]{ "StartStopSignScenarioDistance", "WatchVehicleMaxValidStopDistance", "MaxValidStopDistance", "MaxAdcStopSpeed", "StopDuration", "MinPassSDistance", "StopTimeout", "CreepTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioTrafficLightProtectedConfig), global::Apollo.Planning.ScenarioTrafficLightProtectedConfig.Parser, new[]{ "MaxValidStopDistance", "MaxAdcStopSpeed", "MinPassSDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioTrafficLightUnprotectedLeftTurnConfig), global::Apollo.Planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.Parser, new[]{ "MaxValidStopDistance", "MaxAdcStopSpeed", "MinPassSDistance", "CreepTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioTrafficLightUnprotectedRightTurnConfig), global::Apollo.Planning.ScenarioTrafficLightUnprotectedRightTurnConfig.Parser, new[]{ "MaxValidStopDistance", "MaxAdcStopSpeed", "MinPassSDistance", "RedLightRightTurnStopDuration", "CreepTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioConfig), global::Apollo.Planning.ScenarioConfig.Parser, new[]{ "ScenarioType", "LaneFollowConfig", "SidePassConfig", "StopSignUnprotectedConfig", "TrafficLightProtectedConfig", "TrafficLightUnprotectedRightTurnConfig", "TrafficLightUnprotectedLeftTurnConfig", "StageType", "StageConfig" }, new[]{ "ScenarioConfig" }, new[]{ typeof(global::Apollo.Planning.ScenarioConfig.Types.ScenarioType), typeof(global::Apollo.Planning.ScenarioConfig.Types.StageType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ScenarioConfig.Types.StageConfig), global::Apollo.Planning.ScenarioConfig.Types.StageConfig.Parser, new[]{ "StageType", "Enabled", "TaskType", "TaskConfig" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PlannerPublicRoadConfig), global::Apollo.Planning.PlannerPublicRoadConfig.Parser, new[]{ "ScenarioType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PlannerNaviConfig), global::Apollo.Planning.PlannerNaviConfig.Parser, new[]{ "Task", "NaviPathDeciderConfig", "NaviSpeedDeciderConfig", "NaviObstacleDeciderConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.RtkPlanningConfig), global::Apollo.Planning.RtkPlanningConfig.Parser, new[]{ "PlannerType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.StandardPlanningConfig), global::Apollo.Planning.StandardPlanningConfig.Parser, new[]{ "PlannerType", "PlannerPublicRoadConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.NavigationPlanningConfig), global::Apollo.Planning.NavigationPlanningConfig.Parser, new[]{ "PlannerType", "PlannerNaviConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.OpenSpacePlanningConfig), global::Apollo.Planning.OpenSpacePlanningConfig.Parser, new[]{ "PlannerType", "PlannerOpenSpaceConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PlanningConfig), global::Apollo.Planning.PlanningConfig.Parser, new[]{ "RtkPlanningConfig", "StandardPlanningConfig", "NavigationPlanningConfig", "OpenSpacePlanningConfig", "DefaultTaskConfig" }, new[]{ "PlanningConfig" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlannerType {
    [pbr::OriginalName("RTK")] Rtk = 0,
    /// <summary>
    /// public road planner
    /// </summary>
    [pbr::OriginalName("PUBLIC_ROAD")] PublicRoad = 1,
    /// <summary>
    /// open space planner
    /// </summary>
    [pbr::OriginalName("OPEN_SPACE")] OpenSpace = 2,
    /// <summary>
    /// navigation planner
    /// </summary>
    [pbr::OriginalName("NAVI")] Navi = 3,
    /// <summary>
    /// lattice planner
    /// </summary>
    [pbr::OriginalName("LATTICE")] Lattice = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// place holder
  /// </summary>
  public sealed partial class PathDeciderConfig : pb::IMessage<PathDeciderConfig> {
    private static readonly pb::MessageParser<PathDeciderConfig> _parser = new pb::MessageParser<PathDeciderConfig>(() => new PathDeciderConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathDeciderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathDeciderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathDeciderConfig(PathDeciderConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathDeciderConfig Clone() {
      return new PathDeciderConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathDeciderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathDeciderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathDeciderConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// tasks are shared among all scenarios and stages.
  /// </summary>
  public sealed partial class TaskConfig : pb::IMessage<TaskConfig> {
    private static readonly pb::MessageParser<TaskConfig> _parser = new pb::MessageParser<TaskConfig>(() => new TaskConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConfig(TaskConfig other) : this() {
      taskType_ = other.taskType_;
      switch (other.TaskConfigCase) {
        case TaskConfigOneofCase.DpPolyPathConfig:
          DpPolyPathConfig = other.DpPolyPathConfig.Clone();
          break;
        case TaskConfigOneofCase.DpStSpeedConfig:
          DpStSpeedConfig = other.DpStSpeedConfig.Clone();
          break;
        case TaskConfigOneofCase.QpSplinePathConfig:
          QpSplinePathConfig = other.QpSplinePathConfig.Clone();
          break;
        case TaskConfigOneofCase.QpStSpeedConfig:
          QpStSpeedConfig = other.QpStSpeedConfig.Clone();
          break;
        case TaskConfigOneofCase.PolyStSpeedConfig:
          PolyStSpeedConfig = other.PolyStSpeedConfig.Clone();
          break;
        case TaskConfigOneofCase.PathDeciderConfig:
          PathDeciderConfig = other.PathDeciderConfig.Clone();
          break;
        case TaskConfigOneofCase.ProceedWithCautionSpeedConfig:
          ProceedWithCautionSpeedConfig = other.ProceedWithCautionSpeedConfig.Clone();
          break;
        case TaskConfigOneofCase.QpPiecewiseJerkPathConfig:
          QpPiecewiseJerkPathConfig = other.QpPiecewiseJerkPathConfig.Clone();
          break;
        case TaskConfigOneofCase.DeciderCreepConfig:
          DeciderCreepConfig = other.DeciderCreepConfig.Clone();
          break;
        case TaskConfigOneofCase.DeciderRuleBasedStopConfig:
          DeciderRuleBasedStopConfig = other.DeciderRuleBasedStopConfig.Clone();
          break;
        case TaskConfigOneofCase.SidePassSafetyConfig:
          SidePassSafetyConfig = other.SidePassSafetyConfig.Clone();
          break;
        case TaskConfigOneofCase.SidePassPathDeciderConfig:
          SidePassPathDeciderConfig = other.SidePassPathDeciderConfig.Clone();
          break;
        case TaskConfigOneofCase.PolyVtSpeedConfig:
          PolyVtSpeedConfig = other.PolyVtSpeedConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConfig Clone() {
      return new TaskConfig(this);
    }

    /// <summary>Field number for the "task_type" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private global::Apollo.Planning.TaskConfig.Types.TaskType taskType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.TaskConfig.Types.TaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "dp_poly_path_config" field.</summary>
    public const int DpPolyPathConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DpPolyPathConfig DpPolyPathConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.DpPolyPathConfig ? (global::Apollo.Planning.DpPolyPathConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.DpPolyPathConfig;
      }
    }

    /// <summary>Field number for the "dp_st_speed_config" field.</summary>
    public const int DpStSpeedConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DpStSpeedConfig DpStSpeedConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.DpStSpeedConfig ? (global::Apollo.Planning.DpStSpeedConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.DpStSpeedConfig;
      }
    }

    /// <summary>Field number for the "qp_spline_path_config" field.</summary>
    public const int QpSplinePathConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QpSplinePathConfig QpSplinePathConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.QpSplinePathConfig ? (global::Apollo.Planning.QpSplinePathConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.QpSplinePathConfig;
      }
    }

    /// <summary>Field number for the "qp_st_speed_config" field.</summary>
    public const int QpStSpeedConfigFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QpStSpeedConfig QpStSpeedConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.QpStSpeedConfig ? (global::Apollo.Planning.QpStSpeedConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.QpStSpeedConfig;
      }
    }

    /// <summary>Field number for the "poly_st_speed_config" field.</summary>
    public const int PolyStSpeedConfigFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PolyStSpeedConfig PolyStSpeedConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.PolyStSpeedConfig ? (global::Apollo.Planning.PolyStSpeedConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.PolyStSpeedConfig;
      }
    }

    /// <summary>Field number for the "path_decider_config" field.</summary>
    public const int PathDeciderConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PathDeciderConfig PathDeciderConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.PathDeciderConfig ? (global::Apollo.Planning.PathDeciderConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.PathDeciderConfig;
      }
    }

    /// <summary>Field number for the "proceed_with_caution_speed_config" field.</summary>
    public const int ProceedWithCautionSpeedConfigFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ProceedWithCautionSpeedConfig ProceedWithCautionSpeedConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.ProceedWithCautionSpeedConfig ? (global::Apollo.Planning.ProceedWithCautionSpeedConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.ProceedWithCautionSpeedConfig;
      }
    }

    /// <summary>Field number for the "qp_piecewise_jerk_path_config" field.</summary>
    public const int QpPiecewiseJerkPathConfigFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QpPiecewiseJerkPathConfig QpPiecewiseJerkPathConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.QpPiecewiseJerkPathConfig ? (global::Apollo.Planning.QpPiecewiseJerkPathConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.QpPiecewiseJerkPathConfig;
      }
    }

    /// <summary>Field number for the "decider_creep_config" field.</summary>
    public const int DeciderCreepConfigFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DeciderCreepConfig DeciderCreepConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.DeciderCreepConfig ? (global::Apollo.Planning.DeciderCreepConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.DeciderCreepConfig;
      }
    }

    /// <summary>Field number for the "decider_rule_based_stop_config" field.</summary>
    public const int DeciderRuleBasedStopConfigFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DeciderRuleBasedStopConfig DeciderRuleBasedStopConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.DeciderRuleBasedStopConfig ? (global::Apollo.Planning.DeciderRuleBasedStopConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.DeciderRuleBasedStopConfig;
      }
    }

    /// <summary>Field number for the "side_pass_safety_config" field.</summary>
    public const int SidePassSafetyConfigFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.SidePassSafetyConfig SidePassSafetyConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.SidePassSafetyConfig ? (global::Apollo.Planning.SidePassSafetyConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.SidePassSafetyConfig;
      }
    }

    /// <summary>Field number for the "side_pass_path_decider_config" field.</summary>
    public const int SidePassPathDeciderConfigFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.SidePassPathDeciderConfig SidePassPathDeciderConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.SidePassPathDeciderConfig ? (global::Apollo.Planning.SidePassPathDeciderConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.SidePassPathDeciderConfig;
      }
    }

    /// <summary>Field number for the "poly_vt_speed_config" field.</summary>
    public const int PolyVtSpeedConfigFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PolyVTSpeedConfig PolyVtSpeedConfig {
      get { return taskConfigCase_ == TaskConfigOneofCase.PolyVtSpeedConfig ? (global::Apollo.Planning.PolyVTSpeedConfig) taskConfig_ : null; }
      set {
        taskConfig_ = value;
        taskConfigCase_ = value == null ? TaskConfigOneofCase.None : TaskConfigOneofCase.PolyVtSpeedConfig;
      }
    }

    private object taskConfig_;
    /// <summary>Enum of possible cases for the "task_config" oneof.</summary>
    public enum TaskConfigOneofCase {
      None = 0,
      DpPolyPathConfig = 2,
      DpStSpeedConfig = 3,
      QpSplinePathConfig = 4,
      QpStSpeedConfig = 5,
      PolyStSpeedConfig = 6,
      PathDeciderConfig = 7,
      ProceedWithCautionSpeedConfig = 8,
      QpPiecewiseJerkPathConfig = 9,
      DeciderCreepConfig = 10,
      DeciderRuleBasedStopConfig = 11,
      SidePassSafetyConfig = 12,
      SidePassPathDeciderConfig = 13,
      PolyVtSpeedConfig = 14,
    }
    private TaskConfigOneofCase taskConfigCase_ = TaskConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConfigOneofCase TaskConfigCase {
      get { return taskConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskConfig() {
      taskConfigCase_ = TaskConfigOneofCase.None;
      taskConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskType != other.TaskType) return false;
      if (!object.Equals(DpPolyPathConfig, other.DpPolyPathConfig)) return false;
      if (!object.Equals(DpStSpeedConfig, other.DpStSpeedConfig)) return false;
      if (!object.Equals(QpSplinePathConfig, other.QpSplinePathConfig)) return false;
      if (!object.Equals(QpStSpeedConfig, other.QpStSpeedConfig)) return false;
      if (!object.Equals(PolyStSpeedConfig, other.PolyStSpeedConfig)) return false;
      if (!object.Equals(PathDeciderConfig, other.PathDeciderConfig)) return false;
      if (!object.Equals(ProceedWithCautionSpeedConfig, other.ProceedWithCautionSpeedConfig)) return false;
      if (!object.Equals(QpPiecewiseJerkPathConfig, other.QpPiecewiseJerkPathConfig)) return false;
      if (!object.Equals(DeciderCreepConfig, other.DeciderCreepConfig)) return false;
      if (!object.Equals(DeciderRuleBasedStopConfig, other.DeciderRuleBasedStopConfig)) return false;
      if (!object.Equals(SidePassSafetyConfig, other.SidePassSafetyConfig)) return false;
      if (!object.Equals(SidePassPathDeciderConfig, other.SidePassPathDeciderConfig)) return false;
      if (!object.Equals(PolyVtSpeedConfig, other.PolyVtSpeedConfig)) return false;
      if (TaskConfigCase != other.TaskConfigCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskType != 0) hash ^= TaskType.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.DpPolyPathConfig) hash ^= DpPolyPathConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.DpStSpeedConfig) hash ^= DpStSpeedConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.QpSplinePathConfig) hash ^= QpSplinePathConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.QpStSpeedConfig) hash ^= QpStSpeedConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.PolyStSpeedConfig) hash ^= PolyStSpeedConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.PathDeciderConfig) hash ^= PathDeciderConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.ProceedWithCautionSpeedConfig) hash ^= ProceedWithCautionSpeedConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.QpPiecewiseJerkPathConfig) hash ^= QpPiecewiseJerkPathConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.DeciderCreepConfig) hash ^= DeciderCreepConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.DeciderRuleBasedStopConfig) hash ^= DeciderRuleBasedStopConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.SidePassSafetyConfig) hash ^= SidePassSafetyConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.SidePassPathDeciderConfig) hash ^= SidePassPathDeciderConfig.GetHashCode();
      if (taskConfigCase_ == TaskConfigOneofCase.PolyVtSpeedConfig) hash ^= PolyVtSpeedConfig.GetHashCode();
      hash ^= (int) taskConfigCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TaskType);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DpPolyPathConfig) {
        output.WriteRawTag(18);
        output.WriteMessage(DpPolyPathConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DpStSpeedConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(DpStSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.QpSplinePathConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(QpSplinePathConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.QpStSpeedConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(QpStSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.PolyStSpeedConfig) {
        output.WriteRawTag(50);
        output.WriteMessage(PolyStSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.PathDeciderConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(PathDeciderConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.ProceedWithCautionSpeedConfig) {
        output.WriteRawTag(66);
        output.WriteMessage(ProceedWithCautionSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.QpPiecewiseJerkPathConfig) {
        output.WriteRawTag(74);
        output.WriteMessage(QpPiecewiseJerkPathConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DeciderCreepConfig) {
        output.WriteRawTag(82);
        output.WriteMessage(DeciderCreepConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DeciderRuleBasedStopConfig) {
        output.WriteRawTag(90);
        output.WriteMessage(DeciderRuleBasedStopConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.SidePassSafetyConfig) {
        output.WriteRawTag(98);
        output.WriteMessage(SidePassSafetyConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.SidePassPathDeciderConfig) {
        output.WriteRawTag(106);
        output.WriteMessage(SidePassPathDeciderConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.PolyVtSpeedConfig) {
        output.WriteRawTag(114);
        output.WriteMessage(PolyVtSpeedConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DpPolyPathConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DpPolyPathConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DpStSpeedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DpStSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.QpSplinePathConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QpSplinePathConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.QpStSpeedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QpStSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.PolyStSpeedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PolyStSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.PathDeciderConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathDeciderConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.ProceedWithCautionSpeedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProceedWithCautionSpeedConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.QpPiecewiseJerkPathConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QpPiecewiseJerkPathConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DeciderCreepConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeciderCreepConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.DeciderRuleBasedStopConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeciderRuleBasedStopConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.SidePassSafetyConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SidePassSafetyConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.SidePassPathDeciderConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SidePassPathDeciderConfig);
      }
      if (taskConfigCase_ == TaskConfigOneofCase.PolyVtSpeedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PolyVtSpeedConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskConfig other) {
      if (other == null) {
        return;
      }
      if (other.TaskType != 0) {
        TaskType = other.TaskType;
      }
      switch (other.TaskConfigCase) {
        case TaskConfigOneofCase.DpPolyPathConfig:
          DpPolyPathConfig = other.DpPolyPathConfig;
          break;
        case TaskConfigOneofCase.DpStSpeedConfig:
          DpStSpeedConfig = other.DpStSpeedConfig;
          break;
        case TaskConfigOneofCase.QpSplinePathConfig:
          QpSplinePathConfig = other.QpSplinePathConfig;
          break;
        case TaskConfigOneofCase.QpStSpeedConfig:
          QpStSpeedConfig = other.QpStSpeedConfig;
          break;
        case TaskConfigOneofCase.PolyStSpeedConfig:
          PolyStSpeedConfig = other.PolyStSpeedConfig;
          break;
        case TaskConfigOneofCase.PathDeciderConfig:
          PathDeciderConfig = other.PathDeciderConfig;
          break;
        case TaskConfigOneofCase.ProceedWithCautionSpeedConfig:
          ProceedWithCautionSpeedConfig = other.ProceedWithCautionSpeedConfig;
          break;
        case TaskConfigOneofCase.QpPiecewiseJerkPathConfig:
          QpPiecewiseJerkPathConfig = other.QpPiecewiseJerkPathConfig;
          break;
        case TaskConfigOneofCase.DeciderCreepConfig:
          DeciderCreepConfig = other.DeciderCreepConfig;
          break;
        case TaskConfigOneofCase.DeciderRuleBasedStopConfig:
          DeciderRuleBasedStopConfig = other.DeciderRuleBasedStopConfig;
          break;
        case TaskConfigOneofCase.SidePassSafetyConfig:
          SidePassSafetyConfig = other.SidePassSafetyConfig;
          break;
        case TaskConfigOneofCase.SidePassPathDeciderConfig:
          SidePassPathDeciderConfig = other.SidePassPathDeciderConfig;
          break;
        case TaskConfigOneofCase.PolyVtSpeedConfig:
          PolyVtSpeedConfig = other.PolyVtSpeedConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskType_ = (global::Apollo.Planning.TaskConfig.Types.TaskType) input.ReadEnum();
            break;
          }
          case 18: {
            global::Apollo.Planning.DpPolyPathConfig subBuilder = new global::Apollo.Planning.DpPolyPathConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.DpPolyPathConfig) {
              subBuilder.MergeFrom(DpPolyPathConfig);
            }
            input.ReadMessage(subBuilder);
            DpPolyPathConfig = subBuilder;
            break;
          }
          case 26: {
            global::Apollo.Planning.DpStSpeedConfig subBuilder = new global::Apollo.Planning.DpStSpeedConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.DpStSpeedConfig) {
              subBuilder.MergeFrom(DpStSpeedConfig);
            }
            input.ReadMessage(subBuilder);
            DpStSpeedConfig = subBuilder;
            break;
          }
          case 34: {
            global::Apollo.Planning.QpSplinePathConfig subBuilder = new global::Apollo.Planning.QpSplinePathConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.QpSplinePathConfig) {
              subBuilder.MergeFrom(QpSplinePathConfig);
            }
            input.ReadMessage(subBuilder);
            QpSplinePathConfig = subBuilder;
            break;
          }
          case 42: {
            global::Apollo.Planning.QpStSpeedConfig subBuilder = new global::Apollo.Planning.QpStSpeedConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.QpStSpeedConfig) {
              subBuilder.MergeFrom(QpStSpeedConfig);
            }
            input.ReadMessage(subBuilder);
            QpStSpeedConfig = subBuilder;
            break;
          }
          case 50: {
            global::Apollo.Planning.PolyStSpeedConfig subBuilder = new global::Apollo.Planning.PolyStSpeedConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.PolyStSpeedConfig) {
              subBuilder.MergeFrom(PolyStSpeedConfig);
            }
            input.ReadMessage(subBuilder);
            PolyStSpeedConfig = subBuilder;
            break;
          }
          case 58: {
            global::Apollo.Planning.PathDeciderConfig subBuilder = new global::Apollo.Planning.PathDeciderConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.PathDeciderConfig) {
              subBuilder.MergeFrom(PathDeciderConfig);
            }
            input.ReadMessage(subBuilder);
            PathDeciderConfig = subBuilder;
            break;
          }
          case 66: {
            global::Apollo.Planning.ProceedWithCautionSpeedConfig subBuilder = new global::Apollo.Planning.ProceedWithCautionSpeedConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.ProceedWithCautionSpeedConfig) {
              subBuilder.MergeFrom(ProceedWithCautionSpeedConfig);
            }
            input.ReadMessage(subBuilder);
            ProceedWithCautionSpeedConfig = subBuilder;
            break;
          }
          case 74: {
            global::Apollo.Planning.QpPiecewiseJerkPathConfig subBuilder = new global::Apollo.Planning.QpPiecewiseJerkPathConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.QpPiecewiseJerkPathConfig) {
              subBuilder.MergeFrom(QpPiecewiseJerkPathConfig);
            }
            input.ReadMessage(subBuilder);
            QpPiecewiseJerkPathConfig = subBuilder;
            break;
          }
          case 82: {
            global::Apollo.Planning.DeciderCreepConfig subBuilder = new global::Apollo.Planning.DeciderCreepConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.DeciderCreepConfig) {
              subBuilder.MergeFrom(DeciderCreepConfig);
            }
            input.ReadMessage(subBuilder);
            DeciderCreepConfig = subBuilder;
            break;
          }
          case 90: {
            global::Apollo.Planning.DeciderRuleBasedStopConfig subBuilder = new global::Apollo.Planning.DeciderRuleBasedStopConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.DeciderRuleBasedStopConfig) {
              subBuilder.MergeFrom(DeciderRuleBasedStopConfig);
            }
            input.ReadMessage(subBuilder);
            DeciderRuleBasedStopConfig = subBuilder;
            break;
          }
          case 98: {
            global::Apollo.Planning.SidePassSafetyConfig subBuilder = new global::Apollo.Planning.SidePassSafetyConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.SidePassSafetyConfig) {
              subBuilder.MergeFrom(SidePassSafetyConfig);
            }
            input.ReadMessage(subBuilder);
            SidePassSafetyConfig = subBuilder;
            break;
          }
          case 106: {
            global::Apollo.Planning.SidePassPathDeciderConfig subBuilder = new global::Apollo.Planning.SidePassPathDeciderConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.SidePassPathDeciderConfig) {
              subBuilder.MergeFrom(SidePassPathDeciderConfig);
            }
            input.ReadMessage(subBuilder);
            SidePassPathDeciderConfig = subBuilder;
            break;
          }
          case 114: {
            global::Apollo.Planning.PolyVTSpeedConfig subBuilder = new global::Apollo.Planning.PolyVTSpeedConfig();
            if (taskConfigCase_ == TaskConfigOneofCase.PolyVtSpeedConfig) {
              subBuilder.MergeFrom(PolyVtSpeedConfig);
            }
            input.ReadMessage(subBuilder);
            PolyVtSpeedConfig = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TaskConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TaskType {
        [pbr::OriginalName("DP_POLY_PATH_OPTIMIZER")] DpPolyPathOptimizer = 0,
        [pbr::OriginalName("DP_ST_SPEED_OPTIMIZER")] DpStSpeedOptimizer = 1,
        [pbr::OriginalName("QP_SPLINE_PATH_OPTIMIZER")] QpSplinePathOptimizer = 2,
        [pbr::OriginalName("QP_SPLINE_ST_SPEED_OPTIMIZER")] QpSplineStSpeedOptimizer = 3,
        [pbr::OriginalName("PATH_DECIDER")] PathDecider = 4,
        [pbr::OriginalName("SPEED_DECIDER")] SpeedDecider = 5,
        [pbr::OriginalName("POLY_ST_SPEED_OPTIMIZER")] PolyStSpeedOptimizer = 6,
        [pbr::OriginalName("NAVI_PATH_DECIDER")] NaviPathDecider = 7,
        [pbr::OriginalName("NAVI_SPEED_DECIDER")] NaviSpeedDecider = 8,
        [pbr::OriginalName("NAVI_OBSTACLE_DECIDER")] NaviObstacleDecider = 9,
        [pbr::OriginalName("QP_PIECEWISE_JERK_PATH_OPTIMIZER")] QpPiecewiseJerkPathOptimizer = 10,
        [pbr::OriginalName("DECIDER_CREEP")] DeciderCreep = 11,
        [pbr::OriginalName("DECIDER_RULE_BASED_STOP")] DeciderRuleBasedStop = 12,
        [pbr::OriginalName("SIDE_PASS_PATH_DECIDER")] SidePassPathDecider = 13,
        [pbr::OriginalName("SIDE_PASS_SAFETY")] SidePassSafety = 14,
        [pbr::OriginalName("PROCEED_WITH_CAUTION_SPEED")] ProceedWithCautionSpeed = 15,
        [pbr::OriginalName("DECIDER_RSS")] DeciderRss = 16,
      }

    }
    #endregion

  }

  public sealed partial class ScenarioLaneFollowConfig : pb::IMessage<ScenarioLaneFollowConfig> {
    private static readonly pb::MessageParser<ScenarioLaneFollowConfig> _parser = new pb::MessageParser<ScenarioLaneFollowConfig>(() => new ScenarioLaneFollowConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioLaneFollowConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioLaneFollowConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioLaneFollowConfig(ScenarioLaneFollowConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioLaneFollowConfig Clone() {
      return new ScenarioLaneFollowConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioLaneFollowConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioLaneFollowConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioLaneFollowConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ScenarioSidePassConfig : pb::IMessage<ScenarioSidePassConfig> {
    private static readonly pb::MessageParser<ScenarioSidePassConfig> _parser = new pb::MessageParser<ScenarioSidePassConfig>(() => new ScenarioSidePassConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioSidePassConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioSidePassConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioSidePassConfig(ScenarioSidePassConfig other) : this() {
      sidePassExitDistance_ = other.sidePassExitDistance_;
      approachObstacleMaxStopSpeed_ = other.approachObstacleMaxStopSpeed_;
      approachObstacleMinStopDistance_ = other.approachObstacleMinStopDistance_;
      blockObstacleMinSpeed_ = other.blockObstacleMinSpeed_;
      enableObstacleBlockedCheck_ = other.enableObstacleBlockedCheck_;
      maxBackupStageCycleNum_ = other.maxBackupStageCycleNum_;
      minLNudgeBuffer_ = other.minLNudgeBuffer_;
      minFrontObstacleDistance_ = other.minFrontObstacleDistance_;
      maxFrontObstacleDistance_ = other.maxFrontObstacleDistance_;
      stopFenceDistanceToBlockingObstacle_ = other.stopFenceDistanceToBlockingObstacle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioSidePassConfig Clone() {
      return new ScenarioSidePassConfig(this);
    }

    /// <summary>Field number for the "side_pass_exit_distance" field.</summary>
    public const int SidePassExitDistanceFieldNumber = 1;
    private double sidePassExitDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SidePassExitDistance {
      get { return sidePassExitDistance_; }
      set {
        sidePassExitDistance_ = value;
      }
    }

    /// <summary>Field number for the "approach_obstacle_max_stop_speed" field.</summary>
    public const int ApproachObstacleMaxStopSpeedFieldNumber = 2;
    private double approachObstacleMaxStopSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ApproachObstacleMaxStopSpeed {
      get { return approachObstacleMaxStopSpeed_; }
      set {
        approachObstacleMaxStopSpeed_ = value;
      }
    }

    /// <summary>Field number for the "approach_obstacle_min_stop_distance" field.</summary>
    public const int ApproachObstacleMinStopDistanceFieldNumber = 3;
    private double approachObstacleMinStopDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ApproachObstacleMinStopDistance {
      get { return approachObstacleMinStopDistance_; }
      set {
        approachObstacleMinStopDistance_ = value;
      }
    }

    /// <summary>Field number for the "block_obstacle_min_speed" field.</summary>
    public const int BlockObstacleMinSpeedFieldNumber = 4;
    private double blockObstacleMinSpeed_;
    /// <summary>
    /// m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BlockObstacleMinSpeed {
      get { return blockObstacleMinSpeed_; }
      set {
        blockObstacleMinSpeed_ = value;
      }
    }

    /// <summary>Field number for the "enable_obstacle_blocked_check" field.</summary>
    public const int EnableObstacleBlockedCheckFieldNumber = 5;
    private bool enableObstacleBlockedCheck_;
    /// <summary>
    /// set to false to work around large vehicle splitting issue in perception
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableObstacleBlockedCheck {
      get { return enableObstacleBlockedCheck_; }
      set {
        enableObstacleBlockedCheck_ = value;
      }
    }

    /// <summary>Field number for the "max_backup_stage_cycle_num" field.</summary>
    public const int MaxBackupStageCycleNumFieldNumber = 6;
    private uint maxBackupStageCycleNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxBackupStageCycleNum {
      get { return maxBackupStageCycleNum_; }
      set {
        maxBackupStageCycleNum_ = value;
      }
    }

    /// <summary>Field number for the "min_l_nudge_buffer" field.</summary>
    public const int MinLNudgeBufferFieldNumber = 7;
    private double minLNudgeBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinLNudgeBuffer {
      get { return minLNudgeBuffer_; }
      set {
        minLNudgeBuffer_ = value;
      }
    }

    /// <summary>Field number for the "min_front_obstacle_distance" field.</summary>
    public const int MinFrontObstacleDistanceFieldNumber = 8;
    private double minFrontObstacleDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinFrontObstacleDistance {
      get { return minFrontObstacleDistance_; }
      set {
        minFrontObstacleDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_front_obstacle_distance" field.</summary>
    public const int MaxFrontObstacleDistanceFieldNumber = 9;
    private double maxFrontObstacleDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxFrontObstacleDistance {
      get { return maxFrontObstacleDistance_; }
      set {
        maxFrontObstacleDistance_ = value;
      }
    }

    /// <summary>Field number for the "stop_fence_distance_to_blocking_obstacle" field.</summary>
    public const int StopFenceDistanceToBlockingObstacleFieldNumber = 10;
    private double stopFenceDistanceToBlockingObstacle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopFenceDistanceToBlockingObstacle {
      get { return stopFenceDistanceToBlockingObstacle_; }
      set {
        stopFenceDistanceToBlockingObstacle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioSidePassConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioSidePassConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SidePassExitDistance != other.SidePassExitDistance) return false;
      if (ApproachObstacleMaxStopSpeed != other.ApproachObstacleMaxStopSpeed) return false;
      if (ApproachObstacleMinStopDistance != other.ApproachObstacleMinStopDistance) return false;
      if (BlockObstacleMinSpeed != other.BlockObstacleMinSpeed) return false;
      if (EnableObstacleBlockedCheck != other.EnableObstacleBlockedCheck) return false;
      if (MaxBackupStageCycleNum != other.MaxBackupStageCycleNum) return false;
      if (MinLNudgeBuffer != other.MinLNudgeBuffer) return false;
      if (MinFrontObstacleDistance != other.MinFrontObstacleDistance) return false;
      if (MaxFrontObstacleDistance != other.MaxFrontObstacleDistance) return false;
      if (StopFenceDistanceToBlockingObstacle != other.StopFenceDistanceToBlockingObstacle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SidePassExitDistance != 0D) hash ^= SidePassExitDistance.GetHashCode();
      if (ApproachObstacleMaxStopSpeed != 0D) hash ^= ApproachObstacleMaxStopSpeed.GetHashCode();
      if (ApproachObstacleMinStopDistance != 0D) hash ^= ApproachObstacleMinStopDistance.GetHashCode();
      if (BlockObstacleMinSpeed != 0D) hash ^= BlockObstacleMinSpeed.GetHashCode();
      if (EnableObstacleBlockedCheck != false) hash ^= EnableObstacleBlockedCheck.GetHashCode();
      if (MaxBackupStageCycleNum != 0) hash ^= MaxBackupStageCycleNum.GetHashCode();
      if (MinLNudgeBuffer != 0D) hash ^= MinLNudgeBuffer.GetHashCode();
      if (MinFrontObstacleDistance != 0D) hash ^= MinFrontObstacleDistance.GetHashCode();
      if (MaxFrontObstacleDistance != 0D) hash ^= MaxFrontObstacleDistance.GetHashCode();
      if (StopFenceDistanceToBlockingObstacle != 0D) hash ^= StopFenceDistanceToBlockingObstacle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SidePassExitDistance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SidePassExitDistance);
      }
      if (ApproachObstacleMaxStopSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ApproachObstacleMaxStopSpeed);
      }
      if (ApproachObstacleMinStopDistance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ApproachObstacleMinStopDistance);
      }
      if (BlockObstacleMinSpeed != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(BlockObstacleMinSpeed);
      }
      if (EnableObstacleBlockedCheck != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableObstacleBlockedCheck);
      }
      if (MaxBackupStageCycleNum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxBackupStageCycleNum);
      }
      if (MinLNudgeBuffer != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MinLNudgeBuffer);
      }
      if (MinFrontObstacleDistance != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(MinFrontObstacleDistance);
      }
      if (MaxFrontObstacleDistance != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MaxFrontObstacleDistance);
      }
      if (StopFenceDistanceToBlockingObstacle != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(StopFenceDistanceToBlockingObstacle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SidePassExitDistance != 0D) {
        size += 1 + 8;
      }
      if (ApproachObstacleMaxStopSpeed != 0D) {
        size += 1 + 8;
      }
      if (ApproachObstacleMinStopDistance != 0D) {
        size += 1 + 8;
      }
      if (BlockObstacleMinSpeed != 0D) {
        size += 1 + 8;
      }
      if (EnableObstacleBlockedCheck != false) {
        size += 1 + 1;
      }
      if (MaxBackupStageCycleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBackupStageCycleNum);
      }
      if (MinLNudgeBuffer != 0D) {
        size += 1 + 8;
      }
      if (MinFrontObstacleDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxFrontObstacleDistance != 0D) {
        size += 1 + 8;
      }
      if (StopFenceDistanceToBlockingObstacle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioSidePassConfig other) {
      if (other == null) {
        return;
      }
      if (other.SidePassExitDistance != 0D) {
        SidePassExitDistance = other.SidePassExitDistance;
      }
      if (other.ApproachObstacleMaxStopSpeed != 0D) {
        ApproachObstacleMaxStopSpeed = other.ApproachObstacleMaxStopSpeed;
      }
      if (other.ApproachObstacleMinStopDistance != 0D) {
        ApproachObstacleMinStopDistance = other.ApproachObstacleMinStopDistance;
      }
      if (other.BlockObstacleMinSpeed != 0D) {
        BlockObstacleMinSpeed = other.BlockObstacleMinSpeed;
      }
      if (other.EnableObstacleBlockedCheck != false) {
        EnableObstacleBlockedCheck = other.EnableObstacleBlockedCheck;
      }
      if (other.MaxBackupStageCycleNum != 0) {
        MaxBackupStageCycleNum = other.MaxBackupStageCycleNum;
      }
      if (other.MinLNudgeBuffer != 0D) {
        MinLNudgeBuffer = other.MinLNudgeBuffer;
      }
      if (other.MinFrontObstacleDistance != 0D) {
        MinFrontObstacleDistance = other.MinFrontObstacleDistance;
      }
      if (other.MaxFrontObstacleDistance != 0D) {
        MaxFrontObstacleDistance = other.MaxFrontObstacleDistance;
      }
      if (other.StopFenceDistanceToBlockingObstacle != 0D) {
        StopFenceDistanceToBlockingObstacle = other.StopFenceDistanceToBlockingObstacle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            SidePassExitDistance = input.ReadDouble();
            break;
          }
          case 17: {
            ApproachObstacleMaxStopSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            ApproachObstacleMinStopDistance = input.ReadDouble();
            break;
          }
          case 33: {
            BlockObstacleMinSpeed = input.ReadDouble();
            break;
          }
          case 40: {
            EnableObstacleBlockedCheck = input.ReadBool();
            break;
          }
          case 48: {
            MaxBackupStageCycleNum = input.ReadUInt32();
            break;
          }
          case 57: {
            MinLNudgeBuffer = input.ReadDouble();
            break;
          }
          case 65: {
            MinFrontObstacleDistance = input.ReadDouble();
            break;
          }
          case 73: {
            MaxFrontObstacleDistance = input.ReadDouble();
            break;
          }
          case 81: {
            StopFenceDistanceToBlockingObstacle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenarioStopSignUnprotectedConfig : pb::IMessage<ScenarioStopSignUnprotectedConfig> {
    private static readonly pb::MessageParser<ScenarioStopSignUnprotectedConfig> _parser = new pb::MessageParser<ScenarioStopSignUnprotectedConfig>(() => new ScenarioStopSignUnprotectedConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioStopSignUnprotectedConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioStopSignUnprotectedConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioStopSignUnprotectedConfig(ScenarioStopSignUnprotectedConfig other) : this() {
      startStopSignScenarioDistance_ = other.startStopSignScenarioDistance_;
      watchVehicleMaxValidStopDistance_ = other.watchVehicleMaxValidStopDistance_;
      maxValidStopDistance_ = other.maxValidStopDistance_;
      maxAdcStopSpeed_ = other.maxAdcStopSpeed_;
      stopDuration_ = other.stopDuration_;
      minPassSDistance_ = other.minPassSDistance_;
      stopTimeout_ = other.stopTimeout_;
      creepTimeout_ = other.creepTimeout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioStopSignUnprotectedConfig Clone() {
      return new ScenarioStopSignUnprotectedConfig(this);
    }

    /// <summary>Field number for the "start_stop_sign_scenario_distance" field.</summary>
    public const int StartStopSignScenarioDistanceFieldNumber = 1;
    private double startStopSignScenarioDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartStopSignScenarioDistance {
      get { return startStopSignScenarioDistance_; }
      set {
        startStopSignScenarioDistance_ = value;
      }
    }

    /// <summary>Field number for the "watch_vehicle_max_valid_stop_distance" field.</summary>
    public const int WatchVehicleMaxValidStopDistanceFieldNumber = 2;
    private double watchVehicleMaxValidStopDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WatchVehicleMaxValidStopDistance {
      get { return watchVehicleMaxValidStopDistance_; }
      set {
        watchVehicleMaxValidStopDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_valid_stop_distance" field.</summary>
    public const int MaxValidStopDistanceFieldNumber = 3;
    private double maxValidStopDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxValidStopDistance {
      get { return maxValidStopDistance_; }
      set {
        maxValidStopDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_adc_stop_speed" field.</summary>
    public const int MaxAdcStopSpeedFieldNumber = 4;
    private double maxAdcStopSpeed_;
    /// <summary>
    /// m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAdcStopSpeed {
      get { return maxAdcStopSpeed_; }
      set {
        maxAdcStopSpeed_ = value;
      }
    }

    /// <summary>Field number for the "stop_duration" field.</summary>
    public const int StopDurationFieldNumber = 5;
    private float stopDuration_;
    /// <summary>
    /// sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StopDuration {
      get { return stopDuration_; }
      set {
        stopDuration_ = value;
      }
    }

    /// <summary>Field number for the "min_pass_s_distance" field.</summary>
    public const int MinPassSDistanceFieldNumber = 6;
    private double minPassSDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinPassSDistance {
      get { return minPassSDistance_; }
      set {
        minPassSDistance_ = value;
      }
    }

    /// <summary>Field number for the "stop_timeout" field.</summary>
    public const int StopTimeoutFieldNumber = 7;
    private float stopTimeout_;
    /// <summary>
    /// sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StopTimeout {
      get { return stopTimeout_; }
      set {
        stopTimeout_ = value;
      }
    }

    /// <summary>Field number for the "creep_timeout" field.</summary>
    public const int CreepTimeoutFieldNumber = 8;
    private float creepTimeout_;
    /// <summary>
    /// sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CreepTimeout {
      get { return creepTimeout_; }
      set {
        creepTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioStopSignUnprotectedConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioStopSignUnprotectedConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartStopSignScenarioDistance != other.StartStopSignScenarioDistance) return false;
      if (WatchVehicleMaxValidStopDistance != other.WatchVehicleMaxValidStopDistance) return false;
      if (MaxValidStopDistance != other.MaxValidStopDistance) return false;
      if (MaxAdcStopSpeed != other.MaxAdcStopSpeed) return false;
      if (StopDuration != other.StopDuration) return false;
      if (MinPassSDistance != other.MinPassSDistance) return false;
      if (StopTimeout != other.StopTimeout) return false;
      if (CreepTimeout != other.CreepTimeout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartStopSignScenarioDistance != 0D) hash ^= StartStopSignScenarioDistance.GetHashCode();
      if (WatchVehicleMaxValidStopDistance != 0D) hash ^= WatchVehicleMaxValidStopDistance.GetHashCode();
      if (MaxValidStopDistance != 0D) hash ^= MaxValidStopDistance.GetHashCode();
      if (MaxAdcStopSpeed != 0D) hash ^= MaxAdcStopSpeed.GetHashCode();
      if (StopDuration != 0F) hash ^= StopDuration.GetHashCode();
      if (MinPassSDistance != 0D) hash ^= MinPassSDistance.GetHashCode();
      if (StopTimeout != 0F) hash ^= StopTimeout.GetHashCode();
      if (CreepTimeout != 0F) hash ^= CreepTimeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartStopSignScenarioDistance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(StartStopSignScenarioDistance);
      }
      if (WatchVehicleMaxValidStopDistance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(WatchVehicleMaxValidStopDistance);
      }
      if (MaxValidStopDistance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxValidStopDistance);
      }
      if (MaxAdcStopSpeed != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxAdcStopSpeed);
      }
      if (StopDuration != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StopDuration);
      }
      if (MinPassSDistance != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MinPassSDistance);
      }
      if (StopTimeout != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(StopTimeout);
      }
      if (CreepTimeout != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CreepTimeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartStopSignScenarioDistance != 0D) {
        size += 1 + 8;
      }
      if (WatchVehicleMaxValidStopDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxValidStopDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxAdcStopSpeed != 0D) {
        size += 1 + 8;
      }
      if (StopDuration != 0F) {
        size += 1 + 4;
      }
      if (MinPassSDistance != 0D) {
        size += 1 + 8;
      }
      if (StopTimeout != 0F) {
        size += 1 + 4;
      }
      if (CreepTimeout != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioStopSignUnprotectedConfig other) {
      if (other == null) {
        return;
      }
      if (other.StartStopSignScenarioDistance != 0D) {
        StartStopSignScenarioDistance = other.StartStopSignScenarioDistance;
      }
      if (other.WatchVehicleMaxValidStopDistance != 0D) {
        WatchVehicleMaxValidStopDistance = other.WatchVehicleMaxValidStopDistance;
      }
      if (other.MaxValidStopDistance != 0D) {
        MaxValidStopDistance = other.MaxValidStopDistance;
      }
      if (other.MaxAdcStopSpeed != 0D) {
        MaxAdcStopSpeed = other.MaxAdcStopSpeed;
      }
      if (other.StopDuration != 0F) {
        StopDuration = other.StopDuration;
      }
      if (other.MinPassSDistance != 0D) {
        MinPassSDistance = other.MinPassSDistance;
      }
      if (other.StopTimeout != 0F) {
        StopTimeout = other.StopTimeout;
      }
      if (other.CreepTimeout != 0F) {
        CreepTimeout = other.CreepTimeout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            StartStopSignScenarioDistance = input.ReadDouble();
            break;
          }
          case 17: {
            WatchVehicleMaxValidStopDistance = input.ReadDouble();
            break;
          }
          case 25: {
            MaxValidStopDistance = input.ReadDouble();
            break;
          }
          case 33: {
            MaxAdcStopSpeed = input.ReadDouble();
            break;
          }
          case 45: {
            StopDuration = input.ReadFloat();
            break;
          }
          case 49: {
            MinPassSDistance = input.ReadDouble();
            break;
          }
          case 61: {
            StopTimeout = input.ReadFloat();
            break;
          }
          case 69: {
            CreepTimeout = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenarioTrafficLightProtectedConfig : pb::IMessage<ScenarioTrafficLightProtectedConfig> {
    private static readonly pb::MessageParser<ScenarioTrafficLightProtectedConfig> _parser = new pb::MessageParser<ScenarioTrafficLightProtectedConfig>(() => new ScenarioTrafficLightProtectedConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioTrafficLightProtectedConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightProtectedConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightProtectedConfig(ScenarioTrafficLightProtectedConfig other) : this() {
      maxValidStopDistance_ = other.maxValidStopDistance_;
      maxAdcStopSpeed_ = other.maxAdcStopSpeed_;
      minPassSDistance_ = other.minPassSDistance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightProtectedConfig Clone() {
      return new ScenarioTrafficLightProtectedConfig(this);
    }

    /// <summary>Field number for the "max_valid_stop_distance" field.</summary>
    public const int MaxValidStopDistanceFieldNumber = 1;
    private double maxValidStopDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxValidStopDistance {
      get { return maxValidStopDistance_; }
      set {
        maxValidStopDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_adc_stop_speed" field.</summary>
    public const int MaxAdcStopSpeedFieldNumber = 2;
    private double maxAdcStopSpeed_;
    /// <summary>
    /// m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAdcStopSpeed {
      get { return maxAdcStopSpeed_; }
      set {
        maxAdcStopSpeed_ = value;
      }
    }

    /// <summary>Field number for the "min_pass_s_distance" field.</summary>
    public const int MinPassSDistanceFieldNumber = 3;
    private double minPassSDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinPassSDistance {
      get { return minPassSDistance_; }
      set {
        minPassSDistance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioTrafficLightProtectedConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioTrafficLightProtectedConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxValidStopDistance != other.MaxValidStopDistance) return false;
      if (MaxAdcStopSpeed != other.MaxAdcStopSpeed) return false;
      if (MinPassSDistance != other.MinPassSDistance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxValidStopDistance != 0D) hash ^= MaxValidStopDistance.GetHashCode();
      if (MaxAdcStopSpeed != 0D) hash ^= MaxAdcStopSpeed.GetHashCode();
      if (MinPassSDistance != 0D) hash ^= MinPassSDistance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxValidStopDistance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxValidStopDistance);
      }
      if (MaxAdcStopSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MaxAdcStopSpeed);
      }
      if (MinPassSDistance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MinPassSDistance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxValidStopDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxAdcStopSpeed != 0D) {
        size += 1 + 8;
      }
      if (MinPassSDistance != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioTrafficLightProtectedConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxValidStopDistance != 0D) {
        MaxValidStopDistance = other.MaxValidStopDistance;
      }
      if (other.MaxAdcStopSpeed != 0D) {
        MaxAdcStopSpeed = other.MaxAdcStopSpeed;
      }
      if (other.MinPassSDistance != 0D) {
        MinPassSDistance = other.MinPassSDistance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxValidStopDistance = input.ReadDouble();
            break;
          }
          case 17: {
            MaxAdcStopSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            MinPassSDistance = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenarioTrafficLightUnprotectedLeftTurnConfig : pb::IMessage<ScenarioTrafficLightUnprotectedLeftTurnConfig> {
    private static readonly pb::MessageParser<ScenarioTrafficLightUnprotectedLeftTurnConfig> _parser = new pb::MessageParser<ScenarioTrafficLightUnprotectedLeftTurnConfig>(() => new ScenarioTrafficLightUnprotectedLeftTurnConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioTrafficLightUnprotectedLeftTurnConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightUnprotectedLeftTurnConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightUnprotectedLeftTurnConfig(ScenarioTrafficLightUnprotectedLeftTurnConfig other) : this() {
      maxValidStopDistance_ = other.maxValidStopDistance_;
      maxAdcStopSpeed_ = other.maxAdcStopSpeed_;
      minPassSDistance_ = other.minPassSDistance_;
      creepTimeout_ = other.creepTimeout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightUnprotectedLeftTurnConfig Clone() {
      return new ScenarioTrafficLightUnprotectedLeftTurnConfig(this);
    }

    /// <summary>Field number for the "max_valid_stop_distance" field.</summary>
    public const int MaxValidStopDistanceFieldNumber = 1;
    private double maxValidStopDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxValidStopDistance {
      get { return maxValidStopDistance_; }
      set {
        maxValidStopDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_adc_stop_speed" field.</summary>
    public const int MaxAdcStopSpeedFieldNumber = 2;
    private double maxAdcStopSpeed_;
    /// <summary>
    /// m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAdcStopSpeed {
      get { return maxAdcStopSpeed_; }
      set {
        maxAdcStopSpeed_ = value;
      }
    }

    /// <summary>Field number for the "min_pass_s_distance" field.</summary>
    public const int MinPassSDistanceFieldNumber = 3;
    private double minPassSDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinPassSDistance {
      get { return minPassSDistance_; }
      set {
        minPassSDistance_ = value;
      }
    }

    /// <summary>Field number for the "creep_timeout" field.</summary>
    public const int CreepTimeoutFieldNumber = 4;
    private float creepTimeout_;
    /// <summary>
    /// sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CreepTimeout {
      get { return creepTimeout_; }
      set {
        creepTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioTrafficLightUnprotectedLeftTurnConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioTrafficLightUnprotectedLeftTurnConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxValidStopDistance != other.MaxValidStopDistance) return false;
      if (MaxAdcStopSpeed != other.MaxAdcStopSpeed) return false;
      if (MinPassSDistance != other.MinPassSDistance) return false;
      if (CreepTimeout != other.CreepTimeout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxValidStopDistance != 0D) hash ^= MaxValidStopDistance.GetHashCode();
      if (MaxAdcStopSpeed != 0D) hash ^= MaxAdcStopSpeed.GetHashCode();
      if (MinPassSDistance != 0D) hash ^= MinPassSDistance.GetHashCode();
      if (CreepTimeout != 0F) hash ^= CreepTimeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxValidStopDistance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxValidStopDistance);
      }
      if (MaxAdcStopSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MaxAdcStopSpeed);
      }
      if (MinPassSDistance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MinPassSDistance);
      }
      if (CreepTimeout != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CreepTimeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxValidStopDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxAdcStopSpeed != 0D) {
        size += 1 + 8;
      }
      if (MinPassSDistance != 0D) {
        size += 1 + 8;
      }
      if (CreepTimeout != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioTrafficLightUnprotectedLeftTurnConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxValidStopDistance != 0D) {
        MaxValidStopDistance = other.MaxValidStopDistance;
      }
      if (other.MaxAdcStopSpeed != 0D) {
        MaxAdcStopSpeed = other.MaxAdcStopSpeed;
      }
      if (other.MinPassSDistance != 0D) {
        MinPassSDistance = other.MinPassSDistance;
      }
      if (other.CreepTimeout != 0F) {
        CreepTimeout = other.CreepTimeout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxValidStopDistance = input.ReadDouble();
            break;
          }
          case 17: {
            MaxAdcStopSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            MinPassSDistance = input.ReadDouble();
            break;
          }
          case 37: {
            CreepTimeout = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenarioTrafficLightUnprotectedRightTurnConfig : pb::IMessage<ScenarioTrafficLightUnprotectedRightTurnConfig> {
    private static readonly pb::MessageParser<ScenarioTrafficLightUnprotectedRightTurnConfig> _parser = new pb::MessageParser<ScenarioTrafficLightUnprotectedRightTurnConfig>(() => new ScenarioTrafficLightUnprotectedRightTurnConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioTrafficLightUnprotectedRightTurnConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightUnprotectedRightTurnConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightUnprotectedRightTurnConfig(ScenarioTrafficLightUnprotectedRightTurnConfig other) : this() {
      maxValidStopDistance_ = other.maxValidStopDistance_;
      maxAdcStopSpeed_ = other.maxAdcStopSpeed_;
      minPassSDistance_ = other.minPassSDistance_;
      redLightRightTurnStopDuration_ = other.redLightRightTurnStopDuration_;
      creepTimeout_ = other.creepTimeout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioTrafficLightUnprotectedRightTurnConfig Clone() {
      return new ScenarioTrafficLightUnprotectedRightTurnConfig(this);
    }

    /// <summary>Field number for the "max_valid_stop_distance" field.</summary>
    public const int MaxValidStopDistanceFieldNumber = 1;
    private double maxValidStopDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxValidStopDistance {
      get { return maxValidStopDistance_; }
      set {
        maxValidStopDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_adc_stop_speed" field.</summary>
    public const int MaxAdcStopSpeedFieldNumber = 2;
    private double maxAdcStopSpeed_;
    /// <summary>
    /// m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAdcStopSpeed {
      get { return maxAdcStopSpeed_; }
      set {
        maxAdcStopSpeed_ = value;
      }
    }

    /// <summary>Field number for the "min_pass_s_distance" field.</summary>
    public const int MinPassSDistanceFieldNumber = 3;
    private double minPassSDistance_;
    /// <summary>
    /// meter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinPassSDistance {
      get { return minPassSDistance_; }
      set {
        minPassSDistance_ = value;
      }
    }

    /// <summary>Field number for the "red_light_right_turn_stop_duration" field.</summary>
    public const int RedLightRightTurnStopDurationFieldNumber = 4;
    private float redLightRightTurnStopDuration_;
    /// <summary>
    /// sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RedLightRightTurnStopDuration {
      get { return redLightRightTurnStopDuration_; }
      set {
        redLightRightTurnStopDuration_ = value;
      }
    }

    /// <summary>Field number for the "creep_timeout" field.</summary>
    public const int CreepTimeoutFieldNumber = 5;
    private float creepTimeout_;
    /// <summary>
    /// sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CreepTimeout {
      get { return creepTimeout_; }
      set {
        creepTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioTrafficLightUnprotectedRightTurnConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioTrafficLightUnprotectedRightTurnConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxValidStopDistance != other.MaxValidStopDistance) return false;
      if (MaxAdcStopSpeed != other.MaxAdcStopSpeed) return false;
      if (MinPassSDistance != other.MinPassSDistance) return false;
      if (RedLightRightTurnStopDuration != other.RedLightRightTurnStopDuration) return false;
      if (CreepTimeout != other.CreepTimeout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxValidStopDistance != 0D) hash ^= MaxValidStopDistance.GetHashCode();
      if (MaxAdcStopSpeed != 0D) hash ^= MaxAdcStopSpeed.GetHashCode();
      if (MinPassSDistance != 0D) hash ^= MinPassSDistance.GetHashCode();
      if (RedLightRightTurnStopDuration != 0F) hash ^= RedLightRightTurnStopDuration.GetHashCode();
      if (CreepTimeout != 0F) hash ^= CreepTimeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxValidStopDistance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxValidStopDistance);
      }
      if (MaxAdcStopSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MaxAdcStopSpeed);
      }
      if (MinPassSDistance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MinPassSDistance);
      }
      if (RedLightRightTurnStopDuration != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RedLightRightTurnStopDuration);
      }
      if (CreepTimeout != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CreepTimeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxValidStopDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxAdcStopSpeed != 0D) {
        size += 1 + 8;
      }
      if (MinPassSDistance != 0D) {
        size += 1 + 8;
      }
      if (RedLightRightTurnStopDuration != 0F) {
        size += 1 + 4;
      }
      if (CreepTimeout != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioTrafficLightUnprotectedRightTurnConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxValidStopDistance != 0D) {
        MaxValidStopDistance = other.MaxValidStopDistance;
      }
      if (other.MaxAdcStopSpeed != 0D) {
        MaxAdcStopSpeed = other.MaxAdcStopSpeed;
      }
      if (other.MinPassSDistance != 0D) {
        MinPassSDistance = other.MinPassSDistance;
      }
      if (other.RedLightRightTurnStopDuration != 0F) {
        RedLightRightTurnStopDuration = other.RedLightRightTurnStopDuration;
      }
      if (other.CreepTimeout != 0F) {
        CreepTimeout = other.CreepTimeout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxValidStopDistance = input.ReadDouble();
            break;
          }
          case 17: {
            MaxAdcStopSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            MinPassSDistance = input.ReadDouble();
            break;
          }
          case 37: {
            RedLightRightTurnStopDuration = input.ReadFloat();
            break;
          }
          case 45: {
            CreepTimeout = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// scenario configs
  /// </summary>
  public sealed partial class ScenarioConfig : pb::IMessage<ScenarioConfig> {
    private static readonly pb::MessageParser<ScenarioConfig> _parser = new pb::MessageParser<ScenarioConfig>(() => new ScenarioConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenarioConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioConfig(ScenarioConfig other) : this() {
      scenarioType_ = other.scenarioType_;
      stageType_ = other.stageType_.Clone();
      stageConfig_ = other.stageConfig_.Clone();
      switch (other.ScenarioConfigCase) {
        case ScenarioConfigOneofCase.LaneFollowConfig:
          LaneFollowConfig = other.LaneFollowConfig.Clone();
          break;
        case ScenarioConfigOneofCase.SidePassConfig:
          SidePassConfig = other.SidePassConfig.Clone();
          break;
        case ScenarioConfigOneofCase.StopSignUnprotectedConfig:
          StopSignUnprotectedConfig = other.StopSignUnprotectedConfig.Clone();
          break;
        case ScenarioConfigOneofCase.TrafficLightProtectedConfig:
          TrafficLightProtectedConfig = other.TrafficLightProtectedConfig.Clone();
          break;
        case ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig:
          TrafficLightUnprotectedRightTurnConfig = other.TrafficLightUnprotectedRightTurnConfig.Clone();
          break;
        case ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig:
          TrafficLightUnprotectedLeftTurnConfig = other.TrafficLightUnprotectedLeftTurnConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioConfig Clone() {
      return new ScenarioConfig(this);
    }

    /// <summary>Field number for the "scenario_type" field.</summary>
    public const int ScenarioTypeFieldNumber = 1;
    private global::Apollo.Planning.ScenarioConfig.Types.ScenarioType scenarioType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioConfig.Types.ScenarioType ScenarioType {
      get { return scenarioType_; }
      set {
        scenarioType_ = value;
      }
    }

    /// <summary>Field number for the "lane_follow_config" field.</summary>
    public const int LaneFollowConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioLaneFollowConfig LaneFollowConfig {
      get { return scenarioConfigCase_ == ScenarioConfigOneofCase.LaneFollowConfig ? (global::Apollo.Planning.ScenarioLaneFollowConfig) scenarioConfig_ : null; }
      set {
        scenarioConfig_ = value;
        scenarioConfigCase_ = value == null ? ScenarioConfigOneofCase.None : ScenarioConfigOneofCase.LaneFollowConfig;
      }
    }

    /// <summary>Field number for the "side_pass_config" field.</summary>
    public const int SidePassConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioSidePassConfig SidePassConfig {
      get { return scenarioConfigCase_ == ScenarioConfigOneofCase.SidePassConfig ? (global::Apollo.Planning.ScenarioSidePassConfig) scenarioConfig_ : null; }
      set {
        scenarioConfig_ = value;
        scenarioConfigCase_ = value == null ? ScenarioConfigOneofCase.None : ScenarioConfigOneofCase.SidePassConfig;
      }
    }

    /// <summary>Field number for the "stop_sign_unprotected_config" field.</summary>
    public const int StopSignUnprotectedConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioStopSignUnprotectedConfig StopSignUnprotectedConfig {
      get { return scenarioConfigCase_ == ScenarioConfigOneofCase.StopSignUnprotectedConfig ? (global::Apollo.Planning.ScenarioStopSignUnprotectedConfig) scenarioConfig_ : null; }
      set {
        scenarioConfig_ = value;
        scenarioConfigCase_ = value == null ? ScenarioConfigOneofCase.None : ScenarioConfigOneofCase.StopSignUnprotectedConfig;
      }
    }

    /// <summary>Field number for the "traffic_light_protected_config" field.</summary>
    public const int TrafficLightProtectedConfigFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioTrafficLightProtectedConfig TrafficLightProtectedConfig {
      get { return scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightProtectedConfig ? (global::Apollo.Planning.ScenarioTrafficLightProtectedConfig) scenarioConfig_ : null; }
      set {
        scenarioConfig_ = value;
        scenarioConfigCase_ = value == null ? ScenarioConfigOneofCase.None : ScenarioConfigOneofCase.TrafficLightProtectedConfig;
      }
    }

    /// <summary>Field number for the "traffic_light_unprotected_right_turn_config" field.</summary>
    public const int TrafficLightUnprotectedRightTurnConfigFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioTrafficLightUnprotectedRightTurnConfig TrafficLightUnprotectedRightTurnConfig {
      get { return scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig ? (global::Apollo.Planning.ScenarioTrafficLightUnprotectedRightTurnConfig) scenarioConfig_ : null; }
      set {
        scenarioConfig_ = value;
        scenarioConfigCase_ = value == null ? ScenarioConfigOneofCase.None : ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig;
      }
    }

    /// <summary>Field number for the "traffic_light_unprotected_left_turn_config" field.</summary>
    public const int TrafficLightUnprotectedLeftTurnConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ScenarioTrafficLightUnprotectedLeftTurnConfig TrafficLightUnprotectedLeftTurnConfig {
      get { return scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig ? (global::Apollo.Planning.ScenarioTrafficLightUnprotectedLeftTurnConfig) scenarioConfig_ : null; }
      set {
        scenarioConfig_ = value;
        scenarioConfigCase_ = value == null ? ScenarioConfigOneofCase.None : ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig;
      }
    }

    /// <summary>Field number for the "stage_type" field.</summary>
    public const int StageTypeFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Apollo.Planning.ScenarioConfig.Types.StageType> _repeated_stageType_codec
        = pb::FieldCodec.ForEnum(66, x => (int) x, x => (global::Apollo.Planning.ScenarioConfig.Types.StageType) x);
    private readonly pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.StageType> stageType_ = new pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.StageType>();
    /// <summary>
    /// a list of stages that are used at runtime.  The first one is default stage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.StageType> StageType {
      get { return stageType_; }
    }

    /// <summary>Field number for the "stage_config" field.</summary>
    public const int StageConfigFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Apollo.Planning.ScenarioConfig.Types.StageConfig> _repeated_stageConfig_codec
        = pb::FieldCodec.ForMessage(74, global::Apollo.Planning.ScenarioConfig.Types.StageConfig.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.StageConfig> stageConfig_ = new pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.StageConfig>();
    /// <summary>
    /// an unordered list of stage configs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.StageConfig> StageConfig {
      get { return stageConfig_; }
    }

    private object scenarioConfig_;
    /// <summary>Enum of possible cases for the "scenario_config" oneof.</summary>
    public enum ScenarioConfigOneofCase {
      None = 0,
      LaneFollowConfig = 2,
      SidePassConfig = 3,
      StopSignUnprotectedConfig = 4,
      TrafficLightProtectedConfig = 5,
      TrafficLightUnprotectedRightTurnConfig = 6,
      TrafficLightUnprotectedLeftTurnConfig = 7,
    }
    private ScenarioConfigOneofCase scenarioConfigCase_ = ScenarioConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenarioConfigOneofCase ScenarioConfigCase {
      get { return scenarioConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScenarioConfig() {
      scenarioConfigCase_ = ScenarioConfigOneofCase.None;
      scenarioConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenarioConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenarioConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScenarioType != other.ScenarioType) return false;
      if (!object.Equals(LaneFollowConfig, other.LaneFollowConfig)) return false;
      if (!object.Equals(SidePassConfig, other.SidePassConfig)) return false;
      if (!object.Equals(StopSignUnprotectedConfig, other.StopSignUnprotectedConfig)) return false;
      if (!object.Equals(TrafficLightProtectedConfig, other.TrafficLightProtectedConfig)) return false;
      if (!object.Equals(TrafficLightUnprotectedRightTurnConfig, other.TrafficLightUnprotectedRightTurnConfig)) return false;
      if (!object.Equals(TrafficLightUnprotectedLeftTurnConfig, other.TrafficLightUnprotectedLeftTurnConfig)) return false;
      if(!stageType_.Equals(other.stageType_)) return false;
      if(!stageConfig_.Equals(other.stageConfig_)) return false;
      if (ScenarioConfigCase != other.ScenarioConfigCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScenarioType != 0) hash ^= ScenarioType.GetHashCode();
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.LaneFollowConfig) hash ^= LaneFollowConfig.GetHashCode();
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.SidePassConfig) hash ^= SidePassConfig.GetHashCode();
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.StopSignUnprotectedConfig) hash ^= StopSignUnprotectedConfig.GetHashCode();
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightProtectedConfig) hash ^= TrafficLightProtectedConfig.GetHashCode();
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig) hash ^= TrafficLightUnprotectedRightTurnConfig.GetHashCode();
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig) hash ^= TrafficLightUnprotectedLeftTurnConfig.GetHashCode();
      hash ^= stageType_.GetHashCode();
      hash ^= stageConfig_.GetHashCode();
      hash ^= (int) scenarioConfigCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScenarioType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ScenarioType);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.LaneFollowConfig) {
        output.WriteRawTag(18);
        output.WriteMessage(LaneFollowConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.SidePassConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(SidePassConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.StopSignUnprotectedConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(StopSignUnprotectedConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightProtectedConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(TrafficLightProtectedConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig) {
        output.WriteRawTag(50);
        output.WriteMessage(TrafficLightUnprotectedRightTurnConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(TrafficLightUnprotectedLeftTurnConfig);
      }
      stageType_.WriteTo(output, _repeated_stageType_codec);
      stageConfig_.WriteTo(output, _repeated_stageConfig_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScenarioType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScenarioType);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.LaneFollowConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneFollowConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.SidePassConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SidePassConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.StopSignUnprotectedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopSignUnprotectedConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightProtectedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrafficLightProtectedConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrafficLightUnprotectedRightTurnConfig);
      }
      if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrafficLightUnprotectedLeftTurnConfig);
      }
      size += stageType_.CalculateSize(_repeated_stageType_codec);
      size += stageConfig_.CalculateSize(_repeated_stageConfig_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenarioConfig other) {
      if (other == null) {
        return;
      }
      if (other.ScenarioType != 0) {
        ScenarioType = other.ScenarioType;
      }
      stageType_.Add(other.stageType_);
      stageConfig_.Add(other.stageConfig_);
      switch (other.ScenarioConfigCase) {
        case ScenarioConfigOneofCase.LaneFollowConfig:
          LaneFollowConfig = other.LaneFollowConfig;
          break;
        case ScenarioConfigOneofCase.SidePassConfig:
          SidePassConfig = other.SidePassConfig;
          break;
        case ScenarioConfigOneofCase.StopSignUnprotectedConfig:
          StopSignUnprotectedConfig = other.StopSignUnprotectedConfig;
          break;
        case ScenarioConfigOneofCase.TrafficLightProtectedConfig:
          TrafficLightProtectedConfig = other.TrafficLightProtectedConfig;
          break;
        case ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig:
          TrafficLightUnprotectedRightTurnConfig = other.TrafficLightUnprotectedRightTurnConfig;
          break;
        case ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig:
          TrafficLightUnprotectedLeftTurnConfig = other.TrafficLightUnprotectedLeftTurnConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            scenarioType_ = (global::Apollo.Planning.ScenarioConfig.Types.ScenarioType) input.ReadEnum();
            break;
          }
          case 18: {
            global::Apollo.Planning.ScenarioLaneFollowConfig subBuilder = new global::Apollo.Planning.ScenarioLaneFollowConfig();
            if (scenarioConfigCase_ == ScenarioConfigOneofCase.LaneFollowConfig) {
              subBuilder.MergeFrom(LaneFollowConfig);
            }
            input.ReadMessage(subBuilder);
            LaneFollowConfig = subBuilder;
            break;
          }
          case 26: {
            global::Apollo.Planning.ScenarioSidePassConfig subBuilder = new global::Apollo.Planning.ScenarioSidePassConfig();
            if (scenarioConfigCase_ == ScenarioConfigOneofCase.SidePassConfig) {
              subBuilder.MergeFrom(SidePassConfig);
            }
            input.ReadMessage(subBuilder);
            SidePassConfig = subBuilder;
            break;
          }
          case 34: {
            global::Apollo.Planning.ScenarioStopSignUnprotectedConfig subBuilder = new global::Apollo.Planning.ScenarioStopSignUnprotectedConfig();
            if (scenarioConfigCase_ == ScenarioConfigOneofCase.StopSignUnprotectedConfig) {
              subBuilder.MergeFrom(StopSignUnprotectedConfig);
            }
            input.ReadMessage(subBuilder);
            StopSignUnprotectedConfig = subBuilder;
            break;
          }
          case 42: {
            global::Apollo.Planning.ScenarioTrafficLightProtectedConfig subBuilder = new global::Apollo.Planning.ScenarioTrafficLightProtectedConfig();
            if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightProtectedConfig) {
              subBuilder.MergeFrom(TrafficLightProtectedConfig);
            }
            input.ReadMessage(subBuilder);
            TrafficLightProtectedConfig = subBuilder;
            break;
          }
          case 50: {
            global::Apollo.Planning.ScenarioTrafficLightUnprotectedRightTurnConfig subBuilder = new global::Apollo.Planning.ScenarioTrafficLightUnprotectedRightTurnConfig();
            if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedRightTurnConfig) {
              subBuilder.MergeFrom(TrafficLightUnprotectedRightTurnConfig);
            }
            input.ReadMessage(subBuilder);
            TrafficLightUnprotectedRightTurnConfig = subBuilder;
            break;
          }
          case 58: {
            global::Apollo.Planning.ScenarioTrafficLightUnprotectedLeftTurnConfig subBuilder = new global::Apollo.Planning.ScenarioTrafficLightUnprotectedLeftTurnConfig();
            if (scenarioConfigCase_ == ScenarioConfigOneofCase.TrafficLightUnprotectedLeftTurnConfig) {
              subBuilder.MergeFrom(TrafficLightUnprotectedLeftTurnConfig);
            }
            input.ReadMessage(subBuilder);
            TrafficLightUnprotectedLeftTurnConfig = subBuilder;
            break;
          }
          case 66:
          case 64: {
            stageType_.AddEntriesFrom(input, _repeated_stageType_codec);
            break;
          }
          case 74: {
            stageConfig_.AddEntriesFrom(input, _repeated_stageConfig_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScenarioConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ScenarioType {
        /// <summary>
        /// default scenario
        /// </summary>
        [pbr::OriginalName("LANE_FOLLOW")] LaneFollow = 0,
        [pbr::OriginalName("CHANGE_LANE")] ChangeLane = 1,
        /// <summary>
        /// go around an object when it blocks the road
        /// </summary>
        [pbr::OriginalName("SIDE_PASS")] SidePass = 2,
        /// <summary>
        /// approach to an intersection
        /// </summary>
        [pbr::OriginalName("APPROACH")] Approach = 3,
        [pbr::OriginalName("STOP_SIGN_PROTECTED")] StopSignProtected = 4,
        [pbr::OriginalName("STOP_SIGN_UNPROTECTED")] StopSignUnprotected = 5,
        [pbr::OriginalName("TRAFFIC_LIGHT_PROTECTED")] TrafficLightProtected = 6,
        [pbr::OriginalName("TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN")] TrafficLightUnprotectedLeftTurn = 7,
        [pbr::OriginalName("TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN")] TrafficLightUnprotectedRightTurn = 8,
      }

      /// <summary>
      /// StageType is a superset of stages from all scenarios.
      /// It is created to keep different scenarios have uniform config interface
      /// </summary>
      public enum StageType {
        [pbr::OriginalName("NO_STAGE")] NoStage = 0,
        [pbr::OriginalName("LANE_FOLLOW_DEFAULT_STAGE")] LaneFollowDefaultStage = 1,
        [pbr::OriginalName("STOP_SIGN_UNPROTECTED_PRE_STOP")] StopSignUnprotectedPreStop = 100,
        [pbr::OriginalName("STOP_SIGN_UNPROTECTED_STOP")] StopSignUnprotectedStop = 101,
        [pbr::OriginalName("STOP_SIGN_UNPROTECTED_CREEP")] StopSignUnprotectedCreep = 102,
        [pbr::OriginalName("STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE")] StopSignUnprotectedIntersectionCruise = 103,
        [pbr::OriginalName("SIDE_PASS_APPROACH_OBSTACLE")] SidePassApproachObstacle = 200,
        [pbr::OriginalName("SIDE_PASS_GENERATE_PATH")] SidePassGeneratePath = 201,
        [pbr::OriginalName("SIDE_PASS_STOP_ON_WAITPOINT")] SidePassStopOnWaitpoint = 202,
        [pbr::OriginalName("SIDE_PASS_DETECT_SAFETY")] SidePassDetectSafety = 203,
        [pbr::OriginalName("SIDE_PASS_PASS_OBSTACLE")] SidePassPassObstacle = 204,
        [pbr::OriginalName("SIDE_PASS_BACKUP")] SidePassBackup = 205,
        [pbr::OriginalName("TRAFFIC_LIGHT_PROTECTED_STOP")] TrafficLightProtectedStop = 300,
        [pbr::OriginalName("TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE")] TrafficLightProtectedIntersectionCruise = 301,
        [pbr::OriginalName("TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP")] TrafficLightUnprotectedLeftTurnCreep = 310,
        [pbr::OriginalName("TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE")] TrafficLightUnprotectedLeftTurnIntersectionCruise = 311,
        [pbr::OriginalName("TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP")] TrafficLightUnprotectedRightTurnStop = 320,
        [pbr::OriginalName("TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP")] TrafficLightUnprotectedRightTurnCreep = 321,
        [pbr::OriginalName("TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE")] TrafficLightUnprotectedRightTurnIntersectionCruise = 322,
      }

      public sealed partial class StageConfig : pb::IMessage<StageConfig> {
        private static readonly pb::MessageParser<StageConfig> _parser = new pb::MessageParser<StageConfig>(() => new StageConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StageConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.ScenarioConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StageConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StageConfig(StageConfig other) : this() {
          stageType_ = other.stageType_;
          enabled_ = other.enabled_;
          taskType_ = other.taskType_.Clone();
          taskConfig_ = other.taskConfig_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StageConfig Clone() {
          return new StageConfig(this);
        }

        /// <summary>Field number for the "stage_type" field.</summary>
        public const int StageTypeFieldNumber = 1;
        private global::Apollo.Planning.ScenarioConfig.Types.StageType stageType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Apollo.Planning.ScenarioConfig.Types.StageType StageType {
          get { return stageType_; }
          set {
            stageType_ = value;
          }
        }

        /// <summary>Field number for the "enabled" field.</summary>
        public const int EnabledFieldNumber = 2;
        private bool enabled_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Enabled {
          get { return enabled_; }
          set {
            enabled_ = value;
          }
        }

        /// <summary>Field number for the "task_type" field.</summary>
        public const int TaskTypeFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Apollo.Planning.TaskConfig.Types.TaskType> _repeated_taskType_codec
            = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Apollo.Planning.TaskConfig.Types.TaskType) x);
        private readonly pbc::RepeatedField<global::Apollo.Planning.TaskConfig.Types.TaskType> taskType_ = new pbc::RepeatedField<global::Apollo.Planning.TaskConfig.Types.TaskType>();
        /// <summary>
        /// an ordered list of tasks that are used at runtime. Its order determines the runtime order of the tasks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Apollo.Planning.TaskConfig.Types.TaskType> TaskType {
          get { return taskType_; }
        }

        /// <summary>Field number for the "task_config" field.</summary>
        public const int TaskConfigFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Apollo.Planning.TaskConfig> _repeated_taskConfig_codec
            = pb::FieldCodec.ForMessage(34, global::Apollo.Planning.TaskConfig.Parser);
        private readonly pbc::RepeatedField<global::Apollo.Planning.TaskConfig> taskConfig_ = new pbc::RepeatedField<global::Apollo.Planning.TaskConfig>();
        /// <summary>
        /// an unordered task configurations
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Apollo.Planning.TaskConfig> TaskConfig {
          get { return taskConfig_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StageConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StageConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StageType != other.StageType) return false;
          if (Enabled != other.Enabled) return false;
          if(!taskType_.Equals(other.taskType_)) return false;
          if(!taskConfig_.Equals(other.taskConfig_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StageType != 0) hash ^= StageType.GetHashCode();
          if (Enabled != false) hash ^= Enabled.GetHashCode();
          hash ^= taskType_.GetHashCode();
          hash ^= taskConfig_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StageType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) StageType);
          }
          if (Enabled != false) {
            output.WriteRawTag(16);
            output.WriteBool(Enabled);
          }
          taskType_.WriteTo(output, _repeated_taskType_codec);
          taskConfig_.WriteTo(output, _repeated_taskConfig_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StageType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StageType);
          }
          if (Enabled != false) {
            size += 1 + 1;
          }
          size += taskType_.CalculateSize(_repeated_taskType_codec);
          size += taskConfig_.CalculateSize(_repeated_taskConfig_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StageConfig other) {
          if (other == null) {
            return;
          }
          if (other.StageType != 0) {
            StageType = other.StageType;
          }
          if (other.Enabled != false) {
            Enabled = other.Enabled;
          }
          taskType_.Add(other.taskType_);
          taskConfig_.Add(other.taskConfig_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                stageType_ = (global::Apollo.Planning.ScenarioConfig.Types.StageType) input.ReadEnum();
                break;
              }
              case 16: {
                Enabled = input.ReadBool();
                break;
              }
              case 26:
              case 24: {
                taskType_.AddEntriesFrom(input, _repeated_taskType_codec);
                break;
              }
              case 34: {
                taskConfig_.AddEntriesFrom(input, _repeated_taskConfig_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PlannerPublicRoadConfig : pb::IMessage<PlannerPublicRoadConfig> {
    private static readonly pb::MessageParser<PlannerPublicRoadConfig> _parser = new pb::MessageParser<PlannerPublicRoadConfig>(() => new PlannerPublicRoadConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlannerPublicRoadConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerPublicRoadConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerPublicRoadConfig(PlannerPublicRoadConfig other) : this() {
      scenarioType_ = other.scenarioType_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerPublicRoadConfig Clone() {
      return new PlannerPublicRoadConfig(this);
    }

    /// <summary>Field number for the "scenario_type" field.</summary>
    public const int ScenarioTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.ScenarioConfig.Types.ScenarioType> _repeated_scenarioType_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Apollo.Planning.ScenarioConfig.Types.ScenarioType) x);
    private readonly pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.ScenarioType> scenarioType_ = new pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.ScenarioType>();
    /// <summary>
    /// supported scenario types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.ScenarioConfig.Types.ScenarioType> ScenarioType {
      get { return scenarioType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlannerPublicRoadConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlannerPublicRoadConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scenarioType_.Equals(other.scenarioType_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scenarioType_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scenarioType_.WriteTo(output, _repeated_scenarioType_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scenarioType_.CalculateSize(_repeated_scenarioType_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlannerPublicRoadConfig other) {
      if (other == null) {
        return;
      }
      scenarioType_.Add(other.scenarioType_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            scenarioType_.AddEntriesFrom(input, _repeated_scenarioType_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlannerNaviConfig : pb::IMessage<PlannerNaviConfig> {
    private static readonly pb::MessageParser<PlannerNaviConfig> _parser = new pb::MessageParser<PlannerNaviConfig>(() => new PlannerNaviConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlannerNaviConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerNaviConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerNaviConfig(PlannerNaviConfig other) : this() {
      task_ = other.task_.Clone();
      NaviPathDeciderConfig = other.naviPathDeciderConfig_ != null ? other.NaviPathDeciderConfig.Clone() : null;
      NaviSpeedDeciderConfig = other.naviSpeedDeciderConfig_ != null ? other.NaviSpeedDeciderConfig.Clone() : null;
      NaviObstacleDeciderConfig = other.naviObstacleDeciderConfig_ != null ? other.NaviObstacleDeciderConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlannerNaviConfig Clone() {
      return new PlannerNaviConfig(this);
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.TaskConfig.Types.TaskType> _repeated_task_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Apollo.Planning.TaskConfig.Types.TaskType) x);
    private readonly pbc::RepeatedField<global::Apollo.Planning.TaskConfig.Types.TaskType> task_ = new pbc::RepeatedField<global::Apollo.Planning.TaskConfig.Types.TaskType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.TaskConfig.Types.TaskType> Task {
      get { return task_; }
    }

    /// <summary>Field number for the "navi_path_decider_config" field.</summary>
    public const int NaviPathDeciderConfigFieldNumber = 2;
    private global::Apollo.Planning.NaviPathDeciderConfig naviPathDeciderConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.NaviPathDeciderConfig NaviPathDeciderConfig {
      get { return naviPathDeciderConfig_; }
      set {
        naviPathDeciderConfig_ = value;
      }
    }

    /// <summary>Field number for the "navi_speed_decider_config" field.</summary>
    public const int NaviSpeedDeciderConfigFieldNumber = 3;
    private global::Apollo.Planning.NaviSpeedDeciderConfig naviSpeedDeciderConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.NaviSpeedDeciderConfig NaviSpeedDeciderConfig {
      get { return naviSpeedDeciderConfig_; }
      set {
        naviSpeedDeciderConfig_ = value;
      }
    }

    /// <summary>Field number for the "navi_obstacle_decider_config" field.</summary>
    public const int NaviObstacleDeciderConfigFieldNumber = 4;
    private global::Apollo.Planning.NaviObstacleDeciderConfig naviObstacleDeciderConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.NaviObstacleDeciderConfig NaviObstacleDeciderConfig {
      get { return naviObstacleDeciderConfig_; }
      set {
        naviObstacleDeciderConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlannerNaviConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlannerNaviConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!task_.Equals(other.task_)) return false;
      if (!object.Equals(NaviPathDeciderConfig, other.NaviPathDeciderConfig)) return false;
      if (!object.Equals(NaviSpeedDeciderConfig, other.NaviSpeedDeciderConfig)) return false;
      if (!object.Equals(NaviObstacleDeciderConfig, other.NaviObstacleDeciderConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= task_.GetHashCode();
      if (naviPathDeciderConfig_ != null) hash ^= NaviPathDeciderConfig.GetHashCode();
      if (naviSpeedDeciderConfig_ != null) hash ^= NaviSpeedDeciderConfig.GetHashCode();
      if (naviObstacleDeciderConfig_ != null) hash ^= NaviObstacleDeciderConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      task_.WriteTo(output, _repeated_task_codec);
      if (naviPathDeciderConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NaviPathDeciderConfig);
      }
      if (naviSpeedDeciderConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NaviSpeedDeciderConfig);
      }
      if (naviObstacleDeciderConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NaviObstacleDeciderConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += task_.CalculateSize(_repeated_task_codec);
      if (naviPathDeciderConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NaviPathDeciderConfig);
      }
      if (naviSpeedDeciderConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NaviSpeedDeciderConfig);
      }
      if (naviObstacleDeciderConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NaviObstacleDeciderConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlannerNaviConfig other) {
      if (other == null) {
        return;
      }
      task_.Add(other.task_);
      if (other.naviPathDeciderConfig_ != null) {
        if (naviPathDeciderConfig_ == null) {
          naviPathDeciderConfig_ = new global::Apollo.Planning.NaviPathDeciderConfig();
        }
        NaviPathDeciderConfig.MergeFrom(other.NaviPathDeciderConfig);
      }
      if (other.naviSpeedDeciderConfig_ != null) {
        if (naviSpeedDeciderConfig_ == null) {
          naviSpeedDeciderConfig_ = new global::Apollo.Planning.NaviSpeedDeciderConfig();
        }
        NaviSpeedDeciderConfig.MergeFrom(other.NaviSpeedDeciderConfig);
      }
      if (other.naviObstacleDeciderConfig_ != null) {
        if (naviObstacleDeciderConfig_ == null) {
          naviObstacleDeciderConfig_ = new global::Apollo.Planning.NaviObstacleDeciderConfig();
        }
        NaviObstacleDeciderConfig.MergeFrom(other.NaviObstacleDeciderConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            task_.AddEntriesFrom(input, _repeated_task_codec);
            break;
          }
          case 18: {
            if (naviPathDeciderConfig_ == null) {
              naviPathDeciderConfig_ = new global::Apollo.Planning.NaviPathDeciderConfig();
            }
            input.ReadMessage(naviPathDeciderConfig_);
            break;
          }
          case 26: {
            if (naviSpeedDeciderConfig_ == null) {
              naviSpeedDeciderConfig_ = new global::Apollo.Planning.NaviSpeedDeciderConfig();
            }
            input.ReadMessage(naviSpeedDeciderConfig_);
            break;
          }
          case 34: {
            if (naviObstacleDeciderConfig_ == null) {
              naviObstacleDeciderConfig_ = new global::Apollo.Planning.NaviObstacleDeciderConfig();
            }
            input.ReadMessage(naviObstacleDeciderConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RtkPlanningConfig : pb::IMessage<RtkPlanningConfig> {
    private static readonly pb::MessageParser<RtkPlanningConfig> _parser = new pb::MessageParser<RtkPlanningConfig>(() => new RtkPlanningConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RtkPlanningConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RtkPlanningConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RtkPlanningConfig(RtkPlanningConfig other) : this() {
      plannerType_ = other.plannerType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RtkPlanningConfig Clone() {
      return new RtkPlanningConfig(this);
    }

    /// <summary>Field number for the "planner_type" field.</summary>
    public const int PlannerTypeFieldNumber = 1;
    private global::Apollo.Planning.PlannerType plannerType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PlannerType PlannerType {
      get { return plannerType_; }
      set {
        plannerType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RtkPlanningConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RtkPlanningConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlannerType != other.PlannerType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlannerType != 0) hash ^= PlannerType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlannerType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlannerType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlannerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlannerType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RtkPlanningConfig other) {
      if (other == null) {
        return;
      }
      if (other.PlannerType != 0) {
        PlannerType = other.PlannerType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            plannerType_ = (global::Apollo.Planning.PlannerType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StandardPlanningConfig : pb::IMessage<StandardPlanningConfig> {
    private static readonly pb::MessageParser<StandardPlanningConfig> _parser = new pb::MessageParser<StandardPlanningConfig>(() => new StandardPlanningConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardPlanningConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardPlanningConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardPlanningConfig(StandardPlanningConfig other) : this() {
      plannerType_ = other.plannerType_.Clone();
      PlannerPublicRoadConfig = other.plannerPublicRoadConfig_ != null ? other.PlannerPublicRoadConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardPlanningConfig Clone() {
      return new StandardPlanningConfig(this);
    }

    /// <summary>Field number for the "planner_type" field.</summary>
    public const int PlannerTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.PlannerType> _repeated_plannerType_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Apollo.Planning.PlannerType) x);
    private readonly pbc::RepeatedField<global::Apollo.Planning.PlannerType> plannerType_ = new pbc::RepeatedField<global::Apollo.Planning.PlannerType>();
    /// <summary>
    /// supported planners
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.PlannerType> PlannerType {
      get { return plannerType_; }
    }

    /// <summary>Field number for the "planner_public_road_config" field.</summary>
    public const int PlannerPublicRoadConfigFieldNumber = 2;
    private global::Apollo.Planning.PlannerPublicRoadConfig plannerPublicRoadConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PlannerPublicRoadConfig PlannerPublicRoadConfig {
      get { return plannerPublicRoadConfig_; }
      set {
        plannerPublicRoadConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandardPlanningConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandardPlanningConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plannerType_.Equals(other.plannerType_)) return false;
      if (!object.Equals(PlannerPublicRoadConfig, other.PlannerPublicRoadConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plannerType_.GetHashCode();
      if (plannerPublicRoadConfig_ != null) hash ^= PlannerPublicRoadConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plannerType_.WriteTo(output, _repeated_plannerType_codec);
      if (plannerPublicRoadConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlannerPublicRoadConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plannerType_.CalculateSize(_repeated_plannerType_codec);
      if (plannerPublicRoadConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlannerPublicRoadConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandardPlanningConfig other) {
      if (other == null) {
        return;
      }
      plannerType_.Add(other.plannerType_);
      if (other.plannerPublicRoadConfig_ != null) {
        if (plannerPublicRoadConfig_ == null) {
          plannerPublicRoadConfig_ = new global::Apollo.Planning.PlannerPublicRoadConfig();
        }
        PlannerPublicRoadConfig.MergeFrom(other.PlannerPublicRoadConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            plannerType_.AddEntriesFrom(input, _repeated_plannerType_codec);
            break;
          }
          case 18: {
            if (plannerPublicRoadConfig_ == null) {
              plannerPublicRoadConfig_ = new global::Apollo.Planning.PlannerPublicRoadConfig();
            }
            input.ReadMessage(plannerPublicRoadConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavigationPlanningConfig : pb::IMessage<NavigationPlanningConfig> {
    private static readonly pb::MessageParser<NavigationPlanningConfig> _parser = new pb::MessageParser<NavigationPlanningConfig>(() => new NavigationPlanningConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavigationPlanningConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationPlanningConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationPlanningConfig(NavigationPlanningConfig other) : this() {
      plannerType_ = other.plannerType_.Clone();
      PlannerNaviConfig = other.plannerNaviConfig_ != null ? other.PlannerNaviConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavigationPlanningConfig Clone() {
      return new NavigationPlanningConfig(this);
    }

    /// <summary>Field number for the "planner_type" field.</summary>
    public const int PlannerTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.PlannerType> _repeated_plannerType_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Apollo.Planning.PlannerType) x);
    private readonly pbc::RepeatedField<global::Apollo.Planning.PlannerType> plannerType_ = new pbc::RepeatedField<global::Apollo.Planning.PlannerType>();
    /// <summary>
    /// supported planners
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.PlannerType> PlannerType {
      get { return plannerType_; }
    }

    /// <summary>Field number for the "planner_navi_config" field.</summary>
    public const int PlannerNaviConfigFieldNumber = 4;
    private global::Apollo.Planning.PlannerNaviConfig plannerNaviConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PlannerNaviConfig PlannerNaviConfig {
      get { return plannerNaviConfig_; }
      set {
        plannerNaviConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavigationPlanningConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavigationPlanningConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plannerType_.Equals(other.plannerType_)) return false;
      if (!object.Equals(PlannerNaviConfig, other.PlannerNaviConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plannerType_.GetHashCode();
      if (plannerNaviConfig_ != null) hash ^= PlannerNaviConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plannerType_.WriteTo(output, _repeated_plannerType_codec);
      if (plannerNaviConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlannerNaviConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plannerType_.CalculateSize(_repeated_plannerType_codec);
      if (plannerNaviConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlannerNaviConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavigationPlanningConfig other) {
      if (other == null) {
        return;
      }
      plannerType_.Add(other.plannerType_);
      if (other.plannerNaviConfig_ != null) {
        if (plannerNaviConfig_ == null) {
          plannerNaviConfig_ = new global::Apollo.Planning.PlannerNaviConfig();
        }
        PlannerNaviConfig.MergeFrom(other.PlannerNaviConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            plannerType_.AddEntriesFrom(input, _repeated_plannerType_codec);
            break;
          }
          case 34: {
            if (plannerNaviConfig_ == null) {
              plannerNaviConfig_ = new global::Apollo.Planning.PlannerNaviConfig();
            }
            input.ReadMessage(plannerNaviConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenSpacePlanningConfig : pb::IMessage<OpenSpacePlanningConfig> {
    private static readonly pb::MessageParser<OpenSpacePlanningConfig> _parser = new pb::MessageParser<OpenSpacePlanningConfig>(() => new OpenSpacePlanningConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenSpacePlanningConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSpacePlanningConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSpacePlanningConfig(OpenSpacePlanningConfig other) : this() {
      plannerType_ = other.plannerType_.Clone();
      PlannerOpenSpaceConfig = other.plannerOpenSpaceConfig_ != null ? other.PlannerOpenSpaceConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenSpacePlanningConfig Clone() {
      return new OpenSpacePlanningConfig(this);
    }

    /// <summary>Field number for the "planner_type" field.</summary>
    public const int PlannerTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.PlannerType> _repeated_plannerType_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Apollo.Planning.PlannerType) x);
    private readonly pbc::RepeatedField<global::Apollo.Planning.PlannerType> plannerType_ = new pbc::RepeatedField<global::Apollo.Planning.PlannerType>();
    /// <summary>
    /// supported planners
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.PlannerType> PlannerType {
      get { return plannerType_; }
    }

    /// <summary>Field number for the "planner_open_space_config" field.</summary>
    public const int PlannerOpenSpaceConfigFieldNumber = 2;
    private global::Apollo.Planning.PlannerOpenSpaceConfig plannerOpenSpaceConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.PlannerOpenSpaceConfig PlannerOpenSpaceConfig {
      get { return plannerOpenSpaceConfig_; }
      set {
        plannerOpenSpaceConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenSpacePlanningConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenSpacePlanningConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plannerType_.Equals(other.plannerType_)) return false;
      if (!object.Equals(PlannerOpenSpaceConfig, other.PlannerOpenSpaceConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plannerType_.GetHashCode();
      if (plannerOpenSpaceConfig_ != null) hash ^= PlannerOpenSpaceConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plannerType_.WriteTo(output, _repeated_plannerType_codec);
      if (plannerOpenSpaceConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlannerOpenSpaceConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plannerType_.CalculateSize(_repeated_plannerType_codec);
      if (plannerOpenSpaceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlannerOpenSpaceConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenSpacePlanningConfig other) {
      if (other == null) {
        return;
      }
      plannerType_.Add(other.plannerType_);
      if (other.plannerOpenSpaceConfig_ != null) {
        if (plannerOpenSpaceConfig_ == null) {
          plannerOpenSpaceConfig_ = new global::Apollo.Planning.PlannerOpenSpaceConfig();
        }
        PlannerOpenSpaceConfig.MergeFrom(other.PlannerOpenSpaceConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            plannerType_.AddEntriesFrom(input, _repeated_plannerType_codec);
            break;
          }
          case 18: {
            if (plannerOpenSpaceConfig_ == null) {
              plannerOpenSpaceConfig_ = new global::Apollo.Planning.PlannerOpenSpaceConfig();
            }
            input.ReadMessage(plannerOpenSpaceConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlanningConfig : pb::IMessage<PlanningConfig> {
    private static readonly pb::MessageParser<PlanningConfig> _parser = new pb::MessageParser<PlanningConfig>(() => new PlanningConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanningConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningConfigReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningConfig(PlanningConfig other) : this() {
      defaultTaskConfig_ = other.defaultTaskConfig_.Clone();
      switch (other.PlanningConfigCase) {
        case PlanningConfigOneofCase.RtkPlanningConfig:
          RtkPlanningConfig = other.RtkPlanningConfig.Clone();
          break;
        case PlanningConfigOneofCase.StandardPlanningConfig:
          StandardPlanningConfig = other.StandardPlanningConfig.Clone();
          break;
        case PlanningConfigOneofCase.NavigationPlanningConfig:
          NavigationPlanningConfig = other.NavigationPlanningConfig.Clone();
          break;
        case PlanningConfigOneofCase.OpenSpacePlanningConfig:
          OpenSpacePlanningConfig = other.OpenSpacePlanningConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningConfig Clone() {
      return new PlanningConfig(this);
    }

    /// <summary>Field number for the "rtk_planning_config" field.</summary>
    public const int RtkPlanningConfigFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.RtkPlanningConfig RtkPlanningConfig {
      get { return planningConfigCase_ == PlanningConfigOneofCase.RtkPlanningConfig ? (global::Apollo.Planning.RtkPlanningConfig) planningConfig_ : null; }
      set {
        planningConfig_ = value;
        planningConfigCase_ = value == null ? PlanningConfigOneofCase.None : PlanningConfigOneofCase.RtkPlanningConfig;
      }
    }

    /// <summary>Field number for the "standard_planning_config" field.</summary>
    public const int StandardPlanningConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StandardPlanningConfig StandardPlanningConfig {
      get { return planningConfigCase_ == PlanningConfigOneofCase.StandardPlanningConfig ? (global::Apollo.Planning.StandardPlanningConfig) planningConfig_ : null; }
      set {
        planningConfig_ = value;
        planningConfigCase_ = value == null ? PlanningConfigOneofCase.None : PlanningConfigOneofCase.StandardPlanningConfig;
      }
    }

    /// <summary>Field number for the "navigation_planning_config" field.</summary>
    public const int NavigationPlanningConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.NavigationPlanningConfig NavigationPlanningConfig {
      get { return planningConfigCase_ == PlanningConfigOneofCase.NavigationPlanningConfig ? (global::Apollo.Planning.NavigationPlanningConfig) planningConfig_ : null; }
      set {
        planningConfig_ = value;
        planningConfigCase_ = value == null ? PlanningConfigOneofCase.None : PlanningConfigOneofCase.NavigationPlanningConfig;
      }
    }

    /// <summary>Field number for the "open_space_planning_config" field.</summary>
    public const int OpenSpacePlanningConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.OpenSpacePlanningConfig OpenSpacePlanningConfig {
      get { return planningConfigCase_ == PlanningConfigOneofCase.OpenSpacePlanningConfig ? (global::Apollo.Planning.OpenSpacePlanningConfig) planningConfig_ : null; }
      set {
        planningConfig_ = value;
        planningConfigCase_ = value == null ? PlanningConfigOneofCase.None : PlanningConfigOneofCase.OpenSpacePlanningConfig;
      }
    }

    /// <summary>Field number for the "default_task_config" field.</summary>
    public const int DefaultTaskConfigFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Apollo.Planning.TaskConfig> _repeated_defaultTaskConfig_codec
        = pb::FieldCodec.ForMessage(42, global::Apollo.Planning.TaskConfig.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.TaskConfig> defaultTaskConfig_ = new pbc::RepeatedField<global::Apollo.Planning.TaskConfig>();
    /// <summary>
    /// default task config, it will be used if there is no scenario-specific
    /// task config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.TaskConfig> DefaultTaskConfig {
      get { return defaultTaskConfig_; }
    }

    private object planningConfig_;
    /// <summary>Enum of possible cases for the "planning_config" oneof.</summary>
    public enum PlanningConfigOneofCase {
      None = 0,
      RtkPlanningConfig = 1,
      StandardPlanningConfig = 2,
      NavigationPlanningConfig = 3,
      OpenSpacePlanningConfig = 4,
    }
    private PlanningConfigOneofCase planningConfigCase_ = PlanningConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanningConfigOneofCase PlanningConfigCase {
      get { return planningConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlanningConfig() {
      planningConfigCase_ = PlanningConfigOneofCase.None;
      planningConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanningConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanningConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RtkPlanningConfig, other.RtkPlanningConfig)) return false;
      if (!object.Equals(StandardPlanningConfig, other.StandardPlanningConfig)) return false;
      if (!object.Equals(NavigationPlanningConfig, other.NavigationPlanningConfig)) return false;
      if (!object.Equals(OpenSpacePlanningConfig, other.OpenSpacePlanningConfig)) return false;
      if(!defaultTaskConfig_.Equals(other.defaultTaskConfig_)) return false;
      if (PlanningConfigCase != other.PlanningConfigCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (planningConfigCase_ == PlanningConfigOneofCase.RtkPlanningConfig) hash ^= RtkPlanningConfig.GetHashCode();
      if (planningConfigCase_ == PlanningConfigOneofCase.StandardPlanningConfig) hash ^= StandardPlanningConfig.GetHashCode();
      if (planningConfigCase_ == PlanningConfigOneofCase.NavigationPlanningConfig) hash ^= NavigationPlanningConfig.GetHashCode();
      if (planningConfigCase_ == PlanningConfigOneofCase.OpenSpacePlanningConfig) hash ^= OpenSpacePlanningConfig.GetHashCode();
      hash ^= defaultTaskConfig_.GetHashCode();
      hash ^= (int) planningConfigCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (planningConfigCase_ == PlanningConfigOneofCase.RtkPlanningConfig) {
        output.WriteRawTag(10);
        output.WriteMessage(RtkPlanningConfig);
      }
      if (planningConfigCase_ == PlanningConfigOneofCase.StandardPlanningConfig) {
        output.WriteRawTag(18);
        output.WriteMessage(StandardPlanningConfig);
      }
      if (planningConfigCase_ == PlanningConfigOneofCase.NavigationPlanningConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(NavigationPlanningConfig);
      }
      if (planningConfigCase_ == PlanningConfigOneofCase.OpenSpacePlanningConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(OpenSpacePlanningConfig);
      }
      defaultTaskConfig_.WriteTo(output, _repeated_defaultTaskConfig_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (planningConfigCase_ == PlanningConfigOneofCase.RtkPlanningConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RtkPlanningConfig);
      }
      if (planningConfigCase_ == PlanningConfigOneofCase.StandardPlanningConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandardPlanningConfig);
      }
      if (planningConfigCase_ == PlanningConfigOneofCase.NavigationPlanningConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavigationPlanningConfig);
      }
      if (planningConfigCase_ == PlanningConfigOneofCase.OpenSpacePlanningConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpenSpacePlanningConfig);
      }
      size += defaultTaskConfig_.CalculateSize(_repeated_defaultTaskConfig_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanningConfig other) {
      if (other == null) {
        return;
      }
      defaultTaskConfig_.Add(other.defaultTaskConfig_);
      switch (other.PlanningConfigCase) {
        case PlanningConfigOneofCase.RtkPlanningConfig:
          RtkPlanningConfig = other.RtkPlanningConfig;
          break;
        case PlanningConfigOneofCase.StandardPlanningConfig:
          StandardPlanningConfig = other.StandardPlanningConfig;
          break;
        case PlanningConfigOneofCase.NavigationPlanningConfig:
          NavigationPlanningConfig = other.NavigationPlanningConfig;
          break;
        case PlanningConfigOneofCase.OpenSpacePlanningConfig:
          OpenSpacePlanningConfig = other.OpenSpacePlanningConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Apollo.Planning.RtkPlanningConfig subBuilder = new global::Apollo.Planning.RtkPlanningConfig();
            if (planningConfigCase_ == PlanningConfigOneofCase.RtkPlanningConfig) {
              subBuilder.MergeFrom(RtkPlanningConfig);
            }
            input.ReadMessage(subBuilder);
            RtkPlanningConfig = subBuilder;
            break;
          }
          case 18: {
            global::Apollo.Planning.StandardPlanningConfig subBuilder = new global::Apollo.Planning.StandardPlanningConfig();
            if (planningConfigCase_ == PlanningConfigOneofCase.StandardPlanningConfig) {
              subBuilder.MergeFrom(StandardPlanningConfig);
            }
            input.ReadMessage(subBuilder);
            StandardPlanningConfig = subBuilder;
            break;
          }
          case 26: {
            global::Apollo.Planning.NavigationPlanningConfig subBuilder = new global::Apollo.Planning.NavigationPlanningConfig();
            if (planningConfigCase_ == PlanningConfigOneofCase.NavigationPlanningConfig) {
              subBuilder.MergeFrom(NavigationPlanningConfig);
            }
            input.ReadMessage(subBuilder);
            NavigationPlanningConfig = subBuilder;
            break;
          }
          case 34: {
            global::Apollo.Planning.OpenSpacePlanningConfig subBuilder = new global::Apollo.Planning.OpenSpacePlanningConfig();
            if (planningConfigCase_ == PlanningConfigOneofCase.OpenSpacePlanningConfig) {
              subBuilder.MergeFrom(OpenSpacePlanningConfig);
            }
            input.ReadMessage(subBuilder);
            OpenSpacePlanningConfig = subBuilder;
            break;
          }
          case 42: {
            defaultTaskConfig_.AddEntriesFrom(input, _repeated_defaultTaskConfig_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
