// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_problem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/qp_problem.proto</summary>
  public static partial class QpProblemReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/qp_problem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QpProblemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cidtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3FwX3Byb2JsZW0ucHJvdG8SD2Fw",
            "b2xsby5wbGFubmluZyK9AgobUXVhZHJhdGljUHJvZ3JhbW1pbmdQcm9ibGVt",
            "EhIKCnBhcmFtX3NpemUYASABKAUSMwoQcXVhZHJhdGljX21hdHJpeBgCIAEo",
            "CzIZLmFwb2xsby5wbGFubmluZy5RUE1hdHJpeBIMCgRiaWFzGAMgAygBEjIK",
            "D2VxdWFsaXR5X21hdHJpeBgEIAEoCzIZLmFwb2xsby5wbGFubmluZy5RUE1h",
            "dHJpeBIWCg5lcXVhbGl0eV92YWx1ZRgFIAMoARI0ChFpbmVxdWFsaXR5X21h",
            "dHJpeBgGIAEoCzIZLmFwb2xsby5wbGFubmluZy5RUE1hdHJpeBIYChBpbmVx",
            "dWFsaXR5X3ZhbHVlGAcgAygBEhQKDGlucHV0X21hcmtlchgIIAMoARIVCg1v",
            "cHRpbWFsX3BhcmFtGAkgAygBIj8KCFFQTWF0cml4EhAKCHJvd19zaXplGAEg",
            "ASgFEhAKCGNvbF9zaXplGAIgASgFEg8KB2VsZW1lbnQYAyADKAEiXwoeUXVh",
            "ZHJhdGljUHJvZ3JhbW1pbmdQcm9ibGVtU2V0Ej0KB3Byb2JsZW0YASADKAsy",
            "LC5hcG9sbG8ucGxhbm5pbmcuUXVhZHJhdGljUHJvZ3JhbW1pbmdQcm9ibGVt",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QuadraticProgrammingProblem), global::Apollo.Planning.QuadraticProgrammingProblem.Parser, new[]{ "ParamSize", "QuadraticMatrix", "Bias", "EqualityMatrix", "EqualityValue", "InequalityMatrix", "InequalityValue", "InputMarker", "OptimalParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QPMatrix), global::Apollo.Planning.QPMatrix.Parser, new[]{ "RowSize", "ColSize", "Element" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QuadraticProgrammingProblemSet), global::Apollo.Planning.QuadraticProgrammingProblemSet.Parser, new[]{ "Problem" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QuadraticProgrammingProblem : pb::IMessage<QuadraticProgrammingProblem> {
    private static readonly pb::MessageParser<QuadraticProgrammingProblem> _parser = new pb::MessageParser<QuadraticProgrammingProblem>(() => new QuadraticProgrammingProblem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuadraticProgrammingProblem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpProblemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuadraticProgrammingProblem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuadraticProgrammingProblem(QuadraticProgrammingProblem other) : this() {
      paramSize_ = other.paramSize_;
      QuadraticMatrix = other.quadraticMatrix_ != null ? other.QuadraticMatrix.Clone() : null;
      bias_ = other.bias_.Clone();
      EqualityMatrix = other.equalityMatrix_ != null ? other.EqualityMatrix.Clone() : null;
      equalityValue_ = other.equalityValue_.Clone();
      InequalityMatrix = other.inequalityMatrix_ != null ? other.InequalityMatrix.Clone() : null;
      inequalityValue_ = other.inequalityValue_.Clone();
      inputMarker_ = other.inputMarker_.Clone();
      optimalParam_ = other.optimalParam_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuadraticProgrammingProblem Clone() {
      return new QuadraticProgrammingProblem(this);
    }

    /// <summary>Field number for the "param_size" field.</summary>
    public const int ParamSizeFieldNumber = 1;
    private int paramSize_;
    /// <summary>
    /// specified parameter size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParamSize {
      get { return paramSize_; }
      set {
        paramSize_ = value;
      }
    }

    /// <summary>Field number for the "quadratic_matrix" field.</summary>
    public const int QuadraticMatrixFieldNumber = 2;
    private global::Apollo.Planning.QPMatrix quadraticMatrix_;
    /// <summary>
    /// Q matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QPMatrix QuadraticMatrix {
      get { return quadraticMatrix_; }
      set {
        quadraticMatrix_ = value;
      }
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_bias_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> bias_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// c
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Bias {
      get { return bias_; }
    }

    /// <summary>Field number for the "equality_matrix" field.</summary>
    public const int EqualityMatrixFieldNumber = 4;
    private global::Apollo.Planning.QPMatrix equalityMatrix_;
    /// <summary>
    /// A matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QPMatrix EqualityMatrix {
      get { return equalityMatrix_; }
      set {
        equalityMatrix_ = value;
      }
    }

    /// <summary>Field number for the "equality_value" field.</summary>
    public const int EqualityValueFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_equalityValue_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> equalityValue_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// b vector
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> EqualityValue {
      get { return equalityValue_; }
    }

    /// <summary>Field number for the "inequality_matrix" field.</summary>
    public const int InequalityMatrixFieldNumber = 6;
    private global::Apollo.Planning.QPMatrix inequalityMatrix_;
    /// <summary>
    /// C matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QPMatrix InequalityMatrix {
      get { return inequalityMatrix_; }
      set {
        inequalityMatrix_ = value;
      }
    }

    /// <summary>Field number for the "inequality_value" field.</summary>
    public const int InequalityValueFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_inequalityValue_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> inequalityValue_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// d vector
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> InequalityValue {
      get { return inequalityValue_; }
    }

    /// <summary>Field number for the "input_marker" field.</summary>
    public const int InputMarkerFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_inputMarker_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> inputMarker_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// marker for the specified matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> InputMarker {
      get { return inputMarker_; }
    }

    /// <summary>Field number for the "optimal_param" field.</summary>
    public const int OptimalParamFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_optimalParam_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> optimalParam_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// optimal result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> OptimalParam {
      get { return optimalParam_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuadraticProgrammingProblem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuadraticProgrammingProblem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParamSize != other.ParamSize) return false;
      if (!object.Equals(QuadraticMatrix, other.QuadraticMatrix)) return false;
      if(!bias_.Equals(other.bias_)) return false;
      if (!object.Equals(EqualityMatrix, other.EqualityMatrix)) return false;
      if(!equalityValue_.Equals(other.equalityValue_)) return false;
      if (!object.Equals(InequalityMatrix, other.InequalityMatrix)) return false;
      if(!inequalityValue_.Equals(other.inequalityValue_)) return false;
      if(!inputMarker_.Equals(other.inputMarker_)) return false;
      if(!optimalParam_.Equals(other.optimalParam_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParamSize != 0) hash ^= ParamSize.GetHashCode();
      if (quadraticMatrix_ != null) hash ^= QuadraticMatrix.GetHashCode();
      hash ^= bias_.GetHashCode();
      if (equalityMatrix_ != null) hash ^= EqualityMatrix.GetHashCode();
      hash ^= equalityValue_.GetHashCode();
      if (inequalityMatrix_ != null) hash ^= InequalityMatrix.GetHashCode();
      hash ^= inequalityValue_.GetHashCode();
      hash ^= inputMarker_.GetHashCode();
      hash ^= optimalParam_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParamSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ParamSize);
      }
      if (quadraticMatrix_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(QuadraticMatrix);
      }
      bias_.WriteTo(output, _repeated_bias_codec);
      if (equalityMatrix_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EqualityMatrix);
      }
      equalityValue_.WriteTo(output, _repeated_equalityValue_codec);
      if (inequalityMatrix_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InequalityMatrix);
      }
      inequalityValue_.WriteTo(output, _repeated_inequalityValue_codec);
      inputMarker_.WriteTo(output, _repeated_inputMarker_codec);
      optimalParam_.WriteTo(output, _repeated_optimalParam_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParamSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParamSize);
      }
      if (quadraticMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuadraticMatrix);
      }
      size += bias_.CalculateSize(_repeated_bias_codec);
      if (equalityMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EqualityMatrix);
      }
      size += equalityValue_.CalculateSize(_repeated_equalityValue_codec);
      if (inequalityMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InequalityMatrix);
      }
      size += inequalityValue_.CalculateSize(_repeated_inequalityValue_codec);
      size += inputMarker_.CalculateSize(_repeated_inputMarker_codec);
      size += optimalParam_.CalculateSize(_repeated_optimalParam_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuadraticProgrammingProblem other) {
      if (other == null) {
        return;
      }
      if (other.ParamSize != 0) {
        ParamSize = other.ParamSize;
      }
      if (other.quadraticMatrix_ != null) {
        if (quadraticMatrix_ == null) {
          quadraticMatrix_ = new global::Apollo.Planning.QPMatrix();
        }
        QuadraticMatrix.MergeFrom(other.QuadraticMatrix);
      }
      bias_.Add(other.bias_);
      if (other.equalityMatrix_ != null) {
        if (equalityMatrix_ == null) {
          equalityMatrix_ = new global::Apollo.Planning.QPMatrix();
        }
        EqualityMatrix.MergeFrom(other.EqualityMatrix);
      }
      equalityValue_.Add(other.equalityValue_);
      if (other.inequalityMatrix_ != null) {
        if (inequalityMatrix_ == null) {
          inequalityMatrix_ = new global::Apollo.Planning.QPMatrix();
        }
        InequalityMatrix.MergeFrom(other.InequalityMatrix);
      }
      inequalityValue_.Add(other.inequalityValue_);
      inputMarker_.Add(other.inputMarker_);
      optimalParam_.Add(other.optimalParam_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ParamSize = input.ReadInt32();
            break;
          }
          case 18: {
            if (quadraticMatrix_ == null) {
              quadraticMatrix_ = new global::Apollo.Planning.QPMatrix();
            }
            input.ReadMessage(quadraticMatrix_);
            break;
          }
          case 26:
          case 25: {
            bias_.AddEntriesFrom(input, _repeated_bias_codec);
            break;
          }
          case 34: {
            if (equalityMatrix_ == null) {
              equalityMatrix_ = new global::Apollo.Planning.QPMatrix();
            }
            input.ReadMessage(equalityMatrix_);
            break;
          }
          case 42:
          case 41: {
            equalityValue_.AddEntriesFrom(input, _repeated_equalityValue_codec);
            break;
          }
          case 50: {
            if (inequalityMatrix_ == null) {
              inequalityMatrix_ = new global::Apollo.Planning.QPMatrix();
            }
            input.ReadMessage(inequalityMatrix_);
            break;
          }
          case 58:
          case 57: {
            inequalityValue_.AddEntriesFrom(input, _repeated_inequalityValue_codec);
            break;
          }
          case 66:
          case 65: {
            inputMarker_.AddEntriesFrom(input, _repeated_inputMarker_codec);
            break;
          }
          case 74:
          case 73: {
            optimalParam_.AddEntriesFrom(input, _repeated_optimalParam_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QPMatrix : pb::IMessage<QPMatrix> {
    private static readonly pb::MessageParser<QPMatrix> _parser = new pb::MessageParser<QPMatrix>(() => new QPMatrix());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QPMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpProblemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPMatrix(QPMatrix other) : this() {
      rowSize_ = other.rowSize_;
      colSize_ = other.colSize_;
      element_ = other.element_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPMatrix Clone() {
      return new QPMatrix(this);
    }

    /// <summary>Field number for the "row_size" field.</summary>
    public const int RowSizeFieldNumber = 1;
    private int rowSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RowSize {
      get { return rowSize_; }
      set {
        rowSize_ = value;
      }
    }

    /// <summary>Field number for the "col_size" field.</summary>
    public const int ColSizeFieldNumber = 2;
    private int colSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColSize {
      get { return colSize_; }
      set {
        colSize_ = value;
      }
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_element_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> element_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// element with element(col_size * r + c)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Element {
      get { return element_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QPMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QPMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSize != other.RowSize) return false;
      if (ColSize != other.ColSize) return false;
      if(!element_.Equals(other.element_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSize != 0) hash ^= RowSize.GetHashCode();
      if (ColSize != 0) hash ^= ColSize.GetHashCode();
      hash ^= element_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RowSize);
      }
      if (ColSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColSize);
      }
      element_.WriteTo(output, _repeated_element_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowSize);
      }
      if (ColSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColSize);
      }
      size += element_.CalculateSize(_repeated_element_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QPMatrix other) {
      if (other == null) {
        return;
      }
      if (other.RowSize != 0) {
        RowSize = other.RowSize;
      }
      if (other.ColSize != 0) {
        ColSize = other.ColSize;
      }
      element_.Add(other.element_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RowSize = input.ReadInt32();
            break;
          }
          case 16: {
            ColSize = input.ReadInt32();
            break;
          }
          case 26:
          case 25: {
            element_.AddEntriesFrom(input, _repeated_element_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuadraticProgrammingProblemSet : pb::IMessage<QuadraticProgrammingProblemSet> {
    private static readonly pb::MessageParser<QuadraticProgrammingProblemSet> _parser = new pb::MessageParser<QuadraticProgrammingProblemSet>(() => new QuadraticProgrammingProblemSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuadraticProgrammingProblemSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpProblemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuadraticProgrammingProblemSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuadraticProgrammingProblemSet(QuadraticProgrammingProblemSet other) : this() {
      problem_ = other.problem_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuadraticProgrammingProblemSet Clone() {
      return new QuadraticProgrammingProblemSet(this);
    }

    /// <summary>Field number for the "problem" field.</summary>
    public const int ProblemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.QuadraticProgrammingProblem> _repeated_problem_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Planning.QuadraticProgrammingProblem.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.QuadraticProgrammingProblem> problem_ = new pbc::RepeatedField<global::Apollo.Planning.QuadraticProgrammingProblem>();
    /// <summary>
    /// QPProblem
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.QuadraticProgrammingProblem> Problem {
      get { return problem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuadraticProgrammingProblemSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuadraticProgrammingProblemSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!problem_.Equals(other.problem_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= problem_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      problem_.WriteTo(output, _repeated_problem_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += problem_.CalculateSize(_repeated_problem_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuadraticProgrammingProblemSet other) {
      if (other == null) {
        return;
      }
      problem_.Add(other.problem_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            problem_.AddEntriesFrom(input, _repeated_problem_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
