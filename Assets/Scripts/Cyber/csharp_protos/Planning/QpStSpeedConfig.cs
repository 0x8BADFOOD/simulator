// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_st_speed_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/qp_st_speed_config.proto</summary>
  public static partial class QpStSpeedConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/qp_st_speed_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QpStSpeedConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3FwX3N0X3NwZWVkX2NvbmZpZy5w",
            "cm90bxIPYXBvbGxvLnBsYW5uaW5nGi9tb2R1bGVzL3BsYW5uaW5nL3Byb3Rv",
            "L3N0X2JvdW5kYXJ5X2NvbmZpZy5wcm90byKUAwoOUXBTcGxpbmVDb25maWcS",
            "IgoabnVtYmVyX29mX2Rpc2NyZXRlX2dyYXBoX3QYASABKA0SFAoMc3BsaW5l",
            "X29yZGVyGAIgASgNEhsKE3NwZWVkX2tlcm5lbF93ZWlnaHQYAyABKAESGwoT",
            "YWNjZWxfa2VybmVsX3dlaWdodBgEIAEoARIaChJqZXJrX2tlcm5lbF93ZWln",
            "aHQYBSABKAESFQoNZm9sbG93X3dlaWdodBgGIAEoARITCgtzdG9wX3dlaWdo",
            "dBgHIAEoARIVCg1jcnVpc2Vfd2VpZ2h0GAggASgBEh0KFXJlZ3VsYXJpemF0",
            "aW9uX3dlaWdodBgJIAEoARIcChRmb2xsb3dfZHJhZ19kaXN0YW5jZRgKIAEo",
            "ARIeChZkcF9zdF9yZWZlcmVuY2Vfd2VpZ2h0GAsgASgBEh8KF2luaXRfamVy",
            "a19rZXJuZWxfd2VpZ2h0GAwgASgBEhQKDHlpZWxkX3dlaWdodBgNIAEoARIb",
            "ChN5aWVsZF9kcmFnX2Rpc3RhbmNlGA4gASgBIvEBChFRcFBpZWNld2lzZUNv",
            "bmZpZxIjChtudW1iZXJfb2ZfZXZhbHVhdGVkX2dyYXBoX3QYASABKA0SGwoT",
            "YWNjZWxfa2VybmVsX3dlaWdodBgCIAEoARIaChJqZXJrX2tlcm5lbF93ZWln",
            "aHQYAyABKAESFQoNZm9sbG93X3dlaWdodBgEIAEoARITCgtzdG9wX3dlaWdo",
            "dBgFIAEoARIVCg1jcnVpc2Vfd2VpZ2h0GAYgASgBEh0KFXJlZ3VsYXJpemF0",
            "aW9uX3dlaWdodBgHIAEoARIcChRmb2xsb3dfZHJhZ19kaXN0YW5jZRgIIAEo",
            "ASL3AgoPUXBTdFNwZWVkQ29uZmlnEhkKEXRvdGFsX3BhdGhfbGVuZ3RoGAEg",
            "ASgBEhIKCnRvdGFsX3RpbWUYAiABKAESIgoacHJlZmVycmVkX21heF9hY2Nl",
            "bGVyYXRpb24YBCABKAESIgoacHJlZmVycmVkX21pbl9kZWNlbGVyYXRpb24Y",
            "BSABKAESGAoQbWF4X2FjY2VsZXJhdGlvbhgGIAEoARIYChBtaW5fZGVjZWxl",
            "cmF0aW9uGAcgASgBEjkKEHFwX3NwbGluZV9jb25maWcYCCABKAsyHy5hcG9s",
            "bG8ucGxhbm5pbmcuUXBTcGxpbmVDb25maWcSPwoTcXBfcGllY2V3aXNlX2Nv",
            "bmZpZxgJIAEoCzIiLmFwb2xsby5wbGFubmluZy5RcFBpZWNld2lzZUNvbmZp",
            "ZxI9ChJzdF9ib3VuZGFyeV9jb25maWcYCiABKAsyIS5hcG9sbG8ucGxhbm5p",
            "bmcuU3RCb3VuZGFyeUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Planning.StBoundaryConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QpSplineConfig), global::Apollo.Planning.QpSplineConfig.Parser, new[]{ "NumberOfDiscreteGraphT", "SplineOrder", "SpeedKernelWeight", "AccelKernelWeight", "JerkKernelWeight", "FollowWeight", "StopWeight", "CruiseWeight", "RegularizationWeight", "FollowDragDistance", "DpStReferenceWeight", "InitJerkKernelWeight", "YieldWeight", "YieldDragDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QpPiecewiseConfig), global::Apollo.Planning.QpPiecewiseConfig.Parser, new[]{ "NumberOfEvaluatedGraphT", "AccelKernelWeight", "JerkKernelWeight", "FollowWeight", "StopWeight", "CruiseWeight", "RegularizationWeight", "FollowDragDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.QpStSpeedConfig), global::Apollo.Planning.QpStSpeedConfig.Parser, new[]{ "TotalPathLength", "TotalTime", "PreferredMaxAcceleration", "PreferredMinDeceleration", "MaxAcceleration", "MinDeceleration", "QpSplineConfig", "QpPiecewiseConfig", "StBoundaryConfig" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QpSplineConfig : pb::IMessage<QpSplineConfig> {
    private static readonly pb::MessageParser<QpSplineConfig> _parser = new pb::MessageParser<QpSplineConfig>(() => new QpSplineConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QpSplineConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpStSpeedConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplineConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplineConfig(QpSplineConfig other) : this() {
      numberOfDiscreteGraphT_ = other.numberOfDiscreteGraphT_;
      splineOrder_ = other.splineOrder_;
      speedKernelWeight_ = other.speedKernelWeight_;
      accelKernelWeight_ = other.accelKernelWeight_;
      jerkKernelWeight_ = other.jerkKernelWeight_;
      followWeight_ = other.followWeight_;
      stopWeight_ = other.stopWeight_;
      cruiseWeight_ = other.cruiseWeight_;
      regularizationWeight_ = other.regularizationWeight_;
      followDragDistance_ = other.followDragDistance_;
      dpStReferenceWeight_ = other.dpStReferenceWeight_;
      initJerkKernelWeight_ = other.initJerkKernelWeight_;
      yieldWeight_ = other.yieldWeight_;
      yieldDragDistance_ = other.yieldDragDistance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpSplineConfig Clone() {
      return new QpSplineConfig(this);
    }

    /// <summary>Field number for the "number_of_discrete_graph_t" field.</summary>
    public const int NumberOfDiscreteGraphTFieldNumber = 1;
    private uint numberOfDiscreteGraphT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfDiscreteGraphT {
      get { return numberOfDiscreteGraphT_; }
      set {
        numberOfDiscreteGraphT_ = value;
      }
    }

    /// <summary>Field number for the "spline_order" field.</summary>
    public const int SplineOrderFieldNumber = 2;
    private uint splineOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SplineOrder {
      get { return splineOrder_; }
      set {
        splineOrder_ = value;
      }
    }

    /// <summary>Field number for the "speed_kernel_weight" field.</summary>
    public const int SpeedKernelWeightFieldNumber = 3;
    private double speedKernelWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedKernelWeight {
      get { return speedKernelWeight_; }
      set {
        speedKernelWeight_ = value;
      }
    }

    /// <summary>Field number for the "accel_kernel_weight" field.</summary>
    public const int AccelKernelWeightFieldNumber = 4;
    private double accelKernelWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelKernelWeight {
      get { return accelKernelWeight_; }
      set {
        accelKernelWeight_ = value;
      }
    }

    /// <summary>Field number for the "jerk_kernel_weight" field.</summary>
    public const int JerkKernelWeightFieldNumber = 5;
    private double jerkKernelWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double JerkKernelWeight {
      get { return jerkKernelWeight_; }
      set {
        jerkKernelWeight_ = value;
      }
    }

    /// <summary>Field number for the "follow_weight" field.</summary>
    public const int FollowWeightFieldNumber = 6;
    private double followWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FollowWeight {
      get { return followWeight_; }
      set {
        followWeight_ = value;
      }
    }

    /// <summary>Field number for the "stop_weight" field.</summary>
    public const int StopWeightFieldNumber = 7;
    private double stopWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopWeight {
      get { return stopWeight_; }
      set {
        stopWeight_ = value;
      }
    }

    /// <summary>Field number for the "cruise_weight" field.</summary>
    public const int CruiseWeightFieldNumber = 8;
    private double cruiseWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CruiseWeight {
      get { return cruiseWeight_; }
      set {
        cruiseWeight_ = value;
      }
    }

    /// <summary>Field number for the "regularization_weight" field.</summary>
    public const int RegularizationWeightFieldNumber = 9;
    private double regularizationWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RegularizationWeight {
      get { return regularizationWeight_; }
      set {
        regularizationWeight_ = value;
      }
    }

    /// <summary>Field number for the "follow_drag_distance" field.</summary>
    public const int FollowDragDistanceFieldNumber = 10;
    private double followDragDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FollowDragDistance {
      get { return followDragDistance_; }
      set {
        followDragDistance_ = value;
      }
    }

    /// <summary>Field number for the "dp_st_reference_weight" field.</summary>
    public const int DpStReferenceWeightFieldNumber = 11;
    private double dpStReferenceWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DpStReferenceWeight {
      get { return dpStReferenceWeight_; }
      set {
        dpStReferenceWeight_ = value;
      }
    }

    /// <summary>Field number for the "init_jerk_kernel_weight" field.</summary>
    public const int InitJerkKernelWeightFieldNumber = 12;
    private double initJerkKernelWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InitJerkKernelWeight {
      get { return initJerkKernelWeight_; }
      set {
        initJerkKernelWeight_ = value;
      }
    }

    /// <summary>Field number for the "yield_weight" field.</summary>
    public const int YieldWeightFieldNumber = 13;
    private double yieldWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YieldWeight {
      get { return yieldWeight_; }
      set {
        yieldWeight_ = value;
      }
    }

    /// <summary>Field number for the "yield_drag_distance" field.</summary>
    public const int YieldDragDistanceFieldNumber = 14;
    private double yieldDragDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YieldDragDistance {
      get { return yieldDragDistance_; }
      set {
        yieldDragDistance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QpSplineConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QpSplineConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfDiscreteGraphT != other.NumberOfDiscreteGraphT) return false;
      if (SplineOrder != other.SplineOrder) return false;
      if (SpeedKernelWeight != other.SpeedKernelWeight) return false;
      if (AccelKernelWeight != other.AccelKernelWeight) return false;
      if (JerkKernelWeight != other.JerkKernelWeight) return false;
      if (FollowWeight != other.FollowWeight) return false;
      if (StopWeight != other.StopWeight) return false;
      if (CruiseWeight != other.CruiseWeight) return false;
      if (RegularizationWeight != other.RegularizationWeight) return false;
      if (FollowDragDistance != other.FollowDragDistance) return false;
      if (DpStReferenceWeight != other.DpStReferenceWeight) return false;
      if (InitJerkKernelWeight != other.InitJerkKernelWeight) return false;
      if (YieldWeight != other.YieldWeight) return false;
      if (YieldDragDistance != other.YieldDragDistance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfDiscreteGraphT != 0) hash ^= NumberOfDiscreteGraphT.GetHashCode();
      if (SplineOrder != 0) hash ^= SplineOrder.GetHashCode();
      if (SpeedKernelWeight != 0D) hash ^= SpeedKernelWeight.GetHashCode();
      if (AccelKernelWeight != 0D) hash ^= AccelKernelWeight.GetHashCode();
      if (JerkKernelWeight != 0D) hash ^= JerkKernelWeight.GetHashCode();
      if (FollowWeight != 0D) hash ^= FollowWeight.GetHashCode();
      if (StopWeight != 0D) hash ^= StopWeight.GetHashCode();
      if (CruiseWeight != 0D) hash ^= CruiseWeight.GetHashCode();
      if (RegularizationWeight != 0D) hash ^= RegularizationWeight.GetHashCode();
      if (FollowDragDistance != 0D) hash ^= FollowDragDistance.GetHashCode();
      if (DpStReferenceWeight != 0D) hash ^= DpStReferenceWeight.GetHashCode();
      if (InitJerkKernelWeight != 0D) hash ^= InitJerkKernelWeight.GetHashCode();
      if (YieldWeight != 0D) hash ^= YieldWeight.GetHashCode();
      if (YieldDragDistance != 0D) hash ^= YieldDragDistance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfDiscreteGraphT != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumberOfDiscreteGraphT);
      }
      if (SplineOrder != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SplineOrder);
      }
      if (SpeedKernelWeight != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SpeedKernelWeight);
      }
      if (AccelKernelWeight != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AccelKernelWeight);
      }
      if (JerkKernelWeight != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(JerkKernelWeight);
      }
      if (FollowWeight != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(FollowWeight);
      }
      if (StopWeight != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(StopWeight);
      }
      if (CruiseWeight != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CruiseWeight);
      }
      if (RegularizationWeight != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(RegularizationWeight);
      }
      if (FollowDragDistance != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(FollowDragDistance);
      }
      if (DpStReferenceWeight != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(DpStReferenceWeight);
      }
      if (InitJerkKernelWeight != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(InitJerkKernelWeight);
      }
      if (YieldWeight != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(YieldWeight);
      }
      if (YieldDragDistance != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(YieldDragDistance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumberOfDiscreteGraphT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfDiscreteGraphT);
      }
      if (SplineOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SplineOrder);
      }
      if (SpeedKernelWeight != 0D) {
        size += 1 + 8;
      }
      if (AccelKernelWeight != 0D) {
        size += 1 + 8;
      }
      if (JerkKernelWeight != 0D) {
        size += 1 + 8;
      }
      if (FollowWeight != 0D) {
        size += 1 + 8;
      }
      if (StopWeight != 0D) {
        size += 1 + 8;
      }
      if (CruiseWeight != 0D) {
        size += 1 + 8;
      }
      if (RegularizationWeight != 0D) {
        size += 1 + 8;
      }
      if (FollowDragDistance != 0D) {
        size += 1 + 8;
      }
      if (DpStReferenceWeight != 0D) {
        size += 1 + 8;
      }
      if (InitJerkKernelWeight != 0D) {
        size += 1 + 8;
      }
      if (YieldWeight != 0D) {
        size += 1 + 8;
      }
      if (YieldDragDistance != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QpSplineConfig other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfDiscreteGraphT != 0) {
        NumberOfDiscreteGraphT = other.NumberOfDiscreteGraphT;
      }
      if (other.SplineOrder != 0) {
        SplineOrder = other.SplineOrder;
      }
      if (other.SpeedKernelWeight != 0D) {
        SpeedKernelWeight = other.SpeedKernelWeight;
      }
      if (other.AccelKernelWeight != 0D) {
        AccelKernelWeight = other.AccelKernelWeight;
      }
      if (other.JerkKernelWeight != 0D) {
        JerkKernelWeight = other.JerkKernelWeight;
      }
      if (other.FollowWeight != 0D) {
        FollowWeight = other.FollowWeight;
      }
      if (other.StopWeight != 0D) {
        StopWeight = other.StopWeight;
      }
      if (other.CruiseWeight != 0D) {
        CruiseWeight = other.CruiseWeight;
      }
      if (other.RegularizationWeight != 0D) {
        RegularizationWeight = other.RegularizationWeight;
      }
      if (other.FollowDragDistance != 0D) {
        FollowDragDistance = other.FollowDragDistance;
      }
      if (other.DpStReferenceWeight != 0D) {
        DpStReferenceWeight = other.DpStReferenceWeight;
      }
      if (other.InitJerkKernelWeight != 0D) {
        InitJerkKernelWeight = other.InitJerkKernelWeight;
      }
      if (other.YieldWeight != 0D) {
        YieldWeight = other.YieldWeight;
      }
      if (other.YieldDragDistance != 0D) {
        YieldDragDistance = other.YieldDragDistance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumberOfDiscreteGraphT = input.ReadUInt32();
            break;
          }
          case 16: {
            SplineOrder = input.ReadUInt32();
            break;
          }
          case 25: {
            SpeedKernelWeight = input.ReadDouble();
            break;
          }
          case 33: {
            AccelKernelWeight = input.ReadDouble();
            break;
          }
          case 41: {
            JerkKernelWeight = input.ReadDouble();
            break;
          }
          case 49: {
            FollowWeight = input.ReadDouble();
            break;
          }
          case 57: {
            StopWeight = input.ReadDouble();
            break;
          }
          case 65: {
            CruiseWeight = input.ReadDouble();
            break;
          }
          case 73: {
            RegularizationWeight = input.ReadDouble();
            break;
          }
          case 81: {
            FollowDragDistance = input.ReadDouble();
            break;
          }
          case 89: {
            DpStReferenceWeight = input.ReadDouble();
            break;
          }
          case 97: {
            InitJerkKernelWeight = input.ReadDouble();
            break;
          }
          case 105: {
            YieldWeight = input.ReadDouble();
            break;
          }
          case 113: {
            YieldDragDistance = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QpPiecewiseConfig : pb::IMessage<QpPiecewiseConfig> {
    private static readonly pb::MessageParser<QpPiecewiseConfig> _parser = new pb::MessageParser<QpPiecewiseConfig>(() => new QpPiecewiseConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QpPiecewiseConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpStSpeedConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpPiecewiseConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpPiecewiseConfig(QpPiecewiseConfig other) : this() {
      numberOfEvaluatedGraphT_ = other.numberOfEvaluatedGraphT_;
      accelKernelWeight_ = other.accelKernelWeight_;
      jerkKernelWeight_ = other.jerkKernelWeight_;
      followWeight_ = other.followWeight_;
      stopWeight_ = other.stopWeight_;
      cruiseWeight_ = other.cruiseWeight_;
      regularizationWeight_ = other.regularizationWeight_;
      followDragDistance_ = other.followDragDistance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpPiecewiseConfig Clone() {
      return new QpPiecewiseConfig(this);
    }

    /// <summary>Field number for the "number_of_evaluated_graph_t" field.</summary>
    public const int NumberOfEvaluatedGraphTFieldNumber = 1;
    private uint numberOfEvaluatedGraphT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfEvaluatedGraphT {
      get { return numberOfEvaluatedGraphT_; }
      set {
        numberOfEvaluatedGraphT_ = value;
      }
    }

    /// <summary>Field number for the "accel_kernel_weight" field.</summary>
    public const int AccelKernelWeightFieldNumber = 2;
    private double accelKernelWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelKernelWeight {
      get { return accelKernelWeight_; }
      set {
        accelKernelWeight_ = value;
      }
    }

    /// <summary>Field number for the "jerk_kernel_weight" field.</summary>
    public const int JerkKernelWeightFieldNumber = 3;
    private double jerkKernelWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double JerkKernelWeight {
      get { return jerkKernelWeight_; }
      set {
        jerkKernelWeight_ = value;
      }
    }

    /// <summary>Field number for the "follow_weight" field.</summary>
    public const int FollowWeightFieldNumber = 4;
    private double followWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FollowWeight {
      get { return followWeight_; }
      set {
        followWeight_ = value;
      }
    }

    /// <summary>Field number for the "stop_weight" field.</summary>
    public const int StopWeightFieldNumber = 5;
    private double stopWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopWeight {
      get { return stopWeight_; }
      set {
        stopWeight_ = value;
      }
    }

    /// <summary>Field number for the "cruise_weight" field.</summary>
    public const int CruiseWeightFieldNumber = 6;
    private double cruiseWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CruiseWeight {
      get { return cruiseWeight_; }
      set {
        cruiseWeight_ = value;
      }
    }

    /// <summary>Field number for the "regularization_weight" field.</summary>
    public const int RegularizationWeightFieldNumber = 7;
    private double regularizationWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RegularizationWeight {
      get { return regularizationWeight_; }
      set {
        regularizationWeight_ = value;
      }
    }

    /// <summary>Field number for the "follow_drag_distance" field.</summary>
    public const int FollowDragDistanceFieldNumber = 8;
    private double followDragDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FollowDragDistance {
      get { return followDragDistance_; }
      set {
        followDragDistance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QpPiecewiseConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QpPiecewiseConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfEvaluatedGraphT != other.NumberOfEvaluatedGraphT) return false;
      if (AccelKernelWeight != other.AccelKernelWeight) return false;
      if (JerkKernelWeight != other.JerkKernelWeight) return false;
      if (FollowWeight != other.FollowWeight) return false;
      if (StopWeight != other.StopWeight) return false;
      if (CruiseWeight != other.CruiseWeight) return false;
      if (RegularizationWeight != other.RegularizationWeight) return false;
      if (FollowDragDistance != other.FollowDragDistance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfEvaluatedGraphT != 0) hash ^= NumberOfEvaluatedGraphT.GetHashCode();
      if (AccelKernelWeight != 0D) hash ^= AccelKernelWeight.GetHashCode();
      if (JerkKernelWeight != 0D) hash ^= JerkKernelWeight.GetHashCode();
      if (FollowWeight != 0D) hash ^= FollowWeight.GetHashCode();
      if (StopWeight != 0D) hash ^= StopWeight.GetHashCode();
      if (CruiseWeight != 0D) hash ^= CruiseWeight.GetHashCode();
      if (RegularizationWeight != 0D) hash ^= RegularizationWeight.GetHashCode();
      if (FollowDragDistance != 0D) hash ^= FollowDragDistance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfEvaluatedGraphT != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumberOfEvaluatedGraphT);
      }
      if (AccelKernelWeight != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AccelKernelWeight);
      }
      if (JerkKernelWeight != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(JerkKernelWeight);
      }
      if (FollowWeight != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FollowWeight);
      }
      if (StopWeight != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(StopWeight);
      }
      if (CruiseWeight != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CruiseWeight);
      }
      if (RegularizationWeight != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RegularizationWeight);
      }
      if (FollowDragDistance != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(FollowDragDistance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumberOfEvaluatedGraphT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfEvaluatedGraphT);
      }
      if (AccelKernelWeight != 0D) {
        size += 1 + 8;
      }
      if (JerkKernelWeight != 0D) {
        size += 1 + 8;
      }
      if (FollowWeight != 0D) {
        size += 1 + 8;
      }
      if (StopWeight != 0D) {
        size += 1 + 8;
      }
      if (CruiseWeight != 0D) {
        size += 1 + 8;
      }
      if (RegularizationWeight != 0D) {
        size += 1 + 8;
      }
      if (FollowDragDistance != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QpPiecewiseConfig other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfEvaluatedGraphT != 0) {
        NumberOfEvaluatedGraphT = other.NumberOfEvaluatedGraphT;
      }
      if (other.AccelKernelWeight != 0D) {
        AccelKernelWeight = other.AccelKernelWeight;
      }
      if (other.JerkKernelWeight != 0D) {
        JerkKernelWeight = other.JerkKernelWeight;
      }
      if (other.FollowWeight != 0D) {
        FollowWeight = other.FollowWeight;
      }
      if (other.StopWeight != 0D) {
        StopWeight = other.StopWeight;
      }
      if (other.CruiseWeight != 0D) {
        CruiseWeight = other.CruiseWeight;
      }
      if (other.RegularizationWeight != 0D) {
        RegularizationWeight = other.RegularizationWeight;
      }
      if (other.FollowDragDistance != 0D) {
        FollowDragDistance = other.FollowDragDistance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumberOfEvaluatedGraphT = input.ReadUInt32();
            break;
          }
          case 17: {
            AccelKernelWeight = input.ReadDouble();
            break;
          }
          case 25: {
            JerkKernelWeight = input.ReadDouble();
            break;
          }
          case 33: {
            FollowWeight = input.ReadDouble();
            break;
          }
          case 41: {
            StopWeight = input.ReadDouble();
            break;
          }
          case 49: {
            CruiseWeight = input.ReadDouble();
            break;
          }
          case 57: {
            RegularizationWeight = input.ReadDouble();
            break;
          }
          case 65: {
            FollowDragDistance = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// next ID: 11
  /// </summary>
  public sealed partial class QpStSpeedConfig : pb::IMessage<QpStSpeedConfig> {
    private static readonly pb::MessageParser<QpStSpeedConfig> _parser = new pb::MessageParser<QpStSpeedConfig>(() => new QpStSpeedConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QpStSpeedConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.QpStSpeedConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpStSpeedConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpStSpeedConfig(QpStSpeedConfig other) : this() {
      totalPathLength_ = other.totalPathLength_;
      totalTime_ = other.totalTime_;
      preferredMaxAcceleration_ = other.preferredMaxAcceleration_;
      preferredMinDeceleration_ = other.preferredMinDeceleration_;
      maxAcceleration_ = other.maxAcceleration_;
      minDeceleration_ = other.minDeceleration_;
      QpSplineConfig = other.qpSplineConfig_ != null ? other.QpSplineConfig.Clone() : null;
      QpPiecewiseConfig = other.qpPiecewiseConfig_ != null ? other.QpPiecewiseConfig.Clone() : null;
      StBoundaryConfig = other.stBoundaryConfig_ != null ? other.StBoundaryConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QpStSpeedConfig Clone() {
      return new QpStSpeedConfig(this);
    }

    /// <summary>Field number for the "total_path_length" field.</summary>
    public const int TotalPathLengthFieldNumber = 1;
    private double totalPathLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalPathLength {
      get { return totalPathLength_; }
      set {
        totalPathLength_ = value;
      }
    }

    /// <summary>Field number for the "total_time" field.</summary>
    public const int TotalTimeFieldNumber = 2;
    private double totalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "preferred_max_acceleration" field.</summary>
    public const int PreferredMaxAccelerationFieldNumber = 4;
    private double preferredMaxAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreferredMaxAcceleration {
      get { return preferredMaxAcceleration_; }
      set {
        preferredMaxAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "preferred_min_deceleration" field.</summary>
    public const int PreferredMinDecelerationFieldNumber = 5;
    private double preferredMinDeceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreferredMinDeceleration {
      get { return preferredMinDeceleration_; }
      set {
        preferredMinDeceleration_ = value;
      }
    }

    /// <summary>Field number for the "max_acceleration" field.</summary>
    public const int MaxAccelerationFieldNumber = 6;
    private double maxAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAcceleration {
      get { return maxAcceleration_; }
      set {
        maxAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "min_deceleration" field.</summary>
    public const int MinDecelerationFieldNumber = 7;
    private double minDeceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinDeceleration {
      get { return minDeceleration_; }
      set {
        minDeceleration_ = value;
      }
    }

    /// <summary>Field number for the "qp_spline_config" field.</summary>
    public const int QpSplineConfigFieldNumber = 8;
    private global::Apollo.Planning.QpSplineConfig qpSplineConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QpSplineConfig QpSplineConfig {
      get { return qpSplineConfig_; }
      set {
        qpSplineConfig_ = value;
      }
    }

    /// <summary>Field number for the "qp_piecewise_config" field.</summary>
    public const int QpPiecewiseConfigFieldNumber = 9;
    private global::Apollo.Planning.QpPiecewiseConfig qpPiecewiseConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.QpPiecewiseConfig QpPiecewiseConfig {
      get { return qpPiecewiseConfig_; }
      set {
        qpPiecewiseConfig_ = value;
      }
    }

    /// <summary>Field number for the "st_boundary_config" field.</summary>
    public const int StBoundaryConfigFieldNumber = 10;
    private global::Apollo.Planning.StBoundaryConfig stBoundaryConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StBoundaryConfig StBoundaryConfig {
      get { return stBoundaryConfig_; }
      set {
        stBoundaryConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QpStSpeedConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QpStSpeedConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalPathLength != other.TotalPathLength) return false;
      if (TotalTime != other.TotalTime) return false;
      if (PreferredMaxAcceleration != other.PreferredMaxAcceleration) return false;
      if (PreferredMinDeceleration != other.PreferredMinDeceleration) return false;
      if (MaxAcceleration != other.MaxAcceleration) return false;
      if (MinDeceleration != other.MinDeceleration) return false;
      if (!object.Equals(QpSplineConfig, other.QpSplineConfig)) return false;
      if (!object.Equals(QpPiecewiseConfig, other.QpPiecewiseConfig)) return false;
      if (!object.Equals(StBoundaryConfig, other.StBoundaryConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalPathLength != 0D) hash ^= TotalPathLength.GetHashCode();
      if (TotalTime != 0D) hash ^= TotalTime.GetHashCode();
      if (PreferredMaxAcceleration != 0D) hash ^= PreferredMaxAcceleration.GetHashCode();
      if (PreferredMinDeceleration != 0D) hash ^= PreferredMinDeceleration.GetHashCode();
      if (MaxAcceleration != 0D) hash ^= MaxAcceleration.GetHashCode();
      if (MinDeceleration != 0D) hash ^= MinDeceleration.GetHashCode();
      if (qpSplineConfig_ != null) hash ^= QpSplineConfig.GetHashCode();
      if (qpPiecewiseConfig_ != null) hash ^= QpPiecewiseConfig.GetHashCode();
      if (stBoundaryConfig_ != null) hash ^= StBoundaryConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalPathLength != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TotalPathLength);
      }
      if (TotalTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalTime);
      }
      if (PreferredMaxAcceleration != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PreferredMaxAcceleration);
      }
      if (PreferredMinDeceleration != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PreferredMinDeceleration);
      }
      if (MaxAcceleration != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MaxAcceleration);
      }
      if (MinDeceleration != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MinDeceleration);
      }
      if (qpSplineConfig_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(QpSplineConfig);
      }
      if (qpPiecewiseConfig_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(QpPiecewiseConfig);
      }
      if (stBoundaryConfig_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(StBoundaryConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalPathLength != 0D) {
        size += 1 + 8;
      }
      if (TotalTime != 0D) {
        size += 1 + 8;
      }
      if (PreferredMaxAcceleration != 0D) {
        size += 1 + 8;
      }
      if (PreferredMinDeceleration != 0D) {
        size += 1 + 8;
      }
      if (MaxAcceleration != 0D) {
        size += 1 + 8;
      }
      if (MinDeceleration != 0D) {
        size += 1 + 8;
      }
      if (qpSplineConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QpSplineConfig);
      }
      if (qpPiecewiseConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QpPiecewiseConfig);
      }
      if (stBoundaryConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StBoundaryConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QpStSpeedConfig other) {
      if (other == null) {
        return;
      }
      if (other.TotalPathLength != 0D) {
        TotalPathLength = other.TotalPathLength;
      }
      if (other.TotalTime != 0D) {
        TotalTime = other.TotalTime;
      }
      if (other.PreferredMaxAcceleration != 0D) {
        PreferredMaxAcceleration = other.PreferredMaxAcceleration;
      }
      if (other.PreferredMinDeceleration != 0D) {
        PreferredMinDeceleration = other.PreferredMinDeceleration;
      }
      if (other.MaxAcceleration != 0D) {
        MaxAcceleration = other.MaxAcceleration;
      }
      if (other.MinDeceleration != 0D) {
        MinDeceleration = other.MinDeceleration;
      }
      if (other.qpSplineConfig_ != null) {
        if (qpSplineConfig_ == null) {
          qpSplineConfig_ = new global::Apollo.Planning.QpSplineConfig();
        }
        QpSplineConfig.MergeFrom(other.QpSplineConfig);
      }
      if (other.qpPiecewiseConfig_ != null) {
        if (qpPiecewiseConfig_ == null) {
          qpPiecewiseConfig_ = new global::Apollo.Planning.QpPiecewiseConfig();
        }
        QpPiecewiseConfig.MergeFrom(other.QpPiecewiseConfig);
      }
      if (other.stBoundaryConfig_ != null) {
        if (stBoundaryConfig_ == null) {
          stBoundaryConfig_ = new global::Apollo.Planning.StBoundaryConfig();
        }
        StBoundaryConfig.MergeFrom(other.StBoundaryConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TotalPathLength = input.ReadDouble();
            break;
          }
          case 17: {
            TotalTime = input.ReadDouble();
            break;
          }
          case 33: {
            PreferredMaxAcceleration = input.ReadDouble();
            break;
          }
          case 41: {
            PreferredMinDeceleration = input.ReadDouble();
            break;
          }
          case 49: {
            MaxAcceleration = input.ReadDouble();
            break;
          }
          case 57: {
            MinDeceleration = input.ReadDouble();
            break;
          }
          case 66: {
            if (qpSplineConfig_ == null) {
              qpSplineConfig_ = new global::Apollo.Planning.QpSplineConfig();
            }
            input.ReadMessage(qpSplineConfig_);
            break;
          }
          case 74: {
            if (qpPiecewiseConfig_ == null) {
              qpPiecewiseConfig_ = new global::Apollo.Planning.QpPiecewiseConfig();
            }
            input.ReadMessage(qpPiecewiseConfig_);
            break;
          }
          case 82: {
            if (stBoundaryConfig_ == null) {
              stBoundaryConfig_ = new global::Apollo.Planning.StBoundaryConfig();
            }
            input.ReadMessage(stBoundaryConfig_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
