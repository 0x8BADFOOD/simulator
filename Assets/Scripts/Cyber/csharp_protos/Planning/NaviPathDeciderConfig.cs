// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_path_decider_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/navi_path_decider_config.proto</summary>
  public static partial class NaviPathDeciderConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/navi_path_decider_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NaviPathDeciderConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL25hdmlfcGF0aF9kZWNpZGVyX2Nv",
            "bmZpZy5wcm90bxIPYXBvbGxvLnBsYW5uaW5nIq0DChVOYXZpUGF0aERlY2lk",
            "ZXJDb25maWcSFwoPbWluX3BhdGhfbGVuZ3RoGAEgASgBEh0KFW1pbl9sb29r",
            "X2ZvcndhcmRfdGltZRgCIAEoDRIeChZtYXhfa2VlcF9sYW5lX2Rpc3RhbmNl",
            "GAMgASgBEh0KFW1heF9rZWVwX2xhbmVfc2hpZnRfeRgEIAEoARIcChRtaW5f",
            "a2VlcF9sYW5lX29mZnNldBgFIAEoARIkChxrZWVwX2xhbmVfc2hpZnRfY29t",
            "cGVuc2F0aW9uGAYgASgBEk0KG21vdmVfZGVzdF9sYW5lX2NvbmZpZ190YWxi",
            "ZRgHIAEoCzIoLmFwb2xsby5wbGFubmluZy5Nb3ZlRGVzdExhbmVDb25maWdU",
            "YWJsZRIjChttb3ZlX2Rlc3RfbGFuZV9jb21wZW5zYXRpb24YCCABKAESGwoT",
            "bWF4X2thcHBhX3RocmVzaG9sZBgJIAEoARIpCiFrYXBwYV9tb3ZlX2Rlc3Rf",
            "bGFuZV9jb21wZW5zYXRpb24YCiABKAESHQoVc3RhcnRfcGxhbl9wb2ludF9m",
            "cm9tGAsgASgNIk4KF01vdmVEZXN0TGFuZUNvbmZpZ1RhYmxlEjMKDWxhdGVy",
            "YWxfc2hpZnQYASADKAsyHC5hcG9sbG8ucGxhbm5pbmcuU2hpZnRDb25maWci",
            "RAoLU2hpZnRDb25maWcSEQoJbWF4X3NwZWVkGAEgASgBEiIKGm1heF9tb3Zl",
            "X2Rlc3RfbGFuZV9zaGlmdF95GAMgASgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.NaviPathDeciderConfig), global::Apollo.Planning.NaviPathDeciderConfig.Parser, new[]{ "MinPathLength", "MinLookForwardTime", "MaxKeepLaneDistance", "MaxKeepLaneShiftY", "MinKeepLaneOffset", "KeepLaneShiftCompensation", "MoveDestLaneConfigTalbe", "MoveDestLaneCompensation", "MaxKappaThreshold", "KappaMoveDestLaneCompensation", "StartPlanPointFrom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.MoveDestLaneConfigTable), global::Apollo.Planning.MoveDestLaneConfigTable.Parser, new[]{ "LateralShift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ShiftConfig), global::Apollo.Planning.ShiftConfig.Parser, new[]{ "MaxSpeed", "MaxMoveDestLaneShiftY" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NaviPathDeciderConfig : pb::IMessage<NaviPathDeciderConfig> {
    private static readonly pb::MessageParser<NaviPathDeciderConfig> _parser = new pb::MessageParser<NaviPathDeciderConfig>(() => new NaviPathDeciderConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NaviPathDeciderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.NaviPathDeciderConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviPathDeciderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviPathDeciderConfig(NaviPathDeciderConfig other) : this() {
      minPathLength_ = other.minPathLength_;
      minLookForwardTime_ = other.minLookForwardTime_;
      maxKeepLaneDistance_ = other.maxKeepLaneDistance_;
      maxKeepLaneShiftY_ = other.maxKeepLaneShiftY_;
      minKeepLaneOffset_ = other.minKeepLaneOffset_;
      keepLaneShiftCompensation_ = other.keepLaneShiftCompensation_;
      MoveDestLaneConfigTalbe = other.moveDestLaneConfigTalbe_ != null ? other.MoveDestLaneConfigTalbe.Clone() : null;
      moveDestLaneCompensation_ = other.moveDestLaneCompensation_;
      maxKappaThreshold_ = other.maxKappaThreshold_;
      kappaMoveDestLaneCompensation_ = other.kappaMoveDestLaneCompensation_;
      startPlanPointFrom_ = other.startPlanPointFrom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviPathDeciderConfig Clone() {
      return new NaviPathDeciderConfig(this);
    }

    /// <summary>Field number for the "min_path_length" field.</summary>
    public const int MinPathLengthFieldNumber = 1;
    private double minPathLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinPathLength {
      get { return minPathLength_; }
      set {
        minPathLength_ = value;
      }
    }

    /// <summary>Field number for the "min_look_forward_time" field.</summary>
    public const int MinLookForwardTimeFieldNumber = 2;
    private uint minLookForwardTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinLookForwardTime {
      get { return minLookForwardTime_; }
      set {
        minLookForwardTime_ = value;
      }
    }

    /// <summary>Field number for the "max_keep_lane_distance" field.</summary>
    public const int MaxKeepLaneDistanceFieldNumber = 3;
    private double maxKeepLaneDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxKeepLaneDistance {
      get { return maxKeepLaneDistance_; }
      set {
        maxKeepLaneDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_keep_lane_shift_y" field.</summary>
    public const int MaxKeepLaneShiftYFieldNumber = 4;
    private double maxKeepLaneShiftY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxKeepLaneShiftY {
      get { return maxKeepLaneShiftY_; }
      set {
        maxKeepLaneShiftY_ = value;
      }
    }

    /// <summary>Field number for the "min_keep_lane_offset" field.</summary>
    public const int MinKeepLaneOffsetFieldNumber = 5;
    private double minKeepLaneOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinKeepLaneOffset {
      get { return minKeepLaneOffset_; }
      set {
        minKeepLaneOffset_ = value;
      }
    }

    /// <summary>Field number for the "keep_lane_shift_compensation" field.</summary>
    public const int KeepLaneShiftCompensationFieldNumber = 6;
    private double keepLaneShiftCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double KeepLaneShiftCompensation {
      get { return keepLaneShiftCompensation_; }
      set {
        keepLaneShiftCompensation_ = value;
      }
    }

    /// <summary>Field number for the "move_dest_lane_config_talbe" field.</summary>
    public const int MoveDestLaneConfigTalbeFieldNumber = 7;
    private global::Apollo.Planning.MoveDestLaneConfigTable moveDestLaneConfigTalbe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.MoveDestLaneConfigTable MoveDestLaneConfigTalbe {
      get { return moveDestLaneConfigTalbe_; }
      set {
        moveDestLaneConfigTalbe_ = value;
      }
    }

    /// <summary>Field number for the "move_dest_lane_compensation" field.</summary>
    public const int MoveDestLaneCompensationFieldNumber = 8;
    private double moveDestLaneCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MoveDestLaneCompensation {
      get { return moveDestLaneCompensation_; }
      set {
        moveDestLaneCompensation_ = value;
      }
    }

    /// <summary>Field number for the "max_kappa_threshold" field.</summary>
    public const int MaxKappaThresholdFieldNumber = 9;
    private double maxKappaThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxKappaThreshold {
      get { return maxKappaThreshold_; }
      set {
        maxKappaThreshold_ = value;
      }
    }

    /// <summary>Field number for the "kappa_move_dest_lane_compensation" field.</summary>
    public const int KappaMoveDestLaneCompensationFieldNumber = 10;
    private double kappaMoveDestLaneCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double KappaMoveDestLaneCompensation {
      get { return kappaMoveDestLaneCompensation_; }
      set {
        kappaMoveDestLaneCompensation_ = value;
      }
    }

    /// <summary>Field number for the "start_plan_point_from" field.</summary>
    public const int StartPlanPointFromFieldNumber = 11;
    private uint startPlanPointFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartPlanPointFrom {
      get { return startPlanPointFrom_; }
      set {
        startPlanPointFrom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NaviPathDeciderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NaviPathDeciderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinPathLength != other.MinPathLength) return false;
      if (MinLookForwardTime != other.MinLookForwardTime) return false;
      if (MaxKeepLaneDistance != other.MaxKeepLaneDistance) return false;
      if (MaxKeepLaneShiftY != other.MaxKeepLaneShiftY) return false;
      if (MinKeepLaneOffset != other.MinKeepLaneOffset) return false;
      if (KeepLaneShiftCompensation != other.KeepLaneShiftCompensation) return false;
      if (!object.Equals(MoveDestLaneConfigTalbe, other.MoveDestLaneConfigTalbe)) return false;
      if (MoveDestLaneCompensation != other.MoveDestLaneCompensation) return false;
      if (MaxKappaThreshold != other.MaxKappaThreshold) return false;
      if (KappaMoveDestLaneCompensation != other.KappaMoveDestLaneCompensation) return false;
      if (StartPlanPointFrom != other.StartPlanPointFrom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinPathLength != 0D) hash ^= MinPathLength.GetHashCode();
      if (MinLookForwardTime != 0) hash ^= MinLookForwardTime.GetHashCode();
      if (MaxKeepLaneDistance != 0D) hash ^= MaxKeepLaneDistance.GetHashCode();
      if (MaxKeepLaneShiftY != 0D) hash ^= MaxKeepLaneShiftY.GetHashCode();
      if (MinKeepLaneOffset != 0D) hash ^= MinKeepLaneOffset.GetHashCode();
      if (KeepLaneShiftCompensation != 0D) hash ^= KeepLaneShiftCompensation.GetHashCode();
      if (moveDestLaneConfigTalbe_ != null) hash ^= MoveDestLaneConfigTalbe.GetHashCode();
      if (MoveDestLaneCompensation != 0D) hash ^= MoveDestLaneCompensation.GetHashCode();
      if (MaxKappaThreshold != 0D) hash ^= MaxKappaThreshold.GetHashCode();
      if (KappaMoveDestLaneCompensation != 0D) hash ^= KappaMoveDestLaneCompensation.GetHashCode();
      if (StartPlanPointFrom != 0) hash ^= StartPlanPointFrom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinPathLength != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MinPathLength);
      }
      if (MinLookForwardTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MinLookForwardTime);
      }
      if (MaxKeepLaneDistance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxKeepLaneDistance);
      }
      if (MaxKeepLaneShiftY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxKeepLaneShiftY);
      }
      if (MinKeepLaneOffset != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MinKeepLaneOffset);
      }
      if (KeepLaneShiftCompensation != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(KeepLaneShiftCompensation);
      }
      if (moveDestLaneConfigTalbe_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MoveDestLaneConfigTalbe);
      }
      if (MoveDestLaneCompensation != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(MoveDestLaneCompensation);
      }
      if (MaxKappaThreshold != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MaxKappaThreshold);
      }
      if (KappaMoveDestLaneCompensation != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(KappaMoveDestLaneCompensation);
      }
      if (StartPlanPointFrom != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(StartPlanPointFrom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinPathLength != 0D) {
        size += 1 + 8;
      }
      if (MinLookForwardTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinLookForwardTime);
      }
      if (MaxKeepLaneDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxKeepLaneShiftY != 0D) {
        size += 1 + 8;
      }
      if (MinKeepLaneOffset != 0D) {
        size += 1 + 8;
      }
      if (KeepLaneShiftCompensation != 0D) {
        size += 1 + 8;
      }
      if (moveDestLaneConfigTalbe_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveDestLaneConfigTalbe);
      }
      if (MoveDestLaneCompensation != 0D) {
        size += 1 + 8;
      }
      if (MaxKappaThreshold != 0D) {
        size += 1 + 8;
      }
      if (KappaMoveDestLaneCompensation != 0D) {
        size += 1 + 8;
      }
      if (StartPlanPointFrom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartPlanPointFrom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NaviPathDeciderConfig other) {
      if (other == null) {
        return;
      }
      if (other.MinPathLength != 0D) {
        MinPathLength = other.MinPathLength;
      }
      if (other.MinLookForwardTime != 0) {
        MinLookForwardTime = other.MinLookForwardTime;
      }
      if (other.MaxKeepLaneDistance != 0D) {
        MaxKeepLaneDistance = other.MaxKeepLaneDistance;
      }
      if (other.MaxKeepLaneShiftY != 0D) {
        MaxKeepLaneShiftY = other.MaxKeepLaneShiftY;
      }
      if (other.MinKeepLaneOffset != 0D) {
        MinKeepLaneOffset = other.MinKeepLaneOffset;
      }
      if (other.KeepLaneShiftCompensation != 0D) {
        KeepLaneShiftCompensation = other.KeepLaneShiftCompensation;
      }
      if (other.moveDestLaneConfigTalbe_ != null) {
        if (moveDestLaneConfigTalbe_ == null) {
          moveDestLaneConfigTalbe_ = new global::Apollo.Planning.MoveDestLaneConfigTable();
        }
        MoveDestLaneConfigTalbe.MergeFrom(other.MoveDestLaneConfigTalbe);
      }
      if (other.MoveDestLaneCompensation != 0D) {
        MoveDestLaneCompensation = other.MoveDestLaneCompensation;
      }
      if (other.MaxKappaThreshold != 0D) {
        MaxKappaThreshold = other.MaxKappaThreshold;
      }
      if (other.KappaMoveDestLaneCompensation != 0D) {
        KappaMoveDestLaneCompensation = other.KappaMoveDestLaneCompensation;
      }
      if (other.StartPlanPointFrom != 0) {
        StartPlanPointFrom = other.StartPlanPointFrom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MinPathLength = input.ReadDouble();
            break;
          }
          case 16: {
            MinLookForwardTime = input.ReadUInt32();
            break;
          }
          case 25: {
            MaxKeepLaneDistance = input.ReadDouble();
            break;
          }
          case 33: {
            MaxKeepLaneShiftY = input.ReadDouble();
            break;
          }
          case 41: {
            MinKeepLaneOffset = input.ReadDouble();
            break;
          }
          case 49: {
            KeepLaneShiftCompensation = input.ReadDouble();
            break;
          }
          case 58: {
            if (moveDestLaneConfigTalbe_ == null) {
              moveDestLaneConfigTalbe_ = new global::Apollo.Planning.MoveDestLaneConfigTable();
            }
            input.ReadMessage(moveDestLaneConfigTalbe_);
            break;
          }
          case 65: {
            MoveDestLaneCompensation = input.ReadDouble();
            break;
          }
          case 73: {
            MaxKappaThreshold = input.ReadDouble();
            break;
          }
          case 81: {
            KappaMoveDestLaneCompensation = input.ReadDouble();
            break;
          }
          case 88: {
            StartPlanPointFrom = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveDestLaneConfigTable : pb::IMessage<MoveDestLaneConfigTable> {
    private static readonly pb::MessageParser<MoveDestLaneConfigTable> _parser = new pb::MessageParser<MoveDestLaneConfigTable>(() => new MoveDestLaneConfigTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveDestLaneConfigTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.NaviPathDeciderConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveDestLaneConfigTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveDestLaneConfigTable(MoveDestLaneConfigTable other) : this() {
      lateralShift_ = other.lateralShift_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveDestLaneConfigTable Clone() {
      return new MoveDestLaneConfigTable(this);
    }

    /// <summary>Field number for the "lateral_shift" field.</summary>
    public const int LateralShiftFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.ShiftConfig> _repeated_lateralShift_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Planning.ShiftConfig.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.ShiftConfig> lateralShift_ = new pbc::RepeatedField<global::Apollo.Planning.ShiftConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.ShiftConfig> LateralShift {
      get { return lateralShift_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveDestLaneConfigTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveDestLaneConfigTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lateralShift_.Equals(other.lateralShift_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lateralShift_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lateralShift_.WriteTo(output, _repeated_lateralShift_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lateralShift_.CalculateSize(_repeated_lateralShift_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveDestLaneConfigTable other) {
      if (other == null) {
        return;
      }
      lateralShift_.Add(other.lateralShift_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lateralShift_.AddEntriesFrom(input, _repeated_lateralShift_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShiftConfig : pb::IMessage<ShiftConfig> {
    private static readonly pb::MessageParser<ShiftConfig> _parser = new pb::MessageParser<ShiftConfig>(() => new ShiftConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShiftConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.NaviPathDeciderConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShiftConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShiftConfig(ShiftConfig other) : this() {
      maxSpeed_ = other.maxSpeed_;
      maxMoveDestLaneShiftY_ = other.maxMoveDestLaneShiftY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShiftConfig Clone() {
      return new ShiftConfig(this);
    }

    /// <summary>Field number for the "max_speed" field.</summary>
    public const int MaxSpeedFieldNumber = 1;
    private double maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "max_move_dest_lane_shift_y" field.</summary>
    public const int MaxMoveDestLaneShiftYFieldNumber = 3;
    private double maxMoveDestLaneShiftY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxMoveDestLaneShiftY {
      get { return maxMoveDestLaneShiftY_; }
      set {
        maxMoveDestLaneShiftY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShiftConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShiftConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxSpeed != other.MaxSpeed) return false;
      if (MaxMoveDestLaneShiftY != other.MaxMoveDestLaneShiftY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxSpeed != 0D) hash ^= MaxSpeed.GetHashCode();
      if (MaxMoveDestLaneShiftY != 0D) hash ^= MaxMoveDestLaneShiftY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxSpeed);
      }
      if (MaxMoveDestLaneShiftY != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxMoveDestLaneShiftY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxSpeed != 0D) {
        size += 1 + 8;
      }
      if (MaxMoveDestLaneShiftY != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShiftConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxSpeed != 0D) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.MaxMoveDestLaneShiftY != 0D) {
        MaxMoveDestLaneShiftY = other.MaxMoveDestLaneShiftY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            MaxMoveDestLaneShiftY = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
