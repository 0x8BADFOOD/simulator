// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_poly_path_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/dp_poly_path_config.proto</summary>
  public static partial class DpPolyPathConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/dp_poly_path_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DpPolyPathConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL2RwX3BvbHlfcGF0aF9jb25maWcu",
            "cHJvdG8SD2Fwb2xsby5wbGFubmluZxo0bW9kdWxlcy9wbGFubmluZy9wcm90",
            "by93YXlwb2ludF9zYW1wbGVyX2NvbmZpZy5wcm90byLnAwoQRHBQb2x5UGF0",
            "aENvbmZpZxJHChd3YXlwb2ludF9zYW1wbGVyX2NvbmZpZxgBIAEoCzImLmFw",
            "b2xsby5wbGFubmluZy5XYXlwb2ludFNhbXBsZXJDb25maWcSGgoSZXZhbF90",
            "aW1lX2ludGVydmFsGAIgASgBEhcKD3BhdGhfcmVzb2x1dGlvbhgDIAEoARIg",
            "ChhvYnN0YWNsZV9pZ25vcmVfZGlzdGFuY2UYBCABKAESIwobb2JzdGFjbGVf",
            "Y29sbGlzaW9uX2Rpc3RhbmNlGAUgASgBEh4KFm9ic3RhY2xlX3Jpc2tfZGlz",
            "dGFuY2UYBiABKAESHwoXb2JzdGFjbGVfY29sbGlzaW9uX2Nvc3QYByABKAES",
            "EwoLcGF0aF9sX2Nvc3QYCCABKAESFAoMcGF0aF9kbF9jb3N0GAkgASgBEhUK",
            "DXBhdGhfZGRsX2Nvc3QYCiABKAESHAoUcGF0aF9sX2Nvc3RfcGFyYW1fbDAY",
            "CyABKAESGwoTcGF0aF9sX2Nvc3RfcGFyYW1fYhgMIAEoARIbChNwYXRoX2xf",
            "Y29zdF9wYXJhbV9rGA0gASgBEhoKEnBhdGhfb3V0X2xhbmVfY29zdBgOIAEo",
            "ARIXCg9wYXRoX2VuZF9sX2Nvc3QYDyABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Planning.WaypointSamplerConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.DpPolyPathConfig), global::Apollo.Planning.DpPolyPathConfig.Parser, new[]{ "WaypointSamplerConfig", "EvalTimeInterval", "PathResolution", "ObstacleIgnoreDistance", "ObstacleCollisionDistance", "ObstacleRiskDistance", "ObstacleCollisionCost", "PathLCost", "PathDlCost", "PathDdlCost", "PathLCostParamL0", "PathLCostParamB", "PathLCostParamK", "PathOutLaneCost", "PathEndLCost" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DpPolyPathConfig : pb::IMessage<DpPolyPathConfig> {
    private static readonly pb::MessageParser<DpPolyPathConfig> _parser = new pb::MessageParser<DpPolyPathConfig>(() => new DpPolyPathConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DpPolyPathConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.DpPolyPathConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpPolyPathConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpPolyPathConfig(DpPolyPathConfig other) : this() {
      WaypointSamplerConfig = other.waypointSamplerConfig_ != null ? other.WaypointSamplerConfig.Clone() : null;
      evalTimeInterval_ = other.evalTimeInterval_;
      pathResolution_ = other.pathResolution_;
      obstacleIgnoreDistance_ = other.obstacleIgnoreDistance_;
      obstacleCollisionDistance_ = other.obstacleCollisionDistance_;
      obstacleRiskDistance_ = other.obstacleRiskDistance_;
      obstacleCollisionCost_ = other.obstacleCollisionCost_;
      pathLCost_ = other.pathLCost_;
      pathDlCost_ = other.pathDlCost_;
      pathDdlCost_ = other.pathDdlCost_;
      pathLCostParamL0_ = other.pathLCostParamL0_;
      pathLCostParamB_ = other.pathLCostParamB_;
      pathLCostParamK_ = other.pathLCostParamK_;
      pathOutLaneCost_ = other.pathOutLaneCost_;
      pathEndLCost_ = other.pathEndLCost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DpPolyPathConfig Clone() {
      return new DpPolyPathConfig(this);
    }

    /// <summary>Field number for the "waypoint_sampler_config" field.</summary>
    public const int WaypointSamplerConfigFieldNumber = 1;
    private global::Apollo.Planning.WaypointSamplerConfig waypointSamplerConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.WaypointSamplerConfig WaypointSamplerConfig {
      get { return waypointSamplerConfig_; }
      set {
        waypointSamplerConfig_ = value;
      }
    }

    /// <summary>Field number for the "eval_time_interval" field.</summary>
    public const int EvalTimeIntervalFieldNumber = 2;
    private double evalTimeInterval_;
    /// <summary>
    /// Trajectory Cost Config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EvalTimeInterval {
      get { return evalTimeInterval_; }
      set {
        evalTimeInterval_ = value;
      }
    }

    /// <summary>Field number for the "path_resolution" field.</summary>
    public const int PathResolutionFieldNumber = 3;
    private double pathResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathResolution {
      get { return pathResolution_; }
      set {
        pathResolution_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_ignore_distance" field.</summary>
    public const int ObstacleIgnoreDistanceFieldNumber = 4;
    private double obstacleIgnoreDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleIgnoreDistance {
      get { return obstacleIgnoreDistance_; }
      set {
        obstacleIgnoreDistance_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_collision_distance" field.</summary>
    public const int ObstacleCollisionDistanceFieldNumber = 5;
    private double obstacleCollisionDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleCollisionDistance {
      get { return obstacleCollisionDistance_; }
      set {
        obstacleCollisionDistance_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_risk_distance" field.</summary>
    public const int ObstacleRiskDistanceFieldNumber = 6;
    private double obstacleRiskDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleRiskDistance {
      get { return obstacleRiskDistance_; }
      set {
        obstacleRiskDistance_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_collision_cost" field.</summary>
    public const int ObstacleCollisionCostFieldNumber = 7;
    private double obstacleCollisionCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleCollisionCost {
      get { return obstacleCollisionCost_; }
      set {
        obstacleCollisionCost_ = value;
      }
    }

    /// <summary>Field number for the "path_l_cost" field.</summary>
    public const int PathLCostFieldNumber = 8;
    private double pathLCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathLCost {
      get { return pathLCost_; }
      set {
        pathLCost_ = value;
      }
    }

    /// <summary>Field number for the "path_dl_cost" field.</summary>
    public const int PathDlCostFieldNumber = 9;
    private double pathDlCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathDlCost {
      get { return pathDlCost_; }
      set {
        pathDlCost_ = value;
      }
    }

    /// <summary>Field number for the "path_ddl_cost" field.</summary>
    public const int PathDdlCostFieldNumber = 10;
    private double pathDdlCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathDdlCost {
      get { return pathDdlCost_; }
      set {
        pathDdlCost_ = value;
      }
    }

    /// <summary>Field number for the "path_l_cost_param_l0" field.</summary>
    public const int PathLCostParamL0FieldNumber = 11;
    private double pathLCostParamL0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathLCostParamL0 {
      get { return pathLCostParamL0_; }
      set {
        pathLCostParamL0_ = value;
      }
    }

    /// <summary>Field number for the "path_l_cost_param_b" field.</summary>
    public const int PathLCostParamBFieldNumber = 12;
    private double pathLCostParamB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathLCostParamB {
      get { return pathLCostParamB_; }
      set {
        pathLCostParamB_ = value;
      }
    }

    /// <summary>Field number for the "path_l_cost_param_k" field.</summary>
    public const int PathLCostParamKFieldNumber = 13;
    private double pathLCostParamK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathLCostParamK {
      get { return pathLCostParamK_; }
      set {
        pathLCostParamK_ = value;
      }
    }

    /// <summary>Field number for the "path_out_lane_cost" field.</summary>
    public const int PathOutLaneCostFieldNumber = 14;
    private double pathOutLaneCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathOutLaneCost {
      get { return pathOutLaneCost_; }
      set {
        pathOutLaneCost_ = value;
      }
    }

    /// <summary>Field number for the "path_end_l_cost" field.</summary>
    public const int PathEndLCostFieldNumber = 15;
    private double pathEndLCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PathEndLCost {
      get { return pathEndLCost_; }
      set {
        pathEndLCost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DpPolyPathConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DpPolyPathConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WaypointSamplerConfig, other.WaypointSamplerConfig)) return false;
      if (EvalTimeInterval != other.EvalTimeInterval) return false;
      if (PathResolution != other.PathResolution) return false;
      if (ObstacleIgnoreDistance != other.ObstacleIgnoreDistance) return false;
      if (ObstacleCollisionDistance != other.ObstacleCollisionDistance) return false;
      if (ObstacleRiskDistance != other.ObstacleRiskDistance) return false;
      if (ObstacleCollisionCost != other.ObstacleCollisionCost) return false;
      if (PathLCost != other.PathLCost) return false;
      if (PathDlCost != other.PathDlCost) return false;
      if (PathDdlCost != other.PathDdlCost) return false;
      if (PathLCostParamL0 != other.PathLCostParamL0) return false;
      if (PathLCostParamB != other.PathLCostParamB) return false;
      if (PathLCostParamK != other.PathLCostParamK) return false;
      if (PathOutLaneCost != other.PathOutLaneCost) return false;
      if (PathEndLCost != other.PathEndLCost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (waypointSamplerConfig_ != null) hash ^= WaypointSamplerConfig.GetHashCode();
      if (EvalTimeInterval != 0D) hash ^= EvalTimeInterval.GetHashCode();
      if (PathResolution != 0D) hash ^= PathResolution.GetHashCode();
      if (ObstacleIgnoreDistance != 0D) hash ^= ObstacleIgnoreDistance.GetHashCode();
      if (ObstacleCollisionDistance != 0D) hash ^= ObstacleCollisionDistance.GetHashCode();
      if (ObstacleRiskDistance != 0D) hash ^= ObstacleRiskDistance.GetHashCode();
      if (ObstacleCollisionCost != 0D) hash ^= ObstacleCollisionCost.GetHashCode();
      if (PathLCost != 0D) hash ^= PathLCost.GetHashCode();
      if (PathDlCost != 0D) hash ^= PathDlCost.GetHashCode();
      if (PathDdlCost != 0D) hash ^= PathDdlCost.GetHashCode();
      if (PathLCostParamL0 != 0D) hash ^= PathLCostParamL0.GetHashCode();
      if (PathLCostParamB != 0D) hash ^= PathLCostParamB.GetHashCode();
      if (PathLCostParamK != 0D) hash ^= PathLCostParamK.GetHashCode();
      if (PathOutLaneCost != 0D) hash ^= PathOutLaneCost.GetHashCode();
      if (PathEndLCost != 0D) hash ^= PathEndLCost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (waypointSamplerConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WaypointSamplerConfig);
      }
      if (EvalTimeInterval != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(EvalTimeInterval);
      }
      if (PathResolution != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PathResolution);
      }
      if (ObstacleIgnoreDistance != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ObstacleIgnoreDistance);
      }
      if (ObstacleCollisionDistance != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ObstacleCollisionDistance);
      }
      if (ObstacleRiskDistance != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ObstacleRiskDistance);
      }
      if (ObstacleCollisionCost != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ObstacleCollisionCost);
      }
      if (PathLCost != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PathLCost);
      }
      if (PathDlCost != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PathDlCost);
      }
      if (PathDdlCost != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(PathDdlCost);
      }
      if (PathLCostParamL0 != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(PathLCostParamL0);
      }
      if (PathLCostParamB != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(PathLCostParamB);
      }
      if (PathLCostParamK != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(PathLCostParamK);
      }
      if (PathOutLaneCost != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(PathOutLaneCost);
      }
      if (PathEndLCost != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(PathEndLCost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (waypointSamplerConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WaypointSamplerConfig);
      }
      if (EvalTimeInterval != 0D) {
        size += 1 + 8;
      }
      if (PathResolution != 0D) {
        size += 1 + 8;
      }
      if (ObstacleIgnoreDistance != 0D) {
        size += 1 + 8;
      }
      if (ObstacleCollisionDistance != 0D) {
        size += 1 + 8;
      }
      if (ObstacleRiskDistance != 0D) {
        size += 1 + 8;
      }
      if (ObstacleCollisionCost != 0D) {
        size += 1 + 8;
      }
      if (PathLCost != 0D) {
        size += 1 + 8;
      }
      if (PathDlCost != 0D) {
        size += 1 + 8;
      }
      if (PathDdlCost != 0D) {
        size += 1 + 8;
      }
      if (PathLCostParamL0 != 0D) {
        size += 1 + 8;
      }
      if (PathLCostParamB != 0D) {
        size += 1 + 8;
      }
      if (PathLCostParamK != 0D) {
        size += 1 + 8;
      }
      if (PathOutLaneCost != 0D) {
        size += 1 + 8;
      }
      if (PathEndLCost != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DpPolyPathConfig other) {
      if (other == null) {
        return;
      }
      if (other.waypointSamplerConfig_ != null) {
        if (waypointSamplerConfig_ == null) {
          waypointSamplerConfig_ = new global::Apollo.Planning.WaypointSamplerConfig();
        }
        WaypointSamplerConfig.MergeFrom(other.WaypointSamplerConfig);
      }
      if (other.EvalTimeInterval != 0D) {
        EvalTimeInterval = other.EvalTimeInterval;
      }
      if (other.PathResolution != 0D) {
        PathResolution = other.PathResolution;
      }
      if (other.ObstacleIgnoreDistance != 0D) {
        ObstacleIgnoreDistance = other.ObstacleIgnoreDistance;
      }
      if (other.ObstacleCollisionDistance != 0D) {
        ObstacleCollisionDistance = other.ObstacleCollisionDistance;
      }
      if (other.ObstacleRiskDistance != 0D) {
        ObstacleRiskDistance = other.ObstacleRiskDistance;
      }
      if (other.ObstacleCollisionCost != 0D) {
        ObstacleCollisionCost = other.ObstacleCollisionCost;
      }
      if (other.PathLCost != 0D) {
        PathLCost = other.PathLCost;
      }
      if (other.PathDlCost != 0D) {
        PathDlCost = other.PathDlCost;
      }
      if (other.PathDdlCost != 0D) {
        PathDdlCost = other.PathDdlCost;
      }
      if (other.PathLCostParamL0 != 0D) {
        PathLCostParamL0 = other.PathLCostParamL0;
      }
      if (other.PathLCostParamB != 0D) {
        PathLCostParamB = other.PathLCostParamB;
      }
      if (other.PathLCostParamK != 0D) {
        PathLCostParamK = other.PathLCostParamK;
      }
      if (other.PathOutLaneCost != 0D) {
        PathOutLaneCost = other.PathOutLaneCost;
      }
      if (other.PathEndLCost != 0D) {
        PathEndLCost = other.PathEndLCost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (waypointSamplerConfig_ == null) {
              waypointSamplerConfig_ = new global::Apollo.Planning.WaypointSamplerConfig();
            }
            input.ReadMessage(waypointSamplerConfig_);
            break;
          }
          case 17: {
            EvalTimeInterval = input.ReadDouble();
            break;
          }
          case 25: {
            PathResolution = input.ReadDouble();
            break;
          }
          case 33: {
            ObstacleIgnoreDistance = input.ReadDouble();
            break;
          }
          case 41: {
            ObstacleCollisionDistance = input.ReadDouble();
            break;
          }
          case 49: {
            ObstacleRiskDistance = input.ReadDouble();
            break;
          }
          case 57: {
            ObstacleCollisionCost = input.ReadDouble();
            break;
          }
          case 65: {
            PathLCost = input.ReadDouble();
            break;
          }
          case 73: {
            PathDlCost = input.ReadDouble();
            break;
          }
          case 81: {
            PathDdlCost = input.ReadDouble();
            break;
          }
          case 89: {
            PathLCostParamL0 = input.ReadDouble();
            break;
          }
          case 97: {
            PathLCostParamB = input.ReadDouble();
            break;
          }
          case 105: {
            PathLCostParamK = input.ReadDouble();
            break;
          }
          case 113: {
            PathOutLaneCost = input.ReadDouble();
            break;
          }
          case 121: {
            PathEndLCost = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
