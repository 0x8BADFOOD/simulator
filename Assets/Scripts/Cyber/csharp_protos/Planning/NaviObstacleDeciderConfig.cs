// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_obstacle_decider_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/navi_obstacle_decider_config.proto</summary>
  public static partial class NaviObstacleDeciderConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/navi_obstacle_decider_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NaviObstacleDeciderConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjltb2R1bGVzL3BsYW5uaW5nL3Byb3RvL25hdmlfb2JzdGFjbGVfZGVjaWRl",
            "cl9jb25maWcucHJvdG8SD2Fwb2xsby5wbGFubmluZyLUAgoZTmF2aU9ic3Rh",
            "Y2xlRGVjaWRlckNvbmZpZxIaChJtaW5fbnVkZ2VfZGlzdGFuY2UYASABKAES",
            "GgoSbWF4X251ZGdlX2Rpc3RhbmNlGAIgASgBEh0KFW1heF9hbGxvd19udWRn",
            "ZV9zcGVlZBgDIAEoARIVCg1zYWZlX2Rpc3RhbmNlGAQgASgBEh0KFW51ZGdl",
            "X2FsbG93X3RvbGVyYW5jZRgFIAEoARIVCg1jeWNsZXNfbnVtYmVyGAYgASgN",
            "EhcKD2p1ZGdlX2Rpc19jb2VmZhgHIAEoARIXCg9iYXNpc19kaXNfdmFsdWUY",
            "CCABKAESHgoWbGF0ZXJhbF92ZWxvY2l0eV92YWx1ZRgJIAEoARIiChpzcGVl",
            "ZF9kZWNpZGVyX2RldGVjdF9yYW5nZRgKIAEoARIdChVtYXhfa2VlcF9udWRn",
            "ZV9jeWNsZXMYCyABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.NaviObstacleDeciderConfig), global::Apollo.Planning.NaviObstacleDeciderConfig.Parser, new[]{ "MinNudgeDistance", "MaxNudgeDistance", "MaxAllowNudgeSpeed", "SafeDistance", "NudgeAllowTolerance", "CyclesNumber", "JudgeDisCoeff", "BasisDisValue", "LateralVelocityValue", "SpeedDeciderDetectRange", "MaxKeepNudgeCycles" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NaviObstacleDeciderConfig : pb::IMessage<NaviObstacleDeciderConfig> {
    private static readonly pb::MessageParser<NaviObstacleDeciderConfig> _parser = new pb::MessageParser<NaviObstacleDeciderConfig>(() => new NaviObstacleDeciderConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NaviObstacleDeciderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.NaviObstacleDeciderConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviObstacleDeciderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviObstacleDeciderConfig(NaviObstacleDeciderConfig other) : this() {
      minNudgeDistance_ = other.minNudgeDistance_;
      maxNudgeDistance_ = other.maxNudgeDistance_;
      maxAllowNudgeSpeed_ = other.maxAllowNudgeSpeed_;
      safeDistance_ = other.safeDistance_;
      nudgeAllowTolerance_ = other.nudgeAllowTolerance_;
      cyclesNumber_ = other.cyclesNumber_;
      judgeDisCoeff_ = other.judgeDisCoeff_;
      basisDisValue_ = other.basisDisValue_;
      lateralVelocityValue_ = other.lateralVelocityValue_;
      speedDeciderDetectRange_ = other.speedDeciderDetectRange_;
      maxKeepNudgeCycles_ = other.maxKeepNudgeCycles_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NaviObstacleDeciderConfig Clone() {
      return new NaviObstacleDeciderConfig(this);
    }

    /// <summary>Field number for the "min_nudge_distance" field.</summary>
    public const int MinNudgeDistanceFieldNumber = 1;
    private double minNudgeDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinNudgeDistance {
      get { return minNudgeDistance_; }
      set {
        minNudgeDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_nudge_distance" field.</summary>
    public const int MaxNudgeDistanceFieldNumber = 2;
    private double maxNudgeDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxNudgeDistance {
      get { return maxNudgeDistance_; }
      set {
        maxNudgeDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_allow_nudge_speed" field.</summary>
    public const int MaxAllowNudgeSpeedFieldNumber = 3;
    private double maxAllowNudgeSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAllowNudgeSpeed {
      get { return maxAllowNudgeSpeed_; }
      set {
        maxAllowNudgeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "safe_distance" field.</summary>
    public const int SafeDistanceFieldNumber = 4;
    private double safeDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SafeDistance {
      get { return safeDistance_; }
      set {
        safeDistance_ = value;
      }
    }

    /// <summary>Field number for the "nudge_allow_tolerance" field.</summary>
    public const int NudgeAllowToleranceFieldNumber = 5;
    private double nudgeAllowTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NudgeAllowTolerance {
      get { return nudgeAllowTolerance_; }
      set {
        nudgeAllowTolerance_ = value;
      }
    }

    /// <summary>Field number for the "cycles_number" field.</summary>
    public const int CyclesNumberFieldNumber = 6;
    private uint cyclesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CyclesNumber {
      get { return cyclesNumber_; }
      set {
        cyclesNumber_ = value;
      }
    }

    /// <summary>Field number for the "judge_dis_coeff" field.</summary>
    public const int JudgeDisCoeffFieldNumber = 7;
    private double judgeDisCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double JudgeDisCoeff {
      get { return judgeDisCoeff_; }
      set {
        judgeDisCoeff_ = value;
      }
    }

    /// <summary>Field number for the "basis_dis_value" field.</summary>
    public const int BasisDisValueFieldNumber = 8;
    private double basisDisValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BasisDisValue {
      get { return basisDisValue_; }
      set {
        basisDisValue_ = value;
      }
    }

    /// <summary>Field number for the "lateral_velocity_value" field.</summary>
    public const int LateralVelocityValueFieldNumber = 9;
    private double lateralVelocityValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralVelocityValue {
      get { return lateralVelocityValue_; }
      set {
        lateralVelocityValue_ = value;
      }
    }

    /// <summary>Field number for the "speed_decider_detect_range" field.</summary>
    public const int SpeedDeciderDetectRangeFieldNumber = 10;
    private double speedDeciderDetectRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedDeciderDetectRange {
      get { return speedDeciderDetectRange_; }
      set {
        speedDeciderDetectRange_ = value;
      }
    }

    /// <summary>Field number for the "max_keep_nudge_cycles" field.</summary>
    public const int MaxKeepNudgeCyclesFieldNumber = 11;
    private uint maxKeepNudgeCycles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxKeepNudgeCycles {
      get { return maxKeepNudgeCycles_; }
      set {
        maxKeepNudgeCycles_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NaviObstacleDeciderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NaviObstacleDeciderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinNudgeDistance != other.MinNudgeDistance) return false;
      if (MaxNudgeDistance != other.MaxNudgeDistance) return false;
      if (MaxAllowNudgeSpeed != other.MaxAllowNudgeSpeed) return false;
      if (SafeDistance != other.SafeDistance) return false;
      if (NudgeAllowTolerance != other.NudgeAllowTolerance) return false;
      if (CyclesNumber != other.CyclesNumber) return false;
      if (JudgeDisCoeff != other.JudgeDisCoeff) return false;
      if (BasisDisValue != other.BasisDisValue) return false;
      if (LateralVelocityValue != other.LateralVelocityValue) return false;
      if (SpeedDeciderDetectRange != other.SpeedDeciderDetectRange) return false;
      if (MaxKeepNudgeCycles != other.MaxKeepNudgeCycles) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinNudgeDistance != 0D) hash ^= MinNudgeDistance.GetHashCode();
      if (MaxNudgeDistance != 0D) hash ^= MaxNudgeDistance.GetHashCode();
      if (MaxAllowNudgeSpeed != 0D) hash ^= MaxAllowNudgeSpeed.GetHashCode();
      if (SafeDistance != 0D) hash ^= SafeDistance.GetHashCode();
      if (NudgeAllowTolerance != 0D) hash ^= NudgeAllowTolerance.GetHashCode();
      if (CyclesNumber != 0) hash ^= CyclesNumber.GetHashCode();
      if (JudgeDisCoeff != 0D) hash ^= JudgeDisCoeff.GetHashCode();
      if (BasisDisValue != 0D) hash ^= BasisDisValue.GetHashCode();
      if (LateralVelocityValue != 0D) hash ^= LateralVelocityValue.GetHashCode();
      if (SpeedDeciderDetectRange != 0D) hash ^= SpeedDeciderDetectRange.GetHashCode();
      if (MaxKeepNudgeCycles != 0) hash ^= MaxKeepNudgeCycles.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinNudgeDistance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MinNudgeDistance);
      }
      if (MaxNudgeDistance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MaxNudgeDistance);
      }
      if (MaxAllowNudgeSpeed != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxAllowNudgeSpeed);
      }
      if (SafeDistance != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SafeDistance);
      }
      if (NudgeAllowTolerance != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(NudgeAllowTolerance);
      }
      if (CyclesNumber != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CyclesNumber);
      }
      if (JudgeDisCoeff != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(JudgeDisCoeff);
      }
      if (BasisDisValue != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(BasisDisValue);
      }
      if (LateralVelocityValue != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LateralVelocityValue);
      }
      if (SpeedDeciderDetectRange != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(SpeedDeciderDetectRange);
      }
      if (MaxKeepNudgeCycles != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MaxKeepNudgeCycles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinNudgeDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxNudgeDistance != 0D) {
        size += 1 + 8;
      }
      if (MaxAllowNudgeSpeed != 0D) {
        size += 1 + 8;
      }
      if (SafeDistance != 0D) {
        size += 1 + 8;
      }
      if (NudgeAllowTolerance != 0D) {
        size += 1 + 8;
      }
      if (CyclesNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CyclesNumber);
      }
      if (JudgeDisCoeff != 0D) {
        size += 1 + 8;
      }
      if (BasisDisValue != 0D) {
        size += 1 + 8;
      }
      if (LateralVelocityValue != 0D) {
        size += 1 + 8;
      }
      if (SpeedDeciderDetectRange != 0D) {
        size += 1 + 8;
      }
      if (MaxKeepNudgeCycles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxKeepNudgeCycles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NaviObstacleDeciderConfig other) {
      if (other == null) {
        return;
      }
      if (other.MinNudgeDistance != 0D) {
        MinNudgeDistance = other.MinNudgeDistance;
      }
      if (other.MaxNudgeDistance != 0D) {
        MaxNudgeDistance = other.MaxNudgeDistance;
      }
      if (other.MaxAllowNudgeSpeed != 0D) {
        MaxAllowNudgeSpeed = other.MaxAllowNudgeSpeed;
      }
      if (other.SafeDistance != 0D) {
        SafeDistance = other.SafeDistance;
      }
      if (other.NudgeAllowTolerance != 0D) {
        NudgeAllowTolerance = other.NudgeAllowTolerance;
      }
      if (other.CyclesNumber != 0) {
        CyclesNumber = other.CyclesNumber;
      }
      if (other.JudgeDisCoeff != 0D) {
        JudgeDisCoeff = other.JudgeDisCoeff;
      }
      if (other.BasisDisValue != 0D) {
        BasisDisValue = other.BasisDisValue;
      }
      if (other.LateralVelocityValue != 0D) {
        LateralVelocityValue = other.LateralVelocityValue;
      }
      if (other.SpeedDeciderDetectRange != 0D) {
        SpeedDeciderDetectRange = other.SpeedDeciderDetectRange;
      }
      if (other.MaxKeepNudgeCycles != 0) {
        MaxKeepNudgeCycles = other.MaxKeepNudgeCycles;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MinNudgeDistance = input.ReadDouble();
            break;
          }
          case 17: {
            MaxNudgeDistance = input.ReadDouble();
            break;
          }
          case 25: {
            MaxAllowNudgeSpeed = input.ReadDouble();
            break;
          }
          case 33: {
            SafeDistance = input.ReadDouble();
            break;
          }
          case 41: {
            NudgeAllowTolerance = input.ReadDouble();
            break;
          }
          case 48: {
            CyclesNumber = input.ReadUInt32();
            break;
          }
          case 57: {
            JudgeDisCoeff = input.ReadDouble();
            break;
          }
          case 65: {
            BasisDisValue = input.ReadDouble();
            break;
          }
          case 73: {
            LateralVelocityValue = input.ReadDouble();
            break;
          }
          case 81: {
            SpeedDeciderDetectRange = input.ReadDouble();
            break;
          }
          case 88: {
            MaxKeepNudgeCycles = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
