// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/planning.proto</summary>
  public static partial class PlanningReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/planning.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlanningReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BsYW5uaW5nLnByb3RvEg9hcG9s",
            "bG8ucGxhbm5pbmcaIm1vZHVsZXMvY2FuYnVzL3Byb3RvL2NoYXNzaXMucHJv",
            "dG8aJm1vZHVsZXMvY29tbW9uL3Byb3RvL2RyaXZlX3N0YXRlLnByb3RvGiNt",
            "b2R1bGVzL2NvbW1vbi9wcm90by9nZW9tZXRyeS5wcm90bxohbW9kdWxlcy9j",
            "b21tb24vcHJvdG8vaGVhZGVyLnByb3RvGiRtb2R1bGVzL2NvbW1vbi9wcm90",
            "by9wbmNfcG9pbnQucHJvdG8aHm1vZHVsZXMvbWFwL3Byb3RvL21hcF9pZC5w",
            "cm90bxolbW9kdWxlcy9wbGFubmluZy9wcm90by9kZWNpc2lvbi5wcm90bxou",
            "bW9kdWxlcy9wbGFubmluZy9wcm90by9wbGFubmluZ19pbnRlcm5hbC5wcm90",
            "byLVAQoKQURDU2lnbmFscxI2CgZzaWduYWwYASADKA4yJi5hcG9sbG8ucGxh",
            "bm5pbmcuQURDU2lnbmFscy5TaWduYWxUeXBlIo4BCgpTaWduYWxUeXBlEhQK",
            "EFNJR05BTFRZUEVfRFVNTVkQABINCglMRUZUX1RVUk4QARIOCgpSSUdIVF9U",
            "VVJOEAISEgoOTE9XX0JFQU1fTElHSFQQAxITCg9ISUdIX0JFQU1fTElHSFQQ",
            "BBINCglGT0dfTElHSFQQBRITCg9FTUVSR0VOQ1lfTElHSFQQBiIpCgVFU3Rv",
            "cBIQCghpc19lc3RvcBgBIAEoCBIOCgZyZWFzb24YAiABKAkiKgoJVGFza1N0",
            "YXRzEgwKBG5hbWUYASABKAkSDwoHdGltZV9tcxgCIAEoASJxCgxMYXRlbmN5",
            "U3RhdHMSFQoNdG90YWxfdGltZV9tcxgBIAEoARIuCgp0YXNrX3N0YXRzGAIg",
            "AygLMhouYXBvbGxvLnBsYW5uaW5nLlRhc2tTdGF0cxIaChJpbml0X2ZyYW1l",
            "X3RpbWVfbXMYAyABKAEinwIKB1JTU0luZm8SEwoLaXNfcnNzX3NhZmUYASAB",
            "KAgSFAoMY3VyX2Rpc3RfbG9uGAIgASgBEhkKEXJzc19zYWZlX2Rpc3RfbG9u",
            "GAMgASgBEh0KFWFjY19sb25fcmFuZ2VfbWluaW11bRgEIAEoARIdChVhY2Nf",
            "bG9uX3JhbmdlX21heGltdW0YBSABKAESIgoaYWNjX2xhdF9sZWZ0X3Jhbmdl",
            "X21pbmltdW0YBiABKAESIgoaYWNjX2xhdF9sZWZ0X3JhbmdlX21heGltdW0Y",
            "ByABKAESIwobYWNjX2xhdF9yaWdodF9yYW5nZV9taW5pbXVtGAggASgBEiMK",
            "G2FjY19sYXRfcmlnaHRfcmFuZ2VfbWF4aW11bRgJIAEoASK/CAoNQURDVHJh",
            "amVjdG9yeRIlCgZoZWFkZXIYASABKAsyFS5hcG9sbG8uY29tbW9uLkhlYWRl",
            "chIZChF0b3RhbF9wYXRoX2xlbmd0aBgCIAEoARIXCg90b3RhbF9wYXRoX3Rp",
            "bWUYAyABKAESOAoQdHJhamVjdG9yeV9wb2ludBgMIAMoCzIeLmFwb2xsby5j",
            "b21tb24uVHJhamVjdG9yeVBvaW50EiUKBWVzdG9wGAYgASgLMhYuYXBvbGxv",
            "LnBsYW5uaW5nLkVTdG9wEiwKCnBhdGhfcG9pbnQYDSADKAsyGC5hcG9sbG8u",
            "Y29tbW9uLlBhdGhQb2ludBIRCglpc19yZXBsYW4YCSABKAgSFQoNcmVwbGFu",
            "X3JlYXNvbhgWIAEoCRIxCgRnZWFyGAogASgOMiMuYXBvbGxvLmNhbmJ1cy5D",
            "aGFzc2lzLkdlYXJQb3NpdGlvbhIxCghkZWNpc2lvbhgOIAEoCzIfLmFwb2xs",
            "by5wbGFubmluZy5EZWNpc2lvblJlc3VsdBI0Cg1sYXRlbmN5X3N0YXRzGA8g",
            "ASgLMh0uYXBvbGxvLnBsYW5uaW5nLkxhdGVuY3lTdGF0cxItCg5yb3V0aW5n",
            "X2hlYWRlchgQIAEoCzIVLmFwb2xsby5jb21tb24uSGVhZGVyEi4KBWRlYnVn",
            "GAggASgLMh8uYXBvbGxvLnBsYW5uaW5nX2ludGVybmFsLkRlYnVnEkwKE3Jp",
            "Z2h0X29mX3dheV9zdGF0dXMYESABKA4yLy5hcG9sbG8ucGxhbm5pbmcuQURD",
            "VHJhamVjdG9yeS5SaWdodE9mV2F5U3RhdHVzEiEKB2xhbmVfaWQYEiADKAsy",
            "EC5hcG9sbG8uaGRtYXAuSWQSMgoNZW5nYWdlX2FkdmljZRgTIAEoCzIbLmFw",
            "b2xsby5jb21tb24uRW5nYWdlQWR2aWNlEkYKD2NyaXRpY2FsX3JlZ2lvbhgU",
            "IAEoCzItLmFwb2xsby5wbGFubmluZy5BRENUcmFqZWN0b3J5LkNyaXRpY2Fs",
            "UmVnaW9uEkYKD3RyYWplY3RvcnlfdHlwZRgVIAEoDjItLmFwb2xsby5wbGFu",
            "bmluZy5BRENUcmFqZWN0b3J5LlRyYWplY3RvcnlUeXBlEioKCHJzc19pbmZv",
            "GGQgASgLMhguYXBvbGxvLnBsYW5uaW5nLlJTU0luZm8aOAoOQ3JpdGljYWxS",
            "ZWdpb24SJgoGcmVnaW9uGAEgAygLMhYuYXBvbGxvLmNvbW1vbi5Qb2x5Z29u",
            "IjIKEFJpZ2h0T2ZXYXlTdGF0dXMSDwoLVU5QUk9URUNURUQQABINCglQUk9U",
            "RUNURUQQASJQCg5UcmFqZWN0b3J5VHlwZRILCgdVTktOT1dOEAASCgoGTk9S",
            "TUFMEAESEQoNUEFUSF9GQUxMQkFDSxACEhIKDlNQRUVEX0ZBTExCQUNLEANi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Canbus.ChassisReflection.Descriptor, global::Apollo.Common.DriveStateReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.PncPointReflection.Descriptor, global::Apollo.Hdmap.MapIdReflection.Descriptor, global::Apollo.Planning.DecisionReflection.Descriptor, global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ADCSignals), global::Apollo.Planning.ADCSignals.Parser, new[]{ "Signal" }, null, new[]{ typeof(global::Apollo.Planning.ADCSignals.Types.SignalType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.EStop), global::Apollo.Planning.EStop.Parser, new[]{ "IsEstop", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.TaskStats), global::Apollo.Planning.TaskStats.Parser, new[]{ "Name", "TimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.LatencyStats), global::Apollo.Planning.LatencyStats.Parser, new[]{ "TotalTimeMs", "TaskStats", "InitFrameTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.RSSInfo), global::Apollo.Planning.RSSInfo.Parser, new[]{ "IsRssSafe", "CurDistLon", "RssSafeDistLon", "AccLonRangeMinimum", "AccLonRangeMaximum", "AccLatLeftRangeMinimum", "AccLatLeftRangeMaximum", "AccLatRightRangeMinimum", "AccLatRightRangeMaximum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ADCTrajectory), global::Apollo.Planning.ADCTrajectory.Parser, new[]{ "Header", "TotalPathLength", "TotalPathTime", "TrajectoryPoint", "Estop", "PathPoint", "IsReplan", "ReplanReason", "Gear", "Decision", "LatencyStats", "RoutingHeader", "Debug", "RightOfWayStatus", "LaneId", "EngageAdvice", "CriticalRegion", "TrajectoryType", "RssInfo" }, null, new[]{ typeof(global::Apollo.Planning.ADCTrajectory.Types.RightOfWayStatus), typeof(global::Apollo.Planning.ADCTrajectory.Types.TrajectoryType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.ADCTrajectory.Types.CriticalRegion), global::Apollo.Planning.ADCTrajectory.Types.CriticalRegion.Parser, new[]{ "Region" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ADCSignals : pb::IMessage<ADCSignals> {
    private static readonly pb::MessageParser<ADCSignals> _parser = new pb::MessageParser<ADCSignals>(() => new ADCSignals());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ADCSignals> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADCSignals() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADCSignals(ADCSignals other) : this() {
      signal_ = other.signal_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADCSignals Clone() {
      return new ADCSignals(this);
    }

    /// <summary>Field number for the "signal" field.</summary>
    public const int SignalFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Planning.ADCSignals.Types.SignalType> _repeated_signal_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Apollo.Planning.ADCSignals.Types.SignalType) x);
    private readonly pbc::RepeatedField<global::Apollo.Planning.ADCSignals.Types.SignalType> signal_ = new pbc::RepeatedField<global::Apollo.Planning.ADCSignals.Types.SignalType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.ADCSignals.Types.SignalType> Signal {
      get { return signal_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ADCSignals);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ADCSignals other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!signal_.Equals(other.signal_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= signal_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      signal_.WriteTo(output, _repeated_signal_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += signal_.CalculateSize(_repeated_signal_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ADCSignals other) {
      if (other == null) {
        return;
      }
      signal_.Add(other.signal_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            signal_.AddEntriesFrom(input, _repeated_signal_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ADCSignals message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SignalType {
        [pbr::OriginalName("SIGNALTYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("LEFT_TURN")] LeftTurn = 1,
        [pbr::OriginalName("RIGHT_TURN")] RightTurn = 2,
        [pbr::OriginalName("LOW_BEAM_LIGHT")] LowBeamLight = 3,
        [pbr::OriginalName("HIGH_BEAM_LIGHT")] HighBeamLight = 4,
        [pbr::OriginalName("FOG_LIGHT")] FogLight = 5,
        [pbr::OriginalName("EMERGENCY_LIGHT")] EmergencyLight = 6,
      }

    }
    #endregion

  }

  public sealed partial class EStop : pb::IMessage<EStop> {
    private static readonly pb::MessageParser<EStop> _parser = new pb::MessageParser<EStop>(() => new EStop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EStop(EStop other) : this() {
      isEstop_ = other.isEstop_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EStop Clone() {
      return new EStop(this);
    }

    /// <summary>Field number for the "is_estop" field.</summary>
    public const int IsEstopFieldNumber = 1;
    private bool isEstop_;
    /// <summary>
    /// is_estop == true when emergency stop is 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEstop {
      get { return isEstop_; }
      set {
        isEstop_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEstop != other.IsEstop) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEstop != false) hash ^= IsEstop.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsEstop != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEstop);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEstop != false) {
        size += 1 + 1;
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EStop other) {
      if (other == null) {
        return;
      }
      if (other.IsEstop != false) {
        IsEstop = other.IsEstop;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsEstop = input.ReadBool();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskStats : pb::IMessage<TaskStats> {
    private static readonly pb::MessageParser<TaskStats> _parser = new pb::MessageParser<TaskStats>(() => new TaskStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskStats(TaskStats other) : this() {
      name_ = other.name_;
      timeMs_ = other.timeMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskStats Clone() {
      return new TaskStats(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_ms" field.</summary>
    public const int TimeMsFieldNumber = 2;
    private double timeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeMs {
      get { return timeMs_; }
      set {
        timeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TimeMs != other.TimeMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TimeMs != 0D) hash ^= TimeMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TimeMs != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TimeMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TimeMs != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskStats other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TimeMs != 0D) {
        TimeMs = other.TimeMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            TimeMs = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LatencyStats : pb::IMessage<LatencyStats> {
    private static readonly pb::MessageParser<LatencyStats> _parser = new pb::MessageParser<LatencyStats>(() => new LatencyStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatencyStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatencyStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatencyStats(LatencyStats other) : this() {
      totalTimeMs_ = other.totalTimeMs_;
      taskStats_ = other.taskStats_.Clone();
      initFrameTimeMs_ = other.initFrameTimeMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatencyStats Clone() {
      return new LatencyStats(this);
    }

    /// <summary>Field number for the "total_time_ms" field.</summary>
    public const int TotalTimeMsFieldNumber = 1;
    private double totalTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalTimeMs {
      get { return totalTimeMs_; }
      set {
        totalTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "task_stats" field.</summary>
    public const int TaskStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Planning.TaskStats> _repeated_taskStats_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Planning.TaskStats.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Planning.TaskStats> taskStats_ = new pbc::RepeatedField<global::Apollo.Planning.TaskStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Planning.TaskStats> TaskStats {
      get { return taskStats_; }
    }

    /// <summary>Field number for the "init_frame_time_ms" field.</summary>
    public const int InitFrameTimeMsFieldNumber = 3;
    private double initFrameTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InitFrameTimeMs {
      get { return initFrameTimeMs_; }
      set {
        initFrameTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatencyStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatencyStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalTimeMs != other.TotalTimeMs) return false;
      if(!taskStats_.Equals(other.taskStats_)) return false;
      if (InitFrameTimeMs != other.InitFrameTimeMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalTimeMs != 0D) hash ^= TotalTimeMs.GetHashCode();
      hash ^= taskStats_.GetHashCode();
      if (InitFrameTimeMs != 0D) hash ^= InitFrameTimeMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalTimeMs != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TotalTimeMs);
      }
      taskStats_.WriteTo(output, _repeated_taskStats_codec);
      if (InitFrameTimeMs != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(InitFrameTimeMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalTimeMs != 0D) {
        size += 1 + 8;
      }
      size += taskStats_.CalculateSize(_repeated_taskStats_codec);
      if (InitFrameTimeMs != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatencyStats other) {
      if (other == null) {
        return;
      }
      if (other.TotalTimeMs != 0D) {
        TotalTimeMs = other.TotalTimeMs;
      }
      taskStats_.Add(other.taskStats_);
      if (other.InitFrameTimeMs != 0D) {
        InitFrameTimeMs = other.InitFrameTimeMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TotalTimeMs = input.ReadDouble();
            break;
          }
          case 18: {
            taskStats_.AddEntriesFrom(input, _repeated_taskStats_codec);
            break;
          }
          case 25: {
            InitFrameTimeMs = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RSSInfo : pb::IMessage<RSSInfo> {
    private static readonly pb::MessageParser<RSSInfo> _parser = new pb::MessageParser<RSSInfo>(() => new RSSInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RSSInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSSInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSSInfo(RSSInfo other) : this() {
      isRssSafe_ = other.isRssSafe_;
      curDistLon_ = other.curDistLon_;
      rssSafeDistLon_ = other.rssSafeDistLon_;
      accLonRangeMinimum_ = other.accLonRangeMinimum_;
      accLonRangeMaximum_ = other.accLonRangeMaximum_;
      accLatLeftRangeMinimum_ = other.accLatLeftRangeMinimum_;
      accLatLeftRangeMaximum_ = other.accLatLeftRangeMaximum_;
      accLatRightRangeMinimum_ = other.accLatRightRangeMinimum_;
      accLatRightRangeMaximum_ = other.accLatRightRangeMaximum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSSInfo Clone() {
      return new RSSInfo(this);
    }

    /// <summary>Field number for the "is_rss_safe" field.</summary>
    public const int IsRssSafeFieldNumber = 1;
    private bool isRssSafe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRssSafe {
      get { return isRssSafe_; }
      set {
        isRssSafe_ = value;
      }
    }

    /// <summary>Field number for the "cur_dist_lon" field.</summary>
    public const int CurDistLonFieldNumber = 2;
    private double curDistLon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurDistLon {
      get { return curDistLon_; }
      set {
        curDistLon_ = value;
      }
    }

    /// <summary>Field number for the "rss_safe_dist_lon" field.</summary>
    public const int RssSafeDistLonFieldNumber = 3;
    private double rssSafeDistLon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RssSafeDistLon {
      get { return rssSafeDistLon_; }
      set {
        rssSafeDistLon_ = value;
      }
    }

    /// <summary>Field number for the "acc_lon_range_minimum" field.</summary>
    public const int AccLonRangeMinimumFieldNumber = 4;
    private double accLonRangeMinimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccLonRangeMinimum {
      get { return accLonRangeMinimum_; }
      set {
        accLonRangeMinimum_ = value;
      }
    }

    /// <summary>Field number for the "acc_lon_range_maximum" field.</summary>
    public const int AccLonRangeMaximumFieldNumber = 5;
    private double accLonRangeMaximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccLonRangeMaximum {
      get { return accLonRangeMaximum_; }
      set {
        accLonRangeMaximum_ = value;
      }
    }

    /// <summary>Field number for the "acc_lat_left_range_minimum" field.</summary>
    public const int AccLatLeftRangeMinimumFieldNumber = 6;
    private double accLatLeftRangeMinimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccLatLeftRangeMinimum {
      get { return accLatLeftRangeMinimum_; }
      set {
        accLatLeftRangeMinimum_ = value;
      }
    }

    /// <summary>Field number for the "acc_lat_left_range_maximum" field.</summary>
    public const int AccLatLeftRangeMaximumFieldNumber = 7;
    private double accLatLeftRangeMaximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccLatLeftRangeMaximum {
      get { return accLatLeftRangeMaximum_; }
      set {
        accLatLeftRangeMaximum_ = value;
      }
    }

    /// <summary>Field number for the "acc_lat_right_range_minimum" field.</summary>
    public const int AccLatRightRangeMinimumFieldNumber = 8;
    private double accLatRightRangeMinimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccLatRightRangeMinimum {
      get { return accLatRightRangeMinimum_; }
      set {
        accLatRightRangeMinimum_ = value;
      }
    }

    /// <summary>Field number for the "acc_lat_right_range_maximum" field.</summary>
    public const int AccLatRightRangeMaximumFieldNumber = 9;
    private double accLatRightRangeMaximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccLatRightRangeMaximum {
      get { return accLatRightRangeMaximum_; }
      set {
        accLatRightRangeMaximum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RSSInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RSSInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsRssSafe != other.IsRssSafe) return false;
      if (CurDistLon != other.CurDistLon) return false;
      if (RssSafeDistLon != other.RssSafeDistLon) return false;
      if (AccLonRangeMinimum != other.AccLonRangeMinimum) return false;
      if (AccLonRangeMaximum != other.AccLonRangeMaximum) return false;
      if (AccLatLeftRangeMinimum != other.AccLatLeftRangeMinimum) return false;
      if (AccLatLeftRangeMaximum != other.AccLatLeftRangeMaximum) return false;
      if (AccLatRightRangeMinimum != other.AccLatRightRangeMinimum) return false;
      if (AccLatRightRangeMaximum != other.AccLatRightRangeMaximum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsRssSafe != false) hash ^= IsRssSafe.GetHashCode();
      if (CurDistLon != 0D) hash ^= CurDistLon.GetHashCode();
      if (RssSafeDistLon != 0D) hash ^= RssSafeDistLon.GetHashCode();
      if (AccLonRangeMinimum != 0D) hash ^= AccLonRangeMinimum.GetHashCode();
      if (AccLonRangeMaximum != 0D) hash ^= AccLonRangeMaximum.GetHashCode();
      if (AccLatLeftRangeMinimum != 0D) hash ^= AccLatLeftRangeMinimum.GetHashCode();
      if (AccLatLeftRangeMaximum != 0D) hash ^= AccLatLeftRangeMaximum.GetHashCode();
      if (AccLatRightRangeMinimum != 0D) hash ^= AccLatRightRangeMinimum.GetHashCode();
      if (AccLatRightRangeMaximum != 0D) hash ^= AccLatRightRangeMaximum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsRssSafe != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsRssSafe);
      }
      if (CurDistLon != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CurDistLon);
      }
      if (RssSafeDistLon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RssSafeDistLon);
      }
      if (AccLonRangeMinimum != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AccLonRangeMinimum);
      }
      if (AccLonRangeMaximum != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AccLonRangeMaximum);
      }
      if (AccLatLeftRangeMinimum != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(AccLatLeftRangeMinimum);
      }
      if (AccLatLeftRangeMaximum != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AccLatLeftRangeMaximum);
      }
      if (AccLatRightRangeMinimum != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(AccLatRightRangeMinimum);
      }
      if (AccLatRightRangeMaximum != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(AccLatRightRangeMaximum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsRssSafe != false) {
        size += 1 + 1;
      }
      if (CurDistLon != 0D) {
        size += 1 + 8;
      }
      if (RssSafeDistLon != 0D) {
        size += 1 + 8;
      }
      if (AccLonRangeMinimum != 0D) {
        size += 1 + 8;
      }
      if (AccLonRangeMaximum != 0D) {
        size += 1 + 8;
      }
      if (AccLatLeftRangeMinimum != 0D) {
        size += 1 + 8;
      }
      if (AccLatLeftRangeMaximum != 0D) {
        size += 1 + 8;
      }
      if (AccLatRightRangeMinimum != 0D) {
        size += 1 + 8;
      }
      if (AccLatRightRangeMaximum != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RSSInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsRssSafe != false) {
        IsRssSafe = other.IsRssSafe;
      }
      if (other.CurDistLon != 0D) {
        CurDistLon = other.CurDistLon;
      }
      if (other.RssSafeDistLon != 0D) {
        RssSafeDistLon = other.RssSafeDistLon;
      }
      if (other.AccLonRangeMinimum != 0D) {
        AccLonRangeMinimum = other.AccLonRangeMinimum;
      }
      if (other.AccLonRangeMaximum != 0D) {
        AccLonRangeMaximum = other.AccLonRangeMaximum;
      }
      if (other.AccLatLeftRangeMinimum != 0D) {
        AccLatLeftRangeMinimum = other.AccLatLeftRangeMinimum;
      }
      if (other.AccLatLeftRangeMaximum != 0D) {
        AccLatLeftRangeMaximum = other.AccLatLeftRangeMaximum;
      }
      if (other.AccLatRightRangeMinimum != 0D) {
        AccLatRightRangeMinimum = other.AccLatRightRangeMinimum;
      }
      if (other.AccLatRightRangeMaximum != 0D) {
        AccLatRightRangeMaximum = other.AccLatRightRangeMaximum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsRssSafe = input.ReadBool();
            break;
          }
          case 17: {
            CurDistLon = input.ReadDouble();
            break;
          }
          case 25: {
            RssSafeDistLon = input.ReadDouble();
            break;
          }
          case 33: {
            AccLonRangeMinimum = input.ReadDouble();
            break;
          }
          case 41: {
            AccLonRangeMaximum = input.ReadDouble();
            break;
          }
          case 49: {
            AccLatLeftRangeMinimum = input.ReadDouble();
            break;
          }
          case 57: {
            AccLatLeftRangeMaximum = input.ReadDouble();
            break;
          }
          case 65: {
            AccLatRightRangeMinimum = input.ReadDouble();
            break;
          }
          case 73: {
            AccLatRightRangeMaximum = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// next id: 23
  /// </summary>
  public sealed partial class ADCTrajectory : pb::IMessage<ADCTrajectory> {
    private static readonly pb::MessageParser<ADCTrajectory> _parser = new pb::MessageParser<ADCTrajectory>(() => new ADCTrajectory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ADCTrajectory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PlanningReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADCTrajectory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADCTrajectory(ADCTrajectory other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      totalPathLength_ = other.totalPathLength_;
      totalPathTime_ = other.totalPathTime_;
      trajectoryPoint_ = other.trajectoryPoint_.Clone();
      Estop = other.estop_ != null ? other.Estop.Clone() : null;
      pathPoint_ = other.pathPoint_.Clone();
      isReplan_ = other.isReplan_;
      replanReason_ = other.replanReason_;
      gear_ = other.gear_;
      Decision = other.decision_ != null ? other.Decision.Clone() : null;
      LatencyStats = other.latencyStats_ != null ? other.LatencyStats.Clone() : null;
      RoutingHeader = other.routingHeader_ != null ? other.RoutingHeader.Clone() : null;
      Debug = other.debug_ != null ? other.Debug.Clone() : null;
      rightOfWayStatus_ = other.rightOfWayStatus_;
      laneId_ = other.laneId_.Clone();
      EngageAdvice = other.engageAdvice_ != null ? other.EngageAdvice.Clone() : null;
      CriticalRegion = other.criticalRegion_ != null ? other.CriticalRegion.Clone() : null;
      trajectoryType_ = other.trajectoryType_;
      RssInfo = other.rssInfo_ != null ? other.RssInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADCTrajectory Clone() {
      return new ADCTrajectory(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "total_path_length" field.</summary>
    public const int TotalPathLengthFieldNumber = 2;
    private double totalPathLength_;
    /// <summary>
    /// in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalPathLength {
      get { return totalPathLength_; }
      set {
        totalPathLength_ = value;
      }
    }

    /// <summary>Field number for the "total_path_time" field.</summary>
    public const int TotalPathTimeFieldNumber = 3;
    private double totalPathTime_;
    /// <summary>
    /// in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalPathTime {
      get { return totalPathTime_; }
      set {
        totalPathTime_ = value;
      }
    }

    /// <summary>Field number for the "trajectory_point" field.</summary>
    public const int TrajectoryPointFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Apollo.Common.TrajectoryPoint> _repeated_trajectoryPoint_codec
        = pb::FieldCodec.ForMessage(98, global::Apollo.Common.TrajectoryPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint> trajectoryPoint_ = new pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint>();
    /// <summary>
    /// path data + speed data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.TrajectoryPoint> TrajectoryPoint {
      get { return trajectoryPoint_; }
    }

    /// <summary>Field number for the "estop" field.</summary>
    public const int EstopFieldNumber = 6;
    private global::Apollo.Planning.EStop estop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.EStop Estop {
      get { return estop_; }
      set {
        estop_ = value;
      }
    }

    /// <summary>Field number for the "path_point" field.</summary>
    public const int PathPointFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Apollo.Common.PathPoint> _repeated_pathPoint_codec
        = pb::FieldCodec.ForMessage(106, global::Apollo.Common.PathPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.PathPoint> pathPoint_ = new pbc::RepeatedField<global::Apollo.Common.PathPoint>();
    /// <summary>
    /// path point without speed info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.PathPoint> PathPoint {
      get { return pathPoint_; }
    }

    /// <summary>Field number for the "is_replan" field.</summary>
    public const int IsReplanFieldNumber = 9;
    private bool isReplan_;
    /// <summary>
    /// is_replan == true mean replan triggered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReplan {
      get { return isReplan_; }
      set {
        isReplan_ = value;
      }
    }

    /// <summary>Field number for the "replan_reason" field.</summary>
    public const int ReplanReasonFieldNumber = 22;
    private string replanReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplanReason {
      get { return replanReason_; }
      set {
        replanReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gear" field.</summary>
    public const int GearFieldNumber = 10;
    private global::Apollo.Canbus.Chassis.Types.GearPosition gear_ = 0;
    /// <summary>
    /// Specify trajectory gear
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Canbus.Chassis.Types.GearPosition Gear {
      get { return gear_; }
      set {
        gear_ = value;
      }
    }

    /// <summary>Field number for the "decision" field.</summary>
    public const int DecisionFieldNumber = 14;
    private global::Apollo.Planning.DecisionResult decision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.DecisionResult Decision {
      get { return decision_; }
      set {
        decision_ = value;
      }
    }

    /// <summary>Field number for the "latency_stats" field.</summary>
    public const int LatencyStatsFieldNumber = 15;
    private global::Apollo.Planning.LatencyStats latencyStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.LatencyStats LatencyStats {
      get { return latencyStats_; }
      set {
        latencyStats_ = value;
      }
    }

    /// <summary>Field number for the "routing_header" field.</summary>
    public const int RoutingHeaderFieldNumber = 16;
    private global::Apollo.Common.Header routingHeader_;
    /// <summary>
    /// the routing used for current planning result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header RoutingHeader {
      get { return routingHeader_; }
      set {
        routingHeader_ = value;
      }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 8;
    private global::Apollo.PlanningInternal.Debug debug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.Debug Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    /// <summary>Field number for the "right_of_way_status" field.</summary>
    public const int RightOfWayStatusFieldNumber = 17;
    private global::Apollo.Planning.ADCTrajectory.Types.RightOfWayStatus rightOfWayStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ADCTrajectory.Types.RightOfWayStatus RightOfWayStatus {
      get { return rightOfWayStatus_; }
      set {
        rightOfWayStatus_ = value;
      }
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Apollo.Hdmap.Id> _repeated_laneId_codec
        = pb::FieldCodec.ForMessage(146, global::Apollo.Hdmap.Id.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Hdmap.Id> laneId_ = new pbc::RepeatedField<global::Apollo.Hdmap.Id>();
    /// <summary>
    /// lane id along reference line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Hdmap.Id> LaneId {
      get { return laneId_; }
    }

    /// <summary>Field number for the "engage_advice" field.</summary>
    public const int EngageAdviceFieldNumber = 19;
    private global::Apollo.Common.EngageAdvice engageAdvice_;
    /// <summary>
    /// set the engage advice for based on current planning result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.EngageAdvice EngageAdvice {
      get { return engageAdvice_; }
      set {
        engageAdvice_ = value;
      }
    }

    /// <summary>Field number for the "critical_region" field.</summary>
    public const int CriticalRegionFieldNumber = 20;
    private global::Apollo.Planning.ADCTrajectory.Types.CriticalRegion criticalRegion_;
    /// <summary>
    /// critial region will be empty when planning is NOT sure which region is
    /// critical
    /// critial regions may or may not overlap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ADCTrajectory.Types.CriticalRegion CriticalRegion {
      get { return criticalRegion_; }
      set {
        criticalRegion_ = value;
      }
    }

    /// <summary>Field number for the "trajectory_type" field.</summary>
    public const int TrajectoryTypeFieldNumber = 21;
    private global::Apollo.Planning.ADCTrajectory.Types.TrajectoryType trajectoryType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.ADCTrajectory.Types.TrajectoryType TrajectoryType {
      get { return trajectoryType_; }
      set {
        trajectoryType_ = value;
      }
    }

    /// <summary>Field number for the "rss_info" field.</summary>
    public const int RssInfoFieldNumber = 100;
    private global::Apollo.Planning.RSSInfo rssInfo_;
    /// <summary>
    /// output related to RSS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.RSSInfo RssInfo {
      get { return rssInfo_; }
      set {
        rssInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ADCTrajectory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ADCTrajectory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (TotalPathLength != other.TotalPathLength) return false;
      if (TotalPathTime != other.TotalPathTime) return false;
      if(!trajectoryPoint_.Equals(other.trajectoryPoint_)) return false;
      if (!object.Equals(Estop, other.Estop)) return false;
      if(!pathPoint_.Equals(other.pathPoint_)) return false;
      if (IsReplan != other.IsReplan) return false;
      if (ReplanReason != other.ReplanReason) return false;
      if (Gear != other.Gear) return false;
      if (!object.Equals(Decision, other.Decision)) return false;
      if (!object.Equals(LatencyStats, other.LatencyStats)) return false;
      if (!object.Equals(RoutingHeader, other.RoutingHeader)) return false;
      if (!object.Equals(Debug, other.Debug)) return false;
      if (RightOfWayStatus != other.RightOfWayStatus) return false;
      if(!laneId_.Equals(other.laneId_)) return false;
      if (!object.Equals(EngageAdvice, other.EngageAdvice)) return false;
      if (!object.Equals(CriticalRegion, other.CriticalRegion)) return false;
      if (TrajectoryType != other.TrajectoryType) return false;
      if (!object.Equals(RssInfo, other.RssInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (TotalPathLength != 0D) hash ^= TotalPathLength.GetHashCode();
      if (TotalPathTime != 0D) hash ^= TotalPathTime.GetHashCode();
      hash ^= trajectoryPoint_.GetHashCode();
      if (estop_ != null) hash ^= Estop.GetHashCode();
      hash ^= pathPoint_.GetHashCode();
      if (IsReplan != false) hash ^= IsReplan.GetHashCode();
      if (ReplanReason.Length != 0) hash ^= ReplanReason.GetHashCode();
      if (Gear != 0) hash ^= Gear.GetHashCode();
      if (decision_ != null) hash ^= Decision.GetHashCode();
      if (latencyStats_ != null) hash ^= LatencyStats.GetHashCode();
      if (routingHeader_ != null) hash ^= RoutingHeader.GetHashCode();
      if (debug_ != null) hash ^= Debug.GetHashCode();
      if (RightOfWayStatus != 0) hash ^= RightOfWayStatus.GetHashCode();
      hash ^= laneId_.GetHashCode();
      if (engageAdvice_ != null) hash ^= EngageAdvice.GetHashCode();
      if (criticalRegion_ != null) hash ^= CriticalRegion.GetHashCode();
      if (TrajectoryType != 0) hash ^= TrajectoryType.GetHashCode();
      if (rssInfo_ != null) hash ^= RssInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (TotalPathLength != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalPathLength);
      }
      if (TotalPathTime != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalPathTime);
      }
      if (estop_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Estop);
      }
      if (debug_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Debug);
      }
      if (IsReplan != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsReplan);
      }
      if (Gear != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Gear);
      }
      trajectoryPoint_.WriteTo(output, _repeated_trajectoryPoint_codec);
      pathPoint_.WriteTo(output, _repeated_pathPoint_codec);
      if (decision_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Decision);
      }
      if (latencyStats_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(LatencyStats);
      }
      if (routingHeader_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RoutingHeader);
      }
      if (RightOfWayStatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) RightOfWayStatus);
      }
      laneId_.WriteTo(output, _repeated_laneId_codec);
      if (engageAdvice_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(EngageAdvice);
      }
      if (criticalRegion_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(CriticalRegion);
      }
      if (TrajectoryType != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) TrajectoryType);
      }
      if (ReplanReason.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(ReplanReason);
      }
      if (rssInfo_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(RssInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (TotalPathLength != 0D) {
        size += 1 + 8;
      }
      if (TotalPathTime != 0D) {
        size += 1 + 8;
      }
      size += trajectoryPoint_.CalculateSize(_repeated_trajectoryPoint_codec);
      if (estop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Estop);
      }
      size += pathPoint_.CalculateSize(_repeated_pathPoint_codec);
      if (IsReplan != false) {
        size += 1 + 1;
      }
      if (ReplanReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReplanReason);
      }
      if (Gear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gear);
      }
      if (decision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Decision);
      }
      if (latencyStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatencyStats);
      }
      if (routingHeader_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoutingHeader);
      }
      if (debug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Debug);
      }
      if (RightOfWayStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RightOfWayStatus);
      }
      size += laneId_.CalculateSize(_repeated_laneId_codec);
      if (engageAdvice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EngageAdvice);
      }
      if (criticalRegion_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CriticalRegion);
      }
      if (TrajectoryType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TrajectoryType);
      }
      if (rssInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RssInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ADCTrajectory other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.TotalPathLength != 0D) {
        TotalPathLength = other.TotalPathLength;
      }
      if (other.TotalPathTime != 0D) {
        TotalPathTime = other.TotalPathTime;
      }
      trajectoryPoint_.Add(other.trajectoryPoint_);
      if (other.estop_ != null) {
        if (estop_ == null) {
          estop_ = new global::Apollo.Planning.EStop();
        }
        Estop.MergeFrom(other.Estop);
      }
      pathPoint_.Add(other.pathPoint_);
      if (other.IsReplan != false) {
        IsReplan = other.IsReplan;
      }
      if (other.ReplanReason.Length != 0) {
        ReplanReason = other.ReplanReason;
      }
      if (other.Gear != 0) {
        Gear = other.Gear;
      }
      if (other.decision_ != null) {
        if (decision_ == null) {
          decision_ = new global::Apollo.Planning.DecisionResult();
        }
        Decision.MergeFrom(other.Decision);
      }
      if (other.latencyStats_ != null) {
        if (latencyStats_ == null) {
          latencyStats_ = new global::Apollo.Planning.LatencyStats();
        }
        LatencyStats.MergeFrom(other.LatencyStats);
      }
      if (other.routingHeader_ != null) {
        if (routingHeader_ == null) {
          routingHeader_ = new global::Apollo.Common.Header();
        }
        RoutingHeader.MergeFrom(other.RoutingHeader);
      }
      if (other.debug_ != null) {
        if (debug_ == null) {
          debug_ = new global::Apollo.PlanningInternal.Debug();
        }
        Debug.MergeFrom(other.Debug);
      }
      if (other.RightOfWayStatus != 0) {
        RightOfWayStatus = other.RightOfWayStatus;
      }
      laneId_.Add(other.laneId_);
      if (other.engageAdvice_ != null) {
        if (engageAdvice_ == null) {
          engageAdvice_ = new global::Apollo.Common.EngageAdvice();
        }
        EngageAdvice.MergeFrom(other.EngageAdvice);
      }
      if (other.criticalRegion_ != null) {
        if (criticalRegion_ == null) {
          criticalRegion_ = new global::Apollo.Planning.ADCTrajectory.Types.CriticalRegion();
        }
        CriticalRegion.MergeFrom(other.CriticalRegion);
      }
      if (other.TrajectoryType != 0) {
        TrajectoryType = other.TrajectoryType;
      }
      if (other.rssInfo_ != null) {
        if (rssInfo_ == null) {
          rssInfo_ = new global::Apollo.Planning.RSSInfo();
        }
        RssInfo.MergeFrom(other.RssInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            TotalPathLength = input.ReadDouble();
            break;
          }
          case 25: {
            TotalPathTime = input.ReadDouble();
            break;
          }
          case 50: {
            if (estop_ == null) {
              estop_ = new global::Apollo.Planning.EStop();
            }
            input.ReadMessage(estop_);
            break;
          }
          case 66: {
            if (debug_ == null) {
              debug_ = new global::Apollo.PlanningInternal.Debug();
            }
            input.ReadMessage(debug_);
            break;
          }
          case 72: {
            IsReplan = input.ReadBool();
            break;
          }
          case 80: {
            gear_ = (global::Apollo.Canbus.Chassis.Types.GearPosition) input.ReadEnum();
            break;
          }
          case 98: {
            trajectoryPoint_.AddEntriesFrom(input, _repeated_trajectoryPoint_codec);
            break;
          }
          case 106: {
            pathPoint_.AddEntriesFrom(input, _repeated_pathPoint_codec);
            break;
          }
          case 114: {
            if (decision_ == null) {
              decision_ = new global::Apollo.Planning.DecisionResult();
            }
            input.ReadMessage(decision_);
            break;
          }
          case 122: {
            if (latencyStats_ == null) {
              latencyStats_ = new global::Apollo.Planning.LatencyStats();
            }
            input.ReadMessage(latencyStats_);
            break;
          }
          case 130: {
            if (routingHeader_ == null) {
              routingHeader_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(routingHeader_);
            break;
          }
          case 136: {
            rightOfWayStatus_ = (global::Apollo.Planning.ADCTrajectory.Types.RightOfWayStatus) input.ReadEnum();
            break;
          }
          case 146: {
            laneId_.AddEntriesFrom(input, _repeated_laneId_codec);
            break;
          }
          case 154: {
            if (engageAdvice_ == null) {
              engageAdvice_ = new global::Apollo.Common.EngageAdvice();
            }
            input.ReadMessage(engageAdvice_);
            break;
          }
          case 162: {
            if (criticalRegion_ == null) {
              criticalRegion_ = new global::Apollo.Planning.ADCTrajectory.Types.CriticalRegion();
            }
            input.ReadMessage(criticalRegion_);
            break;
          }
          case 168: {
            trajectoryType_ = (global::Apollo.Planning.ADCTrajectory.Types.TrajectoryType) input.ReadEnum();
            break;
          }
          case 178: {
            ReplanReason = input.ReadString();
            break;
          }
          case 802: {
            if (rssInfo_ == null) {
              rssInfo_ = new global::Apollo.Planning.RSSInfo();
            }
            input.ReadMessage(rssInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ADCTrajectory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RightOfWayStatus {
        [pbr::OriginalName("UNPROTECTED")] Unprotected = 0,
        [pbr::OriginalName("PROTECTED")] Protected = 1,
      }

      public enum TrajectoryType {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("NORMAL")] Normal = 1,
        [pbr::OriginalName("PATH_FALLBACK")] PathFallback = 2,
        [pbr::OriginalName("SPEED_FALLBACK")] SpeedFallback = 3,
      }

      /// <summary>
      /// the region where planning cares most
      /// </summary>
      public sealed partial class CriticalRegion : pb::IMessage<CriticalRegion> {
        private static readonly pb::MessageParser<CriticalRegion> _parser = new pb::MessageParser<CriticalRegion>(() => new CriticalRegion());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CriticalRegion> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Planning.ADCTrajectory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CriticalRegion() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CriticalRegion(CriticalRegion other) : this() {
          region_ = other.region_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CriticalRegion Clone() {
          return new CriticalRegion(this);
        }

        /// <summary>Field number for the "region" field.</summary>
        public const int RegionFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Apollo.Common.Polygon> _repeated_region_codec
            = pb::FieldCodec.ForMessage(10, global::Apollo.Common.Polygon.Parser);
        private readonly pbc::RepeatedField<global::Apollo.Common.Polygon> region_ = new pbc::RepeatedField<global::Apollo.Common.Polygon>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Apollo.Common.Polygon> Region {
          get { return region_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CriticalRegion);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CriticalRegion other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!region_.Equals(other.region_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= region_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          region_.WriteTo(output, _repeated_region_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += region_.CalculateSize(_repeated_region_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CriticalRegion other) {
          if (other == null) {
            return;
          }
          region_.Add(other.region_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                region_.AddEntriesFrom(input, _repeated_region_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
