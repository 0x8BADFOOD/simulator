// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/poly_st_speed_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Planning {

  /// <summary>Holder for reflection information generated from modules/planning/proto/poly_st_speed_config.proto</summary>
  public static partial class PolyStSpeedConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/planning/proto/poly_st_speed_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PolyStSpeedConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFtb2R1bGVzL3BsYW5uaW5nL3Byb3RvL3BvbHlfc3Rfc3BlZWRfY29uZmln",
            "LnByb3RvEg9hcG9sbG8ucGxhbm5pbmcaL21vZHVsZXMvcGxhbm5pbmcvcHJv",
            "dG8vc3RfYm91bmRhcnlfY29uZmlnLnByb3RvItsCChFQb2x5U3RTcGVlZENv",
            "bmZpZxIZChF0b3RhbF9wYXRoX2xlbmd0aBgBIAEoARISCgp0b3RhbF90aW1l",
            "GAIgASgBEhcKD3ByZWZlcnJlZF9hY2NlbBgDIAEoARIXCg9wcmVmZXJyZWRf",
            "ZGVjZWwYBCABKAESEQoJbWF4X2FjY2VsGAUgASgBEhEKCW1pbl9kZWNlbBgG",
            "IAEoARIaChJzcGVlZF9saW1pdF9idWZmZXIYByABKAESFAoMc3BlZWRfd2Vp",
            "Z2h0GAggASgBEhMKC2plcmtfd2VpZ2h0GAkgASgBEhcKD29ic3RhY2xlX3dl",
            "aWdodBgKIAEoARIgChh1bmJsb2NraW5nX29ic3RhY2xlX2Nvc3QYCyABKAES",
            "PQoSc3RfYm91bmRhcnlfY29uZmlnGAwgASgLMiEuYXBvbGxvLnBsYW5uaW5n",
            "LlN0Qm91bmRhcnlDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Planning.StBoundaryConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Planning.PolyStSpeedConfig), global::Apollo.Planning.PolyStSpeedConfig.Parser, new[]{ "TotalPathLength", "TotalTime", "PreferredAccel", "PreferredDecel", "MaxAccel", "MinDecel", "SpeedLimitBuffer", "SpeedWeight", "JerkWeight", "ObstacleWeight", "UnblockingObstacleCost", "StBoundaryConfig" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// next ID: 11
  /// </summary>
  public sealed partial class PolyStSpeedConfig : pb::IMessage<PolyStSpeedConfig> {
    private static readonly pb::MessageParser<PolyStSpeedConfig> _parser = new pb::MessageParser<PolyStSpeedConfig>(() => new PolyStSpeedConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolyStSpeedConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Planning.PolyStSpeedConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyStSpeedConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyStSpeedConfig(PolyStSpeedConfig other) : this() {
      totalPathLength_ = other.totalPathLength_;
      totalTime_ = other.totalTime_;
      preferredAccel_ = other.preferredAccel_;
      preferredDecel_ = other.preferredDecel_;
      maxAccel_ = other.maxAccel_;
      minDecel_ = other.minDecel_;
      speedLimitBuffer_ = other.speedLimitBuffer_;
      speedWeight_ = other.speedWeight_;
      jerkWeight_ = other.jerkWeight_;
      obstacleWeight_ = other.obstacleWeight_;
      unblockingObstacleCost_ = other.unblockingObstacleCost_;
      StBoundaryConfig = other.stBoundaryConfig_ != null ? other.StBoundaryConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyStSpeedConfig Clone() {
      return new PolyStSpeedConfig(this);
    }

    /// <summary>Field number for the "total_path_length" field.</summary>
    public const int TotalPathLengthFieldNumber = 1;
    private double totalPathLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalPathLength {
      get { return totalPathLength_; }
      set {
        totalPathLength_ = value;
      }
    }

    /// <summary>Field number for the "total_time" field.</summary>
    public const int TotalTimeFieldNumber = 2;
    private double totalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "preferred_accel" field.</summary>
    public const int PreferredAccelFieldNumber = 3;
    private double preferredAccel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreferredAccel {
      get { return preferredAccel_; }
      set {
        preferredAccel_ = value;
      }
    }

    /// <summary>Field number for the "preferred_decel" field.</summary>
    public const int PreferredDecelFieldNumber = 4;
    private double preferredDecel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreferredDecel {
      get { return preferredDecel_; }
      set {
        preferredDecel_ = value;
      }
    }

    /// <summary>Field number for the "max_accel" field.</summary>
    public const int MaxAccelFieldNumber = 5;
    private double maxAccel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxAccel {
      get { return maxAccel_; }
      set {
        maxAccel_ = value;
      }
    }

    /// <summary>Field number for the "min_decel" field.</summary>
    public const int MinDecelFieldNumber = 6;
    private double minDecel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinDecel {
      get { return minDecel_; }
      set {
        minDecel_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit_buffer" field.</summary>
    public const int SpeedLimitBufferFieldNumber = 7;
    private double speedLimitBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimitBuffer {
      get { return speedLimitBuffer_; }
      set {
        speedLimitBuffer_ = value;
      }
    }

    /// <summary>Field number for the "speed_weight" field.</summary>
    public const int SpeedWeightFieldNumber = 8;
    private double speedWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedWeight {
      get { return speedWeight_; }
      set {
        speedWeight_ = value;
      }
    }

    /// <summary>Field number for the "jerk_weight" field.</summary>
    public const int JerkWeightFieldNumber = 9;
    private double jerkWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double JerkWeight {
      get { return jerkWeight_; }
      set {
        jerkWeight_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_weight" field.</summary>
    public const int ObstacleWeightFieldNumber = 10;
    private double obstacleWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObstacleWeight {
      get { return obstacleWeight_; }
      set {
        obstacleWeight_ = value;
      }
    }

    /// <summary>Field number for the "unblocking_obstacle_cost" field.</summary>
    public const int UnblockingObstacleCostFieldNumber = 11;
    private double unblockingObstacleCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UnblockingObstacleCost {
      get { return unblockingObstacleCost_; }
      set {
        unblockingObstacleCost_ = value;
      }
    }

    /// <summary>Field number for the "st_boundary_config" field.</summary>
    public const int StBoundaryConfigFieldNumber = 12;
    private global::Apollo.Planning.StBoundaryConfig stBoundaryConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Planning.StBoundaryConfig StBoundaryConfig {
      get { return stBoundaryConfig_; }
      set {
        stBoundaryConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolyStSpeedConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolyStSpeedConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalPathLength != other.TotalPathLength) return false;
      if (TotalTime != other.TotalTime) return false;
      if (PreferredAccel != other.PreferredAccel) return false;
      if (PreferredDecel != other.PreferredDecel) return false;
      if (MaxAccel != other.MaxAccel) return false;
      if (MinDecel != other.MinDecel) return false;
      if (SpeedLimitBuffer != other.SpeedLimitBuffer) return false;
      if (SpeedWeight != other.SpeedWeight) return false;
      if (JerkWeight != other.JerkWeight) return false;
      if (ObstacleWeight != other.ObstacleWeight) return false;
      if (UnblockingObstacleCost != other.UnblockingObstacleCost) return false;
      if (!object.Equals(StBoundaryConfig, other.StBoundaryConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalPathLength != 0D) hash ^= TotalPathLength.GetHashCode();
      if (TotalTime != 0D) hash ^= TotalTime.GetHashCode();
      if (PreferredAccel != 0D) hash ^= PreferredAccel.GetHashCode();
      if (PreferredDecel != 0D) hash ^= PreferredDecel.GetHashCode();
      if (MaxAccel != 0D) hash ^= MaxAccel.GetHashCode();
      if (MinDecel != 0D) hash ^= MinDecel.GetHashCode();
      if (SpeedLimitBuffer != 0D) hash ^= SpeedLimitBuffer.GetHashCode();
      if (SpeedWeight != 0D) hash ^= SpeedWeight.GetHashCode();
      if (JerkWeight != 0D) hash ^= JerkWeight.GetHashCode();
      if (ObstacleWeight != 0D) hash ^= ObstacleWeight.GetHashCode();
      if (UnblockingObstacleCost != 0D) hash ^= UnblockingObstacleCost.GetHashCode();
      if (stBoundaryConfig_ != null) hash ^= StBoundaryConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalPathLength != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TotalPathLength);
      }
      if (TotalTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalTime);
      }
      if (PreferredAccel != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PreferredAccel);
      }
      if (PreferredDecel != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PreferredDecel);
      }
      if (MaxAccel != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MaxAccel);
      }
      if (MinDecel != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MinDecel);
      }
      if (SpeedLimitBuffer != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(SpeedLimitBuffer);
      }
      if (SpeedWeight != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SpeedWeight);
      }
      if (JerkWeight != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(JerkWeight);
      }
      if (ObstacleWeight != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ObstacleWeight);
      }
      if (UnblockingObstacleCost != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(UnblockingObstacleCost);
      }
      if (stBoundaryConfig_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(StBoundaryConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalPathLength != 0D) {
        size += 1 + 8;
      }
      if (TotalTime != 0D) {
        size += 1 + 8;
      }
      if (PreferredAccel != 0D) {
        size += 1 + 8;
      }
      if (PreferredDecel != 0D) {
        size += 1 + 8;
      }
      if (MaxAccel != 0D) {
        size += 1 + 8;
      }
      if (MinDecel != 0D) {
        size += 1 + 8;
      }
      if (SpeedLimitBuffer != 0D) {
        size += 1 + 8;
      }
      if (SpeedWeight != 0D) {
        size += 1 + 8;
      }
      if (JerkWeight != 0D) {
        size += 1 + 8;
      }
      if (ObstacleWeight != 0D) {
        size += 1 + 8;
      }
      if (UnblockingObstacleCost != 0D) {
        size += 1 + 8;
      }
      if (stBoundaryConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StBoundaryConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolyStSpeedConfig other) {
      if (other == null) {
        return;
      }
      if (other.TotalPathLength != 0D) {
        TotalPathLength = other.TotalPathLength;
      }
      if (other.TotalTime != 0D) {
        TotalTime = other.TotalTime;
      }
      if (other.PreferredAccel != 0D) {
        PreferredAccel = other.PreferredAccel;
      }
      if (other.PreferredDecel != 0D) {
        PreferredDecel = other.PreferredDecel;
      }
      if (other.MaxAccel != 0D) {
        MaxAccel = other.MaxAccel;
      }
      if (other.MinDecel != 0D) {
        MinDecel = other.MinDecel;
      }
      if (other.SpeedLimitBuffer != 0D) {
        SpeedLimitBuffer = other.SpeedLimitBuffer;
      }
      if (other.SpeedWeight != 0D) {
        SpeedWeight = other.SpeedWeight;
      }
      if (other.JerkWeight != 0D) {
        JerkWeight = other.JerkWeight;
      }
      if (other.ObstacleWeight != 0D) {
        ObstacleWeight = other.ObstacleWeight;
      }
      if (other.UnblockingObstacleCost != 0D) {
        UnblockingObstacleCost = other.UnblockingObstacleCost;
      }
      if (other.stBoundaryConfig_ != null) {
        if (stBoundaryConfig_ == null) {
          stBoundaryConfig_ = new global::Apollo.Planning.StBoundaryConfig();
        }
        StBoundaryConfig.MergeFrom(other.StBoundaryConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TotalPathLength = input.ReadDouble();
            break;
          }
          case 17: {
            TotalTime = input.ReadDouble();
            break;
          }
          case 25: {
            PreferredAccel = input.ReadDouble();
            break;
          }
          case 33: {
            PreferredDecel = input.ReadDouble();
            break;
          }
          case 41: {
            MaxAccel = input.ReadDouble();
            break;
          }
          case 49: {
            MinDecel = input.ReadDouble();
            break;
          }
          case 57: {
            SpeedLimitBuffer = input.ReadDouble();
            break;
          }
          case 65: {
            SpeedWeight = input.ReadDouble();
            break;
          }
          case 73: {
            JerkWeight = input.ReadDouble();
            break;
          }
          case 81: {
            ObstacleWeight = input.ReadDouble();
            break;
          }
          case 89: {
            UnblockingObstacleCost = input.ReadDouble();
            break;
          }
          case 98: {
            if (stBoundaryConfig_ == null) {
              stBoundaryConfig_ = new global::Apollo.Planning.StBoundaryConfig();
            }
            input.ReadMessage(stBoundaryConfig_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
