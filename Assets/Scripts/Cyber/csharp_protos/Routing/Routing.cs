// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Routing {

  /// <summary>Holder for reflection information generated from modules/routing/proto/routing.proto</summary>
  public static partial class RoutingReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/routing/proto/routing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoutingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNtb2R1bGVzL3JvdXRpbmcvcHJvdG8vcm91dGluZy5wcm90bxIOYXBvbGxv",
            "LnJvdXRpbmcaIW1vZHVsZXMvY29tbW9uL3Byb3RvL2hlYWRlci5wcm90bxoj",
            "bW9kdWxlcy9jb21tb24vcHJvdG8vZ2VvbWV0cnkucHJvdG8aJW1vZHVsZXMv",
            "Y29tbW9uL3Byb3RvL2Vycm9yX2NvZGUucHJvdG8aKW1vZHVsZXMvbWFwL3By",
            "b3RvL21hcF9wYXJraW5nX3NwYWNlLnByb3RvIkwKDExhbmVXYXlwb2ludBIK",
            "CgJpZBgBIAEoCRIJCgFzGAIgASgBEiUKBHBvc2UYAyABKAsyFy5hcG9sbG8u",
            "Y29tbW9uLlBvaW50RU5VIjkKC0xhbmVTZWdtZW50EgoKAmlkGAEgASgJEg8K",
            "B3N0YXJ0X3MYAiABKAESDQoFZW5kX3MYAyABKAEi/gEKDlJvdXRpbmdSZXF1",
            "ZXN0EiUKBmhlYWRlchgBIAEoCzIVLmFwb2xsby5jb21tb24uSGVhZGVyEi4K",
            "CHdheXBvaW50GAIgAygLMhwuYXBvbGxvLnJvdXRpbmcuTGFuZVdheXBvaW50",
            "EjUKEGJsYWNrbGlzdGVkX2xhbmUYAyADKAsyGy5hcG9sbG8ucm91dGluZy5M",
            "YW5lU2VnbWVudBIYChBibGFja2xpc3RlZF9yb2FkGAQgAygJEhEKCWJyb2Fk",
            "Y2FzdBgFIAEoCBIxCg1wYXJraW5nX3NwYWNlGAYgASgLMhouYXBvbGxvLmhk",
            "bWFwLlBhcmtpbmdTcGFjZSIfCgtNZWFzdXJlbWVudBIQCghkaXN0YW5jZRgB",
            "IAEoASKDAQoHUGFzc2FnZRIsCgdzZWdtZW50GAEgAygLMhsuYXBvbGxvLnJv",
            "dXRpbmcuTGFuZVNlZ21lbnQSEAoIY2FuX2V4aXQYAiABKAgSOAoQY2hhbmdl",
            "X2xhbmVfdHlwZRgDIAEoDjIeLmFwb2xsby5yb3V0aW5nLkNoYW5nZUxhbmVU",
            "eXBlIkMKC1JvYWRTZWdtZW50EgoKAmlkGAEgASgJEigKB3Bhc3NhZ2UYAiAD",
            "KAsyFy5hcG9sbG8ucm91dGluZy5QYXNzYWdlIowCCg9Sb3V0aW5nUmVzcG9u",
            "c2USJQoGaGVhZGVyGAEgASgLMhUuYXBvbGxvLmNvbW1vbi5IZWFkZXISKQoE",
            "cm9hZBgCIAMoCzIbLmFwb2xsby5yb3V0aW5nLlJvYWRTZWdtZW50EjAKC21l",
            "YXN1cmVtZW50GAMgASgLMhsuYXBvbGxvLnJvdXRpbmcuTWVhc3VyZW1lbnQS",
            "NwoPcm91dGluZ19yZXF1ZXN0GAQgASgLMh4uYXBvbGxvLnJvdXRpbmcuUm91",
            "dGluZ1JlcXVlc3QSEwoLbWFwX3ZlcnNpb24YBSABKAwSJwoGc3RhdHVzGAYg",
            "ASgLMhcuYXBvbGxvLmNvbW1vbi5TdGF0dXNQYioyCg5DaGFuZ2VMYW5lVHlw",
            "ZRILCgdGT1JXQVJEEAASCAoETEVGVBABEgkKBVJJR0hUEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.HeaderReflection.Descriptor, global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Common.ErrorCodeReflection.Descriptor, global::Apollo.Hdmap.MapParkingSpaceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Routing.ChangeLaneType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.LaneWaypoint), global::Apollo.Routing.LaneWaypoint.Parser, new[]{ "Id", "S", "Pose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.LaneSegment), global::Apollo.Routing.LaneSegment.Parser, new[]{ "Id", "StartS", "EndS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.RoutingRequest), global::Apollo.Routing.RoutingRequest.Parser, new[]{ "Header", "Waypoint", "BlacklistedLane", "BlacklistedRoad", "Broadcast", "ParkingSpace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.Measurement), global::Apollo.Routing.Measurement.Parser, new[]{ "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.Passage), global::Apollo.Routing.Passage.Parser, new[]{ "Segment", "CanExit", "ChangeLaneType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.RoadSegment), global::Apollo.Routing.RoadSegment.Parser, new[]{ "Id", "Passage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Routing.RoutingResponse), global::Apollo.Routing.RoutingResponse.Parser, new[]{ "Header", "Road", "Measurement", "RoutingRequest", "MapVersion", "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ChangeLaneType {
    [pbr::OriginalName("FORWARD")] Forward = 0,
    [pbr::OriginalName("LEFT")] Left = 1,
    [pbr::OriginalName("RIGHT")] Right = 2,
  }

  #endregion

  #region Messages
  public sealed partial class LaneWaypoint : pb::IMessage<LaneWaypoint> {
    private static readonly pb::MessageParser<LaneWaypoint> _parser = new pb::MessageParser<LaneWaypoint>(() => new LaneWaypoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneWaypoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneWaypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneWaypoint(LaneWaypoint other) : this() {
      id_ = other.id_;
      s_ = other.s_;
      Pose = other.pose_ != null ? other.Pose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneWaypoint Clone() {
      return new LaneWaypoint(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 2;
    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 3;
    private global::Apollo.Common.PointENU pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneWaypoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneWaypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (S != other.S) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (S != 0D) hash ^= S.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (S != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(S);
      }
      if (pose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (S != 0D) {
        size += 1 + 8;
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneWaypoint other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.S != 0D) {
        S = other.S;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Apollo.Common.PointENU();
        }
        Pose.MergeFrom(other.Pose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 17: {
            S = input.ReadDouble();
            break;
          }
          case 26: {
            if (pose_ == null) {
              pose_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(pose_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneSegment : pb::IMessage<LaneSegment> {
    private static readonly pb::MessageParser<LaneSegment> _parser = new pb::MessageParser<LaneSegment>(() => new LaneSegment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSegment(LaneSegment other) : this() {
      id_ = other.id_;
      startS_ = other.startS_;
      endS_ = other.endS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneSegment Clone() {
      return new LaneSegment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_s" field.</summary>
    public const int StartSFieldNumber = 2;
    private double startS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartS {
      get { return startS_; }
      set {
        startS_ = value;
      }
    }

    /// <summary>Field number for the "end_s" field.</summary>
    public const int EndSFieldNumber = 3;
    private double endS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EndS {
      get { return endS_; }
      set {
        endS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StartS != other.StartS) return false;
      if (EndS != other.EndS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (StartS != 0D) hash ^= StartS.GetHashCode();
      if (EndS != 0D) hash ^= EndS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (StartS != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StartS);
      }
      if (EndS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(EndS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (StartS != 0D) {
        size += 1 + 8;
      }
      if (EndS != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneSegment other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.StartS != 0D) {
        StartS = other.StartS;
      }
      if (other.EndS != 0D) {
        EndS = other.EndS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 17: {
            StartS = input.ReadDouble();
            break;
          }
          case 25: {
            EndS = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoutingRequest : pb::IMessage<RoutingRequest> {
    private static readonly pb::MessageParser<RoutingRequest> _parser = new pb::MessageParser<RoutingRequest>(() => new RoutingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRequest(RoutingRequest other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      waypoint_ = other.waypoint_.Clone();
      blacklistedLane_ = other.blacklistedLane_.Clone();
      blacklistedRoad_ = other.blacklistedRoad_.Clone();
      broadcast_ = other.broadcast_;
      ParkingSpace = other.parkingSpace_ != null ? other.ParkingSpace.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRequest Clone() {
      return new RoutingRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "waypoint" field.</summary>
    public const int WaypointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Routing.LaneWaypoint> _repeated_waypoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Routing.LaneWaypoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.LaneWaypoint> waypoint_ = new pbc::RepeatedField<global::Apollo.Routing.LaneWaypoint>();
    /// <summary>
    /// at least two points. The first is start point, the end is final point.
    /// The routing must go through each point in waypoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.LaneWaypoint> Waypoint {
      get { return waypoint_; }
    }

    /// <summary>Field number for the "blacklisted_lane" field.</summary>
    public const int BlacklistedLaneFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Routing.LaneSegment> _repeated_blacklistedLane_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Routing.LaneSegment.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.LaneSegment> blacklistedLane_ = new pbc::RepeatedField<global::Apollo.Routing.LaneSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.LaneSegment> BlacklistedLane {
      get { return blacklistedLane_; }
    }

    /// <summary>Field number for the "blacklisted_road" field.</summary>
    public const int BlacklistedRoadFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_blacklistedRoad_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> blacklistedRoad_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BlacklistedRoad {
      get { return blacklistedRoad_; }
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 5;
    private bool broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }

    /// <summary>Field number for the "parking_space" field.</summary>
    public const int ParkingSpaceFieldNumber = 6;
    private global::Apollo.Hdmap.ParkingSpace parkingSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.ParkingSpace ParkingSpace {
      get { return parkingSpace_; }
      set {
        parkingSpace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!waypoint_.Equals(other.waypoint_)) return false;
      if(!blacklistedLane_.Equals(other.blacklistedLane_)) return false;
      if(!blacklistedRoad_.Equals(other.blacklistedRoad_)) return false;
      if (Broadcast != other.Broadcast) return false;
      if (!object.Equals(ParkingSpace, other.ParkingSpace)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= waypoint_.GetHashCode();
      hash ^= blacklistedLane_.GetHashCode();
      hash ^= blacklistedRoad_.GetHashCode();
      if (Broadcast != false) hash ^= Broadcast.GetHashCode();
      if (parkingSpace_ != null) hash ^= ParkingSpace.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      waypoint_.WriteTo(output, _repeated_waypoint_codec);
      blacklistedLane_.WriteTo(output, _repeated_blacklistedLane_codec);
      blacklistedRoad_.WriteTo(output, _repeated_blacklistedRoad_codec);
      if (Broadcast != false) {
        output.WriteRawTag(40);
        output.WriteBool(Broadcast);
      }
      if (parkingSpace_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ParkingSpace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += waypoint_.CalculateSize(_repeated_waypoint_codec);
      size += blacklistedLane_.CalculateSize(_repeated_blacklistedLane_codec);
      size += blacklistedRoad_.CalculateSize(_repeated_blacklistedRoad_codec);
      if (Broadcast != false) {
        size += 1 + 1;
      }
      if (parkingSpace_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParkingSpace);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      waypoint_.Add(other.waypoint_);
      blacklistedLane_.Add(other.blacklistedLane_);
      blacklistedRoad_.Add(other.blacklistedRoad_);
      if (other.Broadcast != false) {
        Broadcast = other.Broadcast;
      }
      if (other.parkingSpace_ != null) {
        if (parkingSpace_ == null) {
          parkingSpace_ = new global::Apollo.Hdmap.ParkingSpace();
        }
        ParkingSpace.MergeFrom(other.ParkingSpace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            waypoint_.AddEntriesFrom(input, _repeated_waypoint_codec);
            break;
          }
          case 26: {
            blacklistedLane_.AddEntriesFrom(input, _repeated_blacklistedLane_codec);
            break;
          }
          case 34: {
            blacklistedRoad_.AddEntriesFrom(input, _repeated_blacklistedRoad_codec);
            break;
          }
          case 40: {
            Broadcast = input.ReadBool();
            break;
          }
          case 50: {
            if (parkingSpace_ == null) {
              parkingSpace_ = new global::Apollo.Hdmap.ParkingSpace();
            }
            input.ReadMessage(parkingSpace_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Measurement : pb::IMessage<Measurement> {
    private static readonly pb::MessageParser<Measurement> _parser = new pb::MessageParser<Measurement>(() => new Measurement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Measurement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement(Measurement other) : this() {
      distance_ = other.distance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement Clone() {
      return new Measurement(this);
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 1;
    private double distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Measurement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Measurement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Distance != other.Distance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Distance != 0D) hash ^= Distance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Distance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Distance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Distance != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Measurement other) {
      if (other == null) {
        return;
      }
      if (other.Distance != 0D) {
        Distance = other.Distance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Distance = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Passage : pb::IMessage<Passage> {
    private static readonly pb::MessageParser<Passage> _parser = new pb::MessageParser<Passage>(() => new Passage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Passage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Passage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Passage(Passage other) : this() {
      segment_ = other.segment_.Clone();
      canExit_ = other.canExit_;
      changeLaneType_ = other.changeLaneType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Passage Clone() {
      return new Passage(this);
    }

    /// <summary>Field number for the "segment" field.</summary>
    public const int SegmentFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Routing.LaneSegment> _repeated_segment_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Routing.LaneSegment.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.LaneSegment> segment_ = new pbc::RepeatedField<global::Apollo.Routing.LaneSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.LaneSegment> Segment {
      get { return segment_; }
    }

    /// <summary>Field number for the "can_exit" field.</summary>
    public const int CanExitFieldNumber = 2;
    private bool canExit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanExit {
      get { return canExit_; }
      set {
        canExit_ = value;
      }
    }

    /// <summary>Field number for the "change_lane_type" field.</summary>
    public const int ChangeLaneTypeFieldNumber = 3;
    private global::Apollo.Routing.ChangeLaneType changeLaneType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.ChangeLaneType ChangeLaneType {
      get { return changeLaneType_; }
      set {
        changeLaneType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Passage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Passage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segment_.Equals(other.segment_)) return false;
      if (CanExit != other.CanExit) return false;
      if (ChangeLaneType != other.ChangeLaneType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segment_.GetHashCode();
      if (CanExit != false) hash ^= CanExit.GetHashCode();
      if (ChangeLaneType != 0) hash ^= ChangeLaneType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      segment_.WriteTo(output, _repeated_segment_codec);
      if (CanExit != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanExit);
      }
      if (ChangeLaneType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ChangeLaneType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segment_.CalculateSize(_repeated_segment_codec);
      if (CanExit != false) {
        size += 1 + 1;
      }
      if (ChangeLaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeLaneType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Passage other) {
      if (other == null) {
        return;
      }
      segment_.Add(other.segment_);
      if (other.CanExit != false) {
        CanExit = other.CanExit;
      }
      if (other.ChangeLaneType != 0) {
        ChangeLaneType = other.ChangeLaneType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            segment_.AddEntriesFrom(input, _repeated_segment_codec);
            break;
          }
          case 16: {
            CanExit = input.ReadBool();
            break;
          }
          case 24: {
            changeLaneType_ = (global::Apollo.Routing.ChangeLaneType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoadSegment : pb::IMessage<RoadSegment> {
    private static readonly pb::MessageParser<RoadSegment> _parser = new pb::MessageParser<RoadSegment>(() => new RoadSegment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoadSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadSegment(RoadSegment other) : this() {
      id_ = other.id_;
      passage_ = other.passage_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadSegment Clone() {
      return new RoadSegment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passage" field.</summary>
    public const int PassageFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Routing.Passage> _repeated_passage_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Routing.Passage.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.Passage> passage_ = new pbc::RepeatedField<global::Apollo.Routing.Passage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.Passage> Passage {
      get { return passage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoadSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoadSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!passage_.Equals(other.passage_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= passage_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      passage_.WriteTo(output, _repeated_passage_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += passage_.CalculateSize(_repeated_passage_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoadSegment other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      passage_.Add(other.passage_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            passage_.AddEntriesFrom(input, _repeated_passage_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoutingResponse : pb::IMessage<RoutingResponse> {
    private static readonly pb::MessageParser<RoutingResponse> _parser = new pb::MessageParser<RoutingResponse>(() => new RoutingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Routing.RoutingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingResponse(RoutingResponse other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      road_ = other.road_.Clone();
      Measurement = other.measurement_ != null ? other.Measurement.Clone() : null;
      RoutingRequest = other.routingRequest_ != null ? other.RoutingRequest.Clone() : null;
      mapVersion_ = other.mapVersion_;
      Status = other.status_ != null ? other.Status.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingResponse Clone() {
      return new RoutingResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Apollo.Common.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "road" field.</summary>
    public const int RoadFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Routing.RoadSegment> _repeated_road_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Routing.RoadSegment.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Routing.RoadSegment> road_ = new pbc::RepeatedField<global::Apollo.Routing.RoadSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Routing.RoadSegment> Road {
      get { return road_; }
    }

    /// <summary>Field number for the "measurement" field.</summary>
    public const int MeasurementFieldNumber = 3;
    private global::Apollo.Routing.Measurement measurement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.Measurement Measurement {
      get { return measurement_; }
      set {
        measurement_ = value;
      }
    }

    /// <summary>Field number for the "routing_request" field.</summary>
    public const int RoutingRequestFieldNumber = 4;
    private global::Apollo.Routing.RoutingRequest routingRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.RoutingRequest RoutingRequest {
      get { return routingRequest_; }
      set {
        routingRequest_ = value;
      }
    }

    /// <summary>Field number for the "map_version" field.</summary>
    public const int MapVersionFieldNumber = 5;
    private pb::ByteString mapVersion_ = pb::ByteString.Empty;
    /// <summary>
    /// the map version which is used to build road graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapVersion {
      get { return mapVersion_; }
      set {
        mapVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::Apollo.Common.StatusPb status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.StatusPb Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!road_.Equals(other.road_)) return false;
      if (!object.Equals(Measurement, other.Measurement)) return false;
      if (!object.Equals(RoutingRequest, other.RoutingRequest)) return false;
      if (MapVersion != other.MapVersion) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= road_.GetHashCode();
      if (measurement_ != null) hash ^= Measurement.GetHashCode();
      if (routingRequest_ != null) hash ^= RoutingRequest.GetHashCode();
      if (MapVersion.Length != 0) hash ^= MapVersion.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      road_.WriteTo(output, _repeated_road_codec);
      if (measurement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Measurement);
      }
      if (routingRequest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoutingRequest);
      }
      if (MapVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(MapVersion);
      }
      if (status_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += road_.CalculateSize(_repeated_road_codec);
      if (measurement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Measurement);
      }
      if (routingRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoutingRequest);
      }
      if (MapVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapVersion);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Apollo.Common.Header();
        }
        Header.MergeFrom(other.Header);
      }
      road_.Add(other.road_);
      if (other.measurement_ != null) {
        if (measurement_ == null) {
          measurement_ = new global::Apollo.Routing.Measurement();
        }
        Measurement.MergeFrom(other.Measurement);
      }
      if (other.routingRequest_ != null) {
        if (routingRequest_ == null) {
          routingRequest_ = new global::Apollo.Routing.RoutingRequest();
        }
        RoutingRequest.MergeFrom(other.RoutingRequest);
      }
      if (other.MapVersion.Length != 0) {
        MapVersion = other.MapVersion;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Apollo.Common.StatusPb();
        }
        Status.MergeFrom(other.Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Apollo.Common.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            road_.AddEntriesFrom(input, _repeated_road_codec);
            break;
          }
          case 26: {
            if (measurement_ == null) {
              measurement_ = new global::Apollo.Routing.Measurement();
            }
            input.ReadMessage(measurement_);
            break;
          }
          case 34: {
            if (routingRequest_ == null) {
              routingRequest_ = new global::Apollo.Routing.RoutingRequest();
            }
            input.ReadMessage(routingRequest_);
            break;
          }
          case 42: {
            MapVersion = input.ReadBytes();
            break;
          }
          case 50: {
            if (status_ == null) {
              status_ = new global::Apollo.Common.StatusPb();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
