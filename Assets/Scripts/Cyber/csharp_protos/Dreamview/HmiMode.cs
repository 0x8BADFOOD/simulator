// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_mode.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Dreamview {

  /// <summary>Holder for reflection information generated from modules/dreamview/proto/hmi_mode.proto</summary>
  public static partial class HmiModeReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/dreamview/proto/hmi_mode.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HmiModeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZtb2R1bGVzL2RyZWFtdmlldy9wcm90by9obWlfbW9kZS5wcm90bxIQYXBv",
            "bGxvLmRyZWFtdmlldyIwChRQcm9jZXNzTW9uaXRvckNvbmZpZxIYChBjb21t",
            "YW5kX2tleXdvcmRzGAEgAygJIjkKFENoYW5uZWxNb25pdG9yQ29uZmlnEgwK",
            "BG5hbWUYASABKAkSEwoLZGVsYXlfZmF0YWwYAiABKAEiwAEKFVJlc291cmNl",
            "TW9uaXRvckNvbmZpZxJGCgtkaXNrX3NwYWNlcxgBIAMoCzIxLmFwb2xsby5k",
            "cmVhbXZpZXcuUmVzb3VyY2VNb25pdG9yQ29uZmlnLkRpc2tTcGFjZRpfCglE",
            "aXNrU3BhY2USDAoEcGF0aBgBIAEoCRIiChppbnN1ZmZpY2llbnRfc3BhY2Vf",
            "d2FybmluZxgCIAEoBRIgChhpbnN1ZmZpY2llbnRfc3BhY2VfZXJyb3IYAyAB",
            "KAUi1gEKEk1vbml0b3JlZENvbXBvbmVudBI3Cgdwcm9jZXNzGAEgASgLMiYu",
            "YXBvbGxvLmRyZWFtdmlldy5Qcm9jZXNzTW9uaXRvckNvbmZpZxI3CgdjaGFu",
            "bmVsGAIgASgLMiYuYXBvbGxvLmRyZWFtdmlldy5DaGFubmVsTW9uaXRvckNv",
            "bmZpZxI5CghyZXNvdXJjZRgDIAEoCzInLmFwb2xsby5kcmVhbXZpZXcuUmVz",
            "b3VyY2VNb25pdG9yQ29uZmlnEhMKC19mb3Jfc2FmZXR5GAQgASgIIpIBCgZN",
            "b2R1bGUSFQoNc3RhcnRfY29tbWFuZBgBIAEoCRIUCgxzdG9wX2NvbW1hbmQY",
            "AiABKAkSRgoWcHJvY2Vzc19tb25pdG9yX2NvbmZpZxgDIAEoCzImLmFwb2xs",
            "by5kcmVhbXZpZXcuUHJvY2Vzc01vbml0b3JDb25maWcSEwoLX2Zvcl9zYWZl",
            "dHkYBCABKAgiTAoLQ3liZXJNb2R1bGUSEQoJZGFnX2ZpbGVzGAEgAygJEhMK",
            "C19mb3Jfc2FmZXR5GAIgASgIEhUKDXByb2Nlc3NfZ3JvdXAYAyABKAki2AMK",
            "B0hNSU1vZGUSQgoNY3liZXJfbW9kdWxlcxgBIAMoCzIrLmFwb2xsby5kcmVh",
            "bXZpZXcuSE1JTW9kZS5DeWJlck1vZHVsZXNFbnRyeRI3Cgdtb2R1bGVzGAIg",
            "AygLMiYuYXBvbGxvLmRyZWFtdmlldy5ITUlNb2RlLk1vZHVsZXNFbnRyeRJQ",
            "ChRtb25pdG9yZWRfY29tcG9uZW50cxgDIAMoCzIyLmFwb2xsby5kcmVhbXZp",
            "ZXcuSE1JTW9kZS5Nb25pdG9yZWRDb21wb25lbnRzRW50cnkaUgoRQ3liZXJN",
            "b2R1bGVzRW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVlGAIgASgLMh0uYXBv",
            "bGxvLmRyZWFtdmlldy5DeWJlck1vZHVsZToCOAEaSAoMTW9kdWxlc0VudHJ5",
            "EgsKA2tleRgBIAEoCRInCgV2YWx1ZRgCIAEoCzIYLmFwb2xsby5kcmVhbXZp",
            "ZXcuTW9kdWxlOgI4ARpgChhNb25pdG9yZWRDb21wb25lbnRzRW50cnkSCwoD",
            "a2V5GAEgASgJEjMKBXZhbHVlGAIgASgLMiQuYXBvbGxvLmRyZWFtdmlldy5N",
            "b25pdG9yZWRDb21wb25lbnQ6AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.ProcessMonitorConfig), global::Apollo.Dreamview.ProcessMonitorConfig.Parser, new[]{ "CommandKeywords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.ChannelMonitorConfig), global::Apollo.Dreamview.ChannelMonitorConfig.Parser, new[]{ "Name", "DelayFatal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.ResourceMonitorConfig), global::Apollo.Dreamview.ResourceMonitorConfig.Parser, new[]{ "DiskSpaces" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.ResourceMonitorConfig.Types.DiskSpace), global::Apollo.Dreamview.ResourceMonitorConfig.Types.DiskSpace.Parser, new[]{ "Path", "InsufficientSpaceWarning", "InsufficientSpaceError" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.MonitoredComponent), global::Apollo.Dreamview.MonitoredComponent.Parser, new[]{ "Process", "Channel", "Resource", "ForSafety" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Module), global::Apollo.Dreamview.Module.Parser, new[]{ "StartCommand", "StopCommand", "ProcessMonitorConfig", "ForSafety" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.CyberModule), global::Apollo.Dreamview.CyberModule.Parser, new[]{ "DagFiles", "ForSafety", "ProcessGroup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.HMIMode), global::Apollo.Dreamview.HMIMode.Parser, new[]{ "CyberModules", "Modules", "MonitoredComponents" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// For ProcessMonitor.
  /// </summary>
  public sealed partial class ProcessMonitorConfig : pb::IMessage<ProcessMonitorConfig> {
    private static readonly pb::MessageParser<ProcessMonitorConfig> _parser = new pb::MessageParser<ProcessMonitorConfig>(() => new ProcessMonitorConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessMonitorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiModeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessMonitorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessMonitorConfig(ProcessMonitorConfig other) : this() {
      commandKeywords_ = other.commandKeywords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessMonitorConfig Clone() {
      return new ProcessMonitorConfig(this);
    }

    /// <summary>Field number for the "command_keywords" field.</summary>
    public const int CommandKeywordsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_commandKeywords_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> commandKeywords_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CommandKeywords {
      get { return commandKeywords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessMonitorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessMonitorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commandKeywords_.Equals(other.commandKeywords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commandKeywords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commandKeywords_.WriteTo(output, _repeated_commandKeywords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commandKeywords_.CalculateSize(_repeated_commandKeywords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessMonitorConfig other) {
      if (other == null) {
        return;
      }
      commandKeywords_.Add(other.commandKeywords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            commandKeywords_.AddEntriesFrom(input, _repeated_commandKeywords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// For ChannelMonitor.
  /// </summary>
  public sealed partial class ChannelMonitorConfig : pb::IMessage<ChannelMonitorConfig> {
    private static readonly pb::MessageParser<ChannelMonitorConfig> _parser = new pb::MessageParser<ChannelMonitorConfig>(() => new ChannelMonitorConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMonitorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiModeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMonitorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMonitorConfig(ChannelMonitorConfig other) : this() {
      name_ = other.name_;
      delayFatal_ = other.delayFatal_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMonitorConfig Clone() {
      return new ChannelMonitorConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delay_fatal" field.</summary>
    public const int DelayFatalFieldNumber = 2;
    private double delayFatal_;
    /// <summary>
    /// In seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DelayFatal {
      get { return delayFatal_; }
      set {
        delayFatal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMonitorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMonitorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DelayFatal != other.DelayFatal) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DelayFatal != 0D) hash ^= DelayFatal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DelayFatal != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DelayFatal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DelayFatal != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMonitorConfig other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DelayFatal != 0D) {
        DelayFatal = other.DelayFatal;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            DelayFatal = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// For ResourceMonitor.
  /// </summary>
  public sealed partial class ResourceMonitorConfig : pb::IMessage<ResourceMonitorConfig> {
    private static readonly pb::MessageParser<ResourceMonitorConfig> _parser = new pb::MessageParser<ResourceMonitorConfig>(() => new ResourceMonitorConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceMonitorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiModeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceMonitorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceMonitorConfig(ResourceMonitorConfig other) : this() {
      diskSpaces_ = other.diskSpaces_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceMonitorConfig Clone() {
      return new ResourceMonitorConfig(this);
    }

    /// <summary>Field number for the "disk_spaces" field.</summary>
    public const int DiskSpacesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.ResourceMonitorConfig.Types.DiskSpace> _repeated_diskSpaces_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Dreamview.ResourceMonitorConfig.Types.DiskSpace.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.ResourceMonitorConfig.Types.DiskSpace> diskSpaces_ = new pbc::RepeatedField<global::Apollo.Dreamview.ResourceMonitorConfig.Types.DiskSpace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.ResourceMonitorConfig.Types.DiskSpace> DiskSpaces {
      get { return diskSpaces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceMonitorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceMonitorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diskSpaces_.Equals(other.diskSpaces_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diskSpaces_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diskSpaces_.WriteTo(output, _repeated_diskSpaces_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diskSpaces_.CalculateSize(_repeated_diskSpaces_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceMonitorConfig other) {
      if (other == null) {
        return;
      }
      diskSpaces_.Add(other.diskSpaces_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            diskSpaces_.AddEntriesFrom(input, _repeated_diskSpaces_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ResourceMonitorConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DiskSpace : pb::IMessage<DiskSpace> {
        private static readonly pb::MessageParser<DiskSpace> _parser = new pb::MessageParser<DiskSpace>(() => new DiskSpace());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DiskSpace> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Dreamview.ResourceMonitorConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpace() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpace(DiskSpace other) : this() {
          path_ = other.path_;
          insufficientSpaceWarning_ = other.insufficientSpaceWarning_;
          insufficientSpaceError_ = other.insufficientSpaceError_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpace Clone() {
          return new DiskSpace(this);
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 1;
        private string path_ = "";
        /// <summary>
        /// Path to monitor space. Support wildcards like ? and *.
        /// If the path doens't exist, raise UNKNWON which will be ignored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "insufficient_space_warning" field.</summary>
        public const int InsufficientSpaceWarningFieldNumber = 2;
        private int insufficientSpaceWarning_;
        /// <summary>
        /// In GB.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InsufficientSpaceWarning {
          get { return insufficientSpaceWarning_; }
          set {
            insufficientSpaceWarning_ = value;
          }
        }

        /// <summary>Field number for the "insufficient_space_error" field.</summary>
        public const int InsufficientSpaceErrorFieldNumber = 3;
        private int insufficientSpaceError_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InsufficientSpaceError {
          get { return insufficientSpaceError_; }
          set {
            insufficientSpaceError_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DiskSpace);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DiskSpace other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Path != other.Path) return false;
          if (InsufficientSpaceWarning != other.InsufficientSpaceWarning) return false;
          if (InsufficientSpaceError != other.InsufficientSpaceError) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (InsufficientSpaceWarning != 0) hash ^= InsufficientSpaceWarning.GetHashCode();
          if (InsufficientSpaceError != 0) hash ^= InsufficientSpaceError.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Path.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Path);
          }
          if (InsufficientSpaceWarning != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(InsufficientSpaceWarning);
          }
          if (InsufficientSpaceError != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(InsufficientSpaceError);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (InsufficientSpaceWarning != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InsufficientSpaceWarning);
          }
          if (InsufficientSpaceError != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InsufficientSpaceError);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DiskSpace other) {
          if (other == null) {
            return;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          if (other.InsufficientSpaceWarning != 0) {
            InsufficientSpaceWarning = other.InsufficientSpaceWarning;
          }
          if (other.InsufficientSpaceError != 0) {
            InsufficientSpaceError = other.InsufficientSpaceError;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Path = input.ReadString();
                break;
              }
              case 16: {
                InsufficientSpaceWarning = input.ReadInt32();
                break;
              }
              case 24: {
                InsufficientSpaceError = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A monitored component will be listed on HMI which only shows its status but
  /// user cannot operate.
  /// The whole config will generate SystemStatus.components.summary by Monitor
  /// module, which is generally the most severe one of process, channel or
  /// resource status.
  /// </summary>
  public sealed partial class MonitoredComponent : pb::IMessage<MonitoredComponent> {
    private static readonly pb::MessageParser<MonitoredComponent> _parser = new pb::MessageParser<MonitoredComponent>(() => new MonitoredComponent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoredComponent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiModeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoredComponent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoredComponent(MonitoredComponent other) : this() {
      Process = other.process_ != null ? other.Process.Clone() : null;
      Channel = other.channel_ != null ? other.Channel.Clone() : null;
      Resource = other.resource_ != null ? other.Resource.Clone() : null;
      ForSafety_ = other.ForSafety_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoredComponent Clone() {
      return new MonitoredComponent(this);
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 1;
    private global::Apollo.Dreamview.ProcessMonitorConfig process_;
    /// <summary>
    /// Generate SystemStatus.components.process_status.
    /// OK if the process is running.
    /// FATAL if the process is down.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.ProcessMonitorConfig Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private global::Apollo.Dreamview.ChannelMonitorConfig channel_;
    /// <summary>
    /// Generate SystemStatus.components.channel_status.
    /// OK if delay is not notable.
    /// FATAL if delay is larger than fatal_delay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.ChannelMonitorConfig Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private global::Apollo.Dreamview.ResourceMonitorConfig resource_;
    /// <summary>
    /// Generate SystemStatus.components.resource_status.
    /// OK if all requirements are met.
    /// WARN/ERROR/FATAL if any requirement is below expectation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.ResourceMonitorConfig Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "_for_safety" field.</summary>
    public const int ForSafetyFieldNumber = 4;
    private bool ForSafety_;
    /// <summary>
    /// Whether to trigger safe-mode if the component is down.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForSafety {
      get { return ForSafety_; }
      set {
        ForSafety_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoredComponent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoredComponent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Process, other.Process)) return false;
      if (!object.Equals(Channel, other.Channel)) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (ForSafety != other.ForSafety) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (process_ != null) hash ^= Process.GetHashCode();
      if (channel_ != null) hash ^= Channel.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (ForSafety != false) hash ^= ForSafety.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (process_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Process);
      }
      if (channel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Channel);
      }
      if (resource_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Resource);
      }
      if (ForSafety != false) {
        output.WriteRawTag(32);
        output.WriteBool(ForSafety);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (process_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Process);
      }
      if (channel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (ForSafety != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoredComponent other) {
      if (other == null) {
        return;
      }
      if (other.process_ != null) {
        if (process_ == null) {
          process_ = new global::Apollo.Dreamview.ProcessMonitorConfig();
        }
        Process.MergeFrom(other.Process);
      }
      if (other.channel_ != null) {
        if (channel_ == null) {
          channel_ = new global::Apollo.Dreamview.ChannelMonitorConfig();
        }
        Channel.MergeFrom(other.Channel);
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          resource_ = new global::Apollo.Dreamview.ResourceMonitorConfig();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.ForSafety != false) {
        ForSafety = other.ForSafety;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (process_ == null) {
              process_ = new global::Apollo.Dreamview.ProcessMonitorConfig();
            }
            input.ReadMessage(process_);
            break;
          }
          case 18: {
            if (channel_ == null) {
              channel_ = new global::Apollo.Dreamview.ChannelMonitorConfig();
            }
            input.ReadMessage(channel_);
            break;
          }
          case 26: {
            if (resource_ == null) {
              resource_ = new global::Apollo.Dreamview.ResourceMonitorConfig();
            }
            input.ReadMessage(resource_);
            break;
          }
          case 32: {
            ForSafety = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A module which can be started and stopped by HMI.
  /// </summary>
  public sealed partial class Module : pb::IMessage<Module> {
    private static readonly pb::MessageParser<Module> _parser = new pb::MessageParser<Module>(() => new Module());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Module> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiModeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module(Module other) : this() {
      startCommand_ = other.startCommand_;
      stopCommand_ = other.stopCommand_;
      ProcessMonitorConfig = other.processMonitorConfig_ != null ? other.ProcessMonitorConfig.Clone() : null;
      ForSafety_ = other.ForSafety_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module Clone() {
      return new Module(this);
    }

    /// <summary>Field number for the "start_command" field.</summary>
    public const int StartCommandFieldNumber = 1;
    private string startCommand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartCommand {
      get { return startCommand_; }
      set {
        startCommand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stop_command" field.</summary>
    public const int StopCommandFieldNumber = 2;
    private string stopCommand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopCommand {
      get { return stopCommand_; }
      set {
        stopCommand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "process_monitor_config" field.</summary>
    public const int ProcessMonitorConfigFieldNumber = 3;
    private global::Apollo.Dreamview.ProcessMonitorConfig processMonitorConfig_;
    /// <summary>
    /// We use the config in ProcessMonitor to check if the module is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.ProcessMonitorConfig ProcessMonitorConfig {
      get { return processMonitorConfig_; }
      set {
        processMonitorConfig_ = value;
      }
    }

    /// <summary>Field number for the "_for_safety" field.</summary>
    public const int ForSafetyFieldNumber = 4;
    private bool ForSafety_;
    /// <summary>
    /// Whether to trigger safe-mode if the module is down.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForSafety {
      get { return ForSafety_; }
      set {
        ForSafety_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Module);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Module other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartCommand != other.StartCommand) return false;
      if (StopCommand != other.StopCommand) return false;
      if (!object.Equals(ProcessMonitorConfig, other.ProcessMonitorConfig)) return false;
      if (ForSafety != other.ForSafety) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartCommand.Length != 0) hash ^= StartCommand.GetHashCode();
      if (StopCommand.Length != 0) hash ^= StopCommand.GetHashCode();
      if (processMonitorConfig_ != null) hash ^= ProcessMonitorConfig.GetHashCode();
      if (ForSafety != false) hash ^= ForSafety.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartCommand.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StartCommand);
      }
      if (StopCommand.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StopCommand);
      }
      if (processMonitorConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ProcessMonitorConfig);
      }
      if (ForSafety != false) {
        output.WriteRawTag(32);
        output.WriteBool(ForSafety);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartCommand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartCommand);
      }
      if (StopCommand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopCommand);
      }
      if (processMonitorConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProcessMonitorConfig);
      }
      if (ForSafety != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Module other) {
      if (other == null) {
        return;
      }
      if (other.StartCommand.Length != 0) {
        StartCommand = other.StartCommand;
      }
      if (other.StopCommand.Length != 0) {
        StopCommand = other.StopCommand;
      }
      if (other.processMonitorConfig_ != null) {
        if (processMonitorConfig_ == null) {
          processMonitorConfig_ = new global::Apollo.Dreamview.ProcessMonitorConfig();
        }
        ProcessMonitorConfig.MergeFrom(other.ProcessMonitorConfig);
      }
      if (other.ForSafety != false) {
        ForSafety = other.ForSafety;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StartCommand = input.ReadString();
            break;
          }
          case 18: {
            StopCommand = input.ReadString();
            break;
          }
          case 26: {
            if (processMonitorConfig_ == null) {
              processMonitorConfig_ = new global::Apollo.Dreamview.ProcessMonitorConfig();
            }
            input.ReadMessage(processMonitorConfig_);
            break;
          }
          case 32: {
            ForSafety = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A CyberModule will be translated to a regular Module upon loading.
  /// </summary>
  public sealed partial class CyberModule : pb::IMessage<CyberModule> {
    private static readonly pb::MessageParser<CyberModule> _parser = new pb::MessageParser<CyberModule>(() => new CyberModule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CyberModule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiModeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CyberModule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CyberModule(CyberModule other) : this() {
      dagFiles_ = other.dagFiles_.Clone();
      ForSafety_ = other.ForSafety_;
      processGroup_ = other.processGroup_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CyberModule Clone() {
      return new CyberModule(this);
    }

    /// <summary>Field number for the "dag_files" field.</summary>
    public const int DagFilesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_dagFiles_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> dagFiles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DagFiles {
      get { return dagFiles_; }
    }

    /// <summary>Field number for the "_for_safety" field.</summary>
    public const int ForSafetyFieldNumber = 2;
    private bool ForSafety_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForSafety {
      get { return ForSafety_; }
      set {
        ForSafety_ = value;
      }
    }

    /// <summary>Field number for the "process_group" field.</summary>
    public const int ProcessGroupFieldNumber = 3;
    private string processGroup_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessGroup {
      get { return processGroup_; }
      set {
        processGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CyberModule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CyberModule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dagFiles_.Equals(other.dagFiles_)) return false;
      if (ForSafety != other.ForSafety) return false;
      if (ProcessGroup != other.ProcessGroup) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dagFiles_.GetHashCode();
      if (ForSafety != false) hash ^= ForSafety.GetHashCode();
      if (ProcessGroup.Length != 0) hash ^= ProcessGroup.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dagFiles_.WriteTo(output, _repeated_dagFiles_codec);
      if (ForSafety != false) {
        output.WriteRawTag(16);
        output.WriteBool(ForSafety);
      }
      if (ProcessGroup.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProcessGroup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dagFiles_.CalculateSize(_repeated_dagFiles_codec);
      if (ForSafety != false) {
        size += 1 + 1;
      }
      if (ProcessGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessGroup);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CyberModule other) {
      if (other == null) {
        return;
      }
      dagFiles_.Add(other.dagFiles_);
      if (other.ForSafety != false) {
        ForSafety = other.ForSafety;
      }
      if (other.ProcessGroup.Length != 0) {
        ProcessGroup = other.ProcessGroup;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dagFiles_.AddEntriesFrom(input, _repeated_dagFiles_codec);
            break;
          }
          case 16: {
            ForSafety = input.ReadBool();
            break;
          }
          case 26: {
            ProcessGroup = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HMIMode : pb::IMessage<HMIMode> {
    private static readonly pb::MessageParser<HMIMode> _parser = new pb::MessageParser<HMIMode>(() => new HMIMode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HMIMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiModeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIMode(HMIMode other) : this() {
      cyberModules_ = other.cyberModules_.Clone();
      modules_ = other.modules_.Clone();
      monitoredComponents_ = other.monitoredComponents_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIMode Clone() {
      return new HMIMode(this);
    }

    /// <summary>Field number for the "cyber_modules" field.</summary>
    public const int CyberModulesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Apollo.Dreamview.CyberModule>.Codec _map_cyberModules_codec
        = new pbc::MapField<string, global::Apollo.Dreamview.CyberModule>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Apollo.Dreamview.CyberModule.Parser), 10);
    private readonly pbc::MapField<string, global::Apollo.Dreamview.CyberModule> cyberModules_ = new pbc::MapField<string, global::Apollo.Dreamview.CyberModule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Apollo.Dreamview.CyberModule> CyberModules {
      get { return cyberModules_; }
    }

    /// <summary>Field number for the "modules" field.</summary>
    public const int ModulesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Apollo.Dreamview.Module>.Codec _map_modules_codec
        = new pbc::MapField<string, global::Apollo.Dreamview.Module>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Apollo.Dreamview.Module.Parser), 18);
    private readonly pbc::MapField<string, global::Apollo.Dreamview.Module> modules_ = new pbc::MapField<string, global::Apollo.Dreamview.Module>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Apollo.Dreamview.Module> Modules {
      get { return modules_; }
    }

    /// <summary>Field number for the "monitored_components" field.</summary>
    public const int MonitoredComponentsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Apollo.Dreamview.MonitoredComponent>.Codec _map_monitoredComponents_codec
        = new pbc::MapField<string, global::Apollo.Dreamview.MonitoredComponent>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Apollo.Dreamview.MonitoredComponent.Parser), 26);
    private readonly pbc::MapField<string, global::Apollo.Dreamview.MonitoredComponent> monitoredComponents_ = new pbc::MapField<string, global::Apollo.Dreamview.MonitoredComponent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Apollo.Dreamview.MonitoredComponent> MonitoredComponents {
      get { return monitoredComponents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HMIMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HMIMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!CyberModules.Equals(other.CyberModules)) return false;
      if (!Modules.Equals(other.Modules)) return false;
      if (!MonitoredComponents.Equals(other.MonitoredComponents)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= CyberModules.GetHashCode();
      hash ^= Modules.GetHashCode();
      hash ^= MonitoredComponents.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cyberModules_.WriteTo(output, _map_cyberModules_codec);
      modules_.WriteTo(output, _map_modules_codec);
      monitoredComponents_.WriteTo(output, _map_monitoredComponents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cyberModules_.CalculateSize(_map_cyberModules_codec);
      size += modules_.CalculateSize(_map_modules_codec);
      size += monitoredComponents_.CalculateSize(_map_monitoredComponents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HMIMode other) {
      if (other == null) {
        return;
      }
      cyberModules_.Add(other.cyberModules_);
      modules_.Add(other.modules_);
      monitoredComponents_.Add(other.monitoredComponents_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cyberModules_.AddEntriesFrom(input, _map_cyberModules_codec);
            break;
          }
          case 18: {
            modules_.AddEntriesFrom(input, _map_modules_codec);
            break;
          }
          case 26: {
            monitoredComponents_.AddEntriesFrom(input, _map_monitoredComponents_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
