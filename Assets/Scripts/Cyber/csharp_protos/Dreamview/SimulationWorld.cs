// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/simulation_world.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Dreamview {

  /// <summary>Holder for reflection information generated from modules/dreamview/proto/simulation_world.proto</summary>
  public static partial class SimulationWorldReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/dreamview/proto/simulation_world.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimulationWorldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5tb2R1bGVzL2RyZWFtdmlldy9wcm90by9zaW11bGF0aW9uX3dvcmxkLnBy",
            "b3RvEhBhcG9sbG8uZHJlYW12aWV3GjJtb2R1bGVzL2NvbW1vbi9tb25pdG9y",
            "X2xvZy9wcm90by9tb25pdG9yX2xvZy5wcm90bxokbW9kdWxlcy9jb21tb24v",
            "cHJvdG8vcG5jX3BvaW50LnByb3RvGjJtb2R1bGVzL3BlcmNlcHRpb24vcHJv",
            "dG8vcGVyY2VwdGlvbl9vYnN0YWNsZS5wcm90bxoubW9kdWxlcy9wbGFubmlu",
            "Zy9wcm90by9wbGFubmluZ19pbnRlcm5hbC5wcm90bxombW9kdWxlcy9wcmVk",
            "aWN0aW9uL3Byb3RvL2ZlYXR1cmUucHJvdG8aI21vZHVsZXMvcm91dGluZy9w",
            "cm90by9yb3V0aW5nLnByb3RvIi8KDFBvbHlnb25Qb2ludBIJCgF4GAEgASgB",
            "EgkKAXkYAiABKAESCQoBehgDIAEoASJfCgpQcmVkaWN0aW9uEhMKC3Byb2Jh",
            "YmlsaXR5GAEgASgBEjwKFHByZWRpY3RlZF90cmFqZWN0b3J5GAIgAygLMh4u",
            "YXBvbGxvLmRyZWFtdmlldy5Qb2x5Z29uUG9pbnQixwYKCERlY2lzaW9uEi0K",
            "BHR5cGUYASABKA4yHy5hcG9sbG8uZHJlYW12aWV3LkRlY2lzaW9uLlR5cGUS",
            "NQoNcG9seWdvbl9wb2ludBgCIAMoCzIeLmFwb2xsby5kcmVhbXZpZXcuUG9s",
            "eWdvblBvaW50Eg8KB2hlYWRpbmcYAyABKAESEAoIbGF0aXR1ZGUYBCABKAES",
            "EQoJbG9uZ2l0dWRlGAUgASgBEhIKCnBvc2l0aW9uX3gYBiABKAESEgoKcG9z",
            "aXRpb25feRgHIAEoARIOCgZsZW5ndGgYCCABKAESDQoFd2lkdGgYCSABKAES",
            "DgoGaGVpZ2h0GAogASgBEj0KCnN0b3BSZWFzb24YCyABKA4yKS5hcG9sbG8u",
            "ZHJlYW12aWV3LkRlY2lzaW9uLlN0b3BSZWFzb25Db2RlEjgKEGNoYW5nZV9s",
            "YW5lX3R5cGUYDCABKA4yHi5hcG9sbG8ucm91dGluZy5DaGFuZ2VMYW5lVHlw",
            "ZSJaCgRUeXBlEgoKBklHTk9SRRAAEggKBFNUT1AQARIJCgVOVURHRRACEgkK",
            "BVlJRUxEEAMSDAoIT1ZFUlRBS0UQBBIKCgZGT0xMT1cQBRIMCghTSURFUEFT",
            "UxAGIvICCg5TdG9wUmVhc29uQ29kZRIYChRTVE9QUkVBU09OQ09ERV9EVU1N",
            "WRAAEhwKGFNUT1BfUkVBU09OX0hFQURfVkVISUNMRRABEhsKF1NUT1BfUkVB",
            "U09OX0RFU1RJTkFUSU9OEAISGgoWU1RPUF9SRUFTT05fUEVERVNUUklBThAD",
            "EhgKFFNUT1BfUkVBU09OX09CU1RBQ0xFEAQSFgoSU1RPUF9SRUFTT05fU0lH",
            "TkFMEGQSGQoVU1RPUF9SRUFTT05fU1RPUF9TSUdOEGUSGgoWU1RPUF9SRUFT",
            "T05fWUlFTERfU0lHThBmEhoKFlNUT1BfUkVBU09OX0NMRUFSX1pPTkUQZxIZ",
            "ChVTVE9QX1JFQVNPTl9DUk9TU1dBTEsQaBIZChVTVE9QX1JFQVNPTl9FTUVS",
            "R0VOQ1kQaRIZChVTVE9QX1JFQVNPTl9OT1RfUkVBRFkQahIZChVTVE9QX1JF",
            "QVNPTl9QVUxMX09WRVIQayLFCQoGT2JqZWN0EgoKAmlkGAEgASgJEjUKDXBv",
            "bHlnb25fcG9pbnQYAiADKAsyHi5hcG9sbG8uZHJlYW12aWV3LlBvbHlnb25Q",
            "b2ludBIPCgdoZWFkaW5nGAMgASgBEhAKCGxhdGl0dWRlGAQgASgBEhEKCWxv",
            "bmdpdHVkZRgFIAEoARISCgpwb3NpdGlvbl94GAYgASgBEhIKCnBvc2l0aW9u",
            "X3kYByABKAESDgoGbGVuZ3RoGAggASgBEg0KBXdpZHRoGAkgASgBEg4KBmhl",
            "aWdodBgKIAEoARINCgVzcGVlZBgLIAEoARIaChJzcGVlZF9hY2NlbGVyYXRp",
            "b24YDCABKAESEgoKc3BlZWRfamVyaxgNIAEoARIMCgRzcGluGA4gASgBEhkK",
            "EXNwaW5fYWNjZWxlcmF0aW9uGA8gASgBEhEKCXNwaW5famVyaxgQIAEoARIV",
            "Cg1zcGVlZF9oZWFkaW5nGBEgASgBEg0KBWthcHBhGBIgASgBEhIKCnNpZ25h",
            "bF9zZXQYEyADKAkSFgoOY3VycmVudF9zaWduYWwYFCABKAkSFQoNdGltZXN0",
            "YW1wX3NlYxgVIAEoARIsCghkZWNpc2lvbhgWIAMoCzIaLmFwb2xsby5kcmVh",
            "bXZpZXcuRGVjaXNpb24SGAoQeWllbGRlZF9vYnN0YWNsZRggIAEoCBIbChN0",
            "aHJvdHRsZV9wZXJjZW50YWdlGBcgASgBEhgKEGJyYWtlX3BlcmNlbnRhZ2UY",
            "GCABKAESGwoTc3RlZXJpbmdfcGVyY2VudGFnZRgZIAEoARIWCg5zdGVlcmlu",
            "Z19hbmdsZRgaIAEoARIWCg5zdGVlcmluZ19yYXRpbxgbIAEoARI+Cg5kaXNl",
            "bmdhZ2VfdHlwZRgcIAEoDjImLmFwb2xsby5kcmVhbXZpZXcuT2JqZWN0LkRp",
            "c2VuZ2FnZVR5cGUSKwoEdHlwZRgdIAEoDjIdLmFwb2xsby5kcmVhbXZpZXcu",
            "T2JqZWN0LlR5cGUSMAoKcHJlZGljdGlvbhgeIAMoCzIcLmFwb2xsby5kcmVh",
            "bXZpZXcuUHJlZGljdGlvbhISCgpjb25maWRlbmNlGB8gASgBEj4KEW9ic3Rh",
            "Y2xlX3ByaW9yaXR5GCEgASgLMiMuYXBvbGxvLnByZWRpY3Rpb24uT2JzdGFj",
            "bGVQcmlvcml0eSLEAQoNRGlzZW5nYWdlVHlwZRISCg5ESVNFTkdBR0VfTk9O",
            "RRAAEhUKEURJU0VOR0FHRV9VTktOT1dOEAESFAoQRElTRU5HQUdFX01BTlVB",
            "TBACEhcKE0RJU0VOR0FHRV9FTUVSR0VOQ1kQAxIdChlESVNFTkdBR0VfQVVU",
            "T19TVEVFUl9PTkxZEAQSHQoZRElTRU5HQUdFX0FVVE9fU1BFRURfT05MWRAF",
            "EhsKF0RJU0VOR0FHRV9DSEFTU0lTX0VSUk9SEAYigAEKBFR5cGUSCwoHVU5L",
            "Tk9XThAAEhMKD1VOS05PV05fTU9WQUJMRRABEhUKEVVOS05PV05fVU5NT1ZB",
            "QkxFEAISDgoKUEVERVNUUklBThADEgsKB0JJQ1lDTEUQBBILCgdWRUhJQ0xF",
            "EAUSCwoHVklSVFVBTBAGEggKBENJUFYQByKeAQoKRGVsYXlzSW5NcxIPCgdj",
            "aGFzc2lzGAEgASgBEhQKDGxvY2FsaXphdGlvbhgDIAEoARIbChNwZXJjZXB0",
            "aW9uX29ic3RhY2xlGAQgASgBEhAKCHBsYW5uaW5nGAUgASgBEhIKCnByZWRp",
            "Y3Rpb24YByABKAESFQoNdHJhZmZpY19saWdodBgIIAEoARIPCgdjb250cm9s",
            "GAkgASgBIjoKCVJvdXRlUGF0aBItCgVwb2ludBgBIAMoCzIeLmFwb2xsby5k",
            "cmVhbXZpZXcuUG9seWdvblBvaW50IjcKB0xhdGVuY3kSFQoNdGltZXN0YW1w",
            "X3NlYxgBIAEoARIVCg10b3RhbF90aW1lX21zGAIgASgBIugBCg1NYXBFbGVt",
            "ZW50SWRzEgwKBGxhbmUYASADKAkSEQoJY3Jvc3N3YWxrGAIgAygJEhAKCGp1",
            "bmN0aW9uGAMgAygJEg4KBnNpZ25hbBgEIAMoCRIRCglzdG9wX3NpZ24YBSAD",
            "KAkSDQoFeWllbGQYBiADKAkSDwoHb3ZlcmxhcBgHIAMoCRIMCgRyb2FkGAgg",
            "AygJEhIKCmNsZWFyX2FyZWEYCSADKAkSFQoNcGFya2luZ19zcGFjZRgKIAMo",
            "CRISCgpzcGVlZF9idW1wGAsgAygJEhQKDHBuY19qdW5jdGlvbhgMIAMoCSJp",
            "CgtDb250cm9sRGF0YRIVCg10aW1lc3RhbXBfc2VjGAEgASgBEhUKDXN0YXRp",
            "b25fZXJyb3IYAiABKAESFQoNbGF0ZXJhbF9lcnJvchgDIAEoARIVCg1oZWFk",
            "aW5nX2Vycm9yGAQgASgBIl4KDE5vdGlmaWNhdGlvbhIVCg10aW1lc3RhbXBf",
            "c2VjGAEgASgBEjcKBGl0ZW0YAiABKAsyKS5hcG9sbG8uY29tbW9uLm1vbml0",
            "b3IuTW9uaXRvck1lc3NhZ2VJdGVtIuwICg9TaW11bGF0aW9uV29ybGQSEQoJ",
            "dGltZXN0YW1wGAEgASgBEhQKDHNlcXVlbmNlX251bRgCIAEoDRIoCgZvYmpl",
            "Y3QYAyADKAsyGC5hcG9sbG8uZHJlYW12aWV3Lk9iamVjdBIyChBhdXRvX2Ry",
            "aXZpbmdfY2FyGAQgASgLMhguYXBvbGxvLmRyZWFtdmlldy5PYmplY3QSMAoO",
            "dHJhZmZpY19zaWduYWwYBSABKAsyGC5hcG9sbG8uZHJlYW12aWV3Lk9iamVj",
            "dBIvCgpyb3V0ZV9wYXRoGAYgAygLMhsuYXBvbGxvLmRyZWFtdmlldy5Sb3V0",
            "ZVBhdGgSFAoMcm91dGluZ190aW1lGAcgASgBEjUKE3BsYW5uaW5nX3RyYWpl",
            "Y3RvcnkYCCADKAsyGC5hcG9sbG8uZHJlYW12aWV3Lk9iamVjdBIrCgltYWlu",
            "X3N0b3AYCSABKAsyGC5hcG9sbG8uZHJlYW12aWV3Lk9iamVjdBIvCg1tYWlu",
            "X2RlY2lzaW9uGAogASgLMhguYXBvbGxvLmRyZWFtdmlldy5PYmplY3QSEwoL",
            "c3BlZWRfbGltaXQYCyABKAESKwoFZGVsYXkYDCABKAsyHC5hcG9sbG8uZHJl",
            "YW12aWV3LkRlbGF5c0luTXMSNgoHbW9uaXRvchgNIAEoCzIlLmFwb2xsby5j",
            "b21tb24ubW9uaXRvci5Nb25pdG9yTWVzc2FnZRI0Cgxub3RpZmljYXRpb24Y",
            "DiADKAsyHi5hcG9sbG8uZHJlYW12aWV3Lk5vdGlmaWNhdGlvbhIVCg1lbmdh",
            "Z2VfYWR2aWNlGA8gASgJEj8KB2xhdGVuY3kYECADKAsyLi5hcG9sbG8uZHJl",
            "YW12aWV3LlNpbXVsYXRpb25Xb3JsZC5MYXRlbmN5RW50cnkSOAoPbWFwX2Vs",
            "ZW1lbnRfaWRzGBEgASgLMh8uYXBvbGxvLmRyZWFtdmlldy5NYXBFbGVtZW50",
            "SWRzEhAKCG1hcF9oYXNoGBIgASgEEhIKCm1hcF9yYWRpdXMYEyABKAESPQoN",
            "cGxhbm5pbmdfZGF0YRgUIAEoCzImLmFwb2xsby5wbGFubmluZ19pbnRlcm5h",
            "bC5QbGFubmluZ0RhdGESJQoDZ3BzGBUgASgLMhguYXBvbGxvLmRyZWFtdmll",
            "dy5PYmplY3QSMwoLbGFuZV9tYXJrZXIYFiABKAsyHi5hcG9sbG8ucGVyY2Vw",
            "dGlvbi5MYW5lTWFya2VycxIzCgxjb250cm9sX2RhdGEYFyABKAsyHS5hcG9s",
            "bG8uZHJlYW12aWV3LkNvbnRyb2xEYXRhEiwKD25hdmlnYXRpb25fcGF0aBgY",
            "IAMoCzITLmFwb2xsby5jb21tb24uUGF0aBITCgtpc19yc3Nfc2FmZRgZIAEo",
            "CBpJCgxMYXRlbmN5RW50cnkSCwoDa2V5GAEgASgJEigKBXZhbHVlGAIgASgL",
            "MhkuYXBvbGxvLmRyZWFtdmlldy5MYXRlbmN5OgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.Monitor.MonitorLogReflection.Descriptor, global::Apollo.Common.PncPointReflection.Descriptor, global::Apollo.Perception.PerceptionObstacleReflection.Descriptor, global::Apollo.PlanningInternal.PlanningInternalReflection.Descriptor, global::Apollo.Prediction.FeatureReflection.Descriptor, global::Apollo.Routing.RoutingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.PolygonPoint), global::Apollo.Dreamview.PolygonPoint.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Prediction), global::Apollo.Dreamview.Prediction.Parser, new[]{ "Probability", "PredictedTrajectory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Decision), global::Apollo.Dreamview.Decision.Parser, new[]{ "Type", "PolygonPoint", "Heading", "Latitude", "Longitude", "PositionX", "PositionY", "Length", "Width", "Height", "StopReason", "ChangeLaneType" }, null, new[]{ typeof(global::Apollo.Dreamview.Decision.Types.Type), typeof(global::Apollo.Dreamview.Decision.Types.StopReasonCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Object), global::Apollo.Dreamview.Object.Parser, new[]{ "Id", "PolygonPoint", "Heading", "Latitude", "Longitude", "PositionX", "PositionY", "Length", "Width", "Height", "Speed", "SpeedAcceleration", "SpeedJerk", "Spin", "SpinAcceleration", "SpinJerk", "SpeedHeading", "Kappa", "SignalSet", "CurrentSignal", "TimestampSec", "Decision", "YieldedObstacle", "ThrottlePercentage", "BrakePercentage", "SteeringPercentage", "SteeringAngle", "SteeringRatio", "DisengageType", "Type", "Prediction", "Confidence", "ObstaclePriority" }, null, new[]{ typeof(global::Apollo.Dreamview.Object.Types.DisengageType), typeof(global::Apollo.Dreamview.Object.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.DelaysInMs), global::Apollo.Dreamview.DelaysInMs.Parser, new[]{ "Chassis", "Localization", "PerceptionObstacle", "Planning", "Prediction", "TrafficLight", "Control" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.RoutePath), global::Apollo.Dreamview.RoutePath.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Latency), global::Apollo.Dreamview.Latency.Parser, new[]{ "TimestampSec", "TotalTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.MapElementIds), global::Apollo.Dreamview.MapElementIds.Parser, new[]{ "Lane", "Crosswalk", "Junction", "Signal", "StopSign", "Yield", "Overlap", "Road", "ClearArea", "ParkingSpace", "SpeedBump", "PncJunction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.ControlData), global::Apollo.Dreamview.ControlData.Parser, new[]{ "TimestampSec", "StationError", "LateralError", "HeadingError" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.Notification), global::Apollo.Dreamview.Notification.Parser, new[]{ "TimestampSec", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.SimulationWorld), global::Apollo.Dreamview.SimulationWorld.Parser, new[]{ "Timestamp", "SequenceNum", "Object", "AutoDrivingCar", "TrafficSignal", "RoutePath", "RoutingTime", "PlanningTrajectory", "MainStop", "MainDecision", "SpeedLimit", "Delay", "Monitor", "Notification", "EngageAdvice", "Latency", "MapElementIds", "MapHash", "MapRadius", "PlanningData", "Gps", "LaneMarker", "ControlData", "NavigationPath", "IsRssSafe" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Next-id: 4
  /// </summary>
  public sealed partial class PolygonPoint : pb::IMessage<PolygonPoint> {
    private static readonly pb::MessageParser<PolygonPoint> _parser = new pb::MessageParser<PolygonPoint>(() => new PolygonPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolygonPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolygonPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolygonPoint(PolygonPoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolygonPoint Clone() {
      return new PolygonPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolygonPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolygonPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolygonPoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Next-id: 3
  /// </summary>
  public sealed partial class Prediction : pb::IMessage<Prediction> {
    private static readonly pb::MessageParser<Prediction> _parser = new pb::MessageParser<Prediction>(() => new Prediction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Prediction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prediction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prediction(Prediction other) : this() {
      probability_ = other.probability_;
      predictedTrajectory_ = other.predictedTrajectory_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prediction Clone() {
      return new Prediction(this);
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 1;
    private double probability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "predicted_trajectory" field.</summary>
    public const int PredictedTrajectoryFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.PolygonPoint> _repeated_predictedTrajectory_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Dreamview.PolygonPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> predictedTrajectory_ = new pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> PredictedTrajectory {
      get { return predictedTrajectory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Prediction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Prediction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Probability != other.Probability) return false;
      if(!predictedTrajectory_.Equals(other.predictedTrajectory_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Probability != 0D) hash ^= Probability.GetHashCode();
      hash ^= predictedTrajectory_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Probability != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Probability);
      }
      predictedTrajectory_.WriteTo(output, _repeated_predictedTrajectory_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Probability != 0D) {
        size += 1 + 8;
      }
      size += predictedTrajectory_.CalculateSize(_repeated_predictedTrajectory_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Prediction other) {
      if (other == null) {
        return;
      }
      if (other.Probability != 0D) {
        Probability = other.Probability;
      }
      predictedTrajectory_.Add(other.predictedTrajectory_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Probability = input.ReadDouble();
            break;
          }
          case 18: {
            predictedTrajectory_.AddEntriesFrom(input, _repeated_predictedTrajectory_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Next-id: 13
  /// </summary>
  public sealed partial class Decision : pb::IMessage<Decision> {
    private static readonly pb::MessageParser<Decision> _parser = new pb::MessageParser<Decision>(() => new Decision());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decision(Decision other) : this() {
      type_ = other.type_;
      polygonPoint_ = other.polygonPoint_.Clone();
      heading_ = other.heading_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      stopReason_ = other.stopReason_;
      changeLaneType_ = other.changeLaneType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decision Clone() {
      return new Decision(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Apollo.Dreamview.Decision.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Decision.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "polygon_point" field.</summary>
    public const int PolygonPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.PolygonPoint> _repeated_polygonPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Dreamview.PolygonPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> polygonPoint_ = new pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint>();
    /// <summary>
    /// Shape Info
    /// Can be used for corners of nudge region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> PolygonPoint {
      get { return polygonPoint_; }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 3;
    private double heading_;
    /// <summary>
    /// Position Info
    /// Can be used for stop fence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 5;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "position_x" field.</summary>
    public const int PositionXFieldNumber = 6;
    private double positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "position_y" field.</summary>
    public const int PositionYFieldNumber = 7;
    private double positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 8;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 9;
    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 10;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "stopReason" field.</summary>
    public const int StopReasonFieldNumber = 11;
    private global::Apollo.Dreamview.Decision.Types.StopReasonCode stopReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Decision.Types.StopReasonCode StopReason {
      get { return stopReason_; }
      set {
        stopReason_ = value;
      }
    }

    /// <summary>Field number for the "change_lane_type" field.</summary>
    public const int ChangeLaneTypeFieldNumber = 12;
    private global::Apollo.Routing.ChangeLaneType changeLaneType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Routing.ChangeLaneType ChangeLaneType {
      get { return changeLaneType_; }
      set {
        changeLaneType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!polygonPoint_.Equals(other.polygonPoint_)) return false;
      if (Heading != other.Heading) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (PositionX != other.PositionX) return false;
      if (PositionY != other.PositionY) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (StopReason != other.StopReason) return false;
      if (ChangeLaneType != other.ChangeLaneType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= polygonPoint_.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (PositionX != 0D) hash ^= PositionX.GetHashCode();
      if (PositionY != 0D) hash ^= PositionY.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (StopReason != 0) hash ^= StopReason.GetHashCode();
      if (ChangeLaneType != 0) hash ^= ChangeLaneType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      polygonPoint_.WriteTo(output, _repeated_polygonPoint_codec);
      if (Heading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Heading);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Longitude);
      }
      if (PositionX != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PositionX);
      }
      if (PositionY != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PositionY);
      }
      if (Length != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Height);
      }
      if (StopReason != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) StopReason);
      }
      if (ChangeLaneType != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) ChangeLaneType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += polygonPoint_.CalculateSize(_repeated_polygonPoint_codec);
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (PositionX != 0D) {
        size += 1 + 8;
      }
      if (PositionY != 0D) {
        size += 1 + 8;
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (StopReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StopReason);
      }
      if (ChangeLaneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeLaneType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decision other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      polygonPoint_.Add(other.polygonPoint_);
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.PositionX != 0D) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0D) {
        PositionY = other.PositionY;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.StopReason != 0) {
        StopReason = other.StopReason;
      }
      if (other.ChangeLaneType != 0) {
        ChangeLaneType = other.ChangeLaneType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Apollo.Dreamview.Decision.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            polygonPoint_.AddEntriesFrom(input, _repeated_polygonPoint_codec);
            break;
          }
          case 25: {
            Heading = input.ReadDouble();
            break;
          }
          case 33: {
            Latitude = input.ReadDouble();
            break;
          }
          case 41: {
            Longitude = input.ReadDouble();
            break;
          }
          case 49: {
            PositionX = input.ReadDouble();
            break;
          }
          case 57: {
            PositionY = input.ReadDouble();
            break;
          }
          case 65: {
            Length = input.ReadDouble();
            break;
          }
          case 73: {
            Width = input.ReadDouble();
            break;
          }
          case 81: {
            Height = input.ReadDouble();
            break;
          }
          case 88: {
            stopReason_ = (global::Apollo.Dreamview.Decision.Types.StopReasonCode) input.ReadEnum();
            break;
          }
          case 96: {
            changeLaneType_ = (global::Apollo.Routing.ChangeLaneType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Decision message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// Ignore the object
        /// </summary>
        [pbr::OriginalName("IGNORE")] Ignore = 0,
        /// <summary>
        /// Stop at a distance from the object
        /// </summary>
        [pbr::OriginalName("STOP")] Stop = 1,
        /// <summary>
        /// Go around the object
        /// </summary>
        [pbr::OriginalName("NUDGE")] Nudge = 2,
        /// <summary>
        /// Go after the object
        /// </summary>
        [pbr::OriginalName("YIELD")] Yield = 3,
        /// <summary>
        /// Go before the object
        /// </summary>
        [pbr::OriginalName("OVERTAKE")] Overtake = 4,
        /// <summary>
        /// Follow the object in the same lane
        /// </summary>
        [pbr::OriginalName("FOLLOW")] Follow = 5,
        /// <summary>
        /// Pass the object in neighboring lane
        /// </summary>
        [pbr::OriginalName("SIDEPASS")] Sidepass = 6,
      }

      public enum StopReasonCode {
        [pbr::OriginalName("STOPREASONCODE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("STOP_REASON_HEAD_VEHICLE")] StopReasonHeadVehicle = 1,
        [pbr::OriginalName("STOP_REASON_DESTINATION")] StopReasonDestination = 2,
        [pbr::OriginalName("STOP_REASON_PEDESTRIAN")] StopReasonPedestrian = 3,
        [pbr::OriginalName("STOP_REASON_OBSTACLE")] StopReasonObstacle = 4,
        [pbr::OriginalName("STOP_REASON_SIGNAL")] StopReasonSignal = 100,
        [pbr::OriginalName("STOP_REASON_STOP_SIGN")] StopReasonStopSign = 101,
        [pbr::OriginalName("STOP_REASON_YIELD_SIGN")] StopReasonYieldSign = 102,
        [pbr::OriginalName("STOP_REASON_CLEAR_ZONE")] StopReasonClearZone = 103,
        [pbr::OriginalName("STOP_REASON_CROSSWALK")] StopReasonCrosswalk = 104,
        [pbr::OriginalName("STOP_REASON_EMERGENCY")] StopReasonEmergency = 105,
        [pbr::OriginalName("STOP_REASON_NOT_READY")] StopReasonNotReady = 106,
        [pbr::OriginalName("STOP_REASON_PULL_OVER")] StopReasonPullOver = 107,
      }

    }
    #endregion

  }

  /// <summary>
  /// Next-id: 34
  /// </summary>
  public sealed partial class Object : pb::IMessage<Object> {
    private static readonly pb::MessageParser<Object> _parser = new pb::MessageParser<Object>(() => new Object());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Object> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object(Object other) : this() {
      id_ = other.id_;
      polygonPoint_ = other.polygonPoint_.Clone();
      heading_ = other.heading_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      speed_ = other.speed_;
      speedAcceleration_ = other.speedAcceleration_;
      speedJerk_ = other.speedJerk_;
      spin_ = other.spin_;
      spinAcceleration_ = other.spinAcceleration_;
      spinJerk_ = other.spinJerk_;
      speedHeading_ = other.speedHeading_;
      kappa_ = other.kappa_;
      signalSet_ = other.signalSet_.Clone();
      currentSignal_ = other.currentSignal_;
      timestampSec_ = other.timestampSec_;
      decision_ = other.decision_.Clone();
      yieldedObstacle_ = other.yieldedObstacle_;
      throttlePercentage_ = other.throttlePercentage_;
      brakePercentage_ = other.brakePercentage_;
      steeringPercentage_ = other.steeringPercentage_;
      steeringAngle_ = other.steeringAngle_;
      steeringRatio_ = other.steeringRatio_;
      disengageType_ = other.disengageType_;
      type_ = other.type_;
      prediction_ = other.prediction_.Clone();
      confidence_ = other.confidence_;
      ObstaclePriority = other.obstaclePriority_ != null ? other.ObstaclePriority.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object Clone() {
      return new Object(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "polygon_point" field.</summary>
    public const int PolygonPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.PolygonPoint> _repeated_polygonPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Apollo.Dreamview.PolygonPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> polygonPoint_ = new pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint>();
    /// <summary>
    /// Shape Info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> PolygonPoint {
      get { return polygonPoint_; }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 3;
    private double heading_;
    /// <summary>
    /// Position Info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 5;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "position_x" field.</summary>
    public const int PositionXFieldNumber = 6;
    private double positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "position_y" field.</summary>
    public const int PositionYFieldNumber = 7;
    private double positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 8;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 9;
    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 10;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 11;
    private double speed_;
    /// <summary>
    /// Motion Info
    /// For objects with motion info such as ADC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "speed_acceleration" field.</summary>
    public const int SpeedAccelerationFieldNumber = 12;
    private double speedAcceleration_;
    /// <summary>
    /// in m/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedAcceleration {
      get { return speedAcceleration_; }
      set {
        speedAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "speed_jerk" field.</summary>
    public const int SpeedJerkFieldNumber = 13;
    private double speedJerk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedJerk {
      get { return speedJerk_; }
      set {
        speedJerk_ = value;
      }
    }

    /// <summary>Field number for the "spin" field.</summary>
    public const int SpinFieldNumber = 14;
    private double spin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Spin {
      get { return spin_; }
      set {
        spin_ = value;
      }
    }

    /// <summary>Field number for the "spin_acceleration" field.</summary>
    public const int SpinAccelerationFieldNumber = 15;
    private double spinAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpinAcceleration {
      get { return spinAcceleration_; }
      set {
        spinAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "spin_jerk" field.</summary>
    public const int SpinJerkFieldNumber = 16;
    private double spinJerk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpinJerk {
      get { return spinJerk_; }
      set {
        spinJerk_ = value;
      }
    }

    /// <summary>Field number for the "speed_heading" field.</summary>
    public const int SpeedHeadingFieldNumber = 17;
    private double speedHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedHeading {
      get { return speedHeading_; }
      set {
        speedHeading_ = value;
      }
    }

    /// <summary>Field number for the "kappa" field.</summary>
    public const int KappaFieldNumber = 18;
    private double kappa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Kappa {
      get { return kappa_; }
      set {
        kappa_ = value;
      }
    }

    /// <summary>Field number for the "signal_set" field.</summary>
    public const int SignalSetFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _repeated_signalSet_codec
        = pb::FieldCodec.ForString(154);
    private readonly pbc::RepeatedField<string> signalSet_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Signal Info
    /// For objects with signals set and current signal such as Traffic Light,
    /// Stop Sign, and Vehicle Signal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SignalSet {
      get { return signalSet_; }
    }

    /// <summary>Field number for the "current_signal" field.</summary>
    public const int CurrentSignalFieldNumber = 20;
    private string currentSignal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSignal {
      get { return currentSignal_; }
      set {
        currentSignal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_sec" field.</summary>
    public const int TimestampSecFieldNumber = 21;
    private double timestampSec_;
    /// <summary>
    /// Time Info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimestampSec {
      get { return timestampSec_; }
      set {
        timestampSec_ = value;
      }
    }

    /// <summary>Field number for the "decision" field.</summary>
    public const int DecisionFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Decision> _repeated_decision_codec
        = pb::FieldCodec.ForMessage(178, global::Apollo.Dreamview.Decision.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Decision> decision_ = new pbc::RepeatedField<global::Apollo.Dreamview.Decision>();
    /// <summary>
    /// Decision Info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Decision> Decision {
      get { return decision_; }
    }

    /// <summary>Field number for the "yielded_obstacle" field.</summary>
    public const int YieldedObstacleFieldNumber = 32;
    private bool yieldedObstacle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool YieldedObstacle {
      get { return yieldedObstacle_; }
      set {
        yieldedObstacle_ = value;
      }
    }

    /// <summary>Field number for the "throttle_percentage" field.</summary>
    public const int ThrottlePercentageFieldNumber = 23;
    private double throttlePercentage_;
    /// <summary>
    /// Chassis Info
    /// For ADC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ThrottlePercentage {
      get { return throttlePercentage_; }
      set {
        throttlePercentage_ = value;
      }
    }

    /// <summary>Field number for the "brake_percentage" field.</summary>
    public const int BrakePercentageFieldNumber = 24;
    private double brakePercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BrakePercentage {
      get { return brakePercentage_; }
      set {
        brakePercentage_ = value;
      }
    }

    /// <summary>Field number for the "steering_percentage" field.</summary>
    public const int SteeringPercentageFieldNumber = 25;
    private double steeringPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringPercentage {
      get { return steeringPercentage_; }
      set {
        steeringPercentage_ = value;
      }
    }

    /// <summary>Field number for the "steering_angle" field.</summary>
    public const int SteeringAngleFieldNumber = 26;
    private double steeringAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringAngle {
      get { return steeringAngle_; }
      set {
        steeringAngle_ = value;
      }
    }

    /// <summary>Field number for the "steering_ratio" field.</summary>
    public const int SteeringRatioFieldNumber = 27;
    private double steeringRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SteeringRatio {
      get { return steeringRatio_; }
      set {
        steeringRatio_ = value;
      }
    }

    /// <summary>Field number for the "disengage_type" field.</summary>
    public const int DisengageTypeFieldNumber = 28;
    private global::Apollo.Dreamview.Object.Types.DisengageType disengageType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Object.Types.DisengageType DisengageType {
      get { return disengageType_; }
      set {
        disengageType_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 29;
    private global::Apollo.Dreamview.Object.Types.Type type_ = 0;
    /// <summary>
    /// obstacle type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Object.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "prediction" field.</summary>
    public const int PredictionFieldNumber = 30;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Prediction> _repeated_prediction_codec
        = pb::FieldCodec.ForMessage(242, global::Apollo.Dreamview.Prediction.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Prediction> prediction_ = new pbc::RepeatedField<global::Apollo.Dreamview.Prediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Prediction> Prediction {
      get { return prediction_; }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 31;
    private double confidence_;
    /// <summary>
    /// perception confidence level. Range: 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_priority" field.</summary>
    public const int ObstaclePriorityFieldNumber = 33;
    private global::Apollo.Prediction.ObstaclePriority obstaclePriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.ObstaclePriority ObstaclePriority {
      get { return obstaclePriority_; }
      set {
        obstaclePriority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Object);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Object other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!polygonPoint_.Equals(other.polygonPoint_)) return false;
      if (Heading != other.Heading) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (PositionX != other.PositionX) return false;
      if (PositionY != other.PositionY) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Speed != other.Speed) return false;
      if (SpeedAcceleration != other.SpeedAcceleration) return false;
      if (SpeedJerk != other.SpeedJerk) return false;
      if (Spin != other.Spin) return false;
      if (SpinAcceleration != other.SpinAcceleration) return false;
      if (SpinJerk != other.SpinJerk) return false;
      if (SpeedHeading != other.SpeedHeading) return false;
      if (Kappa != other.Kappa) return false;
      if(!signalSet_.Equals(other.signalSet_)) return false;
      if (CurrentSignal != other.CurrentSignal) return false;
      if (TimestampSec != other.TimestampSec) return false;
      if(!decision_.Equals(other.decision_)) return false;
      if (YieldedObstacle != other.YieldedObstacle) return false;
      if (ThrottlePercentage != other.ThrottlePercentage) return false;
      if (BrakePercentage != other.BrakePercentage) return false;
      if (SteeringPercentage != other.SteeringPercentage) return false;
      if (SteeringAngle != other.SteeringAngle) return false;
      if (SteeringRatio != other.SteeringRatio) return false;
      if (DisengageType != other.DisengageType) return false;
      if (Type != other.Type) return false;
      if(!prediction_.Equals(other.prediction_)) return false;
      if (Confidence != other.Confidence) return false;
      if (!object.Equals(ObstaclePriority, other.ObstaclePriority)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= polygonPoint_.GetHashCode();
      if (Heading != 0D) hash ^= Heading.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (PositionX != 0D) hash ^= PositionX.GetHashCode();
      if (PositionY != 0D) hash ^= PositionY.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      if (Width != 0D) hash ^= Width.GetHashCode();
      if (Height != 0D) hash ^= Height.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (SpeedAcceleration != 0D) hash ^= SpeedAcceleration.GetHashCode();
      if (SpeedJerk != 0D) hash ^= SpeedJerk.GetHashCode();
      if (Spin != 0D) hash ^= Spin.GetHashCode();
      if (SpinAcceleration != 0D) hash ^= SpinAcceleration.GetHashCode();
      if (SpinJerk != 0D) hash ^= SpinJerk.GetHashCode();
      if (SpeedHeading != 0D) hash ^= SpeedHeading.GetHashCode();
      if (Kappa != 0D) hash ^= Kappa.GetHashCode();
      hash ^= signalSet_.GetHashCode();
      if (CurrentSignal.Length != 0) hash ^= CurrentSignal.GetHashCode();
      if (TimestampSec != 0D) hash ^= TimestampSec.GetHashCode();
      hash ^= decision_.GetHashCode();
      if (YieldedObstacle != false) hash ^= YieldedObstacle.GetHashCode();
      if (ThrottlePercentage != 0D) hash ^= ThrottlePercentage.GetHashCode();
      if (BrakePercentage != 0D) hash ^= BrakePercentage.GetHashCode();
      if (SteeringPercentage != 0D) hash ^= SteeringPercentage.GetHashCode();
      if (SteeringAngle != 0D) hash ^= SteeringAngle.GetHashCode();
      if (SteeringRatio != 0D) hash ^= SteeringRatio.GetHashCode();
      if (DisengageType != 0) hash ^= DisengageType.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= prediction_.GetHashCode();
      if (Confidence != 0D) hash ^= Confidence.GetHashCode();
      if (obstaclePriority_ != null) hash ^= ObstaclePriority.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      polygonPoint_.WriteTo(output, _repeated_polygonPoint_codec);
      if (Heading != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Heading);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Longitude);
      }
      if (PositionX != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PositionX);
      }
      if (PositionY != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PositionY);
      }
      if (Length != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Height);
      }
      if (Speed != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Speed);
      }
      if (SpeedAcceleration != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(SpeedAcceleration);
      }
      if (SpeedJerk != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(SpeedJerk);
      }
      if (Spin != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Spin);
      }
      if (SpinAcceleration != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(SpinAcceleration);
      }
      if (SpinJerk != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(SpinJerk);
      }
      if (SpeedHeading != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(SpeedHeading);
      }
      if (Kappa != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Kappa);
      }
      signalSet_.WriteTo(output, _repeated_signalSet_codec);
      if (CurrentSignal.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CurrentSignal);
      }
      if (TimestampSec != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(TimestampSec);
      }
      decision_.WriteTo(output, _repeated_decision_codec);
      if (ThrottlePercentage != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(ThrottlePercentage);
      }
      if (BrakePercentage != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(BrakePercentage);
      }
      if (SteeringPercentage != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(SteeringPercentage);
      }
      if (SteeringAngle != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(SteeringAngle);
      }
      if (SteeringRatio != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(SteeringRatio);
      }
      if (DisengageType != 0) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) DisengageType);
      }
      if (Type != 0) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) Type);
      }
      prediction_.WriteTo(output, _repeated_prediction_codec);
      if (Confidence != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(Confidence);
      }
      if (YieldedObstacle != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(YieldedObstacle);
      }
      if (obstaclePriority_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(ObstaclePriority);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += polygonPoint_.CalculateSize(_repeated_polygonPoint_codec);
      if (Heading != 0D) {
        size += 1 + 8;
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (PositionX != 0D) {
        size += 1 + 8;
      }
      if (PositionY != 0D) {
        size += 1 + 8;
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (SpeedAcceleration != 0D) {
        size += 1 + 8;
      }
      if (SpeedJerk != 0D) {
        size += 1 + 8;
      }
      if (Spin != 0D) {
        size += 1 + 8;
      }
      if (SpinAcceleration != 0D) {
        size += 1 + 8;
      }
      if (SpinJerk != 0D) {
        size += 2 + 8;
      }
      if (SpeedHeading != 0D) {
        size += 2 + 8;
      }
      if (Kappa != 0D) {
        size += 2 + 8;
      }
      size += signalSet_.CalculateSize(_repeated_signalSet_codec);
      if (CurrentSignal.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrentSignal);
      }
      if (TimestampSec != 0D) {
        size += 2 + 8;
      }
      size += decision_.CalculateSize(_repeated_decision_codec);
      if (YieldedObstacle != false) {
        size += 2 + 1;
      }
      if (ThrottlePercentage != 0D) {
        size += 2 + 8;
      }
      if (BrakePercentage != 0D) {
        size += 2 + 8;
      }
      if (SteeringPercentage != 0D) {
        size += 2 + 8;
      }
      if (SteeringAngle != 0D) {
        size += 2 + 8;
      }
      if (SteeringRatio != 0D) {
        size += 2 + 8;
      }
      if (DisengageType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DisengageType);
      }
      if (Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += prediction_.CalculateSize(_repeated_prediction_codec);
      if (Confidence != 0D) {
        size += 2 + 8;
      }
      if (obstaclePriority_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObstaclePriority);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Object other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      polygonPoint_.Add(other.polygonPoint_);
      if (other.Heading != 0D) {
        Heading = other.Heading;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.PositionX != 0D) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0D) {
        PositionY = other.PositionY;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.SpeedAcceleration != 0D) {
        SpeedAcceleration = other.SpeedAcceleration;
      }
      if (other.SpeedJerk != 0D) {
        SpeedJerk = other.SpeedJerk;
      }
      if (other.Spin != 0D) {
        Spin = other.Spin;
      }
      if (other.SpinAcceleration != 0D) {
        SpinAcceleration = other.SpinAcceleration;
      }
      if (other.SpinJerk != 0D) {
        SpinJerk = other.SpinJerk;
      }
      if (other.SpeedHeading != 0D) {
        SpeedHeading = other.SpeedHeading;
      }
      if (other.Kappa != 0D) {
        Kappa = other.Kappa;
      }
      signalSet_.Add(other.signalSet_);
      if (other.CurrentSignal.Length != 0) {
        CurrentSignal = other.CurrentSignal;
      }
      if (other.TimestampSec != 0D) {
        TimestampSec = other.TimestampSec;
      }
      decision_.Add(other.decision_);
      if (other.YieldedObstacle != false) {
        YieldedObstacle = other.YieldedObstacle;
      }
      if (other.ThrottlePercentage != 0D) {
        ThrottlePercentage = other.ThrottlePercentage;
      }
      if (other.BrakePercentage != 0D) {
        BrakePercentage = other.BrakePercentage;
      }
      if (other.SteeringPercentage != 0D) {
        SteeringPercentage = other.SteeringPercentage;
      }
      if (other.SteeringAngle != 0D) {
        SteeringAngle = other.SteeringAngle;
      }
      if (other.SteeringRatio != 0D) {
        SteeringRatio = other.SteeringRatio;
      }
      if (other.DisengageType != 0) {
        DisengageType = other.DisengageType;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      prediction_.Add(other.prediction_);
      if (other.Confidence != 0D) {
        Confidence = other.Confidence;
      }
      if (other.obstaclePriority_ != null) {
        if (obstaclePriority_ == null) {
          obstaclePriority_ = new global::Apollo.Prediction.ObstaclePriority();
        }
        ObstaclePriority.MergeFrom(other.ObstaclePriority);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            polygonPoint_.AddEntriesFrom(input, _repeated_polygonPoint_codec);
            break;
          }
          case 25: {
            Heading = input.ReadDouble();
            break;
          }
          case 33: {
            Latitude = input.ReadDouble();
            break;
          }
          case 41: {
            Longitude = input.ReadDouble();
            break;
          }
          case 49: {
            PositionX = input.ReadDouble();
            break;
          }
          case 57: {
            PositionY = input.ReadDouble();
            break;
          }
          case 65: {
            Length = input.ReadDouble();
            break;
          }
          case 73: {
            Width = input.ReadDouble();
            break;
          }
          case 81: {
            Height = input.ReadDouble();
            break;
          }
          case 89: {
            Speed = input.ReadDouble();
            break;
          }
          case 97: {
            SpeedAcceleration = input.ReadDouble();
            break;
          }
          case 105: {
            SpeedJerk = input.ReadDouble();
            break;
          }
          case 113: {
            Spin = input.ReadDouble();
            break;
          }
          case 121: {
            SpinAcceleration = input.ReadDouble();
            break;
          }
          case 129: {
            SpinJerk = input.ReadDouble();
            break;
          }
          case 137: {
            SpeedHeading = input.ReadDouble();
            break;
          }
          case 145: {
            Kappa = input.ReadDouble();
            break;
          }
          case 154: {
            signalSet_.AddEntriesFrom(input, _repeated_signalSet_codec);
            break;
          }
          case 162: {
            CurrentSignal = input.ReadString();
            break;
          }
          case 169: {
            TimestampSec = input.ReadDouble();
            break;
          }
          case 178: {
            decision_.AddEntriesFrom(input, _repeated_decision_codec);
            break;
          }
          case 185: {
            ThrottlePercentage = input.ReadDouble();
            break;
          }
          case 193: {
            BrakePercentage = input.ReadDouble();
            break;
          }
          case 201: {
            SteeringPercentage = input.ReadDouble();
            break;
          }
          case 209: {
            SteeringAngle = input.ReadDouble();
            break;
          }
          case 217: {
            SteeringRatio = input.ReadDouble();
            break;
          }
          case 224: {
            disengageType_ = (global::Apollo.Dreamview.Object.Types.DisengageType) input.ReadEnum();
            break;
          }
          case 232: {
            type_ = (global::Apollo.Dreamview.Object.Types.Type) input.ReadEnum();
            break;
          }
          case 242: {
            prediction_.AddEntriesFrom(input, _repeated_prediction_codec);
            break;
          }
          case 249: {
            Confidence = input.ReadDouble();
            break;
          }
          case 256: {
            YieldedObstacle = input.ReadBool();
            break;
          }
          case 266: {
            if (obstaclePriority_ == null) {
              obstaclePriority_ = new global::Apollo.Prediction.ObstaclePriority();
            }
            input.ReadMessage(obstaclePriority_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Object message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DisengageType {
        [pbr::OriginalName("DISENGAGE_NONE")] DisengageNone = 0,
        [pbr::OriginalName("DISENGAGE_UNKNOWN")] DisengageUnknown = 1,
        [pbr::OriginalName("DISENGAGE_MANUAL")] DisengageManual = 2,
        [pbr::OriginalName("DISENGAGE_EMERGENCY")] DisengageEmergency = 3,
        [pbr::OriginalName("DISENGAGE_AUTO_STEER_ONLY")] DisengageAutoSteerOnly = 4,
        [pbr::OriginalName("DISENGAGE_AUTO_SPEED_ONLY")] DisengageAutoSpeedOnly = 5,
        [pbr::OriginalName("DISENGAGE_CHASSIS_ERROR")] DisengageChassisError = 6,
      }

      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("UNKNOWN_MOVABLE")] UnknownMovable = 1,
        [pbr::OriginalName("UNKNOWN_UNMOVABLE")] UnknownUnmovable = 2,
        /// <summary>
        /// pedestrian, usually determined by moving behavior.
        /// </summary>
        [pbr::OriginalName("PEDESTRIAN")] Pedestrian = 3,
        /// <summary>
        /// bike, motor bike.
        /// </summary>
        [pbr::OriginalName("BICYCLE")] Bicycle = 4,
        /// <summary>
        /// passenger car or truck.
        /// </summary>
        [pbr::OriginalName("VEHICLE")] Vehicle = 5,
        /// <summary>
        /// virtual object created by decision module.
        /// </summary>
        [pbr::OriginalName("VIRTUAL")] Virtual = 6,
        /// <summary>
        /// closest in-path vehicle determined by perception module.
        /// </summary>
        [pbr::OriginalName("CIPV")] Cipv = 7,
      }

    }
    #endregion

  }

  public sealed partial class DelaysInMs : pb::IMessage<DelaysInMs> {
    private static readonly pb::MessageParser<DelaysInMs> _parser = new pb::MessageParser<DelaysInMs>(() => new DelaysInMs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelaysInMs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelaysInMs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelaysInMs(DelaysInMs other) : this() {
      chassis_ = other.chassis_;
      localization_ = other.localization_;
      perceptionObstacle_ = other.perceptionObstacle_;
      planning_ = other.planning_;
      prediction_ = other.prediction_;
      trafficLight_ = other.trafficLight_;
      control_ = other.control_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelaysInMs Clone() {
      return new DelaysInMs(this);
    }

    /// <summary>Field number for the "chassis" field.</summary>
    public const int ChassisFieldNumber = 1;
    private double chassis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Chassis {
      get { return chassis_; }
      set {
        chassis_ = value;
      }
    }

    /// <summary>Field number for the "localization" field.</summary>
    public const int LocalizationFieldNumber = 3;
    private double localization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Localization {
      get { return localization_; }
      set {
        localization_ = value;
      }
    }

    /// <summary>Field number for the "perception_obstacle" field.</summary>
    public const int PerceptionObstacleFieldNumber = 4;
    private double perceptionObstacle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PerceptionObstacle {
      get { return perceptionObstacle_; }
      set {
        perceptionObstacle_ = value;
      }
    }

    /// <summary>Field number for the "planning" field.</summary>
    public const int PlanningFieldNumber = 5;
    private double planning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Planning {
      get { return planning_; }
      set {
        planning_ = value;
      }
    }

    /// <summary>Field number for the "prediction" field.</summary>
    public const int PredictionFieldNumber = 7;
    private double prediction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Prediction {
      get { return prediction_; }
      set {
        prediction_ = value;
      }
    }

    /// <summary>Field number for the "traffic_light" field.</summary>
    public const int TrafficLightFieldNumber = 8;
    private double trafficLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrafficLight {
      get { return trafficLight_; }
      set {
        trafficLight_ = value;
      }
    }

    /// <summary>Field number for the "control" field.</summary>
    public const int ControlFieldNumber = 9;
    private double control_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Control {
      get { return control_; }
      set {
        control_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelaysInMs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelaysInMs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chassis != other.Chassis) return false;
      if (Localization != other.Localization) return false;
      if (PerceptionObstacle != other.PerceptionObstacle) return false;
      if (Planning != other.Planning) return false;
      if (Prediction != other.Prediction) return false;
      if (TrafficLight != other.TrafficLight) return false;
      if (Control != other.Control) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chassis != 0D) hash ^= Chassis.GetHashCode();
      if (Localization != 0D) hash ^= Localization.GetHashCode();
      if (PerceptionObstacle != 0D) hash ^= PerceptionObstacle.GetHashCode();
      if (Planning != 0D) hash ^= Planning.GetHashCode();
      if (Prediction != 0D) hash ^= Prediction.GetHashCode();
      if (TrafficLight != 0D) hash ^= TrafficLight.GetHashCode();
      if (Control != 0D) hash ^= Control.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chassis != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Chassis);
      }
      if (Localization != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Localization);
      }
      if (PerceptionObstacle != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PerceptionObstacle);
      }
      if (Planning != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Planning);
      }
      if (Prediction != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Prediction);
      }
      if (TrafficLight != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TrafficLight);
      }
      if (Control != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Control);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chassis != 0D) {
        size += 1 + 8;
      }
      if (Localization != 0D) {
        size += 1 + 8;
      }
      if (PerceptionObstacle != 0D) {
        size += 1 + 8;
      }
      if (Planning != 0D) {
        size += 1 + 8;
      }
      if (Prediction != 0D) {
        size += 1 + 8;
      }
      if (TrafficLight != 0D) {
        size += 1 + 8;
      }
      if (Control != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelaysInMs other) {
      if (other == null) {
        return;
      }
      if (other.Chassis != 0D) {
        Chassis = other.Chassis;
      }
      if (other.Localization != 0D) {
        Localization = other.Localization;
      }
      if (other.PerceptionObstacle != 0D) {
        PerceptionObstacle = other.PerceptionObstacle;
      }
      if (other.Planning != 0D) {
        Planning = other.Planning;
      }
      if (other.Prediction != 0D) {
        Prediction = other.Prediction;
      }
      if (other.TrafficLight != 0D) {
        TrafficLight = other.TrafficLight;
      }
      if (other.Control != 0D) {
        Control = other.Control;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Chassis = input.ReadDouble();
            break;
          }
          case 25: {
            Localization = input.ReadDouble();
            break;
          }
          case 33: {
            PerceptionObstacle = input.ReadDouble();
            break;
          }
          case 41: {
            Planning = input.ReadDouble();
            break;
          }
          case 57: {
            Prediction = input.ReadDouble();
            break;
          }
          case 65: {
            TrafficLight = input.ReadDouble();
            break;
          }
          case 73: {
            Control = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoutePath : pb::IMessage<RoutePath> {
    private static readonly pb::MessageParser<RoutePath> _parser = new pb::MessageParser<RoutePath>(() => new RoutePath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutePath(RoutePath other) : this() {
      point_ = other.point_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutePath Clone() {
      return new RoutePath(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.PolygonPoint> _repeated_point_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Dreamview.PolygonPoint.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> point_ = new pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.PolygonPoint> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutePath other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Latency : pb::IMessage<Latency> {
    private static readonly pb::MessageParser<Latency> _parser = new pb::MessageParser<Latency>(() => new Latency());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Latency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency(Latency other) : this() {
      timestampSec_ = other.timestampSec_;
      totalTimeMs_ = other.totalTimeMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency Clone() {
      return new Latency(this);
    }

    /// <summary>Field number for the "timestamp_sec" field.</summary>
    public const int TimestampSecFieldNumber = 1;
    private double timestampSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimestampSec {
      get { return timestampSec_; }
      set {
        timestampSec_ = value;
      }
    }

    /// <summary>Field number for the "total_time_ms" field.</summary>
    public const int TotalTimeMsFieldNumber = 2;
    private double totalTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalTimeMs {
      get { return totalTimeMs_; }
      set {
        totalTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Latency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Latency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimestampSec != other.TimestampSec) return false;
      if (TotalTimeMs != other.TotalTimeMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimestampSec != 0D) hash ^= TimestampSec.GetHashCode();
      if (TotalTimeMs != 0D) hash ^= TotalTimeMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimestampSec != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TimestampSec);
      }
      if (TotalTimeMs != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalTimeMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimestampSec != 0D) {
        size += 1 + 8;
      }
      if (TotalTimeMs != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Latency other) {
      if (other == null) {
        return;
      }
      if (other.TimestampSec != 0D) {
        TimestampSec = other.TimestampSec;
      }
      if (other.TotalTimeMs != 0D) {
        TotalTimeMs = other.TotalTimeMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TimestampSec = input.ReadDouble();
            break;
          }
          case 17: {
            TotalTimeMs = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapElementIds : pb::IMessage<MapElementIds> {
    private static readonly pb::MessageParser<MapElementIds> _parser = new pb::MessageParser<MapElementIds>(() => new MapElementIds());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapElementIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElementIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElementIds(MapElementIds other) : this() {
      lane_ = other.lane_.Clone();
      crosswalk_ = other.crosswalk_.Clone();
      junction_ = other.junction_.Clone();
      signal_ = other.signal_.Clone();
      stopSign_ = other.stopSign_.Clone();
      yield_ = other.yield_.Clone();
      overlap_ = other.overlap_.Clone();
      road_ = other.road_.Clone();
      clearArea_ = other.clearArea_.Clone();
      parkingSpace_ = other.parkingSpace_.Clone();
      speedBump_ = other.speedBump_.Clone();
      pncJunction_ = other.pncJunction_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElementIds Clone() {
      return new MapElementIds(this);
    }

    /// <summary>Field number for the "lane" field.</summary>
    public const int LaneFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_lane_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> lane_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Lane {
      get { return lane_; }
    }

    /// <summary>Field number for the "crosswalk" field.</summary>
    public const int CrosswalkFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_crosswalk_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> crosswalk_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Crosswalk {
      get { return crosswalk_; }
    }

    /// <summary>Field number for the "junction" field.</summary>
    public const int JunctionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_junction_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> junction_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Junction {
      get { return junction_; }
    }

    /// <summary>Field number for the "signal" field.</summary>
    public const int SignalFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_signal_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> signal_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Signal {
      get { return signal_; }
    }

    /// <summary>Field number for the "stop_sign" field.</summary>
    public const int StopSignFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_stopSign_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> stopSign_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StopSign {
      get { return stopSign_; }
    }

    /// <summary>Field number for the "yield" field.</summary>
    public const int YieldFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_yield_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> yield_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Yield {
      get { return yield_; }
    }

    /// <summary>Field number for the "overlap" field.</summary>
    public const int OverlapFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_overlap_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> overlap_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Overlap {
      get { return overlap_; }
    }

    /// <summary>Field number for the "road" field.</summary>
    public const int RoadFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_road_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> road_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Road {
      get { return road_; }
    }

    /// <summary>Field number for the "clear_area" field.</summary>
    public const int ClearAreaFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_clearArea_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> clearArea_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ClearArea {
      get { return clearArea_; }
    }

    /// <summary>Field number for the "parking_space" field.</summary>
    public const int ParkingSpaceFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_parkingSpace_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> parkingSpace_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ParkingSpace {
      get { return parkingSpace_; }
    }

    /// <summary>Field number for the "speed_bump" field.</summary>
    public const int SpeedBumpFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_speedBump_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> speedBump_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SpeedBump {
      get { return speedBump_; }
    }

    /// <summary>Field number for the "pnc_junction" field.</summary>
    public const int PncJunctionFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_pncJunction_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> pncJunction_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PncJunction {
      get { return pncJunction_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapElementIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapElementIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lane_.Equals(other.lane_)) return false;
      if(!crosswalk_.Equals(other.crosswalk_)) return false;
      if(!junction_.Equals(other.junction_)) return false;
      if(!signal_.Equals(other.signal_)) return false;
      if(!stopSign_.Equals(other.stopSign_)) return false;
      if(!yield_.Equals(other.yield_)) return false;
      if(!overlap_.Equals(other.overlap_)) return false;
      if(!road_.Equals(other.road_)) return false;
      if(!clearArea_.Equals(other.clearArea_)) return false;
      if(!parkingSpace_.Equals(other.parkingSpace_)) return false;
      if(!speedBump_.Equals(other.speedBump_)) return false;
      if(!pncJunction_.Equals(other.pncJunction_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lane_.GetHashCode();
      hash ^= crosswalk_.GetHashCode();
      hash ^= junction_.GetHashCode();
      hash ^= signal_.GetHashCode();
      hash ^= stopSign_.GetHashCode();
      hash ^= yield_.GetHashCode();
      hash ^= overlap_.GetHashCode();
      hash ^= road_.GetHashCode();
      hash ^= clearArea_.GetHashCode();
      hash ^= parkingSpace_.GetHashCode();
      hash ^= speedBump_.GetHashCode();
      hash ^= pncJunction_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lane_.WriteTo(output, _repeated_lane_codec);
      crosswalk_.WriteTo(output, _repeated_crosswalk_codec);
      junction_.WriteTo(output, _repeated_junction_codec);
      signal_.WriteTo(output, _repeated_signal_codec);
      stopSign_.WriteTo(output, _repeated_stopSign_codec);
      yield_.WriteTo(output, _repeated_yield_codec);
      overlap_.WriteTo(output, _repeated_overlap_codec);
      road_.WriteTo(output, _repeated_road_codec);
      clearArea_.WriteTo(output, _repeated_clearArea_codec);
      parkingSpace_.WriteTo(output, _repeated_parkingSpace_codec);
      speedBump_.WriteTo(output, _repeated_speedBump_codec);
      pncJunction_.WriteTo(output, _repeated_pncJunction_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lane_.CalculateSize(_repeated_lane_codec);
      size += crosswalk_.CalculateSize(_repeated_crosswalk_codec);
      size += junction_.CalculateSize(_repeated_junction_codec);
      size += signal_.CalculateSize(_repeated_signal_codec);
      size += stopSign_.CalculateSize(_repeated_stopSign_codec);
      size += yield_.CalculateSize(_repeated_yield_codec);
      size += overlap_.CalculateSize(_repeated_overlap_codec);
      size += road_.CalculateSize(_repeated_road_codec);
      size += clearArea_.CalculateSize(_repeated_clearArea_codec);
      size += parkingSpace_.CalculateSize(_repeated_parkingSpace_codec);
      size += speedBump_.CalculateSize(_repeated_speedBump_codec);
      size += pncJunction_.CalculateSize(_repeated_pncJunction_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapElementIds other) {
      if (other == null) {
        return;
      }
      lane_.Add(other.lane_);
      crosswalk_.Add(other.crosswalk_);
      junction_.Add(other.junction_);
      signal_.Add(other.signal_);
      stopSign_.Add(other.stopSign_);
      yield_.Add(other.yield_);
      overlap_.Add(other.overlap_);
      road_.Add(other.road_);
      clearArea_.Add(other.clearArea_);
      parkingSpace_.Add(other.parkingSpace_);
      speedBump_.Add(other.speedBump_);
      pncJunction_.Add(other.pncJunction_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lane_.AddEntriesFrom(input, _repeated_lane_codec);
            break;
          }
          case 18: {
            crosswalk_.AddEntriesFrom(input, _repeated_crosswalk_codec);
            break;
          }
          case 26: {
            junction_.AddEntriesFrom(input, _repeated_junction_codec);
            break;
          }
          case 34: {
            signal_.AddEntriesFrom(input, _repeated_signal_codec);
            break;
          }
          case 42: {
            stopSign_.AddEntriesFrom(input, _repeated_stopSign_codec);
            break;
          }
          case 50: {
            yield_.AddEntriesFrom(input, _repeated_yield_codec);
            break;
          }
          case 58: {
            overlap_.AddEntriesFrom(input, _repeated_overlap_codec);
            break;
          }
          case 66: {
            road_.AddEntriesFrom(input, _repeated_road_codec);
            break;
          }
          case 74: {
            clearArea_.AddEntriesFrom(input, _repeated_clearArea_codec);
            break;
          }
          case 82: {
            parkingSpace_.AddEntriesFrom(input, _repeated_parkingSpace_codec);
            break;
          }
          case 90: {
            speedBump_.AddEntriesFrom(input, _repeated_speedBump_codec);
            break;
          }
          case 98: {
            pncJunction_.AddEntriesFrom(input, _repeated_pncJunction_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ControlData : pb::IMessage<ControlData> {
    private static readonly pb::MessageParser<ControlData> _parser = new pb::MessageParser<ControlData>(() => new ControlData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlData(ControlData other) : this() {
      timestampSec_ = other.timestampSec_;
      stationError_ = other.stationError_;
      lateralError_ = other.lateralError_;
      headingError_ = other.headingError_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlData Clone() {
      return new ControlData(this);
    }

    /// <summary>Field number for the "timestamp_sec" field.</summary>
    public const int TimestampSecFieldNumber = 1;
    private double timestampSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimestampSec {
      get { return timestampSec_; }
      set {
        timestampSec_ = value;
      }
    }

    /// <summary>Field number for the "station_error" field.</summary>
    public const int StationErrorFieldNumber = 2;
    private double stationError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StationError {
      get { return stationError_; }
      set {
        stationError_ = value;
      }
    }

    /// <summary>Field number for the "lateral_error" field.</summary>
    public const int LateralErrorFieldNumber = 3;
    private double lateralError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LateralError {
      get { return lateralError_; }
      set {
        lateralError_ = value;
      }
    }

    /// <summary>Field number for the "heading_error" field.</summary>
    public const int HeadingErrorFieldNumber = 4;
    private double headingError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeadingError {
      get { return headingError_; }
      set {
        headingError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimestampSec != other.TimestampSec) return false;
      if (StationError != other.StationError) return false;
      if (LateralError != other.LateralError) return false;
      if (HeadingError != other.HeadingError) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimestampSec != 0D) hash ^= TimestampSec.GetHashCode();
      if (StationError != 0D) hash ^= StationError.GetHashCode();
      if (LateralError != 0D) hash ^= LateralError.GetHashCode();
      if (HeadingError != 0D) hash ^= HeadingError.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimestampSec != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TimestampSec);
      }
      if (StationError != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StationError);
      }
      if (LateralError != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LateralError);
      }
      if (HeadingError != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(HeadingError);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimestampSec != 0D) {
        size += 1 + 8;
      }
      if (StationError != 0D) {
        size += 1 + 8;
      }
      if (LateralError != 0D) {
        size += 1 + 8;
      }
      if (HeadingError != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlData other) {
      if (other == null) {
        return;
      }
      if (other.TimestampSec != 0D) {
        TimestampSec = other.TimestampSec;
      }
      if (other.StationError != 0D) {
        StationError = other.StationError;
      }
      if (other.LateralError != 0D) {
        LateralError = other.LateralError;
      }
      if (other.HeadingError != 0D) {
        HeadingError = other.HeadingError;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TimestampSec = input.ReadDouble();
            break;
          }
          case 17: {
            StationError = input.ReadDouble();
            break;
          }
          case 25: {
            LateralError = input.ReadDouble();
            break;
          }
          case 33: {
            HeadingError = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notification : pb::IMessage<Notification> {
    private static readonly pb::MessageParser<Notification> _parser = new pb::MessageParser<Notification>(() => new Notification());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification(Notification other) : this() {
      timestampSec_ = other.timestampSec_;
      Item = other.item_ != null ? other.Item.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification Clone() {
      return new Notification(this);
    }

    /// <summary>Field number for the "timestamp_sec" field.</summary>
    public const int TimestampSecFieldNumber = 1;
    private double timestampSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimestampSec {
      get { return timestampSec_; }
      set {
        timestampSec_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Apollo.Common.Monitor.MonitorMessageItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Monitor.MonitorMessageItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimestampSec != other.TimestampSec) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimestampSec != 0D) hash ^= TimestampSec.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimestampSec != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TimestampSec);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimestampSec != 0D) {
        size += 1 + 8;
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notification other) {
      if (other == null) {
        return;
      }
      if (other.TimestampSec != 0D) {
        TimestampSec = other.TimestampSec;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Apollo.Common.Monitor.MonitorMessageItem();
        }
        Item.MergeFrom(other.Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TimestampSec = input.ReadDouble();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Apollo.Common.Monitor.MonitorMessageItem();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Next-id: 25
  /// </summary>
  public sealed partial class SimulationWorld : pb::IMessage<SimulationWorld> {
    private static readonly pb::MessageParser<SimulationWorld> _parser = new pb::MessageParser<SimulationWorld>(() => new SimulationWorld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.SimulationWorldReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationWorld(SimulationWorld other) : this() {
      timestamp_ = other.timestamp_;
      sequenceNum_ = other.sequenceNum_;
      object_ = other.object_.Clone();
      AutoDrivingCar = other.autoDrivingCar_ != null ? other.AutoDrivingCar.Clone() : null;
      TrafficSignal = other.trafficSignal_ != null ? other.TrafficSignal.Clone() : null;
      routePath_ = other.routePath_.Clone();
      routingTime_ = other.routingTime_;
      planningTrajectory_ = other.planningTrajectory_.Clone();
      MainStop = other.mainStop_ != null ? other.MainStop.Clone() : null;
      MainDecision = other.mainDecision_ != null ? other.MainDecision.Clone() : null;
      speedLimit_ = other.speedLimit_;
      Delay = other.delay_ != null ? other.Delay.Clone() : null;
      Monitor = other.monitor_ != null ? other.Monitor.Clone() : null;
      notification_ = other.notification_.Clone();
      engageAdvice_ = other.engageAdvice_;
      latency_ = other.latency_.Clone();
      MapElementIds = other.mapElementIds_ != null ? other.MapElementIds.Clone() : null;
      mapHash_ = other.mapHash_;
      mapRadius_ = other.mapRadius_;
      PlanningData = other.planningData_ != null ? other.PlanningData.Clone() : null;
      Gps = other.gps_ != null ? other.Gps.Clone() : null;
      LaneMarker = other.laneMarker_ != null ? other.LaneMarker.Clone() : null;
      ControlData = other.controlData_ != null ? other.ControlData.Clone() : null;
      navigationPath_ = other.navigationPath_.Clone();
      isRssSafe_ = other.isRssSafe_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationWorld Clone() {
      return new SimulationWorld(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private double timestamp_;
    /// <summary>
    /// Timestamp in milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "sequence_num" field.</summary>
    public const int SequenceNumFieldNumber = 2;
    private uint sequenceNum_;
    /// <summary>
    /// Sequence number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceNum {
      get { return sequenceNum_; }
      set {
        sequenceNum_ = value;
      }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Object> _repeated_object_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Dreamview.Object.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Object> object_ = new pbc::RepeatedField<global::Apollo.Dreamview.Object>();
    /// <summary>
    /// Objects in the world and the associated predictions/decisions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Object> Object {
      get { return object_; }
    }

    /// <summary>Field number for the "auto_driving_car" field.</summary>
    public const int AutoDrivingCarFieldNumber = 4;
    private global::Apollo.Dreamview.Object autoDrivingCar_;
    /// <summary>
    /// Autonomous driving cars
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Object AutoDrivingCar {
      get { return autoDrivingCar_; }
      set {
        autoDrivingCar_ = value;
      }
    }

    /// <summary>Field number for the "traffic_signal" field.</summary>
    public const int TrafficSignalFieldNumber = 5;
    private global::Apollo.Dreamview.Object trafficSignal_;
    /// <summary>
    /// Traffic light status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Object TrafficSignal {
      get { return trafficSignal_; }
      set {
        trafficSignal_ = value;
      }
    }

    /// <summary>Field number for the "route_path" field.</summary>
    public const int RoutePathFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.RoutePath> _repeated_routePath_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Dreamview.RoutePath.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.RoutePath> routePath_ = new pbc::RepeatedField<global::Apollo.Dreamview.RoutePath>();
    /// <summary>
    /// Routing paths
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.RoutePath> RoutePath {
      get { return routePath_; }
    }

    /// <summary>Field number for the "routing_time" field.</summary>
    public const int RoutingTimeFieldNumber = 7;
    private double routingTime_;
    /// <summary>
    /// Timestamp of latest routing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RoutingTime {
      get { return routingTime_; }
      set {
        routingTime_ = value;
      }
    }

    /// <summary>Field number for the "planning_trajectory" field.</summary>
    public const int PlanningTrajectoryFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Object> _repeated_planningTrajectory_codec
        = pb::FieldCodec.ForMessage(66, global::Apollo.Dreamview.Object.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Object> planningTrajectory_ = new pbc::RepeatedField<global::Apollo.Dreamview.Object>();
    /// <summary>
    /// Planned trajectory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Object> PlanningTrajectory {
      get { return planningTrajectory_; }
    }

    /// <summary>Field number for the "main_stop" field.</summary>
    public const int MainStopFieldNumber = 9;
    private global::Apollo.Dreamview.Object mainStop_;
    /// <summary>
    /// Main decision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Object MainStop {
      get { return mainStop_; }
      set {
        mainStop_ = value;
      }
    }

    /// <summary>Field number for the "main_decision" field.</summary>
    public const int MainDecisionFieldNumber = 10;
    private global::Apollo.Dreamview.Object mainDecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Object MainDecision {
      get { return mainDecision_; }
      set {
        mainDecision_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 11;
    private double speedLimit_;
    /// <summary>
    /// Speed limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 12;
    private global::Apollo.Dreamview.DelaysInMs delay_;
    /// <summary>
    /// Module delays
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.DelaysInMs Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "monitor" field.</summary>
    public const int MonitorFieldNumber = 13;
    private global::Apollo.Common.Monitor.MonitorMessage monitor_;
    /// <summary>
    /// Notification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.Monitor.MonitorMessage Monitor {
      get { return monitor_; }
      set {
        monitor_ = value;
      }
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.Notification> _repeated_notification_codec
        = pb::FieldCodec.ForMessage(114, global::Apollo.Dreamview.Notification.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.Notification> notification_ = new pbc::RepeatedField<global::Apollo.Dreamview.Notification>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.Notification> Notification {
      get { return notification_; }
    }

    /// <summary>Field number for the "engage_advice" field.</summary>
    public const int EngageAdviceFieldNumber = 15;
    private string engageAdvice_ = "";
    /// <summary>
    /// Engage advice from planning
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EngageAdvice {
      get { return engageAdvice_; }
      set {
        engageAdvice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latency" field.</summary>
    public const int LatencyFieldNumber = 16;
    private static readonly pbc::MapField<string, global::Apollo.Dreamview.Latency>.Codec _map_latency_codec
        = new pbc::MapField<string, global::Apollo.Dreamview.Latency>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Apollo.Dreamview.Latency.Parser), 130);
    private readonly pbc::MapField<string, global::Apollo.Dreamview.Latency> latency_ = new pbc::MapField<string, global::Apollo.Dreamview.Latency>();
    /// <summary>
    /// Module latency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Apollo.Dreamview.Latency> Latency {
      get { return latency_; }
    }

    /// <summary>Field number for the "map_element_ids" field.</summary>
    public const int MapElementIdsFieldNumber = 17;
    private global::Apollo.Dreamview.MapElementIds mapElementIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.MapElementIds MapElementIds {
      get { return mapElementIds_; }
      set {
        mapElementIds_ = value;
      }
    }

    /// <summary>Field number for the "map_hash" field.</summary>
    public const int MapHashFieldNumber = 18;
    private ulong mapHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MapHash {
      get { return mapHash_; }
      set {
        mapHash_ = value;
      }
    }

    /// <summary>Field number for the "map_radius" field.</summary>
    public const int MapRadiusFieldNumber = 19;
    private double mapRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MapRadius {
      get { return mapRadius_; }
      set {
        mapRadius_ = value;
      }
    }

    /// <summary>Field number for the "planning_data" field.</summary>
    public const int PlanningDataFieldNumber = 20;
    private global::Apollo.PlanningInternal.PlanningData planningData_;
    /// <summary>
    /// Planning data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.PlanningInternal.PlanningData PlanningData {
      get { return planningData_; }
      set {
        planningData_ = value;
      }
    }

    /// <summary>Field number for the "gps" field.</summary>
    public const int GpsFieldNumber = 21;
    private global::Apollo.Dreamview.Object gps_;
    /// <summary>
    /// GPS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.Object Gps {
      get { return gps_; }
      set {
        gps_ = value;
      }
    }

    /// <summary>Field number for the "lane_marker" field.</summary>
    public const int LaneMarkerFieldNumber = 22;
    private global::Apollo.Perception.LaneMarkers laneMarker_;
    /// <summary>
    /// Lane Markers from perception
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Perception.LaneMarkers LaneMarker {
      get { return laneMarker_; }
      set {
        laneMarker_ = value;
      }
    }

    /// <summary>Field number for the "control_data" field.</summary>
    public const int ControlDataFieldNumber = 23;
    private global::Apollo.Dreamview.ControlData controlData_;
    /// <summary>
    /// Control data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Dreamview.ControlData ControlData {
      get { return controlData_; }
      set {
        controlData_ = value;
      }
    }

    /// <summary>Field number for the "navigation_path" field.</summary>
    public const int NavigationPathFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Apollo.Common.Path> _repeated_navigationPath_codec
        = pb::FieldCodec.ForMessage(194, global::Apollo.Common.Path.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Common.Path> navigationPath_ = new pbc::RepeatedField<global::Apollo.Common.Path>();
    /// <summary>
    /// Relative Map
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Common.Path> NavigationPath {
      get { return navigationPath_; }
    }

    /// <summary>Field number for the "is_rss_safe" field.</summary>
    public const int IsRssSafeFieldNumber = 25;
    private bool isRssSafe_;
    /// <summary>
    /// RSS info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRssSafe {
      get { return isRssSafe_; }
      set {
        isRssSafe_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (SequenceNum != other.SequenceNum) return false;
      if(!object_.Equals(other.object_)) return false;
      if (!object.Equals(AutoDrivingCar, other.AutoDrivingCar)) return false;
      if (!object.Equals(TrafficSignal, other.TrafficSignal)) return false;
      if(!routePath_.Equals(other.routePath_)) return false;
      if (RoutingTime != other.RoutingTime) return false;
      if(!planningTrajectory_.Equals(other.planningTrajectory_)) return false;
      if (!object.Equals(MainStop, other.MainStop)) return false;
      if (!object.Equals(MainDecision, other.MainDecision)) return false;
      if (SpeedLimit != other.SpeedLimit) return false;
      if (!object.Equals(Delay, other.Delay)) return false;
      if (!object.Equals(Monitor, other.Monitor)) return false;
      if(!notification_.Equals(other.notification_)) return false;
      if (EngageAdvice != other.EngageAdvice) return false;
      if (!Latency.Equals(other.Latency)) return false;
      if (!object.Equals(MapElementIds, other.MapElementIds)) return false;
      if (MapHash != other.MapHash) return false;
      if (MapRadius != other.MapRadius) return false;
      if (!object.Equals(PlanningData, other.PlanningData)) return false;
      if (!object.Equals(Gps, other.Gps)) return false;
      if (!object.Equals(LaneMarker, other.LaneMarker)) return false;
      if (!object.Equals(ControlData, other.ControlData)) return false;
      if(!navigationPath_.Equals(other.navigationPath_)) return false;
      if (IsRssSafe != other.IsRssSafe) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      if (SequenceNum != 0) hash ^= SequenceNum.GetHashCode();
      hash ^= object_.GetHashCode();
      if (autoDrivingCar_ != null) hash ^= AutoDrivingCar.GetHashCode();
      if (trafficSignal_ != null) hash ^= TrafficSignal.GetHashCode();
      hash ^= routePath_.GetHashCode();
      if (RoutingTime != 0D) hash ^= RoutingTime.GetHashCode();
      hash ^= planningTrajectory_.GetHashCode();
      if (mainStop_ != null) hash ^= MainStop.GetHashCode();
      if (mainDecision_ != null) hash ^= MainDecision.GetHashCode();
      if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
      if (delay_ != null) hash ^= Delay.GetHashCode();
      if (monitor_ != null) hash ^= Monitor.GetHashCode();
      hash ^= notification_.GetHashCode();
      if (EngageAdvice.Length != 0) hash ^= EngageAdvice.GetHashCode();
      hash ^= Latency.GetHashCode();
      if (mapElementIds_ != null) hash ^= MapElementIds.GetHashCode();
      if (MapHash != 0UL) hash ^= MapHash.GetHashCode();
      if (MapRadius != 0D) hash ^= MapRadius.GetHashCode();
      if (planningData_ != null) hash ^= PlanningData.GetHashCode();
      if (gps_ != null) hash ^= Gps.GetHashCode();
      if (laneMarker_ != null) hash ^= LaneMarker.GetHashCode();
      if (controlData_ != null) hash ^= ControlData.GetHashCode();
      hash ^= navigationPath_.GetHashCode();
      if (IsRssSafe != false) hash ^= IsRssSafe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Timestamp);
      }
      if (SequenceNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SequenceNum);
      }
      object_.WriteTo(output, _repeated_object_codec);
      if (autoDrivingCar_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AutoDrivingCar);
      }
      if (trafficSignal_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TrafficSignal);
      }
      routePath_.WriteTo(output, _repeated_routePath_codec);
      if (RoutingTime != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RoutingTime);
      }
      planningTrajectory_.WriteTo(output, _repeated_planningTrajectory_codec);
      if (mainStop_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MainStop);
      }
      if (mainDecision_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MainDecision);
      }
      if (SpeedLimit != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(SpeedLimit);
      }
      if (delay_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Delay);
      }
      if (monitor_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Monitor);
      }
      notification_.WriteTo(output, _repeated_notification_codec);
      if (EngageAdvice.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(EngageAdvice);
      }
      latency_.WriteTo(output, _map_latency_codec);
      if (mapElementIds_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(MapElementIds);
      }
      if (MapHash != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(MapHash);
      }
      if (MapRadius != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(MapRadius);
      }
      if (planningData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PlanningData);
      }
      if (gps_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Gps);
      }
      if (laneMarker_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(LaneMarker);
      }
      if (controlData_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ControlData);
      }
      navigationPath_.WriteTo(output, _repeated_navigationPath_codec);
      if (IsRssSafe != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsRssSafe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (SequenceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceNum);
      }
      size += object_.CalculateSize(_repeated_object_codec);
      if (autoDrivingCar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoDrivingCar);
      }
      if (trafficSignal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrafficSignal);
      }
      size += routePath_.CalculateSize(_repeated_routePath_codec);
      if (RoutingTime != 0D) {
        size += 1 + 8;
      }
      size += planningTrajectory_.CalculateSize(_repeated_planningTrajectory_codec);
      if (mainStop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainStop);
      }
      if (mainDecision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainDecision);
      }
      if (SpeedLimit != 0D) {
        size += 1 + 8;
      }
      if (delay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delay);
      }
      if (monitor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monitor);
      }
      size += notification_.CalculateSize(_repeated_notification_codec);
      if (EngageAdvice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EngageAdvice);
      }
      size += latency_.CalculateSize(_map_latency_codec);
      if (mapElementIds_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapElementIds);
      }
      if (MapHash != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MapHash);
      }
      if (MapRadius != 0D) {
        size += 2 + 8;
      }
      if (planningData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlanningData);
      }
      if (gps_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gps);
      }
      if (laneMarker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LaneMarker);
      }
      if (controlData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlData);
      }
      size += navigationPath_.CalculateSize(_repeated_navigationPath_codec);
      if (IsRssSafe != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationWorld other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      if (other.SequenceNum != 0) {
        SequenceNum = other.SequenceNum;
      }
      object_.Add(other.object_);
      if (other.autoDrivingCar_ != null) {
        if (autoDrivingCar_ == null) {
          autoDrivingCar_ = new global::Apollo.Dreamview.Object();
        }
        AutoDrivingCar.MergeFrom(other.AutoDrivingCar);
      }
      if (other.trafficSignal_ != null) {
        if (trafficSignal_ == null) {
          trafficSignal_ = new global::Apollo.Dreamview.Object();
        }
        TrafficSignal.MergeFrom(other.TrafficSignal);
      }
      routePath_.Add(other.routePath_);
      if (other.RoutingTime != 0D) {
        RoutingTime = other.RoutingTime;
      }
      planningTrajectory_.Add(other.planningTrajectory_);
      if (other.mainStop_ != null) {
        if (mainStop_ == null) {
          mainStop_ = new global::Apollo.Dreamview.Object();
        }
        MainStop.MergeFrom(other.MainStop);
      }
      if (other.mainDecision_ != null) {
        if (mainDecision_ == null) {
          mainDecision_ = new global::Apollo.Dreamview.Object();
        }
        MainDecision.MergeFrom(other.MainDecision);
      }
      if (other.SpeedLimit != 0D) {
        SpeedLimit = other.SpeedLimit;
      }
      if (other.delay_ != null) {
        if (delay_ == null) {
          delay_ = new global::Apollo.Dreamview.DelaysInMs();
        }
        Delay.MergeFrom(other.Delay);
      }
      if (other.monitor_ != null) {
        if (monitor_ == null) {
          monitor_ = new global::Apollo.Common.Monitor.MonitorMessage();
        }
        Monitor.MergeFrom(other.Monitor);
      }
      notification_.Add(other.notification_);
      if (other.EngageAdvice.Length != 0) {
        EngageAdvice = other.EngageAdvice;
      }
      latency_.Add(other.latency_);
      if (other.mapElementIds_ != null) {
        if (mapElementIds_ == null) {
          mapElementIds_ = new global::Apollo.Dreamview.MapElementIds();
        }
        MapElementIds.MergeFrom(other.MapElementIds);
      }
      if (other.MapHash != 0UL) {
        MapHash = other.MapHash;
      }
      if (other.MapRadius != 0D) {
        MapRadius = other.MapRadius;
      }
      if (other.planningData_ != null) {
        if (planningData_ == null) {
          planningData_ = new global::Apollo.PlanningInternal.PlanningData();
        }
        PlanningData.MergeFrom(other.PlanningData);
      }
      if (other.gps_ != null) {
        if (gps_ == null) {
          gps_ = new global::Apollo.Dreamview.Object();
        }
        Gps.MergeFrom(other.Gps);
      }
      if (other.laneMarker_ != null) {
        if (laneMarker_ == null) {
          laneMarker_ = new global::Apollo.Perception.LaneMarkers();
        }
        LaneMarker.MergeFrom(other.LaneMarker);
      }
      if (other.controlData_ != null) {
        if (controlData_ == null) {
          controlData_ = new global::Apollo.Dreamview.ControlData();
        }
        ControlData.MergeFrom(other.ControlData);
      }
      navigationPath_.Add(other.navigationPath_);
      if (other.IsRssSafe != false) {
        IsRssSafe = other.IsRssSafe;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 16: {
            SequenceNum = input.ReadUInt32();
            break;
          }
          case 26: {
            object_.AddEntriesFrom(input, _repeated_object_codec);
            break;
          }
          case 34: {
            if (autoDrivingCar_ == null) {
              autoDrivingCar_ = new global::Apollo.Dreamview.Object();
            }
            input.ReadMessage(autoDrivingCar_);
            break;
          }
          case 42: {
            if (trafficSignal_ == null) {
              trafficSignal_ = new global::Apollo.Dreamview.Object();
            }
            input.ReadMessage(trafficSignal_);
            break;
          }
          case 50: {
            routePath_.AddEntriesFrom(input, _repeated_routePath_codec);
            break;
          }
          case 57: {
            RoutingTime = input.ReadDouble();
            break;
          }
          case 66: {
            planningTrajectory_.AddEntriesFrom(input, _repeated_planningTrajectory_codec);
            break;
          }
          case 74: {
            if (mainStop_ == null) {
              mainStop_ = new global::Apollo.Dreamview.Object();
            }
            input.ReadMessage(mainStop_);
            break;
          }
          case 82: {
            if (mainDecision_ == null) {
              mainDecision_ = new global::Apollo.Dreamview.Object();
            }
            input.ReadMessage(mainDecision_);
            break;
          }
          case 89: {
            SpeedLimit = input.ReadDouble();
            break;
          }
          case 98: {
            if (delay_ == null) {
              delay_ = new global::Apollo.Dreamview.DelaysInMs();
            }
            input.ReadMessage(delay_);
            break;
          }
          case 106: {
            if (monitor_ == null) {
              monitor_ = new global::Apollo.Common.Monitor.MonitorMessage();
            }
            input.ReadMessage(monitor_);
            break;
          }
          case 114: {
            notification_.AddEntriesFrom(input, _repeated_notification_codec);
            break;
          }
          case 122: {
            EngageAdvice = input.ReadString();
            break;
          }
          case 130: {
            latency_.AddEntriesFrom(input, _map_latency_codec);
            break;
          }
          case 138: {
            if (mapElementIds_ == null) {
              mapElementIds_ = new global::Apollo.Dreamview.MapElementIds();
            }
            input.ReadMessage(mapElementIds_);
            break;
          }
          case 144: {
            MapHash = input.ReadUInt64();
            break;
          }
          case 153: {
            MapRadius = input.ReadDouble();
            break;
          }
          case 162: {
            if (planningData_ == null) {
              planningData_ = new global::Apollo.PlanningInternal.PlanningData();
            }
            input.ReadMessage(planningData_);
            break;
          }
          case 170: {
            if (gps_ == null) {
              gps_ = new global::Apollo.Dreamview.Object();
            }
            input.ReadMessage(gps_);
            break;
          }
          case 178: {
            if (laneMarker_ == null) {
              laneMarker_ = new global::Apollo.Perception.LaneMarkers();
            }
            input.ReadMessage(laneMarker_);
            break;
          }
          case 186: {
            if (controlData_ == null) {
              controlData_ = new global::Apollo.Dreamview.ControlData();
            }
            input.ReadMessage(controlData_);
            break;
          }
          case 194: {
            navigationPath_.AddEntriesFrom(input, _repeated_navigationPath_codec);
            break;
          }
          case 200: {
            IsRssSafe = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
