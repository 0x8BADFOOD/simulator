// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Dreamview {

  /// <summary>Holder for reflection information generated from modules/dreamview/proto/hmi_config.proto</summary>
  public static partial class HmiConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/dreamview/proto/hmi_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HmiConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihtb2R1bGVzL2RyZWFtdmlldy9wcm90by9obWlfY29uZmlnLnByb3RvEhBh",
            "cG9sbG8uZHJlYW12aWV3IsACCglITUlDb25maWcSNQoFbW9kZXMYASADKAsy",
            "Ji5hcG9sbG8uZHJlYW12aWV3LkhNSUNvbmZpZy5Nb2Rlc0VudHJ5EjMKBG1h",
            "cHMYAiADKAsyJS5hcG9sbG8uZHJlYW12aWV3LkhNSUNvbmZpZy5NYXBzRW50",
            "cnkSOwoIdmVoaWNsZXMYAyADKAsyKS5hcG9sbG8uZHJlYW12aWV3LkhNSUNv",
            "bmZpZy5WZWhpY2xlc0VudHJ5GiwKCk1vZGVzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ARorCglNYXBzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ARovCg1WZWhpY2xlc0VudHJ5EgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiIgoMQXVkaW9DYXB0dXJlEhIKCndh",
            "dl9zdHJlYW0YASABKAwifQoLVmVoaWNsZURhdGESOgoKZGF0YV9maWxlcxgB",
            "IAMoCzImLmFwb2xsby5kcmVhbXZpZXcuVmVoaWNsZURhdGEuRGF0YUZpbGUa",
            "MgoIRGF0YUZpbGUSEwoLc291cmNlX3BhdGgYASABKAkSEQoJZGVzdF9wYXRo",
            "GAIgASgJKsMBCglITUlBY3Rpb24SCAoETk9ORRAAEg4KClNFVFVQX01PREUQ",
            "ARIOCgpSRVNFVF9NT0RFEAISEwoPRU5URVJfQVVUT19NT0RFEAMSDQoJRElT",
            "RU5HQUdFEAQSDwoLQ0hBTkdFX01PREUQBRIOCgpDSEFOR0VfTUFQEAYSEgoO",
            "Q0hBTkdFX1ZFSElDTEUQBxIQCgxTVEFSVF9NT0RVTEUQCBIPCgtTVE9QX01P",
            "RFVMRRAJEhAKDFJFQ09SRF9BVURJTxAKYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Apollo.Dreamview.HMIAction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.HMIConfig), global::Apollo.Dreamview.HMIConfig.Parser, new[]{ "Modes", "Maps", "Vehicles" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.AudioCapture), global::Apollo.Dreamview.AudioCapture.Parser, new[]{ "WavStream" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.VehicleData), global::Apollo.Dreamview.VehicleData.Parser, new[]{ "DataFiles" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Dreamview.VehicleData.Types.DataFile), global::Apollo.Dreamview.VehicleData.Types.DataFile.Parser, new[]{ "SourcePath", "DestPath" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum HMIAction {
    /// <summary>
    /// Simple HMI action without any parameter.
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// Setup current mode.
    /// </summary>
    [pbr::OriginalName("SETUP_MODE")] SetupMode = 1,
    /// <summary>
    /// Reset current mode.
    /// </summary>
    [pbr::OriginalName("RESET_MODE")] ResetMode = 2,
    /// <summary>
    /// Enter into auto driving mode.
    /// </summary>
    [pbr::OriginalName("ENTER_AUTO_MODE")] EnterAutoMode = 3,
    /// <summary>
    /// Disengage from auto driving mode.
    /// </summary>
    [pbr::OriginalName("DISENGAGE")] Disengage = 4,
    /// <summary>
    /// HMI action with a value string parameter.
    /// </summary>
    [pbr::OriginalName("CHANGE_MODE")] ChangeMode = 5,
    /// <summary>
    /// value = map_name
    /// </summary>
    [pbr::OriginalName("CHANGE_MAP")] ChangeMap = 6,
    /// <summary>
    /// value = vehicle_name
    /// </summary>
    [pbr::OriginalName("CHANGE_VEHICLE")] ChangeVehicle = 7,
    /// <summary>
    /// value = module_name
    /// </summary>
    [pbr::OriginalName("START_MODULE")] StartModule = 8,
    /// <summary>
    /// value = module_name
    /// </summary>
    [pbr::OriginalName("STOP_MODULE")] StopModule = 9,
    /// <summary>
    /// value = audio_piece
    /// </summary>
    [pbr::OriginalName("RECORD_AUDIO")] RecordAudio = 10,
  }

  #endregion

  #region Messages
  public sealed partial class HMIConfig : pb::IMessage<HMIConfig> {
    private static readonly pb::MessageParser<HMIConfig> _parser = new pb::MessageParser<HMIConfig>(() => new HMIConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HMIConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIConfig(HMIConfig other) : this() {
      modes_ = other.modes_.Clone();
      maps_ = other.maps_.Clone();
      vehicles_ = other.vehicles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HMIConfig Clone() {
      return new HMIConfig(this);
    }

    /// <summary>Field number for the "modes" field.</summary>
    public const int ModesFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_modes_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> modes_ = new pbc::MapField<string, string>();
    /// <summary>
    /// {mode_name: mode_path}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Modes {
      get { return modes_; }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_maps_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> maps_ = new pbc::MapField<string, string>();
    /// <summary>
    /// {map_name: map_path}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Maps {
      get { return maps_; }
    }

    /// <summary>Field number for the "vehicles" field.</summary>
    public const int VehiclesFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_vehicles_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> vehicles_ = new pbc::MapField<string, string>();
    /// <summary>
    /// {vehicle_name: vehicle_path}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vehicles {
      get { return vehicles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HMIConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HMIConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Modes.Equals(other.Modes)) return false;
      if (!Maps.Equals(other.Maps)) return false;
      if (!Vehicles.Equals(other.Vehicles)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Modes.GetHashCode();
      hash ^= Maps.GetHashCode();
      hash ^= Vehicles.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      modes_.WriteTo(output, _map_modes_codec);
      maps_.WriteTo(output, _map_maps_codec);
      vehicles_.WriteTo(output, _map_vehicles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += modes_.CalculateSize(_map_modes_codec);
      size += maps_.CalculateSize(_map_maps_codec);
      size += vehicles_.CalculateSize(_map_vehicles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HMIConfig other) {
      if (other == null) {
        return;
      }
      modes_.Add(other.modes_);
      maps_.Add(other.maps_);
      vehicles_.Add(other.vehicles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            modes_.AddEntriesFrom(input, _map_modes_codec);
            break;
          }
          case 18: {
            maps_.AddEntriesFrom(input, _map_maps_codec);
            break;
          }
          case 26: {
            vehicles_.AddEntriesFrom(input, _map_vehicles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AudioCapture : pb::IMessage<AudioCapture> {
    private static readonly pb::MessageParser<AudioCapture> _parser = new pb::MessageParser<AudioCapture>(() => new AudioCapture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioCapture(AudioCapture other) : this() {
      wavStream_ = other.wavStream_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioCapture Clone() {
      return new AudioCapture(this);
    }

    /// <summary>Field number for the "wav_stream" field.</summary>
    public const int WavStreamFieldNumber = 1;
    private pb::ByteString wavStream_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WavStream {
      get { return wavStream_; }
      set {
        wavStream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WavStream != other.WavStream) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WavStream.Length != 0) hash ^= WavStream.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WavStream.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(WavStream);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WavStream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WavStream);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioCapture other) {
      if (other == null) {
        return;
      }
      if (other.WavStream.Length != 0) {
        WavStream = other.WavStream;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WavStream = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleData : pb::IMessage<VehicleData> {
    private static readonly pb::MessageParser<VehicleData> _parser = new pb::MessageParser<VehicleData>(() => new VehicleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Dreamview.HmiConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleData(VehicleData other) : this() {
      dataFiles_ = other.dataFiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleData Clone() {
      return new VehicleData(this);
    }

    /// <summary>Field number for the "data_files" field.</summary>
    public const int DataFilesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Dreamview.VehicleData.Types.DataFile> _repeated_dataFiles_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Dreamview.VehicleData.Types.DataFile.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Dreamview.VehicleData.Types.DataFile> dataFiles_ = new pbc::RepeatedField<global::Apollo.Dreamview.VehicleData.Types.DataFile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Dreamview.VehicleData.Types.DataFile> DataFiles {
      get { return dataFiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataFiles_.Equals(other.dataFiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataFiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataFiles_.WriteTo(output, _repeated_dataFiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataFiles_.CalculateSize(_repeated_dataFiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleData other) {
      if (other == null) {
        return;
      }
      dataFiles_.Add(other.dataFiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dataFiles_.AddEntriesFrom(input, _repeated_dataFiles_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VehicleData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Upon switching vehicle, we need to copy source data to the dest path to
      /// make it in effect.
      /// </summary>
      public sealed partial class DataFile : pb::IMessage<DataFile> {
        private static readonly pb::MessageParser<DataFile> _parser = new pb::MessageParser<DataFile>(() => new DataFile());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataFile> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Apollo.Dreamview.VehicleData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataFile() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataFile(DataFile other) : this() {
          sourcePath_ = other.sourcePath_;
          destPath_ = other.destPath_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataFile Clone() {
          return new DataFile(this);
        }

        /// <summary>Field number for the "source_path" field.</summary>
        public const int SourcePathFieldNumber = 1;
        private string sourcePath_ = "";
        /// <summary>
        /// Source path is a path relative to the vehicle data directory.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SourcePath {
          get { return sourcePath_; }
          set {
            sourcePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "dest_path" field.</summary>
        public const int DestPathFieldNumber = 2;
        private string destPath_ = "";
        /// <summary>
        /// Dest path is where the data file could become in effect.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DestPath {
          get { return destPath_; }
          set {
            destPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataFile);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataFile other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SourcePath != other.SourcePath) return false;
          if (DestPath != other.DestPath) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SourcePath.Length != 0) hash ^= SourcePath.GetHashCode();
          if (DestPath.Length != 0) hash ^= DestPath.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SourcePath.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(SourcePath);
          }
          if (DestPath.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DestPath);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SourcePath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePath);
          }
          if (DestPath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DestPath);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataFile other) {
          if (other == null) {
            return;
          }
          if (other.SourcePath.Length != 0) {
            SourcePath = other.SourcePath;
          }
          if (other.DestPath.Length != 0) {
            DestPath = other.DestPath;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                SourcePath = input.ReadString();
                break;
              }
              case 18: {
                DestPath = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
