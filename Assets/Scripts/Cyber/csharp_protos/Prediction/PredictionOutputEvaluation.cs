// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_output_evaluation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Prediction {

  /// <summary>Holder for reflection information generated from modules/prediction/proto/prediction_output_evaluation.proto</summary>
  public static partial class PredictionOutputEvaluationReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/prediction/proto/prediction_output_evaluation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PredictionOutputEvaluationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjttb2R1bGVzL3ByZWRpY3Rpb24vcHJvdG8vcHJlZGljdGlvbl9vdXRwdXRf",
            "ZXZhbHVhdGlvbi5wcm90bxIRYXBvbGxvLnByZWRpY3Rpb24iogIKG1RyYWpl",
            "Y3RvcnlFdmFsdWF0aW9uTWV0cmljcxIOCgZyZWNhbGwYASABKAESEQoJcHJl",
            "Y2lzaW9uGAIgASgBEhkKEXN1bV9zcXVhcmVkX2Vycm9yGAMgASgBEhoKEm51",
            "bV9mcmFtZV9vYnN0YWNsZRgEIAEoBRIgChhudW1fcHJlZGljdGVkX3RyYWpl",
            "Y3RvcnkYBSABKAUSGAoQbnVtX2Z1dHVyZV9wb2ludBgGIAEoBRIuCiZudW1f",
            "Y29ycmVjdGx5X3ByZWRpY3RlZF9mcmFtZV9vYnN0YWNsZRgHIAEoARIRCglz",
            "aXR1YXRpb24YCCABKAkSEgoKdGltZV9yYW5nZRgJIAEoARIWCg5taW5fdGlt",
            "ZV9yYW5nZRgKIAEoASK1AQogVHJhamVjdG9yeUV2YWx1YXRpb25NZXRyaWNz",
            "R3JvdXASSAoQanVuY3Rpb25fbWV0cmljcxgBIAEoCzIuLmFwb2xsby5wcmVk",
            "aWN0aW9uLlRyYWplY3RvcnlFdmFsdWF0aW9uTWV0cmljcxJHCg9vbl9sYW5l",
            "X21ldHJpY3MYAiABKAsyLi5hcG9sbG8ucHJlZGljdGlvbi5UcmFqZWN0b3J5",
            "RXZhbHVhdGlvbk1ldHJpY3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.TrajectoryEvaluationMetrics), global::Apollo.Prediction.TrajectoryEvaluationMetrics.Parser, new[]{ "Recall", "Precision", "SumSquaredError", "NumFrameObstacle", "NumPredictedTrajectory", "NumFuturePoint", "NumCorrectlyPredictedFrameObstacle", "Situation", "TimeRange", "MinTimeRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Prediction.TrajectoryEvaluationMetricsGroup), global::Apollo.Prediction.TrajectoryEvaluationMetricsGroup.Parser, new[]{ "JunctionMetrics", "OnLaneMetrics" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TrajectoryEvaluationMetrics : pb::IMessage<TrajectoryEvaluationMetrics> {
    private static readonly pb::MessageParser<TrajectoryEvaluationMetrics> _parser = new pb::MessageParser<TrajectoryEvaluationMetrics>(() => new TrajectoryEvaluationMetrics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryEvaluationMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.PredictionOutputEvaluationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryEvaluationMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryEvaluationMetrics(TrajectoryEvaluationMetrics other) : this() {
      recall_ = other.recall_;
      precision_ = other.precision_;
      sumSquaredError_ = other.sumSquaredError_;
      numFrameObstacle_ = other.numFrameObstacle_;
      numPredictedTrajectory_ = other.numPredictedTrajectory_;
      numFuturePoint_ = other.numFuturePoint_;
      numCorrectlyPredictedFrameObstacle_ = other.numCorrectlyPredictedFrameObstacle_;
      situation_ = other.situation_;
      timeRange_ = other.timeRange_;
      minTimeRange_ = other.minTimeRange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryEvaluationMetrics Clone() {
      return new TrajectoryEvaluationMetrics(this);
    }

    /// <summary>Field number for the "recall" field.</summary>
    public const int RecallFieldNumber = 1;
    private double recall_;
    /// <summary>
    /// recall = num_correctly_predicted_frame_obstacle / num_frame_obstacle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Recall {
      get { return recall_; }
      set {
        recall_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 2;
    private double precision_;
    /// <summary>
    /// precision = num_correctly_predicted_frame_obstacle / num_trajectory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "sum_squared_error" field.</summary>
    public const int SumSquaredErrorFieldNumber = 3;
    private double sumSquaredError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SumSquaredError {
      get { return sumSquaredError_; }
      set {
        sumSquaredError_ = value;
      }
    }

    /// <summary>Field number for the "num_frame_obstacle" field.</summary>
    public const int NumFrameObstacleFieldNumber = 4;
    private int numFrameObstacle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumFrameObstacle {
      get { return numFrameObstacle_; }
      set {
        numFrameObstacle_ = value;
      }
    }

    /// <summary>Field number for the "num_predicted_trajectory" field.</summary>
    public const int NumPredictedTrajectoryFieldNumber = 5;
    private int numPredictedTrajectory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumPredictedTrajectory {
      get { return numPredictedTrajectory_; }
      set {
        numPredictedTrajectory_ = value;
      }
    }

    /// <summary>Field number for the "num_future_point" field.</summary>
    public const int NumFuturePointFieldNumber = 6;
    private int numFuturePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumFuturePoint {
      get { return numFuturePoint_; }
      set {
        numFuturePoint_ = value;
      }
    }

    /// <summary>Field number for the "num_correctly_predicted_frame_obstacle" field.</summary>
    public const int NumCorrectlyPredictedFrameObstacleFieldNumber = 7;
    private double numCorrectlyPredictedFrameObstacle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NumCorrectlyPredictedFrameObstacle {
      get { return numCorrectlyPredictedFrameObstacle_; }
      set {
        numCorrectlyPredictedFrameObstacle_ = value;
      }
    }

    /// <summary>Field number for the "situation" field.</summary>
    public const int SituationFieldNumber = 8;
    private string situation_ = "";
    /// <summary>
    /// onlane, offlane, junction, all
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Situation {
      get { return situation_; }
      set {
        situation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_range" field.</summary>
    public const int TimeRangeFieldNumber = 9;
    private double timeRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeRange {
      get { return timeRange_; }
      set {
        timeRange_ = value;
      }
    }

    /// <summary>Field number for the "min_time_range" field.</summary>
    public const int MinTimeRangeFieldNumber = 10;
    private double minTimeRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinTimeRange {
      get { return minTimeRange_; }
      set {
        minTimeRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryEvaluationMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryEvaluationMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Recall != other.Recall) return false;
      if (Precision != other.Precision) return false;
      if (SumSquaredError != other.SumSquaredError) return false;
      if (NumFrameObstacle != other.NumFrameObstacle) return false;
      if (NumPredictedTrajectory != other.NumPredictedTrajectory) return false;
      if (NumFuturePoint != other.NumFuturePoint) return false;
      if (NumCorrectlyPredictedFrameObstacle != other.NumCorrectlyPredictedFrameObstacle) return false;
      if (Situation != other.Situation) return false;
      if (TimeRange != other.TimeRange) return false;
      if (MinTimeRange != other.MinTimeRange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Recall != 0D) hash ^= Recall.GetHashCode();
      if (Precision != 0D) hash ^= Precision.GetHashCode();
      if (SumSquaredError != 0D) hash ^= SumSquaredError.GetHashCode();
      if (NumFrameObstacle != 0) hash ^= NumFrameObstacle.GetHashCode();
      if (NumPredictedTrajectory != 0) hash ^= NumPredictedTrajectory.GetHashCode();
      if (NumFuturePoint != 0) hash ^= NumFuturePoint.GetHashCode();
      if (NumCorrectlyPredictedFrameObstacle != 0D) hash ^= NumCorrectlyPredictedFrameObstacle.GetHashCode();
      if (Situation.Length != 0) hash ^= Situation.GetHashCode();
      if (TimeRange != 0D) hash ^= TimeRange.GetHashCode();
      if (MinTimeRange != 0D) hash ^= MinTimeRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Recall != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Recall);
      }
      if (Precision != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Precision);
      }
      if (SumSquaredError != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SumSquaredError);
      }
      if (NumFrameObstacle != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumFrameObstacle);
      }
      if (NumPredictedTrajectory != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumPredictedTrajectory);
      }
      if (NumFuturePoint != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumFuturePoint);
      }
      if (NumCorrectlyPredictedFrameObstacle != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NumCorrectlyPredictedFrameObstacle);
      }
      if (Situation.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Situation);
      }
      if (TimeRange != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TimeRange);
      }
      if (MinTimeRange != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MinTimeRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Recall != 0D) {
        size += 1 + 8;
      }
      if (Precision != 0D) {
        size += 1 + 8;
      }
      if (SumSquaredError != 0D) {
        size += 1 + 8;
      }
      if (NumFrameObstacle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumFrameObstacle);
      }
      if (NumPredictedTrajectory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPredictedTrajectory);
      }
      if (NumFuturePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumFuturePoint);
      }
      if (NumCorrectlyPredictedFrameObstacle != 0D) {
        size += 1 + 8;
      }
      if (Situation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Situation);
      }
      if (TimeRange != 0D) {
        size += 1 + 8;
      }
      if (MinTimeRange != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryEvaluationMetrics other) {
      if (other == null) {
        return;
      }
      if (other.Recall != 0D) {
        Recall = other.Recall;
      }
      if (other.Precision != 0D) {
        Precision = other.Precision;
      }
      if (other.SumSquaredError != 0D) {
        SumSquaredError = other.SumSquaredError;
      }
      if (other.NumFrameObstacle != 0) {
        NumFrameObstacle = other.NumFrameObstacle;
      }
      if (other.NumPredictedTrajectory != 0) {
        NumPredictedTrajectory = other.NumPredictedTrajectory;
      }
      if (other.NumFuturePoint != 0) {
        NumFuturePoint = other.NumFuturePoint;
      }
      if (other.NumCorrectlyPredictedFrameObstacle != 0D) {
        NumCorrectlyPredictedFrameObstacle = other.NumCorrectlyPredictedFrameObstacle;
      }
      if (other.Situation.Length != 0) {
        Situation = other.Situation;
      }
      if (other.TimeRange != 0D) {
        TimeRange = other.TimeRange;
      }
      if (other.MinTimeRange != 0D) {
        MinTimeRange = other.MinTimeRange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Recall = input.ReadDouble();
            break;
          }
          case 17: {
            Precision = input.ReadDouble();
            break;
          }
          case 25: {
            SumSquaredError = input.ReadDouble();
            break;
          }
          case 32: {
            NumFrameObstacle = input.ReadInt32();
            break;
          }
          case 40: {
            NumPredictedTrajectory = input.ReadInt32();
            break;
          }
          case 48: {
            NumFuturePoint = input.ReadInt32();
            break;
          }
          case 57: {
            NumCorrectlyPredictedFrameObstacle = input.ReadDouble();
            break;
          }
          case 66: {
            Situation = input.ReadString();
            break;
          }
          case 73: {
            TimeRange = input.ReadDouble();
            break;
          }
          case 81: {
            MinTimeRange = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrajectoryEvaluationMetricsGroup : pb::IMessage<TrajectoryEvaluationMetricsGroup> {
    private static readonly pb::MessageParser<TrajectoryEvaluationMetricsGroup> _parser = new pb::MessageParser<TrajectoryEvaluationMetricsGroup>(() => new TrajectoryEvaluationMetricsGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryEvaluationMetricsGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Prediction.PredictionOutputEvaluationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryEvaluationMetricsGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryEvaluationMetricsGroup(TrajectoryEvaluationMetricsGroup other) : this() {
      JunctionMetrics = other.junctionMetrics_ != null ? other.JunctionMetrics.Clone() : null;
      OnLaneMetrics = other.onLaneMetrics_ != null ? other.OnLaneMetrics.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryEvaluationMetricsGroup Clone() {
      return new TrajectoryEvaluationMetricsGroup(this);
    }

    /// <summary>Field number for the "junction_metrics" field.</summary>
    public const int JunctionMetricsFieldNumber = 1;
    private global::Apollo.Prediction.TrajectoryEvaluationMetrics junctionMetrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.TrajectoryEvaluationMetrics JunctionMetrics {
      get { return junctionMetrics_; }
      set {
        junctionMetrics_ = value;
      }
    }

    /// <summary>Field number for the "on_lane_metrics" field.</summary>
    public const int OnLaneMetricsFieldNumber = 2;
    private global::Apollo.Prediction.TrajectoryEvaluationMetrics onLaneMetrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Prediction.TrajectoryEvaluationMetrics OnLaneMetrics {
      get { return onLaneMetrics_; }
      set {
        onLaneMetrics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryEvaluationMetricsGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryEvaluationMetricsGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(JunctionMetrics, other.JunctionMetrics)) return false;
      if (!object.Equals(OnLaneMetrics, other.OnLaneMetrics)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (junctionMetrics_ != null) hash ^= JunctionMetrics.GetHashCode();
      if (onLaneMetrics_ != null) hash ^= OnLaneMetrics.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (junctionMetrics_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(JunctionMetrics);
      }
      if (onLaneMetrics_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OnLaneMetrics);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (junctionMetrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JunctionMetrics);
      }
      if (onLaneMetrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnLaneMetrics);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryEvaluationMetricsGroup other) {
      if (other == null) {
        return;
      }
      if (other.junctionMetrics_ != null) {
        if (junctionMetrics_ == null) {
          junctionMetrics_ = new global::Apollo.Prediction.TrajectoryEvaluationMetrics();
        }
        JunctionMetrics.MergeFrom(other.JunctionMetrics);
      }
      if (other.onLaneMetrics_ != null) {
        if (onLaneMetrics_ == null) {
          onLaneMetrics_ = new global::Apollo.Prediction.TrajectoryEvaluationMetrics();
        }
        OnLaneMetrics.MergeFrom(other.OnLaneMetrics);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (junctionMetrics_ == null) {
              junctionMetrics_ = new global::Apollo.Prediction.TrajectoryEvaluationMetrics();
            }
            input.ReadMessage(junctionMetrics_);
            break;
          }
          case 18: {
            if (onLaneMetrics_ == null) {
              onLaneMetrics_ = new global::Apollo.Prediction.TrajectoryEvaluationMetrics();
            }
            input.ReadMessage(onLaneMetrics_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
