// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_signal.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Hdmap {

  /// <summary>Holder for reflection information generated from modules/map/proto/map_signal.proto</summary>
  public static partial class MapSignalReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/map/proto/map_signal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapSignalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJtb2R1bGVzL21hcC9wcm90by9tYXBfc2lnbmFsLnByb3RvEgxhcG9sbG8u",
            "aGRtYXAaI21vZHVsZXMvY29tbW9uL3Byb3RvL2dlb21ldHJ5LnByb3RvGiRt",
            "b2R1bGVzL21hcC9wcm90by9tYXBfZ2VvbWV0cnkucHJvdG8aHm1vZHVsZXMv",
            "bWFwL3Byb3RvL21hcF9pZC5wcm90byKxAgoJU3Vic2lnbmFsEhwKAmlkGAEg",
            "ASgLMhAuYXBvbGxvLmhkbWFwLklkEioKBHR5cGUYAiABKA4yHC5hcG9sbG8u",
            "aGRtYXAuU3Vic2lnbmFsLlR5cGUSKQoIbG9jYXRpb24YAyABKAsyFy5hcG9s",
            "bG8uY29tbW9uLlBvaW50RU5VIq4BCgRUeXBlEg4KClRZUEVfRFVNTVkQABIL",
            "CgdVTktOT1dOEAESCgoGQ0lSQ0xFEAISDgoKQVJST1dfTEVGVBADEhEKDUFS",
            "Uk9XX0ZPUldBUkQQBBIPCgtBUlJPV19SSUdIVBAFEhoKFkFSUk9XX0xFRlRf",
            "QU5EX0ZPUldBUkQQBhIbChdBUlJPV19SSUdIVF9BTkRfRk9SV0FSRBAHEhAK",
            "DEFSUk9XX1VfVFVSThAIIvgCCgZTaWduYWwSHAoCaWQYASABKAsyEC5hcG9s",
            "bG8uaGRtYXAuSWQSJwoIYm91bmRhcnkYAiABKAsyFS5hcG9sbG8uaGRtYXAu",
            "UG9seWdvbhIqCglzdWJzaWduYWwYAyADKAsyFy5hcG9sbG8uaGRtYXAuU3Vi",
            "c2lnbmFsEiQKCm92ZXJsYXBfaWQYBCADKAsyEC5hcG9sbG8uaGRtYXAuSWQS",
            "JwoEdHlwZRgFIAEoDjIZLmFwb2xsby5oZG1hcC5TaWduYWwuVHlwZRImCglz",
            "dG9wX2xpbmUYBiADKAsyEy5hcG9sbG8uaGRtYXAuQ3VydmUigwEKBFR5cGUS",
            "DgoKVFlQRV9EVU1NWRAAEgsKB1VOS05PV04QARIUChBNSVhfMl9IT1JJWk9O",
            "VEFMEAISEgoOTUlYXzJfVkVSVElDQUwQAxIUChBNSVhfM19IT1JJWk9OVEFM",
            "EAQSEgoOTUlYXzNfVkVSVElDQUwQBRIKCgZTSU5HTEUQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Common.GeometryReflection.Descriptor, global::Apollo.Hdmap.MapGeometryReflection.Descriptor, global::Apollo.Hdmap.MapIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.Subsignal), global::Apollo.Hdmap.Subsignal.Parser, new[]{ "Id", "Type", "Location" }, null, new[]{ typeof(global::Apollo.Hdmap.Subsignal.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.Signal), global::Apollo.Hdmap.Signal.Parser, new[]{ "Id", "Boundary", "Subsignal", "OverlapId", "Type", "StopLine" }, null, new[]{ typeof(global::Apollo.Hdmap.Signal.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Subsignal : pb::IMessage<Subsignal> {
    private static readonly pb::MessageParser<Subsignal> _parser = new pb::MessageParser<Subsignal>(() => new Subsignal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subsignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapSignalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subsignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subsignal(Subsignal other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      type_ = other.type_;
      Location = other.location_ != null ? other.Location.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subsignal Clone() {
      return new Subsignal(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Apollo.Hdmap.Id id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Id Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Apollo.Hdmap.Subsignal.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Subsignal.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private global::Apollo.Common.PointENU location_;
    /// <summary>
    /// Location of the center of the bulb. now no data support.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Common.PointENU Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subsignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subsignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (location_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Location);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subsignal other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::Apollo.Hdmap.Id();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Apollo.Common.PointENU();
        }
        Location.MergeFrom(other.Location);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::Apollo.Hdmap.Id();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            type_ = (global::Apollo.Hdmap.Subsignal.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            if (location_ == null) {
              location_ = new global::Apollo.Common.PointENU();
            }
            input.ReadMessage(location_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Subsignal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("CIRCLE")] Circle = 2,
        [pbr::OriginalName("ARROW_LEFT")] ArrowLeft = 3,
        [pbr::OriginalName("ARROW_FORWARD")] ArrowForward = 4,
        [pbr::OriginalName("ARROW_RIGHT")] ArrowRight = 5,
        [pbr::OriginalName("ARROW_LEFT_AND_FORWARD")] ArrowLeftAndForward = 6,
        [pbr::OriginalName("ARROW_RIGHT_AND_FORWARD")] ArrowRightAndForward = 7,
        [pbr::OriginalName("ARROW_U_TURN")] ArrowUTurn = 8,
      }

    }
    #endregion

  }

  public sealed partial class Signal : pb::IMessage<Signal> {
    private static readonly pb::MessageParser<Signal> _parser = new pb::MessageParser<Signal>(() => new Signal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapSignalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signal(Signal other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      Boundary = other.boundary_ != null ? other.Boundary.Clone() : null;
      subsignal_ = other.subsignal_.Clone();
      overlapId_ = other.overlapId_.Clone();
      type_ = other.type_;
      stopLine_ = other.stopLine_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signal Clone() {
      return new Signal(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Apollo.Hdmap.Id id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Id Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boundary" field.</summary>
    public const int BoundaryFieldNumber = 2;
    private global::Apollo.Hdmap.Polygon boundary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Polygon Boundary {
      get { return boundary_; }
      set {
        boundary_ = value;
      }
    }

    /// <summary>Field number for the "subsignal" field.</summary>
    public const int SubsignalFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Apollo.Hdmap.Subsignal> _repeated_subsignal_codec
        = pb::FieldCodec.ForMessage(26, global::Apollo.Hdmap.Subsignal.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Hdmap.Subsignal> subsignal_ = new pbc::RepeatedField<global::Apollo.Hdmap.Subsignal>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Hdmap.Subsignal> Subsignal {
      get { return subsignal_; }
    }

    /// <summary>Field number for the "overlap_id" field.</summary>
    public const int OverlapIdFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Apollo.Hdmap.Id> _repeated_overlapId_codec
        = pb::FieldCodec.ForMessage(34, global::Apollo.Hdmap.Id.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Hdmap.Id> overlapId_ = new pbc::RepeatedField<global::Apollo.Hdmap.Id>();
    /// <summary>
    /// TODO: add orientation. now no data support.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Hdmap.Id> OverlapId {
      get { return overlapId_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Apollo.Hdmap.Signal.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Signal.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "stop_line" field.</summary>
    public const int StopLineFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Apollo.Hdmap.Curve> _repeated_stopLine_codec
        = pb::FieldCodec.ForMessage(50, global::Apollo.Hdmap.Curve.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Hdmap.Curve> stopLine_ = new pbc::RepeatedField<global::Apollo.Hdmap.Curve>();
    /// <summary>
    /// stop line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Hdmap.Curve> StopLine {
      get { return stopLine_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Boundary, other.Boundary)) return false;
      if(!subsignal_.Equals(other.subsignal_)) return false;
      if(!overlapId_.Equals(other.overlapId_)) return false;
      if (Type != other.Type) return false;
      if(!stopLine_.Equals(other.stopLine_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (boundary_ != null) hash ^= Boundary.GetHashCode();
      hash ^= subsignal_.GetHashCode();
      hash ^= overlapId_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= stopLine_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (boundary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Boundary);
      }
      subsignal_.WriteTo(output, _repeated_subsignal_codec);
      overlapId_.WriteTo(output, _repeated_overlapId_codec);
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      stopLine_.WriteTo(output, _repeated_stopLine_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (boundary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boundary);
      }
      size += subsignal_.CalculateSize(_repeated_subsignal_codec);
      size += overlapId_.CalculateSize(_repeated_overlapId_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += stopLine_.CalculateSize(_repeated_stopLine_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signal other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::Apollo.Hdmap.Id();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.boundary_ != null) {
        if (boundary_ == null) {
          boundary_ = new global::Apollo.Hdmap.Polygon();
        }
        Boundary.MergeFrom(other.Boundary);
      }
      subsignal_.Add(other.subsignal_);
      overlapId_.Add(other.overlapId_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      stopLine_.Add(other.stopLine_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::Apollo.Hdmap.Id();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (boundary_ == null) {
              boundary_ = new global::Apollo.Hdmap.Polygon();
            }
            input.ReadMessage(boundary_);
            break;
          }
          case 26: {
            subsignal_.AddEntriesFrom(input, _repeated_subsignal_codec);
            break;
          }
          case 34: {
            overlapId_.AddEntriesFrom(input, _repeated_overlapId_codec);
            break;
          }
          case 40: {
            type_ = (global::Apollo.Hdmap.Signal.Types.Type) input.ReadEnum();
            break;
          }
          case 50: {
            stopLine_.AddEntriesFrom(input, _repeated_stopLine_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Signal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_DUMMY")] Dummy = 0,
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("MIX_2_HORIZONTAL")] Mix2Horizontal = 2,
        [pbr::OriginalName("MIX_2_VERTICAL")] Mix2Vertical = 3,
        [pbr::OriginalName("MIX_3_HORIZONTAL")] Mix3Horizontal = 4,
        [pbr::OriginalName("MIX_3_VERTICAL")] Mix3Vertical = 5,
        [pbr::OriginalName("SINGLE")] Single = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
