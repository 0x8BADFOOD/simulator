// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_speed_control.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Apollo.Hdmap {

  /// <summary>Holder for reflection information generated from modules/map/proto/map_speed_control.proto</summary>
  public static partial class MapSpeedControlReflection {

    #region Descriptor
    /// <summary>File descriptor for modules/map/proto/map_speed_control.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapSpeedControlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciltb2R1bGVzL21hcC9wcm90by9tYXBfc3BlZWRfY29udHJvbC5wcm90bxIM",
            "YXBvbGxvLmhkbWFwGiRtb2R1bGVzL21hcC9wcm90by9tYXBfZ2VvbWV0cnku",
            "cHJvdG8iWQoMU3BlZWRDb250cm9sEgwKBG5hbWUYASABKAkSJgoHcG9seWdv",
            "bhgCIAEoCzIVLmFwb2xsby5oZG1hcC5Qb2x5Z29uEhMKC3NwZWVkX2xpbWl0",
            "GAMgASgBIkIKDVNwZWVkQ29udHJvbHMSMQoNc3BlZWRfY29udHJvbBgBIAMo",
            "CzIaLmFwb2xsby5oZG1hcC5TcGVlZENvbnRyb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Apollo.Hdmap.MapGeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.SpeedControl), global::Apollo.Hdmap.SpeedControl.Parser, new[]{ "Name", "Polygon", "SpeedLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Apollo.Hdmap.SpeedControls), global::Apollo.Hdmap.SpeedControls.Parser, new[]{ "SpeedControl" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// This proto defines the format of an auxiliary file that helps to
  /// define the speed limit on certain area of road.
  /// Apollo can use this file to quickly fix speed problems on maps,
  /// instead of waiting for updating map data.
  /// </summary>
  public sealed partial class SpeedControl : pb::IMessage<SpeedControl> {
    private static readonly pb::MessageParser<SpeedControl> _parser = new pb::MessageParser<SpeedControl>(() => new SpeedControl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapSpeedControlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedControl(SpeedControl other) : this() {
      name_ = other.name_;
      Polygon = other.polygon_ != null ? other.Polygon.Clone() : null;
      speedLimit_ = other.speedLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedControl Clone() {
      return new SpeedControl(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::Apollo.Hdmap.Polygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Apollo.Hdmap.Polygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 3;
    private double speedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      if (SpeedLimit != other.SpeedLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (SpeedLimit != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SpeedLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (SpeedLimit != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedControl other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          polygon_ = new global::Apollo.Hdmap.Polygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      if (other.SpeedLimit != 0D) {
        SpeedLimit = other.SpeedLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (polygon_ == null) {
              polygon_ = new global::Apollo.Hdmap.Polygon();
            }
            input.ReadMessage(polygon_);
            break;
          }
          case 25: {
            SpeedLimit = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedControls : pb::IMessage<SpeedControls> {
    private static readonly pb::MessageParser<SpeedControls> _parser = new pb::MessageParser<SpeedControls>(() => new SpeedControls());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedControls> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Apollo.Hdmap.MapSpeedControlReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedControls() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedControls(SpeedControls other) : this() {
      speedControl_ = other.speedControl_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedControls Clone() {
      return new SpeedControls(this);
    }

    /// <summary>Field number for the "speed_control" field.</summary>
    public const int SpeedControlFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Apollo.Hdmap.SpeedControl> _repeated_speedControl_codec
        = pb::FieldCodec.ForMessage(10, global::Apollo.Hdmap.SpeedControl.Parser);
    private readonly pbc::RepeatedField<global::Apollo.Hdmap.SpeedControl> speedControl_ = new pbc::RepeatedField<global::Apollo.Hdmap.SpeedControl>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Apollo.Hdmap.SpeedControl> SpeedControl {
      get { return speedControl_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedControls);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedControls other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!speedControl_.Equals(other.speedControl_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= speedControl_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      speedControl_.WriteTo(output, _repeated_speedControl_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += speedControl_.CalculateSize(_repeated_speedControl_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedControls other) {
      if (other == null) {
        return;
      }
      speedControl_.Add(other.speedControl_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            speedControl_.AddEntriesFrom(input, _repeated_speedControl_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
